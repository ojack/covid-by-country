(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
const d3 = require('d3')


const labelColor = "rgba(255, 255, 255, 0.6)"

module.exports = ({ layout, data, plot}, emit) => {
  let width= layout.graph.width
  let height = layout.graph.height
  //const startingTransform = d3.zoomIdentity
  // const startingTransform = d3.zoomIdentity.translate( 0.5584153203977849, -2518.799953362894).scale( 4.89734556960086)

  //)( 4.897345569600865, 0.5584153203977849, -2518.799953362894)
  //.translate(width / 2, height / 2).scale(1.2).translate(-width / 2, -height / 2)

  let dataIndex = 20
  let animationInterval = 500
  let showLabels = true

  const countries = data.countries

  // create separate zoom for x and y in order to have independent scaling: https://observablehq.com/@d3/x-y-zoom
  const zoomX = d3.zoom()
  .scaleExtent([0.25, 32])

  const zoomY = d3.zoom()
  .scaleExtent([0.25, 32])

  const zoom = d3.zoom().on("zoom", zoomed)
  //.on("zoom", zoomed)
  const color = plot.color ? plot.color : d3.scaleOrdinal(countries.map(d => d.continent), d3.schemeSet1).unknown("black")

  const outer = d3.create("svg")
  .attr("viewBox", [0, 0, width, height])
  .style('width', width)
  .style('height', height)
  .style('overflow', 'visible')
  .on('mouseleave', function(e) {
  //  e.preventDefault()
    console.log('leave')
    d3.selectAll(".circle").attr("stroke", d => color(d.continent))
    emit('clearTooltip')
  })

  // create elements
  const svg = outer.append("svg")
  .attr("viewBox", [0, 0, width, height])
  .style('width', width)
  .style('height', height)
  // .on('mouseleave', function(e) {
  // //  e.preventDefault()
  // //  d3.selectAll(".circle").attr("stroke", d => color(d.continent))
  //   emit('clearTooltip')
  // })

  const gx = outer.append("g");
  const gy = outer.append("g");

  const yAxis = (g, y) => g
  //   .attr("transform", "translate(0,30)")
  .call( d3.axisLeft(y).ticks(4, ",.0f"))

  const xAxis = (g, x) => g
  .attr('class', 'x-axis')
    .attr('stroke', labelColor)
  .attr("transform", `translate(0,${height})`)
  .call(d3.axisBottom(x).ticks(4, ",.0f"))


  gy.call(yAxis, plot.zy)
  gx.call(xAxis, plot.zx)

  const xLabel = outer.append('text')
    .attr("text-anchor", "end")
    .attr('fill', labelColor)
    .attr("transform", `translate(${width},${height + 40})`)
    .text(`${plot.x.label} →`)

    const yLabel = outer.append('text')
      .attr("text-anchor", "start")
      .attr('fill', labelColor)
      .attr("transform", `translate(10,20)`)
      .text(`↑ ${plot.y.label}`)



  //  console.log('AXIS', ticks)

  const radius = d3.scaleSqrt([0, 4e5], [4, 12])
  //  const radius = () => 5
  const opacity = (val) => val < 0.1 ? 0 : 1

  const {x, y} = plot


  const circles = svg.append("g")
  .attr("stroke", "black")
  .selectAll("points")
  .data(countries, d => d.name)
  .join("svg")
  .attr("class", "circle")
  //  .attr("x", d => x(d[plot.xKey][dataIndex]))
  //  .attr("x", d => plot.x.plot(d, dataIndex))
  // .attr("y", d => plot.y.plot(d, dataIndex))
  .attr("x", d => plot.zx(x.value(d, dataIndex)))
  .attr("y", d => plot.zy(y.value(d, dataIndex)))
  .attr("overflow", "visible")
  .attr("stroke", d => color(d.continent))
  .on('mouseover', function(d, i, arr, el) {
    d3.selectAll(".circle").attr("stroke", d => color(d.continent))
    d3.select(this).attr("stroke", "white")
    emit('setTooltip', d, d3.event)
  })
  .on('click', function(d, i, arr, el){
    //console.log('clicked', d)
    emit('setSelected', d)
  })
  // .on('mouseout', function(d) {
  //   emit('clearTooltip')
  // })
  .style("overflow", "visible")

  const inner = circles.append("circle")
  .attr("r", d => radius(d['total_cases'][dataIndex]))
  .attr("fill", d => color(d.continent))
  //.attr("stroke", d => color(d.continent))
  .attr("stroke-width", 1)


  const text = circles.append("text").text(d => d.name).attr('x', 10).attr("opacity", 1).attr('fill', labelColor)
  const cases = circles.append("text").text(d => plot.x.value(d, dataIndex)).attr('x', 10).attr('y', 15).attr('fill', labelColor)
  //.attr('fill', d => color(d.continent))

  const toggleLabels = (isShowing) => {
  //  console.log('updating text', text)
    text.style('display', isShowing? 'block':'none')
    cases.style('display', isShowing? 'block':'none')
    //  text.attr('opacity', 0)
  }

  const update = (_dataIndex, _animationInterval = 500, _plot) => {
    plot = _plot
    dataIndex = _dataIndex
    animationInterval = _animationInterval
    const {x, y} = _plot

    circles
    .transition()
    .ease(d3.easeLinear)
    .duration(animationInterval)
    .attr("opacity", d => opacity(d['total_cases_per_million'][dataIndex]))
    .attr("x", d => plot.zx(x.value(d, dataIndex)))
    .attr("y", d => plot.zy(y.value(d, dataIndex)))

    // text.transition()
    // .ease(d3.easeLinear)
    // .duration(animationInterval)
    // .attr("opacity", d => d['dx'] > 0.1? 1: 0)
    //> 5 ? 1 : 0))

    inner.transition()
    .ease(d3.easeLinear)
    .duration(animationInterval)
    .attr("r", d => radius(d['total_cases'][dataIndex]))

    cases .text(d => `${Math.round(plot.x.value(d, dataIndex))} (+${Math.round(plot.y.value(d, dataIndex))})`)

    //.attr("stroke-width", d => 5*radius(d['total_cases'][dataIndex])/4)
    //  .attr("fill", d => d3.interpolateRdYlGn(1 - (d['dx'][dataIndex]/5 + 0.5)))
  }

  function zoomed() {
  //  console.log(d3.event)
    emit('update zoom on touch', d3.event)
    setZoomParameters()
  }

  function setZoomParameters() {
    gx.call(xAxis, plot.zx);
    gy.call(yAxis, plot.zy);
    update(dataIndex, animationInterval, plot)
  }

  function resize(_width, _height, _plot) {
    width = _width
    height = _height
    svg.attr("viewBox", [0, 0, width, height])
    .style('width', width)
    .style('height', height)

    outer.attr("viewBox", [0, 0, width, height])
    .style('width', width)
    .style('height', height)

    gy.call(yAxis, plot.zy)
    gx.call(xAxis, plot.zx)

    xLabel.attr("transform", `translate(${width},${height + 40})`)
      .text(`${plot.x.label} →`)

    yLabel.attr("transform", `translate(10,20)`)
        .text(`↑ ${plot.y.label}`)
  }

  // gx.call(zoomX).call(zoomX.transform, layout.graph.transform.x).attr("pointer-events", "none")
  // gy.call(zoomY).call(zoomY.transform, layout.graph.transform.y).attr("pointer-events", "none")

  outer.call(zoom)
  //.call(zoom.transform, layout.graph.transform.x)
setZoomParameters()

  // const resetZoom = () => {
  //   setZoom()
  // //   //  console.log('setting transform', startingTransform)
  // // //    outer.call(zoom).call(zoom.transform, d3.zoomIdentity)
  // //     outer.call(zoomX).call(zoomX.transform, layout.graph.transform.x)
  // //     outer.call(zoomY).call(zoomY.transform, layout.graph.transform.y)
  // }

  const setZoom = () => {
    // outer.call(zoomX).call(zoomX.transform, transformX)
    // outer.call(zoomY).call(zoomY.transform, transformY)
  //  outer.call(zoom).call(zoom.transform, layout.graph.transform.x)
    setZoomParameters()
  }


  window.testZoom = (k = 1, x0 = 0, y0= 0, x1= 0, y1= 0) => {
    outer.call(zoom).call(zoom.transform, d3.zoomIdentity.translate(x0*width, y0*height).scale(k).translate(x1*width, y1*height))
  }
  return {
    node: outer.node(),
    update: update,
    resize: resize,
    toggleLabels: toggleLabels,
    resetZoom: setZoom,
    setZoom: setZoom
  }
}

// older


// const xAxis = () => g => {
//
// const axis = d3.axisBottom(getX(dataIndex)).ticks()
// //.ticks(width / 80, ",")
// //console.log('generating axis', getX(dataIndex))
// return  g
// .attr("transform", `translate(0,${height - margin.bottom})`)
// .call(axis)
// .call(g => g.select(".domain").remove())
// }
//
// const yAxis = g => g
// .attr("transform", `translate(${margin.left},0)`)
// .call(d3.axisLeft(y))
// .call(g => g.select(".domain").remove())
// .call(g => g.append("text")
// .attr("x", margin.left/2 - 10)
// .attr("y", margin.top + 10)
// .attr("fill", "currentColor")
// .attr("text-anchor", "start")
// .text("↑ New cases per million people (7-day rolling avg)"))

// const grid = () => g => g
// .attr("stroke", "currentColor")
// .attr("stroke-opacity", 0.1)
// .call(g => g.append("g")
// .selectAll("line")
// .data(x.ticks())
// .join("line")
// .attr("x1", d => 0.5 + x(d))
// .attr("x2", d => 0.5 + x(d))
// .attr("y1", margin.top)
// .attr("y2", height - margin.bottom))
// .call(g => g.append("g")
// .selectAll("line")
// .data(y.ticks())
// .join("line")
// .attr("y1", d => 0.5 + y(d))
// .attr("y2", d => 0.5 + y(d))
// .attr("x1", margin.left)
// .attr("x2", width - margin.right));

//const color = d3.scaleOrdinal(countries.map(d => d.continent), d3.schemeCategory10).unknown("black")
//const color = (i) => d3.interpolateSpectral(i/data.countries.length)
// svg.selectAll(".x-grid")
// .call(grid())
//  xAxis.call(d3.axisBottom(x).ticks(width / 80, ","))
//  if(dataIndex >= data.dates.length - 3) dataIndex = 0
//const color = (i) => d3.hsl(i/data.countries.length, 50, 50)
//  const dateLabel = svg.append('text').text(data.dates[dataIndex]).attr('y',30).attr('x', width - margin.right).attr('text-anchor', 'end')
//  .call(xAxis());
// xAxis()
// yAxis()
//  setInterval(update, animationInterval)

//    console.log(data.dates[dataIndex])
//  dateLabel.text(data.dates[dataIndex])

},{"d3":68}],2:[function(require,module,exports){
const html = require('choo/html')
const Component = require('choo/component')

module.exports = class CanvasRenderer extends Component {
  constructor (id, state, emit) {
    super(id)
    this.plot = state.plot
    this.data = state.data
    this.tooltip = Object.assign({}, state.tooltip)
    this.plotSettings = state.plotSettings
    state.canvas = this
  //  this.dimensions = state.layout.graph
  }

  load(element) {
    const ctx = element.getContext('2d')
    ctx.strokeRect(75, 140, 150, 110)
    this.ctx = ctx
  //  if(this.plot.zx)
    this.drawPlot(this.plotSettings.trajectories.selected)
  }

  drawPlot(draw = true) {
  //  console.log('drawing', draw)
    this.ctx.strokeStyle = `rgba(200, 200, 200, 0.4)`
    this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height)
    this.ctx.globalCompositeOperation = 'lighter'
    if(draw) {
    this.data.countries.forEach((country) => {
     const color = this.plot.color(country.continent)
    //  console.log(color)
      this.ctx.strokeStyle = color
      this.ctx.globalAlpha = 0.2
      plotTrajectory({
        // y: country[this.plot.yKey],
        // x: country[this.plot.xKey],
        dateArray: this.data.dates,
        d: country,
        plot: this.plot,
        ctx: this.ctx
      })
    })
  }
    if(this.tooltip.content !== null) {
        this.ctx.strokeStyle = `rgba(255, 255, 255, 1)`
        this.ctx.globalAlpha = 1
      //  console.log('tooltip', this.tooltip)
        plotTrajectory({
          plot: this.plot,
          ctx: this.ctx,
          d: this.tooltip.content,
          dateArray: this.data.dates
          // y: this.tooltip[this.plot.yKey],
          // x: this.tooltip[this.plot.xKey]
        })
    }
  }

  update(state) {
//  if(state.graph) {
  const dimensions = state.layout.graph
  const { dateIndex, plot, tooltip, plotSettings } = state

    if(dimensions.width !== this.dimensions.width ||
      dimensions.height !== this.dimensions.height ||
      this.tooltip !== tooltip || this.plot !== plot
      || this.plotSettings.trajectories.selected !== plotSettings.trajectories.selected
  ) {
    //  console.log('resizing canvas')
      this.canvas.width = dimensions.width
      this.canvas.height = dimensions.height
      this.dimensions = Object.assign({}, dimensions)
      this.plot = Object.assign({}, plot)
      this.tooltip = Object.assign({}, tooltip)
      this.plotSettings = Object.assign({}, plotSettings)
      this.drawPlot(plotSettings.trajectories.selected)
    }
//  }
    return false
  }

  createElement({layout, tooltip}) {
    this.dimensions = Object.assign({}, layout.graph)
    this.tooltip =  Object.assign({}, tooltip)
    const canvas = html`<canvas></canvas`
    canvas.width = this.dimensions.width
    canvas.height = this.dimensions.height
    this.canvas = canvas
    return canvas
  }
}

function plotTrajectory({ d, plot, ctx, dateArray}) {
  const {x, y} = plot
  ctx.beginPath()
  const xPlot = plot.zx(x.value(d, 0))
//  console.log(d, y)
  const yPlot = plot.zy(y.value(d, 0))
  ctx.moveTo(xPlot, yPlot)
  dateArray.forEach((date, dateIndex) => {
  //  const yVal = y[dateIndex]
    const xPlot = plot.zx(x.value(d, dateIndex))
    const yPlot = plot.zy(y.value(d, dateIndex))
    ctx.lineTo(xPlot, yPlot)
  })
  ctx.stroke()
}

},{"choo/component":32,"choo/html":33}],3:[function(require,module,exports){
const html = require('choo/html')

// const select = (options = [], selected = null, onClick) => {
//   return options.map(({ label }, index) => html`
//     <div class="dib pa2 pointer dim ${index===selected? "ba": ""}" onclick=${()=> onClick(index)}>${label}</div>
//   `)
// }
//   ${key}: ${select(config.options, config.selected, (i) => emit('update settings', key, i))}

const options = (options = [], selected = null) => html `
  ${options.map(({ label}, index) => html`
  <option value=${index} ${index===selected?"selected":""}>${label}</option>
`)}
`



module.exports = (settings, emit) => {
  const dropdown = (key, config) => html`
    <div class="ma1">
      <label for="${key}" class="pa1"> ${key}</label>
      <select name="${key}" id="key" onchange=${(e) => emit('update settings', key, parseFloat(e.target.value))}>
        ${options(config.options, config.selected)}
      </select>
    </div>`

  const toggle = (key, config) => html`
    <label for="${key}" class="pa1"> ${key}</label>
    <input type="checkbox" id="${key}-check" name="${key}" checked=${config.selected} onchange=${(e) => emit('update settings', key, !config.selected)}>
  `
  return html`<div class="" style="">
      ${Object.entries(settings).map(([key, config]) => config.options ? dropdown(key, config) : toggle(key, config))
      }
  </div>`
}

},{"choo/html":33}],4:[function(require,module,exports){
const data = require('./../data-processing/covid-cases-processed.json')
const processData = require('./process-data.js')
const d3 = require('d3')

module.exports = (state, emitter) => {
  state.data = processData(data)
  state.dateIndex = 100
  state.updateInterval = 200
  state.isPlaying = true
  state.tooltip = {
    content: null,
    point: [0, 0]
  }
  const plots = require('./plot-types.js')(state)
  state.plot = plots.currentPlot

  const scaleTypes = ['linear', 'log']
  state.plotSettings = {
    scale: {
      options: scaleTypes.map((label) => ({label: label, key: label})),
      selected: 0
    },
    type: {
      options: Object.values(plots.plotTypes),
      selected: Object.keys(plots.plotTypes).indexOf('incidence')
    },
    labels : {
      selected: true ,
      label: 'show labels'
    },
    trajectories: {
      selected: true,
      label: 'show trajectories'
    }
    // ,
    // autoZoom: {
    //   selected: false,
    //   label: 'auto zoom'
    // }
  }

  // when forward or back is used
  emitter.on('navigate', () => {
    loadFromParams()
  })

  function loadFromParams() {
    console.log(state.query)
    // populate initial state based on query params
    Object.entries(state.query).forEach(([key, value]) => {
      if(state.plotSettings[key]) {
        if(key === 'type') {
          const selectedIndex = Object.keys(plots.plotTypes).indexOf(value)
          if(selectedIndex > -1) state.plotSettings[key].selected = selectedIndex
        } else if (key === 'scale'){
          const selectedIndex = scaleTypes.indexOf(value)
          if(selectedIndex > -1) state.plotSettings[key].selected = selectedIndex
        }
        else {
          const bool = String(value).toLowerCase() === "true" ? true : false
          state.plotSettings[key].selected = bool
        }
      }
    })

    updatePlot()
  }
  loadFromParams()

  state.selected = null

  let updateInterval = setInterval(incrementDate, state.updateInterval)

  emitter.on('update settings', (key, index) => {
    if(key) state.plotSettings[key].selected = index
    setUrl()
    if(key === 'scale' || key === 'type') updatePlot()
    emitter.emit('render')
  })



  // update url to reflect current parameters
  function setUrl() {
    const getValue = (value) => value.options ? value.options[value.selected].key : value.selected
    const queryString = `${Object.entries(state.plotSettings).map(([key, value]) => `${key}=${getValue(value)}`).join('&')}`
  //  var pageUrl = '?' + queryString;
//  console.log('')
  //  window.history.pushState('', '', `?${queryString}`)
    emitter.emit('pushState', `?${queryString}`)
  }

  emitter.on('togglePlay', () => {
    state.isPlaying = !state.isPlaying
    if(!state.isPlaying) {
      stopPlaying()
    } else {
      startPlaying()
    }
    emitter.emit('render')
  })

  emitter.on('setDate', (dateIndex) => {
    state.dateIndex = dateIndex
    emitter.emit('render')
  })

  emitter.on('setTooltip', (d, e) => {
  //  console.log(point)
    state.tooltip.content = Object.assign({}, d)
    state.tooltip.point = [e.pageX, e.pageY]
    emitter.emit('render')
  })

  emitter.on('clearTooltip', (d) => {
    state.tooltip.content = null
    emitter.emit('render')
  })

  let z = d3.zoomIdentity;

  function updatePlot() {
    state.plot = plots.setPlot({
      log: state.plotSettings.scale.selected == 0 ? false: true,
      type: Object.keys(plots.plotTypes)[state.plotSettings.type.selected]
    })
  //  if(state.animatedGraph) state.animatedGraph.graph.resetZoom()
    emitter.emit('layout:updateScales')
  }

  function stopPlaying() {
    state.isPlaying = false
    clearInterval(updateInterval)
  }

  function startPlaying() {
    if(state.dateIndex >= state.data.dates.length)
    state.dateIndex = 0
    updateInterval = setInterval(incrementDate, state.updateInterval)
  }

  function incrementDate() {
    if(state.dateIndex < state.data.dates.length - 1) {
      state.dateIndex++
    } else {
      stopPlaying()
      // stop playing
    }
    // if(state.plotSettings.autoZoom.selected === true) {
    //   const plot = state.plot
    //   updateExtent(
    //     plot.x.dailyExtent[state.dateIndex]*plot.x.scaleBy,
    //     plot.y.dailyExtent[state.dateIndex]*plot.y.scaleBy
    //   )
    // }
    emitter.emit('render')
  }

}

},{"./../data-processing/covid-cases-processed.json":11,"./plot-types.js":6,"./process-data.js":7,"d3":68}],5:[function(require,module,exports){
const d3 = require('d3')
const zoom = require('./zoom.js')()

module.exports = (state, emitter) => {
  state.layout = {
    graph : {
      width: 0,
      height: 0,
      margin: { top: 40, bottom: 200, left: 50, right: 40 },
    },
    panel: { width: 300, isOpen: false }
  }

  resize(false)
  updateScales()

  emitter.on('togglePanel', () => {
    state.layout.panel.isOpen = !state.layout.panel.isOpen
    resize()
    emitter.emit('render')
  })

  emitter.on('layout:updateScales', () => {
    zoom.reset()
    updateScales()
  })

  emitter.on('update zoom on touch', (e) => {
    zoom.updateFromTouchEvent(e)
    updateScales()
    emitter.emit('render')
  })

  emitter.on('setSelected', (d) => {
    const xExtent = d3.extent(d[state.plot.x.key]).map((val) => val * state.plot.x.scaleBy)
    const yExtent = d3.extent(d[state.plot.y.key]).map((val) => val * state.plot.x.scaleBy)
    console.log(xExtent, yExtent)
    state.tooltip.content = d
    updateExtent(xExtent, yExtent)
    emitter.emit('render')
  })

  window.addEventListener('resize', () => {
    resize()
    emitter.emit('render')
  })

  function resize (_updateZoomTransform = true) {
    console.log('resizing state')
    const panel = state.layout.panel.isOpen ? state.layout.panel.width : false
    state.layout.graph.width = window.innerWidth - panel - state.layout.graph.margin.left - state.layout.graph.margin.right
    state.layout.graph.height = window.innerHeight - state.layout.graph.margin.top - state.layout.graph.margin.bottom
    if(_updateZoomTransform) updateScales()
  }

  function updateScales () {
    const transformX = state.layout.graph.transformX
    const transformY = state.layout.graph.transformY
    const plot = state.plot
    plot.zx = zoom.tx().rescaleX(plot.x.scale()).interpolate(d3.interpolateRound)
    plot.zy = zoom.ty().rescaleY(plot.y.scale()).interpolate(d3.interpolateRound)
    if(state.canvas) state.canvas.drawPlot(state.plotSettings.trajectories.selected)
  }

  function updateExtent(x, y) {
    const getTransforms  = scaleToDomain(
      state.plot.x.scale()(x[0]),
      state.plot.x.scale()(x[1]),
      state.plot.y.scale()(y[0]),
      state.plot.y.scale()(y[1]),
      state.layout.graph.width,
      state.layout.graph.height
    )
    zoom.updateExtent(getTransforms.x, getTransforms.y)
    updateScales()
    state.animatedGraph.graph.setZoom()
  }

  const scaleToDomain = (x0, x1,y0, y1, width, height) => {
    const yScale = height/(y0 - y1) - 0.1
    const xScale = height/(x1 - x0) - 0.1
    return {
      x: d3.zoomIdentity.translate(0, 0).scale(xScale),
      y: d3.zoomIdentity.translate(0, -y0*(yScale - 1)).scale(yScale)
    }
  }


}

},{"./zoom.js":10,"d3":68}],6:[function(require,module,exports){
// functions for plotting x and y as a function of time and value
// usage: x(dateIndex)(value)
const d3 = require('d3')

const x = (dateIndex) => d3.scaleLog([1, 45000], [0, state.layout.graph.width]).clamp(true)
const y = (dateIndex) => d3.scaleLog([0.1, Math.max(1000, state.data.max['new_cases_smoothed_per_million'])], [state.layout.graph.height,0]).clamp(true)

module.exports = (state) => {
  const color = d3.scaleOrdinal(state.data.countries.map(d => d.continent), d3.schemeSet1).unknown("black")

  // functions rather than fixed so that will update as graph is updated
  const xRange = () => [0, state.layout.graph.width]
  const yRange = () => [state.layout.graph.height, 0]

  const dataSets = {
    '7-day 100' : {
      label: 'new cases (last 7 days) per 100,000',
      scaleBy: 0.1,
      logMin: 0.1,
      key: '7_day_incidence_per_million'
    },
    'time': {
      value: (d, i) => i,
      label: 'time',
      extent: [0, state.data.dates.length]
    },
    'total cases 100': {
      scaleBy: 0.1,
      label: 'cases since start of epidemic per 100,000',
      logMin: 1,
      key: 'total_cases_per_million'
    },
    'dx': {
      label: 'change in 7-day incidence',
      scaleBy: 0.1,
      key: 'dx2',
    },
    'percent change': {
      label: 'percent change in cases',
      key: 'dx2percent',
      scaleBy: 1
    }
  }

  Object.values(dataSets).forEach((obj) => {
    if(!obj.value) {
      obj.value = (d, i) => d[obj.key][i]*obj.scaleBy
    }
    obj.dailyExtent = state.data.dailyExtent[obj.key]
    obj.extent = state.data.extent[obj.key]
  })

  const plotTypes = {
    // {
    //   label: 'new cases over time',
    //   x: 'time',
    //   y: '7-day 100'
    // },
    'incidence': {
      label: '7-day incidence',
      x: 'total cases 100',
      y: '7-day 100',
      key: 'incidence'
    },
    'incidencechange': {
      label: 'change in incidence',
      x: '7-day 100',
      y: 'dx',
      key: 'incidencechange'
    },
    // {
    //   label: 'change in incidence (%)',
    //   x: '7-day 100',
    //   y: 'percent change'
    // }
  }

  const getAxis = ({ log = false, data, range}) => {
    let scale = () => d3.scaleLinear([data.extent[0]*data.scaleBy, data.extent[1]*data.scaleBy], range())
    if(log === true && data.logMin) {
      // different minumum domain for log plot, because cannot be zero
      scale = () => d3.scaleLog([data.logMin, data.extent[1]*data.scaleBy], range()).clamp(true)
    }
    console.log('scale', scale)
    return Object.assign({}, data, {
      scale: scale
    })
  }

  let currentPlot = null

  const setPlot = ({ type, log = false}) => {
    const plot = Object.assign({}, plotTypes[type])
  //  console.log('setting plot', index, plot, log, plotTypes)
    plot.x = getAxis({ data: dataSets[plot.x], range: xRange, log: log })
    plot.y = getAxis({ data: dataSets[plot.y], range: yRange, log: log})
    // plot.zx = state.layout.graph.transformX.rescaleX(plot.x.scale()).interpolate(d3.interpolateRound)
    // plot.zy = state.layout.graph.transformY.rescaleY(plot.y.scale()).interpolate(d3.interpolateRound)
    plot.color = color
    console.log(' got plot', plot)
    currentPlot = plot
    return plot
  }

  setPlot({ type: 'incidence', log: false })

  return {
    plotTypes: plotTypes,
    currentPlot: currentPlot,
    setPlot: setPlot
  }

}

// return [{
//   label: 'new cases over time',
//   color:  d3.scaleOrdinal(state.data.countries.map(d => d.continent), d3.schemeSet1).unknown("black"),
//   x: {
//     label: 'time',
//     scale:  () => d3.scaleLinear([0, state.data.dates.length], [0, state.layout.graph.width]),
//     value: (d, i) => i
//   },
//   y: {
//     label: 'new cases per million',
//     value: (d, i) => d['new_cases_smoothed_per_million'][i],
//     scale: () => d3.scaleLog([0.1, Math.max(1000, state.data.extent['new_cases_smoothed_per_million'])], [state.layout.graph.height,0]).clamp(true)
//   }
// }]
// 'new cases' : {
//   label: 'new cases per million',
//   value: (d, i) => d['new_cases_smoothed_per_million'][i],
//   domain: [0, Math.max(1000, state.data.extent['new_cases_smoothed_per_million'][1])],
//   logMin: 0.1
//   // min: 0,
//   // minLog: 0.1,
//   // max: Math.max(1000, state.data.max['new_cases_smoothed_per_million'])
// },
// '7-day' : {
//   label: '7-day incidence per million',
//   value: (d, i) => d['7_day_incidence_per_million'][i],
//   domain: [0, state.data.extent['7_day_incidence_per_million'][1]],
//   logMin: 0.1
//   // min: 0,
//   // minLog: 0.1,
//   // max: Math.max(1000, state.data.extent['new_cases_smoothed_per_million'])
// },
// state.plot = {
//   x: {
//     label: 'total cases per million',
//     scale:  () => d3.scaleLinear([0, 30000], [0, state.layout.graph.width]),
//     value: (d, i) => d['total_cases_per_million'][i]
//   },
//   y: {
//     label: 'new cases per million',
//     value: (d, i) => d['new_cases_smoothed_per_million'][i],
//     scale: () => d3.scaleLinear([0, Math.max(400, state.data.extent['new_cases_smoothed_per_million'])], [state.layout.graph.height,0])
//   }
// }

// new cases over time, log
// state.plot = {
//   color:  d3.scaleOrdinal(state.data.countries.map(d => d.continent), d3.schemeSet1).unknown("black"),
//   x: {
//     label: 'time',
//     scale:  () => d3.scaleLinear([0, state.data.dates.length], [0, state.layout.graph.width]),
//     value: (d, i) => i
//   },
//   y: {
//     label: 'new cases per million',
//     value: (d, i) => d['new_cases_smoothed_per_million'][i],
//     scale: () => d3.scaleLog([0.1, Math.max(1000, state.data.extent['new_cases_smoothed_per_million'])], [state.layout.graph.height,0]).clamp(true)
//   }
// }

// // new cases over time
// state.plot = {
//   color:  d3.scaleOrdinal(state.data.countries.map(d => d.continent), d3.schemeSet1).unknown("black"),
//   x: {
//     label: 'time',
//     scale:  () => d3.scaleLinear([50, state.data.dates.length], [0, state.layout.graph.width]),
//     value: (d, i) => i
//   },
//   y: {
//     label: 'new cases per million',
//     value: (d, i) => d['new_cases_smoothed_per_million'][i],
//     scale: () => d3.scaleLinear([0, Math.max(400, state.data.extent['new_cases_smoothed_per_million'])], [state.layout.graph.height,0])
//   }
// }

// state.plot = {
//   x: {
//     label: 'time',
//     scale:  () => d3.scaleLinear([0, state.data.dates.length], [0, state.layout.graph.width]),
//     value: (d, i) => i
//   },
//     y: {
//       label: 'change in new cases',
//       value: (d, i) => d['dx'][i],
//       scale: () => d3.scaleLinear([-20, 20], [state.layout.graph.height, 0])
//     }
//
// }

// state.plot = {
//   color: color,
//   x: {
//     label: 'total cases per million',
//     scale:  () => d3.scaleLog([1, 45000], [0, state.layout.graph.width]).clamp(true),
//     value: (d, i) => d['total_cases_per_million'][i]
//   },
//   y: {
//     label: 'new cases per million',
//     value: (d, i) => d['new_cases_smoothed_per_million'][i],
//     scale: () => d3.scaleLog([0.1, Math.max(1000, state.data.max['new_cases_smoothed_per_million'])], [state.layout.graph.height,0]).clamp(true)
//   }
// }
//
// // linear plot dx
// state.plot = {
//   color: color,
//   x: {
//     label: 'new cases per million',
//     scale: () => d3.scaleLinear([0, 400], [0, state.layout.graph.width]),
//     value: (d, i) => d['new_cases_smoothed_per_million'][i]
//   },
//   y: {
//     label: 'change in new cases',
//     value: (d, i) => d['dx'][i],
//     scale: () => d3.scaleLinear([-20, 20], [state.layout.graph.height, 0])
//   }
// }

// // log plot dx
// state.plot = {
//   color: color,
//   x: {
//     label: 'new cases per million',
//     scale: () => d3.scaleLog([0.1, Math.max(1000, state.data.max['new_cases_smoothed_per_million'])], [0, state.layout.graph.width]).clamp(true),
//     value: (d, i) => d['new_cases_smoothed_per_million'][i]
//   },
//   y: {
//     label: 'change in new cases',
//     value: (d, i) => d['dx'][i],
//     scale: () => d3.scaleLinear([-20, 20], [state.layout.graph.height, 0])
//   }
// }

},{"d3":68}],7:[function(require,module,exports){
const d3 = require('d3')

module.exports = (data) => {
  // filter data by countries with population over 10000
  const countries = data.countries.filter((d) => d.population > 1000000).filter((d) => d.name !== "World")
      .sort((a, b) => d3.descending(a.population, b.population))

  // // change in 7-day incidence per day
  // countries.forEach((country, i) => {
  // //  d.color = d3.hsl(355*i/countries.length, 0.9, 0.3)
  //   const dx = []
  //   dx.push(0)
  //   const newCases = country['7_day_incidence_per_million']
  //   newCases.forEach((dailyNew, i) => {
  //     if(i !== 0) {
  //       const change = dailyNew - newCases[i-1]
  //       dx.push(change)
  //     }
  //   })
  //   country.dx = dx
  // })

  // Percent change in the number of newly confirmed cases per million in past seven days, compared to seven days prior.
  // change in 7-day incidence per day
  // calculated similarly to: https://www.who.int/docs/default-source/coronaviruse/situation-reports/20201012-weekly-epi-update-9.pdf
  countries.forEach((country, i) => {
  //  d.color = d3.hsl(355*i/countries.length, 0.9, 0.3)
    const dx2 = []
    const dx2percent = []
  //  dx2.push(0)
    const newCases = country['7_day_incidence_per_million']
    newCases.forEach((dailyNew, i) => {
      if(i > 14) {
        const prevCases = newCases[i-7]
        if(prevCases === 0) {
            dx2.push(0)
            dx2percent.push(0)
        } else {
          const change = dailyNew - newCases[i-7]
          //const percentChange = change/Math.abs(newCases[i-7])
          const percentChange = change/Math.abs(newCases[i-7])
          dx2.push(change)
          dx2percent.push(percentChange)
        //  console.log(dailyNew, newCases[i-7], percentChange)
        }
      } else {
        dx2.push(0)
        dx2percent.push(0)
      }
    })
    country.dx2 = dx2
    country.dx2percent = dx2percent
  })

  console.log('COUNTRIES', countries)

  // calculate daily and overall maximum
  const keys = ['total_cases', 'new_cases_smoothed_per_million', 'total_cases_per_million', '7_day_incidence_per_million', 'dx2', 'dx2percent']
  const extent = {}

  keys.forEach((key) => {
    extent[key] = [1000, 0] // default 'min' and 'max' values to compare ro
  })

  //const dailyExtentObj = data.dates.map((date, dateIndex) => {
    const dailyExtentObj = {}
    Object.keys(extent).forEach((key) => {
      const extentByDay = data.dates.map((date, dateIndex) => {
        const dailyExtent = [1000, 0]
        Object.values(countries).forEach((country) => {
          if(country[key][dateIndex] > dailyExtent[1]){
            // update daily max
            dailyExtent[1] = country[key][dateIndex]
            if(country[key][dateIndex] > extent[key][1]){
              extent[key][1] = country[key][dateIndex]
            }
          }
          if(country[key][dateIndex] < dailyExtent[0]){
            // update daily min
            dailyExtent[0] = country[key][dateIndex]
            if(country[key][dateIndex] < extent[key][0]){
              extent[key][0] = country[key][dateIndex]
            }
          }
        })
        return dailyExtent
      })
      dailyExtentObj[key] = extentByDay
    })


    // Object.values(countries).forEach((country) => {
    //   Object.keys(extent).forEach((key) => {
    //     // if max is greater than this mac
    //     if(country[key][dateIndex] > dailyExtent[1]){
    //       // update daily max
    //       dailyExtent[key][1] = country[key][dateIndex]
    //       if(country[key][dateIndex] > extent[key][1]){
    //         extent[key][1] = country[key][dateIndex]
    //       }
    //     }
    //     if(country[key][dateIndex] < dailyExtent[key][0]){
    //       // update daily min
    //       dailyExtent[key][0] = country[key][dateIndex]
    //       if(country[key][dateIndex] < extent[key][0]){
    //         extent[key][0] = country[key][dateIndex]
    //       }
    //     }
    //   })
    // })
  //  return dailyExtent
//  })

//  let minRange = {'new_cases_smoothed_per_million': 10,    'total_cases_per_million': 6}

//  const MAX_Y = 450
  // let dx = minRange['new_cases_smoothed_per_million']
  // let y = minRange[ 'total_cases_per_million']
  // filter max values so that there is a minimum value, and the axes are always increasing
//   const maxPerDay = dailyMax.map((daily) => {
//     const newDaily = daily
//     if(daily['new_cases_smoothed_per_million'] < minRange['new_cases_smoothed_per_million']) {
//       newDaily['new_cases_smoothed_per_million'] = minRange['new_cases_smoothed_per_million']
//     }
//     if(daily['total_cases_per_million'] < minRange['total_cases_per_million']) {
//       newDaily['total_cases_per_million'] = minRange['total_cases_per_million']
//     }
//     minRange = Object.assign({}, newDaily)
// //    if(newDaily['new_cases_smoothed_per_million'] > MAX_Y) newDaily['new_cases_smoothed_per_million'] = MAX_Y
//     return newDaily
//   })
 console.log(dailyExtentObj)

  return {
    countries: countries,
    dailyExtent: dailyExtentObj,
    dates: data.dates,
    extent: extent
  }

}

},{"d3":68}],8:[function(require,module,exports){
const html = require('choo/html')
const Component = require('choo/component')
const AnimatedScatter = require('./animated-scatter.js')



module.exports = class AnimatedGraph extends Component {
  constructor (id, state, emit) {
    super(id)
    this.data = state.data
    this.dateIndex = state.dateIndex
  //  this.dimensions = Object.assign({}, state.layout.graph)
    this.local = state.components[id] = {}
    this.state = state
    this.emit = emit
    this.plot = state.plot
    state.animatedGraph = this
    this.plotSettings = Object.assign({}, state.plotSettings)
  }

  load (element) {
    this.graph = AnimatedScatter(this.state, this.emit)
    window.graph = this.graph
    element.appendChild(this.graph.node)
  }

  update ({ dateIndex, dimensions, plot, plotSettings }) {
    this.graph.toggleLabels(plotSettings.labels.selected)
    if(dateIndex != this.dateIndex) {
      this.graph.update(dateIndex, this.state.updateInterval, plot)
    }
  //  console.log(layout.graph, this.layout.graph)
    if(dimensions.width !== this.dimensions.width || dimensions.height !== this.dimensions.height) {
      console.log(this.dimensions, dimensions)
      this.graph.resize(dimensions.width, dimensions.height, plot)
      this.dimensions = Object.assign({}, dimensions)
    }
    if(this.plot !== plot) {
        console.log('plot', this.plot, plot)
      this.graph.resize(dimensions.width, dimensions.height, plot)
      this.plot = plot
    }
  //   console.log(this.plotSettings.labels, plotSettings.labels)
  //   if(this.plotSettings.labels.selected !== plotSettings.labels.selected) {
  // //    this.plotSettings = Object.assign({}, plotSettings)
  //     this.graph.toggleLabels(plotSettings.labels.selected)
  //   }
    // if (center.join() !== this.local.center.join()) {
    //   this.map.setCenter(center)
    // }

    return false
  }

  createElement ({ dateIndex, dimensions }) {
    this.dateIndex = dateIndex
    this.dimensions = Object.assign({}, dimensions)
    //this.local.center = center
    return html`<div></div>`
  }
}

},{"./animated-scatter.js":1,"choo/component":32,"choo/html":33}],9:[function(require,module,exports){
const html = require('choo/html')

module.exports = (state, emit) => {
  if(state.tooltip.content!==null) {
    const t = state.tooltip.content
    const point = state.tooltip.point
    const yOff = point[1] > 300 ? point[1] - 200 : point[1] + 100
    const xOff = point[0] > window.innerWidth - 300 ? window.innerWidth - 300: point[0]
    const {x, y} = state.plot
    return html`<div class="absolute pa2 f6 w5" style="top:${yOff}px;left:${xOff}px;pointer-events:none;background:rgba(100, 100, 100, 0.9);transition:top 0.4s, left 0.4s">
      <div class="flex justify-between"><span>${t.name} </span><span class="f7">${state.data.dates[state.dateIndex]}</span></div>
      <div>${Math.round(y.value(t, state.dateIndex)*10)/10} ${y.label}</div>
      <div>${Math.round(x.value(t, state.dateIndex)*10)/10} ${x.label}</div>
    </div>`
  } else {
    return ''
  }
}

},{"choo/html":33}],10:[function(require,module,exports){
const d3 = require('d3')

module.exports = () => {

    let zx = d3.zoom()
    let zy = d3.zoom()

    // dummy elements to store zoom because current transform not stored in zoom but on element
    const _gx = d3.create("g")
    const _gy = d3.create("g")
    _gx.call(zx)
    _gy.call(zy)
    // get current transform
    const _tx = () => d3.zoomTransform(_gx.node())
    const _ty = () => d3.zoomTransform(_gy.node())

    let z = d3.zoomIdentity;

    const reset = () => {
      console.log('resetting zoom')
      // zx = d3.zoom()
      // zy = d3.zoom()
  //    z = d3.zoomIdentity
      _gx.call(zx.transform, d3.zoomIdentity)
      _gy.call(zy.transform, d3.zoomIdentity)
      console.log(zx, _tx())
    }

    const updateExtent = function(xTransforms, yTransforms) {
      zx.transform(_gx, xTransforms)
      zy.transform(_gy, yTransforms)
    }

    //
    const updateFromTouchEvent = (e) => {
      //console.log(e.sourceEvent)
      const t = e.transform;
      const k = t.k / z.k;

      // let tx = state.layout.graph.transformX
      // let ty = state.layout.graph.transformY
      //  const point = e.sourceEvent ? d3.pointer(e) : [width / 2, height / 2];
      const shift = e.sourceEvent && e.sourceEvent.shiftKey;
      const point =  e.sourceEvent ? [e.sourceEvent.offsetX, e.sourceEvent.offsetY] : [ 0, state.layout.graph.height]
      if (k === 1) {
        // tx = tx.translate((t.x - z.x)/tx.k, 0)
        // ty = ty.translate(0, (t.y - z.y) / ty.k)

        // testing zoom
        _gx.call(zx.translateBy, (t.x - z.x)/_tx().k, 0)
        _gy.call(zy.translateBy, 0, (t.y - z.y) / _ty().k)
      } else {
        // tx = tx.scale(shift ? 1/k : k)
        // ty = ty.translate(0, - state.layout.graph.height*(k-1)).scale(k)

        // testing zoom
        _gx.call(zx.scaleBy, shift ? 1 / k : k, point)
        _gy.call(zy.scaleBy, k, point)
      }
      // state.layout.graph.transformX = tx
      // state.layout.graph.transformY = ty
      z = t
    }

    return {
      tx: _tx,
      ty: _ty,
      reset: reset,
      updateFromTouchEvent: updateFromTouchEvent,
      updateExtent: updateExtent
    }
}

},{"d3":68}],11:[function(require,module,exports){
module.exports={"dates":["2020-01-01","2020-01-02","2020-01-03","2020-01-04","2020-01-05","2020-01-06","2020-01-07","2020-01-08","2020-01-09","2020-01-10","2020-01-11","2020-01-12","2020-01-13","2020-01-14","2020-01-15","2020-01-16","2020-01-17","2020-01-18","2020-01-19","2020-01-20","2020-01-21","2020-01-22","2020-01-23","2020-01-24","2020-01-25","2020-01-26","2020-01-27","2020-01-28","2020-01-29","2020-01-30","2020-01-31","2020-02-01","2020-02-02","2020-02-03","2020-02-04","2020-02-05","2020-02-06","2020-02-07","2020-02-08","2020-02-09","2020-02-10","2020-02-11","2020-02-12","2020-02-13","2020-02-14","2020-02-15","2020-02-16","2020-02-17","2020-02-18","2020-02-19","2020-02-20","2020-02-21","2020-02-22","2020-02-23","2020-02-24","2020-02-25","2020-02-26","2020-02-27","2020-02-28","2020-02-29","2020-03-01","2020-03-02","2020-03-03","2020-03-04","2020-03-05","2020-03-06","2020-03-07","2020-03-08","2020-03-09","2020-03-10","2020-03-11","2020-03-12","2020-03-13","2020-03-14","2020-03-15","2020-03-16","2020-03-17","2020-03-18","2020-03-19","2020-03-20","2020-03-21","2020-03-22","2020-03-23","2020-03-24","2020-03-25","2020-03-26","2020-03-27","2020-03-28","2020-03-29","2020-03-30","2020-03-31","2020-04-01","2020-04-02","2020-04-03","2020-04-04","2020-04-05","2020-04-06","2020-04-07","2020-04-08","2020-04-09","2020-04-10","2020-04-11","2020-04-12","2020-04-13","2020-04-14","2020-04-15","2020-04-16","2020-04-17","2020-04-18","2020-04-19","2020-04-20","2020-04-21","2020-04-22","2020-04-23","2020-04-24","2020-04-25","2020-04-26","2020-04-27","2020-04-28","2020-04-29","2020-04-30","2020-05-01","2020-05-02","2020-05-03","2020-05-04","2020-05-05","2020-05-06","2020-05-07","2020-05-08","2020-05-09","2020-05-10","2020-05-11","2020-05-12","2020-05-13","2020-05-14","2020-05-15","2020-05-16","2020-05-17","2020-05-18","2020-05-19","2020-05-20","2020-05-21","2020-05-22","2020-05-23","2020-05-24","2020-05-25","2020-05-26","2020-05-27","2020-05-28","2020-05-29","2020-05-30","2020-05-31","2020-06-01","2020-06-02","2020-06-03","2020-06-04","2020-06-05","2020-06-06","2020-06-07","2020-06-08","2020-06-09","2020-06-10","2020-06-11","2020-06-12","2020-06-13","2020-06-14","2020-06-15","2020-06-16","2020-06-17","2020-06-18","2020-06-19","2020-06-20","2020-06-21","2020-06-22","2020-06-23","2020-06-24","2020-06-25","2020-06-26","2020-06-27","2020-06-28","2020-06-29","2020-06-30","2020-07-01","2020-07-02","2020-07-03","2020-07-04","2020-07-05","2020-07-06","2020-07-07","2020-07-08","2020-07-09","2020-07-10","2020-07-11","2020-07-12","2020-07-13","2020-07-14","2020-07-15","2020-07-16","2020-07-17","2020-07-18","2020-07-19","2020-07-20","2020-07-21","2020-07-22","2020-07-23","2020-07-24","2020-07-25","2020-07-26","2020-07-27","2020-07-28","2020-07-29","2020-07-30","2020-07-31","2020-08-01","2020-08-02","2020-08-03","2020-08-04","2020-08-05","2020-08-06","2020-08-07","2020-08-08","2020-08-09","2020-08-10","2020-08-11","2020-08-12","2020-08-13","2020-08-14","2020-08-15","2020-08-16","2020-08-17","2020-08-18","2020-08-19","2020-08-20","2020-08-21","2020-08-22","2020-08-23","2020-08-24","2020-08-25","2020-08-26","2020-08-27","2020-08-28","2020-08-29","2020-08-30","2020-08-31","2020-09-01","2020-09-02","2020-09-03","2020-09-04","2020-09-05","2020-09-06","2020-09-07","2020-09-08","2020-09-09","2020-09-10","2020-09-11","2020-09-12","2020-09-13","2020-09-14","2020-09-15","2020-09-16","2020-09-17","2020-09-18","2020-09-19","2020-09-20","2020-09-21","2020-09-22","2020-09-23","2020-09-24","2020-09-25","2020-09-26","2020-09-27","2020-09-28","2020-09-29","2020-09-30","2020-10-01","2020-10-02","2020-10-03","2020-10-04","2020-10-05","2020-10-06","2020-10-07","2020-10-08","2020-10-09","2020-10-10","2020-10-11","2020-10-12","2020-10-13","2020-10-14","2020-10-15","2020-10-16","2020-10-17","2020-10-18","2020-10-19","2020-10-20","2020-10-21","2020-10-22","2020-10-23","2020-10-24","2020-10-25","2020-10-26","2020-10-27","2020-10-28","2020-10-29","2020-10-30","2020-10-31","2020-11-01","2020-11-02","2020-11-03","2020-11-04","2020-11-05","2020-11-06","2020-11-07","2020-11-08","2020-11-09","2020-11-10","2020-11-11","2020-11-12","2020-11-13","2020-11-14","2020-11-15","2020-11-16","2020-11-17","2020-11-18","2020-11-19","2020-11-20","2020-11-21","2020-11-22","2020-11-23","2020-11-24","2020-11-25","2020-11-26","2020-11-27","2020-11-28","2020-11-29","2020-11-30","2020-12-01","2020-12-02","2020-12-03","2020-12-04","2020-12-05","2020-12-06","2020-12-07","2020-12-08","2020-12-09","2020-12-10","2020-12-11","2020-12-12","2020-12-13","2020-12-14","2020-12-15","2020-12-16","2020-12-17"],"countries":[{"iso":"AFG","continent":"Asia","population":38928341,"name":"Afghanistan","population_density":54.422,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,4,4,4,4,5,7,8,11,12,13,15,16,18,20,24,25,29,30,34,41,43,76,80,91,107,118,146,175,197,240,275,300,338,368,424,445,485,532,556,608,666,715,785,841,907,934,997,1027,1093,1177,1236,1331,1464,1532,1704,1830,1940,2127,2291,2470,2705,2895,3225,3393,3564,3781,4042,4403,4687,4968,5227,5640,6054,6403,6665,7073,7654,8146,8677,9219,10001,10585,11176,11834,12459,13039,13662,14528,15208,15753,16512,17270,18057,18972,19554,20345,20920,21462,22146,22894,23550,24106,24770,25531,26314,26878,27536,27882,28428,28837,29147,29471,29705,30165,30441,30606,30957,31228,31507,31826,32012,32314,32662,32941,33180,33374,33584,33898,34184,34356,34441,34595,34730,34984,35060,35219,35279,35453,35493,35605,35717,35918,35978,36026,36147,36253,36358,36463,36532,36665,36700,36701,36737,36773,36820,36928,37006,37046,37083,37153,37260,37336,37422,37497,37542,37590,37667,37710,37750,37852,37885,37944,37990,38045,38061,38103,38119,38130,38133,38155,38159,38193,38243,38288,38304,38324,38398,38494,38520,38544,38572,38606,38641,38716,38772,38815,38855,38872,38897,38919,39044,39074,39096,39145,39170,39186,39192,39227,39239,39254,39268,39285,39290,39297,39341,39422,39486,39548,39616,39693,39703,39799,39870,39928,39994,40026,40088,40141,40200,40287,40369,40510,40626,40687,40768,40833,40937,41032,41145,41268,41334,41425,41501,41633,41728,41814,41935,41975,42033,42159,42297,42463,42609,42795,42969,43035,43240,43468,43681,43924,44177,44363,44503,44706,44988,45174,45384,45600,45723,45844,46116,46274,46516,46718,46837,46837,47072,47306,47516,47716,47851,48053,48116,48229,48527,48718,48952,49161,49378],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.026,0.026,0.026,0.026,0.026,0.026,0.026,0.026,0.051,0.103,0.103,0.103,0.103,0.128,0.18,0.206,0.283,0.308,0.334,0.385,0.411,0.462,0.514,0.617,0.642,0.745,0.771,0.873,1.053,1.105,1.952,2.055,2.338,2.749,3.031,3.75,4.495,5.061,6.165,7.064,7.706,8.683,9.453,10.892,11.431,12.459,13.666,14.283,15.618,17.108,18.367,20.165,21.604,23.299,23.993,25.611,26.382,28.077,30.235,31.751,34.191,37.608,39.354,43.773,47.009,49.835,54.639,58.852,63.45,69.487,74.367,82.845,87.16,91.553,97.127,103.832,113.105,120.401,127.619,134.272,144.882,155.517,164.482,171.212,181.693,196.618,209.256,222.897,236.82,256.908,271.91,287.092,303.994,320.05,334.949,350.953,373.199,390.667,404.667,424.164,443.636,463.852,487.357,502.308,522.627,537.398,551.321,568.891,588.106,604.958,619.24,636.297,655.846,675.96,690.448,707.351,716.239,730.265,740.771,748.735,757.058,763.069,774.885,781.975,786.214,795.23,802.192,809.359,817.553,822.331,830.089,839.029,846.196,852.335,857.319,862.713,870.779,878.126,882.545,884.728,888.684,892.152,898.677,900.629,904.714,906.255,910.725,911.752,914.629,917.506,922.67,924.211,925.444,928.552,931.275,933.973,936.67,938.442,941.859,942.758,942.784,943.708,944.633,945.84,948.615,950.618,951.646,952.596,954.395,957.143,959.096,961.305,963.231,964.387,965.62,967.598,968.703,969.731,972.351,973.198,974.714,975.896,977.309,977.72,978.798,979.209,979.492,979.569,980.134,980.237,981.11,982.395,983.551,983.962,984.476,986.376,988.843,989.51,990.127,990.846,991.72,992.619,994.545,995.984,997.088,998.116,998.553,999.195,999.76,1002.971,1003.742,1004.307,1005.566,1006.208,1006.619,1006.773,1007.672,1007.98,1008.366,1008.725,1009.162,1009.29,1009.47,1010.6,1012.681,1014.325,1015.918,1017.665,1019.643,1019.9,1022.366,1024.19,1025.679,1027.375,1028.197,1029.79,1031.151,1032.667,1034.902,1037.008,1040.63,1043.61,1045.177,1047.258,1048.927,1051.599,1054.039,1056.942,1060.102,1061.797,1064.135,1066.087,1069.478,1071.918,1074.127,1077.236,1078.263,1079.753,1082.99,1086.535,1090.799,1094.55,1099.328,1103.797,1105.493,1110.759,1116.616,1122.087,1128.33,1134.829,1139.607,1143.203,1148.418,1155.662,1160.44,1165.834,1171.383,1174.543,1177.651,1184.638,1188.697,1194.913,1200.103,1203.159,1203.159,1209.196,1215.207,1220.602,1225.739,1229.207,1234.396,1236.015,1238.917,1246.573,1251.479,1257.49,1262.859,1268.433],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.026,0.051,0,0,0,0.026,0.051,0.026,0.077,0.026,0.026,0.051,0.026,0.051,0.051,0.103,0.026,0.103,0.026,0.103,0.18,0.051,0.848,0.103,0.283,0.411,0.283,0.719,0.745,0.565,1.105,0.899,0.642,0.976,0.771,1.439,0.539,1.028,1.207,0.617,1.336,1.49,1.259,1.798,1.439,1.695,0.694,1.618,0.771,1.695,2.158,1.516,2.44,3.417,1.747,4.418,3.237,2.826,4.804,4.213,4.598,6.037,4.881,8.477,4.316,4.393,5.574,6.705,9.273,7.295,7.218,6.653,10.609,10.635,8.965,6.73,10.481,14.925,12.639,13.64,13.923,20.088,15.002,15.182,16.903,16.055,14.899,16.004,22.246,17.468,14,19.497,19.472,20.217,23.505,14.951,20.319,14.771,13.923,17.571,19.215,16.851,14.283,17.057,19.549,20.114,14.488,16.903,8.888,14.026,10.506,7.963,8.323,6.011,11.817,7.09,4.239,9.017,6.962,7.167,8.195,4.778,7.758,8.94,7.167,6.139,4.984,5.395,8.066,7.347,4.418,2.183,3.956,3.468,6.525,1.952,4.084,1.541,4.47,1.028,2.877,2.877,5.163,1.541,1.233,3.108,2.723,2.697,2.697,1.772,3.417,0.899,0.026,0.925,0.925,1.207,2.774,2.004,1.028,0.95,1.798,2.749,1.952,2.209,1.927,1.156,1.233,1.978,1.105,1.028,2.62,0.848,1.516,1.182,1.413,0.411,1.079,0.411,0.283,0.077,0.565,0.103,0.873,1.284,1.156,0.411,0.514,1.901,2.466,0.668,0.617,0.719,0.873,0.899,1.927,1.439,1.105,1.028,0.437,0.642,0.565,3.211,0.771,0.565,1.259,0.642,0.411,0.154,0.899,0.308,0.385,0.36,0.437,0.128,0.18,1.13,2.081,1.644,1.593,1.747,1.978,0.257,2.466,1.824,1.49,1.695,0.822,1.593,1.361,1.516,2.235,2.106,3.622,2.98,1.567,2.081,1.67,2.672,2.44,2.903,3.16,1.695,2.338,1.952,3.391,2.44,2.209,3.108,1.028,1.49,3.237,3.545,4.264,3.75,4.778,4.47,1.695,5.266,5.857,5.472,6.242,6.499,4.778,3.596,5.215,7.244,4.778,5.395,5.549,3.16,3.108,6.987,4.059,6.217,5.189,3.057,0,6.037,6.011,5.395,5.138,3.468,5.189,1.618,2.903,7.655,4.906,6.011,5.369,5.574],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.026,0.077,0.077,0.077,0.077,0.103,0.154,0.18,0.231,0.206,0.232,0.283,0.309,0.334,0.334,0.411,0.36,0.437,0.437,0.489,0.643,0.643,1.44,1.44,1.697,2.005,2.262,2.878,3.443,3.957,4.214,5.01,5.369,5.934,6.422,7.142,6.936,7.399,7.501,7.219,7.913,8.427,8.915,9.274,10.174,10.841,10.328,11.329,10.764,10.969,11.868,11.586,12.587,14.309,15.362,18.162,20.628,21.759,24.405,27.102,29.26,31.88,35.014,39.073,40.152,41.719,42.489,44.981,49.656,50.914,53.251,51.427,57.72,63.962,67.353,67.378,68.586,76.216,81.637,88.624,91.938,101.391,107.428,115.88,122.302,123.432,125.692,128.056,136.379,133.759,132.757,137.072,139.641,143.803,152.409,151.356,149.429,146.732,146.655,144.729,144.472,141.106,131.884,133.99,133.22,138.563,139.128,138.46,128.133,125.308,121.531,112.437,101.211,87.108,84.437,74.624,69.975,64.966,61.422,60.626,60.498,59.265,55.206,57.056,59.984,57.106,55.128,53.356,53.227,55.796,52.456,45.699,42.488,39.817,41.358,37.915,33.933,28.127,28.179,27.024,25.945,25.354,23.992,23.581,20.73,22.297,20.55,22.219,22.039,20.934,19.188,18.546,17.339,15.156,13.358,11.868,11.945,12.177,9.788,9.839,11.611,13.435,14.462,15.464,14.617,13.769,13.974,15.002,14.309,12.588,13.256,11.895,11.484,11.51,11.69,10.123,10.097,9.48,7.143,6.372,5.421,4.342,3.802,4.675,4.752,4.752,4.983,6.807,8.708,9.273,9.017,8.452,8.169,8.657,10.07,9.608,8.247,8.607,8.427,8.35,8.042,10.354,9.198,8.324,8.478,8.092,8.066,7.578,7.912,5.009,4.623,4.418,3.596,3.082,2.851,3.827,5.009,6.345,7.553,8.94,10.481,10.61,12.896,13.59,12.999,13.05,12.279,12.125,11.508,12.767,12.536,12.818,14.95,16.235,16.98,17.468,17.777,18.933,19.138,19.935,19.473,18.188,18.959,18.83,20.551,20.319,20.088,20.293,18.161,17.956,18.855,20.448,21.321,22.631,25.2,26.562,27.229,31.005,33.625,35.552,37.53,40.279,40.279,39.405,42.925,44.903,43.824,43.747,43.054,39.715,38.045,41.436,40.28,39.253,39.664,37.326,31.777,34.654,37.557,35.965,37.044,34.295,34.295,32.856,35.759,37.377,36.272,36.888,37.119,39.225],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.004,0.011,0.011,0.011,0.011,0.015,0.022,0.022,0.026,0.029,0.033,0.04,0.04,0.04,0.044,0.048,0.048,0.059,0.055,0.066,0.084,0.084,0.191,0.202,0.228,0.283,0.308,0.385,0.484,0.444,0.587,0.675,0.708,0.807,0.815,0.914,0.91,0.899,0.943,0.939,0.991,1.094,1.068,1.248,1.306,1.376,1.387,1.428,1.325,1.387,1.439,1.45,1.556,1.945,1.963,2.484,2.705,2.8,3.27,3.523,3.692,4.305,4.371,5.119,5.332,5.273,5.468,5.769,6.231,6.576,6.396,6.73,7.618,8.341,8.664,8.301,8.756,9.857,10.712,11.145,11.615,13.204,14.385,15.057,15.34,15.828,16.007,16.305,16.613,16.965,16.796,17.167,17.655,18.415,19.486,18.444,18.851,18.962,18.165,17.894,17.751,16.8,16.705,16.239,16.921,17.806,17.365,17.035,15.897,15.861,14.925,13.27,11.585,10.374,9.648,9.391,7.993,7.78,7.637,7.472,7.784,6.778,6.873,7.545,7.281,7.163,6.851,6.451,6.921,6.862,6.217,5.505,5.193,4.976,5.138,4.264,3.798,3.387,3.714,3.295,3.211,2.69,3.149,2.785,2.741,2.547,2.789,2.763,2.738,2.253,2.521,2.473,2.033,1.776,1.523,1.31,1.453,1.251,1.27,1.402,1.527,1.787,1.894,1.813,1.802,1.82,1.861,1.886,1.651,1.519,1.578,1.424,1.475,1.468,1.387,1.288,1.295,0.98,0.899,0.694,0.606,0.418,0.484,0.514,0.62,0.639,0.701,0.892,1.229,1.2,1.105,1.042,1.108,1.163,1.167,1.02,1.083,1.141,1.101,1.068,1.02,1.204,1.108,1.031,1.064,1.094,1.061,1.002,0.672,0.606,0.58,0.451,0.422,0.382,0.385,0.418,0.672,0.851,1.028,1.215,1.479,1.49,1.681,1.644,1.622,1.637,1.505,1.45,1.607,1.472,1.53,1.618,1.894,2.202,2.198,2.301,2.323,2.385,2.433,2.33,2.356,2.374,2.411,2.451,2.554,2.554,2.455,2.448,2.352,2.231,2.415,2.437,2.697,2.917,3.156,3.648,3.677,3.967,4.297,4.47,4.826,5.072,5.116,5.387,5.38,5.578,5.479,5.358,5.222,4.991,4.921,5.174,4.719,4.925,4.895,4.539,4.088,4.506,4.367,4.558,4.404,4.158,4.462,4.694,4.246,4.481,4.411,4.536,4.807,4.862]},{"iso":"ALB","continent":"Europe","population":2877800,"name":"Albania","population_density":104.871,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,10,12,23,33,38,42,51,55,59,64,70,76,89,104,123,146,174,186,197,212,223,243,259,277,304,333,361,377,383,400,409,416,433,446,467,475,494,518,539,548,562,584,609,634,663,678,712,726,736,750,766,773,782,789,795,803,820,832,842,850,856,868,872,876,880,898,916,933,946,948,949,964,969,981,989,998,1004,1029,1050,1076,1099,1122,1137,1143,1164,1184,1197,1212,1232,1246,1263,1299,1341,1385,1416,1464,1521,1590,1672,1722,1788,1838,1891,1962,1995,2047,2114,2192,2269,2330,2402,2466,2535,2580,2662,2752,2819,2893,2964,3038,3106,3188,3278,3371,3454,3571,3667,3752,3851,3906,4008,4090,4171,4290,4358,4466,4570,4637,4763,4880,4997,5105,5197,5276,5396,5519,5620,5750,5889,6016,6151,6275,6411,6536,6676,6817,6971,7117,7260,7380,7499,7654,7812,7967,8119,8275,8427,8605,8759,8927,9083,9195,9279,9380,9513,9606,9728,9844,9967,10102,10255,10406,10553,10704,10860,11021,11185,11353,11520,11672,11816,11948,12073,12226,12385,12535,12666,12787,12921,13045,13153,13259,13391,13518,13649,13806,13965,14117,14266,14410,14568,14730,14899,15066,15231,15399,15570,15752,15955,16212,16501,16774,17055,17350,17651,17948,18250,18556,18858,19157,19445,19729,20040,20315,20634,20875,21202,21523,21904,22300,22721,23210,23705,24206,24731,25294,25801,26211,26701,27233,27830,28432,29126,29837,30623,31459,32196,32761,33556,34300,34944,35600,36245,36790,37625,38182,39014,39719,40501,41302,42148,42988,43683,44436,45188,46061,46863,47742,48530,49191,50000,50637,51424],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.695,3.475,4.17,7.992,11.467,13.205,14.594,17.722,19.112,20.502,22.239,24.324,26.409,30.926,36.139,42.741,50.733,60.463,64.633,68.455,73.667,77.49,84.44,89.999,96.254,105.636,115.713,125.443,131.003,133.088,138.995,142.122,144.555,150.462,154.979,162.277,165.057,171.659,179.999,187.296,190.423,195.288,202.933,211.62,220.307,230.384,235.597,247.411,252.276,255.751,260.616,266.176,268.608,271.735,274.168,276.253,279.033,284.94,289.11,292.585,295.365,297.449,301.619,303.009,304.399,305.789,312.044,318.299,324.206,328.723,329.418,329.766,334.978,336.716,340.885,343.665,346.793,348.878,357.565,364.862,373.897,381.889,389.881,395.093,397.178,404.476,411.425,415.943,421.155,428.105,432.97,438.877,451.386,465.981,481.27,492.043,508.722,528.529,552.505,580.999,598.374,621.308,638.682,657.099,681.771,693.238,711.307,734.589,761.693,788.45,809.646,834.665,856.905,880.881,896.518,925.012,956.286,979.568,1005.282,1029.953,1055.668,1079.297,1107.791,1139.065,1171.381,1200.222,1240.878,1274.237,1303.774,1338.175,1357.287,1392.731,1421.225,1449.371,1490.722,1514.351,1551.88,1588.019,1611.3,1655.084,1695.74,1736.396,1773.925,1805.893,1833.345,1875.043,1917.784,1952.881,1998.054,2046.355,2090.486,2137.397,2180.485,2227.743,2271.179,2319.828,2368.823,2422.337,2473.07,2522.76,2564.459,2605.81,2659.671,2714.574,2768.434,2821.252,2875.46,2928.279,2990.131,3043.644,3102.022,3156.23,3195.149,3224.338,3259.434,3305.65,3337.967,3380.36,3420.669,3463.41,3510.32,3563.486,3615.957,3667.037,3719.508,3773.716,3829.662,3886.65,3945.027,4003.058,4055.876,4105.914,4151.783,4195.219,4248.384,4303.635,4355.758,4401.279,4443.325,4489.888,4532.977,4570.505,4607.339,4653.207,4697.338,4742.859,4797.415,4852.665,4905.483,4957.259,5007.297,5062.2,5118.493,5177.219,5235.249,5292.585,5350.963,5410.383,5473.626,5544.166,5633.47,5733.894,5828.758,5926.402,6028.911,6133.505,6236.709,6341.65,6447.981,6552.922,6656.821,6756.898,6855.584,6963.653,7059.212,7170.06,7253.805,7367.433,7478.977,7611.37,7748.975,7895.267,8065.189,8237.195,8411.286,8593.717,8789.353,8965.529,9107.999,9278.268,9463.132,9670.582,9879.769,10120.926,10367.989,10641.115,10931.614,11187.713,11384.043,11660.296,11918.827,12142.609,12370.561,12594.69,12784.071,13074.223,13267.774,13556.884,13801.863,14073.598,14351.936,14645.91,14937.8,15179.304,15440.962,15702.273,16005.629,16284.314,16589.756,16863.576,17093.266,17374.383,17595.733,17869.206],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2.78,0.695,3.822,3.475,1.737,1.39,3.127,1.39,1.39,1.737,2.085,2.085,4.517,5.212,6.602,7.992,9.73,4.17,3.822,5.212,3.822,6.95,5.56,6.255,9.382,10.077,9.73,5.56,2.085,5.907,3.127,2.432,5.907,4.517,7.297,2.78,6.602,8.34,7.297,3.127,4.865,7.645,8.687,8.687,10.077,5.212,11.815,4.865,3.475,4.865,5.56,2.432,3.127,2.432,2.085,2.78,5.907,4.17,3.475,2.78,2.085,4.17,1.39,1.39,1.39,6.255,6.255,5.907,4.517,0.695,0.347,5.212,1.737,4.17,2.78,3.127,2.085,8.687,7.297,9.035,7.992,7.992,5.212,2.085,7.297,6.95,4.517,5.212,6.95,4.865,5.907,12.51,14.594,15.289,10.772,16.679,19.807,23.977,28.494,17.374,22.934,17.374,18.417,24.672,11.467,18.069,23.282,27.104,26.757,21.197,25.019,22.239,23.977,15.637,28.494,31.274,23.282,25.714,24.672,25.714,23.629,28.494,31.274,32.316,28.841,40.656,33.359,29.536,34.401,19.112,35.444,28.494,28.147,41.351,23.629,37.529,36.139,23.282,43.783,40.656,40.656,37.529,31.969,27.452,41.699,42.741,35.096,45.173,48.301,44.131,46.911,43.088,47.258,43.436,48.648,48.996,53.513,50.733,49.691,41.699,41.351,53.861,54.903,53.861,52.818,54.208,52.818,61.853,53.513,58.378,54.208,38.919,29.189,35.096,46.216,32.316,42.393,40.309,42.741,46.911,53.166,52.471,51.081,52.471,54.208,55.946,56.988,58.378,58.03,52.818,50.038,45.868,43.436,53.166,55.251,52.123,45.521,42.046,46.563,43.088,37.529,36.834,45.868,44.131,45.521,54.556,55.251,52.818,51.776,50.038,54.903,56.293,58.725,58.03,57.335,58.378,59.42,63.243,70.54,89.304,100.424,94.864,97.644,102.509,104.594,103.204,104.941,106.331,104.941,103.899,100.076,98.686,108.069,95.559,110.849,83.745,113.628,111.544,132.393,137.605,146.292,169.921,172.006,174.091,182.431,195.636,176.176,142.47,170.269,184.863,207.45,209.188,241.156,247.064,273.125,290.5,256.098,196.331,276.253,258.531,223.782,227.952,224.13,189.381,290.152,193.551,289.11,244.979,271.735,278.338,293.975,291.89,241.504,261.658,261.311,303.357,278.685,305.442,273.82,229.689,281.118,221.35,273.473],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2.78,3.475,7.297,10.772,12.509,13.899,17.026,18.416,17.026,18.068,16.331,14.941,17.721,21.543,25.018,31.62,39.96,42.393,44.13,47.257,46.562,48.3,47.258,45.521,45.173,51.08,56.988,57.336,55.599,54.556,52.123,48.3,44.825,39.265,36.832,34.052,38.569,41.002,45.172,45.867,44.825,47.953,49.343,55.25,58.725,55.597,60.115,61.853,60.463,57.683,54.556,48.301,41.351,38.571,28.841,26.756,29.188,28.493,26.408,26.756,25.714,27.452,26.757,25.367,20.85,22.935,25.715,28.842,31.274,27.799,26.756,30.578,30.925,28.84,25.365,22.585,20.153,28.145,35.095,38.918,45.173,48.995,51.427,50.385,55.597,53.86,51.08,47.257,46.215,43.088,43.783,54.208,61.505,69.844,76.099,87.566,100.423,119.535,142.122,146.986,155.326,157.411,165.056,173.049,164.709,158.801,153.589,163.319,167.142,170.965,177.567,175.134,187.644,185.212,190.424,194.594,191.119,195.636,195.289,198.764,198.416,211.273,214.053,215.095,220.654,235.596,244.283,248.105,258.877,249.495,253.665,249.843,249.149,249.844,240.114,248.107,249.845,254.015,262.354,274.516,287.025,283.203,291.543,281.466,287.026,306.485,297.798,302.315,309.96,316.562,331.504,347.14,352.699,353.394,366.946,370.769,375.981,382.583,385.363,383.974,378.067,388.492,394.747,399.612,398.917,402.392,405.519,425.673,437.835,442.352,441.657,426.715,403.086,383.974,377.372,347.835,336.715,318.646,307.179,315.171,339.148,356.523,361.388,381.543,393.358,408.995,423.242,434.709,439.573,439.92,438.877,432.274,421.502,418.722,416.985,410.73,398.221,387.449,383.974,381.194,375.287,358.955,349.572,341.58,341.58,354.09,362.778,372.508,386.755,399.959,408.994,421.156,434.36,437.834,439.918,445.478,453.122,466.327,481.964,514.975,556.674,593.508,633.817,677.948,723.122,763.083,797.484,814.511,819.028,828.063,830.495,826.672,830.147,822.502,828.41,805.824,814.511,822.156,854.473,893.392,931.615,1005.977,1067.134,1157.48,1226.283,1310.375,1354.158,1359.023,1383,1397.942,1433.386,1468.483,1527.208,1578.636,1675.585,1823.615,1909.444,1920.912,1989.715,2039.058,2021.684,2002.572,1953.577,1852.458,1886.512,1883.732,1896.589,1883.037,1930.99,1981.376,2051.221,2153.73,2105.082,2173.189,2145.39,2203.768,2210.718,2237.822,2217.667,2155.466,2195.08,2154.772,2166.934],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.986,2.432,2.234,2.333,2.035,1.837,1.886,2.333,2.631,3.376,4.319,5.461,5.758,6.007,6.106,5.907,5.957,5.609,5.113,5.858,6.751,7.397,7.645,6.95,6.999,6.553,5.56,4.964,4.219,4.468,4.567,4.666,5.411,6.106,5.709,5.758,5.808,6.652,6.95,7.198,6.9,8.141,8.141,7.545,6.999,6.553,5.461,5.163,3.822,3.425,3.326,3.475,3.276,3.425,3.376,3.326,3.624,3.425,2.78,2.383,2.78,3.276,3.822,3.872,3.773,3.624,4.17,3.525,3.227,2.78,2.581,2.78,3.971,4.269,5.312,5.858,6.602,6.9,6.9,6.702,6.652,6.007,5.609,5.461,5.411,5.957,6.702,7.794,9.333,10.127,11.517,13.651,16.233,18.516,18.913,20.005,20.949,21.197,21.892,20.105,18.615,19.459,20.055,21.395,21.792,21.842,23.381,24.225,23.133,23.331,23.977,24.274,24.374,24.721,24.969,26.111,26.111,26.111,27.402,27.849,30.132,31.224,32.068,32.912,31.175,31.621,31.572,29.785,30.926,30.083,30.529,32.962,31.224,33.408,35.196,35.096,37.082,36.288,35.047,37.678,37.529,36.734,37.38,38.919,40.656,43.436,43.635,44.28,45.471,45.968,46.067,47.407,47.953,48.896,48.102,47.804,48.549,49.393,49.443,49.74,50.386,51.974,54.903,54.853,55.35,55.399,53.414,49.84,47.308,45.074,42.046,39.763,37.777,38.323,40.855,43.436,44.329,47.01,48.45,50.435,52.322,53.761,54.506,55.3,55.548,55.201,54.01,52.222,51.676,51.23,50.386,49.343,48.202,48.301,48.251,46.017,43.386,42.493,42.294,42.791,43.932,45.67,47.854,49.989,50.584,52.123,53.662,54.258,54.655,55.3,56.243,57.584,58.775,60.81,65.179,71.235,76.596,82.206,88.361,94.268,98.935,101.169,102.012,103.452,104.346,103.998,103.154,103.849,102.509,103.154,100.126,101.516,103.154,107.969,112.189,119.436,127.875,140.484,149.122,159.249,168.283,173.793,173.247,173.297,175.134,179.899,183.722,190.225,200.351,219.017,236.192,246.369,244.78,254.361,256.843,253.517,247.064,237.582,228.051,241.454,229.64,234.008,237.036,243.291,251.035,265.977,266.225,273.076,269.154,271.487,276.004,276.054,277.692,275.111,273.423,276.203,270.494,266.225]},{"iso":"DZA","continent":"Africa","population":43851043,"name":"Algeria","population_density":17.348,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,3,5,12,12,17,17,19,20,20,20,24,26,37,48,54,60,74,87,90,139,201,230,264,302,367,409,454,511,584,716,847,986,1171,1251,1320,1423,1468,1572,1666,1761,1825,1914,1983,2070,2160,2268,2418,2534,2629,2718,2811,2910,3007,3127,3256,3382,3517,3649,3848,4006,4154,4295,4474,4648,4838,4997,5182,5369,5558,5723,5891,6067,6253,6442,6629,6821,7019,7201,7377,7542,7728,7918,8113,8306,8503,8697,8857,8997,9134,9267,9394,9513,9626,9733,9831,9935,10050,10154,10265,10382,10484,10589,10698,10810,10919,11031,11147,11268,11385,11504,11631,11771,11920,12076,12248,12445,12685,12968,13273,13571,13907,14272,14657,15070,15500,15941,16404,16879,17348,17808,18242,18712,19195,19689,20216,20770,21355,21948,22549,23084,23691,24278,24872,25484,26159,26764,27357,27973,28615,29229,29831,30394,30950,31465,31972,32504,33055,33626,34155,34693,35160,35712,36204,36699,37187,37664,38133,38583,39025,39444,39847,40258,40667,41068,41460,41858,42228,42619,43016,43403,43781,44146,44494,44833,45158,45469,45773,46071,46364,46653,46938,47216,47488,47752,48007,48254,48496,48734,48966,49194,49413,49623,49826,50023,50214,50400,50579,50754,50914,51067,51213,51368,51530,51690,51847,51995,52136,52270,52399,52520,52658,52804,52940,53072,53325,53399,53584,53777,53998,54203,54402,54616,54829,55081,55357,55630,55880,56143,56419,56706,57026,57332,57651,57942,58272,58574,58979,59527,60169,60800,61381,62051,62693,63446,64257,65108,65975,66819,67679,68589,69591,70629,71652,72755,73774,74862,75867,77000,78025,79110,80168,81212,82221,83199,84152,85084,85927,86730,87502,88252,88825,89416,90014,90579,91121,91638,92102,92597,93065,93507,93933],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.023,0.023,0.023,0.023,0.023,0.023,0.068,0.114,0.274,0.274,0.388,0.388,0.433,0.456,0.456,0.456,0.547,0.593,0.844,1.095,1.231,1.368,1.688,1.984,2.052,3.17,4.584,5.245,6.02,6.887,8.369,9.327,10.353,11.653,13.318,16.328,19.315,22.485,26.704,28.528,30.102,32.451,33.477,35.849,37.992,40.159,41.618,43.648,45.221,47.205,49.258,51.721,55.141,57.787,59.953,61.983,64.103,66.361,68.573,71.31,74.251,77.125,80.203,83.214,87.752,91.355,94.73,97.945,102.027,105.995,110.328,113.954,118.173,122.437,126.747,130.51,134.341,138.355,142.596,146.906,151.171,155.549,160.065,164.215,168.229,171.991,176.233,180.566,185.013,189.414,193.906,198.331,201.979,205.172,208.296,211.329,214.225,216.939,219.516,221.956,224.191,226.562,229.185,231.557,234.088,236.756,239.082,241.477,243.962,246.516,249.002,251.556,254.201,256.961,259.629,262.343,265.239,268.431,271.829,275.387,279.309,283.802,289.275,295.728,302.684,309.48,317.142,325.465,334.245,343.663,353.469,363.526,374.085,384.917,395.612,406.102,415.999,426.717,437.732,448.997,461.015,473.649,486.99,500.513,514.218,526.418,540.261,553.647,567.193,581.149,596.542,610.339,623.862,637.91,652.55,666.552,680.28,693.119,705.798,717.543,729.105,741.237,753.802,766.823,778.887,791.156,801.805,814.393,825.613,836.901,848.03,858.908,869.603,879.865,889.945,899.5,908.69,918.063,927.39,936.534,945.474,954.55,962.987,971.904,980.957,989.783,998.403,1006.726,1014.662,1022.393,1029.804,1036.897,1043.829,1050.625,1057.307,1063.897,1070.396,1076.736,1082.939,1088.959,1094.774,1100.407,1105.926,1111.353,1116.644,1121.843,1126.838,1131.626,1136.256,1140.748,1145.104,1149.346,1153.428,1157.418,1161.067,1164.556,1167.886,1171.42,1175.115,1178.763,1182.344,1185.719,1188.934,1191.99,1194.932,1197.691,1200.838,1204.167,1207.269,1210.279,1216.049,1217.736,1221.955,1226.356,1231.396,1236.071,1240.609,1245.489,1250.347,1256.093,1262.387,1268.613,1274.314,1280.312,1286.606,1293.151,1300.448,1307.426,1314.701,1321.337,1328.862,1335.749,1344.985,1357.482,1372.122,1386.512,1399.761,1415.04,1429.681,1446.853,1465.347,1484.754,1504.525,1523.772,1543.384,1564.136,1586.986,1610.657,1633.986,1659.14,1682.377,1707.189,1730.107,1755.945,1779.319,1804.062,1828.189,1851.997,1875.007,1897.309,1919.042,1940.296,1959.52,1977.832,1995.437,2012.54,2025.607,2039.085,2052.722,2065.607,2077.967,2089.756,2100.338,2111.626,2122.298,2132.378,2142.093],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.046,0.046,0.16,0,0.114,0,0.046,0.023,0,0,0.091,0.046,0.251,0.251,0.137,0.137,0.319,0.296,0.068,1.117,1.414,0.661,0.775,0.867,1.482,0.958,1.026,1.3,1.665,3.01,2.987,3.17,4.219,1.824,1.574,2.349,1.026,2.372,2.144,2.166,1.459,2.03,1.574,1.984,2.052,2.463,3.421,2.645,2.166,2.03,2.121,2.258,2.212,2.737,2.942,2.873,3.079,3.01,4.538,3.603,3.375,3.215,4.082,3.968,4.333,3.626,4.219,4.264,4.31,3.763,3.831,4.014,4.242,4.31,4.264,4.378,4.515,4.15,4.014,3.763,4.242,4.333,4.447,4.401,4.492,4.424,3.649,3.193,3.124,3.033,2.896,2.714,2.577,2.44,2.235,2.372,2.623,2.372,2.531,2.668,2.326,2.394,2.486,2.554,2.486,2.554,2.645,2.759,2.668,2.714,2.896,3.193,3.398,3.557,3.922,4.492,5.473,6.454,6.955,6.796,7.662,8.324,8.78,9.418,9.806,10.057,10.558,10.832,10.695,10.49,9.897,10.718,11.015,11.265,12.018,12.634,13.341,13.523,13.705,12.2,13.842,13.386,13.546,13.956,15.393,13.797,13.523,14.048,14.64,14.002,13.728,12.839,12.679,11.744,11.562,12.132,12.565,13.021,12.064,12.269,10.65,12.588,11.22,11.288,11.129,10.878,10.695,10.262,10.08,9.555,9.19,9.373,9.327,9.145,8.939,9.076,8.438,8.917,9.053,8.825,8.62,8.324,7.936,7.731,7.411,7.092,6.933,6.796,6.682,6.59,6.499,6.34,6.203,6.02,5.815,5.633,5.519,5.427,5.291,5.199,4.994,4.789,4.629,4.492,4.356,4.242,4.082,3.991,3.649,3.489,3.329,3.535,3.694,3.649,3.58,3.375,3.215,3.056,2.942,2.759,3.147,3.329,3.101,3.01,5.77,1.688,4.219,4.401,5.04,4.675,4.538,4.88,4.857,5.747,6.294,6.226,5.701,5.998,6.294,6.545,7.297,6.978,7.275,6.636,7.525,6.887,9.236,12.497,14.64,14.39,13.249,15.279,14.64,17.172,18.494,19.407,19.771,19.247,19.612,20.752,22.85,23.671,23.329,25.153,23.238,24.811,22.918,25.837,23.375,24.743,24.127,23.808,23.01,22.303,21.733,21.254,19.224,18.312,17.605,17.103,13.067,13.477,13.637,12.885,12.36,11.79,10.581,11.288,10.672,10.08,9.715],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.046,0.092,0.252,0.252,0.366,0.366,0.412,0.435,0.389,0.343,0.274,0.32,0.457,0.708,0.799,0.913,1.232,1.528,1.505,2.576,3.739,4.149,4.787,5.517,6.68,7.342,8.3,8.483,8.734,11.083,13.295,15.598,18.335,19.201,19.749,20.798,20.159,19.521,18.678,17.674,14.914,15.12,15.12,14.755,15.781,15.872,17.149,17.628,18.335,18.335,18.882,19.156,19.316,19.59,19.111,19.339,20.252,21.232,23.649,24.994,26.157,26.635,27.775,28.87,30.124,30.74,30.421,31.082,32.017,32.565,32.314,32.36,32.269,32.953,32.998,33.112,33.317,33.704,33.887,33.636,33.636,33.659,33.842,33.865,33.842,34.116,33.751,33.181,32.063,30.763,29.212,27.525,25.61,23.626,22.212,21.391,20.89,20.229,19.864,19.818,19.567,19.521,19.772,19.954,19.817,19.999,20.113,20.204,20.546,20.866,21.276,21.915,22.827,23.83,25.107,26.84,29.645,33.385,37.444,41.047,45.311,50.078,54.936,59.862,64.195,67.798,71.401,75.437,78.47,80.636,81.753,83.053,84.262,85.47,86.93,88.732,91.378,94.411,98.219,99.701,102.528,104.649,106.177,107.499,109.551,109.825,109.643,111.491,112.289,112.905,113.087,111.97,109.256,107.203,105.242,103.326,101.251,100.27,98.606,98.036,96.007,96.851,96.509,95.665,94.229,92.086,90.717,88.71,88.14,85.107,83.077,81.162,79.36,77.627,75.871,74.685,73.043,72.405,72.268,71.72,71.013,70.192,69.189,67.844,66.817,64.992,62.872,60.843,58.905,57.171,55.734,54.343,53.135,52.063,50.945,49.782,48.619,47.456,46.248,45.107,43.898,42.667,41.481,40.34,39.177,37.992,36.783,35.575,34.23,32.93,31.63,30.673,30.011,29.418,28.916,28.3,27.866,27.433,27.046,26.27,25.723,25.403,24.924,24.559,27.114,25.746,27.023,28.665,30.558,31.904,33.341,35.211,34.298,38.357,40.432,42.257,42.918,44.241,45.997,47.662,50.102,51.333,52.314,52.724,54.548,55.437,58.379,64.331,71.674,79.086,85.06,93.703,100.818,111.103,120.361,127.271,132.402,137.259,143.622,149.095,157.305,163.804,168.639,174.385,177.852,183.416,186.722,191.807,192.332,193.404,194.202,192.857,192.629,190.121,188.936,184.353,180.202,173.771,167.249,160.544,150.601,141.775,133.679,125.31,118.446,111.924,104.9,99.085,96.69,93.293,89.371],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.007,0.013,0.036,0.036,0.052,0.052,0.059,0.055,0.049,0.026,0.039,0.029,0.065,0.094,0.111,0.13,0.176,0.205,0.208,0.332,0.498,0.573,0.665,0.743,0.912,1.039,1.026,1.01,1.153,1.473,1.775,2.017,2.482,2.596,2.636,2.733,2.45,2.362,2.215,1.922,1.87,1.935,1.824,1.961,1.916,1.961,2.14,2.31,2.329,2.394,2.414,2.443,2.408,2.31,2.352,2.453,2.603,2.73,3.056,3.255,3.346,3.385,3.557,3.685,3.874,3.743,3.831,3.958,4.115,4.069,4.049,4.004,4.092,4.105,4.105,4.115,4.222,4.268,4.268,4.199,4.19,4.199,4.209,4.193,4.242,4.3,4.284,4.134,3.961,3.759,3.544,3.29,3.026,2.854,2.717,2.609,2.551,2.476,2.45,2.463,2.447,2.469,2.486,2.476,2.492,2.495,2.492,2.554,2.593,2.626,2.675,2.776,2.896,3.026,3.193,3.453,3.847,4.356,4.893,5.379,5.965,6.594,7.206,7.77,8.249,8.692,9.229,9.682,10.021,10.265,10.334,10.464,10.601,10.702,10.871,11.148,11.555,12.073,12.5,12.67,13.038,13.233,13.363,13.451,13.719,13.732,13.921,13.95,14.129,14.194,14.162,13.797,13.637,13.383,13.028,12.67,12.464,12.363,12.253,12.194,12.038,12.184,12.054,11.871,11.601,11.432,11.207,11.151,10.793,10.555,10.255,10.005,9.783,9.562,9.373,9.229,9.07,9.031,8.985,8.913,8.838,8.75,8.588,8.487,8.272,7.991,7.721,7.46,7.226,7.034,6.858,6.705,6.577,6.447,6.307,6.157,6.004,5.851,5.701,5.558,5.411,5.265,5.121,4.975,4.822,4.672,4.512,4.369,4.206,4.043,3.877,3.759,3.681,3.619,3.561,3.522,3.483,3.443,3.359,3.225,3.154,3.118,3.079,3.049,3.437,3.258,3.466,3.645,3.89,4.115,4.333,4.206,4.659,4.877,5.147,5.317,5.463,5.672,5.874,6.115,6.336,6.434,6.584,6.718,6.936,7.021,7.405,8.148,9.242,10.259,11.204,12.311,13.419,14.553,15.409,16.09,16.859,17.716,18.335,19.208,20.019,20.759,21.319,22.088,22.658,23.401,23.71,24.137,24.095,24.297,24.15,24.231,23.974,23.886,23.3,22.997,22.208,21.378,20.491,19.648,18.328,17.149,16.061,15.155,14.305,13.474,12.542,12.288,11.888,11.379,10.927]},{"iso":"AND","continent":"Europe","population":77265,"name":"Andorra","population_density":163.755,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,39,39,53,75,88,113,133,164,188,224,267,308,334,370,376,390,428,439,466,501,525,545,564,583,601,601,638,646,659,673,673,696,704,713,717,717,723,723,731,738,738,743,743,743,745,745,747,748,750,751,751,752,752,754,755,755,758,760,761,761,761,761,761,761,762,762,762,762,762,763,763,763,763,764,764,764,765,844,851,852,852,852,852,852,852,852,852,853,853,853,853,854,854,855,855,855,855,855,855,855,855,855,855,855,855,855,855,855,855,855,855,855,855,855,855,855,855,855,858,861,862,877,880,880,880,884,884,889,889,897,897,897,907,907,918,922,925,925,925,937,939,939,944,955,955,955,963,963,977,981,989,989,989,1005,1005,1024,1024,1045,1045,1045,1060,1060,1098,1098,1124,1124,1124,1176,1184,1199,1199,1215,1215,1215,1261,1261,1301,1301,1344,1344,1344,1438,1438,1483,1483,1564,1564,1564,1681,1681,1753,1753,1836,1836,1836,1966,1966,2050,2050,2110,2110,2110,2370,2370,2568,2568,2696,2696,2696,2995,2995,3190,3190,3377,3377,3377,3623,3623,3811,3811,4038,4038,4038,4325,4410,4517,4567,4665,4756,4825,4888,4910,5045,5135,5135,5319,5383,5437,5477,5567,5616,5725,5725,5872,5914,5951,6018,6066,6142,6207,6256,6304,6351,6428,6534,6610,6610,6712,6745,6790,6842,6904,6955,7005,7050,7084,7127,7162,7190,7236,7288,7338,7382,7382,7446,7466],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12.942,12.942,12.942,12.942,12.942,12.942,12.942,12.942,12.942,12.942,12.942,12.942,12.942,12.942,25.885,504.756,504.756,685.951,970.685,1138.937,1462.499,1721.349,2122.565,2433.184,2899.113,3455.64,3986.281,4322.785,4788.714,4866.369,5047.564,5539.377,5681.745,6031.191,6484.178,6794.797,7053.647,7299.553,7545.46,7778.425,7778.425,8257.296,8360.836,8529.088,8710.283,8710.283,9007.96,9111.499,9227.982,9279.752,9279.752,9357.406,9357.406,9460.946,9551.543,9551.543,9616.256,9616.256,9616.256,9642.141,9642.141,9668.026,9680.968,9706.853,9719.796,9719.796,9732.738,9732.738,9758.623,9771.565,9771.565,9810.393,9836.278,9849.22,9849.22,9849.22,9849.22,9849.22,9849.22,9862.163,9862.163,9862.163,9862.163,9862.163,9875.105,9875.105,9875.105,9875.105,9888.048,9888.048,9888.048,9900.99,10923.445,11014.043,11026.985,11026.985,11026.985,11026.985,11026.985,11026.985,11026.985,11026.985,11039.928,11039.928,11039.928,11039.928,11052.87,11052.87,11065.812,11065.812,11065.812,11065.812,11065.812,11065.812,11065.812,11065.812,11065.812,11065.812,11065.812,11065.812,11065.812,11065.812,11065.812,11065.812,11065.812,11065.812,11065.812,11065.812,11065.812,11065.812,11065.812,11065.812,11065.812,11104.64,11143.467,11156.41,11350.547,11389.374,11389.374,11389.374,11441.144,11441.144,11505.856,11505.856,11609.396,11609.396,11609.396,11738.821,11738.821,11881.188,11932.958,11971.785,11971.785,11971.785,12127.095,12152.98,12152.98,12217.692,12360.06,12360.06,12360.06,12463.599,12463.599,12644.794,12696.564,12800.104,12800.104,12800.104,13007.183,13007.183,13253.09,13253.09,13524.882,13524.882,13524.882,13719.019,13719.019,14210.833,14210.833,14547.337,14547.337,14547.337,15220.346,15323.885,15518.022,15518.022,15725.102,15725.102,15725.102,16320.456,16320.456,16838.154,16838.154,17394.681,17394.681,17394.681,18611.273,18611.273,19193.684,19193.684,20242.024,20242.024,20242.024,21756.293,21756.293,22688.151,22688.151,23762.376,23762.376,23762.376,25444.897,25444.897,26532.065,26532.065,27308.613,27308.613,27308.613,30673.656,30673.656,33236.265,33236.265,34892.901,34892.901,34892.901,38762.7,38762.7,41286.482,41286.482,43706.724,43706.724,43706.724,46890.571,46890.571,49323.756,49323.756,52261.697,52261.697,52261.697,55976.186,57076.296,58461.14,59108.264,60376.626,61554.391,62447.421,63262.797,63547.531,65294.765,66459.587,66459.587,68841.002,69669.32,70368.213,70885.912,72050.734,72684.916,74095.645,74095.645,75998.188,76541.772,77020.643,77887.789,78509.027,79492.655,80333.916,80968.097,81589.335,82197.632,83194.202,84566.104,85549.731,85549.731,86869.863,87296.965,87879.376,88552.385,89354.818,90014.884,90662.007,91244.419,91684.463,92240.989,92693.975,93056.364,93651.718,94324.727,94971.85,95541.319,95541.319,96369.637,96628.486],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12.942,478.871,0,181.195,284.734,168.252,323.562,258.849,401.217,310.619,465.929,556.526,530.641,336.504,465.929,77.655,181.195,491.814,142.367,349.447,452.986,310.619,258.849,245.907,245.907,232.964,0,478.871,103.54,168.252,181.195,0,297.677,103.54,116.482,51.77,0,77.655,0,103.54,90.597,0,64.712,0,0,25.885,0,25.885,12.942,25.885,12.942,0,12.942,0,25.885,12.942,0,38.827,25.885,12.942,0,0,0,0,0,12.942,0,0,0,0,12.942,0,0,0,12.942,0,0,12.942,1022.455,90.597,12.942,0,0,0,0,0,0,0,12.942,0,0,0,12.942,0,12.942,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38.827,38.827,12.942,194.137,38.827,0,0,51.77,0,64.712,0,103.54,0,0,129.425,0,142.367,51.77,38.827,0,0,155.31,25.885,0,64.712,142.367,0,0,103.54,0,181.195,51.77,103.54,0,0,207.08,0,245.907,0,271.792,0,0,194.137,0,491.814,0,336.504,0,0,673.008,103.54,194.137,0,207.08,0,0,595.354,0,517.699,0,556.526,0,0,1216.592,0,582.411,0,1048.34,0,0,1514.269,0,931.858,0,1074.225,0,0,1682.521,0,1087.168,0,776.548,0,0,3365.042,0,2562.609,0,1656.636,0,0,3869.799,0,2523.782,0,2420.242,0,0,3183.848,0,2433.184,0,2937.941,0,0,3714.489,1100.11,1384.844,647.124,1268.362,1177.765,893.03,815.376,284.734,1747.234,1164.822,0,2381.415,828.318,698.893,517.699,1164.822,634.181,1410.729,0,1902.543,543.584,478.871,867.146,621.239,983.628,841.261,634.181,621.239,608.296,996.57,1371.902,983.628,0,1320.132,427.102,582.411,673.008,802.433,660.066,647.124,582.411,440.044,556.526,452.986,362.389,595.354,673.008,647.124,569.469,0,828.318,258.849],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12.942,491.813,491.813,673.008,957.742,1125.994,1449.556,1708.405,2096.68,1928.428,2394.357,2769.688,3015.595,3183.847,3326.214,3145.02,2924.998,3106.193,2782.631,2575.552,2497.897,2472.012,2264.932,2433.184,2497.896,2239.046,2096.679,2226.103,1876.657,1734.29,1656.636,1410.729,1462.499,1333.075,1449.557,1022.456,918.916,828.319,647.124,750.664,543.584,440.044,388.274,336.504,336.504,284.734,284.734,207.079,129.424,155.309,103.539,103.539,116.481,90.596,116.481,103.538,90.596,103.538,116.481,129.423,116.481,116.481,90.596,77.654,77.654,51.769,25.884,12.942,12.942,12.942,25.884,25.884,25.884,12.942,25.884,25.884,25.884,38.826,1048.339,1138.936,1151.878,1151.878,1138.936,1138.936,1138.936,1125.994,103.539,12.942,12.942,12.942,12.942,12.942,25.884,25.884,38.826,38.826,25.884,25.884,25.884,25.884,12.942,12.942,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38.827,77.654,90.596,284.733,323.56,323.56,323.56,375.33,336.503,362.388,349.446,258.849,220.022,220.022,349.447,297.677,440.044,427.102,465.929,362.389,362.389,517.699,414.159,414.159,336.504,427.101,388.274,388.274,491.814,336.504,491.814,543.584,582.412,440.045,440.045,647.125,543.585,789.492,608.297,828.319,724.779,724.779,918.916,711.836,1203.65,957.743,1294.247,1022.455,1022.455,1695.463,1604.866,1799.003,1307.189,1514.269,1177.765,1177.765,1773.119,1100.111,1514.27,1320.133,1876.659,1669.579,1669.579,2886.171,2290.817,2873.228,2355.529,3403.869,2847.343,2847.343,4361.612,3145.02,4076.878,3494.467,4568.692,3520.352,3520.352,5202.873,3688.604,4775.772,3843.914,4620.462,3546.237,3546.237,6911.279,5228.758,7791.367,6704.199,8360.835,7584.287,7584.287,11454.086,8089.044,10612.826,8050.217,10470.459,8813.823,8813.823,11997.671,8127.872,10561.056,8037.274,10975.215,8554.973,8554.973,12269.462,10185.724,11570.568,9784.508,11052.87,9292.694,10185.724,11001.1,7571.345,8218.469,7998.447,7351.323,8464.376,8114.929,7920.792,7623.115,8503.203,7390.15,7636.057,7636.057,7157.185,6872.451,6652.429,7001.876,6458.293,6807.74,6238.272,6872.453,5591.149,5655.861,6173.56,6678.316,7040.705,6057.077,6535.948,6328.869,6290.041,6354.753,6160.616,5448.78,5112.276,5694.687,4814.599,4944.023,4814.598,4503.979,4296.9,4309.842,4309.842,4296.9,3856.856,4128.648,3934.511],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.849,70.259,70.259,96.144,136.82,160.856,207.08,242.209,231.116,275.49,316.166,354.993,406.763,408.612,438.195,391.972,373.483,377.181,318.015,292.13,308.77,286.583,312.468,321.713,286.583,299.526,249.605,253.303,223.72,210.777,201.533,166.403,175.648,190.439,138.669,131.274,107.238,92.446,92.446,64.712,62.863,46.223,48.072,48.072,36.978,40.676,25.885,16.64,18.489,12.942,14.791,14.791,12.942,12.942,12.942,12.942,9.245,12.942,16.64,16.64,16.64,12.942,11.094,11.094,5.547,3.698,1.849,1.849,1.849,1.849,3.698,3.698,1.849,1.849,3.698,3.698,3.698,3.698,149.763,162.705,164.554,162.705,162.705,162.705,160.856,14.791,1.849,0,1.849,1.849,1.849,1.849,3.698,3.698,5.547,3.698,3.698,3.698,3.698,1.849,1.849,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5.547,11.094,12.942,40.676,46.223,46.223,46.223,48.072,42.525,49.921,22.187,31.432,31.432,31.432,42.525,42.525,53.619,61.015,51.77,51.77,51.77,55.468,59.166,38.827,40.676,55.468,55.468,55.468,48.072,44.374,70.259,68.41,62.863,62.863,62.863,77.655,77.655,86.899,79.504,103.54,103.54,103.54,101.691,101.691,136.82,136.82,146.065,146.065,146.065,214.475,229.267,186.741,186.741,168.252,168.252,168.252,157.159,142.367,188.59,188.59,238.511,238.511,238.511,327.26,327.26,336.504,336.504,406.763,406.763,406.763,449.289,449.289,499.21,499.21,502.907,502.907,502.907,526.943,526.943,549.131,549.131,506.605,506.605,506.605,746.965,746.965,957.743,957.743,1083.47,1083.47,1083.47,1155.578,1155.578,1150.031,1150.031,1259.118,1259.118,1259.118,1161.125,1161.125,1148.182,1148.182,1222.139,1222.139,1222.139,1297.945,1455.103,1305.341,1397.787,1159.276,1327.528,1455.103,1040.944,924.462,976.232,1050.189,868.994,1040.944,1031.7,1015.059,1048.34,965.139,889.333,1090.865,750.663,904.124,881.937,876.39,833.865,832.016,771.001,891.182,709.987,721.081,739.57,758.059,865.297,865.297,745.117,843.11,815.376,811.678,765.455,684.102,637.879,730.325,624.936,626.785,623.088,591.656,528.792,519.548,523.246,532.49,550.979,471.476,525.095,510.303]},{"iso":"AGO","continent":"Africa","population":32866268,"name":"Angola","population_density":23.89,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,3,3,3,4,4,5,7,7,7,8,8,8,10,14,16,17,19,19,19,19,19,19,19,19,19,19,24,24,24,24,25,25,25,25,26,27,27,27,27,30,35,35,35,36,36,36,43,43,45,45,45,45,48,48,48,48,50,52,52,58,60,61,69,70,70,71,74,81,84,86,86,86,86,86,86,88,91,92,96,113,118,130,138,140,142,148,155,166,172,176,183,186,189,197,212,212,259,267,276,284,291,315,328,346,346,346,386,386,396,458,462,506,525,541,576,607,638,687,705,749,779,812,851,880,916,932,950,1000,1078,1109,1148,1164,1199,1280,1344,1395,1483,1538,1572,1672,1679,1735,1762,1815,1852,1879,1906,1935,1966,2015,2044,2068,2134,2171,2222,2283,2332,2415,2471,2551,2624,2654,2729,2777,2805,2876,2935,2965,2981,3033,3092,3217,3279,3335,3388,3439,3569,3675,3789,3848,3901,3991,4117,4236,4363,4475,4590,4672,4718,4797,4905,4972,5114,5211,5370,5402,5530,5725,5725,5958,6031,6246,6366,6488,6680,6846,7096,7222,7462,7622,7829,8049,8338,8582,8829,9026,9381,9644,9871,10074,10269,10558,10805,11035,11228,11577,11813,12102,12223,12335,12433,12680,12816,12953,13053,13228,13374,13451,13615,13818,13922,14134,14267,14413,14493,14634,14742,14821,14920,15008,15087,15103,15139,15251,15319,15361,15493,15536,15591,15648,15729,15804,15925,16061,16161,16188,16277,16362,16407,16484],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.03,0.061,0.061,0.091,0.091,0.091,0.122,0.122,0.152,0.213,0.213,0.213,0.243,0.243,0.243,0.304,0.426,0.487,0.517,0.578,0.578,0.578,0.578,0.578,0.578,0.578,0.578,0.578,0.578,0.73,0.73,0.73,0.73,0.761,0.761,0.761,0.761,0.791,0.822,0.822,0.822,0.822,0.913,1.065,1.065,1.065,1.095,1.095,1.095,1.308,1.308,1.369,1.369,1.369,1.369,1.46,1.46,1.46,1.46,1.521,1.582,1.582,1.765,1.826,1.856,2.099,2.13,2.13,2.16,2.252,2.465,2.556,2.617,2.617,2.617,2.617,2.617,2.617,2.678,2.769,2.799,2.921,3.438,3.59,3.955,4.199,4.26,4.321,4.503,4.716,5.051,5.233,5.355,5.568,5.659,5.751,5.994,6.45,6.45,7.88,8.124,8.398,8.641,8.854,9.584,9.98,10.528,10.528,10.528,11.745,11.745,12.049,13.935,14.057,15.396,15.974,16.461,17.526,18.469,19.412,20.903,21.451,22.789,23.702,24.706,25.893,26.775,27.871,28.357,28.905,30.426,32.8,33.743,34.929,35.416,36.481,38.946,40.893,42.445,45.122,46.796,47.83,50.873,51.086,52.79,53.611,55.224,56.35,57.171,57.993,58.875,59.818,61.309,62.191,62.922,64.93,66.056,67.607,69.463,70.954,73.48,75.183,77.618,79.839,80.751,83.033,84.494,85.346,87.506,89.301,90.214,90.701,92.283,94.078,97.882,99.768,101.472,103.084,104.636,108.592,111.817,115.285,117.081,118.693,121.431,125.265,128.886,132.75,136.158,139.657,142.152,143.551,145.955,149.241,151.28,155.6,158.552,163.389,164.363,168.258,174.191,174.191,181.28,183.501,190.043,193.694,197.406,203.248,208.299,215.905,219.739,227.041,231.91,238.208,244.902,253.695,261.119,268.634,274.628,285.429,293.432,300.338,306.515,312.448,321.241,328.757,335.755,341.627,352.246,359.426,368.219,371.901,375.309,378.291,385.806,389.944,394.112,397.155,402.48,406.922,409.265,414.255,420.431,423.595,430.046,434.092,438.535,440.969,445.259,448.545,450.949,453.961,456.638,459.042,459.529,460.624,464.032,466.101,467.379,471.395,472.704,474.377,476.111,478.576,480.858,484.539,488.677,491.72,492.541,495.249,497.836,499.205,501.548],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.03,0,0.03,0,0,0.03,0,0.03,0.061,0,0,0.03,0,0,0.061,0.122,0.061,0.03,0.061,0,0,0,0,0,0,0,0,0,0.152,0,0,0,0.03,0,0,0,0.03,0.03,0,0,0,0.091,0.152,0,0,0.03,0,0,0.213,0,0.061,0,0,0,0.091,0,0,0,0.061,0.061,0,0.183,0.061,0.03,0.243,0.03,0,0.03,0.091,0.213,0.091,0.061,0,0,0,0,0,0.061,0.091,0.03,0.122,0.517,0.152,0.365,0.243,0.061,0.061,0.183,0.213,0.335,0.183,0.122,0.213,0.091,0.091,0.243,0.456,0,1.43,0.243,0.274,0.243,0.213,0.73,0.396,0.548,0,0,1.217,0,0.304,1.886,0.122,1.339,0.578,0.487,1.065,0.943,0.943,1.491,0.548,1.339,0.913,1.004,1.187,0.882,1.095,0.487,0.548,1.521,2.373,0.943,1.187,0.487,1.065,2.465,1.947,1.552,2.678,1.673,1.034,3.043,0.213,1.704,0.822,1.613,1.126,0.822,0.822,0.882,0.943,1.491,0.882,0.73,2.008,1.126,1.552,1.856,1.491,2.525,1.704,2.434,2.221,0.913,2.282,1.46,0.852,2.16,1.795,0.913,0.487,1.582,1.795,3.803,1.886,1.704,1.613,1.552,3.955,3.225,3.469,1.795,1.613,2.738,3.834,3.621,3.864,3.408,3.499,2.495,1.4,2.404,3.286,2.039,4.321,2.951,4.838,0.974,3.895,5.933,0,7.089,2.221,6.542,3.651,3.712,5.842,5.051,7.607,3.834,7.302,4.868,6.298,6.694,8.793,7.424,7.515,5.994,10.801,8.002,6.907,6.177,5.933,8.793,7.515,6.998,5.872,10.619,7.181,8.793,3.682,3.408,2.982,7.515,4.138,4.168,3.043,5.325,4.442,2.343,4.99,6.177,3.164,6.45,4.047,4.442,2.434,4.29,3.286,2.404,3.012,2.678,2.404,0.487,1.095,3.408,2.069,1.278,4.016,1.308,1.673,1.734,2.465,2.282,3.682,4.138,3.043,0.822,2.708,2.586,1.369,2.343],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.03,0.03,0.06,0.06,0.06,0.09,0.09,0.12,0.151,0.151,0.121,0.151,0.151,0.121,0.182,0.274,0.274,0.304,0.365,0.335,0.335,0.335,0.274,0.152,0.091,0.061,0,0,0.152,0.152,0.152,0.152,0.182,0.182,0.182,0.182,0.06,0.09,0.09,0.09,0.06,0.151,0.303,0.303,0.273,0.273,0.273,0.273,0.486,0.395,0.304,0.304,0.304,0.274,0.365,0.365,0.152,0.152,0.152,0.213,0.213,0.396,0.366,0.396,0.639,0.669,0.608,0.577,0.668,0.698,0.728,0.759,0.516,0.486,0.486,0.456,0.365,0.213,0.213,0.182,0.304,0.821,0.973,1.338,1.581,1.581,1.551,1.704,1.795,1.613,1.644,1.401,1.371,1.401,1.431,1.491,1.734,1.399,2.646,2.767,2.828,2.98,3.102,3.589,3.529,4.077,2.647,2.404,3.347,3.104,3.195,4.351,4.077,4.868,5.446,5.933,5.781,6.724,7.363,6.968,7.394,7.394,7.729,8.246,8.368,8.307,8.459,7.455,7.455,7.637,9.097,9.036,9.036,8.641,8.611,10.589,11.988,12.019,12.324,13.054,12.901,15.457,14.605,13.844,12.719,12.78,11.228,10.377,10.165,8.004,8.734,8.521,8.581,7.698,8.58,8.884,9.614,10.588,11.136,12.17,12.992,14.696,14.909,14.696,15.426,15.03,14.391,14.026,14.117,12.596,10.862,11.531,11.044,13.387,14.421,13.965,13.783,14.422,17.89,19.533,21.207,19.199,18.926,19.96,22.181,24.25,24.159,24.342,24.372,25.072,24.859,24.525,23.977,22.395,22.852,22.395,23.734,22.213,24.708,28.237,24.951,30.001,27.901,31.492,30.305,33.043,34.99,34.108,41.715,38.46,43.541,41.867,44.514,47.496,50.447,52.82,52.728,54.888,58.387,61.521,62.13,61.613,58.753,60.122,60.122,61.126,56.197,58.814,59.088,61.704,59.453,54.068,49.535,50.052,48.318,41.867,37.729,34.261,35.021,33.956,35.964,34.626,33.652,35.934,36.938,36.055,34.047,35.994,34.29,30.517,30.365,26.593,24.95,20.995,19.656,18.774,17.557,16.431,17.435,16.065,15.334,16.581,17.951,16.825,18.438,21.298,20.325,19.839,20.874,21.726,20.63,20.691],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.013,0.013,0.013,0.022,0.017,0.017,0.022,0.017,0.017,0.022,0.03,0.039,0.043,0.048,0.048,0.048,0.039,0.022,0.013,0.009,0,0,0,0.022,0.022,0.022,0.022,0.026,0.026,0.026,0.004,0.009,0.013,0.013,0.009,0.009,0.022,0.043,0.039,0.035,0.039,0.039,0.039,0.057,0.035,0.043,0.043,0.039,0.039,0.052,0.022,0.022,0.013,0.022,0.03,0.03,0.043,0.052,0.057,0.091,0.087,0.078,0.083,0.07,0.091,0.1,0.074,0.07,0.07,0.065,0.052,0.022,0.017,0.022,0.026,0.043,0.117,0.139,0.191,0.217,0.213,0.217,0.226,0.183,0.209,0.183,0.165,0.187,0.191,0.178,0.183,0.2,0.174,0.361,0.365,0.391,0.413,0.409,0.448,0.504,0.378,0.343,0.304,0.443,0.413,0.352,0.565,0.504,0.695,0.778,0.674,0.826,0.917,0.782,0.978,0.865,0.974,1.034,1.026,1.061,1.052,0.995,0.987,0.874,0.961,1.156,1.121,1.165,1.078,1.161,1.434,1.495,1.378,1.626,1.695,1.773,2.056,1.734,1.7,1.595,1.443,1.365,1.334,1.017,1.113,1.004,1.1,0.995,0.939,1.108,1.152,1.247,1.378,1.378,1.613,1.752,1.813,1.969,1.878,1.939,1.934,1.695,1.76,1.669,1.482,1.421,1.321,1.369,1.791,1.752,1.739,1.839,1.991,2.33,2.534,2.486,2.473,2.46,2.621,2.947,2.899,2.99,2.982,3.225,3.351,3.16,2.956,2.908,2.647,2.777,2.699,3.034,2.973,3.186,3.564,3.273,3.669,3.564,3.808,4.19,4.164,4.151,4.873,4.946,5.177,5.285,5.459,5.829,5.951,6.485,6.459,6.985,6.798,7.646,7.889,7.92,7.546,7.333,7.515,7.733,7.189,6.885,7.415,7.559,7.967,7.237,6.65,6.077,6.311,5.385,4.955,4.134,4.368,4.516,4.425,4.064,4.355,4.212,4.699,4.516,4.516,4.529,4.429,4.016,3.908,3.416,3.221,2.93,2.651,2.195,2.212,2.165,1.917,2.108,1.952,2.121,2.212,2.078,2.108,2.451,2.469,2.717,2.595,2.734,2.751,2.621,2.43]},{"iso":"ATG","continent":"North America","population":97928,"name":"Antigua and Barbuda","population_density":231.845,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,3,3,3,7,7,7,7,7,7,7,9,15,15,15,15,19,19,19,19,21,21,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,65,65,65,69,69,69,69,69,68,68,68,70,70,70,73,74,74,74,74,74,74,74,76,76,76,76,76,76,76,82,82,82,86,86,91,91,91,91,91,92,92,92,92,92,92,92,92,92,92,92,93,93,93,93,93,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,96,96,96,96,97,97,98,98,101,101,101,101,101,106,107,107,107,107,108,111,111,111,111,111,111,112,112,112,119,119,119,119,122,122,122,124,124,124,124,124,124,127,128,128,128,128,130,130,130,131,131,131,131,131,131,133,134,134,134,134,139,139,139,139,139,139,139,140,141,141,141,141,141,142,144,144,144,144,144,146,146,146,146,147,148,148,148,148,151,151],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10.212,10.212,10.212,10.212,10.212,10.212,10.212,10.212,10.212,10.212,30.635,30.635,30.635,71.481,71.481,71.481,71.481,71.481,71.481,71.481,91.904,153.174,153.174,153.174,153.174,194.02,194.02,194.02,194.02,214.443,214.443,234.866,234.866,234.866,234.866,234.866,234.866,234.866,234.866,234.866,245.078,245.078,245.078,245.078,245.078,245.078,245.078,245.078,245.078,255.29,255.29,255.29,255.29,255.29,255.29,255.29,255.29,255.29,255.29,255.29,255.29,255.29,255.29,255.29,255.29,255.29,255.29,255.29,255.29,255.29,255.29,255.29,255.29,255.29,255.29,255.29,255.29,255.29,255.29,265.501,265.501,265.501,265.501,265.501,265.501,265.501,265.501,265.501,265.501,265.501,265.501,265.501,265.501,265.501,265.501,265.501,265.501,265.501,265.501,265.501,265.501,265.501,265.501,265.501,663.753,663.753,663.753,704.599,704.599,704.599,704.599,704.599,694.388,694.388,694.388,714.811,714.811,714.811,745.446,755.657,755.657,755.657,755.657,755.657,755.657,755.657,776.08,776.08,776.08,776.08,776.08,776.08,776.08,837.35,837.35,837.35,878.196,878.196,929.254,929.254,929.254,929.254,929.254,939.466,939.466,939.466,939.466,939.466,939.466,939.466,939.466,939.466,939.466,939.466,949.677,949.677,949.677,949.677,949.677,959.889,959.889,959.889,959.889,959.889,959.889,959.889,959.889,959.889,959.889,959.889,959.889,959.889,959.889,959.889,970.1,970.1,970.1,970.1,970.1,970.1,970.1,970.1,970.1,970.1,970.1,970.1,970.1,970.1,970.1,970.1,980.312,980.312,980.312,980.312,990.524,990.524,1000.735,1000.735,1031.37,1031.37,1031.37,1031.37,1031.37,1082.428,1092.639,1092.639,1092.639,1092.639,1102.851,1133.486,1133.486,1133.486,1133.486,1133.486,1133.486,1143.697,1143.697,1143.697,1215.178,1215.178,1215.178,1215.178,1245.813,1245.813,1245.813,1266.236,1266.236,1266.236,1266.236,1266.236,1266.236,1296.871,1307.083,1307.083,1307.083,1307.083,1327.506,1327.506,1327.506,1337.718,1337.718,1337.718,1337.718,1337.718,1337.718,1358.141,1368.352,1368.352,1368.352,1368.352,1419.41,1419.41,1419.41,1419.41,1419.41,1419.41,1419.41,1429.622,1439.833,1439.833,1439.833,1439.833,1439.833,1450.045,1470.468,1470.468,1470.468,1470.468,1470.468,1490.891,1490.891,1490.891,1490.891,1501.103,1511.314,1511.314,1511.314,1511.314,1541.949,1541.949],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20.423,0,0,40.846,0,0,0,0,0,0,20.423,61.27,0,0,0,40.846,0,0,0,20.423,0,20.423,0,0,0,0,0,0,0,0,10.212,0,0,0,0,0,0,0,0,10.212,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10.212,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,398.252,0,0,40.846,0,0,0,0,-10.212,0,0,20.423,0,0,30.635,10.212,0,0,0,0,0,0,20.423,0,0,0,0,0,0,61.27,0,0,40.846,0,51.058,0,0,0,0,10.212,0,0,0,0,0,0,0,0,0,0,10.212,0,0,0,0,10.212,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10.212,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10.212,0,0,0,10.212,0,10.212,0,30.635,0,0,0,0,51.058,10.212,0,0,0,10.212,30.635,0,0,0,0,0,10.212,0,0,71.481,0,0,0,30.635,0,0,20.423,0,0,0,0,0,30.635,10.212,0,0,0,20.423,0,0,10.212,0,0,0,0,0,20.423,10.212,0,0,0,51.058,0,0,0,0,0,0,10.212,10.212,0,0,0,0,10.212,20.423,0,0,0,0,20.423,0,0,0,10.212,10.212,0,0,0,30.635,0],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20.423,20.423,20.423,61.269,61.269,61.269,61.269,61.269,40.846,40.846,61.269,81.693,81.693,81.693,81.693,122.539,122.539,122.539,102.116,61.269,61.269,81.692,81.692,40.846,40.846,40.846,40.846,20.423,20.423,0,10.212,10.212,10.212,10.212,10.212,10.212,10.212,10.212,0,10.212,10.212,10.212,10.212,10.212,10.212,10.212,10.212,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10.212,10.212,10.212,10.212,10.212,10.212,10.212,10.212,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,398.252,398.252,398.252,439.098,439.098,439.098,439.098,439.098,30.634,30.634,30.634,10.211,10.211,10.211,40.846,51.058,61.27,61.27,61.27,40.847,40.847,40.847,30.635,20.423,20.423,20.423,20.423,20.423,20.423,81.693,61.27,61.27,102.116,102.116,153.174,153.174,153.174,91.904,91.904,102.116,61.27,61.27,10.212,10.212,10.212,10.212,10.212,0,0,0,10.212,10.212,10.212,10.212,10.212,20.424,20.424,20.424,10.212,10.212,10.212,10.212,10.212,0,0,0,0,0,0,0,10.212,10.212,10.212,10.212,10.212,10.212,10.212,10.212,0,0,0,0,0,0,0,0,10.212,10.212,10.212,10.212,20.424,20.424,30.636,30.636,51.059,51.059,51.059,51.059,40.847,91.905,91.905,91.905,61.27,61.27,71.482,102.117,102.117,51.059,40.847,40.847,40.847,51.059,40.847,10.212,81.693,81.693,81.693,81.693,112.328,102.116,102.116,122.539,51.058,51.058,51.058,51.058,20.423,51.058,61.27,40.847,40.847,40.847,61.27,61.27,61.27,40.847,30.635,30.635,30.635,30.635,10.212,30.635,40.847,30.635,30.635,30.635,81.693,81.693,81.693,61.27,51.058,51.058,51.058,61.27,20.424,20.424,20.424,20.424,20.424,30.636,51.059,40.847,30.635,30.635,30.635,51.058,51.058,40.846,20.423,30.635,40.847,40.847,40.847,20.424,51.059,51.059],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2.918,2.918,2.918,8.753,8.753,8.753,8.753,5.835,5.835,5.835,2.918,11.67,11.67,11.67,11.67,17.506,17.506,14.588,5.835,8.753,8.753,11.67,5.835,5.835,5.835,5.835,2.918,2.918,0,0,1.459,1.459,1.459,1.459,1.459,1.459,1.459,0,0,1.459,1.459,1.459,1.459,1.459,1.459,1.459,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.459,1.459,1.459,1.459,1.459,1.459,1.459,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56.893,56.893,56.893,62.728,62.728,62.728,62.728,5.835,4.376,4.376,-1.459,1.459,1.459,1.459,5.835,8.753,8.753,8.753,5.835,5.835,5.835,1.459,2.918,2.918,2.918,2.918,2.918,2.918,2.918,8.753,8.753,8.753,14.588,14.588,21.882,21.882,13.129,13.129,13.129,8.753,8.753,1.459,1.459,1.459,1.459,1.459,0,0,0,0,1.459,1.459,1.459,1.459,1.459,2.918,2.918,1.459,1.459,1.459,1.459,1.459,0,0,0,0,0,0,0,0,1.459,1.459,1.459,1.459,1.459,1.459,1.459,0,0,0,0,0,0,0,0,0,1.459,1.459,1.459,1.459,2.918,2.918,4.376,2.918,7.294,7.294,7.294,5.835,5.835,11.67,13.129,8.753,8.753,8.753,10.212,14.588,7.294,5.835,5.835,5.835,5.835,5.835,1.459,1.459,11.67,11.67,11.67,11.67,14.588,14.588,14.588,7.294,7.294,7.294,7.294,2.918,2.918,7.294,5.835,5.835,5.835,5.835,8.753,8.753,4.376,4.376,4.376,4.376,4.376,1.459,1.459,4.376,4.376,4.376,4.376,4.376,11.67,11.67,8.753,7.294,7.294,7.294,7.294,1.459,2.918,2.918,2.918,2.918,2.918,4.376,5.835,4.376,4.376,4.376,4.376,7.294,5.835,2.918,2.918,4.376,5.835,5.835,2.918,2.918,7.294,7.294]},{"iso":"ARG","continent":"South America","population":45195777,"name":"Argentina","population_density":16.177,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,8,12,12,17,19,19,31,34,45,56,68,79,97,128,158,266,301,387,387,502,589,690,745,820,1054,1054,1133,1265,1451,1451,1554,1628,1715,1795,1975,1975,2142,2208,2277,2443,2571,2669,2758,2839,2941,3031,3144,3435,3607,3780,3892,4003,4127,4285,4428,4532,4681,4783,4887,5020,5208,5371,5611,5776,6034,6278,6563,6879,7134,7479,7805,8068,8371,8809,9283,9931,10649,11353,12076,12628,13228,13933,14702,15419,16214,16851,17415,18319,19268,20197,21037,22020,22794,23620,24761,25987,27373,28764,30295,31577,32785,34159,35552,37510,39570,41204,42785,44931,47203,49851,52457,55343,57744,59933,62268,64530,67197,69941,72786,75376,77815,80447,83426,87030,90693,94060,97509,100166,103265,106910,111146,114783,119301,122524,126755,130774,136118,141900,148027,153520,158334,162526,167416,173355,178996,185373,191302,196543,201919,206743,213535,220682,228195,235677,241811,246499,253868,260911,268574,276072,282437,289100,294569,299126,305966,312659,320884,329043,336802,342154,350867,359638,370188,380292,392009,401239,408426,417735,428239,439172,451198,461882,471806,478792,488007,500034,512293,524198,535705,546481,555537,565446,577338,589012,601713,613658,622934,631365,640147,652174,664799,678266,691235,702484,711325,723132,736609,751001,765002,779689,790818,798486,809728,824468,840915,856369,871468,883882,894206,903730,917035,931967,949063,965609,979119,989680,1002662,1018999,1037325,1053650,1069368,1081336,1090589,1102301,1116609,1130533,1143800,1157179,1166924,1173533,1183131,1195276,1205928,1217028,1228814,1236851,1242182,1250499,1262476,1273356,1284519,1296378,1304846,1310491,1318384,1329005,1339337,1349434,1359042,1366182,1370366,1374631,1381795,1390388,1399431,1407277,1413375,1418807,1424533,1432570,1440103,1447732,1454631,1459832,1463110,1466309,1469919,1475222,1482216,1489328,1494602,1498160,1503222,1510203,1517046,1524372],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.022,0.022,0.022,0.044,0.177,0.266,0.266,0.376,0.42,0.42,0.686,0.752,0.996,1.239,1.505,1.748,2.146,2.832,3.496,5.886,6.66,8.563,8.563,11.107,13.032,15.267,16.484,18.143,23.321,23.321,25.069,27.989,32.105,32.105,34.384,36.021,37.946,39.716,43.699,43.699,47.394,48.854,50.381,54.054,56.886,59.054,61.023,62.816,65.072,67.064,69.564,76.003,79.808,83.636,86.114,88.57,91.314,94.81,97.974,100.275,103.572,105.828,108.13,111.072,115.232,118.839,124.149,127.8,133.508,138.907,145.213,152.204,157.847,165.48,172.693,178.512,185.216,194.908,205.395,219.733,235.619,251.196,267.193,279.407,292.682,308.281,325.296,341.16,358.75,372.845,385.324,405.325,426.323,446.878,465.464,487.214,504.339,522.615,547.861,574.987,605.654,636.431,670.306,698.671,725.4,755.801,786.622,829.945,875.524,911.678,946.659,994.142,1044.412,1103.001,1160.662,1224.517,1277.641,1326.075,1377.739,1427.788,1486.798,1547.512,1610.46,1667.766,1721.732,1779.967,1845.88,1925.622,2006.67,2081.168,2157.48,2216.269,2284.837,2365.486,2459.212,2539.684,2639.649,2710.961,2804.576,2893.5,3011.742,3139.674,3275.24,3396.778,3503.292,3596.044,3704.24,3835.646,3960.459,4101.556,4232.741,4348.703,4467.652,4574.388,4724.667,4882.801,5049.034,5214.58,5350.301,5454.027,5617.073,5772.907,5942.458,6108.358,6249.19,6396.615,6517.622,6618.45,6769.792,6917.881,7099.867,7280.393,7452.068,7570.486,7763.27,7957.336,8190.765,8414.326,8673.576,8877.798,9036.818,9242.788,9475.199,9717.103,9983.189,10219.583,10439.161,10593.733,10797.624,11063.733,11334.975,11598.385,11852.988,12091.417,12291.79,12511.036,12774.158,13032.457,13313.478,13577.773,13783.013,13969.557,14163.868,14429.976,14709.317,15007.287,15294.239,15543.134,15738.749,15999.99,16298.182,16616.619,16926.404,17251.368,17497.608,17667.27,17916.01,18242.147,18606.053,18947.987,19282.067,19556.739,19785.167,19995.895,20290.281,20620.666,20998.931,21365.027,21663.949,21897.621,22184.86,22546.332,22951.813,23313.019,23660.795,23925.598,24130.33,24389.469,24706.047,25014.129,25307.674,25603.697,25819.315,25965.545,26177.91,26446.63,26682.316,26927.914,27188.691,27366.517,27484.471,27668.492,27933.495,28174.225,28421.217,28683.609,28870.972,28995.873,29170.513,29405.513,29634.118,29857.524,30070.11,30228.09,30320.665,30415.032,30573.542,30763.671,30963.756,31137.356,31272.28,31392.468,31519.162,31696.988,31863.663,32032.462,32185.109,32300.186,32372.715,32443.496,32523.37,32640.704,32795.453,32952.813,33069.506,33148.23,33260.231,33414.693,33566.101,33728.195],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.022,0.133,0.089,0,0.111,0.044,0,0.266,0.066,0.243,0.243,0.266,0.243,0.398,0.686,0.664,2.39,0.774,1.903,0,2.544,1.925,2.235,1.217,1.659,5.177,0,1.748,2.921,4.115,0,2.279,1.637,1.925,1.77,3.983,0,3.695,1.46,1.527,3.673,2.832,2.168,1.969,1.792,2.257,1.991,2.5,6.439,3.806,3.828,2.478,2.456,2.744,3.496,3.164,2.301,3.297,2.257,2.301,2.943,4.16,3.607,5.31,3.651,5.708,5.399,6.306,6.992,5.642,7.633,7.213,5.819,6.704,9.691,10.488,14.338,15.886,15.577,15.997,12.214,13.276,15.599,17.015,15.864,17.59,14.094,12.479,20.002,20.998,20.555,18.586,21.75,17.125,18.276,25.246,27.126,30.667,30.777,33.875,28.365,26.728,30.401,30.821,43.323,45.579,36.154,34.981,47.482,50.27,58.59,57.66,63.856,53.124,48.434,51.664,50.049,59.01,60.714,62.948,57.306,53.965,58.236,65.913,79.742,81.047,74.498,76.312,58.789,68.568,80.649,93.726,80.472,99.965,71.312,93.615,88.924,118.241,127.932,135.566,121.538,106.514,92.752,108.196,131.406,124.813,141.097,131.185,115.962,118.949,106.736,150.28,158.134,166.232,165.546,135.721,103.727,163.046,155.833,169.551,165.9,140.832,147.425,121.007,100.828,151.342,148.089,181.986,180.526,171.675,118.418,192.783,194.067,233.429,223.561,259.25,204.223,159.019,205.971,232.411,241.903,266.087,236.394,219.578,154.572,203.891,266.109,271.242,263.41,254.603,238.429,200.373,219.246,263.122,258.298,281.022,264.295,205.24,186.544,194.31,266.109,279.34,297.97,286.952,248.895,195.616,261.241,298.192,318.437,309.786,324.964,246.24,169.662,248.74,326.137,363.906,341.935,334.08,274.672,228.428,210.728,294.386,330.385,378.265,366.096,298.922,233.672,287.239,361.472,405.48,361.206,347.776,264.804,204.732,259.139,316.578,308.082,293.545,296.023,215.617,146.23,212.365,268.72,235.686,245.598,260.777,177.826,117.953,184.022,265.003,240.73,246.992,262.392,187.363,124.901,174.64,235,228.605,223.406,212.586,157.979,92.575,94.367,158.51,190.128,200.085,173.6,134.924,120.188,126.693,177.826,166.675,168.799,152.647,115.077,72.529,70.781,79.875,117.334,154.749,157.36,116.692,78.724,112.002,154.461,151.408,162.095],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.022,0.155,0.244,0.244,0.355,0.399,0.399,0.665,0.709,0.819,0.973,1.239,1.371,1.725,2.411,2.809,5.133,5.664,7.324,7.058,9.359,10.886,12.435,12.988,12.257,16.66,14.757,16.505,16.882,19.072,16.837,17.899,17.877,14.625,16.395,18.63,15.709,15.289,16.749,15.997,18.033,18.94,19.338,17.324,19.116,17.678,18.209,19.182,21.948,22.922,24.582,25.091,25.755,26.242,27.747,28.411,24.273,23.764,22.193,22.016,22.503,23.919,24.03,26.176,27.526,29.937,33.079,37.084,41.133,42.615,46.641,48.544,50.712,51.708,56,60.182,67.528,77.772,85.716,94.5,100.895,107.467,113.375,119.902,121.428,123.132,121.649,118.131,125.919,133.641,138.597,140.168,146.054,145.589,149.771,162.538,169.662,179.331,189.553,204.842,211.457,221.06,233.185,238.76,254.957,269.869,275.246,276.352,295.469,319.011,347.2,374.039,394.572,402.117,414.397,431.08,433.647,442.387,444.511,449.799,443.249,444.09,453.892,468.141,497.834,519.871,533.655,547.019,548.502,563.105,585.518,613.331,614.061,632.979,629.793,647.096,677.231,726.904,774.187,816.027,857.093,863.642,885.082,899.663,942.145,948.717,961.882,957.501,951.925,964.36,978.344,1020.428,1047.156,1088.575,1113.024,1117.56,1105.325,1149.422,1198.519,1217.79,1225.556,1200.156,1182.035,1167.321,1164.422,1152.718,1144.974,1157.409,1172.035,1202.878,1173.871,1245.647,1338.886,1420.973,1496.445,1573.709,1597.406,1584.75,1672.303,1711.931,1759.767,1792.425,1805.258,1765.586,1715.935,1760.807,1820.945,1859.776,1881.283,1869.799,1871.834,1852.629,1917.303,1976.534,1968.723,1978.503,1979.388,1930.025,1878.14,1872.077,1918.94,1935.158,1974.83,1980.76,1965.36,1955.736,2030.433,2134.315,2186.643,2217.089,2244.083,2203.371,2124.138,2177.262,2242.158,2307.872,2331.37,2355.664,2305.372,2287.56,2328.626,2374.272,2378.52,2392.879,2417.04,2381.882,2340.882,2399.693,2550.437,2661.531,2692.352,2661.863,2560.571,2466.381,2491.848,2521.187,2467.797,2355.862,2290.679,2158.52,2039.946,2047.579,2057.16,1976.268,1913.784,1881.016,1762.819,1665.155,1702.947,1755.585,1727.595,1738.901,1755.695,1682.281,1629.356,1686.043,1737.021,1700.623,1683.299,1648.893,1544.48,1449.692,1419.158,1403.028,1358.156,1329.636,1279.83,1202.168,1164.377,1198.495,1281.954,1290.119,1268.79,1221.352,1162.829,1100.434,1051.027,1004.209,943.717,931.791,920.352,884.397,848.044,887.517,971.197,1042.73,1087.491],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.035,0.051,0.057,0.057,0.092,0.082,0.104,0.139,0.161,0.19,0.247,0.307,0.392,0.699,0.774,1.008,0.974,1.28,1.457,1.682,1.514,1.64,2.108,2.108,1.994,2.137,2.405,2.232,2.32,1.814,2.089,2.092,2.244,1.656,2.184,2.067,2.051,2.301,2.453,2.194,2.475,2.203,2.317,2.383,2.216,2.731,2.965,3.23,3.328,3.357,3.464,3.607,3.139,2.924,2.848,2.816,2.794,2.823,2.917,2.981,3.411,3.461,3.954,4.397,4.877,5.282,5.573,5.904,6.413,6.429,6.616,7.099,7.599,8.841,10.02,11.215,12.669,13.456,13.968,14.698,15.08,15.077,15.365,15.093,15.131,16.092,16.863,17.369,17.758,18.352,18.785,19.613,20.362,21.238,22.682,24.424,26.156,27.762,28.969,29.706,30.234,32.042,34.156,34.482,35.427,38.392,41.23,45.197,47.245,49.856,52.28,54.202,54.8,54.768,54.828,55.264,55.135,55.732,56.522,57.461,59.727,62.689,65.594,67.244,69.959,70.648,72.124,74.229,76.227,76.145,79.783,79.069,84.044,86.952,92.322,97.209,105.079,108.161,113.19,113.067,115.82,117.701,117.255,118.045,119.423,120.773,124.515,124.307,127.003,131.763,135.354,140.263,143.085,140.911,148.955,149.749,151.38,151.332,147.801,149.474,151.942,143.054,142.412,139.346,141.644,147.315,150.779,150.409,163.546,169.649,181.841,187.78,199.026,203.676,209.476,211.36,216.838,218.048,224.123,220.858,223.052,222.416,222.119,226.933,231.125,230.742,233.344,236.037,242.58,244.773,244.346,242.497,245.013,246.398,241.657,239.681,236.119,236.545,239.551,241.973,245.209,251.446,252.742,262.303,266.887,272.472,274.16,279.59,279.211,275.503,273.717,277.709,284.205,288.798,290.1,294.161,302.557,297.126,292.591,287.802,292.992,297.566,301.03,301.779,312.709,322.293,333.021,330.584,327.967,323.093,318.958,314.944,308.531,294.617,284.951,277.558,270.531,262.174,255.492,248.655,238.312,231.463,226.428,221.029,216.989,212.94,212.409,213.13,213.329,213.56,214.922,215.915,214.574,210.288,208.556,205.187,198.072,193.874,189.256,177.788,166.861,161.365,158.033,152.464,149.17,153.115,157.733,160.492,157.142,152.672,149.679,146.844,140.035,132.048,118.055,111.006,108.999,109.672,109.903,110.788,116.677,127.332,132.199,133.249]},{"iso":"ARM","continent":"Asia","population":2963234,"name":"Armenia","population_density":102.931,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,4,8,18,26,52,78,84,115,136,160,194,235,249,265,290,329,407,424,482,532,571,663,736,770,822,833,853,881,921,937,967,1013,1039,1067,1111,1159,1201,1248,1291,1339,1401,1473,1523,1596,1677,1746,1808,1867,1932,2066,2148,2273,2386,2507,2619,2782,2884,3029,3175,3313,3392,3538,3718,3860,4044,4283,4472,4823,5041,5271,5606,5928,6302,6661,7113,7402,7774,8216,8676,8927,9282,9492,10009,10524,11221,11817,12364,13130,13325,13675,14103,14669,15281,16004,16667,17064,17489,18033,18698,19157,19708,20268,20588,21006,21717,22488,23247,23909,24645,25127,25542,26065,26658,27320,27900,28606,28936,29285,29820,30346,30903,31392,31969,32151,32490,33005,33559,34001,34462,34877,34981,35254,35693,36162,36613,36996,37317,37390,37629,37937,38196,38550,38841,39050,39102,39298,39586,39819,39985,40185,40410,40433,40593,40794,41023,41299,41495,41663,41701,41846,42056,42319,42477,42616,42792,42825,42936,43067,43270,43451,43626,43750,43781,43878,44075,44271,44461,44649,44783,44845,44953,45152,45326,45503,45675,45862,45969,46119,46376,46671,46910,47154,47431,47552,47667,47877,48251,48643,49072,49400,49574,49901,50359,50850,51382,51925,52496,52677,53083,53755,54473,55087,55736,56451,56821,57566,58624,59995,61460,63000,64694,65460,66694,68530,70836,73310,75523,77837,78810,80410,82651,85034,87432,89813,92254,93448,94776,97150,99563,101773,104249,106424,107466,108687,110548,112680,114383,115855,117337,117886,118870,120459,121979,123646,124839,126224,126709,127522,129085,130870,132346,133594,134768,135124,135967,137231,138508,139692,140959,141937,142344,142928,144066,145240,146317,147312,148325,148682,149120,150218,151392],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.337,0.337,0.337,0.337,0.337,0.337,0.337,0.337,0.337,0.337,0.337,1.35,2.7,6.074,8.774,17.548,26.323,28.347,38.809,45.896,53.995,65.469,79.305,84.03,89.429,97.866,111.027,137.35,143.087,162.66,179.534,192.695,223.742,248.377,259.851,277.4,281.112,287.861,297.31,310.809,316.209,326.333,341.856,350.63,360.08,374.928,391.127,405.3,421.161,435.673,451.871,472.794,497.092,513.965,538.601,565.936,589.221,610.144,630.055,651.99,697.211,724.884,767.067,805.201,846.035,883.832,938.839,973.261,1022.194,1071.464,1118.035,1144.695,1193.966,1254.71,1302.631,1364.725,1445.38,1509.162,1627.614,1701.182,1778.8,1891.852,2000.517,2126.73,2247.882,2400.418,2497.947,2623.485,2772.646,2927.882,3012.587,3132.388,3203.257,3377.729,3551.525,3786.741,3987.873,4172.468,4430.97,4496.776,4614.89,4759.327,4950.335,5156.866,5400.856,5624.598,5758.573,5901.998,6085.581,6309.998,6464.896,6650.842,6839.824,6947.814,7088.877,7328.817,7589.006,7845.145,8068.549,8316.927,8479.587,8619.637,8796.133,8996.252,9219.657,9415.389,9653.642,9765.007,9882.783,10063.329,10240.838,10428.809,10593.831,10788.551,10849.97,10964.372,11138.169,11325.127,11474.288,11629.861,11769.911,11805.008,11897.137,12045.286,12203.559,12355.757,12485.008,12593.336,12617.971,12698.626,12802.566,12889.971,13009.435,13107.638,13178.17,13195.718,13261.862,13359.053,13437.683,13493.703,13561.197,13637.128,13644.889,13698.884,13766.716,13843.996,13937.138,14003.282,14059.976,14072.8,14121.733,14192.602,14281.356,14334.676,14381.584,14440.979,14452.115,14489.575,14533.783,14602.289,14663.371,14722.428,14764.274,14774.736,14807.47,14873.952,14940.096,15004.215,15067.659,15112.88,15133.803,15170.25,15237.406,15296.126,15355.858,15413.903,15477.009,15513.118,15563.739,15650.468,15750.022,15830.677,15913.019,16006.498,16047.332,16086.141,16157.01,16283.223,16415.511,16560.285,16670.975,16729.695,16840.047,16994.608,17160.305,17339.839,17523.085,17715.779,17776.861,17913.874,18140.653,18382.956,18590.162,18809.179,19050.47,19175.333,19426.748,19783.79,20246.46,20740.853,21260.555,21832.228,22090.729,22507.166,23126.759,23904.963,24739.862,25486.681,26267.585,26595.942,27135.893,27892.161,28696.35,29505.601,30309.115,31132.877,31535.815,31983.974,32785.126,33599.439,34345.246,35180.819,35914.815,36266.458,36678.507,37306.537,38026.022,38600.731,39097.486,39597.615,39782.886,40114.955,40651.194,41164.147,41726.708,42129.309,42596.703,42760.376,43034.738,43562.203,44164.585,44662.689,45083.851,45480.04,45600.179,45884.665,46311.226,46742.174,47141.738,47569.311,47899.356,48036.706,48233.788,48617.828,49014.016,49377.471,49713.252,50055.109,50175.585,50323.397,50693.938,51090.127],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.012,1.35,3.375,2.7,8.774,8.774,2.025,10.462,7.087,8.099,11.474,13.836,4.725,5.4,8.437,13.161,26.323,5.737,19.573,16.873,13.161,31.047,24.635,11.474,17.548,3.712,6.749,9.449,13.499,5.4,10.124,15.524,8.774,9.449,14.849,16.199,14.174,15.861,14.511,16.199,20.923,24.298,16.873,24.635,27.335,23.285,20.923,19.911,21.935,45.221,27.672,42.184,38.134,40.834,37.797,55.007,34.422,48.933,49.27,46.571,26.66,49.27,60.744,47.921,62.094,80.655,63.782,118.452,73.568,77.618,113.052,108.665,126.213,121.151,152.536,97.529,125.539,149.161,155.236,84.705,119.802,70.869,174.472,173.797,235.216,201.132,184.596,258.501,65.806,118.114,144.437,191.008,206.531,243.99,223.742,133.975,143.424,183.583,224.417,154.898,185.945,188.983,107.99,141.062,239.941,260.189,256.139,223.405,248.377,162.66,140.05,176.496,200.119,223.405,195.732,238.253,111.365,117.777,180.546,177.509,187.97,165.022,194.72,61.419,114.402,173.797,186.958,149.161,155.573,140.05,35.097,92.129,148.149,158.273,152.199,129.251,108.328,24.635,80.655,103.94,87.405,119.464,98.204,70.531,17.548,66.144,97.191,78.63,56.02,67.494,75.931,7.762,53.995,67.831,77.28,93.141,66.144,56.695,12.824,48.933,70.869,88.754,53.32,46.908,59.395,11.136,37.459,44.208,68.506,61.082,59.057,41.846,10.462,32.735,66.481,66.144,64.119,63.444,45.221,20.923,36.447,67.156,58.72,59.732,58.045,63.107,36.109,50.62,86.73,99.553,80.655,82.342,93.479,40.834,38.809,70.869,126.213,132.288,144.774,110.69,58.72,110.352,154.561,165.697,179.534,183.246,192.695,61.082,137.012,226.779,242.303,207.206,219.017,241.29,124.864,251.415,357.042,462.67,494.392,519.702,571.673,258.501,416.437,619.593,778.204,834.899,746.819,780.904,328.357,539.951,756.268,804.189,809.251,803.514,823.762,402.938,448.159,801.152,814.313,745.807,835.574,733.995,351.643,412.05,628.03,719.484,574.71,496.755,500.129,185.271,332.07,536.238,512.953,562.561,402.601,467.395,163.673,274.362,527.464,602.382,498.104,421.161,396.189,120.139,284.486,426.561,430.948,399.563,427.573,330.045,137.35,197.082,384.04,396.189,363.454,335.782,341.856,120.476,147.811,370.541,396.189],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.012,2.362,5.737,8.437,17.211,25.985,28.01,38.472,44.547,51.296,59.395,70.531,66.482,63.108,69.52,72.219,91.455,89.093,97.192,100.229,108.665,134.312,150.51,148.823,140.048,138.023,125.199,117.775,118.113,92.466,77.955,82.005,73.231,78.968,87.068,93.818,94.493,104.954,109.341,110.016,122.165,137.014,139.038,147.474,160.635,168.059,174.471,178.183,179.195,200.118,210.917,228.466,239.265,256.814,273.688,308.784,321.271,324.983,346.581,350.968,339.494,347.93,370.877,363.791,391.463,423.185,437.697,509.578,556.486,584.834,637.142,697.886,762.005,802.501,891.255,870.332,922.303,993.846,1036.03,1012.07,1005.659,955.377,977.313,1053.581,1163.258,1215.229,1244.589,1418.385,1364.389,1411.634,1381.599,1398.81,1370.125,1412.983,1452.129,1327.603,1405.221,1470.69,1550.67,1514.56,1493.974,1438.967,1323.215,1330.302,1426.819,1503.425,1535.147,1603.654,1666.086,1639.763,1671.823,1707.257,1667.435,1630.651,1570.244,1585.092,1448.08,1403.197,1443.693,1444.706,1432.557,1374.174,1373.162,1196.328,1199.365,1255.385,1261.797,1233.449,1201.052,1176.08,1016.457,1047.167,1080.914,1065.39,1030.631,1010.721,963.476,848.061,893.619,905.43,844.686,805.877,751.882,693.162,602.382,643.891,660.427,635.117,603.732,551.762,529.489,466.72,503.167,504.854,484.943,499.454,509.578,498.779,435.672,476.843,493.717,514.64,490.68,444.447,437.698,392.139,416.774,412.049,409.686,382.014,387.751,382.689,333.756,355.355,384.377,406.313,401.926,404.288,390.452,369.529,395.514,429.935,422.174,415.762,409.688,409.351,400.239,429.936,480.219,512.616,534.551,557.161,592.595,570.322,573.022,593.271,632.754,665.489,729.608,757.956,723.197,792.715,908.467,1003.295,1056.616,1107.574,1155.495,1105.887,1184.179,1300.606,1388.348,1429.857,1469.34,1527.384,1459.553,1649.886,1869.916,2105.807,2357.896,2670.392,3023.048,3040.259,3331.832,3700.01,4121.172,4493.401,4745.828,5007.03,4763.714,5045.164,5384.995,5569.591,5600.638,5569.253,5646.196,5268.23,5388.032,5649.233,5707.278,5648.896,5675.219,5605.7,5133.581,5142.693,5322.564,5240.896,5001.293,4752.241,4416.796,3868.072,3848.499,3972.687,3857.61,3700.687,3528.578,3499.218,3162.762,3251.853,3447.247,3513.391,3498.542,3357.142,3350.73,3003.474,3124.287,3276.486,3179.97,2977.151,2906.62,2815.504,2556.665,2633.608,2733.162,2702.79,2635.296,2571.515,2485.798,2276.229,2286.69,2460.149,2472.298],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.145,0.337,0.82,1.205,2.459,3.712,4.001,5.351,6.171,6.846,8.099,8.822,8.244,8.726,8.437,9.305,11.908,11.088,11.908,13.643,14.752,17.982,19.621,17.5,19.188,16.922,15.475,14.945,12.438,9.69,9.497,9.208,9.931,10.317,11.088,11.474,12.727,13.547,13.402,14.463,16.102,17.452,17.548,19.043,20.682,21.935,22.61,22.466,22.128,26.178,26.612,28.733,30.854,33.699,36.254,40.978,39.436,42.473,43.485,44.691,42.666,44.305,45.124,47.053,48.933,53.417,55.875,68.988,72.459,74.87,84.174,90.827,97.336,105.531,110.401,113.824,120.669,125.828,132.481,126.551,126.358,114.691,125.683,132.577,144.871,151.427,165.697,185.512,184.788,176.737,172.543,166.228,166.999,175.484,170.518,180.257,183.872,189.465,194.238,186.861,178.569,173.604,169.892,169.554,177.605,182.715,197.178,202.53,211.015,218.825,218.68,209.617,201.035,196.359,192.406,190.959,183.631,180.45,181.028,177.798,172.736,168.349,162.13,154.995,154.513,153.548,154.898,149.354,148.004,140.194,136.434,133.252,129.588,125.49,125.924,122.164,117.632,116.138,114.498,108.183,98.059,93.383,88.947,83.548,82.535,80.462,79.498,78.245,69.181,64.794,65.565,64.167,62.432,58.238,58.045,63.348,63.155,60.407,61.13,60.407,60.841,62.48,56.791,54.043,54.429,54.188,52.549,48.74,45.848,46.956,48.692,46.185,46.089,45.414,48.596,48.258,48.692,49.319,49.801,51.295,51.826,51.922,50.861,50.235,49.463,52.018,54.188,56.213,59.009,64.842,67.831,71.302,75.641,76.316,74.629,72.363,76.172,83.548,92.467,94.925,97.48,107.701,119.657,125.297,132.047,137.543,149.258,149.595,153.404,163.721,174.664,178.618,183.728,190.67,199.782,216.125,234.734,266.215,307.242,350.197,397.394,416.485,440.06,477.567,522.643,571.287,603.732,633.622,643.602,661.247,680.772,684.484,680.82,688.919,695.042,705.696,692.583,698.995,700.441,691.378,695.958,683.134,675.806,670.648,645.916,632.369,607.927,559.524,526.114,502.347,490.921,477.808,448.304,446.568,433.118,428.441,425.356,417.112,415.858,428.634,419.426,422.077,411.905,405.686,407.132,392.718,368.227,354.15,355.066,345.617,348.075,335.589,329.515,324.549,319.39,306.277,307.965,305.554,298.516,296.587,296.587]},{"iso":"AUS","continent":"Oceania","population":25499881,"name":"Australia","population_density":3.202,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,5,6,9,9,12,12,12,13,13,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,25,27,30,39,52,55,60,63,76,91,107,128,128,200,250,297,377,452,568,681,791,1071,1549,1682,2044,2364,2810,3143,3640,3984,4361,4559,4862,5116,5330,5550,5687,5797,5895,6010,6108,6215,6303,6315,6351,6415,6440,6462,6522,6568,6610,6623,6645,6652,6662,6677,6694,6714,6721,6744,6752,6766,6778,6799,6822,6847,6875,6894,6913,6918,6939,6948,6970,6980,6989,7019,7035,7044,7054,7068,7072,7081,7095,7099,7114,7114,7126,7139,7150,7165,7184,7192,7202,7221,7229,7240,7247,7252,7259,7265,7267,7274,7285,7289,7294,7320,7335,7347,7370,7391,7409,7411,7461,7474,7492,7521,7558,7595,7601,7686,7764,7834,7920,8001,8066,8260,8443,8583,8755,8886,9056,9374,9553,9797,9980,10251,10487,10810,11233,11441,11802,12069,12428,12894,13302,13595,13950,14403,14935,15303,15582,16298,16903,17280,17895,18318,18730,19445,19890,20272,20698,21084,21397,21713,22127,22358,22742,23035,23287,23558,23773,23989,24236,24407,24602,24811,24915,25053,25204,25322,25448,25547,25670,25746,25819,25923,26049,26136,26207,26278,26321,26373,26465,26524,26564,26607,26651,26692,26739,26778,26813,26861,26885,26898,26912,26942,26972,26980,27000,27016,27040,27044,27055,27078,27096,27109,27121,27135,27148,27173,27181,27206,27226,27244,27263,27285,27310,27337,27357,27371,27378,27390,27399,27405,27443,27458,27476,27495,27513,27525,27539,27553,27565,27579,27585,27595,27601,27610,27622,27630,27644,27652,27658,27665,27669,27671,27675,27676,27682,27711,27749,27758,27777,27785,27792,27806,27821,27834,27843,27853,27865,27873,27886,27892,27902,27912,27923,27939,27949,27956,27965,27972,27987,27993,28000,28011,28025,28030,28037,28048,28060,28072,28093],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.157,0.196,0.196,0.235,0.353,0.353,0.471,0.471,0.471,0.51,0.51,0.549,0.588,0.588,0.588,0.588,0.588,0.588,0.588,0.588,0.588,0.588,0.588,0.588,0.588,0.588,0.588,0.588,0.588,0.588,0.588,0.588,0.588,0.588,0.98,1.059,1.176,1.529,2.039,2.157,2.353,2.471,2.98,3.569,4.196,5.02,5.02,7.843,9.804,11.647,14.784,17.726,22.275,26.706,31.02,42,60.745,65.961,80.157,92.706,110.197,123.255,142.746,156.236,171.02,178.785,190.668,200.628,209.021,217.648,223.021,227.334,231.178,235.687,239.531,243.727,247.178,247.648,249.06,251.57,252.55,253.413,255.766,257.57,259.217,259.727,260.589,260.864,261.256,261.844,262.511,263.295,263.57,264.472,264.786,265.335,265.805,266.629,267.531,268.511,269.609,270.354,271.099,271.295,272.119,272.472,273.335,273.727,274.08,275.256,275.884,276.237,276.629,277.178,277.335,277.688,278.237,278.393,278.982,278.982,279.452,279.962,280.393,280.982,281.727,282.041,282.433,283.178,283.492,283.923,284.197,284.393,284.668,284.903,284.982,285.256,285.688,285.844,286.041,287.06,287.648,288.119,289.021,289.844,290.55,290.629,292.59,293.099,293.805,294.943,296.394,297.845,298.08,301.413,304.472,307.217,310.59,313.766,316.315,323.923,331.1,336.59,343.335,348.472,355.139,367.61,374.629,384.198,391.374,402.002,411.257,423.924,440.512,448.669,462.826,473.296,487.375,505.649,521.649,533.14,547.061,564.826,585.689,600.12,611.062,639.14,662.866,677.65,701.768,718.356,734.513,762.553,780.004,794.984,811.69,826.827,839.102,851.494,867.73,876.788,891.847,903.338,913.22,923.847,932.279,940.749,950.436,957.142,964.789,972.985,977.063,982.475,988.397,993.024,997.965,1001.848,1006.671,1009.652,1012.515,1016.593,1021.534,1024.946,1027.73,1030.515,1032.201,1034.24,1037.848,1040.162,1041.73,1043.417,1045.142,1046.75,1048.593,1050.123,1051.495,1053.377,1054.319,1054.828,1055.377,1056.554,1057.73,1058.044,1058.828,1059.456,1060.397,1060.554,1060.985,1061.887,1062.593,1063.103,1063.574,1064.123,1064.632,1065.613,1065.927,1066.907,1067.691,1068.397,1069.142,1070.005,1070.985,1072.044,1072.829,1073.378,1073.652,1074.123,1074.476,1074.711,1076.201,1076.789,1077.495,1078.24,1078.946,1079.417,1079.966,1080.515,1080.985,1081.534,1081.77,1082.162,1082.397,1082.75,1083.221,1083.534,1084.083,1084.397,1084.633,1084.907,1085.064,1085.142,1085.299,1085.338,1085.574,1086.711,1088.201,1088.554,1089.299,1089.613,1089.887,1090.436,1091.025,1091.535,1091.887,1092.28,1092.75,1093.064,1093.574,1093.809,1094.201,1094.593,1095.025,1095.652,1096.044,1096.319,1096.672,1096.946,1097.535,1097.77,1098.044,1098.476,1099.025,1099.221,1099.495,1099.927,1100.397,1100.868,1101.691],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.039,0,0.039,0.118,0,0.118,0,0,0.039,0,0.039,0.039,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.392,0.078,0.118,0.353,0.51,0.118,0.196,0.118,0.51,0.588,0.627,0.824,0,2.824,1.961,1.843,3.137,2.941,4.549,4.431,4.314,10.98,18.745,5.216,14.196,12.549,17.49,13.059,19.49,13.49,14.784,7.765,11.882,9.961,8.392,8.627,5.373,4.314,3.843,4.51,3.843,4.196,3.451,0.471,1.412,2.51,0.98,0.863,2.353,1.804,1.647,0.51,0.863,0.275,0.392,0.588,0.667,0.784,0.275,0.902,0.314,0.549,0.471,0.824,0.902,0.98,1.098,0.745,0.745,0.196,0.824,0.353,0.863,0.392,0.353,1.176,0.627,0.353,0.392,0.549,0.157,0.353,0.549,0.157,0.588,0,0.471,0.51,0.431,0.588,0.745,0.314,0.392,0.745,0.314,0.431,0.275,0.196,0.275,0.235,0.078,0.275,0.431,0.157,0.196,1.02,0.588,0.471,0.902,0.824,0.706,0.078,1.961,0.51,0.706,1.137,1.451,1.451,0.235,3.333,3.059,2.745,3.373,3.176,2.549,7.608,7.177,5.49,6.745,5.137,6.667,12.471,7.02,9.569,7.177,10.628,9.255,12.667,16.588,8.157,14.157,10.471,14.078,18.275,16,11.49,13.922,17.765,20.863,14.431,10.941,28.079,23.726,14.784,24.118,16.588,16.157,28.039,17.451,14.98,16.706,15.137,12.275,12.392,16.235,9.059,15.059,11.49,9.882,10.628,8.431,8.471,9.686,6.706,7.647,8.196,4.078,5.412,5.922,4.627,4.941,3.882,4.824,2.98,2.863,4.078,4.941,3.412,2.784,2.784,1.686,2.039,3.608,2.314,1.569,1.686,1.725,1.608,1.843,1.529,1.373,1.882,0.941,0.51,0.549,1.176,1.176,0.314,0.784,0.627,0.941,0.157,0.431,0.902,0.706,0.51,0.471,0.549,0.51,0.98,0.314,0.98,0.784,0.706,0.745,0.863,0.98,1.059,0.784,0.549,0.275,0.471,0.353,0.235,1.49,0.588,0.706,0.745,0.706,0.471,0.549,0.549,0.471,0.549,0.235,0.392,0.235,0.353,0.471,0.314,0.549,0.314,0.235,0.275,0.157,0.078,0.157,0.039,0.235,1.137,1.49,0.353,0.745,0.314,0.275,0.549,0.588,0.51,0.353,0.392,0.471,0.314,0.51,0.235,0.392,0.392,0.431,0.627,0.392,0.275,0.353,0.275,0.588,0.235,0.275,0.431,0.549,0.196,0.275,0.431,0.471,0.471,0.824],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.039,0.039,0.078,0.196,0.196,0.314,0.314,0.314,0.314,0.314,0.314,0.235,0.235,0.117,0.117,0.117,0.078,0.078,0.039,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.392,0.47,0.588,0.941,1.451,1.569,1.765,1.883,2.001,2.511,3.02,3.491,2.981,5.687,7.452,9.177,11.804,14.157,18.079,21.686,26,34.156,50.94,54.313,65.372,74.98,87.921,96.549,111.725,114.235,110.274,112.823,110.509,107.921,98.823,94.391,80.274,71.098,60.157,56.902,48.863,43.098,38.157,30.001,26.04,24.236,21.373,17.726,16.236,13.844,12.04,12.079,11.53,9.295,8.707,8.432,6.746,5.726,4.354,4.746,4.197,4.471,4.55,4.786,5.021,5.217,6.04,5.883,6.314,5.961,6.314,5.843,5.804,5.216,4.471,4.902,4.784,4.941,4.509,4.705,3.999,3.96,4.156,3.137,3.098,2.745,2.824,2.785,3.059,3.294,3.49,3.647,3.451,4.196,4.039,3.96,3.804,3.412,2.942,2.863,2.549,2.079,2.196,1.922,1.843,2.667,2.98,3.216,4.04,4.589,4.864,4.785,6.55,6.04,6.158,6.824,7.373,8,7.529,10.784,11.882,14.117,16.784,18.823,19.921,26.078,33.02,35.177,38.863,41.255,44.549,53.844,58.315,60.276,60.276,65.414,67.924,75.454,85.375,81.061,88.198,89.1,96.001,103.648,110.393,109.216,106.55,116.158,122.864,126.824,123.687,133.491,141.217,144.511,154.707,153.53,148.824,162.432,168.942,155.843,148.823,149.176,137.333,133.137,133.215,114.235,111.843,108.353,101.529,97.02,93.176,89.255,82.706,80.353,72.941,69.647,63.843,58.627,56.118,52.274,47.529,44.705,41.882,36.666,35.451,34.117,33.136,31.921,29.764,28.666,25.528,24.587,25.332,23.568,20.196,18.47,17.411,16.235,16.392,15.882,13.647,13.215,12.587,11.411,10.235,9.803,9.136,7.921,7.332,6.077,6.077,5.724,5.606,5.332,4.862,5.058,4.745,4.667,4.236,5.059,4.942,5.02,5.098,5.294,5.568,5.882,6.352,6.431,6.901,6.47,5.961,5.726,5.334,4.706,5.216,4.745,4.667,4.863,5.294,5.294,5.49,5.804,4.785,4.746,4.275,3.922,3.451,3.333,3.255,3.02,3.098,2.863,2.863,2.746,2.668,2.393,2.079,1.804,1.49,2.313,3.568,3.646,4.234,4.47,4.588,5.098,5.451,4.824,3.687,3.726,3.452,3.452,3.687,3.373,3.177,3.059,3.137,3.372,3.293,3.254,3.097,3.137,3.333,3.176,3.02,2.824,2.981,2.902,2.824,2.98,2.863,3.099,3.648],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.045,0.045,0.039,0.045,0.039,0.028,0.034,0.017,0.017,0.017,0.011,0.011,0.006,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.056,0.067,0.084,0.134,0.207,0.224,0.252,0.213,0.275,0.342,0.381,0.426,0.409,0.784,1.048,1.238,1.602,1.933,2.465,3.098,3.311,4.599,7.014,7.311,8.919,10.062,11.927,13.177,14.392,13.642,15.008,14.09,13.994,12.919,12.252,10.7,9.541,8.045,7.485,6.431,5.557,4.958,4.219,3.518,3.104,2.913,2.409,1.983,1.72,1.485,1.653,1.524,1.289,1.188,1.12,0.868,0.706,0.583,0.549,0.555,0.56,0.583,0.566,0.588,0.605,0.706,0.734,0.796,0.824,0.784,0.784,0.706,0.689,0.588,0.532,0.594,0.655,0.588,0.594,0.549,0.515,0.515,0.426,0.359,0.392,0.336,0.325,0.375,0.387,0.392,0.476,0.437,0.493,0.532,0.504,0.504,0.459,0.381,0.375,0.353,0.258,0.252,0.252,0.235,0.235,0.342,0.392,0.448,0.538,0.594,0.672,0.655,0.79,0.779,0.812,0.846,0.936,1.042,1.064,1.261,1.625,1.916,2.235,2.482,2.639,3.692,4.241,4.588,5.16,5.412,5.91,7.328,7.244,7.585,7.826,8.381,8.969,9.826,10.415,10.577,11.233,11.703,12.196,13.485,13.961,13.233,14.056,14.571,16.056,16.107,15.059,16.784,18.532,18.656,19.563,18.952,19.199,21.642,20.123,18.874,19.149,17.866,17.249,16.712,15.025,13.826,13.838,13.092,12.342,12.106,11.541,10.431,10.521,9.328,8.779,8.538,7.602,7.171,6.807,6.084,5.832,5.294,4.812,4.655,4.291,4.028,4.073,3.854,3.697,3.406,3.221,3.104,3.036,2.661,2.398,2.241,2.09,2.078,2.05,1.754,1.619,1.664,1.557,1.384,1.232,1.137,1.087,0.936,0.779,0.734,0.796,0.739,0.633,0.594,0.65,0.611,0.588,0.532,0.583,0.661,0.577,0.616,0.655,0.689,0.717,0.768,0.768,0.874,0.846,0.812,0.751,0.711,0.639,0.532,0.594,0.566,0.588,0.655,0.689,0.706,0.751,0.616,0.599,0.577,0.504,0.459,0.426,0.398,0.387,0.364,0.364,0.375,0.353,0.359,0.331,0.275,0.252,0.179,0.168,0.297,0.471,0.499,0.594,0.616,0.65,0.695,0.616,0.476,0.476,0.426,0.448,0.454,0.448,0.398,0.381,0.387,0.392,0.415,0.426,0.392,0.409,0.392,0.42,0.392,0.342,0.347,0.387,0.364,0.364,0.342,0.375,0.403,0.459]},{"iso":"AUT","continent":"Europe","population":9006400,"name":"Austria","population_density":106.749,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,3,3,9,14,18,21,29,41,55,79,104,131,182,246,302,504,655,860,1018,1332,1646,2013,2388,2814,3582,4474,5283,5588,6909,7657,8271,8788,9618,10180,10711,11129,11524,11781,12051,12297,12639,12942,13244,13555,13806,13945,14041,14226,14336,14476,14595,14671,14749,14795,14873,14925,15002,15071,15148,15225,15274,15357,15402,15452,15531,15558,15597,15621,15650,15684,15752,15774,15833,15871,15882,15961,15997,16058,16109,16201,16242,16269,16321,16353,16404,16436,16486,16503,16539,16557,16591,16628,16655,16685,16731,16733,16759,16771,16805,16843,16898,16902,16968,16979,17005,17034,17064,17078,17109,17135,17189,17203,17223,17271,17323,17341,17380,17408,17449,17477,17522,17580,17654,17723,17766,17873,17941,18050,18165,18280,18365,18421,18513,18615,18709,18783,18897,18948,19021,19154,19270,19439,19573,19655,19743,19827,19929,20099,20214,20338,20472,20558,20677,20850,20955,21130,21212,21304,21385,21481,21566,21696,21837,21919,22033,22106,22245,22439,22594,22876,23179,23370,23534,23829,24084,24431,24762,25062,25253,25495,25706,26033,26361,26590,26985,27166,27438,27642,27969,28372,28729,29087,29271,29561,30081,30583,31247,31827,32696,33159,33541,34305,35073,35853,36661,37474,38095,38658,39303,39984,40816,41500,42214,42876,43432,44041,44813,45686,46374,47432,48146,48896,49819,50848,52057,53188,54423,55319,56298,57326,58672,60224,61387,63134,64806,65927,67451,69409,71844,74415,78029,80811,83267,86102,89496,93949,99576,104925,109881,114016,118198,125099,132515,138979,147220,153153,158746,164866,172380,181642,191228,198291,203956,208613,214597,221688,228683,235351,241962,247188,250333,254710,260512,266038,270992,275661,279708,282456,285489,289461,293430,297245,300689,303430,305693,308070,311002,313688,316581,319822,322463,325051,327679,330343,332828],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.222,0.222,0.333,0.333,0.999,1.554,1.999,2.332,3.22,4.552,6.107,8.772,11.547,14.545,20.208,27.314,33.532,55.96,72.726,95.488,113.031,147.895,182.759,223.508,265.145,312.444,397.717,496.758,586.583,620.448,767.121,850.173,918.347,975.751,1067.907,1130.307,1189.265,1235.677,1279.535,1308.07,1338.048,1365.362,1403.335,1436.978,1470.51,1505.041,1532.91,1548.343,1559.002,1579.543,1591.757,1607.301,1620.514,1628.953,1637.613,1642.721,1651.381,1657.155,1665.704,1673.366,1681.915,1690.465,1695.905,1705.121,1710.117,1715.669,1724.44,1727.438,1731.769,1734.433,1737.653,1741.428,1748.979,1751.421,1757.972,1762.191,1763.413,1772.184,1776.181,1782.954,1788.617,1798.832,1803.384,1806.382,1812.156,1815.709,1821.371,1824.924,1830.476,1832.364,1836.361,1838.359,1842.134,1846.243,1849.241,1852.572,1857.679,1857.901,1860.788,1862.12,1865.895,1870.115,1876.221,1876.665,1883.994,1885.215,1888.102,1891.322,1894.653,1896.207,1899.649,1902.536,1908.532,1910.086,1912.307,1917.636,1923.41,1925.409,1929.739,1932.848,1937.4,1940.509,1945.505,1951.945,1960.162,1967.823,1972.597,1984.478,1992.028,2004.13,2016.899,2029.668,2039.106,2045.323,2055.538,2066.864,2077.301,2085.517,2098.175,2103.837,2111.943,2126.71,2139.59,2158.354,2173.232,2182.337,2192.108,2201.435,2212.76,2231.635,2244.404,2258.172,2273.05,2282.599,2295.812,2315.02,2326.679,2346.109,2355.214,2365.429,2374.423,2385.082,2394.519,2408.954,2424.609,2433.714,2446.371,2454.477,2469.91,2491.451,2508.661,2539.972,2573.614,2594.821,2613.031,2645.785,2674.098,2712.627,2749.378,2782.688,2803.895,2830.765,2854.193,2890.5,2926.919,2952.345,2996.203,3016.3,3046.5,3069.151,3105.458,3150.204,3189.843,3229.592,3250.022,3282.222,3339.958,3395.696,3469.422,3533.82,3630.307,3681.715,3724.13,3808.958,3894.231,3980.836,4070.55,4160.819,4229.77,4292.281,4363.897,4439.51,4531.888,4607.834,4687.111,4760.615,4822.349,4889.967,4975.684,5072.615,5149.005,5266.477,5345.754,5429.028,5531.511,5645.763,5780.001,5905.578,6042.703,6142.188,6250.888,6365.029,6514.479,6686.8,6815.931,7009.904,7195.55,7320.017,7489.23,7706.631,7976.994,8262.458,8663.728,8972.619,9245.314,9560.091,9936.934,10431.36,11056.138,11650.049,12200.324,12659.442,13123.779,13890.012,14713.426,15431.138,16346.154,17004.908,17625.91,18305.427,19139.723,20168.103,21232.457,22016.677,22645.674,23162.751,23827.167,24614.496,25391.166,26131.529,26865.562,27445.816,27795.012,28281,28925.209,29538.772,30088.826,30607.235,31056.582,31361.698,31698.459,32139.479,32580.165,33003.753,33386.148,33690.487,33941.753,34205.676,34531.222,34829.455,35150.671,35510.526,35803.762,36091.113,36382.905,36678.695,36954.61],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.111,0,0.666,0.555,0.444,0.333,0.888,1.332,1.554,2.665,2.776,2.998,5.663,7.106,6.218,22.428,16.766,22.762,17.543,34.864,34.864,40.749,41.637,47.3,85.273,99.041,89.825,33.865,146.673,83.052,68.174,57.404,92.157,62.4,58.958,46.411,43.858,28.535,29.979,27.314,37.973,33.643,33.532,34.531,27.869,15.433,10.659,20.541,12.214,15.545,13.213,8.438,8.661,5.107,8.661,5.774,8.549,7.661,8.549,8.549,5.441,9.216,4.996,5.552,8.772,2.998,4.33,2.665,3.22,3.775,7.55,2.443,6.551,4.219,1.221,8.772,3.997,6.773,5.663,10.215,4.552,2.998,5.774,3.553,5.663,3.553,5.552,1.888,3.997,1.999,3.775,4.108,2.998,3.331,5.107,0.222,2.887,1.332,3.775,4.219,6.107,0.444,7.328,1.221,2.887,3.22,3.331,1.554,3.442,2.887,5.996,1.554,2.221,5.33,5.774,1.999,4.33,3.109,4.552,3.109,4.996,6.44,8.216,7.661,4.774,11.88,7.55,12.103,12.769,12.769,9.438,6.218,10.215,11.325,10.437,8.216,12.658,5.663,8.105,14.767,12.88,18.764,14.878,9.105,9.771,9.327,11.325,18.875,12.769,13.768,14.878,9.549,13.213,19.209,11.658,19.431,9.105,10.215,8.994,10.659,9.438,14.434,15.656,9.105,12.658,8.105,15.433,21.54,17.21,31.311,33.643,21.207,18.209,32.754,28.313,38.528,36.752,33.31,21.207,26.87,23.428,36.308,36.419,25.426,43.858,20.097,30.201,22.651,36.308,44.746,39.638,39.75,20.43,32.199,57.737,55.738,73.725,64.399,96.487,51.408,42.414,84.829,85.273,86.605,89.714,90.269,68.951,62.511,71.616,75.613,92.379,75.946,79.277,73.503,61.734,67.619,85.717,96.931,76.39,117.472,79.277,83.274,102.483,114.252,134.238,125.577,137.125,99.485,108.7,114.141,149.449,172.322,129.13,193.973,185.646,124.467,169.213,217.401,270.363,285.464,401.27,308.891,272.695,314.776,376.843,494.426,624.778,593.911,550.275,459.118,464.336,766.233,823.414,717.712,915.016,658.754,621.003,679.517,834.296,1028.38,1064.354,784.22,628.997,517.077,664.416,787.329,776.67,740.362,734.034,580.254,349.196,485.988,644.209,613.564,550.053,518.409,449.347,305.116,336.761,441.02,440.687,423.588,382.395,304.339,251.266,263.923,325.546,298.232,321.216,359.855,293.236,287.351,291.793,295.79,275.915],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.111,0.111,0.777,1.332,1.776,2.109,2.997,4.329,5.772,8.437,10.547,12.99,18.209,24.982,30.312,51.408,66.62,86.717,101.484,133.35,162.551,196.194,231.613,256.485,324.992,401.271,473.553,472.554,584.363,626.666,653.203,663.307,670.191,633.55,602.683,615.229,512.414,457.897,419.702,389.612,335.428,306.671,281.245,269.365,253.376,240.274,220.954,214.181,188.422,170.324,150.005,123.912,104.704,94.378,92.38,77.613,73.948,66.064,61.4,61.511,58.291,62.4,58.735,58.513,58.736,54.073,49.854,43.97,41.749,36.308,38.862,35.753,33.532,34.753,31.644,37.751,38.528,41.526,39.639,47.411,45.412,44.191,48.744,43.525,45.191,41.971,41.86,33.533,32.978,31.979,29.98,30.535,27.87,27.648,27.203,25.537,24.427,23.76,23.76,23.871,26.98,24.093,26.314,27.313,27.313,29.201,28.757,26.092,23.427,25.87,24.538,24.871,24.205,26.315,28.758,29.203,30.091,30.313,28.869,30.424,33.199,34.309,36.751,42.413,42.857,51.628,54.626,63.62,71.393,77.722,78.944,77.501,82.942,82.387,85.274,81.387,81.276,74.17,72.837,81.386,84.051,91.49,95.931,96.82,93.933,97.597,100.817,104.925,104.814,99.818,99.818,100.262,103.704,113.586,113.919,114.475,110.811,107.258,101.374,102.484,98.709,93.934,97.932,87.606,91.159,89.049,95.488,106.369,114.141,131.018,149.005,161.107,166.658,191.307,204.187,221.175,240.717,242.716,230.28,235.943,241.162,244.716,252.822,239.72,246.826,233.613,242.607,238.388,251.268,259.706,262.925,277.249,253.821,265.923,293.459,326.546,363.963,383.616,440.465,452.123,474.107,526.737,554.273,585.14,601.129,626.999,599.463,610.566,639.768,630.552,637.658,626.999,616.562,599.796,592.579,597.687,611.788,633.106,617.117,658.643,658.643,668.414,709.163,755.796,804.317,832.963,893.698,875.711,905.134,936.001,982.967,1041.037,1035.929,1104.325,1152.846,1177.828,1238.341,1341.601,1462.515,1575.657,1847.797,1962.715,2049.764,2240.073,2447.703,2724.728,3079.143,3387.59,3536.595,3686.822,3878.463,4329.92,4776.491,4999.777,5290.015,5354.858,5425.586,5645.985,6015.945,6278.092,6519.032,6585.54,6299.521,6157.844,6201.257,6309.069,6251.443,5963.425,5633.105,5429.139,5149.338,5118.249,5098.042,4924.277,4697.66,4475.707,4191.02,3915.882,3903.447,3858.479,3654.957,3464.981,3297.323,3083.253,2885.172,2843.979,2832.764,2689.976,2570.505,2506.772,2417.613,2400.625,2441.152,2473.019,2423.388],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.254,0.301,0.428,0.603,0.825,1.11,1.428,1.792,2.554,3.442,4.14,7.122,9.136,11.991,14.069,18.241,22.206,27.139,29.884,34.245,43.176,54.818,62.67,62.527,77.659,83.575,86.557,82.576,81.593,77.675,81.26,66.937,61.337,55.675,51.757,42.494,39.004,35.388,33.548,32.215,32.12,30.042,27.663,25.173,22.111,19.542,16.496,13.72,12.753,11.96,10.263,9.343,8.343,7.55,7.566,7.55,7.598,7.677,7.566,7.138,7.296,6.503,5.901,5.504,4.647,4.473,4.759,3.854,4.362,4.346,4.14,4.933,4.965,4.854,5.314,5.837,5.885,6.138,5.71,5.647,5.488,5.187,4.521,4.14,4.283,3.743,3.775,3.553,3.474,3.156,3.616,3.077,3.204,2.855,2.808,2.982,3.379,2.712,3.728,3.49,3.712,3.632,3.505,2.855,3.283,2.649,3.331,3.141,2.998,3.283,3.886,3.68,3.886,3.474,3.902,4.029,3.981,4.076,4.965,5.441,5.679,6.725,7.36,8.375,9.279,9.929,10.183,10.389,10.152,10.691,10.453,9.803,9.787,9.247,9.517,10.167,10.389,11.579,12.531,12.023,12.61,12.785,12.293,13.149,12.293,12.134,12.959,12.927,13.482,14.609,13.578,14.529,13.863,13.197,13.118,12.753,11.357,11.754,11.214,11.214,11.563,11.436,12.118,13.847,14.244,16.48,19.986,21.207,22.651,25.125,26.093,29.138,29.915,29.868,29.868,31.105,29.772,30.915,30.613,28.995,30.502,30.344,30.819,30.708,30.708,31.898,33.928,33.341,33.389,33.674,38.687,41.463,45.602,49.14,57.245,61.67,63.13,67,71.219,73.059,76.676,75.787,78.294,81.165,79.277,77.897,78.722,76.755,75.185,75.835,75.724,75.153,76.596,77.247,77.31,82.767,83.591,86.669,91.649,95.726,101.055,108.082,110.889,113.776,117.409,119.074,124.102,129.543,130.05,138.172,150.48,152.733,160.6,170.307,184.313,206.647,236.261,253.867,275.043,295.837,318.615,350.624,399.097,426.617,461.101,487.733,509.098,564.725,611.724,625,670.872,686.369,709.495,740.236,749.959,779.24,828.76,810.075,805.824,790.977,788.82,782.11,746.152,699.867,692.698,685.735,661.752,636.262,615.816,592.515,565.328,534.525,515.824,509.527,488.208,459.181,434.485,416.418,396.988,376.272,368.579,358.174,341.678,321.327,306.703,303.483,301.896,307.051,311.033,306.782,303.594]},{"iso":"AZE","continent":"Asia","population":10139175,"name":"Azerbaijan","population_density":119.309,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,6,6,9,9,9,11,11,11,15,15,23,28,28,28,44,44,53,65,72,87,93,122,165,182,209,273,298,359,400,443,521,584,641,717,822,926,991,1058,1098,1148,1197,1253,1283,1340,1373,1398,1436,1480,1518,1548,1592,1617,1645,1678,1717,1766,1804,1854,1894,1932,1984,2060,2127,2204,2279,2422,2519,2589,2693,2758,2879,2980,3138,3274,3387,3518,3631,3749,3855,3982,4122,4271,4403,4568,4759,4989,5246,5494,5662,5935,6260,6522,6860,7239,7553,7876,8191,8530,8882,9218,9570,9957,10324,10662,10991,11329,11767,12238,12729,13207,13715,14305,14852,15369,15890,16424,16968,17524,18112,18684,19267,19801,20324,20837,21374,21916,22464,22990,23521,24041,24570,25113,25672,26165,26636,27133,27521,27890,28242,28633,28980,29312,29633,30050,30446,30858,31221,31560,31878,32157,32443,32684,32910,33103,33247,33376,33481,33568,33647,33731,33824,33915,34018,34107,34219,34343,34474,34620,34759,34921,35105,35274,35426,35559,35707,35844,35986,36174,36309,36435,36578,36732,36899,37031,37192,37329,37418,37557,37732,37874,38037,38172,38327,38403,38517,38658,38777,38894,39042,39188,39280,39378,39524,39686,39787,39895,40023,40061,40119,40229,40309,40453,40561,40691,40788,40931,41113,41304,41519,41752,41982,42104,42381,42750,43280,43789,44317,44964,45295,45879,46593,47418,48221,49013,49959,50486,51149,52137,53152,54174,55269,56444,57040,58282,59509,60873,62338,63748,65411,66046,67392,68594,70216,71580,73429,75688,77083,79158,81397,83994,87163,89898,93094,95281,98927,102396,106101,109813,114025,118195,121176,125602,129544,133733,138000,142323,146679,149765,154152,158555,162774,167155,171423,175874,178986,183259,187336,191460],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.296,0.296,0.296,0.296,0.592,0.592,0.888,0.888,0.888,1.085,1.085,1.085,1.479,1.479,2.268,2.762,2.762,2.762,4.34,4.34,5.227,6.411,7.101,8.581,9.172,12.033,16.274,17.95,20.613,26.925,29.391,35.407,39.451,43.692,51.385,57.598,63.22,70.716,81.072,91.329,97.74,104.348,108.293,113.224,118.057,123.58,126.539,132.161,135.415,137.881,141.629,145.968,149.716,152.675,157.015,159.48,162.242,165.497,169.343,174.176,177.924,182.855,186.8,190.548,195.677,203.172,209.78,217.375,224.772,238.875,248.442,255.346,265.603,272.014,283.948,293.91,309.493,322.906,334.051,346.971,358.116,369.754,380.208,392.734,406.542,421.237,434.256,450.53,469.368,492.052,517.399,541.859,558.428,585.353,617.407,643.248,676.584,713.963,744.932,776.789,807.857,841.291,876.008,909.147,943.864,982.033,1018.229,1051.565,1084.013,1117.349,1160.548,1207.002,1255.428,1302.571,1352.674,1410.864,1464.813,1515.804,1567.189,1619.856,1673.509,1728.346,1786.339,1842.753,1900.253,1952.92,2004.502,2055.098,2108.061,2161.517,2215.565,2267.443,2319.814,2371.1,2423.274,2476.829,2531.961,2580.585,2627.038,2676.056,2714.323,2750.717,2785.434,2823.997,2858.221,2890.965,2922.624,2963.752,3002.808,3043.443,3079.245,3112.679,3144.043,3171.56,3199.767,3223.536,3245.826,3264.861,3279.064,3291.787,3302.142,3310.723,3318.515,3326.799,3335.972,3344.947,3355.105,3363.883,3374.929,3387.159,3400.079,3414.479,3428.188,3444.166,3462.313,3478.981,3493.973,3507.09,3521.687,3535.199,3549.204,3567.746,3581.061,3593.488,3607.591,3622.78,3639.251,3652.27,3668.149,3681.66,3690.438,3704.148,3721.407,3735.412,3751.489,3764.803,3780.091,3787.586,3798.83,3812.736,3824.473,3836.012,3850.609,3865.009,3874.082,3883.748,3898.148,3914.125,3924.087,3934.738,3947.363,3951.11,3956.831,3967.68,3975.57,3989.772,4000.424,4013.246,4022.813,4036.916,4054.866,4073.704,4094.909,4117.889,4140.574,4152.606,4179.926,4216.319,4268.592,4318.793,4370.868,4434.68,4467.326,4524.924,4595.344,4676.712,4755.91,4834.022,4927.324,4979.301,5044.691,5142.134,5242.241,5343.038,5451.035,5566.922,5625.704,5748.199,5869.215,6003.743,6148.232,6287.297,6451.314,6513.942,6646.695,6765.245,6925.218,7059.746,7242.108,7464.907,7602.492,7807.144,8027.971,8284.106,8596.656,8866.402,9181.615,9397.313,9756.908,10099.047,10464.461,10830.566,11245.984,11657.26,11951.268,12387.793,12776.582,13189.732,13610.575,14036.941,14466.562,14770.926,15203.604,15637.86,16053.969,16486.055,16906.997,17345.987,17652.916,18074.35,18476.454,18883.193],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.296,0,0.296,0,0,0.197,0,0,0.395,0,0.789,0.493,0,0,1.578,0,0.888,1.184,0.69,1.479,0.592,2.86,4.241,1.677,2.663,6.312,2.466,6.016,4.044,4.241,7.693,6.214,5.622,7.496,10.356,10.257,6.411,6.608,3.945,4.931,4.833,5.523,2.959,5.622,3.255,2.466,3.748,4.34,3.748,2.959,4.34,2.466,2.762,3.255,3.846,4.833,3.748,4.931,3.945,3.748,5.129,7.496,6.608,7.594,7.397,14.104,9.567,6.904,10.257,6.411,11.934,9.961,15.583,13.413,11.145,12.92,11.145,11.638,10.454,12.526,13.808,14.695,13.019,16.274,18.838,22.684,25.347,24.46,16.569,26.925,32.054,25.84,33.336,37.38,30.969,31.857,31.068,33.435,34.717,33.139,34.717,38.169,36.196,33.336,32.448,33.336,43.199,46.453,48.426,47.144,50.103,58.19,53.949,50.99,51.385,52.667,53.653,54.837,57.993,56.415,57.5,52.667,51.582,50.596,52.963,53.456,54.048,51.878,52.371,51.286,52.174,53.555,55.133,48.623,46.453,49.018,38.267,36.393,34.717,38.563,34.224,32.744,31.659,41.128,39.056,40.634,35.802,33.435,31.363,27.517,28.207,23.769,22.29,19.035,14.202,12.723,10.356,8.581,7.792,8.285,9.172,8.975,10.159,8.778,11.046,12.23,12.92,14.4,13.709,15.978,18.147,16.668,14.991,13.117,14.597,13.512,14.005,18.542,13.315,12.427,14.104,15.189,16.471,13.019,15.879,13.512,8.778,13.709,17.26,14.005,16.076,13.315,15.287,7.496,11.244,13.906,11.737,11.539,14.597,14.4,9.074,9.665,14.4,15.978,9.961,10.652,12.624,3.748,5.72,10.849,7.89,14.202,10.652,12.822,9.567,14.104,17.95,18.838,21.205,22.98,22.684,12.033,27.32,36.393,52.272,50.201,52.075,63.812,32.646,57.598,70.42,81.368,79.198,78.113,93.301,51.977,65.39,97.444,100.107,100.797,107.997,115.887,58.782,122.495,121.016,134.528,144.489,139.065,164.017,62.628,132.752,118.55,159.974,134.528,182.362,222.799,137.585,204.652,220.827,256.135,312.55,269.746,315.213,215.698,359.595,342.138,365.414,366.105,415.418,411.276,294.008,436.525,388.789,413.15,420.843,426.366,429.621,304.364,432.678,434.256,416.109,432.086,420.942,438.99,306.928,421.435,402.104,406.739],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.296,0.296,0.592,0.592,0.592,0.789,0.789,0.789,0.888,0.888,1.381,1.874,1.874,1.677,3.255,3.255,3.748,4.932,4.833,5.819,6.411,9.271,11.934,13.611,15.386,20.514,22.29,26.827,30.279,31.66,35.112,39.649,42.608,43.792,51.682,55.923,58.29,60.657,56.909,55.626,54.837,52.864,45.467,40.832,37.676,33.534,33.337,32.746,31.661,29.097,30.478,27.322,26.829,27.618,27.716,28.209,28.209,30.181,29.786,31.068,33.435,37.676,40.438,43.199,46.848,56.021,61.643,64.799,69.927,68.842,74.168,76.535,84.721,84.03,85.608,91.624,92.512,97.739,96.259,98.824,97.049,98.331,100.205,103.559,111.252,122.298,137.191,149.125,151.886,164.116,183.151,192.717,207.215,221.911,227.533,234.93,249.429,255.939,258.602,265.901,267.282,268.071,273.298,274.777,276.157,276.058,284.54,297.854,311.563,320.538,334.445,359.299,380.8,398.454,406.64,412.854,418.081,425.774,433.664,431.889,435.44,437.117,437.314,435.243,434.553,433.172,429.227,424.69,419.561,418.18,418.772,421.731,423.901,419.068,411.473,408.613,394.509,379.616,362.159,347.167,326.258,310.379,295.585,287.695,288.484,292.725,293.81,288.682,285.821,280.594,277.142,259.783,243.017,221.418,199.818,179.106,158.099,139.163,118.748,103.264,90.146,80.086,76.043,72.098,72.788,76.437,81.565,87.68,92.217,99.22,107.208,115.098,119.043,119.93,121.607,120.719,121.015,123.579,118.747,114.506,113.619,115.691,117.565,117.072,118.946,113.916,109.379,110.661,113.817,112.633,112.238,112.534,111.942,105.926,108.392,108.589,103.066,100.6,99.121,100.206,93.993,96.162,99.318,101.39,99.614,98.727,96.754,86.102,82.748,83.932,77.422,75.646,76.337,78.507,75.45,85.806,98.036,106.025,119.34,128.118,140.15,139.361,157.114,179.403,213.725,245.088,275.958,316.79,326.752,372.317,415.417,460.392,487.318,515.23,556.456,544.621,577.365,617.211,646.898,666.327,695.126,732.9,698.381,768.899,824.525,861.609,905.991,944.259,1000.279,947.02,1020.99,1017.045,1056.003,1056.003,1093.876,1177.61,1151.178,1293.202,1381.277,1518.862,1671.438,1806.656,1939.507,1932.406,2154.416,2291.902,2436.489,2546.459,2649.327,2790.857,2769.652,2990.479,3019.673,3090.685,3146.114,3206.375,3220.578,3113.666,3252.336,3250.067,3277.387,3296.323,3296.422,3309.046,3186.353,3303.424,3272.85,3245.333],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.085,0.085,0.085,0.113,0.113,0.07,0.127,0.085,0.197,0.268,0.24,0.24,0.465,0.409,0.535,0.592,0.62,0.831,0.916,1.099,1.705,1.818,2.029,2.832,2.973,3.748,3.917,3.917,4.776,5.284,5.185,5.904,6.523,7.411,7.721,7.566,7.242,7.143,6.763,6.073,5.03,4.917,4.438,4.227,4.058,3.987,3.734,3.734,3.551,3.438,3.48,3.41,3.339,3.494,3.607,3.691,3.903,4.044,4.311,4.833,5.086,5.636,5.988,7.439,8.271,8.524,8.919,8.891,9.51,9.877,10.088,10.638,11.244,11.624,12.3,12.258,12.328,11.892,11.948,12.455,12.469,13.202,14.231,15.978,17.809,19.331,19.599,21.585,23.84,24.84,26.362,28.081,29.011,31.194,31.786,31.983,33.252,33.223,32.843,33.871,34.491,34.815,34.675,34.477,35.914,37.591,39.056,40.62,43.016,46.693,49.638,50.751,51.455,52.061,52.991,53.667,53.639,53.991,54.921,55.105,54.95,54.513,54.245,53.597,53.259,52.456,52.413,52.371,52.597,52.681,52.921,52.146,51.371,50.892,49.032,46.778,44.086,41.719,39.662,37.704,35.224,35.633,36.013,36.858,36.464,36.351,36.154,35.562,33.716,31.533,28.912,26.517,23.769,21.106,18.655,15.851,13.568,11.568,10.159,9.412,9.046,8.82,9.172,9.806,10.469,11.215,11.892,12.723,14.061,14.865,15.259,15.287,15.315,15.287,15.005,15.062,14.583,14.216,14.357,14.442,14.865,14.724,14.343,14.371,13.85,13.794,14.09,13.737,14.174,13.808,14.061,13.878,13.526,13.047,12.723,12.075,12.258,12.131,12.357,12.131,12.202,12.807,12.582,12.018,11.765,11.004,10.44,9.933,8.778,9.384,9.384,9.412,10.243,11.441,12.455,14.019,15.02,16.781,18.19,18.542,20.43,23.065,27.841,31.983,36.14,42.015,44.96,49.285,54.146,58.303,62.445,66.165,70.378,73.139,74.252,78.113,80.79,83.876,88.145,91.371,92.343,100.501,103.869,108.786,115.028,119.466,126.342,126.891,128.356,128.004,131.639,130.216,136.402,144.799,155.507,165.778,180.389,194.127,219.559,232.042,245.244,256.403,278.538,295.868,311.479,319.13,339.94,353.664,364.851,375.841,382.505,389.324,397.144,398.708,401.329,402.808,402.259,408.754,409.177,410.783,410.008,411.347,411.713,410.107,405.513,404.175]},{"iso":"BHS","continent":"North America","population":393248,"name":"Bahamas","population_density":39.497,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,3,3,4,4,4,5,5,9,10,10,11,14,14,21,24,24,28,28,29,33,40,41,42,46,46,47,49,49,53,54,55,55,60,65,65,72,73,78,80,80,80,80,81,81,83,83,83,89,92,92,92,92,92,93,93,94,96,96,96,96,96,96,97,97,97,100,100,100,100,100,101,102,102,102,102,102,102,102,102,103,103,103,103,103,103,103,103,103,103,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,106,107,108,111,111,113,116,119,124,129,138,153,174,194,219,274,316,326,342,382,447,484,508,574,599,648,679,715,751,761,830,878,898,945,989,1036,1089,1119,1252,1315,1329,1424,1531,1610,1703,1765,1784,1798,1813,1923,2020,2057,2135,2167,2217,2276,2337,2386,2386,2476,2506,2546,2585,2721,2721,2814,2928,2928,3008,3032,3087,3177,3177,3214,3315,3418,3467,3618,3699,3790,3790,3838,3838,3903,4123,4123,4220,4332,4409,4452,4559,4713,4713,4713,5023,5078,5163,5163,5191,5385,5517,5628,5703,5773,5923,6051,6135,6268,6268,6410,6410,6502,6549,6607,6644,6714,6714,6735,6790,6843,6882,6882,6947,6947,6964,7012,7060,7124,7163,7163,7186,7256,7312,7323,7348,7367,7395,7413,7431,7460,7469,7482,7496,7496,7517,7541,7543,7543,7549,7565,7570,7570,7579,7579,7585,7585,7623,7648,7659,7674,7698,7714,7725],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2.543,2.543,2.543,7.629,7.629,10.172,10.172,10.172,12.715,12.715,22.886,25.429,25.429,27.972,35.601,35.601,53.401,61.03,61.03,71.202,71.202,73.745,83.917,101.717,104.26,106.803,116.975,116.975,119.517,124.603,124.603,134.775,137.318,139.861,139.861,152.575,165.29,165.29,183.091,185.633,198.348,203.434,203.434,203.434,203.434,205.977,205.977,211.063,211.063,211.063,226.32,233.949,233.949,233.949,233.949,233.949,236.492,236.492,239.035,244.121,244.121,244.121,244.121,244.121,244.121,246.664,246.664,246.664,254.292,254.292,254.292,254.292,254.292,256.835,259.378,259.378,259.378,259.378,259.378,259.378,259.378,259.378,261.921,261.921,261.921,261.921,261.921,261.921,261.921,261.921,261.921,261.921,264.464,264.464,264.464,264.464,264.464,264.464,264.464,264.464,264.464,264.464,264.464,264.464,264.464,264.464,264.464,264.464,264.464,264.464,264.464,264.464,264.464,264.464,269.55,272.093,274.636,282.265,282.265,287.35,294.979,302.608,315.323,328.037,350.924,389.067,442.469,493.327,556.9,696.761,803.564,828.993,869.68,971.397,1136.687,1230.775,1291.806,1459.639,1523.212,1647.815,1726.646,1818.191,1909.736,1935.166,2110.627,2232.688,2283.546,2403.064,2514.952,2634.47,2769.245,2845.533,3183.742,3343.946,3379.547,3621.125,3893.218,4094.109,4330.601,4488.262,4536.577,4572.178,4610.322,4890.044,5136.708,5230.796,5429.144,5510.518,5637.664,5787.696,5942.815,6067.418,6067.418,6296.281,6372.569,6474.286,6573.46,6919.298,6919.298,7155.79,7445.683,7445.683,7649.117,7710.147,7850.008,8078.871,8078.871,8172.96,8429.795,8691.716,8816.319,9200.301,9406.278,9637.684,9637.684,9759.744,9759.744,9925.035,10484.478,10484.478,10731.142,11015.949,11211.754,11321.1,11593.193,11984.803,11984.803,11984.803,12773.11,12912.971,13129.12,13129.12,13200.321,13693.649,14029.315,14311.579,14502.299,14680.304,15061.742,15387.237,15600.842,15939.051,15939.051,16300.146,16300.146,16534.096,16653.613,16801.103,16895.191,17073.196,17073.196,17126.597,17266.458,17401.233,17500.407,17500.407,17665.697,17665.697,17708.927,17830.987,17953.047,18115.795,18214.969,18214.969,18273.456,18451.461,18593.864,18621.837,18685.41,18733.725,18804.927,18850.7,18896.472,18970.217,18993.104,19026.162,19061.763,19061.763,19115.164,19176.194,19181.28,19181.28,19196.538,19237.224,19249.939,19249.939,19272.825,19272.825,19288.083,19288.083,19384.714,19448.287,19476.259,19514.403,19575.433,19616.12,19644.092],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5.086,0,2.543,0,0,2.543,0,10.172,2.543,0,2.543,7.629,0,17.8,7.629,0,10.172,0,2.543,10.172,17.8,2.543,2.543,10.172,0,2.543,5.086,0,10.172,2.543,2.543,0,12.715,12.715,0,17.8,2.543,12.715,5.086,0,0,0,2.543,0,5.086,0,0,15.258,7.629,0,0,0,0,2.543,0,2.543,5.086,0,0,0,0,0,2.543,0,0,7.629,0,0,0,0,2.543,2.543,0,0,0,0,0,0,0,2.543,0,0,0,0,0,0,0,0,0,2.543,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5.086,2.543,2.543,7.629,0,5.086,7.629,7.629,12.715,12.715,22.886,38.144,53.401,50.858,63.573,139.861,106.803,25.429,40.687,101.717,165.29,94.088,61.03,167.833,63.573,124.603,78.831,91.545,91.545,25.429,175.462,122.06,50.858,119.517,111.889,119.517,134.775,76.288,338.209,160.204,35.601,241.578,272.093,200.891,236.492,157.661,48.316,35.601,38.144,279.722,246.664,94.088,198.348,81.374,127.146,150.033,155.118,124.603,0,228.863,76.288,101.717,99.174,345.838,0,236.492,289.893,0,203.434,61.03,139.861,228.863,0,94.088,256.835,261.921,124.603,383.982,205.977,231.406,0,122.06,0,165.29,559.443,0,246.664,284.808,195.805,109.346,272.093,391.61,0,0,788.307,139.861,216.149,0,71.202,493.327,335.666,282.265,190.719,178.005,381.439,325.494,213.606,338.209,0,361.095,0,233.949,119.517,147.49,94.088,178.005,0,53.401,139.861,134.775,99.174,0,165.29,0,43.23,122.06,122.06,162.747,99.174,0,58.487,178.005,142.404,27.972,63.573,48.316,71.202,45.773,45.773,73.745,22.886,33.058,35.601,0,53.401,61.03,5.086,0,15.258,40.687,12.715,0,22.886,0,15.258,0,96.631,63.573,27.972,38.144,61.03,40.687,27.972],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5.086,5.086,7.629,7.629,7.629,10.172,10.172,20.344,17.801,17.801,17.801,25.43,25.43,40.687,48.316,38.144,45.773,45.773,45.773,48.316,66.116,50.859,45.773,55.945,45.773,48.316,50.859,40.687,33.059,33.059,33.059,22.887,35.602,45.774,40.688,58.488,50.859,61.031,63.574,63.574,50.859,38.144,40.687,22.887,25.43,12.715,7.629,22.887,30.516,30.516,27.973,27.973,22.887,25.43,25.43,12.715,10.172,10.172,10.172,10.172,10.172,7.629,10.172,7.629,2.543,10.172,10.172,10.172,10.172,10.172,10.172,12.715,12.715,5.086,5.086,5.086,5.086,5.086,2.543,2.543,2.543,2.543,2.543,2.543,2.543,2.543,2.543,0,0,2.543,2.543,2.543,2.543,2.543,2.543,2.543,2.543,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5.086,7.629,10.172,17.801,17.801,22.887,30.516,38.145,45.774,55.946,76.289,106.804,160.205,205.977,261.921,394.153,488.241,500.955,518.756,582.329,694.218,737.448,734.905,762.877,719.647,818.821,856.965,846.793,773.048,704.389,818.821,773.048,760.333,755.247,788.305,816.277,859.507,910.366,1073.113,1111.257,1096,1218.061,1378.265,1459.639,1561.356,1642.729,1352.836,1228.233,1230.776,1268.92,1243.491,1136.688,1098.544,1022.257,1101.087,1215.519,1332.493,1177.374,930.71,1065.485,943.425,963.768,935.796,1131.601,976.483,1088.372,1378.265,1149.402,1276.548,1235.861,1276.548,1159.573,1159.573,1017.169,984.111,1246.032,1167.201,1490.153,1556.269,1558.812,1558.812,1586.784,1329.949,1233.318,1668.158,1284.176,1324.863,1378.265,1574.07,1561.356,1833.449,2059.769,1500.326,1500.326,2041.969,1897.022,1917.366,1808.02,1607.129,1708.846,2044.512,2326.777,1729.189,1767.333,1932.623,2258.117,2400.521,2245.403,1909.737,1988.567,1797.848,1853.792,1591.87,1413.866,1294.348,1134.144,1134.144,826.45,966.311,867.137,846.794,699.304,770.506,592.501,635.731,704.39,686.589,714.561,714.561,714.561,607.758,785.763,884.937,790.849,732.362,617.931,589.959,635.732,623.018,518.758,399.24,404.326,376.354,328.038,310.237,325.494,284.807,211.062,203.434,211.063,188.177,188.177,157.662,96.632,106.804,106.804,188.177,211.063,226.32,264.464,302.608,343.295,356.009],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.09,1.09,1.453,1.453,2.18,2.543,2.18,2.543,3.633,3.269,5.812,5.449,5.086,6.539,6.176,5.449,6.902,6.902,6.176,6.539,6.539,6.539,6.539,5.812,3.269,4.359,4.359,3.269,3.269,4.723,5.812,5.812,6.902,6.902,8.355,9.082,7.265,5.449,5.449,3.269,2.906,1.816,1.09,1.09,3.269,4.359,3.996,3.996,3.269,3.269,3.633,1.453,0.727,1.453,1.453,1.453,1.453,1.09,1.09,1.09,0.363,0.363,1.453,1.453,1.453,1.453,1.09,1.453,1.816,0.727,0.727,0.727,0.727,0.727,0.363,0,0.363,0.363,0.363,0.363,0.363,0.363,0.363,0,0,0,0.363,0.363,0.363,0.363,0.363,0.363,0.363,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.727,1.09,1.453,2.543,2.543,3.269,4.359,4.723,6.176,7.629,9.808,15.258,22.16,28.335,36.327,54.491,67.932,68.296,68.659,75.561,91.909,96.268,85.006,93.725,99.174,111.162,107.893,97.358,96.994,91.909,92.998,101.354,90.819,96.631,99.537,103.533,119.154,104.986,135.865,151.486,139.498,158.025,179.821,189.266,212.153,186.36,170.376,170.376,141.314,142.404,148.943,128.599,134.412,139.134,152.212,168.196,150.396,132.959,119.517,123.877,123.15,119.517,112.252,139.498,121.697,155.482,164.2,153.302,167.833,162.384,132.959,165.653,131.869,103.897,140.587,148.943,158.025,192.899,189.63,222.688,209.246,189.993,152.575,158.388,183.454,154.029,156.208,196.895,207.43,223.051,238.308,214.332,214.332,179.095,251.023,243.031,258.288,219.418,173.645,244.121,292.073,219.781,227.047,221.598,276.089,312.416,272.456,272.819,232.496,256.835,231.406,210.336,180.911,171.466,136.591,162.021,110.436,118.064,104.623,106.803,99.901,86.459,84.643,84.643,83.19,80.647,78.831,87.913,102.08,78.467,86.823,106.076,108.982,95.541,81.374,74.108,84.28,82.463,63.573,53.765,53.038,48.679,46.862,36.691,37.781,39.96,30.152,26.882,24.339,25.066,26.882,19.254,13.804,13.078,15.258,13.078,21.07,28.335,32.331,34.511,43.23,46.862,50.858]},{"iso":"BHR","continent":"Asia","population":1701583,"name":"Bahrain","population_density":1935.907,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,23,33,33,36,41,47,49,49,52,55,60,85,85,95,110,195,195,195,210,214,214,228,256,278,285,305,334,377,392,419,458,466,476,499,515,567,569,643,672,688,700,756,811,823,887,925,1040,1136,1361,1528,1671,1700,1740,1773,1881,1907,1973,2027,2217,2518,2588,2647,2723,2811,2921,3040,3170,3284,3383,3533,3720,3934,4199,4444,4774,4941,5236,5531,5816,6198,6583,6747,6956,7184,7532,7888,8174,8414,8802,9138,9171,9366,9692,10052,10449,10793,11398,11871,12311,12815,13296,13835,14383,14763,15417,15731,16200,16667,17269,17713,18227,19013,19553,19961,20430,20916,21331,21764,22407,23062,23570,24081,24805,25267,25705,26239,26758,27414,27837,28410,28857,29367,29821,30321,30931,31528,32039,32470,32941,33476,34078,34560,35084,35473,36004,36422,36936,37316,37637,37996,38458,38747,39131,39482,39921,40311,40755,40982,41190,41536,41835,42132,42514,42889,43307,43629,44011,44397,44804,45264,45726,46052,46430,46835,47185,47581,47950,48303,48661,49038,49330,49719,50076,50393,50756,51113,51391,51574,51972,52440,52807,53433,54095,54771,55415,56076,56778,57450,58207,58839,59586,60307,60965,61643,62484,63189,63879,64499,65039,65752,66402,67014,67701,68190,68775,69361,69848,70422,70864,71374,71803,72310,72662,73116,73476,73932,74422,74860,75287,75614,75948,76272,76621,76954,77325,77571,77902,78224,78533,78907,79211,79574,79975,80255,80533,80765,81022,81262,81466,81645,81923,82133,82363,82624,82786,83023,83264,83456,83632,83811,84042,84192,84349,84523,84703,84882,85008,85182,85317,85467,85591,85705,85886,86016,86185,86347,86515,86645,86787,86956,87137,87270,87432,87600,87732,87930,88111,88294,88495,88632,88820,88965,89143,89268,89444,89600,89743],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.588,13.517,19.394,19.394,21.157,24.095,27.621,28.797,28.797,30.56,32.323,35.261,49.953,49.953,55.83,64.646,114.599,114.599,114.599,123.414,125.765,125.765,133.993,150.448,163.377,167.491,179.245,196.288,221.558,230.374,246.241,269.161,273.863,279.74,293.256,302.659,333.219,334.395,377.883,394.926,404.329,411.382,444.292,476.615,483.667,521.279,543.611,611.196,667.614,799.843,897.987,982.027,999.07,1022.577,1041.971,1105.441,1120.721,1159.509,1191.244,1302.904,1479.799,1520.937,1555.61,1600.275,1651.991,1716.637,1786.572,1862.971,1929.968,1988.149,2076.302,2186.2,2311.965,2467.702,2611.686,2805.623,2903.767,3077.135,3250.503,3417.994,3642.491,3868.75,3965.131,4087.958,4221.951,4426.466,4635.683,4803.762,4944.807,5172.83,5370.293,5389.687,5504.286,5695.873,5907.44,6140.752,6342.917,6698.468,6976.445,7235.028,7531.222,7813.9,8130.664,8452.717,8676.039,9060.387,9244.921,9520.546,9794.997,10148.785,10409.718,10711.79,11173.713,11491.064,11730.841,12006.467,12292.083,12535.974,12790.443,13168.326,13553.262,13851.807,14152.116,14577.602,14849.114,15106.521,15420.347,15725.357,16110.88,16359.472,16696.218,16958.914,17258.635,17525.445,17819.289,18177.779,18528.629,18828.938,19082.231,19359.032,19673.445,20027.233,20310.499,20618.448,20847.058,21159.121,21404.774,21706.846,21930.167,22118.815,22329.795,22601.307,22771.149,22996.821,23203.1,23461.095,23690.293,23951.227,24084.632,24206.871,24410.211,24585.93,24760.473,24984.97,25205.353,25451.007,25640.242,25864.739,26091.586,26330.776,26601.112,26872.624,27064.21,27286.356,27524.37,27730.061,27962.785,28179.642,28387.096,28597.488,28819.047,28990.652,29219.262,29429.067,29615.364,29828.695,30038.499,30201.877,30309.424,30543.323,30818.361,31034.043,31401.936,31790.985,32188.262,32566.733,32955.195,33367.752,33762.679,34207.558,34578.977,35017.98,35441.703,35828.402,36226.855,36721.1,37135.42,37540.925,37905.292,38222.643,38641.665,39023.662,39383.327,39787.069,40074.448,40418.246,40762.631,41048.835,41386.168,41645.926,41945.647,42197.765,42495.723,42702.589,42969.4,43180.967,43448.953,43736.92,43994.328,44245.27,44437.444,44633.732,44824.143,45029.246,45224.946,45442.979,45587.55,45782.075,45971.31,46152.906,46372.701,46551.358,46764.689,47000.352,47164.905,47328.282,47464.626,47615.661,47756.707,47876.595,47981.791,48145.168,48268.583,48403.751,48557.138,48652.343,48791.625,48933.258,49046.094,49149.527,49254.723,49390.479,49478.633,49570.9,49673.157,49778.941,49884.137,49958.186,50060.444,50139.782,50227.935,50300.808,50367.805,50474.176,50550.576,50649.895,50745.1,50843.832,50920.231,51003.683,51103.002,51209.374,51287.536,51382.742,51481.473,51559.048,51675.41,51781.782,51889.329,52007.454,52087.967,52198.453,52283.668,52388.276,52461.737,52565.17,52656.85,52740.889],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12.929,5.877,0,1.763,2.938,3.526,1.175,0,1.763,1.763,2.938,14.692,0,5.877,8.815,49.953,0,0,8.815,2.351,0,8.228,16.455,12.929,4.114,11.754,17.043,25.271,8.815,15.868,22.92,4.702,5.877,13.517,9.403,30.56,1.175,43.489,17.043,9.403,7.052,32.911,32.323,7.052,37.612,22.332,67.584,56.418,132.23,98.144,84.039,17.043,23.508,19.394,63.47,15.28,38.787,31.735,111.661,176.894,41.138,34.674,44.664,51.717,64.646,69.935,76.399,66.996,58.181,88.153,109.898,125.765,155.737,143.984,193.937,98.144,173.368,173.368,167.491,224.497,226.26,96.381,122.827,133.993,204.515,209.217,168.079,141.045,228.023,197.463,19.394,114.599,191.586,211.568,233.312,202.165,355.551,277.976,258.583,296.195,282.678,316.764,322.053,223.321,384.348,184.534,275.626,274.45,353.788,260.933,302.072,461.923,317.352,239.777,275.626,285.616,243.891,254.469,377.883,384.936,298.546,300.309,425.486,271.512,257.407,313.825,305.01,385.523,248.592,336.745,262.697,299.721,266.81,293.844,358.49,350.85,300.309,253.294,276.801,314.413,353.788,283.266,307.949,228.611,312.062,245.654,302.072,223.321,188.648,210.98,271.512,169.842,225.672,206.279,257.995,229.198,260.933,133.405,122.239,203.34,175.719,174.543,224.497,220.383,245.654,189.236,224.497,226.848,239.189,270.337,271.512,191.586,222.146,238.014,205.691,232.724,216.857,207.454,210.392,221.558,171.605,228.611,209.805,186.297,213.331,209.805,163.377,107.547,233.9,275.038,215.682,367.893,389.049,397.277,378.471,388.462,412.557,394.926,444.88,371.419,439.003,423.723,386.699,398.452,494.246,414.32,405.505,364.367,317.352,419.022,381.997,359.665,403.742,287.379,343.798,344.385,286.204,337.333,259.758,299.721,252.118,297.958,206.866,266.81,211.568,267.986,287.967,257.407,250.943,192.174,196.288,190.411,205.103,195.7,218.032,144.571,194.525,189.236,181.596,219.795,178.657,213.331,235.663,164.553,163.377,136.344,151.036,141.045,119.888,105.196,163.377,123.414,135.168,153.387,95.205,139.282,141.633,112.836,103.433,105.196,135.756,88.153,92.267,102.258,105.784,105.196,74.049,102.258,79.338,88.153,72.873,66.996,106.372,76.399,99.319,95.205,98.732,76.399,83.452,99.319,106.372,78.163,95.205,98.732,77.575,116.362,106.372,107.547,118.125,80.513,110.485,85.215,104.608,73.461,103.433,91.679,84.039],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12.929,18.806,18.806,20.569,23.507,27.033,28.208,28.208,17.042,12.928,15.866,28.795,25.857,28.208,35.848,85.801,84.038,82.275,88.152,75.811,75.811,78.162,85.802,48.778,52.892,64.646,72.874,95.794,104.609,112.249,118.714,110.487,112.25,114.013,106.373,111.662,104.022,131.643,125.766,130.467,131.642,151.036,173.956,150.448,186.885,165.728,216.269,263.284,388.462,453.695,505.411,515.402,501.298,498.36,494.246,453.108,359.665,293.256,320.878,480.729,498.359,513.639,494.833,531.27,557.129,595.329,560.067,450.169,467.212,520.691,585.925,659.973,751.064,825.113,942.651,973.799,1088.986,1174.201,1231.794,1330.526,1401.049,1353.446,1282.336,1318.185,1349.332,1385.181,1385.769,1302.317,1304.08,1405.162,1301.729,1282.335,1269.406,1271.757,1336.99,1398.11,1525.638,1606.151,1845.34,2026.936,2118.028,2223.224,2311.965,2333.121,2361.918,2268.476,2285.519,2263.774,2334.884,2279.053,2259.072,2497.674,2430.678,2485.921,2485.921,2497.087,2387.19,2380.726,2456.537,2379.55,2360.744,2421.276,2571.136,2557.032,2570.548,2629.904,2557.031,2557.618,2507.664,2544.1,2381.311,2409.52,2418.923,2398.942,2452.422,2417.749,2469.466,2386.015,2400.119,2414.811,2501.789,2491.211,2440.67,2318.431,2330.184,2322.544,2347.815,2256.723,2091.583,2019.297,1982.86,1924.091,1837.701,1798.326,1754.249,1760.126,1832.411,1754.836,1605.563,1639.061,1589.108,1557.372,1523.874,1515.059,1499.78,1555.611,1657.869,1681.377,1744.847,1840.641,1887.656,1858.859,1835.351,1884.129,1865.323,1871.199,1848.867,1785.984,1724.864,1754.836,1704.295,1694.892,1699.006,1652.579,1649.053,1651.404,1604.389,1490.378,1552.673,1599.1,1604.977,1786.573,1962.291,2149.763,2364.857,2645.772,2824.429,2944.317,3173.515,3177.041,3226.995,3253.441,3261.669,3271.659,3353.348,3372.742,3333.367,3326.315,3204.664,3199.963,3195.261,3156.474,3065.97,2939.029,2877.322,2857.34,2826.192,2744.503,2622.264,2562.32,2410.696,2421.275,2284.343,2206.768,2132.132,2062.785,2090.994,2048.68,2047.505,1941.721,1931.143,1854.744,1848.279,1775.993,1706.058,1593.222,1536.804,1533.866,1519.174,1548.558,1522.112,1539.743,1557.374,1577.356,1546.208,1493.316,1462.756,1384.006,1325.237,1217.102,1144.816,1103.677,1075.468,1092.511,1036.68,1034.917,1056.662,1064.302,1004.358,986.14,986.728,921.494,918.556,881.532,845.683,838.043,808.659,805.721,749.303,749.303,729.909,694.647,695.235,666.438,691.708,684.655,704.049,692.295,702.874,735.197,735.197,736.961,732.847,736.374,715.217,755.18,778.1,786.328,798.081,800.431,815.711,802.194,829.227,786.326,783.387,767.519,733.433],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.862,4.03,2.183,1.595,1.847,2.015,3.694,3.19,3.862,5.121,12.006,11.754,11.334,10.494,10.83,9.991,9.907,5.121,6.968,7.556,7.976,10.075,13.685,13.769,13.685,15.112,15.196,14.356,13.853,11.586,14.692,12.593,15.532,17.295,17.799,16.875,20.233,20.485,21.325,20.485,21.241,29.552,36.605,50.793,60.196,71.194,68.256,68.424,61.539,62.547,45.84,37.36,29.888,43.405,65.317,68.424,64.31,68.508,70.355,75.056,69.095,54.739,58.433,61.791,68.004,76.315,85.047,97.304,106.959,125.094,130.803,142.976,152.043,158.004,167.827,179.581,165.644,169.17,163.545,167.995,173.956,165.896,153.722,172.528,183.191,166.819,153.974,151.456,157.668,170.849,167.155,189.739,226.68,247.249,262.193,272.351,284.273,301.4,282.51,297.706,287.128,284.189,283.014,288.303,279.572,290.822,301.904,320.878,315.756,315.924,306.185,303.751,296.95,284.945,294.6,302.995,306.521,326.503,330.449,330.868,321.717,310.299,322.725,315.337,302.659,301.4,307.445,300.728,299.133,295.271,309.88,304.674,303.331,300.057,306.857,315.421,304.674,298.546,288.303,296.699,292.249,290.486,271.848,258.331,244.478,250.607,230.29,227.435,213.751,218.704,224.497,231.633,211.904,205.103,201.913,197.547,185.625,184.954,179.161,195.196,204.767,207.79,215.094,224.329,230.877,238.182,230.458,235.159,237.09,234.068,233.144,225.504,216.353,219.04,218.956,209.469,212.743,209.469,205.103,205.943,205.859,197.547,188.396,189.152,198.471,202.668,224.749,250.355,283.769,322.473,344.553,364.199,389.805,400.803,398.285,404.245,410.71,410.458,408.443,422.632,418.266,423.135,412.473,397.277,401.895,399.544,380.318,378.807,361.932,358.993,362.855,343.881,337.501,323.228,308.368,303.331,296.782,277.137,274.366,256.4,257.575,255.896,256.652,249.935,247.836,237.762,234.739,225.756,212.575,206.95,191.754,192.09,191.083,189.823,191.922,189.487,188.816,201.829,197.547,193.853,187.389,177.566,172.193,158.844,140.206,140.038,134.329,134.161,134.497,127.948,130.719,135.924,128.704,125.849,121.567,119.049,118.041,111.325,105.7,104.692,104.944,100.495,95.709,94.45,93.862,89.664,84.123,84.291,84.627,84.207,86.474,87.985,88.489,90.84,89.832,94.114,91.092,91.092,91.092,91.26,95.961,96.969,97.136,102.845,100.747,102.426,103.517,101.838,97.136,96.549,92.771,93.274]},{"iso":"BGD","continent":"Asia","population":164689383,"name":"Bangladesh","population_density":1265.036,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,5,8,10,14,17,20,25,27,33,39,39,44,48,48,48,49,51,54,56,61,70,88,123,164,218,330,424,482,621,803,1012,1231,1572,1838,2144,2456,2948,3382,3772,4186,4689,4998,5416,5913,6462,7103,7667,8238,8790,9455,10143,10929,11719,12425,13134,13770,14657,15691,16660,17822,18863,20065,20995,22268,23870,25121,26738,28511,30205,32078,33610,35585,36751,38292,40321,42844,44608,47153,49534,52445,55140,57563,60391,63026,65769,68504,71675,74865,78052,81523,84379,87520,90619,94481,98489,102292,105535,108775,112306,115786,119198,122660,126606,130474,133978,137787,141801,145483,149258,153277,156391,159679,162417,165618,168645,172134,175494,178443,181129,183795,186894,190057,193590,196323,199357,202066,204525,207453,210510,213254,216110,218658,221178,223453,226225,229185,232194,234889,237661,239860,240746,242102,244020,246674,249651,252502,255113,257600,260507,263503,266498,269115,271881,274525,276549,279144,282344,285091,287959,290360,292625,294598,297083,299628,302147,304583,306794,308925,310822,312996,314946,317528,319686,321615,323565,325157,327359,329251,331078,332970,334762,336044,337520,339332,341056,342671,344264,345805,347372,348918,350621,352178,353844,355384,356767,357873,359148,360555,362043,363479,364987,366383,367565,368690,370132,371631,373151,374592,375870,377073,378266,379738,381275,382959,384559,386086,387295,388569,390206,391586,393131,394827,396413,397507,398815,400251,401586,403079,404760,406364,407684,409252,410988,412647,414164,416006,417475,418764,420238,421921,423620,425353,427198,428965,430496,432333,434472,436684,438795,441159,443434,445281,447341,449760,451990,454146,456438,458711,460619,462407,464932,467225,469423,471739,473991,475789,477545,479743,481945,484104,485965,487849,489178,490533,492332,494209,495841,496975],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.018,0.018,0.018,0.018,0.018,0.018,0.018,0.03,0.049,0.061,0.085,0.103,0.121,0.152,0.164,0.2,0.237,0.237,0.267,0.291,0.291,0.291,0.298,0.31,0.328,0.34,0.37,0.425,0.534,0.747,0.996,1.324,2.004,2.575,2.927,3.771,4.876,6.145,7.475,9.545,11.16,13.018,14.913,17.9,20.536,22.904,25.418,28.472,30.348,32.886,35.904,39.238,43.13,46.554,50.021,53.373,57.411,61.589,66.361,71.158,75.445,79.75,83.612,88.998,95.276,101.16,108.216,114.537,121.835,127.482,135.212,144.94,152.536,162.354,173.12,183.406,194.779,204.081,216.073,223.153,232.51,244.831,260.15,270.861,286.315,300.772,318.448,334.812,349.525,366.696,382.696,399.352,415.959,435.213,454.583,473.935,495.011,512.352,531.425,550.242,573.692,598.029,621.121,640.812,660.486,681.926,703.057,723.775,744.796,768.756,792.243,813.519,836.648,861.021,883.378,906.3,930.704,949.612,969.577,986.202,1005.639,1024.019,1045.204,1065.606,1083.512,1099.822,1116.01,1134.827,1154.033,1175.486,1192.08,1210.503,1226.952,1241.883,1259.662,1278.224,1294.886,1312.228,1327.699,1343.001,1356.815,1373.647,1391.62,1409.891,1426.255,1443.086,1456.439,1461.819,1470.052,1481.698,1497.814,1515.89,1533.201,1549.056,1564.157,1581.808,1600,1618.186,1634.076,1650.871,1666.926,1679.216,1694.973,1714.403,1731.083,1748.498,1763.077,1776.83,1788.81,1803.899,1819.352,1834.648,1849.439,1862.864,1875.804,1887.323,1900.523,1912.364,1928.042,1941.145,1952.858,1964.699,1974.365,1987.736,1999.224,2010.318,2021.806,2032.687,2040.472,2049.434,2060.436,2070.905,2080.711,2090.384,2099.741,2109.256,2118.643,2128.984,2138.438,2148.554,2157.905,2166.302,2173.018,2180.76,2189.303,2198.338,2207.058,2216.215,2224.691,2231.868,2238.699,2247.455,2256.557,2265.787,2274.536,2282.296,2289.601,2296.845,2305.783,2315.116,2325.341,2335.056,2344.328,2351.67,2359.405,2369.345,2377.725,2387.106,2397.404,2407.034,2413.677,2421.619,2430.339,2438.445,2447.511,2457.718,2467.457,2475.472,2484.993,2495.534,2505.608,2514.819,2526.004,2534.924,2542.75,2551.701,2561.92,2572.236,2582.759,2593.962,2604.691,2613.988,2625.142,2638.13,2651.561,2664.379,2678.734,2692.548,2703.763,2716.271,2730.959,2744.5,2757.591,2771.508,2785.31,2796.896,2807.752,2823.084,2837.007,2850.354,2864.417,2878.091,2889.008,2899.671,2913.017,2926.388,2939.497,2950.797,2962.237,2970.307,2978.534,2989.458,3000.855,3010.765,3017.651],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.012,0.018,0.012,0.024,0.018,0.018,0.03,0.012,0.036,0.036,0,0.03,0.024,0,0,0.006,0.012,0.018,0.012,0.03,0.055,0.109,0.213,0.249,0.328,0.68,0.571,0.352,0.844,1.105,1.269,1.33,2.071,1.615,1.858,1.894,2.987,2.635,2.368,2.514,3.054,1.876,2.538,3.018,3.334,3.892,3.425,3.467,3.352,4.038,4.178,4.773,4.797,4.287,4.305,3.862,5.386,6.278,5.884,7.056,6.321,7.299,5.647,7.73,9.727,7.596,9.818,10.766,10.286,11.373,9.302,11.992,7.08,9.357,12.32,15.32,10.711,15.453,14.458,17.676,16.364,14.713,17.172,16,16.656,16.607,19.254,19.37,19.352,21.076,17.342,19.072,18.817,23.45,24.337,23.092,19.692,19.673,21.44,21.131,20.718,21.021,23.96,23.487,21.276,23.128,24.373,22.357,22.922,24.404,18.908,19.965,16.625,19.437,18.38,21.185,20.402,17.906,16.309,16.188,18.817,19.206,21.453,16.595,18.423,16.449,14.931,17.779,18.562,16.662,17.342,15.472,15.302,13.814,16.832,17.973,18.271,16.364,16.832,13.352,5.38,8.234,11.646,16.115,18.076,17.311,15.854,15.101,17.651,18.192,18.186,15.891,16.795,16.054,12.29,15.757,19.431,16.68,17.415,14.579,13.753,11.98,15.089,15.453,15.295,14.791,13.425,12.94,11.519,13.201,11.84,15.678,13.103,11.713,11.84,9.667,13.371,11.488,11.094,11.488,10.881,7.784,8.962,11.003,10.468,9.806,9.673,9.357,9.515,9.387,10.341,9.454,10.116,9.351,8.398,6.716,7.742,8.543,9.035,8.719,9.157,8.477,7.177,6.831,8.756,9.102,9.229,8.75,7.76,7.305,7.244,8.938,9.333,10.225,9.715,9.272,7.341,7.736,9.94,8.379,9.381,10.298,9.63,6.643,7.942,8.719,8.106,9.066,10.207,9.74,8.015,9.521,10.541,10.074,9.211,11.185,8.92,7.827,8.95,10.219,10.316,10.523,11.203,10.729,9.296,11.154,12.988,13.431,12.818,14.354,13.814,11.215,12.508,14.688,13.541,13.091,13.917,13.802,11.585,10.857,15.332,13.923,13.346,14.063,13.674,10.918,10.662,13.346,13.371,13.11,11.3,11.44,8.07,8.228,10.924,11.397,9.91,6.886],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.012,0.03,0.042,0.066,0.084,0.102,0.132,0.144,0.168,0.186,0.174,0.18,0.186,0.168,0.138,0.132,0.108,0.09,0.102,0.102,0.133,0.242,0.455,0.698,1.014,1.676,2.235,2.557,3.346,4.342,5.398,6.479,8.222,9.157,10.444,11.986,14.129,15.659,16.758,17.942,18.925,19.186,19.866,20.99,21.337,22.594,23.651,24.604,24.902,27.064,28.704,30.459,31.922,32.317,33.197,33.592,35.626,37.866,39.572,41.855,43.379,46.391,47.733,51.601,55.942,57.26,61.194,64.904,68.869,72.943,76.598,80.86,78.213,79.974,82.476,87.03,87.455,91.535,96.691,102.375,111.659,117.015,121.867,122.547,128.492,129.646,134.442,136.136,139.124,145.487,145.657,148.729,150.89,157.733,162.816,166.538,166.878,165.475,169.573,171.632,173.533,171.104,170.727,171.122,172.706,176.161,179.094,180.32,182.524,185.907,180.855,177.333,172.682,168.991,162.998,161.826,159.306,152.808,150.209,146.432,148.624,148.393,151.466,146.876,144.897,143.44,142.062,143.653,143.398,140.854,136.743,135.62,132.499,129.864,131.765,131.959,131.668,131.37,130.86,128.74,118.818,113.238,108.052,106.194,105.999,106.946,105.968,107.717,119.988,129.946,136.486,136.262,134.981,133.724,130.16,130.816,132.596,131.084,130.313,129.001,125.959,121.885,124.684,124.38,120.244,118.355,114.365,112.726,110.492,111.713,108.464,108.689,106.497,103.419,101.834,98.561,100.413,98.7,97.954,93.764,91.542,87.613,84.735,86.071,83.168,81.486,80.065,77.934,76.568,78.171,79.55,78.001,77.649,77.194,75.919,73.278,71.505,70.661,69.355,68.62,67.661,66.787,65.566,65.681,66.695,67.254,67.448,67.479,66.082,64.91,64.977,67.084,67.661,68.784,69.27,69.792,69.373,69.804,72.5,71.941,71.989,72.062,71.977,69.348,69.949,70.932,69.098,69.785,70.611,70.053,68.438,71.316,73.915,75.27,76.375,78.494,77.207,75.294,76.229,76.927,76.702,77.151,79.143,78.687,79.063,82.39,86.428,89.64,92.142,95.973,98.584,99.07,102.282,105.816,106.369,106.029,107.128,106.576,104.347,103.989,106.813,106.048,105.853,106.825,106.582,103.698,102.775,105.264,103.303,102.49,100.444,97.821,92.217,89.527,89.789,87.84,84.379,78.155],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.002,0.004,0.006,0.01,0.012,0.015,0.019,0.019,0.022,0.025,0.022,0.023,0.024,0.02,0.018,0.014,0.01,0.013,0.01,0.011,0.019,0.035,0.064,0.098,0.142,0.238,0.315,0.357,0.462,0.59,0.736,0.879,1.077,1.227,1.442,1.592,1.861,2.056,2.204,2.267,2.473,2.476,2.568,2.572,2.672,2.889,3.02,3.079,3.289,3.504,3.669,3.875,4.004,4.127,4.247,4.32,4.512,4.813,4.971,5.294,5.585,6.012,6.267,6.602,7.095,7.339,7.734,8.369,8.796,9.614,9.838,10.162,10.088,10.022,10.244,10.963,10.869,11.748,12.1,13.614,14.615,14.956,15.221,15.976,16.148,16.455,16.681,17.11,17.773,18.331,18.522,18.868,19.183,19.783,20.492,21.027,20.829,21.162,21.5,21.831,21.44,20.967,21.091,21.633,21.862,22.103,22.566,22.8,23.072,23.135,22.481,22.294,21.365,20.66,20.092,19.843,19.272,19.129,18.606,18.544,18.456,18.573,18.612,18.068,18.142,18.161,17.982,17.834,17.742,17.057,17.164,16.742,16.578,16.419,16.283,16.199,16.429,16.29,16.484,16.205,15.001,13.772,12.868,12.56,12.805,12.874,13.231,14.62,15.965,16.9,17.196,16.884,16.81,16.839,16.437,16.166,16.343,16.128,16.346,16.029,15.701,15.656,15.561,14.993,14.795,14.42,14.255,14.139,14.073,13.803,13.287,13.342,13.101,12.856,12.699,12.435,12.459,12.409,11.754,11.523,11.404,10.825,10.724,10.386,10.24,10.056,9.797,9.579,9.826,9.887,9.792,9.648,9.692,9.646,9.509,9.109,8.874,8.617,8.557,8.358,8.33,8.341,8.407,8.277,8.307,8.317,8.39,8.332,8.229,8.248,8.307,8.333,8.366,8.508,8.646,8.862,8.867,8.937,9.08,8.944,8.824,8.907,8.958,8.858,8.888,8.713,8.674,8.629,8.616,8.632,8.828,9.053,9.314,9.595,9.616,9.755,9.638,9.611,9.53,9.484,9.518,9.706,9.708,9.967,10.177,10.492,10.887,11.332,11.66,12.11,12.551,12.825,13.018,13.261,13.277,13.316,13.254,13.252,13.305,13.069,13.161,13.215,13.252,13.273,13.254,13.159,13.131,12.848,12.769,12.735,12.34,12.021,11.614,11.266,10.92,10.638,10.181,9.55]},{"iso":"BRB","continent":"North America","population":287371,"name":"Barbados","population_density":664.463,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,5,5,6,14,17,18,18,18,24,26,33,33,34,34,46,51,52,56,60,63,63,66,67,68,71,72,72,73,75,75,75,75,75,75,75,76,77,79,79,80,80,80,81,81,81,82,82,82,82,82,83,84,84,84,85,85,85,85,86,88,88,90,90,90,90,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,96,96,96,96,96,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,98,98,98,98,98,98,103,103,103,103,104,104,104,104,105,106,106,106,106,108,108,110,110,110,110,110,110,122,132,132,132,133,133,138,138,142,142,143,144,144,148,150,151,152,153,155,156,157,158,161,161,164,165,165,166,170,173,174,176,176,177,178,178,178,179,180,180,180,180,180,181,183,184,185,185,185,185,189,189,189,189,189,190,190,190,190,190,190,193,193,196,199,200,200,203,203,204,206,208,208,210,215,218,219,219,221,222,222,222,224,226,227,227,233,233,234,234,236,237,237,238,238,239,239,242,242,242,243,243,249,249,249,249,250,250,250,252,253,253,255,259,260,262,263,266,270,270,275,276,278,279,281,284,285,285,287,289,290,291,292,292,292,296,297,301,305],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6.96,6.96,17.399,17.399,20.879,48.718,59.157,62.637,62.637,62.637,83.516,90.475,114.834,114.834,118.314,118.314,160.072,177.471,180.951,194.87,208.789,219.229,219.229,229.668,233.148,236.628,247.067,250.547,250.547,254.027,260.987,260.987,260.987,260.987,260.987,260.987,260.987,264.466,267.946,274.906,274.906,278.386,278.386,278.386,281.866,281.866,281.866,285.345,285.345,285.345,285.345,285.345,288.825,292.305,292.305,292.305,295.785,295.785,295.785,295.785,299.265,306.224,306.224,313.184,313.184,313.184,313.184,320.144,320.144,320.144,320.144,320.144,320.144,320.144,320.144,320.144,320.144,320.144,320.144,320.144,320.144,320.144,320.144,320.144,320.144,334.063,334.063,334.063,334.063,334.063,337.543,337.543,337.543,337.543,337.543,337.543,337.543,337.543,337.543,337.543,337.543,337.543,337.543,337.543,337.543,337.543,337.543,337.543,337.543,337.543,341.023,341.023,341.023,341.023,341.023,341.023,358.422,358.422,358.422,358.422,361.902,361.902,361.902,361.902,365.381,368.861,368.861,368.861,368.861,375.821,375.821,382.78,382.78,382.78,382.78,382.78,382.78,424.538,459.337,459.337,459.337,462.816,462.816,480.215,480.215,494.135,494.135,497.615,501.094,501.094,515.014,521.973,525.453,528.933,532.413,539.372,542.852,546.332,549.812,560.251,560.251,570.691,574.171,574.171,577.65,591.57,602.009,605.489,612.449,612.449,615.929,619.408,619.408,619.408,622.888,626.368,626.368,626.368,626.368,626.368,629.848,636.807,640.287,643.767,643.767,643.767,643.767,657.686,657.686,657.686,657.686,657.686,661.166,661.166,661.166,661.166,661.166,661.166,671.606,671.606,682.045,692.485,695.964,695.964,706.404,706.404,709.884,716.843,723.803,723.803,730.763,748.162,758.601,762.081,762.081,769.041,772.521,772.521,772.521,779.48,786.44,789.92,789.92,810.799,810.799,814.278,814.278,821.238,824.718,824.718,828.198,828.198,831.678,831.678,842.117,842.117,842.117,845.597,845.597,866.476,866.476,866.476,866.476,869.956,869.956,869.956,876.915,880.395,880.395,887.355,901.274,904.754,911.713,915.193,925.633,939.552,939.552,956.951,960.431,967.391,970.87,977.83,988.27,991.749,991.749,998.709,1005.669,1009.148,1012.628,1016.108,1016.108,1016.108,1030.027,1033.507,1047.426,1061.346],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10.439,0,3.48,27.839,10.439,3.48,0,0,20.879,6.96,24.359,0,3.48,0,41.758,17.399,3.48,13.919,13.919,10.439,0,10.439,3.48,3.48,10.439,3.48,0,3.48,6.96,0,0,0,0,0,0,3.48,3.48,6.96,0,3.48,0,0,3.48,0,0,3.48,0,0,0,0,3.48,3.48,0,0,3.48,0,0,0,3.48,6.96,0,6.96,0,0,0,6.96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13.919,0,0,0,0,3.48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.48,0,0,0,0,0,17.399,0,0,0,3.48,0,0,0,3.48,3.48,0,0,0,6.96,0,6.96,0,0,0,0,0,41.758,34.798,0,0,3.48,0,17.399,0,13.919,0,3.48,3.48,0,13.919,6.96,3.48,3.48,3.48,6.96,3.48,3.48,3.48,10.439,0,10.439,3.48,0,3.48,13.919,10.439,3.48,6.96,0,3.48,3.48,0,0,3.48,3.48,0,0,0,0,3.48,6.96,3.48,3.48,0,0,0,13.919,0,0,0,0,3.48,0,0,0,0,0,10.439,0,10.439,10.439,3.48,0,10.439,0,3.48,6.96,6.96,0,6.96,17.399,10.439,3.48,0,6.96,3.48,0,0,6.96,6.96,3.48,0,20.879,0,3.48,0,6.96,3.48,0,3.48,0,3.48,0,10.439,0,0,3.48,0,20.879,0,0,0,3.48,0,0,6.96,3.48,0,6.96,13.919,3.48,6.96,3.48,10.439,13.919,0,17.399,3.48,6.96,3.48,6.96,10.439,3.48,0,6.96,6.96,3.48,3.48,3.48,0,0,13.919,3.48,13.919,13.919],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10.439,10.439,13.919,41.758,52.197,55.677,55.677,55.677,66.117,73.077,93.956,66.117,59.158,55.678,97.436,114.835,97.436,104.395,93.955,104.394,100.914,111.353,73.075,59.156,66.115,55.676,41.757,34.798,41.758,31.319,27.839,24.359,13.92,10.44,10.44,10.44,6.96,13.92,13.92,17.4,17.4,17.4,20.88,17.4,13.92,10.44,10.44,6.96,6.96,6.96,6.96,10.44,10.44,6.96,10.44,10.44,10.44,10.44,10.44,13.92,13.92,20.88,17.4,17.4,17.4,24.36,20.88,13.92,13.92,6.96,6.96,6.96,6.96,0,0,0,0,0,0,0,0,0,0,13.919,13.919,13.919,13.919,13.919,17.399,17.399,17.399,3.48,3.48,3.48,3.48,3.48,0,0,0,0,0,0,0,0,0,0,0,0,3.48,3.48,3.48,3.48,3.48,3.48,20.879,20.879,17.399,17.399,20.879,20.879,20.879,20.879,6.96,10.44,10.44,10.44,6.96,13.92,13.92,20.88,17.4,13.92,13.92,13.92,13.92,48.718,83.516,76.556,76.556,80.036,80.036,97.435,97.435,69.596,34.798,38.278,41.758,38.278,52.197,41.758,45.238,34.799,38.279,41.759,41.759,45.239,34.8,38.279,34.799,41.758,41.758,34.798,34.798,45.237,52.196,45.237,52.197,41.758,41.758,45.238,41.758,27.839,20.88,20.88,13.92,13.92,10.44,6.96,10.44,17.4,17.4,17.4,17.4,17.4,17.4,31.319,27.839,20.879,17.399,13.919,17.399,17.399,17.399,3.48,3.48,3.48,13.919,13.919,20.878,31.317,34.797,34.797,45.236,45.236,38.277,45.237,41.758,31.319,34.799,52.198,52.198,55.678,52.198,52.198,48.718,48.718,41.758,31.319,27.84,27.84,27.84,41.759,38.279,41.759,41.759,41.759,38.279,34.799,38.279,17.4,20.88,17.4,27.839,20.879,17.399,20.879,17.399,38.278,34.798,34.798,24.359,27.839,27.839,24.359,31.319,13.92,13.92,20.88,34.799,34.799,41.759,45.239,48.718,59.157,59.157,69.596,59.157,62.637,59.157,62.637,62.637,52.198,52.198,41.759,45.239,41.759,41.759,38.279,27.84,24.36,38.279,34.799,41.758,52.197],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7.457,7.954,7.954,6.463,9.445,9.942,9.445,7.954,7.954,7.954,13.919,13.422,12.925,11.434,13.422,14.416,14.416,9.942,7.954,7.954,7.457,5.965,4.474,4.971,4.474,3.977,3.48,1.988,1.491,1.491,0.994,0.497,0.994,1.988,1.988,2.486,2.486,2.486,2.486,1.988,0.994,1.491,0.994,0.994,0.994,0.497,0.994,1.491,0.994,0.994,1.491,1.491,1.491,0.994,0.994,1.988,1.988,2.486,2.486,2.486,2.486,2.983,1.988,1.988,0.994,0.994,0.994,0.994,0,0,0,0,0,0,0,0,0,0,0,1.988,1.988,1.988,1.988,1.988,2.486,2.486,0.497,0.497,0.497,0.497,0.497,0,0,0,0,0,0,0,0,0,0,0,0,0,0.497,0.497,0.497,0.497,0.497,0.497,2.983,2.486,2.486,2.486,2.983,2.983,2.983,0.497,0.994,1.491,1.491,0.994,0.994,1.988,1.988,2.486,1.988,1.988,1.988,1.988,0.994,6.96,10.937,10.937,10.937,11.434,11.434,13.919,7.954,4.971,4.971,5.468,5.468,5.468,4.971,5.965,4.474,4.971,4.971,5.468,5.965,4.474,3.977,4.971,4.474,5.468,4.971,4.474,4.474,5.965,5.965,6.463,5.965,5.468,5.965,5.965,3.977,2.486,2.486,1.988,1.988,1.491,0.994,0.994,1.491,1.988,1.988,2.486,2.486,2.486,2.486,3.977,2.983,2.486,1.988,1.988,2.486,2.486,0.497,0.497,0.497,0.497,1.988,1.491,2.983,4.474,4.971,4.971,6.463,4.971,5.468,4.971,4.474,3.977,4.971,5.965,7.457,7.457,6.463,6.463,6.96,5.965,3.48,2.983,3.48,3.977,2.983,5.468,5.468,5.965,4.971,4.971,4.971,4.971,2.486,2.486,2.486,2.486,2.983,2.486,2.486,2.486,2.486,4.971,4.971,3.48,3.48,3.977,3.48,3.48,1.491,1.988,1.988,2.983,4.474,4.971,5.965,5.468,6.463,8.451,7.457,7.954,7.954,7.954,7.954,7.457,6.96,7.457,4.971,5.468,5.468,5.468,4.971,3.977,3.48,3.48,4.474,3.977,5.468,6.96]},{"iso":"BLR","continent":"Europe","population":9449321,"name":"Belarus","population_density":46.858,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,6,6,6,6,6,6,9,9,12,27,27,27,36,36,51,51,69,76,76,81,81,86,86,94,94,94,152,152,163,304,351,440,562,700,861,1066,1486,1981,2226,2578,2919,3281,3728,4204,4779,5297,5807,6264,6723,7281,8022,8773,9590,10463,11289,12208,13181,14027,14917,15828,16705,17489,18350,19255,20168,21101,22052,22973,23906,24873,25825,26772,27730,28681,29650,30572,31508,32426,33371,34303,35244,36198,37144,38059,38956,39858,40764,41658,42556,43403,44255,45116,45981,46868,47751,48630,49453,50265,51066,51816,52520,53241,53973,54680,55369,56032,56657,57333,57936,58505,59023,59487,59945,60382,60713,61095,61475,61790,62118,62424,62698,62997,63270,63554,63804,64003,64224,64411,64604,64767,64932,65114,65269,65443,65623,65782,65953,66095,66213,66348,66521,66688,66846,67002,67132,67251,67366,67518,67665,67808,67946,68067,68166,68250,68376,68503,68614,68738,68850,68947,69005,69102,69203,69308,69308,69516,69589,69673,69801,69950,70111,70285,70468,70645,70727,70974,71165,71346,71523,71687,71843,71962,72141,72302,72485,72663,72859,73031,73208,73402,73591,73784,73975,74173,74360,74552,74763,74987,75230,75461,75674,75898,76104,76357,76651,76957,77289,77609,77946,78260,78631,79019,79421,79852,79852,80696,81090,81505,81982,82471,82471,83534,83998,84524,85121,85734,86392,87063,87698,88290,88909,89642,90380,91167,91978,92823,93707,94609,95545,96529,97499,98482,99459,100400,101329,102313,103295,104286,105283,106279,107262,108300,109357,110455,111622,112870,114185,115448,116699,118008,119390,120847,122435,123999,125482,126953,128449,130012,131633,133324,135008,136647,138219,139908,141609,143383,145279,147157,148953,150602,152453,154392,156359,158334,160295,162148,164059,165897,167731],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.106,0.106,0.106,0.106,0.106,0.635,0.635,0.635,0.635,0.635,0.635,0.952,0.952,1.27,2.857,2.857,2.857,3.81,3.81,5.397,5.397,7.302,8.043,8.043,8.572,8.572,9.101,9.101,9.948,9.948,9.948,16.086,16.086,17.25,32.172,37.146,46.564,59.475,74.079,91.118,112.812,157.26,209.645,235.572,272.824,308.911,347.221,394.526,444.9,505.751,560.569,614.542,662.905,711.48,770.532,848.95,928.426,1014.888,1107.275,1194.689,1291.945,1394.915,1484.445,1578.632,1675.041,1767.852,1850.821,1941.938,2037.713,2134.333,2233.071,2333.713,2431.18,2529.917,2632.253,2733.001,2833.219,2934.602,3035.245,3137.792,3235.365,3334.419,3431.569,3531.577,3630.208,3729.792,3830.751,3930.864,4027.697,4122.624,4218.081,4313.961,4408.571,4503.604,4593.24,4683.405,4774.523,4866.064,4959.933,5053.379,5146.402,5233.498,5319.43,5404.198,5483.569,5558.071,5634.373,5711.839,5786.659,5859.574,5929.738,5995.881,6067.42,6131.234,6191.45,6246.269,6295.373,6343.842,6390.089,6425.118,6465.544,6505.758,6539.094,6573.806,6606.189,6635.186,6666.828,6695.719,6725.774,6752.231,6773.291,6796.679,6816.469,6836.893,6854.143,6871.605,6890.865,6907.269,6925.683,6944.732,6961.558,6979.655,6994.682,7007.17,7021.457,7039.765,7057.438,7074.159,7090.668,7104.426,7117.019,7129.189,7145.275,7160.832,7175.965,7190.57,7203.375,7213.852,7222.741,7236.075,7249.516,7261.262,7274.385,7286.238,7296.503,7302.641,7312.906,7323.595,7334.707,7334.707,7356.719,7364.444,7373.334,7386.88,7402.648,7419.687,7438.101,7457.467,7476.199,7484.876,7511.016,7531.229,7550.384,7569.115,7586.471,7602.98,7615.574,7634.517,7651.555,7670.922,7689.759,7710.501,7728.703,7747.435,7767.966,7787.967,7808.392,7828.605,7849.559,7869.348,7889.667,7911.997,7935.702,7961.419,7985.865,8008.406,8032.112,8053.912,8080.686,8111.8,8144.183,8179.318,8213.183,8248.847,8282.077,8321.339,8362.4,8404.943,8450.554,8450.554,8539.873,8581.569,8625.487,8675.967,8727.717,8727.717,8840.212,8889.316,8944.981,9008.16,9073.033,9142.667,9213.678,9280.878,9343.528,9409.036,9486.608,9564.708,9647.995,9733.821,9823.246,9916.797,10012.254,10111.309,10215.443,10318.096,10422.125,10525.518,10625.102,10723.416,10827.55,10931.473,11036.349,11141.859,11247.263,11351.292,11461.141,11573.001,11689.2,11812.701,11944.774,12083.937,12217.597,12349.988,12488.516,12634.77,12788.961,12957.016,13122.53,13279.473,13435.145,13593.463,13758.872,13930.419,14109.374,14287.587,14461.039,14627.4,14806.143,14986.156,15173.895,15374.544,15573.288,15763.355,15937.865,16133.752,16338.952,16547.115,16756.125,16963.653,17159.751,17361.988,17556.5,17750.588],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.529,0,0,0,0,0,0.317,0,0.317,1.587,0,0,0.952,0,1.587,0,1.905,0.741,0,0.529,0,0.529,0,0.847,0,0,6.138,0,1.164,14.922,4.974,9.419,12.911,14.604,17.038,21.695,44.448,52.385,25.928,37.251,36.087,38.31,47.305,50.374,60.851,54.819,53.972,48.363,48.575,59.052,78.418,79.477,86.461,92.388,87.414,97.256,102.97,89.53,94.187,96.409,92.811,82.969,91.118,95.774,96.621,98.737,100.642,97.467,98.737,102.335,100.748,100.219,101.383,100.642,102.547,97.573,99.055,97.15,100.007,98.631,99.584,100.96,100.113,96.832,94.927,95.457,95.88,94.61,95.033,89.636,90.165,91.118,91.541,93.869,93.446,93.023,87.096,85.932,84.768,79.371,74.503,76.302,77.466,74.82,72.915,70.164,66.142,71.54,63.814,60.216,54.819,49.104,48.469,46.247,35.029,40.426,40.215,33.336,34.711,32.383,28.997,31.642,28.891,30.055,26.457,21.06,23.388,19.79,20.425,17.25,17.462,19.261,16.403,18.414,19.049,16.827,18.097,15.028,12.488,14.287,18.308,17.673,16.721,16.509,13.758,12.593,12.17,16.086,15.557,15.133,14.604,12.805,10.477,8.89,13.334,13.44,11.747,13.123,11.853,10.265,6.138,10.265,10.689,11.112,0,22.012,7.725,8.89,13.546,15.768,17.038,18.414,19.366,18.732,8.678,26.139,20.213,19.155,18.732,17.356,16.509,12.593,18.943,17.038,19.366,18.837,20.742,18.202,18.732,20.531,20.001,20.425,20.213,20.954,19.79,20.319,22.33,23.705,25.716,24.446,22.541,23.705,21.801,26.774,31.113,32.383,35.135,33.865,35.664,33.23,39.262,41.061,42.543,45.612,0,89.319,41.696,43.918,50.48,51.75,0,112.495,49.104,55.665,63.179,64.872,69.635,71.01,67.201,62.65,65.507,77.572,78.101,83.286,85.826,89.424,93.552,95.457,99.055,104.134,102.653,104.029,103.394,99.584,98.314,104.134,103.923,104.875,105.51,105.404,104.029,109.849,111.86,116.199,123.501,132.073,139.163,133.66,132.39,138.528,146.254,154.191,168.054,165.515,156.942,155.673,158.318,165.409,171.547,178.955,178.214,173.452,166.361,178.743,180.013,187.738,200.649,198.744,190.067,174.51,195.887,205.2,208.163,209.01,207.528,196.099,202.237,194.511,194.088],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.529,0.529,0.529,0.529,0.529,0.529,0.846,0.846,0.634,2.221,2.221,2.221,3.173,3.173,4.443,4.443,6.031,5.185,5.185,5.714,4.762,5.291,3.704,4.551,2.646,1.905,8.043,7.514,8.678,23.071,28.045,36.617,49.528,64.132,75.032,96.727,140.011,177.474,198.428,226.26,249.436,273.142,303.409,332.088,348.491,350.925,378.969,390.081,402.569,423.311,454.424,483.527,509.137,546.706,580.148,629.041,683.436,713.914,729.683,746.615,752.965,743.546,747.25,745.768,739.419,748.626,755.081,756.139,762.065,781.431,791.061,795.506,800.268,802.173,804.078,804.184,804.502,799.317,798.576,796.988,795.189,795.507,793.073,792.332,788.204,786.511,782.384,778.363,773.812,762.488,752.54,746.826,743.44,741.852,739.418,737.831,729.894,726.19,720.793,709.046,692.008,674.441,658.461,640.258,626.077,610.309,591.683,583.852,573.163,557.077,534.43,508.714,484.268,460.351,429.238,398.124,374.525,347.645,327.537,310.816,291.344,276.739,270.601,260.23,246.472,234.196,222.873,210.28,201.708,187.316,175.887,165.093,155.039,152.393,148.054,145.091,142.763,140.541,135.567,130.593,132.498,131.757,129.429,129.111,124.772,122.337,122.019,123.818,121.067,118.527,116.41,112.706,109.425,105.722,106.886,104.24,100.43,98.42,95.669,93.129,88.79,90.165,87.52,85.192,73.445,82.334,78.206,76.831,84.239,89.742,96.091,103.393,122.759,119.479,120.432,137.681,144.348,147.735,149.429,148.371,145.514,139.375,149.64,140.539,139.692,139.374,141.384,142.23,144.453,152.391,153.449,156.836,157.683,159.8,158.848,160.965,164.563,167.737,173.452,177.473,179.801,182.552,184.563,191.018,199.801,208.479,217.898,227.317,240.44,249.965,267.426,281.713,293.143,306.372,271.237,326.691,332.723,343.411,354.629,365.318,322.775,389.658,438.762,405.108,426.591,447.545,466.7,485.96,553.161,503.316,519.719,541.626,556.548,574.962,591.153,609.567,635.918,668.725,702.273,728.835,753.387,774.13,791.698,801.858,806.62,815.297,820.165,820.906,823.763,825.138,825.773,836.038,849.584,861.649,881.227,908.425,942.078,970.334,998.695,1027.374,1061.768,1099.76,1144.313,1177.755,1195.534,1217.547,1243.475,1270.356,1295.649,1320.413,1330.573,1338.51,1347.929,1370.999,1392.694,1415.023,1444.125,1463.914,1475.767,1476.825,1506.351,1532.808,1560.958,1582.23,1589.109,1586.464,1598.634,1618.635,1616.836],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.076,0.076,0.076,0.076,0.076,0.121,0.045,0.091,0.317,0.317,0.317,0.454,0.408,0.635,0.59,0.635,0.741,0.741,0.68,0.68,0.529,0.529,0.378,0.272,0.272,1.073,1.073,1.164,3.296,3.885,5.231,7.075,8.285,10.719,13.652,17.87,24.643,27.001,30.478,33.547,36.586,40.245,41.091,42.301,46.428,48.817,50.571,52.037,53.715,57.721,60.382,64.903,70.391,75.969,82.924,89.198,90.785,92.886,94.308,94.368,93.733,92.856,91.828,92.841,93.491,94.096,94.761,97.014,98.616,99.327,99.841,100.219,100.219,100.945,100.778,100.31,99.796,99.765,99.372,99.221,98.994,99.357,99.04,98.722,98.072,97.679,96.968,96.122,94.625,93.673,93.128,92.569,92.282,92.115,91.828,91.465,90.861,89.954,88.215,85.448,82.999,80.777,79.023,77.164,75.077,73.187,72.764,70.98,68.516,65.659,62.257,59.158,56.315,51.1,47.759,44.901,41.832,39.776,37.478,35.014,34.53,32.882,31.431,30.448,28.498,27.213,25.898,24.295,22.632,20.833,19.805,19.14,18.429,18.323,17.809,17.93,17.583,16.615,16.313,16.297,16.101,16.086,15.859,15.678,15.693,15.39,15.073,14.771,14.544,14.272,14.136,13.833,13.365,12.971,12.669,12.185,11.974,11.838,11.807,11.414,10.976,10.583,10.492,8.617,10.069,9.706,10.099,10.568,11.293,12.14,14.771,14.393,15.965,15.935,17.734,18.369,18.671,18.716,18.429,18.112,18.671,17.643,17.189,17.22,17.235,17.719,17.96,18.837,19.064,19.487,19.639,19.835,19.865,20.092,20.319,20.576,21.105,21.861,22.466,22.692,23.252,23.464,24.098,25.157,26.109,27.636,29.254,30.962,32.595,34.379,35.8,37.251,38.748,33.91,41.575,42.785,43.45,44.795,46.111,39.595,55.665,49.92,51.916,54.668,56.724,59.279,69.423,62.952,64.888,66.294,68.35,70.239,72.19,74.306,77.481,81.896,86.174,89.243,92.962,95.729,98.329,100.325,101.186,101.595,102.32,102.29,102.608,102.819,103.106,103.741,105.389,106.493,108.247,110.907,114.702,119.525,123.758,126.978,130.788,135.082,139.466,144.606,148.37,151.696,155.022,157.85,160.586,163.065,164.623,166.437,168.795,170.322,173.24,175.326,177.639,180.739,183.672,186.045,187.209,189.658,193.257,196.174,197.369,198.623,199.485,203.446,203.25,201.662]},{"iso":"BEL","continent":"Europe","population":11589616,"name":"Belgium","population_density":375.564,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,8,13,23,50,109,169,200,239,267,314,314,559,689,886,1058,1243,1486,1795,2257,2815,3401,3743,4269,4937,6235,7284,9134,10836,11899,12775,13964,15348,16770,18431,19691,20814,22194,23403,24983,26667,28018,29647,30589,31119,33573,34809,36138,37183,38496,39983,40956,41889,42797,44293,45325,46134,46687,47334,47859,48519,49032,49517,49906,50267,50509,50781,51420,52011,52596,53081,53449,53779,53981,54288,54644,54989,55280,55559,55791,55983,56235,56511,56810,57092,57342,57455,57592,57849,58061,58186,58381,58517,58615,58685,58767,58907,59072,59226,59348,59437,59569,59711,59819,59918,60029,60100,60155,60244,60348,60476,60550,60550,60550,60810,60898,61007,61106,61209,61295,61361,61427,61509,61598,61727,61838,62016,62058,62058,62123,62210,62357,62469,62707,62707,62781,62872,63238,63499,63706,63706,64094,64258,64627,64847,65199,65727,66026,66428,66662,67335,68006,68751,69402,69849,70314,70648,71158,72016,72784,73401,74152,74620,75008,75647,76191,77113,77869,78323,78534,78897,79479,80178,80894,81468,81936,82092,82447,83030,83500,83952,84599,85042,85236,85487,85911,86544,87174,87825,88367,88769,89141,89691,90568,91537,92478,93455,94306,94795,95948,97976,99649,100748,102295,103392,105226,106887,108768,110976,112803,114179,115353,117115,118452,121059,124234,127623,130235,132203,134291,137868,143596,148981,156931,162258,165880,173240,181511,191959,202151,213115,222253,230480,240159,253386,270132,287700,305409,321031,333718,347289,368337,392258,412314,429229,441018,447355,452541,468213,479341,488044,494168,500789,503182,507475,515391,520393,525012,531280,535939,537871,540605,545787,550264,553680,556904,558779,559902,561803,564967,567532,570829,574448,576599,577345,579212,582252,584857,587439,589942,591756,592615,594572,597643,600397,600397,603159,608137,609211,611422,615058,618204],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.086,0.086,0.086,0.086,0.086,0.086,0.086,0.086,0.086,0.086,0.086,0.086,0.086,0.086,0.086,0.086,0.086,0.086,0.086,0.086,0.086,0.086,0.086,0.086,0.086,0.086,0.173,0.69,1.122,1.985,4.314,9.405,14.582,17.257,20.622,23.038,27.093,27.093,48.233,59.45,76.448,91.289,107.251,128.218,154.88,194.743,242.89,293.452,322.962,368.347,425.985,537.982,628.494,788.119,934.975,1026.695,1102.28,1204.872,1324.289,1446.985,1590.303,1699.021,1795.918,1914.99,2019.308,2155.637,2300.939,2417.509,2558.066,2639.345,2685.076,2896.817,3003.464,3118.136,3208.303,3321.594,3449.899,3533.853,3614.356,3692.702,3821.783,3910.828,3980.632,4028.347,4084.173,4129.472,4186.42,4230.684,4272.532,4306.096,4337.245,4358.125,4381.595,4436.73,4487.724,4538.2,4580.048,4611.801,4640.275,4657.704,4684.193,4714.91,4744.678,4769.787,4793.86,4813.878,4830.445,4852.188,4876.003,4901.802,4926.134,4947.705,4957.455,4969.276,4991.451,5009.743,5020.529,5037.354,5049.089,5057.545,5063.585,5070.66,5082.74,5096.976,5110.264,5120.791,5128.47,5139.86,5152.112,5161.431,5169.973,5179.55,5185.677,5190.422,5198.101,5207.075,5218.119,5224.504,5224.504,5224.504,5246.938,5254.531,5263.936,5272.478,5281.366,5288.786,5294.481,5300.176,5307.251,5314.93,5326.061,5335.638,5350.997,5354.621,5354.621,5360.229,5367.736,5380.42,5390.084,5410.619,5410.619,5417.004,5424.856,5456.436,5478.956,5496.817,5496.817,5530.295,5544.446,5576.285,5595.267,5625.639,5671.197,5696.996,5731.683,5751.873,5809.942,5867.839,5932.121,5988.292,6026.861,6066.983,6095.802,6139.807,6213.838,6280.105,6333.342,6398.141,6438.522,6472,6527.136,6574.075,6653.629,6718.859,6758.032,6776.238,6807.559,6857.777,6918.089,6979.869,7029.396,7069.777,7083.237,7113.868,7164.172,7204.725,7243.726,7299.552,7337.775,7354.515,7376.172,7412.756,7467.374,7521.733,7577.904,7624.67,7659.356,7691.454,7738.91,7814.582,7898.191,7979.384,8063.684,8137.112,8179.305,8278.79,8453.774,8598.128,8692.954,8826.436,8921.089,9079.334,9222.652,9384.953,9575.468,9733.109,9851.836,9953.134,10105.167,10220.528,10445.471,10719.423,11011.84,11237.214,11407.022,11587.183,11895.821,12390.057,12854.697,13540.656,14000.291,14312.812,14947.864,15661.52,16563.016,17442.424,18388.444,19176.908,19886.768,20721.912,21863.192,23308.106,24823.946,26351.952,27699.882,28794.569,29965.531,31781.64,33845.643,35576.157,37035.653,38052.857,38599.64,39047.109,40399.354,41359.524,42110.455,42638.859,43210.146,43416.624,43787.042,44470.067,44901.66,45300.207,45841.036,46243.033,46409.734,46645.635,47092.76,47479.054,47773.8,48051.98,48213.763,48310.66,48474.686,48747.689,48969.008,49253.487,49565.749,49751.346,49815.714,49976.807,50239.111,50463.881,50686.666,50902.636,51059.155,51133.273,51302.131,51567.11,51804.736,51804.736,52043.053,52472.575,52565.245,52756.019,53069.748,53341.198],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.086,0.518,0.431,0.863,2.33,5.091,5.177,2.675,3.365,2.416,4.055,0,21.14,11.217,16.998,14.841,15.963,20.967,26.662,39.863,48.147,50.563,29.509,45.385,57.638,111.997,90.512,159.626,146.856,91.72,75.585,102.592,119.417,122.696,143.318,108.718,96.897,119.072,104.318,136.329,145.302,116.57,140.557,81.28,45.731,211.741,106.647,114.672,90.167,113.291,128.305,83.954,80.503,78.346,129.081,89.045,69.804,47.715,55.826,45.299,56.948,44.264,41.848,33.565,31.149,20.881,23.469,55.136,50.994,50.476,41.848,31.753,28.474,17.429,26.489,30.717,29.768,25.109,24.073,20.018,16.567,21.744,23.814,25.799,24.332,21.571,9.75,11.821,22.175,18.292,10.786,16.825,11.735,8.456,6.04,7.075,12.08,14.237,13.288,10.527,7.679,11.39,12.252,9.319,8.542,9.578,6.126,4.746,7.679,8.974,11.044,6.385,0,0,22.434,7.593,9.405,8.542,8.887,7.42,5.695,5.695,7.075,7.679,11.131,9.578,15.359,3.624,0,5.608,7.507,12.684,9.664,20.536,0,6.385,7.852,31.58,22.52,17.861,0,33.478,14.151,31.839,18.983,30.372,45.558,25.799,34.686,20.19,58.069,57.897,64.282,56.171,38.569,40.122,28.819,44.005,74.032,66.266,53.237,64.799,40.381,33.478,55.136,46.939,79.554,65.231,39.173,18.206,31.321,50.217,60.313,61.779,49.527,40.381,13.46,30.631,50.304,40.554,39,55.826,38.224,16.739,21.657,36.584,54.618,54.359,56.171,46.766,34.686,32.098,47.456,75.671,83.609,81.193,84.3,73.428,42.193,99.486,174.984,144.353,94.826,133.482,94.654,158.245,143.318,162.3,190.515,157.641,118.727,101.298,152.033,115.362,224.943,273.952,292.417,225.374,169.807,180.161,308.638,494.236,464.64,685.959,459.636,312.521,635.051,713.656,901.497,879.408,946.019,788.464,709.86,835.144,1141.28,1444.914,1515.84,1528.006,1347.931,1094.687,1170.962,1816.108,2064.003,1730.515,1459.496,1017.204,546.783,447.47,1352.245,960.17,750.931,528.404,571.287,206.478,370.418,683.025,431.593,398.546,540.829,401.998,166.701,235.901,447.124,386.294,294.747,278.18,161.783,96.897,164.026,273.003,221.319,284.479,312.262,185.597,64.368,161.092,262.304,224.77,222.786,215.969,156.519,74.118,168.858,264.979,237.627,0,238.317,429.522,92.669,190.774,313.729,271.45],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.086,0.604,1.035,1.898,4.228,9.319,14.496,17.171,20.45,22.348,25.972,25.109,43.919,50.045,61.866,74.032,86.63,105.181,127.788,167.651,194.658,234.004,246.515,277.059,318.734,409.764,473.614,593.377,692.086,733.243,779.319,836.526,898.305,909.004,961.81,910.902,860.943,888.295,917.028,950.765,976.65,970.524,967.763,940.325,889.159,981.828,984.157,962.5,907.365,904.086,891.834,894.508,929.28,795.885,818.319,792.692,772.329,706.753,634.274,595.619,572.064,537.982,450.749,395.269,356.614,329.78,297.423,307.26,301.306,307.518,307.518,305.706,303.031,299.579,302.599,278.18,256.954,231.587,213.812,202.077,190.17,194.485,191.81,186.892,181.456,177.918,163.595,155.398,161.006,157.554,144.526,135.552,122.955,109.84,106.13,101.384,91.289,87.234,89.736,83.438,79.382,82.316,88.528,90.772,87.234,82.575,75.413,69.632,69.632,67.216,66.008,63.074,54.532,44.954,61.262,64.109,65.835,65.403,63.246,64.281,69.976,75.671,60.312,60.398,62.124,63.16,69.632,65.836,60.141,60.054,60.486,65.491,64.024,74.982,59.623,62.384,70.236,96.208,111.221,116.398,106.734,119.676,133.827,159.281,170.412,169.204,192.242,200.18,234.866,221.578,265.496,291.554,336.853,362.652,355.663,369.986,364.119,387.934,403.897,412.266,401.221,409.849,411.661,405.017,431.334,434.268,439.79,438.755,424.691,378.098,369.038,385.777,390.954,405.794,375.767,350.917,325.204,337.629,356.612,346.949,325.636,319.683,308.38,284.738,292.935,298.888,303.202,317.007,334.178,325.118,321.58,336.939,362.738,401.825,430.816,457.65,485.779,512.441,519.948,587.336,714.864,783.546,794.763,847.052,857.406,942.223,1043.348,1106.162,1121.693,1134.981,1158.882,1126.698,1184.077,1141.194,1222.819,1334.471,1436.373,1504.106,1555.186,1634.049,1790.654,2169.528,2409.225,2821.232,2988.451,3075.598,3540.842,4074.337,4667.196,5052.368,5533.747,5636.252,5886.476,6409.099,6915.328,7646.586,8260.929,8909.527,9311.439,9617.662,10078.764,11059.728,11982.451,12268.052,12211.708,11700.906,10899.758,10252.541,10433.824,9577.886,8264.814,7062.703,6174.494,5363.768,5187.403,5422.958,4502.306,3940.682,3730.58,3604.174,3199.588,3229.011,3305.717,3008.986,2872.14,2751.774,2372.728,2067.627,2064.952,2102.054,1876.249,1774.434,1791.949,1699.366,1601.951,1666.146,1764.424,1716.191,1717.658,1649.148,1493.405,1381.926,1486.416,1590.303,1565.626,1340.856,1356.387,1569.94,1506.09,1622.746,1767.617,1774.088],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.012,0.086,0.148,0.271,0.604,1.331,2.071,2.441,2.847,3.131,3.587,3.254,5.547,6.41,8.456,10.095,12.03,14.446,18.255,20.93,26.206,31.001,33.096,37.299,42.538,54.729,61.964,77.89,91.646,100.533,104.848,111.27,112.33,116.927,114.598,109.149,109.889,116.101,116.348,118.764,121.993,118.172,122.721,120.49,110.012,125.359,121.118,116.742,112.971,109.075,115.793,121.254,102.506,98.463,100.521,100.361,94.148,82.636,78.617,73.588,70.531,58.414,51.672,46.495,44.128,39.136,36.017,35.759,36.72,37.953,39.136,39.222,40.307,39.444,35.352,32.455,29.497,27.106,26.009,24.801,24.677,23.999,23.013,22.446,22.335,21.978,20.511,19.833,19.895,19.106,16.961,15.889,14.483,14.299,13.473,11.316,10.428,10.921,10.416,10.243,10.132,10.896,11.636,11.242,10.428,9.898,9.269,8.85,8.32,7.852,8.098,7.79,6.422,5.547,8.074,8.061,8.123,7.766,8.123,9.183,9.997,7.605,7.531,7.285,7.655,7.753,8.887,8.591,7.778,7.568,7.544,7.766,7.778,8.517,8,8.912,9.232,12.671,14.077,15.248,12.314,17.097,18.206,21.633,19.833,20.955,24.911,28.597,28.77,29.632,33.38,38.939,43.783,45.299,47.123,47.9,49.133,47.123,49.428,49.712,49.293,53.04,53.077,53.743,55.333,51.462,53.361,55.074,51.413,48.245,47.937,47.234,49.145,46.606,44.362,44.535,43.857,43.758,43.771,40.948,37.694,38.594,38.286,38.754,37.472,35.512,37.521,39.715,39.765,40.985,43.549,45.04,46.593,49.601,53.78,57.354,62.716,68.251,69.693,77.126,91.313,99.991,101.939,108.965,111.997,128.576,134.837,133.025,139.62,148.594,146.486,147.435,146.547,142.554,151.503,163.422,182.676,197.911,207.698,211.717,239.328,277.798,305.039,361.259,394.725,415.113,480.097,537.957,596.137,655.39,692.541,739.517,796.279,824.864,885.953,963.584,1054.503,1137.644,1217.568,1272.543,1320.517,1416.921,1505.362,1536.03,1526.243,1478.996,1400.724,1297.368,1231.102,1073.412,933.471,800.458,736.756,688.141,677.133,581.53,506.019,455.679,457.454,433.27,427.587,408.37,374.67,368.199,353.371,315.849,281.533,271.561,261.293,236.419,212.851,211.384,216.253,219.655,215.008,214.589,213.06,213.553,204.74,190.984,186.83,188.223,189.332,189.714,191.551,159.724,162.917,201.917,204.567,207.698,214.663,219.495]},{"iso":"BLZ","continent":"North America","population":397621,"name":"Belize","population_density":16.426,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,2,2,2,2,3,3,3,3,4,4,5,7,7,8,9,10,13,14,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,19,19,19,19,20,20,20,20,20,20,21,22,22,22,22,22,22,23,23,23,23,24,24,24,24,24,28,28,30,30,30,30,30,30,30,37,37,37,37,39,39,40,40,40,40,40,42,43,47,48,48,48,48,48,48,48,48,56,57,57,57,86,114,114,146,153,177,177,210,296,356,388,452,475,475,553,605,648,668,686,713,730,760,818,870,964,993,1007,1050,1101,1101,1152,1194,1194,1307,1361,1365,1365,1435,1458,1480,1501,1528,1536,1567,1590,1606,1627,1635,1635,1706,1706,1808,1825,1825,1891,1891,1992,1992,2080,2080,2131,2196,2243,2310,2373,2427,2427,2531,2569,2585,2619,2682,2728,2775,2813,2833,2886,2937,2995,3050,3106,3145,3145,3200,3261,3261,3462,3487,3577,3624,3790,3905,3977,4016,4076,4176,4230,4414,4520,4596,4715,4783,4861,4883,4920,4958,5018,5056,5110,5183,5249,5335,5423,5515,5587,5647,5743,5854,5854,5854,7236,7383,7601,7769,7953,8013,8519,8805,8965,9173,9295,9377,9511,9672,9791],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2.515,2.515,5.03,5.03,5.03,5.03,5.03,7.545,7.545,7.545,7.545,10.06,10.06,12.575,17.605,17.605,20.12,22.635,25.15,32.694,35.209,45.269,45.269,45.269,45.269,45.269,45.269,45.269,45.269,45.269,45.269,45.269,45.269,45.269,45.269,45.269,45.269,45.269,45.269,45.269,45.269,45.269,45.269,45.269,45.269,45.269,45.269,45.269,45.269,45.269,45.269,45.269,45.269,45.269,45.269,45.269,45.269,45.269,45.269,45.269,45.269,45.269,45.269,45.269,45.269,45.269,45.269,45.269,45.269,45.269,45.269,45.269,45.269,45.269,47.784,47.784,47.784,47.784,50.299,50.299,50.299,50.299,50.299,50.299,52.814,55.329,55.329,55.329,55.329,55.329,55.329,57.844,57.844,57.844,57.844,60.359,60.359,60.359,60.359,60.359,70.419,70.419,75.449,75.449,75.449,75.449,75.449,75.449,75.449,93.053,93.053,93.053,93.053,98.083,98.083,100.598,100.598,100.598,100.598,100.598,105.628,108.143,118.203,120.718,120.718,120.718,120.718,120.718,120.718,120.718,120.718,140.838,143.353,143.353,143.353,216.286,286.705,286.705,367.184,384.789,445.148,445.148,528.141,744.427,895.325,975.804,1136.761,1194.605,1194.605,1390.772,1521.549,1629.693,1679.992,1725.261,1793.165,1835.919,1911.368,2057.235,2188.013,2424.419,2497.353,2532.562,2640.706,2768.968,2768.968,2897.231,3002.86,3002.86,3287.05,3422.857,3432.917,3432.917,3608.964,3666.808,3722.137,3774.952,3842.855,3862.975,3940.939,3998.783,4039.022,4091.836,4111.956,4111.956,4290.518,4290.518,4547.044,4589.798,4589.798,4755.785,4755.785,5009.796,5009.796,5231.112,5231.112,5359.375,5522.847,5641.05,5809.552,5967.995,6103.802,6103.802,6365.358,6460.926,6501.166,6586.674,6745.117,6860.805,6979.008,7074.576,7124.875,7258.168,7386.431,7532.298,7670.621,7811.459,7909.542,7909.542,8047.865,8201.277,8201.277,8706.784,8769.658,8996.004,9114.207,9531.69,9820.91,10001.987,10100.07,10250.968,10502.463,10638.271,11101.023,11367.609,11558.746,11858.026,12029.043,12225.209,12280.539,12373.592,12469.16,12620.058,12715.626,12851.434,13035.026,13201.013,13417.299,13638.616,13869.992,14051.069,14201.966,14443.402,14722.562,14722.562,14722.562,18198.234,18567.933,19116.194,19538.706,20001.459,20152.356,21424.925,22144.203,22546.596,23069.707,23376.532,23582.758,23919.763,24324.671,24623.951],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2.515,0,0,0,0,2.515,0,0,0,2.515,0,2.515,5.03,0,2.515,2.515,2.515,7.545,2.515,10.06,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2.515,0,0,0,2.515,0,0,0,0,0,2.515,2.515,0,0,0,0,0,2.515,0,0,0,2.515,0,0,0,0,10.06,0,5.03,0,0,0,0,0,0,17.605,0,0,0,5.03,0,2.515,0,0,0,0,5.03,2.515,10.06,2.515,0,0,0,0,0,0,0,20.12,2.515,0,0,72.934,70.419,0,80.479,17.605,60.359,0,82.994,216.286,150.897,80.479,160.957,57.844,0,196.167,130.778,108.143,50.299,45.269,67.904,42.754,75.449,145.868,130.778,236.406,72.934,35.209,108.143,128.263,0,128.263,105.628,0,284.19,135.808,10.06,0,176.047,57.844,55.329,52.814,67.904,20.12,77.964,57.844,40.239,52.814,20.12,0,178.562,0,256.526,42.754,0,165.987,0,254.011,0,221.316,0,128.263,163.472,118.203,168.502,158.442,135.808,0,261.556,95.568,40.239,85.509,158.442,115.688,118.203,95.568,50.299,133.293,128.263,145.868,138.323,140.838,98.083,0,138.323,153.412,0,505.506,62.874,226.346,118.203,417.483,289.22,181.077,98.083,150.897,251.496,135.808,462.752,266.586,191.137,299.28,171.017,196.167,55.329,93.053,95.568,150.897,95.568,135.808,183.592,165.987,216.286,221.316,231.376,181.077,150.897,241.436,279.16,0,0,3475.672,369.699,548.261,422.513,462.752,150.897,1272.569,719.278,402.393,523.111,306.825,206.227,337.004,404.908,299.28],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2.515,2.515,2.515,2.515,2.515,5.03,5.03,5.03,2.515,5.03,5.03,7.545,12.575,10.06,12.575,15.09,17.605,22.635,25.15,32.695,27.665,27.665,25.15,22.635,20.12,12.575,10.06,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2.515,2.515,2.515,2.515,5.03,5.03,5.03,5.03,2.515,2.515,5.03,7.545,5.03,5.03,5.03,5.03,5.03,7.545,5.03,2.515,2.515,5.03,5.03,5.03,5.03,2.515,12.575,12.575,17.605,15.09,15.09,15.09,15.09,15.09,5.03,22.635,17.605,17.605,17.605,22.635,22.635,25.15,25.15,7.545,7.545,7.545,12.575,10.06,20.12,20.12,20.12,20.12,20.12,20.12,15.09,12.575,2.515,20.12,22.635,22.635,22.635,95.569,165.988,165.988,246.467,243.952,301.796,301.796,384.79,528.142,608.62,689.099,769.577,809.816,749.457,945.624,993.408,885.265,784.667,749.457,656.404,641.314,716.763,666.464,666.464,794.727,817.362,807.302,847.541,933.05,857.601,839.996,814.846,578.44,789.696,890.295,792.212,663.949,839.996,769.577,719.278,772.092,555.806,440.118,508.022,565.866,430.058,425.028,389.819,337.005,447.663,427.543,606.105,591.015,550.776,663.949,643.829,897.84,719.278,940.594,684.068,769.577,933.049,885.265,1053.767,958.198,1094.006,872.69,1134.246,1101.551,978.318,945.624,935.564,892.81,875.205,970.773,759.516,797.241,885.265,945.624,925.505,950.655,930.535,834.967,922.991,943.11,814.847,1174.485,1099.036,1184.544,1204.664,1622.147,1773.044,1800.709,1898.792,1544.183,1732.805,1642.267,1986.816,1835.919,1737.836,1856.039,1928.973,1974.243,1778.076,1735.321,1368.137,1252.448,1156.879,993.407,1005.982,975.802,1136.759,1265.022,1400.83,1431.01,1486.339,1591.967,1687.535,1521.548,1305.262,4559.618,4697.941,5065.125,5336.741,5558.057,5429.794,6702.363,7421.641,4348.362,4501.774,4260.338,4044.052,3918.304,4172.315,3199.026],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.359,0.719,0.719,0.359,0.359,0.719,0.719,1.078,1.437,1.437,1.796,2.156,2.156,3.234,3.234,3.952,3.952,3.593,3.234,2.874,1.796,1.437,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.359,0.359,0.359,0.359,0.719,0.719,0.719,0.359,0.359,0.359,0.719,0.719,0.719,0.719,0.719,0.719,0.719,0.719,0.359,0.359,0.359,0.719,0.719,0.719,0.359,0.359,1.796,1.796,2.156,2.156,2.156,2.156,2.156,0.719,0.719,2.515,2.515,2.515,2.515,3.234,3.234,3.593,1.078,1.078,1.078,1.078,1.078,1.437,2.515,2.874,2.874,2.874,2.874,2.156,1.796,0.359,0,2.874,3.234,3.234,3.234,13.653,23.712,23.712,32.335,34.491,43.114,43.114,44.551,65.389,86.946,86.946,107.425,107.065,107.065,123.233,111.017,104.91,100.598,84.071,85.509,91.616,74.371,76.527,79.76,106.347,110.299,105.628,114.969,122.514,101.676,101.317,82.634,72.215,107.784,111.736,94.85,94.85,101.676,94.85,102.754,69.7,60,61.437,72.574,55.688,53.173,52.814,48.143,38.443,61.078,49.94,78.323,78.682,71.137,91.976,91.976,102.754,102.754,97.724,91.616,109.94,109.58,126.466,114.251,136.886,124.67,124.67,143.712,134.011,122.874,111.017,111.017,108.143,125.029,101.317,94.85,108.143,114.251,112.455,115.688,118.922,119.281,112.095,112.814,116.407,95.568,148.023,136.886,155.209,172.095,211.975,231.376,257.244,199.041,211.616,215.209,217.723,224.191,220.957,222.394,251.136,254.011,246.107,234.61,181.796,157.364,151.616,122.514,117.484,115.688,131.496,149.101,167.065,178.562,190.778,192.933,201.197,217.364,186.466,154.85,618.32,645.266,702.032,727.901,754.128,775.685,957.48,563.71,568.38,564.788,548.261,511.614,538.201,414.249,354.25]},{"iso":"BEN","continent":"Africa","population":12123198,"name":"Benin","population_density":99.11,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,2,2,2,2,5,6,6,6,6,6,6,6,9,13,13,16,16,22,26,26,26,26,35,35,35,35,35,35,35,35,35,35,54,54,54,54,54,54,64,64,64,64,64,90,90,90,96,96,96,140,242,284,319,319,327,327,339,339,339,339,339,130,130,135,135,135,191,191,208,210,210,224,224,232,243,244,244,261,261,261,261,288,305,305,305,388,412,442,483,532,572,597,650,650,765,807,850,902,1017,1053,1124,1149,1187,1199,1199,1199,1199,1199,1199,1199,1199,1199,1285,1285,1378,1378,1378,1378,1378,1463,1602,1602,1602,1602,1602,1690,1694,1694,1694,1770,1770,1770,1805,1805,1805,1805,1805,1805,1914,1936,1936,1936,1936,1936,1936,2001,2014,2014,2014,2063,2063,2063,2063,2095,2095,2095,2115,2115,2115,2115,2145,2145,2145,2145,2145,2145,2145,2194,2194,2194,2213,2213,2213,2213,2242,2242,2242,2242,2267,2267,2267,2280,2280,2280,2280,2280,2294,2294,2325,2325,2325,2325,2340,2340,2340,2357,2357,2357,2357,2357,2357,2357,2411,2411,2411,2411,2411,2411,2411,2478,2496,2496,2496,2496,2496,2496,2557,2557,2557,2557,2557,2557,2557,2643,2643,2643,2643,2683,2683,2683,2745,2745,2745,2745,2745,2781,2781,2844,2844,2844,2844,2844,2884,2884,2916,2916,2916,2916,2916,2916,2916,2974,2974,2974,2974,2974,3015,3015,3055,3055,3055,3055,3055,3073,3073,3090,3090,3090,3090,3090,3090,3090,3152,3152],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.082,0.082,0.165,0.165,0.165,0.165,0.165,0.412,0.495,0.495,0.495,0.495,0.495,0.495,0.495,0.742,1.072,1.072,1.32,1.32,1.815,2.145,2.145,2.145,2.145,2.887,2.887,2.887,2.887,2.887,2.887,2.887,2.887,2.887,2.887,4.454,4.454,4.454,4.454,4.454,4.454,5.279,5.279,5.279,5.279,5.279,7.424,7.424,7.424,7.919,7.919,7.919,11.548,19.962,23.426,26.313,26.313,26.973,26.973,27.963,27.963,27.963,27.963,27.963,10.723,10.723,11.136,11.136,11.136,15.755,15.755,17.157,17.322,17.322,18.477,18.477,19.137,20.044,20.127,20.127,21.529,21.529,21.529,21.529,23.756,25.158,25.158,25.158,32.005,33.984,36.459,39.841,43.883,47.182,49.244,53.616,53.616,63.102,66.567,70.114,74.403,83.889,86.858,92.715,94.777,97.911,98.901,98.901,98.901,98.901,98.901,98.901,98.901,98.901,98.901,105.995,105.995,113.666,113.666,113.666,113.666,113.666,120.678,132.143,132.143,132.143,132.143,132.143,139.402,139.732,139.732,139.732,146.001,146.001,146.001,148.888,148.888,148.888,148.888,148.888,148.888,157.879,159.694,159.694,159.694,159.694,159.694,159.694,165.055,166.128,166.128,166.128,170.17,170.17,170.17,170.17,172.809,172.809,172.809,174.459,174.459,174.459,174.459,176.934,176.934,176.934,176.934,176.934,176.934,176.934,180.975,180.975,180.975,182.543,182.543,182.543,182.543,184.935,184.935,184.935,184.935,186.997,186.997,186.997,188.069,188.069,188.069,188.069,188.069,189.224,189.224,191.781,191.781,191.781,191.781,193.018,193.018,193.018,194.421,194.421,194.421,194.421,194.421,194.421,194.421,198.875,198.875,198.875,198.875,198.875,198.875,198.875,204.402,205.886,205.886,205.886,205.886,205.886,205.886,210.918,210.918,210.918,210.918,210.918,210.918,210.918,218.012,218.012,218.012,218.012,221.311,221.311,221.311,226.425,226.425,226.425,226.425,226.425,229.395,229.395,234.592,234.592,234.592,234.592,234.592,237.891,237.891,240.531,240.531,240.531,240.531,240.531,240.531,240.531,245.315,245.315,245.315,245.315,245.315,248.697,248.697,251.996,251.996,251.996,251.996,251.996,253.481,253.481,254.883,254.883,254.883,254.883,254.883,254.883,254.883,259.997,259.997],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.082,0,0,0,0,0.247,0.082,0,0,0,0,0,0,0.247,0.33,0,0.247,0,0.495,0.33,0,0,0,0.742,0,0,0,0,0,0,0,0,0,1.567,0,0,0,0,0,0.825,0,0,0,0,2.145,0,0,0.495,0,0,3.629,8.414,3.464,2.887,0,0.66,0,0.99,0,0,0,0,-17.24,0,0.412,0,0,4.619,0,1.402,0.165,0,1.155,0,0.66,0.907,0.082,0,1.402,0,0,0,2.227,1.402,0,0,6.846,1.98,2.475,3.382,4.042,3.299,2.062,4.372,0,9.486,3.464,3.547,4.289,9.486,2.97,5.857,2.062,3.134,0.99,0,0,0,0,0,0,0,0,7.094,0,7.671,0,0,0,0,7.011,11.466,0,0,0,0,7.259,0.33,0,0,6.269,0,0,2.887,0,0,0,0,0,8.991,1.815,0,0,0,0,0,5.362,1.072,0,0,4.042,0,0,0,2.64,0,0,1.65,0,0,0,2.475,0,0,0,0,0,0,4.042,0,0,1.567,0,0,0,2.392,0,0,0,2.062,0,0,1.072,0,0,0,0,1.155,0,2.557,0,0,0,1.237,0,0,1.402,0,0,0,0,0,0,4.454,0,0,0,0,0,0,5.527,1.485,0,0,0,0,0,5.032,0,0,0,0,0,0,7.094,0,0,0,3.299,0,0,5.114,0,0,0,0,2.97,0,5.197,0,0,0,0,3.299,0,2.64,0,0,0,0,0,0,4.784,0,0,0,0,3.382,0,3.299,0,0,0,0,1.485,0,1.402,0,0,0,0,0,0,5.114,0],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.082,0.082,0.082,0.082,0.082,0.329,0.411,0.411,0.329,0.329,0.329,0.329,0.329,0.329,0.577,0.577,0.824,0.824,1.319,1.649,1.649,1.402,1.072,1.814,1.567,1.567,1.072,0.742,0.742,0.742,0.742,0,0,1.567,1.567,1.567,1.567,1.567,1.567,2.392,2.392,0.825,0.825,0.825,2.97,2.97,2.97,2.64,2.64,2.64,6.269,14.683,16.002,18.889,18.889,19.054,19.054,20.044,16.415,8.001,4.537,1.65,-15.59,-16.25,-15.838,-16.828,-16.828,-12.209,-12.209,-10.807,6.598,6.598,7.341,7.341,8.001,4.289,4.371,2.969,4.206,4.206,3.051,3.051,4.618,5.113,5.031,5.031,10.475,12.455,14.93,18.312,20.127,22.024,24.086,28.458,21.612,29.118,30.107,30.272,30.519,36.706,37.614,39.099,41.161,34.809,32.335,28.788,24.499,15.013,12.043,6.186,4.124,0.99,0,7.094,7.094,14.765,14.765,14.765,14.765,14.765,21.776,26.148,26.148,18.477,18.477,18.477,25.736,26.066,19.055,7.589,13.858,13.858,13.858,16.745,9.486,9.156,9.156,9.156,2.887,11.878,13.693,10.806,10.806,10.806,10.806,10.806,16.168,8.249,6.434,6.434,10.476,10.476,10.476,10.476,7.754,6.682,6.682,8.332,4.29,4.29,4.29,6.765,4.125,4.125,4.125,2.475,2.475,2.475,6.517,4.042,4.042,5.609,5.609,5.609,5.609,8.001,3.959,3.959,3.959,4.454,4.454,4.454,5.526,3.134,3.134,3.134,3.134,2.227,2.227,4.784,3.712,3.712,3.712,4.949,4.949,3.794,5.196,2.639,2.639,2.639,2.639,1.402,1.402,5.856,4.454,4.454,4.454,4.454,4.454,4.454,9.981,7.012,7.012,7.012,7.012,7.012,7.012,12.044,6.517,5.032,5.032,5.032,5.032,5.032,12.126,7.094,7.094,7.094,10.393,10.393,10.393,15.507,8.413,8.413,8.413,8.413,8.084,8.084,13.281,8.167,8.167,8.167,8.167,11.466,8.496,11.136,5.939,5.939,5.939,5.939,5.939,2.64,7.424,4.784,4.784,4.784,4.784,8.166,8.166,11.465,6.681,6.681,6.681,6.681,8.166,4.784,6.186,2.887,2.887,2.887,2.887,2.887,1.402,6.516,5.114],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.012,0.047,0.059,0.047,0.047,0.047,0.047,0.047,0.012,0.035,0.082,0.082,0.118,0.118,0.189,0.236,0.2,0.153,0.153,0.224,0.224,0.153,0.106,0.106,0.106,0.106,0,0,0,0.224,0.224,0.224,0.224,0.224,0.224,0.342,0.118,0.118,0.118,0.118,0.424,0.424,0.306,0.377,0.377,0.377,0.896,1.791,2.286,2.698,2.628,2.722,2.722,2.345,1.143,0.648,0.236,0.236,-2.321,-2.321,-2.404,-2.404,-2.404,-1.744,-1.744,0.919,0.943,0.884,1.049,1.049,0.483,0.613,0.424,0.401,0.601,0.436,0.436,0.342,0.53,0.719,0.719,0.518,1.497,1.779,2.133,2.298,2.675,3.146,3.441,3.087,2.805,3.806,3.818,3.747,3.889,4.949,4.749,5.586,4.525,4.478,4.113,3.5,2.145,1.72,0.884,0.589,0.141,0,0,1.013,1.013,2.109,2.109,2.109,2.109,2.109,2.098,3.735,2.64,2.64,2.64,2.64,3.677,2.722,1.084,1.084,1.98,1.98,1.98,1.355,1.308,1.308,1.308,0.412,0.412,1.697,1.544,1.544,1.544,1.544,1.544,1.544,1.025,0.919,0.919,0.919,1.497,1.497,1.497,0.731,0.954,0.954,0.954,0.613,0.613,0.613,0.613,0.589,0.589,0.589,0.354,0.354,0.354,0.354,0.577,0.577,0.577,0.801,0.801,0.801,0.801,0.566,0.566,0.566,0.342,0.636,0.636,0.636,0.448,0.448,0.448,0.448,0.153,0.318,0.318,0.53,0.53,0.53,0.53,0.707,0.542,0.542,0.377,0.377,0.377,0.377,0.2,0.2,0.2,0.636,0.636,0.636,0.636,0.636,0.636,0.636,0.79,1.002,1.002,1.002,1.002,1.002,1.002,0.931,0.719,0.719,0.719,0.719,0.719,0.719,1.013,1.013,1.013,1.013,1.485,1.485,1.485,1.202,1.202,1.202,1.202,0.731,1.155,1.155,1.167,1.167,1.167,1.167,1.167,1.214,1.214,0.848,0.848,0.848,0.848,0.848,0.377,0.377,0.683,0.683,0.683,0.683,0.683,1.167,1.167,0.954,0.954,0.954,0.954,0.954,0.683,0.683,0.412,0.412,0.412,0.412,0.412,0.2,0.2,0.731,0.731]},{"iso":"BTN","continent":"Asia","population":771612,"name":"Bhutan","population_density":21.188,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,9,11,15,20,21,21,21,21,21,21,21,21,24,24,27,27,28,31,31,33,43,43,47,47,47,48,48,59,59,59,59,62,62,66,66,67,67,67,67,68,68,68,68,70,70,70,70,75,76,77,77,77,77,77,78,80,80,80,80,80,80,82,84,84,84,84,86,87,87,89,90,92,92,92,92,92,95,99,99,99,101,101,102,102,103,105,105,108,108,108,110,110,113,113,128,133,133,138,141,147,147,153,154,155,155,156,173,173,184,195,195,224,225,227,227,227,228,228,228,233,234,234,238,241,244,245,245,246,246,246,252,259,261,261,261,261,263,263,271,273,280,281,282,282,283,283,298,299,300,304,304,306,306,309,309,313,316,316,316,325,327,330,331,332,336,336,340,342,342,345,346,346,348,349,354,356,358,358,358,358,359,359,364,364,364,369,369,375,375,377,378,378,378,378,379,382,386,386,386,389,395,396,396,410,414,415,418,424,426,430,432,433,433,434,436,437,438,438,439,440,440],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.296,1.296,1.296,1.296,1.296,1.296,1.296,1.296,1.296,1.296,1.296,1.296,1.296,1.296,2.592,2.592,2.592,2.592,2.592,2.592,2.592,3.888,3.888,5.184,5.184,5.184,5.184,6.48,6.48,6.48,6.48,6.48,6.48,6.48,6.48,6.48,6.48,6.48,6.48,6.48,6.48,6.48,6.48,6.48,6.48,6.48,7.776,7.776,9.072,9.072,9.072,9.072,9.072,9.072,9.072,9.072,9.072,9.072,9.072,9.072,9.072,9.072,9.072,9.072,9.072,9.072,11.664,14.256,19.44,25.92,27.216,27.216,27.216,27.216,27.216,27.216,27.216,27.216,31.104,31.104,34.992,34.992,36.288,40.176,40.176,42.768,55.727,55.727,60.911,60.911,60.911,62.207,62.207,76.463,76.463,76.463,76.463,80.351,80.351,85.535,85.535,86.831,86.831,86.831,86.831,88.127,88.127,88.127,88.127,90.719,90.719,90.719,90.719,97.199,98.495,99.791,99.791,99.791,99.791,99.791,101.087,103.679,103.679,103.679,103.679,103.679,103.679,106.271,108.863,108.863,108.863,108.863,111.455,112.751,112.751,115.343,116.639,119.231,119.231,119.231,119.231,119.231,123.119,128.303,128.303,128.303,130.895,130.895,132.191,132.191,133.487,136.079,136.079,139.967,139.967,139.967,142.559,142.559,146.447,146.447,165.886,172.366,172.366,178.846,182.734,190.51,190.51,198.286,199.582,200.878,200.878,202.174,224.206,224.206,238.462,252.718,252.718,290.301,291.597,294.189,294.189,294.189,295.485,295.485,295.485,301.965,303.261,303.261,308.445,312.333,316.221,317.517,317.517,318.813,318.813,318.813,326.589,335.661,338.253,338.253,338.253,338.253,340.845,340.845,351.213,353.805,362.877,364.173,365.469,365.469,366.765,366.765,386.204,387.5,388.796,393.98,393.98,396.572,396.572,400.46,400.46,405.644,409.532,409.532,409.532,421.196,423.788,427.676,428.972,430.268,435.452,435.452,440.636,443.228,443.228,447.116,448.412,448.412,451.004,452.3,458.78,461.372,463.964,463.964,463.964,463.964,465.26,465.26,471.74,471.74,471.74,478.22,478.22,485.996,485.996,488.588,489.884,489.884,489.884,489.884,491.18,495.067,500.251,500.251,500.251,504.139,511.915,513.211,513.211,531.355,536.539,537.835,541.723,549.499,552.091,557.275,559.867,561.163,561.163,562.459,565.051,566.347,567.643,567.643,568.939,570.235,570.235],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.296,0,0,0,0,0,0,1.296,0,1.296,0,0,0,1.296,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.296,0,1.296,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2.592,2.592,5.184,6.48,1.296,0,0,0,0,0,0,0,3.888,0,3.888,0,1.296,3.888,0,2.592,12.96,0,5.184,0,0,1.296,0,14.256,0,0,0,3.888,0,5.184,0,1.296,0,0,0,1.296,0,0,0,2.592,0,0,0,6.48,1.296,1.296,0,0,0,0,1.296,2.592,0,0,0,0,0,2.592,2.592,0,0,0,2.592,1.296,0,2.592,1.296,2.592,0,0,0,0,3.888,5.184,0,0,2.592,0,1.296,0,1.296,2.592,0,3.888,0,0,2.592,0,3.888,0,19.44,6.48,0,6.48,3.888,7.776,0,7.776,1.296,1.296,0,1.296,22.032,0,14.256,14.256,0,37.584,1.296,2.592,0,0,1.296,0,0,6.48,1.296,0,5.184,3.888,3.888,1.296,0,1.296,0,0,7.776,9.072,2.592,0,0,0,2.592,0,10.368,2.592,9.072,1.296,1.296,0,1.296,0,19.44,1.296,1.296,5.184,0,2.592,0,3.888,0,5.184,3.888,0,0,11.664,2.592,3.888,1.296,1.296,5.184,0,5.184,2.592,0,3.888,1.296,0,2.592,1.296,6.48,2.592,2.592,0,0,0,1.296,0,6.48,0,0,6.48,0,7.776,0,2.592,1.296,0,0,0,1.296,3.888,5.184,0,0,3.888,7.776,1.296,0,18.144,5.184,1.296,3.888,7.776,2.592,5.184,2.592,1.296,0,1.296,2.592,1.296,1.296,0,1.296,1.296,0],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.296,1.296,1.296,1.296,1.296,1.296,1.296,2.592,1.296,2.592,2.592,2.592,2.592,3.888,3.888,2.592,2.592,1.296,1.296,1.296,1.296,0,0,0,0,0,0,0,0,0,0,0,1.296,1.296,2.592,2.592,2.592,2.592,2.592,2.592,1.296,1.296,0,0,0,0,0,0,0,0,0,0,2.592,5.184,10.368,16.848,18.144,18.144,18.144,18.144,15.552,12.96,7.776,1.296,3.888,3.888,7.776,7.776,9.072,12.96,12.96,15.552,24.624,24.624,25.92,25.92,24.624,22.032,22.032,33.696,20.736,20.736,15.552,19.44,19.44,23.328,23.328,10.368,10.368,10.368,10.368,7.776,7.776,2.592,2.592,3.888,3.888,3.888,3.888,9.072,10.368,11.664,11.664,9.072,9.072,9.072,10.368,6.48,5.184,3.888,3.888,3.888,3.888,6.48,7.776,5.184,5.184,5.184,7.776,9.072,9.072,9.072,7.776,10.368,10.368,10.368,7.776,6.48,10.368,12.96,11.664,9.072,11.664,11.664,12.96,12.96,10.368,7.776,7.776,11.664,9.072,9.072,10.368,10.368,12.96,10.368,29.808,32.4,32.4,38.88,40.176,47.952,44.064,51.84,33.696,28.512,28.512,23.328,41.472,33.696,47.952,54.432,53.136,89.424,90.72,92.016,69.984,69.984,57.024,42.768,42.768,11.664,11.664,9.072,14.256,18.144,20.736,22.032,22.032,16.848,15.552,15.552,18.144,23.328,22.032,20.736,20.736,19.44,22.032,22.032,24.624,18.144,24.624,25.92,27.216,27.216,25.92,25.92,34.992,33.696,25.92,29.808,28.512,31.104,29.808,33.696,14.256,18.144,20.736,15.552,15.552,24.624,27.216,27.216,28.512,24.624,25.92,25.92,31.104,22.032,19.44,19.44,19.44,18.144,15.552,16.848,18.144,18.144,20.736,16.848,15.552,15.552,14.256,12.96,12.96,10.368,7.776,14.256,14.256,22.032,20.736,23.328,18.144,18.144,18.144,11.664,12.96,9.072,14.256,11.664,10.368,14.256,22.032,23.328,22.032,36.288,36.288,37.584,41.472,45.36,40.176,44.064,46.656,29.808,24.624,24.624,23.328,16.848,15.552,10.368,9.072,9.072,9.072],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.185,0.185,0.185,0.185,0.185,0.185,0.185,0.185,0.185,0.37,0.37,0.37,0.37,0.555,0.37,0.37,0.185,0.185,0.185,0.185,0,0,0,0,0,0,0,0,0,0,0,0,0.185,0.185,0.37,0.37,0.37,0.37,0.37,0.185,0.185,0,0,0,0,0,0,0,0,0,0,0,0.37,0.741,1.481,2.407,2.592,2.592,2.592,2.222,1.851,1.111,0.185,0,0.555,0.555,1.111,1.111,1.296,1.851,1.851,1.666,3.518,2.962,3.703,3.518,2.962,3.147,2.777,2.962,2.962,2.222,2.222,2.777,2.592,3.333,1.296,1.481,1.481,1.481,0.926,1.111,0.37,0.37,0.185,0.555,0.555,0.555,0.37,1.296,1.481,1.666,1.296,1.296,1.296,1.296,0.555,0.741,0.555,0.555,0.555,0.555,0.555,0.741,0.741,0.741,0.741,0.741,1.111,1.296,0.926,0.926,1.111,1.481,1.481,1.111,0.926,0.926,1.111,1.666,1.296,1.296,1.666,1.666,1.851,1.296,0.741,1.111,1.111,1.296,1.296,1.111,1.481,1.296,1.481,1.481,3.703,4.629,4.629,5.184,5.739,6.295,6.295,4.629,3.888,4.073,3.147,2.777,4.814,4.814,5.739,7.591,7.406,12.775,12.775,9.998,9.998,7.961,6.11,6.11,0.741,1.481,1.296,1.296,2.037,2.407,2.962,3.147,2.222,2.222,2.222,1.481,2.037,2.777,2.962,2.962,2.777,2.777,3.147,2.037,2.222,2.222,3.518,3.703,3.888,3.518,3.703,2.222,4.629,3.518,3.518,4.073,4.073,4.258,4.258,2.037,1.851,2.407,2.222,2.222,1.851,3.518,3.333,3.888,3.333,2.962,3.703,3.703,2.777,2.777,2.222,2.592,2.592,1.851,2.222,1.666,2.222,2.592,2.407,2.222,2.222,1.851,1.851,0.926,1.481,1.111,1.111,2.037,2.037,2.962,2.962,2.407,2.592,2.592,1.666,1.666,0.741,1.296,1.666,1.481,1.481,2.037,3.147,3.147,2.592,4.443,5.184,5.369,5.369,5.369,5.554,6.295,4.073,3.518,3.333,2.962,2.222,2.037,1.481,1.111,1.111,1.296,1.111]},{"iso":"BOL","continent":"South America","population":11673029,"name":"Bolivia","population_density":10.202,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,3,10,10,11,11,12,12,15,19,24,27,29,32,43,61,74,81,97,107,115,123,132,139,157,183,194,210,264,268,275,300,330,354,397,441,465,493,520,564,598,609,703,807,866,950,1014,1053,1110,1167,1229,1470,1594,1681,1802,1886,2081,2266,2437,2556,2831,2964,3148,3372,3577,3826,4088,4263,4481,4919,5187,5579,5915,6263,6660,7136,7768,8387,8731,9592,9982,10531,10991,11638,12245,12728,13358,13643,13949,14644,15281,16165,16929,17842,18459,19073,19883,20685,21499,22476,23512,24388,25493,26389,27487,28503,29423,30676,31524,32125,33219,34227,35528,36818,38071,39297,40509,41545,42984,44113,45565,47200,48187,49250,50867,52218,54156,56102,58138,59582,60991,62357,64135,65252,66456,68281,69429,71181,72327,73534,75234,76789,78793,80153,81846,83361,85141,86423,87891,89055,89999,91635,93328,95071,96459,97950,99146,100344,101223,103019,105050,106065,107435,108427,109149,110148,110999,112094,113129,114409,115354,115968,116598,117267,117928,118781,119580,120241,120769,121604,122308,123345,124205,125172,125982,126791,127619,128286,128872,129419,130051,130470,130676,130986,131453,131990,132618,133222,133592,133901,134223,134641,135311,135716,136219,136569,136868,137107,137468,137706,137969,138226,138463,138574,138695,138922,139141,139319,139562,139710,139771,139890,140037,140228,140445,140612,140779,140853,140952,141124,141321,141484,141631,141757,141833,141867,141936,142062,142201,142343,142427,142475,142561,142664,142776,142889,143069,143181,143246,143371,143473,143569,143756,143854,143922,143978,144034,144147,144276,144390,144494,144592,144622,144708,144810,144994,145186,145325,145492,145560,145657,145846,146060,146385,146697,147030,147150,147345,147716,148214,148665],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.171,0.171,0.257,0.857,0.857,0.942,0.942,1.028,1.028,1.285,1.628,2.056,2.313,2.484,2.741,3.684,5.226,6.339,6.939,8.31,9.166,9.852,10.537,11.308,11.908,13.45,15.677,16.62,17.99,22.616,22.959,23.559,25.7,28.27,30.326,34.01,37.779,39.835,42.234,44.547,48.317,51.229,52.172,60.224,69.134,74.188,81.384,86.867,90.208,95.091,99.974,105.285,125.931,136.554,144.007,154.373,161.569,178.274,194.123,208.772,218.966,242.525,253.919,269.682,288.871,306.433,327.764,350.209,365.201,383.876,421.399,444.358,477.939,506.724,536.536,570.546,611.324,665.466,718.494,747.964,821.723,855.134,902.165,941.572,996.999,1048.999,1090.377,1144.347,1168.763,1194.977,1254.516,1309.086,1384.816,1450.266,1528.481,1581.338,1633.938,1703.328,1772.034,1841.767,1925.464,2014.216,2089.261,2183.923,2260.681,2354.744,2441.783,2520.597,2627.938,2700.584,2752.071,2845.791,2932.144,3043.597,3154.109,3261.45,3366.478,3470.307,3559.059,3682.335,3779.053,3903.443,4043.509,4128.063,4219.128,4357.652,4473.389,4639.413,4806.122,4980.541,5104.245,5224.951,5341.973,5494.289,5589.98,5693.124,5849.467,5947.814,6097.903,6196.078,6299.479,6445.114,6578.327,6750.005,6866.513,7011.548,7141.334,7293.822,7403.648,7529.408,7629.125,7709.995,7850.148,7995.183,8144.501,8263.408,8391.138,8493.597,8596.226,8671.528,8825.387,8999.378,9086.331,9203.695,9288.677,9350.529,9436.111,9509.014,9602.82,9691.486,9801.141,9882.097,9934.696,9988.667,10045.979,10102.605,10175.679,10244.128,10300.754,10345.986,10417.519,10477.829,10566.666,10640.34,10723.181,10792.571,10861.877,10932.809,10989.95,11040.151,11087.011,11141.153,11177.048,11194.695,11221.252,11261.259,11307.262,11361.061,11412.805,11444.502,11470.973,11498.558,11534.367,11591.764,11626.46,11669.55,11699.534,11725.149,11745.623,11776.549,11796.938,11819.469,11841.485,11861.788,11871.298,11881.663,11901.11,11919.871,11935.12,11955.937,11968.616,11973.842,11984.036,11996.629,12012.992,12031.582,12045.888,12060.194,12066.534,12075.015,12089.75,12106.626,12120.59,12133.183,12143.977,12150.488,12153.401,12159.312,12170.106,12182.014,12194.179,12201.375,12205.487,12212.854,12221.678,12231.273,12240.953,12256.373,12265.968,12271.536,12282.245,12290.983,12299.207,12315.227,12323.622,12329.448,12334.245,12339.042,12348.723,12359.774,12369.54,12378.45,12386.845,12389.415,12396.782,12405.52,12421.283,12437.731,12449.639,12463.946,12469.771,12478.081,12494.272,12512.605,12540.447,12567.175,12595.702,12605.983,12622.688,12654.47,12697.133,12735.769],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.086,0.6,0,0.086,0,0.086,0,0.257,0.343,0.428,0.257,0.171,0.257,0.942,1.542,1.114,0.6,1.371,0.857,0.685,0.685,0.771,0.6,1.542,2.227,0.942,1.371,4.626,0.343,0.6,2.142,2.57,2.056,3.684,3.769,2.056,2.399,2.313,3.769,2.913,0.942,8.053,8.909,5.054,7.196,5.483,3.341,4.883,4.883,5.311,20.646,10.623,7.453,10.366,7.196,16.705,15.848,14.649,10.194,23.559,11.394,15.763,19.19,17.562,21.331,22.445,14.992,18.676,37.522,22.959,33.582,28.784,29.812,34.01,40.778,54.142,53.028,29.47,73.76,33.41,47.031,39.407,55.427,52,41.377,53.971,24.415,26.214,59.539,54.57,75.73,65.45,78.214,52.857,52.6,69.391,68.705,69.733,83.697,88.752,75.045,94.663,76.758,94.063,87.038,78.814,107.341,72.646,51.486,93.72,86.353,111.454,110.511,107.341,105.028,103.829,88.752,123.276,96.719,124.389,140.066,84.554,91.065,138.524,115.737,166.024,166.709,174.419,123.704,120.706,117.022,152.317,95.691,103.144,156.343,98.346,150.09,98.175,103.401,145.635,133.213,171.678,116.508,145.035,129.786,152.488,109.826,125.76,99.717,80.87,140.152,145.035,149.319,118.907,127.73,102.458,102.63,75.302,153.859,173.991,86.953,117.365,84.982,61.852,85.582,72.903,93.806,88.666,109.654,80.956,52.6,53.971,57.312,56.626,73.074,68.448,56.626,45.232,71.532,60.31,88.837,73.674,82.841,69.391,69.305,70.933,57.14,50.201,46.86,54.142,35.895,17.648,26.557,40.007,46.003,53.799,51.743,31.697,26.471,27.585,35.809,57.397,34.695,43.091,29.984,25.615,20.475,30.926,20.389,22.531,22.017,20.303,9.509,10.366,19.447,18.761,15.249,20.817,12.679,5.226,10.194,12.593,16.363,18.59,14.306,14.306,6.339,8.481,14.735,16.877,13.964,12.593,10.794,6.511,2.913,5.911,10.794,11.908,12.165,7.196,4.112,7.367,8.824,9.595,9.68,15.42,9.595,5.568,10.708,8.738,8.224,16.02,8.395,5.825,4.797,4.797,9.68,11.051,9.766,8.909,8.395,2.57,7.367,8.738,15.763,16.448,11.908,14.306,5.825,8.31,16.191,18.333,27.842,26.728,28.527,10.28,16.705,31.783,42.662,38.636],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.086,0.686,0.686,0.772,0.772,0.858,0.858,1.115,1.372,1.2,1.457,1.542,1.799,2.655,4.197,5.054,5.311,6.254,6.854,7.368,7.796,7.625,6.683,7.111,8.738,8.309,8.823,12.764,12.422,12.251,13.793,14.821,14.65,17.392,19.79,17.22,19.276,20.989,22.616,22.959,21.845,26.214,31.354,34.352,39.149,42.319,41.891,43.861,47.802,45.06,56.797,62.366,62.623,67.506,71.361,83.183,94.148,103.486,93.034,105.97,109.911,115.308,127.302,128.159,133.642,141.438,146.236,141.353,167.481,174.677,189.069,200.291,208.772,220.337,246.123,281.589,297.095,303.606,343.784,348.41,365.629,371.026,385.675,383.533,371.882,396.383,347.038,339.842,352.35,367.513,387.816,401.266,438.103,436.989,465.174,508.351,517.517,532.68,540.647,563.949,560.78,602.586,626.744,651.416,669.749,678.83,702.474,686.368,662.809,661.866,671.461,688.852,712.325,740.852,738.539,769.722,806.988,836.544,846.91,859.845,889.4,866.613,852.65,887.345,914.33,957.078,1027.068,1077.098,1060.736,1096.888,1122.845,1136.638,1116.592,1053.712,1043.346,967.273,993.659,971.128,957.507,950.825,988.347,1056.881,1017.046,1063.735,1043.431,1097.744,1104.169,1084.294,1050.798,959.99,983.634,983.634,1003.167,969.586,987.49,964.188,967.101,961.533,975.24,1004.196,941.83,940.288,897.54,856.934,839.886,837.487,777.434,692.109,714.81,678.401,646.019,638.138,609.868,593.591,572.859,552.641,499.613,463.889,482.821,489.16,520.685,537.733,547.5,548.443,561.122,586.823,572.431,562.322,520.345,500.813,453.867,402.124,359.376,328.45,317.313,320.911,325.794,303.349,293.925,303.862,313.114,330.504,319.196,308.488,286.729,280.647,274.651,277.992,262.572,227.706,215.028,192.24,171.765,156.516,155.488,143.323,138.183,136.469,127.131,112.054,112.739,114.966,111.882,111.711,110.768,104.257,97.917,101.172,105.713,109.997,107.598,101.601,98.089,90.294,86.868,84.298,80.357,75.388,73.589,68.192,61.51,62.366,68.277,71.961,70.847,74.359,71.789,70.161,76.757,78.128,77.528,83.953,82.668,73.073,68.275,67.504,66.476,68.789,70.331,63.22,63.22,59.965,62.535,66.476,72.559,77.956,80.098,85.495,82.925,88.665,97.489,107.084,119.163,129.443,146.062,142.036,152.916,176.389,202.86,223.163],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.11,0.122,0.122,0.147,0.11,0.171,0.196,0.22,0.245,0.379,0.563,0.673,0.698,0.857,0.955,1.016,0.979,0.869,0.795,0.93,1.052,1.065,1.163,1.726,1.664,1.664,1.75,1.799,1.958,2.289,2.166,2.411,2.668,2.692,2.864,2.986,2.595,3.206,4.185,4.565,5.262,5.507,5.568,6.131,5.679,5.165,7.392,7.881,8.163,9.166,9.497,11.186,12.691,11.834,11.773,14.074,14.221,15.445,15.8,16.044,16.999,18.749,17.525,18.565,21.674,22.212,24.501,25.566,26.618,29.335,32.492,34.867,39.162,38.575,45,45.514,47.374,47.178,47.362,47.215,48.916,46.089,44.804,41.83,44.706,44.584,47.974,51.413,54.876,58.939,62.709,64.116,66.135,65.279,67.885,69.391,72.56,78.569,79.622,83.244,85.717,85.019,87.675,87.332,81.164,83.587,82.486,85.974,90.502,90.502,95.128,102.605,101.895,107.17,105.065,107.048,111.723,108.798,106.974,114.085,113.008,122.908,128.954,133.862,139.455,143.689,140.617,145.843,135.795,126.715,124.132,120.51,124.708,122.015,115.027,122.162,126.458,128.648,131.243,130.521,135.037,142.049,136.933,135.869,125.589,120.498,119.8,121.978,121.526,122.823,123.104,123.496,126.604,117.34,118.601,122.125,117.56,116.08,113.583,107.758,109.226,97.661,86.206,86.451,85.349,84.774,83.452,78.937,76.709,71.398,69.17,63.284,59.808,58.756,61.265,61.693,66.294,66.38,68.436,70.26,73.699,73.613,73.16,67.641,63.81,59.71,54.925,47.545,41.206,38.758,38.159,39.15,38.807,38.208,39.468,39.615,39.015,40.643,37.914,36.678,36.433,36.311,35.295,34.597,29.311,27.573,24.562,23.179,20.878,19.434,17.794,17.562,16.522,16.35,15.261,14.649,14.625,13.646,13.303,13.78,12.85,13.083,13.242,12.997,13.303,13.376,12.716,12.471,11.969,11.993,11.198,9.937,9.069,8.775,8.714,8.2,7.857,8.493,8.909,8.738,8.42,8.885,9.228,9.436,9.913,9.901,9.705,10.611,9.607,9.069,8.958,8.114,8.249,8.652,7.759,7.832,8.2,7.881,8.249,8.114,8.787,9.742,10.17,11.014,11.479,11.614,12.679,13.046,14.674,16.791,18.822,19.459,20.658,22.885,26.361,27.903]},{"iso":"BIH","continent":"Europe","population":3280815,"name":"Bosnia and Herzegovina","population_density":68.496,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,3,3,3,5,7,11,13,18,24,25,26,38,63,89,93,126,136,166,176,191,237,258,323,368,420,459,533,579,624,654,674,764,804,858,901,946,1009,1037,1083,1110,1167,1214,1268,1285,1309,1342,1368,1413,1421,1486,1516,1565,1585,1677,1757,1781,1839,1857,1926,1946,1987,2027,2070,2090,2117,2141,2158,2181,2218,2236,2267,2290,2304,2321,2338,2350,2372,2391,2401,2406,2416,2435,2462,2485,2494,2510,2524,2535,2551,2594,2606,2606,2606,2704,2728,2775,2832,2893,2893,2893,3040,3085,3141,3174,3273,3273,3273,3525,3588,3676,3796,3935,3935,3935,4325,4453,4606,4788,4962,4962,4962,5458,5621,5869,6086,6402,6719,6877,6981,6981,7411,7681,7908,8161,8340,8479,8787,9115,9462,9767,9767,9767,10498,10766,11127,11444,11876,11876,12296,12462,12856,13138,13396,13687,13687,13687,14498,14708,14961,15184,15535,15801,15801,16111,16351,16691,17029,17396,17715,17715,18029,18326,18609,18920,19214,19550,19793,19964,20234,20517,20804,21142,21439,21560,21660,21961,22258,22544,22834,23138,23465,23635,23929,24211,24605,24897,25217,25428,25521,25737,26081,26316,26564,26797,26920,27001,27226,27469,27749,27975,27975,28354,28449,28710,29075,29528,29917,30345,30647,30837,31173,31655,32224,32845,33561,34112,34661,35389,36315,37314,38493,39758,40893,41596,43151,44737,46639,48137,50090,51505,52269,53822,55598,57506,59427,61212,62423,63419,65024,66565,68293,69625,70900,71956,72689,73944,75577,76757,77994,79309,80006,80553,81739,83328,84252,85431,86710,87374,87901,89085,90378,91539,92793,93768,94507,94944,96021,97317,98603,99543,100306,101117,101461,102330,103232,104087],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.61,0.61,0.914,0.914,0.914,1.524,2.134,3.353,3.962,5.486,7.315,7.62,7.925,11.582,19.203,27.127,28.347,38.405,41.453,50.597,53.645,58.217,72.238,78.639,98.451,112.167,128.017,139.904,162.46,176.481,190.197,199.341,205.437,232.869,245.061,261.52,274.627,288.343,307.546,316.08,330.101,338.331,355.704,370.03,386.489,391.671,398.986,409.045,416.97,430.686,433.124,452.936,462.08,477.016,483.112,511.153,535.538,542.853,560.531,566.018,587.049,593.145,605.642,617.834,630.941,637.037,645.266,652.582,657.763,664.774,676.052,681.538,690.987,697.997,702.265,707.446,712.628,716.285,722.991,728.782,731.83,733.354,736.402,742.194,750.423,757.434,760.177,765.054,769.321,772.674,777.551,790.657,794.315,794.315,794.315,824.185,831.501,845.826,863.2,881.793,881.793,881.793,926.599,940.315,957.384,967.443,997.618,997.618,997.618,1074.428,1093.631,1120.453,1157.03,1199.397,1199.397,1199.397,1318.27,1357.285,1403.919,1459.393,1512.429,1512.429,1512.429,1663.611,1713.294,1788.885,1855.027,1951.344,2047.967,2096.126,2127.825,2127.825,2258.89,2341.187,2410.377,2487.492,2542.051,2584.419,2678.298,2778.273,2884.039,2977.004,2977.004,2977.004,3199.815,3281.502,3391.535,3488.158,3619.832,3619.832,3747.849,3798.446,3918.539,4004.493,4083.132,4171.829,4171.829,4171.829,4419.024,4483.032,4560.147,4628.118,4735.104,4816.181,4816.181,4910.67,4983.823,5087.455,5190.479,5302.341,5399.573,5399.573,5495.281,5585.807,5672.066,5766.86,5856.472,5958.885,6032.952,6085.073,6167.37,6253.629,6341.107,6444.13,6534.657,6571.538,6602.018,6693.764,6784.29,6871.463,6959.856,7052.516,7152.186,7204.003,7293.615,7379.569,7499.661,7588.663,7686.2,7750.513,7778.86,7844.697,7949.549,8021.178,8096.769,8167.788,8205.278,8229.967,8298.548,8372.615,8457.959,8526.845,8526.845,8642.365,8671.321,8750.874,8862.127,9000.203,9118.771,9249.226,9341.276,9399.189,9501.602,9648.517,9821.95,10011.232,10229.47,10397.416,10564.753,10786.649,11068.896,11373.394,11732.755,12118.33,12464.281,12678.557,13152.525,13635.941,14215.675,14672.269,15267.548,15698.843,15931.712,16405.07,16946.399,17527.962,18113.487,18657.559,19026.675,19330.258,19819.466,20289.166,20815.864,21221.861,21610.484,21932.355,22155.775,22538.302,23036.044,23395.711,23772.752,24173.567,24386.014,24552.741,24914.236,25398.567,25680.204,26039.566,26429.409,26631.797,26792.428,27153.314,27547.423,27901.299,28283.521,28580.703,28805.952,28939.151,29267.423,29662.447,30054.422,30340.937,30573.501,30820.695,30925.547,31190.421,31465.352,31725.958],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.305,0,0,0.61,0.61,1.219,0.61,1.524,1.829,0.305,0.305,3.658,7.62,7.925,1.219,10.058,3.048,9.144,3.048,4.572,14.021,6.401,19.812,13.716,15.85,11.887,22.555,14.021,13.716,9.144,6.096,27.432,12.192,16.459,13.106,13.716,19.203,8.534,14.021,8.23,17.374,14.326,16.459,5.182,7.315,10.058,7.925,13.716,2.438,19.812,9.144,14.935,6.096,28.042,24.384,7.315,17.679,5.486,21.031,6.096,12.497,12.192,13.106,6.096,8.23,7.315,5.182,7.01,11.278,5.486,9.449,7.01,4.267,5.182,5.182,3.658,6.706,5.791,3.048,1.524,3.048,5.791,8.23,7.01,2.743,4.877,4.267,3.353,4.877,13.106,3.658,0,0,29.871,7.315,14.326,17.374,18.593,0,0,44.806,13.716,17.069,10.058,30.175,0,0,76.81,19.203,26.823,36.576,42.368,0,0,118.873,39.015,46.635,55.474,53.036,0,0,151.182,49.683,75.591,66.142,96.318,96.622,48.159,31.699,0,131.065,82.297,69.19,77.115,54.56,42.368,93.879,99.975,105.766,92.965,0,0,222.81,81.687,110.034,96.622,131.675,0,128.017,50.597,120.092,85.954,78.639,88.697,0,0,247.195,64.008,77.115,67.971,106.986,81.077,0,94.489,73.153,103.633,103.023,111.862,97.232,0,95.708,90.526,86.259,94.794,89.612,102.414,74.067,52.121,82.297,86.259,87.478,103.023,90.526,36.881,30.48,91.745,90.526,87.173,88.393,92.66,99.67,51.816,89.612,85.954,120.092,89.002,97.537,64.313,28.347,65.837,104.852,71.629,75.591,71.019,37.491,24.689,68.581,74.067,85.345,68.885,0,115.52,28.956,79.553,111.253,138.075,118.568,130.455,92.05,57.912,102.414,146.915,173.433,189.282,218.238,167.946,167.336,221.896,282.247,304.498,359.362,385.575,345.951,214.276,473.968,483.416,579.734,456.594,595.279,431.295,232.869,473.358,541.329,581.563,585.525,544.072,369.116,303.583,489.208,469.7,526.698,405.997,388.623,321.871,223.42,382.527,497.742,359.667,377.04,400.815,212.447,166.727,361.496,484.331,281.637,359.362,389.842,202.389,160.631,360.886,394.109,353.875,382.222,297.182,225.249,133.199,328.272,395.024,391.976,286.514,232.564,247.195,104.852,264.873,274.932,260.606],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.305,0.305,0.305,0.915,1.525,2.744,3.354,4.878,6.402,6.707,7.012,10.06,17.07,23.776,24.385,32.919,34.138,42.977,45.72,46.634,53.035,51.511,70.104,73.762,86.564,89.307,108.814,118.263,117.958,120.701,106.985,120.701,117.043,121.615,112.166,111.861,117.348,116.738,124.663,105.461,110.643,108.51,111.863,103.329,91.441,92.965,86.869,92.355,77.419,82.905,75.59,85.343,84.124,102.108,118.567,112.166,127.407,113.081,124.968,116.129,122.53,106.68,95.402,94.183,84.734,86.563,70.714,71.628,70.409,63.703,60.046,60.96,56.997,54.864,54.864,51.512,46.94,47.245,40.844,35.358,34.139,34.748,37.796,41.148,37.185,36.271,37.49,39.319,41.148,48.463,43.891,36.881,34.138,59.132,62.18,73.153,85.65,91.137,87.479,87.479,132.285,116.13,125.884,121.616,134.417,115.824,115.824,192.634,167.031,180.138,199.645,231.955,201.78,201.78,320.653,282.858,310.29,338.941,355.401,313.033,313.033,464.215,395.025,431.601,451.108,491.952,535.538,583.697,615.396,464.214,545.596,552.302,555.35,536.147,494.085,488.294,550.474,650.449,625.15,635.818,566.628,489.513,657.763,697.082,713.237,709.884,735.793,642.828,770.845,821.442,718.724,722.991,691.596,683.671,551.996,551.996,671.174,684.585,641.608,623.625,651.972,644.352,644.352,738.841,564.799,604.424,630.332,674.223,664.469,583.392,679.1,675.137,688.243,679.404,665.993,656.545,633.38,685.501,672.09,667.823,669.042,677.271,678.185,612.652,569.065,608.689,616.918,617.832,618.747,608.384,617.528,632.463,691.595,685.804,715.37,717.199,726.343,697.996,626.673,640.694,655.934,641.609,597.108,579.125,519.079,479.455,519.689,527.919,508.412,505.668,430.077,474.578,466.043,520.907,563.579,627.587,660.81,722.38,814.43,756.822,830.28,897.642,959.822,1011.029,1110.699,1148.19,1223.476,1387.46,1567.293,1724.876,1910.805,2107.098,2234.811,2281.141,2587.773,2849.293,3146.78,3298.876,3534.793,3580.513,3467.431,3726.513,3793.874,3892.021,3897.812,3985.29,3759.127,3631.415,3887.754,3884.096,3869.465,3693.899,3496.997,3274.796,3129.1,3208.044,3216.578,3106.545,2956.887,2951.705,2775.529,2620.385,2758.461,2860.265,2644.16,2643.855,2656.657,2458.231,2406.415,2600.574,2633.187,2502.731,2603.316,2541.136,2376.543,2307.353,2474.994,2509.132,2506.999,2439.638,2289.98,2239.993,2119.596,2251.27,2197.93,2063.512],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.218,0.392,0.479,0.653,0.914,0.958,0.914,1.35,2.264,3.309,3.266,4.441,4.833,6.096,6.009,5.574,6.444,7.185,8.578,10.102,11.06,12.323,14.892,14.892,15.937,14.413,13.324,14.979,15.022,14.152,14.021,14.021,15.458,15.806,13.89,13.324,13.455,13.629,14.021,12.018,11.844,11.278,11.234,10.712,9.013,9.492,10.058,11.147,10.581,13.455,14.979,15.676,15.371,14.848,15.719,15.719,13.498,11.757,12.584,10.929,11.321,9.362,9.231,8.447,8.317,7.228,7.707,7.533,7.098,7.098,6.836,5.748,5.922,5.399,4.833,4.441,4.137,4.224,4.877,4.92,4.485,4.746,5.138,5.182,5.051,5.748,5.269,4.877,4.18,7.838,8.404,9.754,10.363,12.497,12.497,12.497,14.631,15.545,15.937,14.892,16.546,16.546,16.546,21.118,21.902,23.296,27.084,28.826,28.826,28.826,34.835,37.665,40.495,43.195,44.719,44.719,44.719,49.334,50.858,54.995,56.519,62.702,76.505,83.385,66.316,59.219,67.144,69.451,65.576,62.789,63.704,65.228,78.639,74.198,77.55,80.947,69.93,62.136,87.914,86.172,87.609,86.303,91.833,91.833,110.121,85.519,91.005,87.565,84.996,78.857,78.857,60.569,88.654,80.642,79.379,77.855,80.468,92.05,92.05,70.235,71.541,75.33,80.337,81.034,83.342,83.342,83.516,85.998,83.516,82.34,79.162,79.902,90.483,84.256,83.08,83.08,82.035,83.951,82.253,76.941,73.849,75.199,75.809,75.765,73.675,73.98,82.95,85.998,85.693,85.04,89.743,89.83,90.526,85.475,82.122,78.726,81.426,74.502,72.586,68.798,64.966,64.444,64.836,60.438,62.397,61.439,51.294,62.441,63.051,64.618,69.93,77.463,84.561,103.197,99.845,103.981,107.247,112.341,117.392,127.494,140.035,150.877,166.509,183.578,202.911,221.635,245.932,269.837,295.266,301.972,337.982,366.721,406.04,419.931,449.888,462.08,464.736,464.649,472.923,473.184,491.603,484.287,475.405,485.507,487.771,477.538,469.7,444.053,421.846,415.097,403.645,388.405,392.411,368.55,364.413,366.155,350.523,342.424,339.419,337.503,326.356,323.831,322.263,320.826,319.955,319.868,306.979,317.299,320.565,307.328,310.594,306.675,302.016,302.146,307.589,293.917,284.685,287.82,283.771,274.714,257.558,238.791]},{"iso":"BWA","continent":"Africa","population":2351625,"name":"Botswana","population_density":4.044,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,6,6,6,6,13,13,13,13,13,13,13,15,15,15,20,20,20,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,25,25,25,25,29,30,30,35,35,35,35,35,35,35,35,38,40,40,40,40,40,40,42,42,48,48,48,60,60,60,60,79,79,89,89,89,89,89,92,92,92,92,92,175,227,227,227,277,277,277,314,314,314,314,314,314,399,399,399,399,522,522,522,522,522,522,522,592,686,686,686,739,739,804,804,804,804,804,804,804,804,804,804,804,804,1066,1066,1066,1214,1214,1214,1214,1308,1308,1308,1308,1308,1308,1308,1562,1562,1562,1562,1562,1562,1633,1633,1724,1724,1724,2002,2002,2002,2126,2126,2126,2252,2252,2252,2252,2463,2463,2463,2567,2567,2567,2567,2567,2567,2567,2921,2921,2921,2921,3172,3172,3172,3172,3172,3172,3172,3172,3172,3172,3219,3219,3219,3219,3515,3515,3515,3914,5242,5242,5242,5609,5609,5609,5923,5923,5923,5923,6283,6283,6283,6642,6642,6642,6642,6642,6642,6642,7835,7835,7835,7835,7835,7835,7835,8225,8225,8225,8225,9103,9103,9103,9594,9594,9594,9594,9992,9992,9992,10258,10258,10258,10258,10742,10742,10742,11531,11531,11531,11531,12058,12058,12058,12501,12501,12501,12501,12873,12873,12873,13014],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.276,1.701,1.701,1.701,1.701,1.701,2.551,2.551,2.551,2.551,5.528,5.528,5.528,5.528,5.528,5.528,5.528,6.379,6.379,6.379,8.505,8.505,8.505,9.355,9.355,9.355,9.355,9.355,9.355,9.78,9.78,9.78,9.78,9.78,9.78,9.78,9.78,9.78,9.78,9.78,9.78,9.78,10.206,10.206,10.206,10.206,10.206,10.206,10.631,10.631,10.631,10.631,12.332,12.757,12.757,14.883,14.883,14.883,14.883,14.883,14.883,14.883,14.883,16.159,17.01,17.01,17.01,17.01,17.01,17.01,17.86,17.86,20.411,20.411,20.411,25.514,25.514,25.514,25.514,33.594,33.594,37.846,37.846,37.846,37.846,37.846,39.122,39.122,39.122,39.122,39.122,74.417,96.529,96.529,96.529,117.791,117.791,117.791,133.525,133.525,133.525,133.525,133.525,133.525,169.67,169.67,169.67,169.67,221.974,221.974,221.974,221.974,221.974,221.974,221.974,251.741,291.713,291.713,291.713,314.251,314.251,341.891,341.891,341.891,341.891,341.891,341.891,341.891,341.891,341.891,341.891,341.891,341.891,453.304,453.304,453.304,516.239,516.239,516.239,516.239,556.211,556.211,556.211,556.211,556.211,556.211,556.211,664.222,664.222,664.222,664.222,664.222,664.222,694.413,694.413,733.11,733.11,733.11,851.326,851.326,851.326,904.056,904.056,904.056,957.636,957.636,957.636,957.636,1047.361,1047.361,1047.361,1091.586,1091.586,1091.586,1091.586,1091.586,1091.586,1091.586,1242.12,1242.12,1242.12,1242.12,1348.855,1348.855,1348.855,1348.855,1348.855,1348.855,1348.855,1348.855,1348.855,1348.855,1368.841,1368.841,1368.841,1368.841,1494.711,1494.711,1494.711,1664.381,2229.097,2229.097,2229.097,2385.159,2385.159,2385.159,2518.684,2518.684,2518.684,2518.684,2671.77,2671.77,2671.77,2824.43,2824.43,2824.43,2824.43,2824.43,2824.43,2824.43,3331.739,3331.739,3331.739,3331.739,3331.739,3331.739,3331.739,3497.581,3497.581,3497.581,3497.581,3870.94,3870.94,3870.94,4079.732,4079.732,4079.732,4079.732,4248.977,4248.977,4248.977,4362.09,4362.09,4362.09,4362.09,4567.905,4567.905,4567.905,4903.418,4903.418,4903.418,4903.418,5127.518,5127.518,5127.518,5315.899,5315.899,5315.899,5315.899,5474.087,5474.087,5474.087,5534.046],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.425,0,0,0,0,0.85,0,0,0,2.977,0,0,0,0,0,0,0.85,0,0,2.126,0,0,0.85,0,0,0,0,0,0.425,0,0,0,0,0,0,0,0,0,0,0,0,0.425,0,0,0,0,0,0.425,0,0,0,1.701,0.425,0,2.126,0,0,0,0,0,0,0,1.276,0.85,0,0,0,0,0,0.85,0,2.551,0,0,5.103,0,0,0,8.08,0,4.252,0,0,0,0,1.276,0,0,0,0,35.295,22.112,0,0,21.262,0,0,15.734,0,0,0,0,0,36.145,0,0,0,52.304,0,0,0,0,0,0,29.767,39.972,0,0,22.538,0,27.64,0,0,0,0,0,0,0,0,0,0,0,111.412,0,0,62.935,0,0,0,39.972,0,0,0,0,0,0,108.01,0,0,0,0,0,30.192,0,38.697,0,0,118.216,0,0,52.729,0,0,53.58,0,0,0,89.725,0,0,44.225,0,0,0,0,0,0,150.534,0,0,0,106.735,0,0,0,0,0,0,0,0,0,19.986,0,0,0,125.87,0,0,169.67,564.716,0,0,156.062,0,0,133.525,0,0,0,153.086,0,0,152.66,0,0,0,0,0,0,507.309,0,0,0,0,0,0,165.843,0,0,0,373.359,0,0,208.792,0,0,0,169.245,0,0,113.113,0,0,0,205.815,0,0,335.513,0,0,0,224.1,0,0,188.38,0,0,0,158.188,0,0,59.959],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.425,0.425,0.425,0.425,0.425,1.275,1.275,1.275,0.85,3.827,3.827,3.827,3.827,2.977,2.977,2.977,3.827,0.85,0.85,2.976,2.976,2.976,3.826,3.826,2.976,2.976,2.976,0.85,1.275,1.275,0.425,0.425,0.425,0.425,0.425,0.425,0,0,0,0,0,0.425,0.425,0.425,0.425,0.425,0.425,0.85,0.85,0.425,0.425,2.126,2.551,2.551,4.677,4.252,4.252,4.252,4.252,2.551,2.126,2.126,1.276,2.126,2.126,2.126,2.126,2.126,2.126,2.976,1.7,3.401,3.401,3.401,8.504,8.504,8.504,7.654,15.734,13.183,17.435,17.435,12.332,12.332,12.332,13.608,5.528,5.528,1.276,1.276,36.571,58.683,58.683,57.407,78.669,78.669,78.669,94.403,59.108,36.996,36.996,36.996,15.734,51.879,51.879,36.145,36.145,88.449,88.449,88.449,88.449,52.304,52.304,52.304,82.071,69.739,69.739,69.739,92.277,92.277,119.917,119.917,90.15,50.178,50.178,50.178,27.64,27.64,0,0,0,0,111.412,111.412,111.412,174.347,174.347,174.347,174.347,214.319,102.907,102.907,102.907,39.972,39.972,39.972,147.982,108.01,108.01,108.01,108.01,108.01,138.202,138.202,68.889,68.889,68.889,187.105,187.105,187.105,209.642,209.642,170.945,224.525,224.525,106.309,106.309,196.034,143.305,143.305,187.53,133.95,133.95,133.95,133.95,44.225,44.225,194.759,150.534,150.534,150.534,257.269,257.269,257.269,257.269,106.735,106.735,106.735,106.735,0,0,19.986,19.986,19.986,19.986,145.856,145.856,145.856,315.526,860.256,860.256,860.256,1016.318,890.448,890.448,1023.973,854.303,289.587,289.587,442.673,286.611,286.611,439.271,305.746,305.746,305.746,305.746,152.66,152.66,659.969,507.309,507.309,507.309,507.309,507.309,507.309,673.152,165.843,165.843,165.843,539.202,539.202,539.202,747.994,582.151,582.151,582.151,751.396,378.037,378.037,491.15,282.358,282.358,282.358,488.173,318.928,318.928,654.441,541.328,541.328,541.328,765.428,559.613,559.613,747.993,412.48,412.48,412.48,570.668,346.568,346.568,406.527],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.182,0.182,0.121,0.121,0.547,0.547,0.547,0.425,0.425,0.425,0.425,0.121,0.121,0.121,0.425,0.425,0.425,0.547,0.425,0.425,0.425,0.121,0.121,0.182,0.061,0.061,0.061,0.061,0.061,0.061,0,0,0,0,0,0,0.061,0.061,0.061,0.061,0.061,0.061,0.121,0.061,0.061,0.061,0.304,0.364,0.364,0.607,0.607,0.607,0.607,0.364,0.304,0.304,0,0.182,0.304,0.304,0.304,0.304,0.304,0.304,0.243,0.121,0.486,0.486,0.486,1.215,1.215,1.093,1.093,1.883,1.883,2.491,1.762,1.762,1.762,1.762,0.79,0.79,0.182,0.182,0.182,5.224,8.383,8.201,8.201,11.238,11.238,11.238,8.444,5.285,5.285,5.285,2.248,2.248,7.411,5.164,5.164,5.164,12.636,12.636,12.636,7.472,7.472,7.472,7.472,4.252,9.963,9.963,9.963,13.182,13.182,17.131,12.879,7.168,7.168,7.168,3.949,3.949,0,0,0,0,0,15.916,15.916,15.916,24.907,24.907,24.907,24.907,14.701,14.701,14.701,5.71,5.71,5.71,5.71,15.43,15.43,15.43,15.43,15.43,15.43,19.743,4.313,9.841,9.841,9.841,26.729,26.729,22.416,29.949,24.421,24.421,32.075,15.187,15.187,15.187,20.472,20.472,20.472,19.136,19.136,19.136,19.136,6.318,6.318,6.318,21.505,21.505,21.505,21.505,36.753,36.753,36.753,15.248,15.248,15.248,15.248,0,0,0,2.855,2.855,2.855,2.855,20.837,20.837,20.837,42.22,122.894,122.894,122.894,127.207,127.207,127.207,122.043,41.37,41.37,41.37,40.944,40.944,40.944,43.678,43.678,43.678,43.678,21.809,21.809,21.809,72.473,72.473,72.473,72.473,72.473,72.473,72.473,23.692,23.692,23.692,23.692,77.029,77.029,77.029,83.164,83.164,83.164,83.164,54.005,54.005,54.005,40.337,40.337,40.337,40.337,45.561,45.561,45.561,77.333,77.333,77.333,77.333,79.945,79.945,79.945,58.926,58.926,58.926,58.926,49.51,49.51,49.51,31.164]},{"iso":"BRA","continent":"South America","population":212559409,"name":"Brazil","population_density":25.04,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,2,2,2,4,4,13,13,20,25,31,38,52,151,151,162,200,321,372,621,793,1021,1546,1924,2247,2554,2985,3417,3904,4256,4579,5717,6836,8044,9056,10360,11130,12161,14034,16170,18092,19638,20727,22192,23430,25262,28320,30425,33682,36658,38654,40743,43079,45757,50036,54043,59324,63100,67446,73235,79685,87187,92202,97100,101826,108620,115455,126611,135773,146894,156061,162699,169594,178214,190137,203165,220291,233511,241080,255368,271885,291579,310087,330890,347398,363211,374898,391222,411821,438238,465166,498440,514849,526447,555383,584016,614941,645771,672846,691758,707412,739503,772416,802828,828810,850514,867624,888271,923189,955377,978142,1032913,1067579,1083341,1106470,1145906,1188631,1228114,1274974,1313667,1344143,1368195,1402041,1448753,1496858,1539081,1577004,1603055,1623284,1668589,1713160,1755779,1800827,1839850,1864681,1884967,1926824,1966748,2012151,2046328,2074860,2098389,2118646,2159654,2227514,2287475,2343366,2394513,2419091,2442375,2483191,2552265,2610102,2662485,2707877,2733677,2750318,2801921,2859073,2912212,2962442,3012412,3035422,3057470,3109630,3164785,3224876,3275520,3317096,3340197,3359570,3407354,3456652,3501975,3532330,3582362,3605783,3622861,3669995,3717156,3761391,3804803,3846153,3862311,3908272,3950931,3997865,4041638,4091801,4123000,4137521,4147794,4162073,4197889,4238446,4282164,4315687,4330455,4345610,4382263,4419083,4455386,4495183,4528240,4544629,4558040,4591364,4591364,4657702,4689613,4717991,4732309,4745464,4777522,4810935,4847092,4847092,4906833,4915289,4927235,4969141,5000694,5028444,5055888,5082637,5094979,5103408,5113628,5140863,5169386,5200300,5224362,5224362,5250727,5273954,5298772,5323630,5353656,5380635,5394128,5409854,5439641,5468270,5494376,5516658,5535605,5545705,5554206,5566049,5590025,5590025,5631181,5653561,5664115,5675032,5699005,5747660,5781582,5810652,5848959,5863093,5876464,5911758,5945849,5981767,6020164,6052786,6071401,6087608,6118708,6166606,6204220,6238350,6290272,6314740,6335878,6386787,6436650,6487084,6533968,6577177,6603540,6623911,6674999,6728452,6781799,6836227,6880127,6901952,6927145,6970034,7040608,7110434],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.005,0.005,0.005,0.009,0.009,0.009,0.009,0.019,0.019,0.061,0.061,0.094,0.118,0.146,0.179,0.245,0.71,0.71,0.762,0.941,1.51,1.75,2.922,3.731,4.803,7.273,9.052,10.571,12.015,14.043,16.076,18.367,20.023,21.542,26.896,32.16,37.844,42.605,48.739,52.362,57.212,66.024,76.073,85.115,92.388,97.512,104.404,110.228,118.847,133.233,143.136,158.459,172.46,181.85,191.678,202.668,215.267,235.398,254.249,279.094,296.858,317.304,344.539,374.883,410.177,433.77,456.813,479.047,511.01,543.166,595.65,638.753,691.073,734.199,765.428,797.866,838.42,894.512,955.803,1036.374,1098.568,1134.177,1201.396,1279.101,1371.753,1458.825,1556.694,1634.357,1708.751,1763.733,1840.53,1937.44,2061.72,2188.405,2344.944,2422.142,2476.705,2612.837,2747.542,2893.031,3038.073,3165.449,3254.422,3328.067,3479.041,3633.883,3776.958,3899.192,4001.3,4081.795,4178.931,4343.205,4494.635,4601.735,4859.409,5022.497,5096.65,5205.462,5390.992,5591.994,5777.745,5998.201,6180.235,6323.611,6436.765,6595.996,6815.756,7042.069,7240.71,7419.121,7541.68,7636.848,7849.989,8059.676,8260.18,8472.111,8655.698,8772.517,8867.954,9064.873,9252.698,9466.299,9627.087,9761.318,9872.012,9967.312,10160.237,10479.489,10761.58,11024.523,11265.147,11380.776,11490.317,11682.339,12007.302,12279.4,12525.839,12739.389,12860.767,12939.056,13181.825,13450.701,13700.697,13937.007,14172.094,14280.346,14384.073,14629.463,14888.943,15171.645,15409.904,15605.501,15714.181,15805.322,16030.125,16262.051,16475.276,16618.083,16853.462,16963.648,17043.993,17265.738,17487.61,17695.716,17899.951,18094.485,18170.501,18386.728,18587.42,18808.224,19014.157,19250.152,19396.93,19465.245,19513.575,19580.752,19749.25,19940.054,20145.728,20303.439,20372.916,20444.214,20616.65,20789.872,20960.662,21147.89,21303.409,21380.512,21443.605,21600.38,21600.38,21912.472,22062.599,22196.105,22263.465,22325.354,22476.173,22633.366,22803.469,22803.469,23084.525,23124.307,23180.508,23377.657,23526.1,23656.652,23785.764,23911.607,23969.671,24009.325,24057.406,24185.535,24319.723,24465.16,24578.362,24578.362,24702.397,24811.67,24928.428,25045.374,25186.634,25313.558,25377.037,25451.021,25591.156,25725.843,25848.661,25953.488,26042.625,26090.141,26130.135,26185.851,26298.648,26298.648,26492.269,26597.557,26647.209,26698.569,26811.351,27040.252,27199.84,27336.602,27516.82,27583.314,27646.219,27812.262,27972.646,28141.624,28322.265,28475.738,28563.313,28639.56,28785.872,29011.212,29188.169,29348.736,29593.007,29708.118,29807.563,30047.068,30281.652,30518.922,30739.491,30942.77,31066.797,31162.634,31402.981,31654.454,31905.428,32161.489,32368.019,32470.696,32589.218,32790.993,33123.013,33451.514],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.005,0,0,0,0.009,0,0.042,0,0.033,0.024,0.028,0.033,0.066,0.466,0,0.052,0.179,0.569,0.24,1.171,0.809,1.073,2.47,1.778,1.52,1.444,2.028,2.032,2.291,1.656,1.52,5.354,5.264,5.683,4.761,6.135,3.623,4.85,8.812,10.049,9.042,7.273,5.123,6.892,5.824,8.619,14.387,9.903,15.323,14.001,9.39,9.828,10.99,12.599,20.131,18.851,24.845,17.764,20.446,27.235,30.344,35.294,23.593,23.043,22.234,31.963,32.156,52.484,43.103,52.319,43.127,31.229,32.438,40.553,56.093,61.291,80.57,62.194,35.609,67.219,77.705,92.652,87.072,97.869,77.663,74.393,54.982,76.797,96.909,124.281,126.685,156.54,77.197,54.564,136.131,134.706,145.489,145.042,127.376,88.973,73.645,150.974,154.841,143.075,122.234,102.108,80.495,97.135,164.274,151.431,107.099,257.674,163.089,74.153,108.812,185.529,201.003,185.75,220.456,182.034,143.376,113.154,159.231,219.76,226.313,198.641,178.411,122.559,95.169,213.14,209.687,200.504,211.931,183.586,116.819,95.437,196.919,187.825,213.601,160.788,134.231,110.694,95.3,192.925,319.252,282.091,262.943,240.624,115.629,109.541,192.022,324.963,272.098,246.439,213.55,121.378,78.289,242.77,268.875,249.996,236.31,235.087,108.252,103.726,245.39,259.48,282.702,238.258,195.597,108.68,91.142,224.803,231.926,213.225,142.807,235.379,110.186,80.345,221.745,221.872,208.107,204.235,194.534,76.016,216.227,200.692,220.804,205.933,235.995,146.778,68.315,48.33,67.177,168.499,190.803,205.674,157.711,69.477,71.298,172.436,173.222,170.79,187.228,155.519,77.103,63.093,156.775,0,312.092,150.127,133.506,67.36,61.889,150.819,157.194,170.103,0,281.056,39.782,56.201,197.15,148.443,130.552,129.112,125.842,58.064,39.655,48.081,128.129,134.188,145.437,113.201,0,124.036,109.273,116.758,116.946,141.259,126.925,63.479,73.984,140.135,134.687,122.817,104.827,89.137,47.516,39.994,55.716,112.797,0,193.621,105.288,49.652,51.36,112.783,228.901,159.588,136.762,180.218,66.494,62.905,166.043,160.383,168.979,180.641,153.472,87.576,76.247,146.312,225.339,176.958,160.567,244.271,115.111,99.445,239.505,234.584,237.27,220.569,203.28,124.027,95.837,240.347,251.473,250.975,256.06,206.53,102.677,118.522,201.774,332.02,328.501],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.005,0.005,0.005,0.005,0.014,0.014,0.056,0.056,0.084,0.108,0.136,0.169,0.226,0.692,0.65,0.702,0.848,1.393,1.605,2.743,3.486,4.093,6.563,8.289,9.63,10.505,12.293,13.154,14.636,15.219,14.269,17.845,21.589,25.828,28.561,32.664,33.996,37.19,44.482,49.177,52.955,54.545,54.907,55.664,57.865,61.634,67.209,67.063,73.344,80.072,84.339,87.275,92.441,96.421,102.165,111.113,120.635,124.398,135.454,152.861,172.215,194.91,198.372,202.564,199.953,214.152,225.862,251.111,263.87,280.895,300.429,308.615,318.819,327.409,351.346,360.153,397.62,407.495,399.977,435.967,481.234,533.333,564.312,600.89,597.983,610.182,629.555,639.133,658.337,689.966,729.579,788.25,787.784,767.955,849.104,907.013,955.593,976.354,977.045,909.478,905.926,1002.336,1021.046,1029.415,1006.16,963.226,916.345,924.507,1015.136,1015.593,967.851,1082.45,1123.305,1095.35,1123.667,1212.061,1248.79,1283.109,1396.466,1320.826,1301.113,1340.114,1390.533,1424.764,1450.074,1462.965,1420.92,1361.445,1313.238,1413.224,1463.68,1444.424,1430.042,1414.987,1353.395,1326.273,1428.023,1402.708,1406.622,1366.906,1289.206,1216.314,1194.795,1292.283,1414.616,1508.882,1558.224,1638.06,1619.458,1618.305,1715.027,1847.065,1799.911,1764.259,1714.866,1595.62,1558.28,1691.509,1768.362,1693.395,1657.607,1646.255,1540.957,1523.305,1690.406,1707.116,1720.943,1709.205,1668.492,1542.085,1524.975,1646.052,1632.588,1586.333,1446.438,1443.559,1358.148,1329.813,1460.416,1457.485,1433.666,1424.676,1476.403,1317.04,1423.081,1543.428,1542.487,1526.548,1554.436,1496.979,1370.76,1343.074,1194.024,1161.831,1131.83,1131.571,1053.287,975.986,978.969,1103.075,1209.12,1211.411,1207.836,1157.681,1077.073,1070.689,1156.166,983.73,1122.6,1101.937,1048.215,960.056,944.842,1032.568,1032.987,1203.09,890.998,1021.927,928.203,917.044,1052.305,1049.929,1023.287,982.296,1108.138,885.146,885.019,876.899,807.878,793.623,808.508,792.597,666.755,732.727,802.345,871.022,859.839,866.91,848.398,798.676,872.66,888.759,914.173,920.232,908.113,855.991,776.582,753.097,734.829,707.491,572.804,643.608,644.069,604.584,608.428,681.217,854.402,901.193,1037.955,1024.552,985.758,999.011,1113.694,1161.294,1101.372,1122.425,1139.135,1046.493,1056.246,1139.653,1198.949,1215.524,1207.112,1270.742,1232.381,1244.25,1407.508,1495.78,1507.711,1551.322,1594.035,1473.791,1454.517,1595.419,1607.387,1623.778,1642.568,1628.529,1527.926,1522.421,1628.358,1720.031,1797.059],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.001,0.002,0.002,0.008,0.007,0.012,0.015,0.019,0.023,0.032,0.093,0.093,0.095,0.118,0.195,0.224,0.382,0.431,0.585,0.93,1.159,1.294,1.466,1.589,1.764,1.938,1.821,1.784,2.332,2.878,3.4,3.79,4.339,4.62,5.096,5.59,6.273,6.753,7.112,6.967,7.435,7.574,7.546,8.166,8.289,9.439,10.707,11.064,11.636,11.974,11.719,13.18,13.684,15.233,16.43,17.947,20.267,22.802,24.968,25.646,25.389,26.027,27.672,28.375,31.538,32.654,36.757,39.627,40.912,40.979,42.179,42.695,45.293,49.329,52.053,52.678,57.647,62.955,68.177,71.86,74.331,76.541,82.082,80.334,80.204,80.812,86.128,90.244,101.512,101.913,101.853,110.329,115.729,118.759,121.381,117.215,118.897,121.623,123.744,126.62,126.275,123.017,119.407,118.196,121.552,123.452,122.965,117.825,137.174,145.885,144.979,146.647,149.684,156.766,168.001,162.685,165.391,175.28,175.9,172.143,174.823,180.618,177.501,176.984,174.01,171.44,179.142,177.703,174.016,175.915,176.654,175.834,175.872,173.555,170.432,172.303,164.997,157.946,157.071,157.051,156.481,175.256,185.04,199.634,214.833,215.538,217.572,217.443,218.259,216.831,214.474,210.606,211.427,206.963,214.212,206.2,203.042,201.595,204.672,202.797,206.431,206.805,205.463,210.136,210.414,204.772,204.833,203.036,200.095,196.158,186.233,172.597,178.28,178.495,176.953,176.516,175.08,174.349,183.124,177.289,172.408,191.819,188.812,188.659,188.349,192.886,186.064,184.963,160.978,141.905,134.432,132.271,127.939,129.501,129.667,132.948,147.986,148.66,145.801,143.166,142.853,143.942,142.77,140.533,115.787,135.973,130.673,127.528,126.136,125.964,125.113,147.57,127.285,105.839,126.917,122.977,122.165,128.783,127.533,121.883,140.328,118.155,120.766,118.403,97.107,94.205,94.724,97.057,95.251,86.956,99.01,107.752,106.128,103.664,103.068,105.028,114.097,106.946,111.355,113.916,114.755,109.551,104.152,101.872,97.016,84.956,81.829,64.284,76.969,79.276,79.581,81.205,89.357,105.943,128.742,120.619,131.323,133.729,135.379,142.987,133.199,134.541,140.809,136.988,140,141.906,139.087,148.367,149.506,146.639,159.61,163.544,166.858,180.171,181.491,190.108,198.679,192.823,194.097,193.582,193.702,196.115,198.072,203.143,203.607,200.557,203.798,198.287,209.794,220.869]},{"iso":"BRN","continent":"Asia","population":437483,"name":"Brunei","population_density":81.347,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,11,11,37,40,50,54,56,68,75,78,83,88,91,104,109,114,115,120,126,127,129,131,133,134,135,135,135,135,135,135,136,136,136,136,136,136,136,136,137,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,139,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,142,142,142,142,142,142,142,142,142,142,142,142,143,143,143,143,143,143,144,144,144,144,144,144,144,144,144,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,147,147,147,147,147,147,147,147,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,149,150,150,150,150,150,150,150,151,151,151,151,151,151,151,152,152,152,152,152,152,152,152,152,152],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2.286,2.286,25.144,25.144,84.575,91.432,114.29,123.433,128.005,155.435,171.435,178.293,189.722,201.151,208.008,237.724,249.153,260.582,262.867,274.296,288.011,290.297,294.869,299.44,304.012,306.298,308.583,308.583,308.583,308.583,308.583,308.583,310.869,310.869,310.869,310.869,310.869,310.869,310.869,310.869,313.155,315.441,315.441,315.441,315.441,315.441,315.441,315.441,315.441,315.441,315.441,315.441,315.441,315.441,315.441,315.441,315.441,315.441,317.727,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,322.298,324.584,324.584,324.584,324.584,324.584,324.584,324.584,324.584,324.584,324.584,324.584,324.584,326.87,326.87,326.87,326.87,326.87,326.87,329.156,329.156,329.156,329.156,329.156,329.156,329.156,329.156,329.156,331.441,331.441,331.441,331.441,331.441,331.441,331.441,331.441,331.441,331.441,331.441,331.441,331.441,331.441,331.441,331.441,331.441,331.441,331.441,331.441,331.441,333.727,333.727,333.727,333.727,333.727,333.727,333.727,333.727,333.727,333.727,333.727,333.727,333.727,333.727,333.727,333.727,333.727,333.727,333.727,333.727,336.013,336.013,336.013,336.013,336.013,336.013,336.013,336.013,338.299,338.299,338.299,338.299,338.299,338.299,338.299,338.299,338.299,338.299,338.299,338.299,338.299,338.299,338.299,338.299,338.299,338.299,338.299,338.299,338.299,338.299,338.299,338.299,338.299,338.299,338.299,338.299,338.299,338.299,338.299,338.299,340.585,342.87,342.87,342.87,342.87,342.87,342.87,342.87,345.156,345.156,345.156,345.156,345.156,345.156,345.156,347.442,347.442,347.442,347.442,347.442,347.442,347.442,347.442,347.442,347.442],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22.858,0,59.431,6.857,22.858,9.143,4.572,27.43,16.001,6.857,11.429,11.429,6.857,29.715,11.429,11.429,2.286,11.429,13.715,2.286,4.572,4.572,4.572,2.286,2.286,0,0,0,0,0,2.286,0,0,0,0,0,0,0,2.286,2.286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2.286,4.572,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2.286,0,0,0,0,0,0,0,0,0,0,0,2.286,0,0,0,0,0,2.286,0,0,0,0,0,0,0,0,2.286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2.286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2.286,0,0,0,0,0,0,0,2.286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2.286,2.286,0,0,0,0,0,0,2.286,0,0,0,0,0,0,2.286,0,0,0,0,0,0,0,0,0],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22.858,22.858,82.289,89.146,112.004,121.147,125.719,153.149,146.292,153.149,105.147,109.719,93.718,114.29,121.147,105.146,91.431,96.003,98.289,89.146,86.861,61.718,54.861,45.718,45.718,34.289,20.574,18.288,13.716,9.144,6.858,4.572,2.286,2.286,2.286,2.286,2.286,2.286,2.286,4.572,4.572,4.572,4.572,4.572,4.572,4.572,2.286,0,0,0,0,0,0,0,0,0,2.286,6.858,6.858,6.858,6.858,6.858,6.858,6.858,4.572,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2.286,2.286,2.286,2.286,2.286,2.286,2.286,2.286,0,0,0,0,2.286,2.286,2.286,2.286,2.286,2.286,4.572,4.572,2.286,2.286,2.286,2.286,2.286,2.286,0,2.286,2.286,2.286,2.286,2.286,2.286,2.286,2.286,0,0,0,0,0,0,0,0,0,0,0,0,0,2.286,2.286,2.286,2.286,2.286,2.286,2.286,2.286,0,0,0,0,0,0,0,0,0,0,0,0,2.286,2.286,2.286,2.286,2.286,2.286,2.286,2.286,2.286,2.286,2.286,2.286,2.286,2.286,2.286,2.286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2.286,4.572,4.572,4.572,4.572,4.572,4.572,4.572,4.572,2.286,2.286,2.286,2.286,2.286,2.286,4.572,2.286,2.286,2.286,2.286,2.286,2.286,2.286,0,0],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16.001,17.307,17.96,18.613,20.899,13.388,14.041,12.409,12.082,15.674,13.388,12.735,12.082,12.082,12.409,11.756,8.164,7.184,6.204,6.204,4.898,2.939,2.612,1.959,1.306,0.653,0.653,0.327,0.327,0.327,0.327,0.327,0.327,0,0.327,0.653,0.653,0.653,0.653,0.653,0.653,0.327,0,0,0,0,0,0,0,0,0,0,0.327,0.98,0.98,0.98,0.98,0.98,0.98,0.653,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.327,0.327,0.327,0.327,0.327,0.327,0.327,0,0,0,0,0,0.327,0.327,0.327,0.327,0.327,0.327,0.653,0.327,0.327,0.327,0.327,0.327,0.327,0,0,0.327,0.327,0.327,0.327,0.327,0.327,0.327,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.327,0.327,0.327,0.327,0.327,0.327,0.327,0,0,0,0,0,0,0,0,0,0,0,0,0,0.327,0.327,0.327,0.327,0.327,0.327,0.327,0,0.327,0.327,0.327,0.327,0.327,0.327,0.327,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.327,0.653,0.653,0.653,0.653,0.653,0.653,0.327,0.327,0.327,0.327,0.327,0.327,0.327,0.327,0.327,0.327,0.327,0.327,0.327,0.327,0.327,0,0,0]},{"iso":"BGR","continent":"Europe","population":6948445,"name":"Bulgaria","population_density":65.18,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,7,7,23,41,51,52,67,92,94,127,163,187,201,218,242,264,293,331,346,359,399,422,457,485,503,531,549,577,593,618,635,661,675,685,713,747,800,846,878,894,929,975,1024,1097,1234,1247,1300,1363,1399,1447,1506,1555,1594,1618,1652,1704,1778,1829,1872,1921,1965,1990,2023,2069,2100,2138,2175,2211,2235,2259,2292,2331,2372,2408,2427,2433,2443,2460,2477,2485,2499,2513,2519,2538,2560,2585,2627,2711,2727,2810,2889,2993,3086,3191,3266,3290,3341,3453,3542,3674,3755,3872,3905,3984,4114,4242,4408,4513,4625,4691,4831,4989,5154,5315,5497,5677,5740,5914,6102,6342,6672,6964,7175,7252,7411,7645,7877,8144,8442,8638,8733,8929,9254,9584,9853,10123,10312,10427,10621,10871,11155,11420,11690,11836,11955,12159,12414,12717,13014,13209,13343,13396,13512,13722,13893,13893,14243,14333,14365,14500,14669,14820,14962,15131,15131,15287,15386,15589,15751,15908,16065,16164,16190,16266,16454,16617,16775,16954,17050,17089,17146,17313,17435,17598,17799,17891,17918,18061,18216,18390,18544,18733,18819,18863,19014,19123,19283,19573,19828,19997,20055,20271,20547,20833,20833,21336,21518,21587,21870,22306,22743,23259,23871,24319,24402,24989,25774,26593,27507,28505,29108,29503,30527,31863,33335,34930,36519,37562,37889,40132,42701,45461,48150,51041,52844,54069,56496,60537,64591,68345,72184,74485,75160,78976,83366,87311,90725,94937,97435,98251,101770,106598,110536,114435,118418,120697,121820,124966,129348,133060,136628,139955,141747,142486,145300,148775,151913,155193,158807,160844,161421,164185,168165,171493,174568,177665,178952,179449,181544,184287,186246,188288],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.576,0.576,0.576,1.007,1.007,3.31,5.901,7.34,7.484,9.642,13.24,13.528,18.277,23.458,26.912,28.927,31.374,34.828,37.994,42.168,47.637,49.795,51.666,57.423,60.733,65.77,69.8,72.39,76.42,79.01,83.04,85.343,88.941,91.387,95.129,97.144,98.583,102.613,107.506,115.134,121.754,126.359,128.662,133.699,140.319,147.371,157.877,177.594,179.465,187.092,196.159,201.34,208.248,216.739,223.791,229.404,232.858,237.751,245.235,255.885,263.224,269.413,276.465,282.797,286.395,291.144,297.764,302.226,307.695,313.02,318.201,321.655,325.109,329.858,335.471,341.371,346.552,349.287,350.15,351.589,354.036,356.483,357.634,359.649,361.664,362.527,365.262,368.428,372.026,378.07,390.159,392.462,404.407,415.776,430.744,444.128,459.239,470.033,473.487,480.827,496.946,509.754,528.751,540.409,557.247,561.996,573.366,592.075,610.496,634.387,649.498,665.617,675.115,695.263,718.002,741.749,764.919,791.112,817.017,826.084,851.126,878.182,912.722,960.215,1002.239,1032.605,1043.687,1066.57,1100.246,1133.635,1172.061,1214.948,1243.156,1256.828,1285.036,1331.809,1379.301,1418.015,1456.873,1484.073,1500.624,1528.543,1564.523,1605.395,1643.533,1682.391,1703.403,1720.529,1749.888,1786.587,1830.194,1872.937,1901.001,1920.286,1927.913,1944.608,1974.83,1999.44,1999.44,2049.811,2062.764,2067.369,2086.798,2111.12,2132.851,2153.288,2177.61,2177.61,2200.061,2214.308,2243.524,2266.838,2289.433,2312.028,2326.276,2330.018,2340.955,2368.012,2391.47,2414.209,2439.97,2453.786,2459.399,2467.602,2491.637,2509.195,2532.653,2561.58,2574.821,2578.706,2599.287,2621.594,2646.635,2668.799,2695.999,2708.376,2714.708,2736.44,2752.127,2775.153,2816.889,2853.588,2877.91,2886.257,2917.343,2957.064,2998.225,2998.225,3070.615,3096.808,3106.738,3147.467,3210.215,3273.106,3347.368,3435.445,3499.92,3511.865,3596.344,3709.319,3827.187,3958.727,4102.357,4189.139,4245.986,4393.357,4585.63,4797.476,5027.024,5255.708,5405.814,5452.875,5775.681,6145.404,6542.615,6929.608,7345.672,7605.155,7781.453,8130.74,8712.309,9295.749,9836.014,10388.511,10719.665,10816.809,11365.996,11997.792,12565.545,13056.878,13663.057,14022.562,14139.998,14646.442,15341.274,15908.02,16469.152,17042.374,17370.361,17531.98,17984.743,18615.388,19149.608,19663.104,20141.917,20399.816,20506.171,20911.154,21411.265,21862.877,22334.925,22855.042,23148.201,23231.241,23629.028,24201.818,24680.774,25123.319,25569.03,25754.251,25825.778,26127.285,26522.049,26803.983,27097.861],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.432,0,2.303,2.591,1.439,0.144,2.159,3.598,0.288,4.749,5.181,3.454,2.015,2.447,3.454,3.166,4.174,5.469,2.159,1.871,5.757,3.31,5.037,4.03,2.591,4.03,2.591,4.03,2.303,3.598,2.447,3.742,2.015,1.439,4.03,4.893,7.628,6.62,4.605,2.303,5.037,6.62,7.052,10.506,19.717,1.871,7.628,9.067,5.181,6.908,8.491,7.052,5.613,3.454,4.893,7.484,10.65,7.34,6.188,7.052,6.332,3.598,4.749,6.62,4.461,5.469,5.325,5.181,3.454,3.454,4.749,5.613,5.901,5.181,2.734,0.864,1.439,2.447,2.447,1.151,2.015,2.015,0.864,2.734,3.166,3.598,6.045,12.089,2.303,11.945,11.369,14.967,13.384,15.111,10.794,3.454,7.34,16.119,12.809,18.997,11.657,16.838,4.749,11.369,18.709,18.421,23.89,15.111,16.119,9.499,20.148,22.739,23.746,23.171,26.193,25.905,9.067,25.042,27.056,34.54,47.493,42.024,30.367,11.082,22.883,33.677,33.389,38.426,42.887,28.208,13.672,28.208,46.773,47.493,38.714,38.858,27.2,16.55,27.92,35.979,40.872,38.138,38.858,21.012,17.126,29.359,36.699,43.607,42.743,28.064,19.285,7.628,16.694,30.223,24.61,0,50.371,12.953,4.605,19.429,24.322,21.731,20.436,24.322,0,22.451,14.248,29.215,23.315,22.595,22.595,14.248,3.742,10.938,27.056,23.458,22.739,25.761,13.816,5.613,8.203,24.034,17.558,23.458,28.927,13.24,3.886,20.58,22.307,25.042,22.163,27.2,12.377,6.332,21.731,15.687,23.027,41.736,36.699,24.322,8.347,31.086,39.721,41.16,0,72.39,26.193,9.93,40.729,62.748,62.892,74.261,88.077,64.475,11.945,84.479,112.975,117.868,131.54,143.629,86.782,56.847,147.371,192.273,211.846,229.548,228.684,150.106,47.061,322.806,369.723,397.211,386.993,416.064,259.483,176.298,349.287,581.569,583.44,540.265,552.498,331.153,97.144,549.188,631.796,567.753,491.333,606.179,359.505,117.436,506.444,694.832,566.746,561.133,573.222,327.987,161.619,452.763,630.645,534.22,513.496,478.812,257.899,106.355,404.983,500.112,451.612,472.048,520.116,293.159,83.04,397.787,572.79,478.956,442.545,445.711,185.221,71.527,301.506,394.765,281.934,293.879],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.432,0.432,2.735,5.326,6.765,6.909,9.068,12.666,12.522,17.271,20.149,21.012,21.588,23.891,25.186,24.754,28.64,29.36,26.338,24.755,28.497,29.36,30.943,31.807,30.224,28.785,29.217,31.376,27.922,28.21,25.62,25.332,24.756,22.165,23.604,24.467,29.792,32.814,34.972,33.533,36.555,41.736,44.758,50.371,62.46,57.711,60.734,67.498,67.642,67.93,69.369,65.915,51.811,53.394,50.659,49.076,54.545,54.977,52.674,52.674,53.393,53.537,53.393,52.529,46.34,44.469,43.606,41.735,38.857,38.713,38.713,37.706,39.146,38.858,36.267,31.95,29.935,28.928,26.626,22.164,18.278,15.112,13.242,15.112,16.839,17.99,21.588,32.526,32.814,42.744,53.249,65.482,75.7,87.213,91.962,83.327,88.364,92.538,93.978,98.008,96.281,98.008,91.963,99.878,111.247,113.549,124.63,120.744,125.206,117.867,133.266,144.636,149.673,154.423,156.726,167.52,160.468,176.011,182.919,194.72,218.467,237.32,241.494,226.671,240.487,249.122,255.455,259.341,254.735,240.919,224.224,241.35,265.24,279.056,284.381,284.813,269.126,257.468,271.716,279.487,273.586,264.231,264.375,246.529,236.455,249.264,258.043,265.671,267.542,257.468,237.895,224.511,224.079,224.943,212.854,169.247,176.875,161.764,147.084,158.885,166.513,158.021,153.847,178.169,127.798,137.296,146.939,156.725,155.718,156.582,158.741,148.667,152.409,140.896,153.704,147.947,147.371,150.537,141.758,133.123,137.584,150.68,141.182,141.182,147.37,134.849,124.919,139.886,153.99,154.998,159.603,163.345,146.795,139.887,157.732,152.839,153.559,170.253,184.789,181.911,177.881,202.635,220.625,246.098,223.071,253.725,243.219,228.827,261.209,292.871,316.042,349.143,437.22,429.305,415.057,489.606,561.852,616.972,685.62,754.988,753.693,746.065,881.491,989.285,1088.156,1199.836,1296.98,1303.457,1263.736,1529.695,1752.047,1956.985,2132.132,2318.648,2349.447,2375.639,2677.865,2936.628,3150.345,3293.399,3458.904,3373.993,3211.654,3584.544,3867.053,3853.237,3761.13,3827.044,3634.051,3420.334,3829.634,3975.278,3910.228,3903.608,3985.497,3707.305,3509.419,3844.746,3968.947,3808.335,3755.085,3672.764,3357.441,3135.809,3379.173,3426.522,3247.489,3185.317,3191.937,3006.284,2831.425,3122.857,3290.664,3269.508,3260.441,3234.104,2899.209,2677.577,2896.043,2893.021,2602.165,2417.088],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.761,0.966,0.987,1.295,1.748,1.789,2.138,2.508,2.796,3.063,3.104,3.084,3.495,3.413,3.454,3.269,3.248,3.721,3.701,3.968,3.947,3.536,3.804,3.906,3.66,3.516,3.31,3.084,3.248,2.961,2.796,2.796,3.166,3.742,4.338,4.461,4.503,5.017,5.387,5.695,6.106,7.977,7.586,8.347,8.923,8.717,8.697,8.409,6.6,7.134,6.538,5.942,6.271,6.805,6.641,6.517,6.723,7.134,6.949,6.559,5.983,5.572,5.469,5.222,5.058,5.037,4.852,4.585,4.749,4.811,4.79,4.441,4.071,3.783,3.454,3.002,2.323,1.871,1.768,1.768,1.953,2.056,2.22,2.919,4.359,4.4,5.983,7.216,8.902,10.3,11.596,11.411,11.575,10.917,11.596,11.287,12.089,11.596,12.459,12.644,13.22,13.59,14.392,15.091,15.584,15.481,16.16,17.414,17.99,18.75,18.648,20.231,21.629,21.567,22.266,22.883,24.425,27.899,30.161,30.798,31.086,30.778,31.723,31.559,30.264,30.387,30.079,30.449,31.209,33.08,35.095,35.136,34.561,34.417,34.828,34.787,33.245,32.299,32.217,32.217,31.333,31.415,31.621,31.723,32.114,32.772,31.23,30.983,29.626,27.817,26.892,24.178,18.072,21.259,20.354,19.922,20.313,19.47,19.059,21.978,18.257,16.407,18.956,18.216,18.915,19.141,19.449,19.203,21.238,18.565,18.092,17.784,17.805,17.825,18.277,18.216,18.483,18.092,17.661,16.818,16.921,17.373,17.291,17.044,18.812,18.565,19.634,19.449,19.203,19.079,19.429,19.593,18.648,18.36,21.156,22.513,24.219,24.507,25.843,29.277,31.867,25.905,31.004,31.271,31.497,32.875,36.164,39.269,49.878,52.119,57.587,57.875,64.125,71.301,79.154,87.337,95.273,98.46,104.874,113.859,125.187,138.613,152.614,164.765,173.811,172.413,197.475,222.825,249.306,271.798,298.566,314.192,332.654,336.437,366.701,393.305,415.201,434.691,444.93,433.622,462.179,469.355,467.114,460.124,467.792,471.842,474.741,468.635,477.64,477.496,487.468,482.76,478.257,484.569,476.9,467.731,463.084,456.279,442.792,432.779,424.884,418.059,399.411,387.61,381.689,387.589,392.626,389.296,388.268,398.65,402.557,398.342,387.713,372.293,370.648,356.894,331.462,303.316,282.078]},{"iso":"BFA","continent":"Africa","population":20903278,"name":"Burkina Faso","population_density":70.151,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,2,2,3,15,15,20,33,40,64,75,99,114,146,152,180,207,222,246,261,282,288,302,318,345,364,384,414,443,443,484,497,497,528,542,546,557,565,576,581,600,609,616,629,629,632,635,638,641,645,649,652,662,672,688,729,736,744,748,751,760,766,773,773,780,782,796,796,796,809,812,814,814,814,832,832,845,847,847,847,847,847,881,884,885,888,888,889,890,891,891,892,892,892,894,894,895,899,899,900,901,903,903,907,919,934,941,941,959,959,962,962,967,980,987,987,1000,1003,1003,1005,1020,1033,1036,1036,1037,1038,1038,1045,1047,1052,1065,1065,1066,1070,1075,1086,1086,1100,1105,1105,1106,1106,1143,1143,1150,1153,1153,1158,1158,1175,1175,1204,1211,1213,1228,1238,1240,1267,1280,1280,1285,1297,1297,1297,1320,1338,1338,1352,1352,1352,1352,1357,1368,1370,1370,1375,1408,1408,1452,1463,1466,1476,1486,1499,1514,1707,1717,1733,1748,1767,1797,1816,1846,1896,1907,1929,1950,1962,1973,2008,2028,2032,2056,2088,2123,2154,2167,2184,2197,2222,2241,2254,2271,2271,2294,2305,2305,2335,2343,2343,2381,2387,2406,2406,2414,2433,2444,2451,2459,2466,2466,2471,2477,2500,2500,2517,2530,2539,2550,2562,2565,2569,2581,2582,2586,2586,2609,2635,2641,2652,2652,2670,2686,2686,2703,2735,2754,2757,2777,2777,2816,2816,2856,2886,2931,3010,3062,3091,3156,3212,3315,3469,3469,3579,3579,3894,4030,4209,4300,4449,4611],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.048,0.096,0.096,0.096,0.096,0.144,0.718,0.718,0.957,1.579,1.914,3.062,3.588,4.736,5.454,6.985,7.272,8.611,9.903,10.62,11.768,12.486,13.491,13.778,14.447,15.213,16.505,17.414,18.37,19.806,21.193,21.193,23.154,23.776,23.776,25.259,25.929,26.12,26.647,27.029,27.555,27.795,28.704,29.134,29.469,30.091,30.091,30.234,30.378,30.522,30.665,30.856,31.048,31.191,31.67,32.148,32.913,34.875,35.21,35.593,35.784,35.927,36.358,36.645,36.98,36.98,37.315,37.41,38.08,38.08,38.08,38.702,38.846,38.941,38.941,38.941,39.802,39.802,40.424,40.52,40.52,40.52,40.52,40.52,42.146,42.29,42.338,42.481,42.481,42.529,42.577,42.625,42.625,42.673,42.673,42.673,42.768,42.768,42.816,43.008,43.008,43.055,43.103,43.199,43.199,43.39,43.964,44.682,45.017,45.017,45.878,45.878,46.021,46.021,46.261,46.883,47.217,47.217,47.839,47.983,47.983,48.079,48.796,49.418,49.562,49.562,49.609,49.657,49.657,49.992,50.088,50.327,50.949,50.949,50.997,51.188,51.427,51.954,51.954,52.623,52.863,52.863,52.91,52.91,54.68,54.68,55.015,55.159,55.159,55.398,55.398,56.211,56.211,57.599,57.933,58.029,58.747,59.225,59.321,60.613,61.234,61.234,61.474,62.048,62.048,62.048,63.148,64.009,64.009,64.679,64.679,64.679,64.679,64.918,65.444,65.54,65.54,65.779,67.358,67.358,69.463,69.989,70.133,70.611,71.089,71.711,72.429,81.662,82.14,82.906,83.623,84.532,85.967,86.876,88.312,90.703,91.23,92.282,93.287,93.861,94.387,96.061,97.018,97.21,98.358,99.889,101.563,103.046,103.668,104.481,105.103,106.299,107.208,107.83,108.643,108.643,109.744,110.27,110.27,111.705,112.088,112.088,113.906,114.193,115.102,115.102,115.484,116.393,116.919,117.254,117.637,117.972,117.972,118.211,118.498,119.598,119.598,120.412,121.034,121.464,121.99,122.565,122.708,122.899,123.473,123.521,123.713,123.713,124.813,126.057,126.344,126.87,126.87,127.731,128.497,128.497,129.31,130.841,131.75,131.893,132.85,132.85,134.716,134.716,136.629,138.064,140.217,143.997,146.484,147.872,150.981,153.66,158.588,165.955,165.955,171.217,171.217,186.287,192.793,201.356,205.709,212.837,220.587],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.048,0,0,0,0.048,0.574,0,0.239,0.622,0.335,1.148,0.526,1.148,0.718,1.531,0.287,1.34,1.292,0.718,1.148,0.718,1.005,0.287,0.67,0.765,1.292,0.909,0.957,1.435,1.387,0,1.961,0.622,0,1.483,0.67,0.191,0.526,0.383,0.526,0.239,0.909,0.431,0.335,0.622,0,0.144,0.144,0.144,0.144,0.191,0.191,0.144,0.478,0.478,0.765,1.961,0.335,0.383,0.191,0.144,0.431,0.287,0.335,0,0.335,0.096,0.67,0,0,0.622,0.144,0.096,0,0,0.861,0,0.622,0.096,0,0,0,0,1.627,0.144,0.048,0.144,0,0.048,0.048,0.048,0,0.048,0,0,0.096,0,0.048,0.191,0,0.048,0.048,0.096,0,0.191,0.574,0.718,0.335,0,0.861,0,0.144,0,0.239,0.622,0.335,0,0.622,0.144,0,0.096,0.718,0.622,0.144,0,0.048,0.048,0,0.335,0.096,0.239,0.622,0,0.048,0.191,0.239,0.526,0,0.67,0.239,0,0.048,0,1.77,0,0.335,0.144,0,0.239,0,0.813,0,1.387,0.335,0.096,0.718,0.478,0.096,1.292,0.622,0,0.239,0.574,0,0,1.1,0.861,0,0.67,0,0,0,0.239,0.526,0.096,0,0.239,1.579,0,2.105,0.526,0.144,0.478,0.478,0.622,0.718,9.233,0.478,0.765,0.718,0.909,1.435,0.909,1.435,2.392,0.526,1.052,1.005,0.574,0.526,1.674,0.957,0.191,1.148,1.531,1.674,1.483,0.622,0.813,0.622,1.196,0.909,0.622,0.813,0,1.1,0.526,0,1.435,0.383,0,1.818,0.287,0.909,0,0.383,0.909,0.526,0.335,0.383,0.335,0,0.239,0.287,1.1,0,0.813,0.622,0.431,0.526,0.574,0.144,0.191,0.574,0.048,0.191,0,1.1,1.244,0.287,0.526,0,0.861,0.765,0,0.813,1.531,0.909,0.144,0.957,0,1.866,0,1.914,1.435,2.153,3.779,2.488,1.387,3.11,2.679,4.927,7.367,0,5.262,0,15.069,6.506,8.563,4.353,7.128,7.75],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.048,0.048,0.048,0.048,0.096,0.67,0.67,0.909,1.483,1.818,2.966,3.492,4.592,4.736,6.267,6.315,7.033,7.99,7.56,8.182,7.752,8.039,6.795,7.178,6.603,6.603,6.794,6.603,7.32,7.702,7.415,8.706,8.563,7.271,7.845,7.558,6.314,5.453,5.836,4.401,4.018,4.927,3.875,3.54,3.971,3.445,3.206,2.824,2.729,1.964,1.724,1.58,1.102,1.58,1.914,2.535,4.352,4.543,4.735,4.735,4.735,4.688,4.497,4.067,2.106,2.106,1.819,2.298,2.154,1.723,2.058,1.867,1.963,1.628,1.532,1.723,1.723,2.345,1.819,1.675,1.579,1.579,1.579,2.345,2.489,1.915,1.963,1.963,2.011,2.059,2.107,0.48,0.384,0.336,0.192,0.288,0.24,0.24,0.383,0.383,0.383,0.431,0.527,0.431,0.622,1.148,1.675,2.01,1.962,2.775,2.679,2.823,2.632,2.297,2.201,2.201,2.201,1.962,2.106,1.962,2.058,2.537,2.537,2.346,2.346,1.772,1.676,1.676,1.915,1.293,0.91,1.388,1.388,1.388,1.531,1.77,1.961,1.865,2.296,1.913,1.913,1.913,1.722,3.253,2.727,3.062,2.536,2.297,2.536,2.488,3.301,1.531,2.918,2.918,2.87,3.588,3.827,3.923,4.402,5.024,3.637,3.541,4.019,3.301,2.823,3.827,3.396,2.774,3.444,3.205,2.631,2.631,2.87,2.296,1.531,1.531,1.1,2.679,2.679,4.784,5.071,4.689,5.071,5.549,5.932,5.071,14.304,12.677,12.916,13.49,13.921,14.878,15.165,15.882,9.041,9.089,9.376,9.663,9.328,8.419,9.184,8.706,6.505,7.127,7.606,8.275,9.184,9.28,8.419,8.084,9.089,8.85,7.941,7.08,5.597,6.075,5.788,5.166,5.405,4.879,4.257,5.262,5.549,5.358,4.832,5.215,4.689,4.832,5.167,3.732,3.78,2.871,3.11,3.014,3.205,2.679,3.157,3.396,3.492,4.018,4.353,4.21,3.301,3.875,3.11,2.679,2.248,2.822,3.492,3.635,3.97,3.396,4.209,4.783,4.783,4.496,4.783,5.405,5.023,5.98,5.119,6.22,6.22,7.321,7.225,8.469,12.104,13.635,15.022,16.266,18.945,21.958,27.89,25.737,27.22,24.732,38.414,41.81,47.694,47.12,46.881,54.631],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.096,0.096,0.123,0.212,0.26,0.424,0.492,0.574,0.677,0.861,0.813,0.957,0.977,1.005,1.005,1.005,0.929,0.929,0.834,0.759,0.841,0.806,0.841,0.902,1.059,0.964,1.134,1.039,0.909,0.984,0.875,0.704,0.779,0.554,0.54,0.574,0.492,0.458,0.478,0.492,0.437,0.383,0.369,0.26,0.219,0.198,0.137,0.157,0.205,0.253,0.342,0.601,0.622,0.649,0.656,0.608,0.601,0.533,0.301,0.253,0.246,0.232,0.308,0.246,0.205,0.246,0.267,0.232,0.219,0.123,0.246,0.246,0.246,0.239,0.226,0.226,0.226,0.103,0.335,0.267,0.26,0.28,0.28,0.287,0.294,0.068,0.048,0.048,0.027,0.027,0.034,0.027,0.027,0.055,0.048,0.055,0.062,0.062,0.062,0.082,0.137,0.239,0.28,0.273,0.383,0.383,0.376,0.294,0.226,0.267,0.314,0.191,0.28,0.28,0.28,0.26,0.273,0.314,0.335,0.246,0.232,0.239,0.226,0.171,0.096,0.109,0.198,0.191,0.191,0.219,0.205,0.267,0.232,0.239,0.273,0.267,0.246,0.212,0.39,0.39,0.342,0.328,0.328,0.355,0.355,0.219,0.219,0.369,0.396,0.41,0.478,0.547,0.444,0.629,0.519,0.472,0.492,0.472,0.403,0.39,0.362,0.396,0.396,0.458,0.376,0.376,0.376,0.253,0.205,0.219,0.123,0.157,0.383,0.383,0.649,0.649,0.656,0.724,0.759,0.622,0.724,1.743,1.736,1.825,1.859,1.92,2.037,2.064,0.95,1.223,1.189,1.237,1.251,1.128,1.073,1.107,0.902,0.854,0.868,0.943,1.1,1.237,1.087,1.066,1.128,1.134,1.046,0.895,0.8,0.711,0.752,0.738,0.567,0.642,0.608,0.492,0.752,0.636,0.69,0.69,0.54,0.615,0.69,0.478,0.492,0.41,0.41,0.39,0.301,0.383,0.335,0.396,0.437,0.499,0.54,0.581,0.444,0.472,0.437,0.355,0.321,0.246,0.321,0.478,0.492,0.485,0.478,0.574,0.683,0.526,0.465,0.642,0.697,0.718,0.731,0.622,0.888,0.772,0.827,0.902,1.189,1.592,1.948,1.879,2.324,2.433,2.932,3.677,3.137,3.533,3.335,5.044,5.59,6.11,5.679,6.698,7.053]},{"iso":"BDI","continent":"Africa","population":11890781,"name":"Burundi","population_density":423.062,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,3,3,3,3,3,3,3,3,3,5,5,5,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,23,42,42,42,42,42,42,42,42,42,42,42,42,63,63,63,63,63,63,63,83,83,83,83,83,85,85,85,85,85,104,104,104,104,104,144,144,144,144,144,144,170,170,170,170,170,170,191,191,191,191,191,191,191,191,191,191,269,269,269,303,310,310,310,322,328,328,345,345,361,361,378,378,387,387,387,395,395,395,395,395,400,400,405,408,408,408,409,410,412,412,413,413,416,422,422,426,429,430,430,430,430,431,433,445,445,445,445,448,448,451,460,462,466,466,466,469,469,471,472,472,472,472,473,473,473,473,474,474,476,477,483,485,485,502,506,508,510,513,513,513,514,514,515,515,515,517,524,525,529,529,529,531,536,542,549,550,550,551,553,555,557,557,558,559,560,582,585,589,589,597,606,606,606,612,612,614,615,620,623,624,627,628,630,631,641,641,649,656,662,664,673,673,677,681,681,681,688,689,689,692,692,694,694,698,716,720,720,723,728,729,729,735,741,751],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.168,0.168,0.252,0.252,0.252,0.252,0.252,0.252,0.252,0.252,0.252,0.42,0.42,0.42,0.42,0.42,0.42,0.42,0.42,0.42,0.42,0.42,0.925,0.925,0.925,0.925,0.925,0.925,0.925,0.925,0.925,0.925,1.261,1.261,1.261,1.261,1.261,1.261,1.261,1.261,1.261,1.261,1.261,1.261,1.261,1.261,1.261,1.934,3.532,3.532,3.532,3.532,3.532,3.532,3.532,3.532,3.532,3.532,3.532,3.532,5.298,5.298,5.298,5.298,5.298,5.298,5.298,6.98,6.98,6.98,6.98,6.98,7.148,7.148,7.148,7.148,7.148,8.746,8.746,8.746,8.746,8.746,12.11,12.11,12.11,12.11,12.11,12.11,14.297,14.297,14.297,14.297,14.297,14.297,16.063,16.063,16.063,16.063,16.063,16.063,16.063,16.063,16.063,16.063,22.623,22.623,22.623,25.482,26.071,26.071,26.071,27.08,27.584,27.584,29.014,29.014,30.36,30.36,31.789,31.789,32.546,32.546,32.546,33.219,33.219,33.219,33.219,33.219,33.64,33.64,34.06,34.312,34.312,34.312,34.396,34.48,34.649,34.649,34.733,34.733,34.985,35.49,35.49,35.826,36.078,36.162,36.162,36.162,36.162,36.247,36.415,37.424,37.424,37.424,37.424,37.676,37.676,37.929,38.685,38.854,39.19,39.19,39.19,39.442,39.442,39.611,39.695,39.695,39.695,39.695,39.779,39.779,39.779,39.779,39.863,39.863,40.031,40.115,40.62,40.788,40.788,42.218,42.554,42.722,42.89,43.143,43.143,43.143,43.227,43.227,43.311,43.311,43.311,43.479,44.068,44.152,44.488,44.488,44.488,44.656,45.077,45.582,46.17,46.254,46.254,46.338,46.507,46.675,46.843,46.843,46.927,47.011,47.095,48.945,49.198,49.534,49.534,50.207,50.964,50.964,50.964,51.468,51.468,51.637,51.721,52.141,52.394,52.478,52.73,52.814,52.982,53.066,53.907,53.907,54.58,55.169,55.673,55.842,56.598,56.598,56.935,57.271,57.271,57.271,57.86,57.944,57.944,58.196,58.196,58.365,58.365,58.701,60.215,60.551,60.551,60.803,61.224,61.308,61.308,61.813,62.317,63.158],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.084,0,0,0,0,0,0,0,0,0.168,0,0,0,0,0,0,0,0,0,0,0.505,0,0,0,0,0,0,0,0,0,0.336,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.673,1.598,0,0,0,0,0,0,0,0,0,0,0,1.766,0,0,0,0,0,0,1.682,0,0,0,0,0.168,0,0,0,0,1.598,0,0,0,0,3.364,0,0,0,0,0,2.187,0,0,0,0,0,1.766,0,0,0,0,0,0,0,0,0,6.56,0,0,2.859,0.589,0,0,1.009,0.505,0,1.43,0,1.346,0,1.43,0,0.757,0,0,0.673,0,0,0,0,0.42,0,0.42,0.252,0,0,0.084,0.084,0.168,0,0.084,0,0.252,0.505,0,0.336,0.252,0.084,0,0,0,0.084,0.168,1.009,0,0,0,0.252,0,0.252,0.757,0.168,0.336,0,0,0.252,0,0.168,0.084,0,0,0,0.084,0,0,0,0.084,0,0.168,0.084,0.505,0.168,0,1.43,0.336,0.168,0.168,0.252,0,0,0.084,0,0.084,0,0,0.168,0.589,0.084,0.336,0,0,0.168,0.42,0.505,0.589,0.084,0,0.084,0.168,0.168,0.168,0,0.084,0.084,0.084,1.85,0.252,0.336,0,0.673,0.757,0,0,0.505,0,0.168,0.084,0.42,0.252,0.084,0.252,0.084,0.168,0.084,0.841,0,0.673,0.589,0.505,0.168,0.757,0,0.336,0.336,0,0,0.589,0.084,0,0.252,0,0.168,0,0.336,1.514,0.336,0,0.252,0.42,0.084,0,0.505,0.505,0.841],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0,0.168,0.168,0.168,0.168,0.168,0.168,0.168,0.168,0,0,0,0.505,0.505,0.505,0.505,0.505,0.505,0.505,0.505,0,0,0.336,0.336,0.336,0.336,0.336,0.336,0.336,0.336,0,0,0,0,0,0,0,0.673,2.271,2.271,2.271,2.271,2.271,2.271,2.271,1.598,0,0,0,0,1.766,1.766,1.766,1.766,1.766,1.766,1.766,3.448,1.682,1.682,1.682,1.682,1.85,1.85,1.85,0.168,0.168,1.766,1.766,1.766,1.598,1.598,4.962,4.962,4.962,3.364,3.364,3.364,5.551,5.551,2.187,2.187,2.187,2.187,3.953,3.953,1.766,1.766,1.766,1.766,1.766,1.766,0,0,6.56,6.56,6.56,9.419,10.008,10.008,10.008,11.017,4.962,4.962,6.392,3.533,4.29,4.29,5.72,4.711,4.963,4.963,3.533,4.206,2.86,2.86,1.43,1.43,1.093,1.093,1.513,1.092,1.092,1.092,1.176,1.26,1.008,1.008,0.672,0.42,0.672,1.177,1.093,1.345,1.429,1.513,1.429,1.429,1.177,0.756,0.924,1.597,1.345,1.261,1.261,1.513,1.513,1.681,2.27,1.429,1.765,1.765,1.765,1.765,1.765,1.681,1.008,0.84,0.504,0.504,0.588,0.336,0.336,0.168,0.168,0.168,0.336,0.42,0.841,1.009,1.009,2.439,2.691,2.859,2.859,3.027,2.522,2.354,2.438,1.008,0.756,0.588,0.42,0.336,0.925,1.009,1.261,1.261,1.177,1.345,1.765,2.102,2.102,2.102,1.766,1.85,2.018,2.018,1.766,1.261,0.756,0.756,0.84,2.606,2.69,2.858,2.69,3.363,4.036,3.952,3.868,2.523,2.271,2.103,2.187,1.934,1.429,1.513,1.765,1.344,1.512,1.428,2.185,1.765,2.186,2.691,2.944,3.028,3.617,3.533,3.028,3.364,2.691,2.102,2.186,2.102,1.345,1.597,1.261,1.093,1.093,1.429,2.354,2.606,2.606,2.606,3.026,2.942,2.942,3.111,2.102,2.607],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.012,0.012,0.012,0,0,0.024,0.024,0.024,0.024,0.024,0.024,0.024,0,0,0,0,0.072,0.072,0.072,0.072,0.072,0.072,0.072,0,0,0,0.048,0.048,0.048,0.048,0.048,0.048,0.048,0,0,0,0,0,0,0,0,0.096,0.324,0.324,0.324,0.324,0.324,0.324,0.228,0,0,0,0,0,0.252,0.252,0.252,0.252,0.252,0.252,0.252,0.24,0.24,0.24,0.24,0.24,0.264,0.264,0.024,0.024,0.024,0.252,0.252,0.228,0.228,0.228,0.709,0.709,0.481,0.481,0.481,0.481,0.793,0.312,0.312,0.312,0.312,0.312,0.565,0.252,0.252,0.252,0.252,0.252,0.252,0,0,0,0.937,0.937,0.937,1.346,1.43,1.43,1.43,0.637,0.709,0.709,0.505,0.42,0.613,0.613,0.673,0.601,0.709,0.505,0.505,0.408,0.408,0.204,0.204,0.096,0.156,0.156,0.12,0.156,0.156,0.156,0.168,0.12,0.144,0.084,0.06,0.06,0.096,0.156,0.144,0.168,0.204,0.204,0.204,0.168,0.096,0.108,0.084,0.192,0.18,0.18,0.18,0.216,0.204,0.216,0.18,0.204,0.252,0.252,0.216,0.252,0.216,0.132,0.12,0.072,0.072,0.072,0.048,0.048,0.024,0.012,0.024,0.024,0.048,0.048,0.12,0.144,0.144,0.336,0.384,0.384,0.396,0.36,0.336,0.336,0.144,0.096,0.084,0.06,0.024,0.048,0.132,0.132,0.18,0.168,0.168,0.192,0.228,0.216,0.288,0.252,0.252,0.264,0.264,0.228,0.18,0.096,0.096,0.108,0.108,0.348,0.36,0.384,0.384,0.469,0.565,0.553,0.288,0.324,0.276,0.3,0.216,0.168,0.204,0.216,0.18,0.192,0.192,0.192,0.252,0.216,0.3,0.348,0.408,0.408,0.505,0.384,0.433,0.384,0.3,0.228,0.288,0.192,0.192,0.18,0.132,0.156,0.156,0.12,0.324,0.372,0.336,0.372,0.408,0.42,0.372,0.228,0.252,0.372]},{"iso":"KHM","continent":"Asia","population":16718971,"name":"Cambodia","population_density":90.672,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,3,3,5,7,7,7,33,35,37,51,53,84,87,91,96,96,99,99,103,107,109,109,110,114,114,114,114,115,117,119,119,120,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,123,123,124,124,124,124,124,124,124,125,125,125,125,125,125,125,125,126,126,126,126,126,126,128,128,128,128,128,129,129,129,129,130,130,130,130,139,141,141,141,141,141,141,141,141,141,141,141,141,141,141,156,156,165,165,166,171,171,171,171,171,197,198,202,202,225,225,226,226,226,234,239,240,240,240,243,243,243,246,248,251,251,268,272,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,274,274,274,274,274,274,274,274,274,274,274,274,275,275,275,275,275,275,275,275,275,275,275,275,275,275,276,276,277,277,277,278,278,278,278,280,280,281,281,283,283,283,283,283,283,283,283,283,283,285,286,286,286,287,287,287,288,290,290,291,291,291,292,292,292,292,292,294,295,297,300,300,301,301,302,302,302,303,304,304,304,305,306,306,306,307,307,307,308,315,323,326,329,331,335,345,346,348,350,354,356,357,357,359,359,362,362,362,362],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.12,0.12,0.12,0.179,0.179,0.299,0.419,0.419,0.419,1.974,2.093,2.213,3.05,3.17,5.024,5.204,5.443,5.742,5.742,5.921,5.921,6.161,6.4,6.52,6.52,6.579,6.819,6.819,6.819,6.819,6.878,6.998,7.118,7.118,7.177,7.297,7.297,7.297,7.297,7.297,7.297,7.297,7.297,7.297,7.297,7.297,7.297,7.297,7.297,7.297,7.297,7.297,7.297,7.297,7.297,7.297,7.297,7.297,7.297,7.297,7.297,7.297,7.297,7.297,7.297,7.297,7.297,7.297,7.297,7.297,7.297,7.297,7.297,7.297,7.357,7.357,7.417,7.417,7.417,7.417,7.417,7.417,7.417,7.477,7.477,7.477,7.477,7.477,7.477,7.477,7.477,7.536,7.536,7.536,7.536,7.536,7.536,7.656,7.656,7.656,7.656,7.656,7.716,7.716,7.716,7.716,7.776,7.776,7.776,7.776,8.314,8.434,8.434,8.434,8.434,8.434,8.434,8.434,8.434,8.434,8.434,8.434,8.434,8.434,8.434,9.331,9.331,9.869,9.869,9.929,10.228,10.228,10.228,10.228,10.228,11.783,11.843,12.082,12.082,13.458,13.458,13.518,13.518,13.518,13.996,14.295,14.355,14.355,14.355,14.534,14.534,14.534,14.714,14.833,15.013,15.013,16.03,16.269,16.329,16.329,16.329,16.329,16.329,16.329,16.329,16.329,16.329,16.329,16.329,16.329,16.329,16.329,16.329,16.329,16.329,16.329,16.389,16.389,16.389,16.389,16.389,16.389,16.389,16.389,16.389,16.389,16.389,16.389,16.448,16.448,16.448,16.448,16.448,16.448,16.448,16.448,16.448,16.448,16.448,16.448,16.448,16.448,16.508,16.508,16.568,16.568,16.568,16.628,16.628,16.628,16.628,16.747,16.747,16.807,16.807,16.927,16.927,16.927,16.927,16.927,16.927,16.927,16.927,16.927,16.927,17.047,17.106,17.106,17.106,17.166,17.166,17.166,17.226,17.346,17.346,17.405,17.405,17.405,17.465,17.465,17.465,17.465,17.465,17.585,17.645,17.764,17.944,17.944,18.004,18.004,18.063,18.063,18.063,18.123,18.183,18.183,18.183,18.243,18.303,18.303,18.303,18.362,18.362,18.362,18.422,18.841,19.319,19.499,19.678,19.798,20.037,20.635,20.695,20.815,20.934,21.174,21.293,21.353,21.353,21.473,21.473,21.652,21.652,21.652,21.652],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.06,0,0,0.06,0,0.12,0.12,0,0,1.555,0.12,0.12,0.837,0.12,1.854,0.179,0.239,0.299,0,0.179,0,0.239,0.239,0.12,0,0.06,0.239,0,0,0,0.06,0.12,0.12,0,0.06,0.12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.06,0,0.06,0,0,0,0,0,0,0.06,0,0,0,0,0,0,0,0.06,0,0,0,0,0,0.12,0,0,0,0,0.06,0,0,0,0.06,0,0,0,0.538,0.12,0,0,0,0,0,0,0,0,0,0,0,0,0,0.897,0,0.538,0,0.06,0.299,0,0,0,0,1.555,0.06,0.239,0,1.376,0,0.06,0,0,0.478,0.299,0.06,0,0,0.179,0,0,0.179,0.12,0.179,0,1.017,0.239,0.06,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.06,0,0,0,0,0,0,0,0,0,0,0,0.06,0,0,0,0,0,0,0,0,0,0,0,0,0,0.06,0,0.06,0,0,0.06,0,0,0,0.12,0,0.06,0,0.12,0,0,0,0,0,0,0,0,0,0.12,0.06,0,0,0.06,0,0,0.06,0.12,0,0.06,0,0,0.06,0,0,0,0,0.12,0.06,0.12,0.179,0,0.06,0,0.06,0,0,0.06,0.06,0,0,0.06,0.06,0,0,0.06,0,0,0.06,0.419,0.478,0.179,0.179,0.12,0.239,0.598,0.06,0.12,0.12,0.239,0.12,0.06,0,0.12,0,0.179,0,0,0],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.06,0.06,0.06,0.12,0.12,0.24,0.36,0.36,0.3,1.855,1.975,2.035,2.872,2.872,4.606,4.785,5.024,3.768,3.648,3.707,2.87,2.989,1.374,1.315,1.076,0.837,1.076,0.897,0.897,0.658,0.479,0.479,0.599,0.539,0.36,0.48,0.48,0.48,0.42,0.3,0.18,0.18,0.12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.06,0.06,0.12,0.12,0.12,0.12,0.12,0.12,0.06,0.12,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.18,0.18,0.12,0.12,0.12,0.18,0.18,0.18,0.06,0.12,0.12,0.12,0.12,0.598,0.718,0.718,0.718,0.658,0.658,0.658,0.658,0.12,0,0,0,0,0,0,0.897,0.897,1.435,1.435,1.495,1.794,1.794,1.794,0.897,0.897,1.914,1.974,2.153,1.854,3.23,3.23,3.29,3.29,1.735,2.153,2.213,2.273,0.897,0.897,1.016,1.016,1.016,0.717,0.538,0.657,0.657,1.674,1.734,1.794,1.794,1.615,1.495,1.316,1.316,0.299,0.06,0,0,0,0,0,0,0,0,0,0,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0,0,0,0,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0,0,0,0,0,0,0.06,0.06,0.12,0.12,0.12,0.18,0.18,0.18,0.12,0.24,0.18,0.24,0.24,0.3,0.3,0.3,0.3,0.18,0.18,0.12,0.12,0,0,0.12,0.18,0.18,0.18,0.24,0.24,0.24,0.3,0.3,0.24,0.3,0.3,0.24,0.3,0.3,0.24,0.12,0.12,0.18,0.24,0.36,0.479,0.479,0.539,0.539,0.599,0.479,0.419,0.359,0.24,0.24,0.18,0.24,0.24,0.24,0.24,0.24,0.18,0.18,0.24,0.599,1.017,1.196,1.375,1.435,1.674,2.272,2.272,1.973,1.615,1.675,1.616,1.556,1.317,0.839,0.779,0.838,0.718,0.479,0.359],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.009,0.009,0.009,0.017,0.017,0.034,0.051,0.043,0.043,0.265,0.273,0.291,0.393,0.393,0.658,0.684,0.496,0.521,0.504,0.41,0.393,0.162,0.171,0.154,0.111,0.12,0.128,0.128,0.094,0.06,0.051,0.068,0.077,0.043,0.051,0.068,0.068,0.06,0.043,0.026,0.026,0.017,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.009,0.009,0.017,0.017,0.017,0.017,0.017,0.009,0.009,0.009,0.009,0.009,0.009,0.009,0.009,0.009,0,0.009,0.009,0.009,0.009,0.009,0.009,0.026,0.017,0.017,0.017,0.017,0.026,0.026,0.009,0.009,0.017,0.017,0.017,0.009,0.085,0.103,0.103,0.094,0.094,0.094,0.094,0.017,0,0,0,0,0,0,0,0.128,0.128,0.205,0.205,0.214,0.256,0.256,0.128,0.128,0.051,0.273,0.273,0.265,0.265,0.461,0.461,0.47,0.248,0.239,0.273,0.316,0.128,0.128,0.12,0.145,0.145,0.077,0.06,0.068,0.094,0.094,0.214,0.248,0.256,0.231,0.214,0.188,0.188,0.043,0.009,0,0,0,0,0,0,0,0,0,0,0,0.009,0.009,0.009,0.009,0.009,0.009,0.009,0,0,0,0,0,0.009,0.009,0.009,0.009,0.009,0.009,0.009,0,0,0,0,0,0,0,0.009,0.009,0.017,0.017,0.017,0.026,0.026,0.017,0.017,0.026,0.026,0.034,0.026,0.043,0.043,0.043,0.026,0.026,0.017,0.017,0,0,0,0.017,0.026,0.026,0.026,0.034,0.034,0.034,0.026,0.034,0.034,0.043,0.034,0.034,0.043,0.034,0.017,0.017,0.009,0.026,0.034,0.043,0.068,0.068,0.077,0.077,0.068,0.06,0.043,0.026,0.034,0.026,0.026,0.026,0.034,0.034,0.026,0.026,0.026,0.026,0.026,0.077,0.145,0.171,0.188,0.205,0.239,0.316,0.265,0.214,0.205,0.214,0.214,0.188,0.103,0.111,0.094,0.103,0.068,0.051,0.043]},{"iso":"CMR","continent":"Africa","population":26545864,"name":"Cameroon","population_density":50.885,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,2,2,2,2,2,2,2,4,10,10,13,20,27,40,56,66,75,75,91,91,139,139,193,233,306,509,555,650,658,658,730,730,820,820,820,820,848,848,996,996,1017,1017,1163,1163,1163,1334,1430,1518,1621,1705,1705,1832,1832,1832,2077,2077,2104,2104,2265,2267,2267,2274,2579,2689,2689,2800,2954,3105,3105,3105,3529,3529,3733,4288,4400,4400,4890,4890,5436,5436,5436,5436,5904,5904,6397,6585,6585,6789,7392,7599,7908,8060,8312,8681,8681,8681,8681,8681,9864,9864,9864,9864,10638,11610,11892,12041,12270,12592,12592,12592,12592,12592,12592,12592,12592,12592,12592,12592,12592,12592,14916,14916,14916,14916,15173,15173,15173,15173,15173,16157,16157,16157,16157,16157,16522,16522,16522,16708,16708,16708,17110,17179,17255,17255,17255,17255,17255,17255,17718,17718,17718,17718,18042,18042,18042,18213,18263,18308,18469,18469,18469,18582,18599,18624,18762,18762,18762,18762,18762,18973,18973,19142,19142,19142,19142,19142,19409,19460,19604,19604,19604,19604,19604,19848,19848,20009,20009,20009,20167,20228,20271,20303,20303,20371,20431,20431,20598,20598,20690,20712,20712,20735,20735,20838,20838,20838,20838,20924,20924,20924,20924,20924,20924,21203,21203,21203,21203,21203,21203,21441,21441,21441,21441,21441,21506,21570,21570,21570,21570,21570,21570,21793,21793,21793,21793,21793,21793,22103,22103,22103,22103,22103,22103,22342,22421,22421,22421,22490,22490,22583,22692,22692,22692,22896,22896,23528,23528,23528,23528,23842,23869,23915,24022,24117,24117,24117,24445,24487,24487,24487,24752,24752,24752,24752,24752,24963,24963,25087,25143,25143,25214,25359,25472,25472],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.038,0.038,0.075,0.075,0.075,0.075,0.075,0.075,0.075,0.075,0.151,0.377,0.377,0.49,0.753,1.017,1.507,2.11,2.486,2.825,2.825,3.428,3.428,5.236,5.236,7.27,8.777,11.527,19.174,20.907,24.486,24.787,24.787,27.5,27.5,30.89,30.89,30.89,30.89,31.945,31.945,37.52,37.52,38.311,38.311,43.811,43.811,43.811,50.253,53.869,57.184,61.064,64.228,64.228,69.013,69.013,69.013,78.242,78.242,79.259,79.259,85.324,85.399,85.399,85.663,97.153,101.296,101.296,105.478,111.279,116.967,116.967,116.967,132.94,132.94,140.625,161.532,165.751,165.751,184.209,184.209,204.778,204.778,204.778,204.778,222.408,222.408,240.979,248.061,248.061,255.746,278.461,286.259,297.9,303.625,313.118,327.019,327.019,327.019,327.019,327.019,371.583,371.583,371.583,371.583,400.74,437.356,447.979,453.592,462.219,474.349,474.349,474.349,474.349,474.349,474.349,474.349,474.349,474.349,474.349,474.349,474.349,474.349,561.895,561.895,561.895,561.895,571.577,571.577,571.577,571.577,571.577,608.645,608.645,608.645,608.645,608.645,622.395,622.395,622.395,629.401,629.401,629.401,644.545,647.144,650.007,650.007,650.007,650.007,650.007,650.007,667.449,667.449,667.449,667.449,679.654,679.654,679.654,686.096,687.979,689.674,695.739,695.739,695.739,699.996,700.636,701.578,706.777,706.777,706.777,706.777,706.777,714.725,714.725,721.092,721.092,721.092,721.092,721.092,731.15,733.071,738.495,738.495,738.495,738.495,738.495,747.687,747.687,753.752,753.752,753.752,759.704,762.002,763.622,764.827,764.827,767.389,769.649,769.649,775.94,775.94,779.406,780.235,780.235,781.101,781.101,784.981,784.981,784.981,784.981,788.221,788.221,788.221,788.221,788.221,788.221,798.731,798.731,798.731,798.731,798.731,798.731,807.696,807.696,807.696,807.696,807.696,810.145,812.556,812.556,812.556,812.556,812.556,812.556,820.957,820.957,820.957,820.957,820.957,820.957,832.634,832.634,832.634,832.634,832.634,832.634,841.638,844.614,844.614,844.614,847.213,847.213,850.716,854.822,854.822,854.822,862.507,862.507,886.315,886.315,886.315,886.315,898.144,899.161,900.894,904.924,908.503,908.503,908.503,920.859,922.441,922.441,922.441,932.424,932.424,932.424,932.424,932.424,940.372,940.372,945.044,947.153,947.153,949.828,955.29,959.547,959.547],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.038,0,0,0,0,0,0,0,0.075,0.226,0,0.113,0.264,0.264,0.49,0.603,0.377,0.339,0,0.603,0,1.808,0,2.034,1.507,2.75,7.647,1.733,3.579,0.301,0,2.712,0,3.39,0,0,0,1.055,0,5.575,0,0.791,0,5.5,0,0,6.442,3.616,3.315,3.88,3.164,0,4.784,0,0,9.229,0,1.017,0,6.065,0.075,0,0.264,11.49,4.144,0,4.181,5.801,5.688,0,0,15.972,0,7.685,20.907,4.219,0,18.459,0,20.568,0,0,0,17.63,0,18.572,7.082,0,7.685,22.715,7.798,11.64,5.726,9.493,13.9,0,0,0,0,44.564,0,0,0,29.157,36.616,10.623,5.613,8.627,12.13,0,0,0,0,0,0,0,0,0,0,0,0,87.547,0,0,0,9.681,0,0,0,0,37.068,0,0,0,0,13.75,0,0,7.007,0,0,15.144,2.599,2.863,0,0,0,0,0,17.442,0,0,0,12.205,0,0,6.442,1.884,1.695,6.065,0,0,4.257,0.64,0.942,5.199,0,0,0,0,7.949,0,6.366,0,0,0,0,10.058,1.921,5.425,0,0,0,0,9.192,0,6.065,0,0,5.952,2.298,1.62,1.205,0,2.562,2.26,0,6.291,0,3.466,0.829,0,0.866,0,3.88,0,0,0,3.24,0,0,0,0,0,10.51,0,0,0,0,0,8.966,0,0,0,0,2.449,2.411,0,0,0,0,0,8.401,0,0,0,0,0,11.678,0,0,0,0,0,9.003,2.976,0,0,2.599,0,3.503,4.106,0,0,7.685,0,23.808,0,0,0,11.829,1.017,1.733,4.031,3.579,0,0,12.356,1.582,0,0,9.983,0,0,0,0,7.949,0,4.671,2.11,0,2.675,5.462,4.257,0],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.038,0.038,0.038,0.038,0.038,0.038,0.038,0.038,0.075,0.301,0.301,0.414,0.678,0.942,1.432,2.035,2.337,2.45,2.45,2.94,2.676,4.22,3.73,5.161,6.291,8.702,16.349,17.479,21.058,19.551,19.551,20.229,18.722,19.362,11.715,9.982,6.403,7.157,7.157,10.02,10.02,7.421,7.421,12.921,12.921,11.866,18.308,16.349,19.664,22.753,25.917,20.417,25.201,25.201,18.759,24.372,21.057,18.194,15.03,21.095,16.386,16.386,16.65,18.911,23.055,22.038,26.219,25.955,31.568,31.568,31.304,35.786,31.642,39.327,56.053,54.471,48.783,67.242,67.242,71.838,71.838,64.153,43.246,56.657,56.657,56.77,63.852,43.284,50.969,73.684,81.482,75.492,81.218,72.139,78.957,78.957,71.272,48.557,40.759,73.683,67.957,58.464,44.564,73.721,110.337,120.96,126.573,90.636,102.766,102.766,102.766,73.609,36.993,26.37,20.757,12.13,0,0,0,0,0,87.547,87.547,87.547,87.547,97.228,97.228,97.228,97.228,9.681,46.749,46.749,46.749,37.068,37.068,50.818,50.818,50.818,20.757,20.757,20.757,35.901,38.5,27.613,27.613,27.613,20.606,20.606,20.606,22.904,20.305,17.442,17.442,29.647,29.647,29.647,36.089,20.531,22.226,28.291,28.291,16.086,20.343,20.983,15.483,18.798,17.103,11.038,11.038,11.038,14.73,14.09,19.514,14.315,14.315,14.315,14.315,24.373,18.345,23.77,17.404,17.404,17.404,17.404,26.596,16.538,20.682,15.257,15.257,21.209,23.507,25.127,17.14,17.14,13.637,15.897,15.897,16.236,13.938,15.784,15.408,15.408,13.712,11.452,15.332,9.041,9.041,5.575,7.986,7.986,7.12,7.12,3.24,3.24,13.75,13.75,10.51,10.51,10.51,10.51,19.476,19.476,8.966,8.966,8.966,11.415,13.826,13.826,4.86,4.86,4.86,4.86,13.261,10.812,8.401,8.401,8.401,8.401,20.079,20.079,11.678,11.678,11.678,11.678,20.681,23.657,11.979,11.979,14.578,14.578,18.081,22.187,13.184,10.208,17.893,17.893,39.102,39.102,35.599,31.493,43.322,44.339,38.387,42.418,22.189,22.189,22.189,34.545,24.298,23.281,21.548,27.5,23.921,23.921,23.921,11.565,17.932,17.932,22.603,14.73,14.73,17.405,22.867,27.124,19.175],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.005,0.005,0.005,0,0.011,0.043,0.043,0.059,0.097,0.135,0.204,0.28,0.301,0.35,0.334,0.382,0.344,0.533,0.447,0.683,0.85,1.243,2.249,2.497,2.75,2.793,2.502,2.675,2.282,1.674,1.426,0.915,0.872,1.022,0.635,1.431,0.947,1.06,1.06,1.846,1.695,1.695,1.819,2.336,2.696,3.25,2.917,2.917,3.6,2.68,2.163,3.008,2.454,2.147,2.147,2.33,2.341,2.341,1.06,2.702,3.148,3.148,2.879,3.697,4.51,4.472,2.831,4.52,4.52,5.021,7.179,6.969,6.969,9.606,7.324,10.263,9.165,6.178,5.575,8.094,5.457,8.11,6.183,6.183,7.281,10.526,9.122,10.785,8.949,9.294,11.28,10.182,6.937,5.823,4.16,9.708,8.352,6.366,6.366,10.532,15.762,17.28,11.716,12.948,14.681,14.681,10.515,5.285,3.767,2.965,1.733,0,0,0,0,0,0,12.507,12.507,12.507,12.507,13.89,13.89,13.89,1.383,1.383,6.678,6.678,5.295,5.295,5.295,7.26,7.26,1.964,2.965,2.965,2.965,5.129,3.536,3.945,3.945,2.944,2.944,2.944,0.78,2.901,2.492,2.492,2.492,4.235,4.235,4.235,2.664,2.933,3.175,4.042,2.298,2.298,2.906,2.077,1.943,2.443,1.577,1.577,1.577,0.969,2.013,1.878,2.045,2.045,2.045,2.045,2.045,2.346,2.621,2.486,2.486,2.486,2.486,2.486,2.362,2.088,2.18,2.18,2.18,3.03,3.358,2.276,2.449,1.582,1.948,2.271,1.421,1.991,1.76,2.083,2.201,1.835,1.636,1.636,1.292,1.292,0.796,0.678,1.141,1.017,1.017,0.463,0.463,0.463,1.964,1.501,1.501,1.501,1.501,1.501,2.782,1.281,1.281,1.281,1.281,1.631,1.975,0.694,0.694,0.694,0.694,0.694,1.544,1.2,1.2,1.2,1.2,1.2,2.868,1.668,1.668,1.668,1.668,1.668,2.954,1.711,1.711,1.711,2.083,2.083,2.583,1.884,1.458,1.458,2.556,2.185,5.586,5.086,4.499,4.499,6.189,5.236,5.484,2.658,3.17,3.17,3.17,3.245,3.326,3.078,2.502,3.417,3.417,3.417,1.652,1.426,2.562,2.562,1.803,2.104,2.104,2.486,3.267,2.739,2.739]},{"iso":"CAN","continent":"North America","population":37742157,"name":"Canada","population_density":4.037,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,2,2,4,4,4,4,4,5,5,7,7,7,7,7,7,7,7,7,7,8,8,8,8,9,9,9,10,11,11,13,14,20,24,27,30,33,37,49,54,64,77,79,108,117,193,198,252,415,478,657,800,943,1277,1469,2088,2790,3251,4042,4682,5576,6280,7398,8527,9560,11284,12437,12978,15756,16563,17872,19141,20654,22059,23316,24299,25680,27035,28209,30809,32814,34356,35633,37658,39402,41663,43299,44919,46371,48033,49616,51150,52865,54457,56343,57926,60504,61957,63215,64694,66201,67674,68918,70091,71264,72419,73568,74781,75959,77206,78332,79411,80493,81575,82742,83947,85151,86106,87119,88090,88989,89976,90909,91681,92479,93288,93960,94641,95269,95947,96475,97178,97779,98241,98720,99159,99595,100043,100404,100763,101087,101491,101877,102314,102762,103078,103418,103767,104087,104463,104629,104878,105193,105830,106097,106288,106643,106962,107185,107394,107815,108023,108334,108656,108984,109150,109348,109984,110350,110693,111144,111559,111875,112168,112938,113473,113790,114398,115115,115470,115789,116471,116871,117357,117677,118281,118523,118768,118973,119659,120033,120387,120903,121148,121367,122053,122389,122703,123180,123605,123825,124004,124218,125084,125408,125625,126319,126560,126817,127594,127903,128380,128836,129342,129639,129888,130918,131422,131941,132527,133141,133511,133890,134295,135757,136135,136956,137676,138164,138640,140098,140900,141852,142879,144053,144607,145750,147583,148855,149939,151087,152717,153770,155428,157219,158991,161107,162930,165054,166360,168501,171384,173756,175380,177730,180625,182767,184403,185378,189489,192064,194362,196928,197067,200804,204111,206349,209036,211617,214519,216051,218874,222973,225703,228366,231383,234939,237313,239649,243178,247916,250698,253482,258875,263221,267165,272036,276481,280465,285939,290709,295139,299440,305473,309935,314453,319247,324234,329191,333936,340731,346013,350971,356650,362604,368279,373662,381557,387052,393506,399770,406189,412543,418848,426572,432743,439142,445828,452543,458527,464443,472820,479064,485576,492582],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.026,0.026,0.053,0.053,0.053,0.106,0.106,0.106,0.106,0.106,0.132,0.132,0.185,0.185,0.185,0.185,0.185,0.185,0.185,0.185,0.185,0.185,0.212,0.212,0.212,0.212,0.238,0.238,0.238,0.265,0.291,0.291,0.344,0.371,0.53,0.636,0.715,0.795,0.874,0.98,1.298,1.431,1.696,2.04,2.093,2.862,3.1,5.114,5.246,6.677,10.996,12.665,17.408,21.196,24.985,33.835,38.922,55.323,73.923,86.137,107.095,124.052,147.739,166.392,196.014,225.928,253.298,298.976,329.525,343.86,417.464,438.846,473.529,507.152,547.24,584.466,617.771,643.816,680.406,716.308,747.414,816.302,869.426,910.282,944.117,997.77,1043.978,1103.885,1147.232,1190.155,1228.626,1272.662,1314.604,1355.248,1400.688,1442.869,1492.84,1534.782,1603.088,1641.586,1674.918,1714.104,1754.033,1793.061,1826.022,1857.101,1888.18,1918.783,1949.226,1981.365,2012.577,2045.617,2075.451,2104.04,2132.708,2161.376,2192.297,2224.224,2256.124,2281.428,2308.268,2333.995,2357.814,2383.965,2408.686,2429.14,2450.284,2471.719,2489.524,2507.567,2524.207,2542.171,2556.16,2574.787,2590.71,2602.951,2615.643,2627.274,2638.826,2650.696,2660.261,2669.773,2678.358,2689.062,2699.289,2710.868,2722.738,2731.11,2740.119,2749.366,2757.844,2767.807,2772.205,2778.802,2787.149,2804.026,2811.101,2816.161,2825.567,2834.019,2839.928,2845.465,2856.62,2862.131,2870.371,2878.903,2887.593,2891.992,2897.238,2914.089,2923.786,2932.874,2944.824,2955.819,2964.192,2971.955,2992.357,3006.532,3014.931,3031.04,3050.038,3059.444,3067.896,3085.966,3096.564,3109.441,3117.919,3133.923,3140.335,3146.826,3152.258,3170.434,3180.343,3189.722,3203.394,3209.885,3215.688,3233.864,3242.766,3251.086,3263.724,3274.985,3280.814,3285.557,3291.227,3314.172,3322.757,3328.506,3346.894,3353.279,3360.089,3380.676,3388.863,3401.501,3413.583,3426.99,3434.859,3441.457,3468.747,3482.101,3495.852,3511.379,3527.647,3537.45,3547.492,3558.223,3596.959,3606.975,3628.727,3647.804,3660.734,3673.346,3711.977,3733.226,3758.45,3785.661,3816.766,3831.445,3861.729,3910.296,3943.998,3972.719,4003.136,4046.324,4074.224,4118.154,4165.607,4212.557,4268.622,4316.923,4373.2,4407.803,4464.53,4540.917,4603.764,4646.793,4709.058,4785.763,4842.516,4885.863,4911.696,5020.619,5088.845,5149.732,5217.72,5221.403,5320.417,5408.037,5467.335,5538.528,5606.913,5683.803,5724.395,5799.192,5907.797,5980.13,6050.688,6130.625,6224.843,6287.743,6349.637,6443.14,6568.676,6642.387,6716.15,6859.041,6974.191,7078.689,7207.749,7325.522,7431.08,7576.117,7702.501,7819.876,7933.834,8093.682,8211.905,8331.612,8458.632,8590.765,8722.104,8847.825,9027.862,9167.812,9299.177,9449.645,9607.4,9757.762,9900.388,10109.571,10255.164,10426.166,10592.134,10762.209,10930.562,11097.617,11302.269,11465.773,11635.318,11812.467,11990.385,12148.935,12305.682,12527.636,12693.074,12865.613,13051.241],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.026,0,0,0.053,0,0,0,0,0.026,0,0.053,0,0,0,0,0,0,0,0,0,0.026,0,0,0,0.026,0,0,0.026,0.026,0,0.053,0.026,0.159,0.106,0.079,0.079,0.079,0.106,0.318,0.132,0.265,0.344,0.053,0.768,0.238,2.014,0.132,1.431,4.319,1.669,4.743,3.789,3.789,8.85,5.087,16.401,18.6,12.214,20.958,16.957,23.687,18.653,29.622,29.913,27.37,45.678,30.549,14.334,73.605,21.382,34.683,33.623,40.088,37.226,33.305,26.045,36.59,35.901,31.106,68.888,53.124,40.856,33.835,53.654,46.208,59.906,43.347,42.923,38.472,44.036,41.942,40.644,45.44,42.181,49.971,41.942,68.306,38.498,33.331,39.187,39.929,39.028,32.96,31.079,31.079,30.602,30.443,32.139,31.212,33.04,29.834,28.589,28.668,28.668,30.92,31.927,31.901,25.303,26.84,25.727,23.82,26.151,24.72,20.455,21.143,21.435,17.805,18.043,16.639,17.964,13.99,18.626,15.924,12.241,12.691,11.632,11.552,11.87,9.565,9.512,8.585,10.704,10.227,11.579,11.87,8.373,9.008,9.247,8.479,9.962,4.398,6.597,8.346,16.878,7.074,5.061,9.406,8.452,5.909,5.538,11.155,5.511,8.24,8.532,8.691,4.398,5.246,16.851,9.697,9.088,11.95,10.996,8.373,7.763,20.402,14.175,8.399,16.109,18.997,9.406,8.452,18.07,10.598,12.877,8.479,16.003,6.412,6.491,5.432,18.176,9.909,9.379,13.672,6.491,5.803,18.176,8.903,8.32,12.638,11.261,5.829,4.743,5.67,22.945,8.585,5.75,18.388,6.385,6.809,20.587,8.187,12.638,12.082,13.407,7.869,6.597,27.29,13.354,13.751,15.526,16.268,9.803,10.042,10.731,38.737,10.015,21.753,19.077,12.93,12.612,38.631,21.249,25.224,27.211,31.106,14.679,30.284,48.566,33.702,28.721,30.417,43.188,27.9,43.93,47.454,46.95,56.065,48.301,56.277,34.603,56.727,76.387,62.847,43.029,62.265,76.705,56.754,43.347,25.833,108.923,68.226,60.887,67.988,3.683,99.014,87.621,59.297,71.194,68.385,76.89,40.591,74.797,108.605,72.333,70.558,79.937,94.218,62.9,61.894,93.503,125.536,73.711,73.764,142.891,115.15,104.499,129.06,117.773,105.558,145.037,126.384,117.375,113.957,159.848,118.223,119.707,127.02,132.133,131.339,125.721,180.037,139.95,131.365,150.468,157.755,150.362,142.626,209.183,145.593,171.002,165.968,170.075,168.353,167.055,204.652,163.504,169.545,177.149,177.918,158.549,156.748,221.953,165.438,172.539,185.628],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.026,0.026,0.026,0.079,0.079,0.079,0.079,0.079,0.079,0.079,0.132,0.079,0.079,0.079,0.079,0.079,0.053,0.053,0,0,0.026,0.026,0.026,0.026,0.052,0.052,0.052,0.078,0.078,0.078,0.131,0.157,0.29,0.396,0.475,0.528,0.581,0.687,0.952,1.058,1.164,1.402,1.376,2.065,2.224,4.132,3.946,5.245,9.299,10.624,15.314,18.335,21.886,28.722,33.677,48.647,62.928,73.473,89.688,102.856,122.754,132.557,157.092,170.604,179.374,212.838,222.429,219.806,269.724,272.453,277.514,281.224,293.942,285.49,288.246,299.957,262.942,277.461,273.884,309.149,322.185,325.815,326.345,353.954,363.572,387.577,399.818,373.853,359.201,362.381,370.488,357.478,356.71,338.985,345.609,344.628,374.462,368.924,360.313,358.856,353.345,350.192,333.181,322.318,285.091,277.195,274.307,267.259,258.542,252.554,249.428,246.938,244.527,242.593,243.07,242.858,243.547,235.81,232.816,229.954,225.106,222.589,216.389,204.917,194.159,190.291,181.256,173.572,166.391,158.204,147.474,145.645,140.426,131.232,126.118,119.707,114.62,108.526,104.101,94.987,87.648,86.111,83.647,83.594,83.912,80.415,79.858,79.593,79.487,78.745,72.916,67.934,64.41,72.915,70.981,66.795,67.722,66.212,67.723,66.664,69.473,58.106,59.272,62.743,62.028,57.974,57.311,68.624,67.166,70.743,74.453,76.917,76.599,79.964,95.12,92.444,91.146,98.167,105.214,103.624,103.703,114.01,104.206,102.908,102.988,102.882,90.297,87.382,84.362,84.468,83.779,80.281,85.474,75.962,75.353,87.038,90.509,80.653,83.382,85.264,77.421,75.673,75.54,80.309,79.991,77.421,83.171,78.295,79.275,95.119,97.636,87.329,90.826,98.483,87.964,88.176,108.657,101.424,106.988,109.876,114.062,110.458,112.631,116.765,128.212,124.873,132.875,136.426,133.088,135.897,164.486,175.004,161.491,178.687,188.04,183.642,200.996,236.95,232.021,239.493,244.686,260.663,257.457,286.708,303.878,302.262,324.625,344.205,370.065,361.48,390.307,422.764,438.157,434.236,440.436,468.84,469.317,478.061,447.167,479.703,485.082,502.94,508.663,435.641,477.901,522.175,555.639,517.91,518.069,534.072,506.675,577.789,587.38,572.092,583.353,592.096,617.929,603.939,625.242,643.948,660.879,662.257,665.463,728.417,749.349,790.948,858.114,882.384,862.406,933.732,986.352,960.836,959.643,1014.992,1004.155,1006.089,1027.551,1014.647,1019.602,1027.948,1094.028,1074.13,1087.272,1118.033,1148.768,1166.997,1178.284,1261.746,1227.302,1258.354,1292.957,1312.564,1323.162,1339.855,1401.881,1356.202,1380.154,1386.301,1398.251,1386.725,1375.12,1430.018,1390.804,1399.839,1415.922],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.011,0.011,0.011,0.008,0.011,0.011,0.011,0.011,0.011,0.011,0.011,0.008,0.008,0,0,0,0.004,0.004,0.004,0.004,0.008,0.008,0.008,0.008,0.011,0.011,0.019,0.019,0.042,0.057,0.064,0.072,0.083,0.091,0.132,0.129,0.151,0.189,0.185,0.284,0.303,0.545,0.545,0.712,1.279,1.51,2.078,2.585,2.839,4.084,4.606,6.332,8.751,9.819,12.271,14.152,16.272,18.21,20.099,21.715,23.88,27.412,29.353,28.017,35.867,34.69,35.372,36.265,35.466,36.42,39.13,32.336,34.509,34.683,34.323,38.438,40.709,41.787,42.9,45.338,46.81,50.924,47.276,45.818,45.478,46.935,45.262,44.467,42.4,42.234,43.241,43.737,47.204,46.712,45.667,44.774,44.452,42.889,41.606,36.288,35.228,34.838,33.589,32.476,31.359,31.371,31.193,30.837,30.561,30.307,30.133,30.235,30.072,29.425,29.175,28.755,28.063,27.381,26.352,24.717,24.122,23.35,22.218,21.393,20.034,19.069,18.146,17.786,16.999,16.204,15.439,14.724,13.808,13.505,12.211,11.295,10.772,10.488,10.288,10.292,10.292,10.121,10.049,10.144,9.826,9.788,8.762,8.009,8.005,9.13,8.819,8.331,8.251,8.831,8.732,8.331,7.513,7.29,7.744,7.619,7.653,7.438,7.396,8.21,8.808,8.929,9.417,9.747,10.314,10.674,11.181,11.821,11.722,12.317,13.46,13.607,13.706,13.373,12.862,13.501,12.411,11.984,11.556,11.276,9.47,10.553,10.129,10.258,9.924,9.936,9.837,11.658,10.333,10.106,10.572,10.227,10.133,9.981,8.195,10.201,10.239,9.255,10.273,10.352,10.647,12.778,10.67,11.249,12.154,11.442,11.654,11.624,12.582,13.32,13.479,13.971,14.38,14.656,15.148,12.782,16.408,15.875,16.764,17.165,17.612,17.979,21.965,19.467,21.639,22.419,24.137,24.387,26.912,28.331,30.11,30.61,31.068,32.794,34.683,36.632,36.473,38.366,42.272,44.827,46.697,47.654,49.482,53.616,55.887,54.024,56.019,58.938,62.102,60.19,52.968,59.551,63.15,62.953,61.708,54.127,62.079,70.906,63.816,64.24,65.312,66.583,71.856,68.396,71.394,73.256,73.166,74.816,77.291,80.478,78.635,76.478,84.078,84.528,83.647,90.6,98.064,104.15,109.23,108.121,112.671,122.852,120.494,120.812,122.164,126.562,126.626,128.647,126.073,126.895,128.89,130.57,133.454,136.558,138.224,141.573,145.234,147.951,150.366,154.53,155.336,160.998,163.213,164.973,167.543,171.033,170.385,172.944,172.736,174.333,175.454,174.053,172.581,175.052,175.329,175.756,176.968]},{"iso":"CPV","continent":"Africa","population":555988,"name":"Cape Verde","population_density":135.58,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,3,3,3,4,4,5,5,6,6,6,6,6,6,7,7,7,7,7,7,7,8,8,10,11,56,56,56,58,61,67,68,73,82,88,90,106,109,114,114,121,122,152,165,175,186,191,218,230,236,246,260,267,289,315,326,328,328,328,335,349,356,362,371,380,390,390,390,390,405,421,435,458,466,477,502,536,542,554,567,585,615,657,697,726,750,760,781,792,823,848,863,890,944,982,999,1003,1027,1091,1155,1165,1227,1267,1301,1382,1421,1451,1463,1499,1542,1552,1591,1623,1623,1698,1722,1780,1894,1939,2014,2045,2071,2107,2154,2190,2220,2258,2307,2328,2354,2373,2418,2451,2480,2547,2583,2631,2689,2734,2780,2835,2858,2883,2920,3000,3073,3136,3163,3179,3203,3253,3321,3368,3412,3455,3509,3532,3568,3630,3699,3745,3778,3852,3884,3970,4048,4125,4200,4275,4330,4358,4400,4473,4557,4651,4711,4813,4839,4904,4978,5063,5141,5186,5257,5281,5337,5412,5479,5628,5701,5771,5817,5900,6024,6126,6205,6296,6360,6433,6518,6624,6717,6809,6913,7072,7155,7254,7371,7444,7526,7638,7752,7800,7901,8033,8122,8198,8322,8396,8423,8472,8548,8603,8694,8793,8848,8882,8944,9053,9149,9224,9291,9369,9419,9499,9560,9694,9741,9780,9822,9840,9960,10000,10082,10152,10234,10276,10302,10400,10526,10570,10626,10700,10747,10761,10816,10867,10938,10996,11036,11063,11098,11118,11192,11203,11262,11302,11357,11361,11395,11458,11502],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.799,5.396,5.396,5.396,5.396,7.194,7.194,8.993,8.993,10.792,10.792,10.792,10.792,10.792,10.792,12.59,12.59,12.59,12.59,12.59,12.59,12.59,14.389,14.389,17.986,19.785,100.722,100.722,100.722,104.319,109.715,120.506,122.305,131.298,147.485,158.277,161.874,190.652,196.047,205.04,205.04,217.631,219.429,273.387,296.769,314.755,334.54,343.533,392.095,413.678,424.47,442.456,467.636,480.226,519.795,566.559,586.344,589.941,589.941,589.941,602.531,627.711,640.302,651.093,667.281,683.468,701.454,701.454,701.454,701.454,728.433,757.211,782.391,823.759,838.148,857.932,902.897,964.05,974.841,996.424,1019.806,1052.181,1106.139,1181.68,1253.624,1305.784,1348.95,1366.936,1404.707,1424.491,1480.248,1525.213,1552.192,1600.754,1697.878,1766.225,1796.801,1803.996,1847.162,1962.273,2077.383,2095.369,2206.882,2278.826,2339.979,2485.665,2555.811,2609.769,2631.352,2696.101,2773.441,2791.427,2861.573,2919.128,2919.128,3054.023,3097.189,3201.508,3406.548,3487.485,3622.38,3678.137,3724.901,3789.65,3874.184,3938.934,3992.892,4061.239,4149.37,4187.141,4233.904,4268.078,4349.015,4408.369,4460.528,4581.034,4645.784,4732.117,4836.435,4917.372,5000.108,5099.031,5140.399,5185.364,5251.912,5395.8,5527.098,5640.41,5688.972,5717.749,5760.916,5850.846,5973.15,6057.685,6136.823,6214.163,6311.287,6352.655,6417.405,6528.918,6653.021,6735.757,6795.111,6928.207,6985.762,7140.442,7280.733,7419.225,7554.12,7689.015,7787.938,7838.299,7913.84,8045.138,8196.22,8365.288,8473.204,8656.662,8703.425,8820.334,8953.431,9106.312,9246.602,9327.539,9455.24,9498.406,9599.128,9734.023,9854.529,10122.521,10253.818,10379.72,10462.456,10611.74,10834.766,11018.223,11160.313,11323.985,11439.096,11570.394,11723.275,11913.926,12081.196,12246.667,12433.722,12719.699,12868.983,13047.044,13257.48,13388.778,13536.263,13737.707,13942.747,14029.08,14210.738,14448.154,14608.229,14744.923,14967.949,15101.045,15149.608,15237.739,15374.433,15473.356,15637.028,15815.09,15914.013,15975.165,16086.678,16282.726,16455.391,16590.286,16710.792,16851.083,16941.013,17084.901,17194.616,17435.628,17520.162,17590.308,17665.849,17698.224,17914.056,17986,18133.485,18259.387,18406.872,18482.413,18529.177,18705.44,18932.063,19011.202,19111.923,19245.02,19329.554,19354.734,19453.657,19545.386,19673.086,19777.405,19849.349,19897.911,19960.862,19996.834,20129.931,20149.715,20255.833,20327.777,20426.7,20433.894,20495.047,20608.358,20687.497],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.597,0,0,0,1.799,0,1.799,0,1.799,0,0,0,0,0,1.799,0,0,0,0,0,0,1.799,0,3.597,1.799,80.937,0,0,3.597,5.396,10.792,1.799,8.993,16.187,10.792,3.597,28.778,5.396,8.993,0,12.59,1.799,53.958,23.382,17.986,19.785,8.993,48.562,21.583,10.792,17.986,25.18,12.59,39.569,46.764,19.785,3.597,0,0,12.59,25.18,12.59,10.792,16.187,16.187,17.986,0,0,0,26.979,28.778,25.18,41.368,14.389,19.785,44.965,61.152,10.792,21.583,23.382,32.375,53.958,75.541,71.944,52.159,43.166,17.986,37.771,19.785,55.757,44.965,26.979,48.562,97.124,68.347,30.576,7.194,43.166,115.11,115.11,17.986,111.513,71.944,61.152,145.687,70.145,53.958,21.583,64.75,77.34,17.986,70.145,57.555,0,134.895,43.166,104.319,205.04,80.937,134.895,55.757,46.764,64.75,84.534,64.75,53.958,68.347,88.131,37.771,46.764,34.173,80.937,59.354,52.159,120.506,64.75,86.333,104.319,80.937,82.736,98.923,41.368,44.965,66.548,143.888,131.298,113.312,48.562,28.778,43.166,89.93,122.305,84.534,79.138,77.34,97.124,41.368,64.75,111.513,124.103,82.736,59.354,133.096,57.555,154.68,140.291,138.492,134.895,134.895,98.923,50.361,75.541,131.298,151.082,169.068,107.916,183.457,46.764,116.909,133.096,152.881,140.291,80.937,127.701,43.166,100.722,134.895,120.506,267.991,131.298,125.902,82.736,149.284,223.026,183.457,142.089,163.673,115.11,131.298,152.881,190.652,167.27,165.471,187.054,285.977,149.284,178.061,210.436,131.298,147.485,201.443,205.04,86.333,181.659,237.415,160.075,136.694,223.026,133.096,48.562,88.131,136.694,98.923,163.673,178.061,98.923,61.152,111.513,196.047,172.666,134.895,120.506,140.291,89.93,143.888,109.715,241.012,84.534,70.145,75.541,32.375,215.832,71.944,147.485,125.902,147.485,75.541,46.764,176.263,226.624,79.138,100.722,133.096,84.534,25.18,98.923,91.729,127.701,104.319,71.944,48.562,62.951,35.972,133.096,19.785,106.117,71.944,98.923,7.194,61.152,113.312,79.138],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.597,3.597,3.597,3.597,5.396,5.396,7.195,7.195,5.397,5.397,5.397,5.397,3.598,3.598,3.598,3.598,1.799,1.799,1.799,1.799,1.799,3.598,1.799,5.396,7.195,88.132,88.132,88.132,91.729,95.326,106.118,104.32,111.514,46.764,57.556,61.153,86.334,86.334,84.535,82.736,86.333,71.945,115.111,134.896,124.104,138.493,138.493,187.055,196.048,205.041,169.069,170.867,165.471,185.255,223.026,194.249,176.263,165.471,147.485,134.895,147.485,120.506,84.534,80.936,93.526,111.512,111.512,98.922,73.742,88.131,106.117,115.11,140.291,136.694,156.479,201.444,262.596,246.409,239.214,237.416,228.423,267.992,323.748,350.727,341.734,374.108,370.511,384.9,372.31,374.109,343.533,298.568,294.971,348.929,399.29,392.095,379.504,366.913,437.058,525.189,494.613,509.002,512.599,543.175,681.668,708.647,647.495,553.968,600.732,566.559,512.601,521.594,433.462,363.317,444.254,465.837,505.406,633.106,696.057,760.807,759.009,805.773,735.628,776.996,737.427,586.345,573.755,526.991,509.005,509.005,478.428,474.831,469.435,467.636,519.795,496.414,544.976,602.531,649.295,651.094,690.663,679.872,604.331,606.129,663.684,690.663,723.038,688.864,618.719,620.517,665.482,721.239,661.885,609.725,573.753,622.315,634.905,656.489,678.072,679.87,678.072,658.288,714.044,674.475,787.787,863.328,890.307,901.099,953.258,992.827,910.092,928.078,904.696,915.487,946.063,919.084,967.646,915.487,982.035,1039.59,1061.173,1050.382,962.251,982.036,841.745,895.703,913.689,901.099,1016.209,1007.216,1052.181,1007.216,1113.334,1235.638,1284.2,1305.783,1201.465,1185.277,1190.673,1260.818,1302.186,1246.43,1228.444,1273.409,1395.713,1429.887,1476.65,1534.205,1474.851,1455.066,1491.038,1509.024,1309.38,1341.755,1401.109,1350.748,1356.144,1431.685,1363.338,1206.86,1208.658,1163.693,1025.201,1028.799,1070.166,946.063,874.119,937.07,1044.986,1080.958,1116.93,1073.763,1035.993,1027,1109.736,1107.938,1152.903,1064.771,1000.021,955.056,847.14,973.042,901.098,938.868,823.758,886.709,892.105,863.328,1007.216,1018.008,1025.202,978.439,985.633,922.682,872.321,924.48,839.946,741.023,766.204,737.426,652.892,631.309,642.101,676.274,604.33,582.746,550.371,577.35,535.982,534.183,611.523,557.565],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.771,1.028,0.514,0.771,0.771,0.771,0.514,0.514,0.257,0.514,0.257,0.257,0.257,0.257,0.257,0.257,0.257,0.257,0.771,1.028,12.59,12.59,12.59,12.847,13.618,14.646,14.646,4.368,6.681,8.222,8.222,11.562,10.792,11.819,10.535,10.021,8.736,15.93,15.16,16.958,18.5,19.785,24.923,27.75,21.583,20.812,21.84,20.812,25.18,24.923,24.667,23.639,21.069,17.472,17.472,15.417,10.535,9.25,11.049,13.361,15.93,14.132,10.535,8.736,11.049,12.847,14.132,17.472,19.528,22.354,28.778,33.66,31.09,30.576,28.007,30.576,35.458,39.826,41.368,47.277,50.361,49.59,50.361,45.479,42.653,38.798,35.201,35.972,47.277,51.646,53.187,46.25,45.993,58.583,68.09,56.784,62.951,68.861,76.569,91.215,84.791,76.055,76.569,69.888,70.659,64.493,53.701,51.902,44.194,60.382,57.298,61.152,87.874,89.416,100.465,108.43,95.84,98.923,96.097,76.055,72.201,62.694,67.319,66.034,63.465,56.27,58.583,59.354,57.041,61.666,65.52,71.173,81.194,81.194,84.534,91.215,79.909,77.083,74.256,79.909,87.104,91.472,84.277,82.479,82.222,85.562,82.479,75.798,70.916,75.027,84.791,84.534,80.937,79.395,85.048,85.562,82.993,88.131,90.444,103.291,107.402,109.458,116.909,127.701,122.819,121.791,110.485,109.201,110.999,115.881,112.027,124.103,123.59,129.499,129.756,130.013,125.902,122.048,114.083,113.569,111.256,111.513,106.888,125.131,132.326,132.069,137.721,144.659,157.249,166.242,148.256,152.881,151.339,158.277,158.791,154.166,151.853,155.193,158.534,182.943,185.513,189.11,191.936,186.797,184.228,186.284,174.721,165.728,166.242,170.096,174.207,172.666,175.749,165.471,160.075,146.714,132.326,123.59,127.444,121.02,116.138,117.937,121.277,129.756,140.291,136.18,127.958,133.867,137.978,142.603,130.27,140.034,132.839,125.645,116.395,108.173,118.451,113.055,99.694,105.604,116.652,116.652,118.708,113.055,135.152,125.388,121.791,119.735,121.02,117.937,106.888,87.618,94.555,95.069,86.333,81.194,86.59,77.597,83.506,68.09,68.347,68.347,75.541,67.576,71.173,68.347,76.826]},{"iso":"CAF","continent":"Africa","population":4829764,"name":"Central African Republic","population_density":7.479,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,8,8,8,8,8,8,8,8,8,8,11,11,12,12,12,12,12,12,14,14,16,16,16,19,19,50,50,50,72,72,72,85,85,94,94,143,143,143,143,143,143,143,301,327,327,327,366,418,436,479,552,604,652,671,702,755,874,962,1011,1069,1069,1173,1288,1451,1570,1634,1850,1850,1888,1952,2044,2057,2057,2222,2410,2564,2605,2605,2686,2808,2963,3051,3099,3244,3340,3429,3429,3613,3745,3745,3788,3918,3969,3969,4033,4071,4109,4200,4259,4288,4288,4321,4356,4362,4373,4389,4485,4485,4548,4561,4574,4590,4593,4598,4599,4599,4599,4605,4605,4608,4614,4614,4614,4618,4618,4620,4641,4641,4641,4641,4645,4652,4652,4652,4652,4652,4667,4679,4679,4679,4679,4679,4679,4679,4691,4698,4698,4700,4700,4700,4711,4711,4712,4729,4729,4729,4729,4729,4735,4736,4747,4749,4749,4749,4772,4772,4782,4782,4786,4786,4786,4786,4802,4802,4804,4806,4806,4806,4806,4806,4829,4829,4829,4845,4845,4845,4852,4852,4853,4853,4854,4854,4854,4854,4855,4855,4855,4855,4855,4856,4858,4858,4862,4862,4862,4862,4863,4863,4863,4863,4866,4866,4866,4866,4866,4866,4866,4866,4879,4879,4880,4884,4884,4888,4888,4896,4900,4900,4900,4900,4907,4911,4911,4911,4911,4911,4911,4913,4913,4913,4913,4913,4918,4918,4918,4918,4922,4922,4922,4927,4927,4927,4936,4936,4936,4936,4936,4936,4936],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.207,0.207,0.207,0.207,0.207,0.621,0.621,0.621,0.621,0.621,0.621,0.621,0.621,0.621,0.621,0.621,0.621,0.621,0.621,1.656,1.656,1.656,1.656,1.656,1.656,1.656,1.656,1.656,1.656,2.278,2.278,2.485,2.485,2.485,2.485,2.485,2.485,2.899,2.899,3.313,3.313,3.313,3.934,3.934,10.352,10.352,10.352,14.908,14.908,14.908,17.599,17.599,19.463,19.463,29.608,29.608,29.608,29.608,29.608,29.608,29.608,62.322,67.705,67.705,67.705,75.78,86.547,90.274,99.177,114.291,125.058,134.996,138.93,145.349,156.322,180.961,199.182,209.327,221.336,221.336,242.869,266.68,300.429,325.068,338.319,383.041,383.041,390.909,404.161,423.209,425.901,425.901,460.064,498.989,530.875,539.364,539.364,556.135,581.395,613.488,631.708,641.646,671.668,691.545,709.973,709.973,748.07,775.4,775.4,784.303,811.22,821.779,821.779,835.03,842.898,850.766,869.608,881.824,887.828,887.828,894.661,901.907,903.15,905.427,908.74,928.617,928.617,941.661,944.353,947.044,950.357,950.978,952.013,952.22,952.22,952.22,953.463,953.463,954.084,955.326,955.326,955.326,956.154,956.154,956.568,960.917,960.917,960.917,960.917,961.745,963.194,963.194,963.194,963.194,963.194,966.3,968.784,968.784,968.784,968.784,968.784,968.784,968.784,971.269,972.718,972.718,973.132,973.132,973.132,975.41,975.41,975.617,979.137,979.137,979.137,979.137,979.137,980.379,980.586,982.864,983.278,983.278,983.278,988.04,988.04,990.11,990.11,990.939,990.939,990.939,990.939,994.251,994.251,994.666,995.08,995.08,995.08,995.08,995.08,999.842,999.842,999.842,1003.155,1003.155,1003.155,1004.604,1004.604,1004.811,1004.811,1005.018,1005.018,1005.018,1005.018,1005.225,1005.225,1005.225,1005.225,1005.225,1005.432,1005.846,1005.846,1006.674,1006.674,1006.674,1006.674,1006.881,1006.881,1006.881,1006.881,1007.503,1007.503,1007.503,1007.503,1007.503,1007.503,1007.503,1007.503,1010.194,1010.194,1010.401,1011.23,1011.23,1012.058,1012.058,1013.714,1014.542,1014.542,1014.542,1014.542,1015.992,1016.82,1016.82,1016.82,1016.82,1016.82,1016.82,1017.234,1017.234,1017.234,1017.234,1017.234,1018.269,1018.269,1018.269,1018.269,1019.097,1019.097,1019.097,1020.133,1020.133,1020.133,1021.996,1021.996,1021.996,1021.996,1021.996,1021.996,1021.996],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.414,0,0,0,0,0,0,0,0,0,0,0,0,0,1.035,0,0,0,0,0,0,0,0,0,0.621,0,0.207,0,0,0,0,0,0.414,0,0.414,0,0,0.621,0,6.419,0,0,4.555,0,0,2.692,0,1.863,0,10.145,0,0,0,0,0,0,32.714,5.383,0,0,8.075,10.767,3.727,8.903,15.115,10.767,9.938,3.934,6.419,10.974,24.639,18.22,10.145,12.009,0,21.533,23.811,33.749,24.639,13.251,44.723,0,7.868,13.251,19.049,2.692,0,34.163,38.925,31.886,8.489,0,16.771,25.26,32.093,18.22,9.938,30.022,19.877,18.427,0,38.097,27.331,0,8.903,26.916,10.56,0,13.251,7.868,7.868,18.842,12.216,6.004,0,6.833,7.247,1.242,2.278,3.313,19.877,0,13.044,2.692,2.692,3.313,0.621,1.035,0.207,0,0,1.242,0,0.621,1.242,0,0,0.828,0,0.414,4.348,0,0,0,0.828,1.449,0,0,0,0,3.106,2.485,0,0,0,0,0,0,2.485,1.449,0,0.414,0,0,2.278,0,0.207,3.52,0,0,0,0,1.242,0.207,2.278,0.414,0,0,4.762,0,2.07,0,0.828,0,0,0,3.313,0,0.414,0.414,0,0,0,0,4.762,0,0,3.313,0,0,1.449,0,0.207,0,0.207,0,0,0,0.207,0,0,0,0,0.207,0.414,0,0.828,0,0,0,0.207,0,0,0,0.621,0,0,0,0,0,0,0,2.692,0,0.207,0.828,0,0.828,0,1.656,0.828,0,0,0,1.449,0.828,0,0,0,0,0,0.414,0,0,0,0,1.035,0,0,0,0.828,0,0,1.035,0,0,1.863,0,0,0,0,0,0],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.414,0.414,0.414,0.414,0.414,0.414,0.414,0.414,0,0,0,0,0,0,1.035,1.035,1.035,1.035,1.035,1.035,1.035,1.035,0,0,0.621,0.621,0.828,0.828,0.828,0.828,0.828,0.828,0.621,0.621,0.828,0.828,0.828,1.449,1.449,7.868,7.454,7.454,11.595,11.595,11.595,13.666,13.666,9.11,9.11,19.255,14.7,14.7,14.7,12.008,12.008,10.145,42.859,38.097,38.097,38.097,46.172,56.939,60.666,69.569,51.97,57.354,67.292,71.226,69.57,69.777,90.689,100.006,95.036,96.278,86.34,103.939,121.331,144.106,144.106,139.137,173.715,161.706,169.574,161.292,156.53,125.473,100.834,121.746,115.948,147.834,148.455,135.204,132.926,155.494,187.587,171.644,142.657,140.793,152.181,170.608,153.837,166.674,161.912,143.692,142.657,139.551,130.234,111.807,125.058,94.829,75.366,94.208,97.521,76.609,66.049,72.882,66.878,60.252,54.662,39.133,46.794,40.79,53.834,49.693,45.138,47.209,45.552,43.274,23.604,23.604,10.56,9.11,6.418,3.726,4.347,3.312,3.105,3.933,3.933,3.105,7.453,6.832,5.59,5.59,6.418,7.039,7.039,6.625,2.277,2.277,5.383,7.868,7.04,5.591,5.591,5.591,5.591,5.591,4.97,3.934,3.934,4.348,4.348,4.348,6.626,6.626,4.348,6.419,6.419,6.005,6.005,6.005,4.969,5.176,7.247,4.141,4.141,4.141,8.903,8.903,9.731,9.524,8.074,7.66,7.66,7.66,6.211,6.211,4.555,4.969,4.141,4.141,4.141,4.141,5.59,5.59,5.176,8.075,8.075,8.075,9.524,9.524,4.969,4.969,5.176,1.863,1.863,1.863,0.621,0.621,0.414,0.414,0.207,0.414,0.828,0.828,1.449,1.449,1.449,1.449,1.656,1.449,1.035,1.035,0.828,0.828,0.828,0.828,0.621,0.621,0.621,0.621,2.692,2.692,2.899,3.727,3.727,4.555,4.555,6.211,4.347,4.347,4.14,3.312,4.761,4.761,4.761,3.105,2.277,2.277,2.277,2.691,1.242,0.414,0.414,0.414,1.449,1.449,1.449,1.035,1.863,1.863,1.863,2.898,1.863,1.863,3.726,3.726,2.898,2.898,2.898,1.863,1.863],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.059,0.059,0.059,0.059,0.059,0.059,0,0,0,0,0,0,0,0.148,0.148,0.148,0.148,0.148,0.148,0.148,0,0,0,0.089,0.089,0.118,0.118,0.118,0.118,0.118,0.03,0.089,0.059,0.118,0.118,0.118,0.207,0.207,1.065,1.065,1.006,1.656,1.656,1.568,1.952,1.035,1.301,1.301,2.1,2.1,2.1,1.716,1.716,1.449,1.449,4.673,5.442,5.442,5.442,6.596,8.134,8.666,5.265,6.655,8.193,9.613,9.021,8.4,9.436,11.684,12.127,12.038,12.334,11.772,13.931,15.765,17.067,17.984,18.427,23.101,23.101,21.149,19.64,17.54,14.405,12.512,11.003,16.564,19.995,19.315,16.594,18.605,22.213,21.918,18.96,15.824,18.901,21.74,21.977,18.368,19.226,20.527,19.108,16.091,17.096,15.972,15.972,12.423,9.643,10.767,12.186,10.086,9.436,9.436,8.519,8.43,7.483,5.117,3.845,5.827,5.827,6.714,6.064,6.271,6.419,6.034,3.342,3.372,1.509,1.124,0.917,0.444,0.444,0.473,0.444,0.444,0.562,0.385,0.444,0.976,0.799,0.799,0.799,0.799,1.006,0.947,0.325,0.325,0.325,0.769,1.006,0.799,0.799,0.799,0.799,0.799,0.355,0.355,0.562,0.562,0.621,0.621,0.621,0.947,0.592,0.414,0.917,0.858,0.858,0.858,0.532,0.71,0.71,0.532,0.592,0.592,0.592,1.272,1.094,1.361,1.035,1.094,1.094,1.094,0.414,0.887,0.592,0.651,0.592,0.592,0.592,0.592,0.118,0.799,0.739,0.68,1.154,1.154,1.154,1.361,0.68,0.71,0.71,0.266,0.266,0.266,0.059,0.089,0.059,0.059,0.03,0.03,0.059,0.118,0.089,0.207,0.207,0.207,0.207,0.207,0.148,0.148,0.03,0.118,0.118,0.118,0.089,0.089,0.089,0.089,0,0.385,0.385,0.414,0.532,0.532,0.651,0.651,0.503,0.621,0.592,0.473,0.473,0.562,0.68,0.444,0.325,0.325,0.325,0.325,0.177,0.059,0.059,0.059,0.059,0.207,0.207,0.148,0.148,0.266,0.266,0.266,0.266,0.266,0.266,0.532,0.414,0.414,0.414,0.266,0.266,0.266]},{"iso":"TCD","continent":"Africa","population":16425859,"name":"Chad","population_density":11.833,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,3,3,3,3,3,3,5,7,7,8,8,9,9,9,10,10,11,11,11,18,23,23,23,27,27,33,33,33,33,33,33,40,46,46,46,52,52,73,73,117,117,117,170,170,253,260,322,322,322,357,372,399,428,474,503,519,545,565,588,611,648,675,687,700,715,726,759,759,778,790,803,820,828,836,836,837,839,844,846,848,848,848,850,850,853,854,854,858,858,858,858,860,860,863,865,865,866,866,866,866,868,871,871,872,872,873,873,873,874,874,880,880,884,885,886,887,889,889,889,889,889,915,915,915,915,922,926,926,935,936,936,936,936,938,939,942,942,942,944,945,946,949,949,951,952,956,959,970,971,972,981,982,986,987,995,998,1004,1008,1008,1012,1013,1017,1017,1018,1023,1034,1039,1040,1045,1048,1051,1081,1083,1084,1085,1087,1090,1115,1147,1149,1151,1153,1155,1164,1171,1175,1177,1178,1185,1193,1200,1203,1211,1214,1217,1223,1238,1251,1262,1274,1291,1304,1308,1321,1329,1350,1361,1365,1379,1390,1399,1404,1410,1423,1434,1437,1441,1460,1468,1473,1483,1483,1498,1499,1513,1517,1529,1538,1543,1547,1551,1561,1565,1578,1589,1591,1597,1603,1608,1616,1620,1626,1633,1642,1648,1649,1655,1661,1663,1663,1682,1688,1700,1705,1708,1719,1722,1725,1728,1729,1732,1739,1745,1751,1770,1771,1784,1800,1818],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.061,0.061,0.061,0.061,0.061,0.183,0.183,0.183,0.183,0.183,0.183,0.304,0.426,0.426,0.487,0.487,0.548,0.548,0.548,0.609,0.609,0.67,0.67,0.67,1.096,1.4,1.4,1.4,1.644,1.644,2.009,2.009,2.009,2.009,2.009,2.009,2.435,2.8,2.8,2.8,3.166,3.166,4.444,4.444,7.123,7.123,7.123,10.35,10.35,15.403,15.829,19.603,19.603,19.603,21.734,22.647,24.291,26.056,28.857,30.622,31.597,33.179,34.397,35.797,37.197,39.45,41.094,41.824,42.616,43.529,44.199,46.208,46.208,47.364,48.095,48.886,49.921,50.408,50.895,50.895,50.956,51.078,51.382,51.504,51.626,51.626,51.626,51.748,51.748,51.93,51.991,51.991,52.235,52.235,52.235,52.235,52.356,52.356,52.539,52.661,52.661,52.722,52.722,52.722,52.722,52.844,53.026,53.026,53.087,53.087,53.148,53.148,53.148,53.209,53.209,53.574,53.574,53.818,53.878,53.939,54,54.122,54.122,54.122,54.122,54.122,55.705,55.705,55.705,55.705,56.131,56.375,56.375,56.922,56.983,56.983,56.983,56.983,57.105,57.166,57.349,57.349,57.349,57.47,57.531,57.592,57.775,57.775,57.897,57.957,58.201,58.384,59.053,59.114,59.175,59.723,59.784,60.027,60.088,60.575,60.758,61.123,61.367,61.367,61.61,61.671,61.915,61.915,61.975,62.28,62.95,63.254,63.315,63.619,63.802,63.984,65.811,65.933,65.994,66.054,66.176,66.359,67.881,69.829,69.951,70.072,70.194,70.316,70.864,71.29,71.534,71.655,71.716,72.142,72.629,73.056,73.238,73.725,73.908,74.09,74.456,75.369,76.16,76.83,77.561,78.596,79.387,79.631,80.422,80.909,82.187,82.857,83.101,83.953,84.623,85.171,85.475,85.84,86.632,87.301,87.484,87.728,88.884,89.371,89.676,90.284,90.284,91.198,91.259,92.111,92.354,93.085,93.633,93.937,94.181,94.424,95.033,95.277,96.068,96.738,96.859,97.225,97.59,97.894,98.381,98.625,98.99,99.416,99.964,100.33,100.39,100.756,101.121,101.243,101.243,102.4,102.765,103.495,103.8,103.982,104.652,104.835,105.017,105.2,105.261,105.443,105.87,106.235,106.6,107.757,107.818,108.609,109.583,110.679],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.122,0,0,0,0,0,0.122,0.122,0,0.061,0,0.061,0,0,0.061,0,0.061,0,0,0.426,0.304,0,0,0.244,0,0.365,0,0,0,0,0,0.426,0.365,0,0,0.365,0,1.278,0,2.679,0,0,3.227,0,5.053,0.426,3.775,0,0,2.131,0.913,1.644,1.766,2.8,1.766,0.974,1.583,1.218,1.4,1.4,2.253,1.644,0.731,0.791,0.913,0.67,2.009,0,1.157,0.731,0.791,1.035,0.487,0.487,0,0.061,0.122,0.304,0.122,0.122,0,0,0.122,0,0.183,0.061,0,0.244,0,0,0,0.122,0,0.183,0.122,0,0.061,0,0,0,0.122,0.183,0,0.061,0,0.061,0,0,0.061,0,0.365,0,0.244,0.061,0.061,0.061,0.122,0,0,0,0,1.583,0,0,0,0.426,0.244,0,0.548,0.061,0,0,0,0.122,0.061,0.183,0,0,0.122,0.061,0.061,0.183,0,0.122,0.061,0.244,0.183,0.67,0.061,0.061,0.548,0.061,0.244,0.061,0.487,0.183,0.365,0.244,0,0.244,0.061,0.244,0,0.061,0.304,0.67,0.304,0.061,0.304,0.183,0.183,1.826,0.122,0.061,0.061,0.122,0.183,1.522,1.948,0.122,0.122,0.122,0.122,0.548,0.426,0.244,0.122,0.061,0.426,0.487,0.426,0.183,0.487,0.183,0.183,0.365,0.913,0.791,0.67,0.731,1.035,0.791,0.244,0.791,0.487,1.278,0.67,0.244,0.852,0.67,0.548,0.304,0.365,0.791,0.67,0.183,0.244,1.157,0.487,0.304,0.609,0,0.913,0.061,0.852,0.244,0.731,0.548,0.304,0.244,0.244,0.609,0.244,0.791,0.67,0.122,0.365,0.365,0.304,0.487,0.244,0.365,0.426,0.548,0.365,0.061,0.365,0.365,0.122,0,1.157,0.365,0.731,0.304,0.183,0.67,0.183,0.183,0.183,0.061,0.183,0.426,0.365,0.365,1.157,0.061,0.791,0.974,1.096],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.122,0.122,0.122,0.122,0.122,0.122,0.244,0.366,0.244,0.305,0.305,0.366,0.366,0.366,0.305,0.183,0.244,0.183,0.183,0.548,0.852,0.852,0.791,1.035,0.974,1.339,1.339,0.913,0.609,0.609,0.609,0.791,1.156,0.791,0.791,1.156,1.156,2.434,2.434,4.687,4.322,4.322,7.549,7.184,12.237,11.385,15.16,12.481,12.481,14.612,12.298,13.942,10.655,13.029,11.02,11.994,13.577,12.664,13.151,12.907,13.394,12.238,11.203,11.02,10.35,9.802,10.411,9.011,7.915,7.002,7.062,7.306,6.88,6.697,4.688,4.749,3.714,3.287,2.618,1.705,1.218,0.731,0.853,0.792,0.853,0.61,0.488,0.61,0.61,0.61,0.488,0.61,0.427,0.549,0.671,0.427,0.488,0.488,0.488,0.366,0.488,0.488,0.366,0.427,0.366,0.427,0.427,0.427,0.366,0.183,0.548,0.487,0.731,0.731,0.792,0.853,0.914,0.914,0.549,0.549,0.305,1.827,1.766,1.705,1.583,2.009,2.253,2.253,2.801,1.279,1.279,1.279,1.279,0.975,0.792,0.975,0.427,0.366,0.488,0.549,0.61,0.671,0.61,0.549,0.61,0.854,0.915,1.524,1.524,1.402,1.95,1.889,2.072,1.889,2.193,1.706,2.01,2.193,1.645,1.828,1.645,1.828,1.341,1.219,1.158,1.584,1.888,1.705,1.948,1.887,2.07,3.835,3.653,3.044,2.801,2.862,2.741,4.08,5.845,4.141,4.141,4.202,4.263,4.689,4.932,3.654,1.828,1.767,2.071,2.436,2.74,2.375,2.436,2.375,2.436,2.74,3.227,3.531,3.775,4.323,4.871,5.479,5.54,5.966,5.54,6.027,6.027,5.54,5.357,5.236,5.54,5.053,4.931,4.444,4.444,4.383,3.775,4.262,4.201,4.201,4.445,3.654,3.897,3.775,4.383,3.47,3.714,3.958,3.653,3.897,3.228,3.776,3.168,3.715,3.654,3.228,3.289,3.41,3.47,3.348,3.348,2.922,2.678,3.104,3.104,2.8,2.861,2.739,2.617,2.252,2.983,2.8,3.166,3.409,3.227,3.532,3.593,3.776,2.802,2.498,1.95,2.072,2.254,1.949,2.923,2.801,3.409,4.322,5.235],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.017,0.017,0.017,0.017,0.017,0.035,0.035,0.035,0.043,0.043,0.052,0.052,0.035,0.026,0.026,0.026,0.026,0.017,0.078,0.122,0.113,0.113,0.139,0.139,0.191,0.13,0.087,0.087,0.087,0.052,0.113,0.113,0.113,0.113,0.165,0.165,0.348,0.287,0.617,0.617,0.617,1.026,1.026,1.565,1.626,1.783,1.783,1.783,1.626,1.757,1.27,1.461,1.322,1.574,1.713,1.635,1.679,1.644,1.592,1.513,1.496,1.461,1.348,1.305,1.2,1.287,0.965,0.896,0.896,0.896,0.913,0.887,0.67,0.67,0.513,0.426,0.357,0.226,0.174,0.104,0.104,0.113,0.096,0.078,0.07,0.052,0.087,0.087,0.07,0.07,0.061,0.052,0.078,0.061,0.061,0.07,0.07,0.052,0.052,0.043,0.052,0.052,0.052,0.052,0.061,0.061,0.043,0.026,0.026,0.07,0.07,0.096,0.104,0.113,0.113,0.13,0.078,0.078,0.043,0.035,0.252,0.244,0.226,0.226,0.287,0.322,0.322,0.174,0.183,0.183,0.183,0.122,0.104,0.113,0.061,0.052,0.052,0.07,0.078,0.07,0.087,0.061,0.078,0.087,0.104,0.122,0.209,0.191,0.2,0.261,0.261,0.261,0.244,0.217,0.235,0.278,0.235,0.226,0.226,0.226,0.191,0.165,0.122,0.13,0.226,0.235,0.235,0.244,0.27,0.287,0.504,0.426,0.391,0.391,0.365,0.365,0.557,0.574,0.574,0.583,0.591,0.591,0.644,0.487,0.244,0.244,0.235,0.278,0.33,0.313,0.278,0.313,0.322,0.339,0.33,0.391,0.444,0.513,0.548,0.67,0.757,0.739,0.722,0.678,0.765,0.757,0.644,0.652,0.713,0.678,0.652,0.522,0.539,0.6,0.504,0.444,0.531,0.557,0.548,0.522,0.426,0.531,0.504,0.461,0.426,0.487,0.478,0.522,0.426,0.452,0.417,0.417,0.426,0.444,0.417,0.435,0.452,0.409,0.444,0.365,0.322,0.365,0.391,0.391,0.357,0.339,0.357,0.322,0.261,0.348,0.348,0.444,0.435,0.409,0.487,0.513,0.374,0.348,0.252,0.235,0.27,0.226,0.252,0.391,0.374,0.478,0.591,0.687]},{"iso":"CHL","continent":"South America","population":19116209,"name":"Chile","population_density":24.282,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,9,9,10,10,13,13,13,20,20,25,35,35,55,88,101,182,228,265,265,461,592,687,801,977,1197,1361,1665,2015,2245,2555,2844,3137,3510,3843,4355,4665,5009,5310,5740,6166,6695,7366,7652,7964,8356,8712,9246,9691,10598,10956,11375,11700,12164,12680,13174,14537,15010,15492,16044,16564,17702,18687,21213,22441,23421,24794,25826,27359,28750,32208,33855,35052,36710,39370,42029,44531,50016,52369,54647,58167,62205,66169,70445,80287,83996,88891,92855,97183,101837,105532,118720,123550,129020,132548,137490,142154,146361,160351,166756,171452,175365,181062,186698,193452,201634,208572,213715,218728,220628,225103,231393,236748,242355,246963,250767,254416,259064,263360,267766,271982,275999,279393,282043,284541,288089,291847,295532,298557,301019,303083,306216,309274,312029,315041,317657,319493,321205,323698,326439,328846,330930,333029,334683,336402,338759,341304,343592,345790,347923,349800,351575,353536,355667,357658,359731,361493,362962,364723,366671,368825,371023,373056,375044,376616,378168,380034,382111,383902,385946,387502,388855,390037,391849,393769,395708,397665,399568,400985,402365,404102,405972,408009,409974,411726,413145,414739,416501,418469,420434,422510,424274,425541,427027,428669,430535,432666,434748,436433,437983,439287,441150,442827,444674,446274,447468,448523,449903,451634,453868,455979,457901,459671,461300,462991,464750,466590,468471,470179,471746,473306,474440,476016,477769,479595,481371,482832,484280,485372,486496,488190,490003,491760,493305,494478,495637,497131,498906,500542,502063,503598,504525,505530,507050,508571,510256,511864,513140,514202,515042,516582,518390,519977,521558,522879,523907,524804,526438,528030,529676,531273,532604,533610,534558,536012,537585,539143,540640,542080,543087,544092,545662,547243,548941,550430,551743,552864,553898,555406,557135,558668,560382,562142,563534,564778,566440,567974,569781,571919,573830,575329,576731,578732],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.105,0.105,0.105,0.105,0.105,0.105,0.105,0.471,0.471,0.523,0.523,0.68,0.68,0.68,1.046,1.046,1.308,1.831,1.831,2.877,4.603,5.283,9.521,11.927,13.863,13.863,24.116,30.968,35.938,41.902,51.108,62.617,71.196,87.099,105.408,117.44,133.656,148.774,164.102,183.614,201.034,227.817,244.034,262.029,277.775,300.269,322.553,350.226,385.327,400.289,416.61,437.116,455.739,483.673,506.952,554.399,573.126,595.045,612.046,636.319,663.311,689.153,760.454,785.198,810.412,839.288,866.49,926.02,977.547,1109.687,1173.925,1225.191,1297.014,1351,1431.194,1503.959,1684.853,1771.01,1833.627,1920.36,2059.509,2198.605,2329.489,2616.418,2739.508,2858.673,3042.81,3254.045,3461.408,3685.093,4199.944,4393.967,4650.033,4857.396,5083.801,5327.259,5520.551,6210.436,6463.102,6749.246,6933.802,7192.326,7436.307,7656.382,8388.222,8723.278,8968.933,9173.629,9471.648,9766.476,10119.789,10547.803,10910.741,11179.779,11442.018,11541.41,11775.504,12104.544,12384.673,12677.984,12919.036,13118.03,13308.915,13552.059,13776.79,14007.275,14227.821,14437.957,14615.502,14754.128,14884.803,15070.404,15266.991,15459.76,15618.003,15746.794,15854.765,16018.657,16178.626,16322.745,16480.307,16617.155,16713.199,16802.756,16933.169,17076.555,17202.469,17311.487,17421.289,17507.812,17597.736,17721.035,17854.168,17973.857,18088.838,18200.418,18298.607,18391.46,18494.043,18605.52,18709.672,18818.114,18910.287,18987.133,19079.254,19181.157,19293.836,19408.817,19515.166,19619.162,19701.396,19782.583,19880.197,19988.848,20082.538,20189.463,20270.86,20341.638,20403.47,20498.259,20598.697,20700.129,20802.503,20902.052,20976.178,21048.368,21139.233,21237.056,21343.615,21446.407,21538.057,21612.287,21695.672,21787.845,21890.794,21993.587,22102.186,22194.463,22260.742,22338.477,22424.373,22521.986,22633.463,22742.375,22830.52,22911.603,22979.818,23077.274,23165.001,23261.621,23345.319,23407.779,23462.968,23535.158,23625.709,23742.574,23853.003,23953.546,24046.138,24131.354,24219.813,24311.829,24408.082,24506.48,24595.829,24677.801,24759.407,24818.728,24901.172,24992.874,25088.395,25181.3,25257.728,25333.475,25390.599,25449.397,25538.013,25632.854,25724.766,25805.587,25866.949,25927.578,26005.732,26098.585,26184.167,26263.733,26344.031,26392.524,26445.097,26524.611,26604.177,26692.322,26776.439,26843.188,26898.743,26942.685,27023.245,27117.824,27200.843,27283.548,27352.651,27406.428,27453.351,27538.828,27622.109,27708.213,27791.755,27861.382,27914.007,27963.599,28039.66,28121.946,28203.448,28281.758,28357.087,28409.765,28462.338,28544.467,28627.172,28715.997,28793.889,28862.574,28921.215,28975.306,29054.192,29144.638,29224.832,29314.494,29406.563,29479.381,29544.456,29631.398,29711.644,29806.171,29918.014,30017.981,30096.396,30169.737,30274.413],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.366,0,0.052,0,0.157,0,0,0.366,0,0.262,0.523,0,1.046,1.726,0.68,4.237,2.406,1.936,0,10.253,6.853,4.97,5.964,9.207,11.509,8.579,15.903,18.309,12.032,16.217,15.118,15.327,19.512,17.42,26.784,16.217,17.995,15.746,22.494,22.285,27.673,35.101,14.961,16.321,20.506,18.623,27.934,23.279,47.447,18.728,21.919,17.001,24.273,26.993,25.842,71.301,24.743,25.214,28.876,27.202,59.531,51.527,132.139,64.239,51.265,71.824,53.986,80.194,72.765,180.894,86.157,62.617,86.733,139.149,139.097,130.884,286.929,123.089,119.166,184.137,211.234,207.363,223.685,514.851,194.024,256.065,207.363,226.405,243.458,193.291,689.886,252.665,286.145,184.555,258.524,243.981,220.075,731.84,335.056,245.655,204.695,298.019,294.828,353.313,428.014,362.938,269.039,262.238,99.392,234.095,329.04,280.129,293.311,241.052,198.993,190.885,243.144,224.731,230.485,220.546,210.136,177.546,138.626,130.674,185.602,196.587,192.768,158.243,128.791,107.971,163.892,159.969,144.119,157.563,136.847,96.044,89.558,130.413,143.386,125.914,109.017,109.802,86.523,89.924,123.299,133.133,119.689,114.981,111.581,98.189,92.853,102.583,111.476,104.152,108.442,92.173,76.846,92.121,101.903,112.679,114.981,106.35,103.996,82.234,81.188,97.613,108.651,93.69,106.925,81.397,70.778,61.832,94.789,100.438,101.432,102.374,99.549,74.126,72.19,90.865,97.823,106.559,102.792,91.65,74.23,83.385,92.173,102.949,102.792,108.599,92.278,66.279,77.735,85.896,97.613,111.476,108.913,88.145,81.083,68.214,97.457,87.727,96.62,83.699,62.46,55.189,72.19,90.551,116.864,110.43,100.543,92.592,85.216,88.459,92.016,96.253,98.398,89.348,81.972,81.606,59.321,82.443,91.702,95.521,92.905,76.427,75.747,57.124,58.798,88.616,94.841,91.912,80.821,61.362,60.629,78.154,92.853,85.582,79.566,80.298,48.493,52.573,79.514,79.566,88.145,84.117,66.75,55.555,43.942,80.56,94.579,83.019,82.705,69.104,53.776,46.924,85.477,83.28,86.105,83.542,69.627,52.625,49.591,76.061,82.286,81.502,78.311,75.329,52.678,52.573,82.129,82.705,88.825,77.892,68.685,58.641,54.09,78.886,90.447,80.194,89.662,92.068,72.818,65.076,86.942,80.246,94.527,111.842,99.968,78.415,73.341,104.676],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.366,0.366,0.418,0.418,0.575,0.575,0.575,0.941,0.575,0.837,1.308,1.308,2.197,3.923,4.603,8.474,10.88,12.554,12.031,22.284,28.091,31.335,36.619,41.589,50.692,57.335,73.238,81.294,86.473,97.72,106.874,112.994,120.997,129.838,140.719,138.627,144.59,144.119,151.495,158.453,166.614,184.295,172.472,172.576,175.087,177.964,183.404,184.398,204.172,187.799,194.757,195.437,199.204,207.574,205.482,253.504,230.8,237.286,244.243,254.444,289.702,314.236,420.533,413.471,439.993,486.603,511.713,564.705,577.939,707.306,661.324,659.702,695.17,762.495,847.606,898.296,1112.46,1054.655,1087.664,1209.184,1333.685,1401.899,1486.487,1870.454,1777.549,1910.525,1998.722,2040.99,2073.214,2059.142,2525.343,2263.157,2355.278,2283.768,2334.929,2352.505,2329.122,2867.671,2512.841,2505.831,2424.381,2537.845,2574.149,2683.481,2891.42,2522.518,2456.501,2473.084,2367.781,2303.857,2338.069,2264.885,2130.182,2008.296,1938.25,1866.897,2010.649,2001.285,1902.73,1843.147,1759.972,1696.466,1636.099,1575.888,1518.346,1490.202,1452.485,1390.182,1308.837,1239.262,1264.528,1293.823,1252.34,1213.316,1157.395,1095.196,1055.963,1078.405,1057.899,1023.844,988.742,940.981,890.657,884.537,918.278,920.998,897.301,886.368,888.932,877.319,883.649,896.308,884.485,855.504,844.257,821.449,786.714,780.646,789.696,799.792,803.297,805.495,801.049,791.11,795.452,800.944,807.692,788.703,780.647,755.694,722.476,702.074,715.675,718.5,711.281,719.965,712.589,705.318,706.73,735.763,738.797,744.918,746.278,735.554,710.235,719.494,739.477,751.561,756.53,758.57,748.056,722.685,726.19,728.701,734.141,742.668,748.789,728.335,717.14,719.075,738.797,740.628,739.635,711.858,665.405,632.449,623.556,645.893,665.3,688.003,691.926,700.819,723.575,756.845,776.671,782.373,763.907,742.825,724.254,713.268,687.373,681.357,681.043,680.311,674.818,661.897,655.672,631.19,630.667,636.84,639.979,636.37,624.286,609.221,594.103,615.133,649.188,646.154,630.879,619.265,586.937,578.148,597.033,598.445,593.737,592.272,579.456,554.713,550.162,578.149,593.214,596.667,591.227,576.214,563.24,554.609,596.144,598.864,590.39,590.913,577.835,561.356,557.171,586.308,583.117,581.339,573.545,565.332,548.383,548.331,580.869,587.513,594.052,590.442,580.816,564.128,565.54,591.853,600.171,597.66,598.497,612.673,616.806,623.241,656.093,657.453,661.533,693.181,703.487,689.834,690.357,729.957],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.052,0.052,0.06,0.06,0.082,0.082,0.082,0.082,0.082,0.112,0.187,0.164,0.314,0.56,0.605,1.211,1.517,1.719,1.719,3.034,3.766,4.379,4.626,5.597,6.965,8.191,8.998,10.634,11.643,13.108,13.952,14.498,16.06,16.276,17.487,18.085,18.339,18.429,19.452,19.849,21.313,22.501,22.322,22.083,22.763,22.21,23.017,22.389,24.153,24.691,25.491,24.99,25.797,25.663,26.029,29.436,30.296,30.767,32.463,32.882,37.53,41.199,49.89,55.533,59.254,65.39,69.216,72.168,75.202,82.167,85.298,86.92,89.049,101.216,109.63,117.933,133.081,138.357,146.435,160.35,170.648,180.4,193.658,226.218,236.351,255.908,259.227,261.394,266.55,262.208,287.213,295.591,299.888,296.629,301.218,301.293,305.119,311.112,322.882,317.098,319.975,325.617,332.881,351.915,308.512,312.495,315.835,324.056,295.68,287.004,283.536,262.41,252.463,248.465,239.43,252.501,253.794,238.892,231.8,221.405,216.989,213.925,206.459,190.392,184.802,179.959,175.991,168.578,161.613,157.234,161.979,158.317,150.822,145.793,142.736,138.058,135.427,130.645,128.276,125.675,118.74,114.876,113.516,113.569,112.552,111.087,110.198,111.05,111.304,112.971,113.389,110.43,107.336,105.116,104.182,101.41,98.361,98.256,98.159,98.331,99.878,99.579,101.268,102.038,100.476,99.863,99.287,96.246,96.328,93.1,91.463,88.698,88.295,87.121,88.227,87.577,90.17,90.649,92.128,91.568,91.194,91.926,91.986,90.858,90.873,92.472,92.659,93.391,92.853,93.683,93.772,92.636,91.829,90.933,90.17,91.411,91.456,90.865,92.98,91.62,93.272,91.859,89.737,86.135,82.466,78.766,79.334,78.348,82.51,84.483,86.89,91.194,95.484,97.808,98.017,95.073,93.354,91.755,90.238,89.722,85.559,84.192,83.542,83.131,83.639,82.847,82.01,81.696,78.318,77.877,77.78,77.638,78.266,76.211,76.711,79.476,80.082,78.759,76.995,76.921,75.082,73.931,74.126,72.227,72.594,73.244,71.308,72.317,71.084,71.233,73.378,72.646,72.444,72.78,72.526,72.952,73.655,72.041,72.481,72.601,72.676,72.511,72.893,71.547,71.405,70.748,70,70.815,70.822,71.248,72.115,72.175,73.221,73.162,72.212,73.064,73.281,72.818,73.924,72.691,74.372,77.713,79.738,81.307,82.458,81.001,83.048,86.217,87.345,88.145,89.326,91.859]},{"iso":"CHN","continent":"Asia","population":1439323774,"name":"China","population_density":147.674,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,548,643,920,1406,2075,2877,5509,6087,8141,9802,11891,16630,19716,23707,27440,30587,34110,36814,39829,42354,44386,44759,59895,66358,68413,70513,72434,74211,74619,75077,75550,77001,77022,77241,77754,78166,78600,78928,79356,79932,80136,80261,80386,80537,80690,80770,80823,80860,80887,80921,80932,80945,80977,81003,81033,81058,81102,81156,81250,81305,81435,81498,81591,81661,81782,81897,81999,82122,82198,82279,82361,82432,82511,82543,82602,82665,82718,82809,82883,82941,83014,83134,83213,83306,83356,83403,83760,83787,83805,83817,83853,83868,83884,83899,83909,83912,83918,83940,83944,83956,83959,83959,83964,83966,83968,83970,83975,83976,83990,84010,84011,84018,84024,84029,84038,84044,84054,84063,84063,84063,84063,84081,84084,84095,84102,84103,84106,84106,84123,84128,84146,84154,84161,84160,84171,84177,84186,84191,84195,84198,84209,84216,84228,84286,84335,84378,84422,84458,84494,84494,84553,84572,84624,84653,84673,84701,84725,84743,84757,84780,84785,84816,84830,84838,84857,84871,84889,84917,84950,84992,84992,85071,85117,85117,85226,85246,85327,85402,85418,85503,85622,85708,85906,86045,86202,86381,86570,86783,86990,87213,87489,87655,87827,87985,88099,88206,88328,88460,88580,88672,88793,88906,88958,89045,89144,89214,89279,89375,89441,89494,89527,89567,89616,89654,89695,89718,89752,89784,89814,89836,89863,89895,89914,89933,89953,89986,90008,90025,90058,90078,90087,90100,90127,90145,90168,90197,90219,90235,90253,90294,90311,90334,90369,90381,90399,90409,90424,90441,90456,90483,90505,90528,90545,90567,90584,90604,90629,90652,90667,90687,90728,90751,90778,90812,90830,90858,90869,90905,90925,90955,90972,91006,91022,91044,91073,91108,91128,91151,91175,91222,91271,91299,91339,91366,91397,91452,91478,91509,91552,91591,91622,91665,91693,91719,91752,91783,91807,91828,91850,91872,91885,91906,91935,91977,92037,92116,92211,92296,92402,92488,92586,92681,92814,92902,92993,93113,93221,93348,93467,93577,93670,93782,93898,94025,94124,94217,94328,94427,94537,94626,94734],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.381,0.447,0.639,0.977,1.442,1.999,3.827,4.229,5.656,6.81,8.262,11.554,13.698,16.471,19.065,21.251,23.699,25.577,27.672,29.426,30.838,31.097,41.613,46.104,47.531,48.99,50.325,51.56,51.843,52.161,52.49,53.498,53.513,53.665,54.021,54.307,54.609,54.837,55.134,55.534,55.676,55.763,55.85,55.955,56.061,56.117,56.153,56.179,56.198,56.222,56.229,56.238,56.26,56.279,56.299,56.317,56.347,56.385,56.45,56.488,56.579,56.622,56.687,56.736,56.82,56.9,56.971,57.056,57.109,57.165,57.222,57.271,57.326,57.348,57.389,57.433,57.47,57.533,57.585,57.625,57.676,57.759,57.814,57.879,57.913,57.946,58.194,58.213,58.225,58.234,58.259,58.269,58.28,58.291,58.298,58.3,58.304,58.319,58.322,58.33,58.332,58.332,58.336,58.337,58.339,58.34,58.343,58.344,58.354,58.368,58.368,58.373,58.377,58.381,58.387,58.391,58.398,58.405,58.405,58.405,58.405,58.417,58.419,58.427,58.432,58.432,58.434,58.434,58.446,58.45,58.462,58.468,58.473,58.472,58.48,58.484,58.49,58.493,58.496,58.498,58.506,58.511,58.519,58.559,58.593,58.623,58.654,58.679,58.704,58.704,58.745,58.758,58.794,58.814,58.828,58.848,58.864,58.877,58.887,58.903,58.906,58.928,58.937,58.943,58.956,58.966,58.978,58.998,59.021,59.05,59.05,59.105,59.137,59.137,59.213,59.226,59.283,59.335,59.346,59.405,59.488,59.547,59.685,59.782,59.891,60.015,60.146,60.294,60.438,60.593,60.785,60.9,61.02,61.129,61.209,61.283,61.368,61.459,61.543,61.607,61.691,61.769,61.805,61.866,61.935,61.983,62.028,62.095,62.141,62.178,62.201,62.229,62.263,62.289,62.317,62.333,62.357,62.379,62.4,62.415,62.434,62.456,62.47,62.483,62.497,62.52,62.535,62.547,62.57,62.584,62.59,62.599,62.618,62.63,62.646,62.666,62.682,62.693,62.705,62.734,62.745,62.761,62.786,62.794,62.807,62.814,62.824,62.836,62.846,62.865,62.88,62.896,62.908,62.923,62.935,62.949,62.966,62.982,62.993,63.007,63.035,63.051,63.07,63.094,63.106,63.125,63.133,63.158,63.172,63.193,63.205,63.228,63.239,63.255,63.275,63.299,63.313,63.329,63.346,63.378,63.412,63.432,63.46,63.478,63.5,63.538,63.556,63.578,63.608,63.635,63.656,63.686,63.706,63.724,63.747,63.768,63.785,63.799,63.815,63.83,63.839,63.854,63.874,63.903,63.945,63.999,64.066,64.125,64.198,64.258,64.326,64.392,64.484,64.546,64.609,64.692,64.767,64.855,64.938,65.015,65.079,65.157,65.238,65.326,65.395,65.459,65.536,65.605,65.682,65.743,65.818],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.066,0.192,0.338,0.465,0.557,1.829,0.402,1.427,1.154,1.451,3.293,2.144,2.773,2.594,2.186,2.448,1.879,2.095,1.754,1.412,0.259,10.516,4.49,1.428,1.459,1.335,1.235,0.283,0.318,0.329,1.008,0.015,0.152,0.356,0.286,0.302,0.228,0.297,0.4,0.142,0.087,0.087,0.105,0.106,0.056,0.037,0.026,0.019,0.024,0.008,0.009,0.022,0.018,0.021,0.017,0.031,0.038,0.065,0.038,0.09,0.044,0.065,0.049,0.084,0.08,0.071,0.085,0.053,0.056,0.057,0.049,0.055,0.022,0.041,0.044,0.037,0.063,0.051,0.04,0.051,0.083,0.055,0.065,0.035,0.033,0.248,0.019,0.013,0.008,0.025,0.01,0.011,0.01,0.007,0.002,0.004,0.015,0.003,0.008,0.002,0,0.003,0.001,0.001,0.001,0.003,0.001,0.01,0.014,0.001,0.005,0.004,0.003,0.006,0.004,0.007,0.006,0,0,0,0.013,0.002,0.008,0.005,0.001,0.002,0,0.012,0.003,0.013,0.006,0.005,-0.001,0.008,0.004,0.006,0.003,0.003,0.002,0.008,0.005,0.008,0.04,0.034,0.03,0.031,0.025,0.025,0,0.041,0.013,0.036,0.02,0.014,0.019,0.017,0.013,0.01,0.016,0.003,0.022,0.01,0.006,0.013,0.01,0.013,0.019,0.023,0.029,0,0.055,0.032,0,0.076,0.014,0.056,0.052,0.011,0.059,0.083,0.06,0.138,0.097,0.109,0.124,0.131,0.148,0.144,0.155,0.192,0.115,0.12,0.11,0.079,0.074,0.085,0.092,0.083,0.064,0.084,0.079,0.036,0.06,0.069,0.049,0.045,0.067,0.046,0.037,0.023,0.028,0.034,0.026,0.028,0.016,0.024,0.022,0.021,0.015,0.019,0.022,0.013,0.013,0.014,0.023,0.015,0.012,0.023,0.014,0.006,0.009,0.019,0.013,0.016,0.02,0.015,0.011,0.013,0.028,0.012,0.016,0.024,0.008,0.013,0.007,0.01,0.012,0.01,0.019,0.015,0.016,0.012,0.015,0.012,0.014,0.017,0.016,0.01,0.014,0.028,0.016,0.019,0.024,0.013,0.019,0.008,0.025,0.014,0.021,0.012,0.024,0.011,0.015,0.02,0.024,0.014,0.016,0.017,0.033,0.034,0.019,0.028,0.019,0.022,0.038,0.018,0.022,0.03,0.027,0.022,0.03,0.019,0.018,0.023,0.022,0.017,0.015,0.015,0.015,0.009,0.015,0.02,0.029,0.042,0.055,0.066,0.059,0.074,0.06,0.068,0.066,0.092,0.061,0.063,0.083,0.075,0.088,0.083,0.076,0.065,0.078,0.081,0.088,0.069,0.065,0.077,0.069,0.076,0.062,0.075],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.066,0.258,0.596,1.061,1.618,3.447,3.849,5.276,6.364,7.623,10.578,12.257,14.473,15.238,17.022,18.043,18.768,19.412,17.873,17.141,14.627,22.549,24.853,23.833,23.413,22.653,22.134,21.005,21.064,10.877,7.395,5.982,4.675,3.696,2.747,2.766,2.676,2.644,2.036,2.163,2.098,1.829,1.648,1.452,1.28,1.02,0.646,0.523,0.46,0.381,0.285,0.201,0.163,0.147,0.138,0.15,0.164,0.221,0.25,0.318,0.344,0.388,0.42,0.473,0.515,0.521,0.568,0.531,0.543,0.535,0.535,0.506,0.448,0.418,0.377,0.361,0.368,0.362,0.353,0.349,0.41,0.424,0.445,0.443,0.413,0.61,0.589,0.551,0.476,0.446,0.391,0.367,0.344,0.103,0.086,0.077,0.084,0.062,0.06,0.051,0.041,0.037,0.036,0.033,0.019,0.019,0.012,0.02,0.034,0.032,0.036,0.039,0.041,0.044,0.047,0.044,0.036,0.035,0.03,0.026,0.036,0.032,0.036,0.034,0.029,0.031,0.031,0.043,0.033,0.044,0.042,0.042,0.04,0.046,0.05,0.044,0.044,0.034,0.03,0.033,0.039,0.039,0.075,0.103,0.13,0.158,0.181,0.198,0.193,0.226,0.199,0.201,0.191,0.174,0.168,0.16,0.173,0.142,0.145,0.112,0.114,0.11,0.097,0.093,0.09,0.093,0.096,0.116,0.123,0.113,0.162,0.181,0.171,0.234,0.229,0.262,0.285,0.296,0.3,0.351,0.411,0.473,0.556,0.609,0.681,0.801,0.89,0.951,1.046,1.1,1.118,1.129,1.115,1.063,0.989,0.93,0.867,0.758,0.707,0.671,0.64,0.597,0.583,0.567,0.524,0.486,0.489,0.451,0.409,0.396,0.364,0.329,0.306,0.289,0.238,0.216,0.201,0.199,0.186,0.171,0.167,0.152,0.149,0.139,0.14,0.134,0.131,0.135,0.127,0.12,0.116,0.121,0.111,0.112,0.12,0.112,0.109,0.116,0.135,0.128,0.131,0.139,0.127,0.125,0.121,0.118,0.102,0.1,0.103,0.094,0.102,0.101,0.109,0.111,0.113,0.12,0.117,0.112,0.11,0.126,0.127,0.134,0.144,0.14,0.143,0.141,0.152,0.138,0.143,0.136,0.136,0.134,0.13,0.142,0.141,0.141,0.136,0.141,0.15,0.173,0.177,0.185,0.18,0.188,0.21,0.211,0.2,0.196,0.204,0.198,0.209,0.206,0.186,0.191,0.191,0.178,0.166,0.159,0.144,0.134,0.131,0.128,0.135,0.16,0.2,0.251,0.295,0.36,0.405,0.453,0.49,0.54,0.546,0.543,0.567,0.568,0.596,0.611,0.621,0.594,0.611,0.629,0.634,0.628,0.605,0.599,0.592,0.603,0.587,0.581],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.492,0.55,0.744,0.882,1.041,1.445,1.671,1.806,2.119,2.228,2.413,2.474,2.303,2.247,2.052,1.719,2.909,3.201,3.136,3.045,2.986,2.96,2.964,1.507,0.912,0.852,0.646,0.477,0.352,0.352,0.35,0.335,0.234,0.289,0.287,0.249,0.22,0.192,0.175,0.14,0.088,0.072,0.062,0.053,0.039,0.025,0.021,0.018,0.017,0.017,0.018,0.022,0.03,0.033,0.043,0.046,0.053,0.055,0.062,0.064,0.069,0.068,0.069,0.068,0.069,0.065,0.061,0.054,0.048,0.046,0.044,0.044,0.045,0.043,0.047,0.053,0.054,0.058,0.054,0.052,0.081,0.077,0.067,0.06,0.054,0.051,0.048,0.014,0.012,0.011,0.01,0.009,0.008,0.007,0.006,0.005,0.005,0.005,0.003,0.003,0.002,0.002,0.003,0.005,0.004,0.005,0.005,0.005,0.006,0.005,0.004,0.005,0.004,0.004,0.003,0.004,0.004,0.004,0.004,0.004,0.004,0.004,0.004,0.004,0.005,0.005,0.006,0.005,0.006,0.005,0.006,0.004,0.004,0.004,0.005,0.004,0.005,0.01,0.014,0.018,0.022,0.025,0.028,0.026,0.027,0.024,0.024,0.023,0.021,0.021,0.023,0.019,0.018,0.015,0.013,0.014,0.013,0.011,0.011,0.011,0.011,0.013,0.013,0.016,0.015,0.021,0.024,0.023,0.031,0.029,0.033,0.041,0.034,0.038,0.05,0.048,0.066,0.071,0.079,0.096,0.106,0.115,0.127,0.13,0.143,0.144,0.144,0.14,0.131,0.121,0.111,0.096,0.092,0.084,0.08,0.08,0.075,0.071,0.068,0.063,0.06,0.058,0.053,0.053,0.048,0.042,0.04,0.037,0.032,0.027,0.026,0.026,0.025,0.022,0.021,0.02,0.019,0.018,0.017,0.017,0.017,0.016,0.016,0.016,0.015,0.015,0.014,0.014,0.014,0.014,0.014,0.015,0.015,0.017,0.016,0.016,0.017,0.016,0.016,0.015,0.013,0.013,0.012,0.011,0.012,0.013,0.013,0.014,0.014,0.015,0.014,0.015,0.014,0.014,0.016,0.017,0.017,0.018,0.018,0.019,0.018,0.018,0.017,0.018,0.016,0.017,0.016,0.017,0.017,0.018,0.017,0.018,0.017,0.02,0.023,0.022,0.023,0.024,0.024,0.027,0.025,0.024,0.025,0.025,0.025,0.027,0.024,0.024,0.024,0.023,0.021,0.02,0.018,0.018,0.016,0.015,0.015,0.017,0.021,0.026,0.034,0.041,0.049,0.055,0.06,0.064,0.069,0.069,0.069,0.071,0.073,0.076,0.078,0.076,0.076,0.078,0.078,0.08,0.077,0.074,0.075,0.075,0.075,0.072,0.07]},{"iso":"COL","continent":"South America","population":50882884,"name":"Colombia","population_density":44.223,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,3,9,9,13,22,34,57,75,102,108,158,196,231,277,378,470,491,539,608,702,798,906,1065,1161,1267,1406,1485,1579,1780,2054,2223,2473,2709,2776,2852,2979,3105,3233,3439,3621,3792,3977,4149,4356,4561,4881,5142,5379,5597,5949,6207,6507,7006,7285,7668,7973,8613,8959,9456,10051,10495,11063,11613,12272,12930,13610,14216,14939,15574,16295,16935,17687,18330,19131,20177,21175,21981,23003,24104,25366,26688,28236,29383,30493,31833,33354,35120,36635,38027,39236,40719,42078,43682,45212,46858,48746,50939,53063,54931,57046,60217,63276,65633,68652,71183,73572,77113,80599,84442,88591,91769,95043,97846,102009,106110,109505,113389,117110,120281,124494,128638,133973,140776,145632,150445,154277,159898,165169,173206,182140,190700,197278,204005,211038,218428,226373,233541,240795,248976,257101,267385,276055,286020,295508,306181,317651,327850,334979,345714,357710,367204,376870,387481,397623,410453,422519,433805,445111,456689,468332,476660,489122,502178,513719,522138,533103,541139,551688,562113,572243,581995,590492,599884,607904,615094,624026,633321,641574,650063,658456,666521,671848,679513,686851,694664,702088,708964,716319,721892,728590,736377,743945,750471,758398,765076,770435,777537,784268,790823,798317,806038,813056,818203,824042,829679,835339,841532,848147,855052,862158,869808,877684,886179,894300,902747,911316,919084,924098,930159,936982,945354,952371,959572,965883,974139,981700,990373,998942,1007711,1015885,1025052,1033218,1041935,1053122,1063151,1074184,1083321,1093256,1099392,1108086,1117977,1127733,1136447,1143887,1149064,1155356,1165326,1174012,1182697,1191634,1198746,1205217,1211128,1218003,1225490,1233444,1240493,1248417,1254979,1262494,1270991,1280487,1290510,1299613,1308376,1316806,1324792,1334089,1343322,1352607,1362249,1371103,1377100,1384610,1392133,1399911,1408909,1417072,1425774,1434516,1444646,1456599,1468795],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.02,0.02,0.02,0.02,0.059,0.177,0.177,0.255,0.432,0.668,1.12,1.474,2.005,2.123,3.105,3.852,4.54,5.444,7.429,9.237,9.65,10.593,11.949,13.796,15.683,17.806,20.93,22.817,24.9,27.632,29.185,31.032,34.982,40.367,43.689,48.602,53.24,54.557,56.05,58.546,61.022,63.538,67.587,71.163,74.524,78.16,81.54,85.608,89.637,95.926,101.056,105.713,109.998,116.916,121.986,127.882,137.689,143.172,150.699,156.693,169.271,176.071,185.839,197.532,206.258,217.421,228.23,241.181,254.113,267.477,279.387,293.596,306.075,320.245,332.823,347.602,360.239,375.981,396.538,416.152,431.992,452.077,473.715,498.517,524.499,554.921,577.463,599.278,625.613,655.505,690.212,719.987,747.344,771.104,800.249,826.958,858.481,888.55,920.899,958.004,1001.103,1042.846,1079.558,1121.124,1183.443,1243.562,1289.884,1349.216,1398.958,1445.909,1515.5,1584.01,1659.536,1741.077,1803.534,1867.878,1922.965,2004.78,2085.377,2152.099,2228.431,2301.56,2363.879,2446.677,2528.119,2632.968,2766.667,2862.102,2956.692,3032.002,3142.471,3246.062,3404.013,3579.593,3747.822,3877.099,4009.305,4147.524,4292.76,4448.903,4589.775,4732.338,4893.119,5052.799,5254.91,5425.302,5621.144,5807.611,6017.367,6242.787,6443.228,6583.334,6794.308,7030.065,7216.651,7406.616,7615.154,7814.475,8066.622,8303.755,8525.558,8747.755,8975.297,9204.117,9367.787,9612.702,9869.291,10096.106,10261.565,10477.059,10634.991,10842.31,11047.192,11246.277,11437.933,11604.924,11789.505,11947.122,12088.426,12263.967,12446.641,12608.837,12775.671,12940.619,13099.12,13203.811,13354.451,13498.665,13652.214,13798.117,13933.251,14077.799,14187.325,14318.96,14471.998,14620.732,14748.987,14904.776,15036.019,15141.339,15280.915,15413.199,15542.024,15689.303,15841.044,15978.968,16080.122,16194.876,16305.66,16416.896,16538.607,16668.611,16804.315,16943.969,17094.314,17249.101,17416.053,17575.655,17741.663,17910.07,18062.734,18161.274,18280.391,18414.483,18579.018,18716.923,18858.444,18982.474,19144.729,19293.325,19463.775,19632.181,19804.518,19965.162,20145.32,20305.807,20477.122,20696.979,20894.079,21110.91,21290.48,21485.732,21606.322,21777.185,21971.573,22163.307,22334.563,22480.782,22582.525,22706.182,22902.122,23072.827,23243.513,23419.152,23558.924,23686.098,23802.267,23937.381,24084.523,24240.843,24379.377,24535.107,24664.07,24811.762,24978.753,25165.378,25362.36,25541.261,25713.48,25879.154,26036.103,26218.817,26400.272,26582.75,26772.244,26946.252,27064.111,27211.704,27359.554,27512.415,27689.252,27849.679,28020.699,28192.506,28391.59,28626.502,28866.19],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.039,0.118,0,0.079,0.177,0.236,0.452,0.354,0.531,0.118,0.983,0.747,0.688,0.904,1.985,1.808,0.413,0.943,1.356,1.847,1.887,2.123,3.125,1.887,2.083,2.732,1.553,1.847,3.95,5.385,3.321,4.913,4.638,1.317,1.494,2.496,2.476,2.516,4.049,3.577,3.361,3.636,3.38,4.068,4.029,6.289,5.129,4.658,4.284,6.918,5.07,5.896,9.807,5.483,7.527,5.994,12.578,6.8,9.768,11.694,8.726,11.163,10.809,12.951,12.932,13.364,11.91,14.209,12.48,14.17,12.578,14.779,12.637,15.742,20.557,19.614,15.84,20.085,21.638,24.802,25.981,30.423,22.542,21.815,26.335,29.892,34.707,29.774,27.357,23.76,29.145,26.708,31.523,30.069,32.349,37.105,43.099,41.743,36.712,41.566,62.32,60.118,46.322,59.332,49.742,46.951,69.591,68.51,75.526,81.54,62.457,64.344,55.087,81.815,80.597,66.722,76.332,73.129,62.32,82.798,81.442,104.849,133.699,95.435,94.59,75.31,110.469,103.591,157.951,175.58,168.229,129.277,132.206,138.219,145.235,156.143,140.873,142.563,160.781,159.68,202.111,170.391,195.842,186.467,209.756,225.42,200.441,140.106,210.975,235.757,186.585,189.966,208.538,199.32,252.148,237.133,221.803,222.197,227.542,228.82,163.67,244.915,256.589,226.815,165.458,215.495,157.931,207.319,204.882,199.085,191.656,166.991,184.581,157.617,141.305,175.54,182.674,162.196,166.834,164.947,158.501,104.691,150.64,144.214,153.549,145.904,135.134,144.548,109.526,131.636,153.038,148.734,128.255,155.789,131.243,105.32,139.575,132.284,128.825,147.279,151.741,137.925,101.154,114.754,110.784,111.236,121.711,130.004,135.704,139.654,150.345,154.787,166.952,159.602,166.009,168.406,152.664,98.54,119.117,134.092,164.535,137.905,141.521,124.03,162.255,148.596,170.45,168.406,172.337,160.643,180.159,160.486,171.315,219.858,197.1,216.831,179.569,195.252,120.591,170.863,194.388,191.734,171.256,146.218,101.743,123.657,195.94,170.706,170.686,175.639,139.772,127.174,116.169,135.114,147.142,156.32,138.534,155.73,128.963,147.692,166.991,186.625,196.982,178.901,172.219,165.675,156.949,182.714,181.456,182.478,189.494,174.007,117.859,147.594,147.849,152.861,176.837,160.427,171.02,171.806,199.085,234.912,239.688],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.039,0.157,0.157,0.236,0.413,0.649,1.101,1.455,1.947,1.947,2.93,3.598,4.109,4.777,6.31,7.764,7.646,8.471,8.844,9.944,11.143,12.362,13.502,13.581,15.251,17.04,17.237,17.237,19.3,22.562,22.758,25.784,28.339,26.924,26.865,27.514,26.04,23.171,23.899,22.563,21.286,23.605,25.491,27.063,28.616,32.389,33.469,34.55,35.473,38.755,40.445,42.273,48.051,47.245,49.643,50.979,59.273,59.155,63.853,69.651,68.57,74.25,77.532,84.489,84.843,91.407,93.549,96.064,99.818,102.825,104.594,106.422,106.127,108.505,117.152,122.557,125.917,131.832,140.892,150.915,164.259,178.94,180.925,183.126,193.621,203.428,216.497,221.469,222.845,216.182,222.785,227.678,232.866,233.043,230.685,238.016,253.758,271.741,279.308,294.166,324.963,355.012,368.985,391.212,397.855,403.063,435.942,462.886,476.092,497.514,513.649,518.661,524.006,558.87,569.876,568.088,568.894,560.483,560.346,578.8,605.155,628.189,681.291,710.004,728.262,730.443,778.592,799.385,875.894,946.625,981.155,1014.997,1052.613,1115.522,1150.288,1202.84,1185.762,1152.745,1145.297,1175.7,1245.605,1277.777,1328.384,1358.708,1427.591,1510.448,1550.108,1530.534,1539.398,1604.764,1595.507,1599.006,1597.788,1571.688,1623.395,1720.422,1731.25,1717.69,1758.647,1797.501,1752.633,1798.228,1802.669,1792.351,1736.006,1729.304,1659.693,1638.192,1679.404,1633.574,1568.641,1508.817,1527.94,1470.062,1453.436,1421.657,1399.449,1362.56,1337.738,1335.694,1309.614,1256.688,1266.023,1234.697,1205.572,1189.28,1157.58,1137.181,1088.206,1115.151,1117.549,1122.069,1096.775,1106.66,1102.769,1063.541,1093.59,1094.238,1070.025,1068.57,1092.056,1074.192,1044.103,1053.537,1024.746,1003.698,996.584,979.309,963.272,965.001,1014.192,1054.225,1110.393,1158.759,1203.057,1241.459,1258.419,1217.305,1186.077,1165.382,1162.965,1141.268,1116.78,1072.404,1081.995,1132.051,1183.384,1217.698,1225.5,1248.238,1286.876,1323.332,1332.392,1403.654,1430.304,1478.729,1485.961,1520.57,1461.002,1471.379,1494.452,1466.328,1440.484,1369.871,1292.045,1220.45,1295.799,1295.642,1271.94,1255.845,1224.361,1205.317,1219.743,1231.2,1182.402,1168.016,1135.864,1115.955,1105.146,1125.664,1176.486,1227.997,1277.837,1300.418,1334.103,1344.048,1372.034,1407.056,1421.521,1417.374,1409.886,1404.992,1350.632,1332.551,1323.451,1293.598,1288.979,1266.928,1248.454,1246.253,1327.479,1414.797,1506.636],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.022,0.034,0.059,0.093,0.157,0.202,0.261,0.278,0.407,0.489,0.553,0.618,0.851,1.033,1.075,1.07,1.157,1.322,1.463,1.482,1.671,1.881,2.044,2.24,2.198,2.193,2.454,2.777,2.982,3.386,3.658,3.625,3.574,3.366,2.951,2.836,2.712,2.561,2.852,3.159,3.285,3.512,3.728,4.049,4.27,4.456,4.548,5.054,5.197,5.464,5.966,6.017,6.427,6.671,7.479,7.726,8.28,8.549,9.012,9.532,10.22,10.273,11.149,11.663,11.694,12.477,12.665,13.145,13.092,13.356,13.252,13.799,14.706,15.725,15.964,17.036,18.016,19.754,21.217,22.626,23.045,23.898,24.791,25.97,27.385,27.927,27.489,27.663,28.71,28.764,28.997,28.334,28.702,30.094,32.857,34.657,36.086,37.52,42.128,46.095,47.411,49.73,50.873,52.336,56.339,57.224,59.425,64.456,64.903,66.989,68.151,69.897,71.624,70.366,69.622,71.147,70.857,74.816,74.763,78.227,87.795,90.524,93.59,95.446,99.399,102.563,110.149,116.132,126.531,131.487,139.615,143.579,149.528,149.27,144.312,140.645,145.146,149.071,158.198,161.792,167.463,173.977,183.576,192.81,198.633,189.775,195.572,201.275,201.291,198.464,196.052,195.892,211.898,215.635,213.642,218.729,224.097,226.995,221.902,220.869,223.648,224.364,216.259,214.537,204.411,210.646,204.927,196.712,191.689,191.908,187.492,187.447,178.017,173.825,171.481,167.272,167.25,164.445,164.571,159.341,155.784,150.289,149.054,146.064,141.805,139.811,140.502,137.787,139.048,138.36,135.839,138.789,136.889,136.288,137.422,134.457,131.613,134.331,133.753,134.707,134.112,130.566,127.494,124.982,121.329,118.224,117.907,123.407,128.491,134.777,142.737,148.15,153.293,157.965,159.824,152.423,147.327,142.633,143.338,139.323,135.482,131.391,140.493,144.705,149.899,150.452,155.371,158.103,166.121,165.868,169.114,176.172,180.271,186.627,189.331,191.487,185.788,185.723,182.085,181.318,174.808,170.043,156.685,157.123,160.705,157.322,154.315,154.941,154.02,157.653,156.584,147.894,144.528,142.476,137.175,139.455,139.71,144.214,148.767,154.408,160.217,165.983,168.339,173.583,174.906,177.152,176.414,174.342,175.855,176.11,169.279,167.943,162.962,158.877,158.072,153.919,153.493,161.199,168.555,180.993,193.396]},{"iso":"COM","continent":"Africa","population":869595,"name":"Comoros","population_density":437.352,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,3,3,3,3,8,8,8,11,11,11,11,11,11,11,11,11,11,11,34,34,78,78,87,87,87,87,87,87,106,106,106,132,132,132,132,141,141,141,141,162,162,163,176,176,176,197,197,210,210,247,247,247,265,265,272,272,272,272,272,303,303,303,309,309,311,311,311,313,314,314,317,317,317,321,321,328,328,328,334,334,337,337,340,340,340,354,354,354,378,378,378,386,386,386,388,388,396,396,399,399,399,399,399,399,403,403,405,405,406,406,417,417,417,417,417,417,417,422,422,423,423,423,427,427,448,448,452,452,452,456,456,456,456,456,456,457,467,467,470,470,470,470,470,470,470,474,474,478,478,478,479,479,484,484,487,487,487,491,491,495,495,495,495,495,496,496,496,502,502,502,502,504,504,517,517,517,517,517,517,517,517,537,545,545,545,545,554,557,557,563,563,563,569,569,574,574,579,579,579,591,591,592,592,596,596,596,607,607,610,610,611,611,611,613,613,615,615,616,616,616,617,617,617,617,628,628,628,633,633,643],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.15,1.15,3.45,3.45,3.45,3.45,9.2,9.2,9.2,12.65,12.65,12.65,12.65,12.65,12.65,12.65,12.65,12.65,12.65,12.65,39.099,39.099,89.697,89.697,100.047,100.047,100.047,100.047,100.047,100.047,121.896,121.896,121.896,151.795,151.795,151.795,151.795,162.144,162.144,162.144,162.144,186.294,186.294,187.444,202.393,202.393,202.393,226.542,226.542,241.492,241.492,284.04,284.04,284.04,304.74,304.74,312.789,312.789,312.789,312.789,312.789,348.438,348.438,348.438,355.338,355.338,357.638,357.638,357.638,359.938,361.088,361.088,364.538,364.538,364.538,369.137,369.137,377.187,377.187,377.187,384.087,384.087,387.537,387.537,390.987,390.987,390.987,407.086,407.086,407.086,434.685,434.685,434.685,443.885,443.885,443.885,446.185,446.185,455.384,455.384,458.834,458.834,458.834,458.834,458.834,458.834,463.434,463.434,465.734,465.734,466.884,466.884,479.534,479.534,479.534,479.534,479.534,479.534,479.534,485.283,485.283,486.433,486.433,486.433,491.033,491.033,515.182,515.182,519.782,519.782,519.782,524.382,524.382,524.382,524.382,524.382,524.382,525.532,537.032,537.032,540.481,540.481,540.481,540.481,540.481,540.481,540.481,545.081,545.081,549.681,549.681,549.681,550.831,550.831,556.581,556.581,560.031,560.031,560.031,564.631,564.631,569.231,569.231,569.231,569.231,569.231,570.38,570.38,570.38,577.28,577.28,577.28,577.28,579.58,579.58,594.53,594.53,594.53,594.53,594.53,594.53,594.53,594.53,617.529,626.729,626.729,626.729,626.729,637.078,640.528,640.528,647.428,647.428,647.428,654.328,654.328,660.077,660.077,665.827,665.827,665.827,679.627,679.627,680.777,680.777,685.377,685.377,685.377,698.026,698.026,701.476,701.476,702.626,702.626,702.626,704.926,704.926,707.226,707.226,708.376,708.376,708.376,709.526,709.526,709.526,709.526,722.175,722.175,722.175,727.925,727.925,739.425],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2.3,0,0,0,5.75,0,0,3.45,0,0,0,0,0,0,0,0,0,0,26.449,0,50.598,0,10.35,0,0,0,0,0,21.849,0,0,29.899,0,0,0,10.35,0,0,0,24.149,0,1.15,14.949,0,0,24.149,0,14.949,0,42.549,0,0,20.699,0,8.05,0,0,0,0,35.649,0,0,6.9,0,2.3,0,0,2.3,1.15,0,3.45,0,0,4.6,0,8.05,0,0,6.9,0,3.45,0,3.45,0,0,16.099,0,0,27.599,0,0,9.2,0,0,2.3,0,9.2,0,3.45,0,0,0,0,0,4.6,0,2.3,0,1.15,0,12.65,0,0,0,0,0,0,5.75,0,1.15,0,0,4.6,0,24.149,0,4.6,0,0,4.6,0,0,0,0,0,1.15,11.5,0,3.45,0,0,0,0,0,0,4.6,0,4.6,0,0,1.15,0,5.75,0,3.45,0,0,4.6,0,4.6,0,0,0,0,1.15,0,0,6.9,0,0,0,2.3,0,14.949,0,0,0,0,0,0,0,22.999,9.2,0,0,0,10.35,3.45,0,6.9,0,0,6.9,0,5.75,0,5.75,0,0,13.8,0,1.15,0,4.6,0,0,12.65,0,3.45,0,1.15,0,0,2.3,0,2.3,0,1.15,0,0,1.15,0,0,0,12.65,0,0,5.75,0,11.5],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2.3,2.3,2.3,2.3,8.05,8.05,8.05,11.5,9.2,9.2,9.2,9.2,3.45,3.45,3.45,0,0,0,26.449,26.449,77.047,77.047,87.397,87.397,87.397,87.397,60.948,60.948,32.199,32.199,21.849,51.748,51.748,51.748,51.748,62.098,40.249,40.249,40.249,34.499,34.499,35.649,50.598,40.248,40.248,64.397,64.397,55.197,55.197,96.596,81.647,81.647,102.346,78.197,86.247,71.298,71.298,28.749,28.749,64.398,43.699,43.699,42.549,42.549,44.849,44.849,44.849,11.5,12.65,12.65,9.2,9.2,6.9,11.5,11.5,17.25,16.1,16.1,19.55,19.55,23,18.4,21.85,13.8,13.8,29.899,22.999,22.999,47.148,47.148,43.698,52.898,52.898,36.799,39.099,39.099,20.7,20.7,24.15,14.95,14.95,14.95,12.65,12.65,8.05,8.05,6.9,6.9,8.05,8.05,20.7,20.7,16.1,16.1,13.8,13.8,12.65,18.4,5.75,6.9,6.9,6.9,11.5,11.5,35.649,29.899,34.499,33.349,33.349,37.949,33.349,33.349,9.2,9.2,4.6,5.75,17.25,12.65,16.1,16.1,16.1,16.1,16.1,14.95,3.45,8.05,4.6,9.2,9.2,9.2,10.35,10.35,16.1,11.5,14.95,10.35,10.35,14.95,13.8,18.4,12.65,12.65,9.2,9.2,10.35,5.75,5.75,8.05,8.05,8.05,8.05,10.35,9.2,24.149,24.149,17.249,17.249,17.249,17.249,14.949,14.949,22.999,32.199,32.199,32.199,32.199,42.549,45.999,45.999,29.9,20.7,20.7,27.6,27.6,23,19.55,25.3,18.4,18.4,32.2,25.3,26.45,20.7,25.3,19.55,19.55,32.2,18.4,21.85,20.7,21.85,17.25,17.25,19.55,6.9,9.2,5.75,6.9,5.75,5.75,6.9,4.6,4.6,2.3,14.95,13.8,13.8,19.55,18.4,29.9],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.15,1.15,1.15,1.314,1.314,1.314,1.314,0.493,0.493,0.493,0,0,0,0,3.778,3.778,11.007,11.007,12.485,12.485,12.485,8.707,8.707,1.479,4.6,3.121,3.121,7.393,7.393,7.393,7.393,5.75,5.75,5.75,1.479,4.928,4.928,5.093,5.75,5.75,5.75,9.2,5.75,7.885,7.721,11.664,11.664,11.664,11.171,11.171,10.185,10.185,4.107,4.107,4.107,6.243,6.243,5.093,6.078,6.078,6.407,6.407,1.314,1.643,1.807,0.821,1.314,0.986,0.986,1.643,1.314,2.3,2.3,1.807,2.793,2.793,2.628,2.628,1.971,1.971,1.971,3.286,3.286,2.793,6.735,6.243,6.243,7.557,5.257,5.257,5.586,1.643,2.957,2.957,2.136,2.136,2.136,1.807,1.807,0.493,1.15,0.657,0.986,0.986,1.15,1.15,2.957,2.3,2.3,1.971,1.971,1.807,1.807,0.821,0.821,0.986,0.986,0.986,1.643,1.643,4.271,4.271,4.764,4.764,4.764,4.764,4.764,1.314,1.314,0.657,0.657,0.821,1.807,1.807,2.3,2.3,2.3,2.3,2.136,0.493,0.493,0.657,0.657,1.314,1.314,1.314,1.479,1.479,1.643,1.643,1.479,1.479,1.479,1.971,1.971,1.807,1.807,1.314,1.314,1.314,0.821,0.821,0.164,1.15,1.15,1.15,1.15,1.314,1.314,3.45,2.464,2.464,2.464,2.464,2.136,2.136,0,3.286,4.6,4.6,4.6,4.6,6.078,6.571,3.286,2.957,2.957,2.957,3.943,2.464,2.793,2.793,2.628,2.628,2.628,3.614,3.614,2.957,2.957,2.793,2.793,2.793,2.628,2.628,2.957,2.957,2.464,2.464,2.464,0.986,0.986,0.821,0.821,0.821,0.821,0.821,0.657,0.657,0.329,0.329,1.971,1.971,1.971,2.628,2.628,4.271]},{"iso":"COG","continent":"Africa","population":5518092,"name":"Congo","population_density":15.405,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,3,3,3,3,4,4,4,4,4,4,19,19,19,19,22,22,22,45,45,45,45,60,60,60,60,60,60,117,117,143,143,143,160,165,186,186,200,200,200,200,207,207,220,229,229,229,236,236,264,264,274,274,274,333,333,333,391,391,391,391,412,420,420,469,469,487,487,487,487,571,571,571,571,611,611,611,611,611,635,683,683,683,728,728,728,728,728,728,883,883,883,883,883,883,883,1087,1087,1087,1087,1087,1087,1087,1087,1087,1382,1382,1557,1557,1557,1557,1557,1821,1821,2028,2028,2028,2028,2028,2222,2358,2633,2633,2633,2851,2851,2851,2851,3038,3038,3038,3200,3200,3200,3200,3200,3200,3200,3546,3546,3546,3546,3637,3664,3664,3664,3745,3745,3745,3745,3745,3831,3831,3831,3850,3850,3850,3850,3850,3979,3979,3979,3979,3979,3979,3979,3979,3979,4628,4628,4628,4628,4628,4891,4891,4891,4891,4928,4928,4928,4934,4934,4934,4934,4980,4986,4986,5002,5002,5005,5005,5005,5005,5008,5008,5008,5089,5089,5089,5089,5089,5089,5089,5089,5089,5118,5118,5118,5118,5118,5156,5156,5156,5156,5156,5156,5156,5156,5156,5156,5253,5253,5253,5253,5253,5290,5290,5290,5290,5290,5348,5348,5348,5379,5379,5379,5379,5379,5379,5379,5515,5515,5515,5515,5515,5515,5632,5632,5632,5632,5632,5632,5632,5632,5774,5774,5774,5774,5774,5774,5774,5774,5774,5774,5774,5774,6049,6049,6049,6049,6049,6200,6200,6200,6200],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.181,0.181,0.181,0.181,0.544,0.544,0.544,0.544,0.725,0.725,0.725,0.725,0.725,0.725,3.443,3.443,3.443,3.443,3.987,3.987,3.987,8.155,8.155,8.155,8.155,10.873,10.873,10.873,10.873,10.873,10.873,21.203,21.203,25.915,25.915,25.915,28.996,29.902,33.707,33.707,36.244,36.244,36.244,36.244,37.513,37.513,39.869,41.5,41.5,41.5,42.768,42.768,47.843,47.843,49.655,49.655,49.655,60.347,60.347,60.347,70.858,70.858,70.858,70.858,74.663,76.113,76.113,84.993,84.993,88.255,88.255,88.255,88.255,103.478,103.478,103.478,103.478,110.727,110.727,110.727,110.727,110.727,115.076,123.775,123.775,123.775,131.93,131.93,131.93,131.93,131.93,131.93,160.019,160.019,160.019,160.019,160.019,160.019,160.019,196.988,196.988,196.988,196.988,196.988,196.988,196.988,196.988,196.988,250.449,250.449,282.163,282.163,282.163,282.163,282.163,330.005,330.005,367.518,367.518,367.518,367.518,367.518,402.675,427.322,477.158,477.158,477.158,516.664,516.664,516.664,516.664,550.553,550.553,550.553,579.911,579.911,579.911,579.911,579.911,579.911,579.911,642.613,642.613,642.613,642.613,659.105,663.998,663.998,663.998,678.677,678.677,678.677,678.677,678.677,694.262,694.262,694.262,697.705,697.705,697.705,697.705,697.705,721.083,721.083,721.083,721.083,721.083,721.083,721.083,721.083,721.083,838.696,838.696,838.696,838.696,838.696,886.357,886.357,886.357,886.357,893.062,893.062,893.062,894.15,894.15,894.15,894.15,902.486,903.573,903.573,906.473,906.473,907.016,907.016,907.016,907.016,907.56,907.56,907.56,922.239,922.239,922.239,922.239,922.239,922.239,922.239,922.239,922.239,927.495,927.495,927.495,927.495,927.495,934.381,934.381,934.381,934.381,934.381,934.381,934.381,934.381,934.381,934.381,951.959,951.959,951.959,951.959,951.959,958.665,958.665,958.665,958.665,958.665,969.176,969.176,969.176,974.793,974.793,974.793,974.793,974.793,974.793,974.793,999.44,999.44,999.44,999.44,999.44,999.44,1020.643,1020.643,1020.643,1020.643,1020.643,1020.643,1020.643,1020.643,1046.376,1046.376,1046.376,1046.376,1046.376,1046.376,1046.376,1046.376,1046.376,1046.376,1046.376,1046.376,1096.212,1096.212,1096.212,1096.212,1096.212,1123.577,1123.577,1123.577,1123.577],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.362,0,0,0,0.181,0,0,0,0,0,2.718,0,0,0,0.544,0,0,4.168,0,0,0,2.718,0,0,0,0,0,10.33,0,4.712,0,0,3.081,0.906,3.806,0,2.537,0,0,0,1.269,0,2.356,1.631,0,0,1.269,0,5.074,0,1.812,0,0,10.692,0,0,10.511,0,0,0,3.806,1.45,0,8.88,0,3.262,0,0,0,15.223,0,0,0,7.249,0,0,0,0,4.349,8.699,0,0,8.155,0,0,0,0,0,28.089,0,0,0,0,0,0,36.969,0,0,0,0,0,0,0,0,53.461,0,31.714,0,0,0,0,47.843,0,37.513,0,0,0,0,35.157,24.646,49.836,0,0,39.506,0,0,0,33.889,0,0,29.358,0,0,0,0,0,0,62.703,0,0,0,16.491,4.893,0,0,14.679,0,0,0,0,15.585,0,0,3.443,0,0,0,0,23.378,0,0,0,0,0,0,0,0,117.613,0,0,0,0,47.661,0,0,0,6.705,0,0,1.087,0,0,0,8.336,1.087,0,2.9,0,0.544,0,0,0,0.544,0,0,14.679,0,0,0,0,0,0,0,0,5.255,0,0,0,0,6.886,0,0,0,0,0,0,0,0,0,17.579,0,0,0,0,6.705,0,0,0,0,10.511,0,0,5.618,0,0,0,0,0,0,24.646,0,0,0,0,0,21.203,0,0,0,0,0,0,0,25.734,0,0,0,0,0,0,0,0,0,0,0,49.836,0,0,0,0,27.365,0,0,0],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.362,0.362,0.362,0.362,0.543,0.543,0.543,0.543,0.181,0.181,2.899,2.899,2.718,2.718,3.262,3.262,3.262,7.43,4.712,4.712,4.712,7.43,6.886,6.886,6.886,2.718,2.718,13.048,13.048,15.042,15.042,15.042,18.123,19.029,22.835,12.505,15.042,10.33,10.33,10.33,8.518,7.612,6.162,7.793,5.256,5.256,6.525,6.525,10.33,10.33,9.786,8.155,8.155,18.847,17.578,17.578,23.015,23.015,21.203,21.203,25.009,15.767,15.767,24.647,14.136,17.398,17.398,17.398,13.592,27.365,27.365,18.485,18.485,22.472,22.472,22.472,22.472,7.249,11.598,20.297,20.297,13.048,21.203,21.203,21.203,21.203,16.854,8.155,36.244,36.244,28.089,28.089,28.089,28.089,28.089,65.058,36.969,36.969,36.969,36.969,36.969,36.969,36.969,0,53.461,53.461,85.175,85.175,85.175,85.175,85.175,133.018,79.557,117.07,85.356,85.356,85.356,85.356,120.513,97.316,147.152,109.639,109.639,149.145,149.145,149.145,113.988,123.231,73.395,73.395,102.753,63.247,63.247,63.247,63.247,29.358,29.358,92.061,62.703,62.703,62.703,79.194,84.087,84.087,84.087,36.063,36.063,36.063,36.063,19.572,30.264,30.264,30.264,19.028,19.028,19.028,19.028,19.028,26.821,26.821,26.821,23.378,23.378,23.378,23.378,23.378,0,117.613,117.613,117.613,117.613,117.613,165.274,165.274,165.274,47.661,54.366,54.366,54.366,55.453,7.792,7.792,7.792,16.128,10.51,10.51,13.41,12.323,12.867,12.867,12.867,4.531,3.988,3.988,1.088,15.767,15.223,15.223,15.223,15.223,14.679,14.679,14.679,0,5.255,5.255,5.255,5.255,5.255,12.141,12.141,12.141,6.886,6.886,6.886,6.886,6.886,0,0,17.579,17.579,17.579,17.579,17.579,24.284,24.284,24.284,6.705,6.705,17.216,17.216,17.216,16.129,16.129,16.129,16.129,16.129,5.618,5.618,30.264,24.646,24.646,24.646,24.646,24.646,45.849,45.849,21.203,21.203,21.203,21.203,21.203,21.203,25.734,25.734,25.734,25.734,25.734,25.734,25.734,25.734,0,0,0,0,49.836,49.836,49.836,49.836,49.836,77.201,77.201,77.201,27.365],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.052,0.052,0.078,0.078,0.078,0.026,0.026,0.026,0.414,0.388,0.388,0.388,0.466,0.466,0.466,0.673,0.673,0.673,0.673,0.984,0.984,0.984,0.388,0.388,0.388,1.864,1.476,2.149,2.149,2.149,2.589,2.718,1.786,1.786,1.476,1.476,1.476,1.036,1.087,0.544,0.88,0.751,0.751,0.751,0.932,0.751,1.476,1.139,1.165,1.165,1.165,2.511,2.511,1.786,3.288,3.029,3.029,3.029,2.045,2.252,2.252,2.019,2.019,2.485,2.485,1.942,1.735,3.909,2.641,2.641,2.175,3.21,3.21,3.21,1.036,1.036,1.657,2.9,1.864,1.864,3.029,3.029,3.029,2.408,1.165,1.165,5.178,4.013,4.013,4.013,4.013,4.013,4.013,5.281,5.281,5.281,5.281,5.281,5.281,5.281,0,0,7.637,7.637,12.168,12.168,12.168,12.168,12.168,11.365,11.365,12.194,12.194,12.194,12.194,12.194,10.381,13.902,15.663,15.663,15.663,21.307,21.307,16.284,12.763,10.485,10.485,10.485,9.035,9.035,9.035,9.035,4.194,4.194,4.194,8.958,8.958,8.958,8.958,11.313,12.012,12.012,3.055,5.152,5.152,5.152,2.796,2.097,4.323,4.323,2.226,2.718,2.718,2.718,2.718,0.492,3.832,3.832,3.34,3.34,3.34,3.34,3.34,0,0,16.802,16.802,16.802,16.802,16.802,23.611,23.611,6.809,6.809,7.767,7.767,7.767,1.113,1.113,1.113,1.113,1.346,1.502,1.502,1.76,1.76,1.838,1.838,0.647,0.492,0.57,0.155,0.155,2.175,2.175,2.175,2.175,2.097,2.097,2.097,0,0,0.751,0.751,0.751,0.751,0.751,1.735,1.735,0.984,0.984,0.984,0.984,0.984,0,0,0,2.511,2.511,2.511,2.511,2.511,3.469,3.469,0.958,0.958,0.958,2.459,2.459,1.502,2.304,2.304,2.304,2.304,0.803,0.803,0.803,3.521,3.521,3.521,3.521,3.521,3.521,6.55,3.029,3.029,3.029,3.029,3.029,3.029,0,3.676,3.676,3.676,3.676,3.676,3.676,3.676,0,0,0,0,0,7.119,7.119,7.119,7.119,7.119,11.029,11.029,3.909,3.909]},{"iso":"CRI","continent":"North America","population":5094114,"name":"Costa Rica","population_density":96.079,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,5,9,9,13,22,23,26,27,35,41,50,69,89,117,134,158,177,201,231,263,295,314,330,347,375,396,416,435,454,467,483,502,539,558,577,595,612,618,626,642,649,655,660,662,669,681,686,687,693,695,697,705,713,719,725,733,739,742,755,761,765,773,780,792,801,804,815,830,843,853,863,866,882,897,903,911,918,930,951,956,984,1000,1022,1047,1056,1084,1105,1157,1194,1228,1263,1318,1342,1375,1461,1538,1612,1662,1715,1744,1796,1871,1939,2058,2127,2213,2277,2368,2515,2684,2836,2979,3130,3269,3459,3753,4023,4311,4621,4996,5241,5486,5836,6485,6845,7231,7596,8036,8482,8986,9546,9969,10551,11114,11534,11811,12361,13129,13669,14600,15229,15841,16344,16800,17290,17820,18187,18975,19402,19837,20417,21070,22081,22802,23286,23872,24508,25057,26129,26931,27737,28465,29084,29643,30409,31075,32134,33084,33820,34463,35305,36307,37292,38485,39699,39699,41287,42184,43305,44458,45680,46920,46920,48780,49897,51224,52549,53969,55454,55454,57361,58137,59516,60818,62374,63712,63712,65602,66689,68059,69459,70816,72049,72049,73714,74604,75760,76828,77829,79182,79182,81129,82142,83497,84828,86053,87439,87439,89223,90238,91780,93152,94348,95514,95514,97075,97922,99425,100616,101826,103088,103088,104460,105322,106553,107570,108866,109971,109971,111257,112120,113261,114367,115417,116363,116363,117587,118566,119768,120939,122123,123223,123223,124592,125590,127012,128231,129418,129418,129418,132295,133190,134520,135742,137093,137093,137093,139638,140172,141340,142505,143685,143685,143685,146421,147430,148688,149815,150947,150947,150947,153169,154096,155263,156388],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.196,0.196,0.982,1.767,1.767,2.552,4.319,4.515,5.104,5.3,6.871,8.049,9.815,13.545,17.471,22.968,26.305,31.016,34.746,39.457,45.346,51.628,57.91,61.64,64.781,68.118,73.614,77.737,81.663,85.393,89.122,91.674,94.815,98.545,105.808,109.538,113.268,116.801,120.139,121.316,122.887,126.028,127.402,128.58,129.561,129.954,131.328,133.684,134.665,134.862,136.039,136.432,136.825,138.395,139.965,141.143,142.321,143.892,145.069,145.658,148.21,149.388,150.173,151.744,153.118,155.474,157.24,157.829,159.989,162.933,165.485,167.448,169.411,170,173.141,176.086,177.263,178.834,180.208,182.564,186.686,187.668,193.164,196.305,200.624,205.531,207.298,212.795,216.917,227.125,234.388,241.063,247.933,258.73,263.441,269.919,286.802,301.917,316.444,326.259,336.663,342.356,352.564,367.287,380.635,403.996,417.541,434.423,446.986,464.85,493.707,526.883,556.721,584.793,614.435,641.721,679.019,736.733,789.735,846.271,907.125,980.74,1028.834,1076.929,1145.636,1273.038,1343.708,1419.481,1491.133,1577.507,1665.059,1763.997,1873.927,1956.964,2071.214,2181.734,2264.182,2318.558,2426.526,2577.288,2683.293,2866.053,2989.529,3109.667,3208.409,3297.924,3394.113,3498.155,3570.199,3724.887,3808.709,3894.102,4007.959,4136.146,4334.61,4476.146,4571.158,4686.193,4811.043,4918.814,5129.253,5286.69,5444.912,5587.822,5709.334,5819.069,5969.438,6100.178,6308.065,6494.554,6639.035,6765.259,6930.548,7127.245,7320.606,7554.798,7793.112,7793.112,8104.844,8280.93,8500.988,8727.327,8967.212,9210.63,9210.63,9575.757,9795.03,10055.527,10315.631,10594.384,10885.897,10885.897,11260.251,11412.583,11683.288,11938.877,12244.327,12506.984,12506.984,12878,13091.384,13360.321,13635.148,13901.534,14143.578,14143.578,14470.426,14645.138,14872.066,15081.72,15278.221,15543.822,15543.822,15926.028,16124.885,16390.878,16652.16,16892.633,17164.712,17164.712,17514.92,17714.17,18016.872,18286.202,18520.983,18749.875,18749.875,19056.307,19222.577,19517.624,19751.423,19988.952,20236.689,20236.689,20506.019,20675.234,20916.886,21116.528,21370.939,21587.856,21587.856,21840.304,22009.716,22233.7,22450.813,22656.933,22842.638,22842.638,23082.915,23275.097,23511.056,23740.929,23973.354,24189.29,24189.29,24458.031,24653.944,24933.089,25172.385,25405.399,25405.399,25405.399,25970.169,26145.862,26406.947,26646.832,26912.04,26912.04,26912.04,27411.636,27516.463,27745.747,27974.443,28206.083,28206.083,28206.083,28743.173,28941.245,29188.196,29409.432,29631.649,29631.649,29631.649,30067.839,30249.814,30478.902,30699.745],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.785,0.785,0,0.785,1.767,0.196,0.589,0.196,1.57,1.178,1.767,3.73,3.926,5.497,3.337,4.711,3.73,4.711,5.889,6.282,6.282,3.73,3.141,3.337,5.497,4.122,3.926,3.73,3.73,2.552,3.141,3.73,7.263,3.73,3.73,3.533,3.337,1.178,1.57,3.141,1.374,1.178,0.982,0.393,1.374,2.356,0.982,0.196,1.178,0.393,0.393,1.57,1.57,1.178,1.178,1.57,1.178,0.589,2.552,1.178,0.785,1.57,1.374,2.356,1.767,0.589,2.159,2.945,2.552,1.963,1.963,0.589,3.141,2.945,1.178,1.57,1.374,2.356,4.122,0.982,5.497,3.141,4.319,4.908,1.767,5.497,4.122,10.208,7.263,6.674,6.871,10.797,4.711,6.478,16.882,15.115,14.527,9.815,10.404,5.693,10.208,14.723,13.349,23.36,13.545,16.882,12.564,17.864,28.857,33.176,29.838,28.072,29.642,27.286,37.298,57.714,53.002,56.536,60.855,73.614,48.095,48.095,68.707,127.402,70.67,75.774,71.651,86.374,87.552,98.938,109.931,83.037,114.25,110.52,82.448,54.376,107.968,150.762,106.005,182.76,123.476,120.139,98.741,89.515,96.189,104.042,72.044,154.688,83.822,85.393,113.857,128.187,198.464,141.536,95.012,115.035,124.85,107.771,210.439,157.437,158.222,142.91,121.513,109.734,150.37,130.739,207.887,186.49,144.48,126.224,165.289,196.698,193.36,234.192,238.314,0,311.732,176.086,220.058,226.34,239.885,243.418,0,365.127,219.273,260.497,260.104,278.753,291.513,0,374.354,152.333,270.705,255.589,305.451,262.656,0,371.016,213.384,268.938,274.827,266.386,242.044,0,326.848,174.711,226.929,209.654,196.501,265.601,0,382.206,198.857,265.993,261.282,240.474,272.079,0,350.208,199.25,302.702,269.33,234.781,228.892,0,306.432,166.27,295.046,233.799,237.529,247.737,0,269.33,169.215,241.651,199.642,254.411,216.917,0,252.448,169.411,223.984,217.113,206.12,185.705,0,240.277,192.183,235.959,229.873,232.425,215.935,0,268.742,195.912,279.146,239.296,233.014,0,0,564.769,175.693,261.086,239.885,265.208,0,0,499.596,104.827,229.284,228.695,231.64,0,0,537.09,198.072,246.952,221.236,222.217,0,0,436.19,181.975,229.088,220.843],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.785,1.57,1.57,2.355,4.122,4.318,4.907,5.103,5.888,6.281,8.048,10.993,13.152,18.453,21.201,25.716,27.876,31.409,35.531,38.083,40.439,38.672,38.476,37.102,38.869,38.28,36.317,33.765,31.213,30.035,30.035,30.428,32.194,31.802,31.606,31.409,31.016,29.642,28.071,27.482,21.593,19.041,16.293,13.153,11.19,12.368,11.78,8.835,8.639,7.854,7.265,8.442,8.638,7.46,7.656,9.03,9.03,9.226,11.385,10.993,10.208,10.6,10.796,11.582,12.171,12.171,11.778,13.545,15.312,15.705,16.294,14.527,15.901,18.257,17.276,15.901,14.723,15.116,17.275,17.668,20.024,20.22,23.361,26.699,27.092,30.233,30.233,39.459,41.225,44.758,47.31,53.199,56.143,57.124,69.884,74.791,82.055,85.196,88.729,83.625,89.122,97.367,93.834,102.079,101.097,108.164,110.324,122.495,141.144,159.597,176.086,180.798,196.895,207.299,232.033,271.883,296.028,319.388,350.405,395.947,414.4,435.209,466.618,536.306,553.974,573.212,584.008,596.768,636.225,687.068,728.292,683.927,727.507,762.253,773.05,741.052,761.468,813.292,809.366,909.089,918.315,927.934,944.227,979.366,967.587,920.867,886.906,858.834,819.18,784.434,799.55,838.222,940.497,977.991,1000.959,961.306,1002.334,1024.712,1121.294,1150.544,1110.302,1111.676,1138.177,1132.876,1158.396,1181.364,1178.812,1207.865,1194.123,1177.437,1221.213,1308.177,1351.167,1454.62,1485.047,1298.557,1465.809,1515.671,1570.44,1600.082,1646.607,1655.833,1417.519,1782.646,1690.187,1774.598,1814.644,1867.057,1918.685,1675.267,2049.621,1836.827,1888.259,1883.351,1928.698,1912.601,1621.088,1992.104,1831.134,1947.739,1951.861,1962.658,1899.251,1636.595,1963.443,1767.138,1780.683,1721.399,1643.073,1642.288,1400.244,1782.45,1654.459,1745.741,1780.094,1810.914,1886.492,1620.891,1971.099,1788.143,1891.988,1895.325,1868.824,1857.242,1585.163,1891.595,1707.657,1803.453,1734.55,1702.749,1715.705,1486.813,1756.143,1618.926,1694.307,1598.903,1619.515,1598.903,1351.166,1603.614,1503.695,1558.464,1533.926,1540.404,1471.698,1254.781,1495.058,1434.793,1501.341,1507.23,1522.542,1532.357,1346.652,1615.394,1571.029,1657.992,1661.329,1664.47,1432.045,1216.11,1780.879,1687.83,1753.004,1713.743,1739.655,1506.641,1506.641,2006.237,1546.295,1599.886,1567.495,1559.25,1294.042,1294.042,1831.132,1529.608,1671.733,1663.685,1657.207,1425.567,1425.567,1861.757,1506.642,1537.658,1511.549],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.589,0.617,0.701,0.617,0.729,0.897,1.038,1.318,1.851,2.552,3.001,3.449,3.814,4.235,4.543,4.88,4.992,5.048,4.823,4.767,4.88,4.627,4.291,3.926,3.926,3.842,3.814,3.562,4.01,3.982,3.982,3.954,4.066,3.786,3.477,2.888,2.552,2.187,1.823,1.402,1.43,1.542,1.234,1.066,1.066,0.982,0.982,1.01,0.897,0.925,1.066,1.122,1.234,1.262,1.402,1.346,1.29,1.346,1.318,1.486,1.655,1.374,1.514,1.823,1.963,2.047,1.991,1.823,2.187,2.3,2.047,1.907,1.823,1.879,2.384,2.075,2.44,2.72,3.113,3.618,3.533,3.73,4.178,4.852,5.44,5.777,6.057,7.347,7.235,7.572,8.525,9.647,10.769,11.189,11.133,11.274,11.806,11.498,11.245,12.507,13.04,13.966,14.947,16.041,18.06,20.892,21.818,23.893,25.716,27.819,30.596,34.718,37.55,41.364,46.048,52.329,55.302,56.844,58.415,69.043,71.062,73.194,72.913,78.382,84.019,88.337,85.841,87.608,93.105,98.657,98.096,93.357,94.647,100.48,103.761,113.548,115.399,120.784,127.122,124.485,116.689,116.409,100.592,105.051,99.863,97.956,101.434,106.005,119.494,129.421,120.896,125.355,130.992,130.122,141.872,136.011,138.395,145.238,146.163,144.004,150.089,138.703,145.911,149.949,150.173,150.846,158.783,165.401,174.347,178.105,185.508,164.868,191.369,192.912,196.249,200.96,201.773,202.503,202.503,210.13,216.3,222.077,226.901,232.453,239.324,239.324,240.642,231.079,232.537,231.892,235.706,231.584,231.584,231.107,239.829,239.576,242.324,236.744,233.799,233.799,227.489,221.965,215.964,206.653,196.67,200.035,200.035,207.943,211.392,216.973,224.349,230.63,231.556,231.556,226.985,227.041,232.285,233.435,232.621,226.452,226.452,220.198,215.487,214.393,209.317,209.71,212.402,212.402,207.102,207.522,199.895,195.015,197.427,193.024,193.024,190.612,190.64,188.116,190.612,183.713,179.254,179.254,177.516,180.769,182.48,184.302,188.06,192.379,192.379,196.445,196.978,203.148,204.494,204.578,173.73,173.73,216.02,213.131,210.551,210.635,215.234,215.234,215.234,205.924,195.8,191.257,189.659,184.863,184.863,184.863,190.22,203.54,206.064,204.998,203.652,203.652,203.652,189.238,186.938,184.386,184.33]},{"iso":"CIV","continent":"Africa","population":26378275,"name":"Cote d'Ivoire","population_density":76.399,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,5,6,9,9,14,14,25,73,80,96,101,101,165,168,179,190,194,218,245,261,323,349,384,444,444,533,574,626,638,638,654,688,801,847,847,916,952,1004,1077,1077,1150,1164,1183,1238,1275,1333,1362,1398,1432,1464,1516,1571,1602,1667,1700,1730,1857,1912,1971,2017,2061,2109,2119,2153,2231,2301,2341,2366,2376,2423,2477,2556,2641,2750,2799,2833,2951,3024,3110,3262,3431,3557,3739,3881,3995,4181,4404,4684,4848,5084,5439,5679,6063,6444,6874,7276,7492,7677,7904,8164,8334,8739,8944,9101,9214,9499,9702,9992,10244,10462,10772,10966,11194,11504,11750,12052,12443,12766,12872,13037,13403,13554,13696,13912,14119,14312,14531,14733,15001,15253,15494,15596,15655,15713,15813,15978,16047,16109,16182,16220,16293,16349,16447,16524,16620,16715,16798,16847,16847,16889,16935,16993,17026,17107,17150,17232,17249,17310,17374,17471,17506,17562,17603,17702,17797,17893,17948,18067,18103,18161,18208,18269,18472,18588,18701,18778,18815,18869,18916,18916,19013,19066,19100,19132,19158,19200,19269,19320,19327,19343,19430,19501,19556,19600,19629,19641,19669,19724,19755,19793,19849,19882,19885,19903,19935,19982,20036,20128,20154,20155,20183,20217,20257,20275,20301,20323,20324,20342,20363,20390,20405,20429,20470,20486,20488,20555,20628,20692,20716,20716,20753,20765,20778,20789,20801,20813,20832,20835,20847,20855,20882,20899,20945,20976,20988,21004,21045,21083,21099,21126,21138,21148,21156,21168,21199,21232,21261,21310,21331,21334,21361,21389,21412,21441,21485,21507,21513,21547,21590,21618,21639,21680,21705,21775,21741,21772],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.038,0.038,0.038,0.038,0.038,0.038,0.19,0.227,0.341,0.341,0.531,0.531,0.948,2.767,3.033,3.639,3.829,3.829,6.255,6.369,6.786,7.203,7.355,8.264,9.288,9.895,12.245,13.231,14.557,16.832,16.832,20.206,21.76,23.732,24.187,24.187,24.793,26.082,30.366,32.11,32.11,34.726,36.09,38.062,40.829,40.829,43.596,44.127,44.848,46.933,48.335,50.534,51.633,52.998,54.287,55.5,57.472,59.557,60.732,63.196,64.447,65.584,70.399,72.484,74.721,76.464,78.132,79.952,80.331,81.62,84.577,87.231,88.747,89.695,90.074,91.856,93.903,96.898,100.12,104.252,106.11,107.399,111.872,114.64,117.9,123.662,130.069,134.846,141.745,147.129,151.45,158.502,166.956,177.57,183.788,192.734,206.192,215.291,229.848,244.292,260.593,275.833,284.022,291.035,299.641,309.497,315.942,331.295,339.067,345.019,349.303,360.107,367.803,378.797,388.35,396.614,408.366,415.721,424.364,436.116,445.442,456.891,471.714,483.959,487.977,494.232,508.108,513.832,519.215,527.404,535.251,542.568,550.87,558.528,568.688,578.241,587.377,591.244,593.481,595.68,599.471,605.726,608.342,610.692,613.459,614.9,617.667,619.79,623.506,626.425,630.064,633.665,636.812,638.67,638.67,640.262,642.006,644.204,645.455,648.526,650.156,653.265,653.909,656.222,658.648,662.325,663.652,665.775,667.329,671.083,674.684,678.323,680.408,684.92,686.284,688.483,690.265,692.578,700.273,704.671,708.955,711.874,713.276,715.324,717.105,717.105,720.783,722.792,724.081,725.294,726.279,727.872,730.487,732.421,732.686,733.293,736.591,739.283,741.368,743.036,744.135,744.59,745.651,747.737,748.912,750.352,752.475,753.726,753.84,754.522,755.736,757.517,759.564,763.052,764.038,764.076,765.137,766.426,767.943,768.625,769.611,770.445,770.483,771.165,771.961,772.985,773.553,774.463,776.017,776.624,776.7,779.24,782.007,784.433,785.343,785.343,786.746,787.201,787.694,788.111,788.566,789.021,789.741,789.855,790.309,790.613,791.636,792.281,794.025,795.2,795.655,796.261,797.816,799.256,799.863,800.886,801.341,801.72,802.024,802.479,803.654,804.905,806.004,807.862,808.658,808.772,809.795,810.857,811.729,812.828,814.496,815.33,815.557,816.846,818.477,819.538,820.334,821.888,822.836,825.49,824.201,825.376],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.152,0.038,0.114,0,0.19,0,0.417,1.82,0.265,0.607,0.19,0,2.426,0.114,0.417,0.417,0.152,0.91,1.024,0.607,2.35,0.986,1.327,2.275,0,3.374,1.554,1.971,0.455,0,0.607,1.289,4.284,1.744,0,2.616,1.365,1.971,2.767,0,2.767,0.531,0.72,2.085,1.403,2.199,1.099,1.365,1.289,1.213,1.971,2.085,1.175,2.464,1.251,1.137,4.815,2.085,2.237,1.744,1.668,1.82,0.379,1.289,2.957,2.654,1.516,0.948,0.379,1.782,2.047,2.995,3.222,4.132,1.858,1.289,4.473,2.767,3.26,5.762,6.407,4.777,6.9,5.383,4.322,7.051,8.454,10.615,6.217,8.947,13.458,9.098,14.557,14.444,16.301,15.24,8.189,7.013,8.606,9.857,6.445,15.354,7.772,5.952,4.284,10.804,7.696,10.994,9.553,8.264,11.752,7.355,8.643,11.752,9.326,11.449,14.823,12.245,4.018,6.255,13.875,5.724,5.383,8.189,7.847,7.317,8.302,7.658,10.16,9.553,9.136,3.867,2.237,2.199,3.791,6.255,2.616,2.35,2.767,1.441,2.767,2.123,3.715,2.919,3.639,3.601,3.147,1.858,0,1.592,1.744,2.199,1.251,3.071,1.63,3.109,0.644,2.313,2.426,3.677,1.327,2.123,1.554,3.753,3.601,3.639,2.085,4.511,1.365,2.199,1.782,2.313,7.696,4.398,4.284,2.919,1.403,2.047,1.782,0,3.677,2.009,1.289,1.213,0.986,1.592,2.616,1.933,0.265,0.607,3.298,2.692,2.085,1.668,1.099,0.455,1.061,2.085,1.175,1.441,2.123,1.251,0.114,0.682,1.213,1.782,2.047,3.488,0.986,0.038,1.061,1.289,1.516,0.682,0.986,0.834,0.038,0.682,0.796,1.024,0.569,0.91,1.554,0.607,0.076,2.54,2.767,2.426,0.91,0,1.403,0.455,0.493,0.417,0.455,0.455,0.72,0.114,0.455,0.303,1.024,0.644,1.744,1.175,0.455,0.607,1.554,1.441,0.607,1.024,0.455,0.379,0.303,0.455,1.175,1.251,1.099,1.858,0.796,0.114,1.024,1.061,0.872,1.099,1.668,0.834,0.227,1.289,1.63,1.061,0.796,1.554,0.948,2.654,-1.289,1.175],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.152,0.19,0.304,0.304,0.494,0.494,0.911,2.731,2.844,3.413,3.489,3.489,5.725,5.839,5.839,4.436,4.323,4.626,5.46,6.067,5.991,6.863,7.773,9.631,9.479,11.943,12.473,13.837,11.942,10.956,10.236,9.25,13.534,11.904,10.35,10.995,11.905,13.876,16.036,14.747,13.23,12.017,12.737,12.206,12.244,12.472,10.804,12.169,10.691,11.373,12.624,12.624,12.396,12.661,12.813,12.585,16.111,16.983,17.249,16.908,17.401,16.757,15.885,16.037,14.179,14.748,14.027,13.231,11.942,11.904,13.572,15.278,15.543,17.021,17.363,17.704,21.798,22.783,23.996,26.763,29.948,30.593,35.635,39.729,39.578,43.862,49.056,53.909,53.719,57.889,64.447,68.162,78.397,85.79,93.637,98.262,100.234,98.3,93.448,94.207,86.095,87.005,78.476,69.188,65.283,69.074,68.164,69.301,72.409,65.319,69.299,70.702,75.061,76.009,77.639,78.094,83.364,87.345,79.611,78.511,83.743,77.715,73.772,70.512,63.536,58.608,62.892,64.295,60.58,64.409,68.162,63.84,58.23,53.112,48.601,47.198,39.654,32.451,26.082,23.656,24.186,24.11,24.034,20.698,21.721,22.972,23.352,23.769,21.002,20.471,18.5,17.78,15.392,14.862,13.345,14.596,15.24,15.961,16.643,18.121,18.197,17.249,17.173,17.817,20.774,22.1,21.759,22.593,22.631,22.707,22.935,21.495,25.59,26.349,28.548,26.956,26.994,26.842,26.842,24.529,20.51,18.121,15.126,13.42,13.003,12.548,13.382,15.315,11.903,10.501,12.51,13.989,15.088,15.164,13.647,12.169,12.965,14.443,12.32,11.069,11.107,10.69,9.705,9.932,10.084,9.781,10.653,12.7,11.563,10.35,11.297,11.904,12.207,11.107,10.046,7.392,6.444,7.088,6.823,6.558,5.611,5.839,6.407,6.18,6.218,8.076,10.047,11.449,11.79,10.88,10.729,10.577,10.994,8.871,6.559,4.588,4.398,4.512,3.564,3.412,3.943,4.17,5.459,6.179,5.914,6.407,7.506,8.644,8.227,8.607,7.318,6.522,6.37,6.218,5.839,5.649,6.141,6.975,7.316,7.051,7.772,8.378,8.075,7.923,8.492,7.468,6.899,8.074,8.68,8.68,8.604,9.059,8.339,10.159,8.643,8.529],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.022,0.027,0.043,0.043,0.07,0.07,0.13,0.368,0.401,0.471,0.498,0.471,0.818,0.774,0.574,0.596,0.531,0.634,0.78,0.52,0.839,0.921,1.051,1.354,1.224,1.56,1.695,1.641,1.565,1.376,1.137,1.321,1.451,1.478,1.197,1.506,1.701,1.895,2.107,1.495,1.641,1.717,1.446,1.549,1.468,1.386,1.543,1.343,1.451,1.522,1.506,1.603,1.457,1.652,1.636,1.614,2.128,2.145,2.166,2.248,2.134,2.215,2.107,1.603,1.728,1.787,1.755,1.652,1.446,1.646,1.755,1.76,1.841,2.215,2.345,2.475,2.859,2.962,3,3.363,3.688,4.105,4.907,5.037,5.259,5.8,6.185,6.786,6.992,7.284,8.438,9.12,10.192,11.048,11.86,13.149,13.041,12.12,12.05,11.378,10.236,10.1,9.033,8.714,8.324,8.638,8.329,8.979,8.151,8.221,9.05,9.488,9.18,9.759,9.521,9.792,10.729,10.799,10.322,9.981,10.284,9.77,8.903,7.956,7.327,7.799,8.091,7.203,7.837,8.432,8.568,7.999,7.273,6.401,5.849,5.291,4.3,3.331,3.174,3.06,3.141,2.903,2.54,2.583,2.767,2.887,3.13,3,2.697,2.394,2.226,2.02,1.684,1.673,1.641,2.085,1.95,2.031,2.063,2.41,2.161,2.231,2.009,2.453,2.637,2.811,2.583,3.038,2.93,3.022,2.74,2.556,3.136,3.466,3.434,3.656,3.542,3.58,3.504,2.405,2.302,1.977,1.744,1.717,1.565,1.538,1.912,1.663,1.414,1.316,1.614,1.858,1.928,1.793,1.673,1.701,1.766,1.592,1.376,1.284,1.349,1.37,1.321,1.267,1.143,1.229,1.316,1.511,1.473,1.462,1.516,1.527,1.489,1.294,0.937,0.915,0.915,0.861,0.791,0.72,0.704,0.693,0.796,0.877,0.791,1.04,1.289,1.554,1.554,1.332,1.446,1.5,1.208,0.872,0.59,0.525,0.628,0.444,0.444,0.417,0.504,0.531,0.715,0.78,0.829,0.85,1.029,1.089,1.083,0.98,0.877,0.867,0.823,0.666,0.628,0.72,0.731,0.932,0.991,0.964,1.045,1.029,0.975,0.975,0.948,0.953,0.969,1.007,1.089,1.116,1.072,1.056,1.072,1.419,1.051,0.986]},{"iso":"HRV","continent":"Europe","population":4105268,"name":"Croatia","population_density":73.726,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,3,5,6,7,7,9,10,10,11,12,12,12,14,19,19,32,38,49,57,65,81,105,128,206,254,315,382,442,495,586,657,713,790,867,963,1011,1079,1126,1182,1222,1282,1343,1407,1495,1534,1600,1650,1704,1741,1791,1814,1832,1871,1881,1908,1950,1981,2009,2016,2030,2039,2047,2062,2076,2085,2088,2096,2101,2112,2119,2125,2161,2176,2187,2196,2207,2213,2221,2222,2224,2226,2228,2232,2234,2237,2243,2243,2244,2244,2244,2244,2245,2245,2246,2246,2246,2246,2246,2247,2247,2247,2247,2247,2247,2249,2249,2249,2251,2252,2254,2255,2258,2269,2280,2299,2317,2336,2366,2388,2483,2539,2624,2691,2725,2777,2831,2912,3008,3094,3151,3220,3272,3325,3416,3532,3672,3722,3775,3827,3953,4039,4137,4253,4345,4370,4422,4530,4634,4715,4792,4857,4881,4923,4993,5071,5139,5224,5260,5294,5318,5376,5404,5466,5543,5604,5649,5740,5870,6050,6258,6420,6571,6656,6855,7074,7329,7594,7900,8175,8311,8530,8888,9192,9549,9861,10123,10269,10414,10725,11094,11428,11739,11964,12081,12285,12626,12917,13107,13368,13533,13598,13749,14029,14279,14513,14725,14922,14992,15136,15340,15572,15795,16007,16197,16245,16380,16593,16827,17160,17401,17659,17797,18084,18447,18989,19446,19932,20440,20621,20993,21741,22534,23665,24761,25580,25973,26863,28287,29850,31717,33959,36380,37208,38621,40999,43775,46547,49316,51495,52660,54087,56567,59415,62305,64704,67247,68776,70243,72840,75922,78978,81844,84206,85519,87464,90715,93879,96837,100410,103718,105691,108014,111617,115626,119706,123693,126612,128442,131342,134881,139415,143370,147454,150353,152239,154852,159372,163992,168388,172523,175886,177358,179718,183045,186963],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.244,0.731,0.731,1.218,1.462,1.705,1.705,2.192,2.436,2.436,2.679,2.923,2.923,2.923,3.41,4.628,4.628,7.795,9.256,11.936,13.885,15.833,19.731,25.577,31.179,50.179,61.872,76.731,93.051,107.667,120.577,142.743,160.038,173.679,192.436,211.192,234.577,246.269,262.833,274.282,287.923,297.666,312.282,327.141,342.73,364.166,373.666,389.743,401.923,415.076,424.089,436.269,441.871,446.256,455.756,458.192,464.769,474.999,482.551,489.371,491.076,494.487,496.679,498.628,502.281,505.692,507.884,508.615,510.564,511.781,514.461,516.166,517.628,526.397,530.051,532.73,534.922,537.602,539.063,541.012,541.256,541.743,542.23,542.717,543.692,544.179,544.91,546.371,546.371,546.615,546.615,546.615,546.615,546.858,546.858,547.102,547.102,547.102,547.102,547.102,547.346,547.346,547.346,547.346,547.346,547.346,547.833,547.833,547.833,548.32,548.563,549.051,549.294,550.025,552.704,555.384,560.012,564.397,569.025,576.333,581.692,604.833,618.474,639.179,655.499,663.781,676.448,689.602,709.332,732.717,753.666,767.55,784.358,797.025,809.935,832.102,860.358,894.46,906.64,919.55,932.217,962.909,983.858,1007.73,1035.986,1058.396,1064.486,1077.153,1103.46,1128.794,1148.524,1167.281,1183.114,1188.96,1199.191,1216.242,1235.242,1251.806,1272.511,1281.281,1289.563,1295.409,1309.537,1316.357,1331.46,1350.216,1365.075,1376.037,1398.203,1429.87,1473.716,1524.383,1563.844,1600.626,1621.331,1669.806,1723.152,1785.267,1849.818,1924.357,1991.344,2024.472,2077.818,2165.023,2239.074,2326.036,2402.036,2465.856,2501.42,2536.741,2612.497,2702.381,2783.74,2859.497,2914.304,2942.804,2992.496,3075.56,3146.445,3192.727,3256.304,3296.496,3312.329,3349.111,3417.316,3478.214,3535.214,3586.855,3634.842,3651.893,3686.97,3736.662,3793.175,3847.495,3899.136,3945.418,3957.111,3989.995,4041.88,4098.88,4179.995,4238.7,4301.546,4335.162,4405.072,4493.495,4625.52,4736.841,4855.225,4978.968,5023.058,5113.673,5295.878,5489.045,5764.544,6031.519,6231.018,6326.749,6543.544,6890.415,7271.145,7725.927,8272.054,8861.784,9063.476,9407.668,9986.924,10663.128,11338.358,12012.858,12543.639,12827.421,13175.023,13779.125,14472.868,15176.841,15761.212,16380.66,16753.108,17110.454,17743.056,18493.799,19238.208,19936.335,20511.694,20831.527,21305.308,22097.218,22867.935,23588.472,24458.817,25264.611,25745.213,26311.072,27188.724,28165.274,29159.119,30130.311,30841.348,31287.117,31993.526,32855.589,33960.024,34923.42,35918.24,36624.406,37083.815,37720.314,38821.339,39946.722,41017.541,42024.784,42843.975,43202.539,43777.41,44587.832,45542.216],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.487,0,0.487,0.244,0.244,0,0.487,0.244,0,0.244,0.244,0,0,0.487,1.218,0,3.167,1.462,2.679,1.949,1.949,3.897,5.846,5.603,19,11.692,14.859,16.32,14.615,12.91,22.167,17.295,13.641,18.756,18.756,23.385,11.692,16.564,11.449,13.641,9.744,14.615,14.859,15.59,21.436,9.5,16.077,12.179,13.154,9.013,12.179,5.603,4.385,9.5,2.436,6.577,10.231,7.551,6.821,1.705,3.41,2.192,1.949,3.654,3.41,2.192,0.731,1.949,1.218,2.679,1.705,1.462,8.769,3.654,2.679,2.192,2.679,1.462,1.949,0.244,0.487,0.487,0.487,0.974,0.487,0.731,1.462,0,0.244,0,0,0,0.244,0,0.244,0,0,0,0,0.244,0,0,0,0,0,0.487,0,0,0.487,0.244,0.487,0.244,0.731,2.679,2.679,4.628,4.385,4.628,7.308,5.359,23.141,13.641,20.705,16.32,8.282,12.667,13.154,19.731,23.385,20.949,13.885,16.808,12.667,12.91,22.167,28.256,34.103,12.179,12.91,12.667,30.692,20.949,23.872,28.256,22.41,6.09,12.667,26.308,25.333,19.731,18.756,15.833,5.846,10.231,17.051,19,16.564,20.705,8.769,8.282,5.846,14.128,6.821,15.103,18.756,14.859,10.962,22.167,31.667,43.846,50.667,39.461,36.782,20.705,48.474,53.346,62.115,64.551,74.538,66.987,33.128,53.346,87.205,74.051,86.961,76,63.82,35.564,35.32,75.756,89.885,81.359,75.756,54.808,28.5,49.692,83.064,70.885,46.282,63.577,40.192,15.833,36.782,68.205,60.897,57,51.641,47.987,17.051,35.077,49.692,56.513,54.32,51.641,46.282,11.692,32.885,51.885,57,81.115,58.705,62.846,33.615,69.91,88.423,132.025,111.32,118.384,123.743,44.09,90.615,182.205,193.166,275.5,266.974,199.5,95.731,216.795,346.871,380.73,454.782,546.128,589.73,201.692,344.192,579.256,676.204,675.23,674.499,530.781,283.782,347.602,604.102,693.743,703.974,584.371,619.448,372.448,357.346,632.602,750.743,744.409,698.127,575.358,319.833,473.781,791.909,770.717,720.538,870.345,805.794,480.602,565.858,877.653,976.55,993.845,971.191,711.038,445.769,706.409,862.063,1104.435,963.396,994.819,706.166,459.41,636.499,1101.024,1125.383,1070.819,1007.242,819.191,358.564,574.871,810.422,954.383],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.487,0.487,0.974,1.218,1.462,1.462,1.949,2.193,1.706,1.95,1.707,1.463,1.219,1.706,2.437,2.193,5.36,6.578,9.013,10.962,12.911,16.321,20.949,26.552,42.385,52.615,64.795,79.166,91.832,100.845,117.166,128.858,123.499,130.563,134.46,141.525,138.602,142.256,131.538,127.884,123.987,119.846,115.949,108.154,117.898,110.834,115.462,114,117.41,111.808,109.128,99.141,82.09,82.09,68.449,62.847,59.924,58.462,53.104,49.206,48.231,40.923,40.436,37.513,30.692,25.333,19.243,19.487,17.295,17.782,17.538,15.346,20.705,22.167,24.115,24.358,25.819,24.602,24.846,23.628,15.346,12.179,9.987,8.769,6.577,5.846,5.359,5.115,4.872,4.385,3.898,2.924,2.681,1.95,0.732,0.732,0.488,0.488,0.488,0.732,0.488,0.488,0.244,0.244,0.244,0.731,0.731,0.487,0.974,1.218,1.705,1.949,2.68,4.872,7.551,12.179,16.077,20.461,27.282,32.397,54.807,65.769,83.795,95.487,99.384,107.423,113.269,127.641,127.885,135.193,128.373,128.861,133.246,133.489,142.502,151.027,161.745,152.975,152,147.859,165.884,173.923,175.628,175.628,163.935,157.846,157.603,171.244,165.885,164.667,159.551,147.128,130.564,134.705,139.089,131.781,123.012,123.986,113.999,106.448,106.448,110.345,100.115,96.218,98.41,92.564,94.757,108.642,134.463,164.181,208.027,232.385,250.411,256.257,293.769,324.948,355.396,376.101,399.972,427.498,423.844,456.485,495.216,515.921,540.767,552.216,541.498,510.075,512.267,534.677,537.357,544.665,533.46,512.268,476.948,491.076,538.82,533.949,490.346,472.564,437,398.025,406.307,424.82,402.653,388.768,394.127,378.537,355.396,374.64,387.55,375.858,369.281,363.922,358.563,322.268,338.102,354.91,362.218,386.82,391.205,402.41,389.743,447.961,503.499,583.639,637.959,675.228,740.266,721.51,778.51,890.805,995.548,1139.023,1294.677,1375.793,1347.781,1520.486,1776.742,1975.267,2236.883,2507.511,2830.267,2832.459,3080.92,3443.381,3772.714,4067.214,4286.931,4271.584,3965.636,4111.546,4371.456,4485.943,4513.713,4422.854,4367.803,4209.47,4283.034,4568.034,4714.675,4765.341,4759.494,4750.481,4450.866,4552.199,4986.762,5124.877,5094.672,5220.608,5328.275,5233.519,5479.544,5883.416,6068.057,6291.185,6541.838,6382.531,6022.506,6248.313,6544.518,6771.3,6758.146,6759.12,6494.095,6242.467,6433.197,6827.812,7091.132,7057.516,7101.362,6925.734,6578.132,6693.593,6867.516,6720.875],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.209,0.278,0.244,0.244,0.209,0.209,0.174,0.174,0.174,0.313,0.313,0.731,0.905,1.288,1.566,1.775,2.158,2.993,3.341,5.846,7.134,8.978,11.031,12.562,13.571,15.938,15.694,15.973,16.529,16.877,18.13,17.956,17.156,16.32,16.32,15.033,14.441,13.223,13.78,14.476,14.198,14.546,14.894,14.685,13.85,13.363,11.101,10.37,9.43,8.038,7.099,7.273,6.612,6.786,6.403,5.533,5.498,4.837,3.897,3.306,2.645,2.505,2.297,2.158,2.262,1.984,1.705,2.645,3.062,3.167,3.306,3.306,3.271,3.341,2.123,1.67,1.357,1.114,0.87,0.731,0.557,0.731,0.661,0.626,0.557,0.418,0.348,0.278,0.07,0.104,0.07,0.07,0.07,0.07,0.07,0.07,0.035,0.035,0.035,0.035,0.104,0.07,0.07,0.139,0.174,0.244,0.278,0.313,0.696,1.079,1.67,2.262,2.853,3.863,4.524,7.447,9.013,11.31,13.015,13.537,14.302,15.416,14.929,16.32,16.355,16.007,17.225,17.225,17.19,17.538,18.234,20.114,19.87,19.313,19.313,21.853,21.679,21.053,20.218,21.679,20.705,20.705,20.079,20.705,20.114,18.756,17.817,17.782,17.434,16.112,15.207,14.755,15.033,14.024,14.372,13.745,13.328,11.588,11.379,11.101,11.971,12.353,14.685,17.19,22.48,27.56,30.518,33.65,35.042,38.8,41.897,44.507,46.491,51.502,55.817,57.592,58.287,63.124,64.83,68.031,68.24,67.787,68.135,65.56,63.925,66.187,65.386,65.352,64.064,63.055,65.108,66.152,63.438,58.427,56.687,54.599,52.789,50.945,48.822,47.396,48.927,47.222,48.335,48.509,48.266,45.621,44.994,44.612,44.612,44.368,43.603,43.289,43.603,43.672,47.5,48.509,50.875,54.007,59.297,64.516,75.234,79.549,88.075,96.775,98.271,101.229,114.626,123.361,146.815,168.042,178.864,186.242,204.267,227.791,254.586,280.197,320.077,375.824,390.961,409.161,442.358,484.569,516.062,534.4,525.979,537.706,538.194,541.743,544.248,548.355,535.479,548.146,560.813,562.204,566.276,574.419,580.195,596.446,590.148,582.631,599.265,622.023,624.877,621.466,646.069,678.988,701.955,715.109,727.358,756.763,795.807,810.213,796.677,791.701,811.779,809.552,827.821,823.472,826.847,826.151,828.1,818.113,852.25,855.243,870.589,872.363,888.51,874.103,865.299,823.785,799.356]},{"iso":"CUB","continent":"North America","population":11326616,"name":"Cuba","population_density":110.408,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,5,7,11,16,21,35,40,48,57,67,80,119,139,170,186,212,233,269,288,320,350,396,457,515,564,620,669,726,766,814,862,923,986,1035,1087,1137,1189,1235,1285,1337,1369,1389,1437,1467,1501,1537,1611,1649,1668,1685,1703,1729,1741,1754,1766,1783,1804,1810,1830,1840,1862,1872,1881,1887,1900,1908,1916,1931,1941,1947,1963,1974,1983,2005,2025,2045,2083,2092,2107,2119,2133,2173,2191,2200,2205,2211,2219,2233,2238,2248,2262,2273,2280,2295,2305,2309,2312,2315,2318,2319,2321,2325,2330,2332,2340,2341,2348,2353,2361,2369,2372,2380,2395,2399,2403,2413,2420,2426,2428,2432,2438,2440,2444,2445,2446,2446,2449,2462,2466,2469,2478,2495,2532,2555,2588,2597,2608,2633,2646,2670,2701,2726,2775,2829,2888,2953,3046,3093,3128,3174,3229,3292,3316,3364,3408,3482,3565,3582,3617,3682,3717,3744,3759,3806,3866,3925,3973,4032,4065,4126,4214,4266,4298,4309,4352,4377,4459,4551,4593,4653,4684,4726,4803,4876,4933,5004,5055,5091,5141,5222,5270,5310,5350,5412,5457,5483,5531,5597,5670,5718,5780,5809,5845,5883,5898,5917,5943,5948,5978,6000,6017,6035,6062,6118,6170,6220,6258,6305,6368,6421,6479,6534,6566,6595,6678,6727,6766,6801,6887,6935,6970,7035,7144,7184,7228,7267,7297,7349,7392,7429,7487,7541,7568,7590,7639,7667,7704,7725,7763,7798,7846,7879,7950,8026,8075,8110,8173,8233,8284,8381,8456,8531,8610,8714,8782,8906,8982,9106,9181,9267,9354,9423,9492,9588,9671,9771],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.265,0.353,0.353,0.353,0.353,0.441,0.618,0.971,1.413,1.854,3.09,3.532,4.238,5.032,5.915,7.063,10.506,12.272,15.009,16.421,18.717,20.571,23.749,25.427,28.252,30.901,34.962,40.347,45.468,49.794,54.738,59.064,64.097,67.628,71.866,76.104,81.489,87.052,91.378,95.969,100.383,104.974,109.035,113.45,118.041,120.866,122.632,126.869,129.518,132.52,135.698,142.231,145.586,147.264,148.765,150.354,152.649,153.709,154.856,155.916,157.417,159.271,159.801,161.566,162.449,164.392,165.274,166.069,166.599,167.746,168.453,169.159,170.483,171.366,171.896,173.309,174.28,175.074,177.017,178.782,180.548,183.903,184.698,186.022,187.081,188.317,191.849,193.438,194.233,194.674,195.204,195.91,197.146,197.588,198.471,199.707,200.678,201.296,202.62,203.503,203.856,204.121,204.386,204.651,204.739,204.916,205.269,205.71,205.887,206.593,206.681,207.299,207.741,208.447,209.153,209.418,210.125,211.449,211.802,212.155,213.038,213.656,214.186,214.362,214.715,215.245,215.422,215.775,215.863,215.952,215.952,216.216,217.364,217.717,217.982,218.777,220.278,223.544,225.575,228.488,229.283,230.254,232.461,233.609,235.728,238.465,240.672,244.998,249.766,254.975,260.713,268.924,273.074,276.164,280.225,285.081,290.643,292.762,297,300.884,307.418,314.745,316.246,319.336,325.075,328.165,330.549,331.873,336.023,341.32,346.529,350.767,355.976,358.889,364.275,372.044,376.635,379.46,380.431,384.228,386.435,393.675,401.797,405.505,410.802,413.539,417.247,424.045,430.49,435.523,441.791,446.294,449.472,453.887,461.038,465.276,468.807,472.339,477.813,481.786,484.081,488.319,494.146,500.591,504.829,510.302,512.863,516.041,519.396,520.72,522.398,524.693,525.135,527.783,529.726,531.227,532.816,535.2,540.144,544.735,549.149,552.504,556.653,562.216,566.895,572.016,576.871,579.697,582.257,589.585,593.911,597.354,600.444,608.037,612.275,615.365,621.103,630.727,634.258,638.143,641.586,644.235,648.826,652.622,655.889,661.009,665.777,668.161,670.103,674.429,676.901,680.168,682.022,685.377,688.467,692.705,695.618,701.887,708.596,712.923,716.013,721.575,726.872,731.375,739.939,746.56,753.182,760.156,769.338,775.342,786.29,792.999,803.947,810.569,818.161,825.842,831.934,838.026,846.502,853.83,862.658],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.088,0,0,0,0.088,0.177,0.353,0.441,0.441,1.236,0.441,0.706,0.795,0.883,1.148,3.443,1.766,2.737,1.413,2.295,1.854,3.178,1.677,2.825,2.649,4.061,5.386,5.121,4.326,4.944,4.326,5.032,3.532,4.238,4.238,5.386,5.562,4.326,4.591,4.414,4.591,4.061,4.414,4.591,2.825,1.766,4.238,2.649,3.002,3.178,6.533,3.355,1.677,1.501,1.589,2.295,1.059,1.148,1.059,1.501,1.854,0.53,1.766,0.883,1.942,0.883,0.795,0.53,1.148,0.706,0.706,1.324,0.883,0.53,1.413,0.971,0.795,1.942,1.766,1.766,3.355,0.795,1.324,1.059,1.236,3.532,1.589,0.795,0.441,0.53,0.706,1.236,0.441,0.883,1.236,0.971,0.618,1.324,0.883,0.353,0.265,0.265,0.265,0.088,0.177,0.353,0.441,0.177,0.706,0.088,0.618,0.441,0.706,0.706,0.265,0.706,1.324,0.353,0.353,0.883,0.618,0.53,0.177,0.353,0.53,0.177,0.353,0.088,0.088,0,0.265,1.148,0.353,0.265,0.795,1.501,3.267,2.031,2.913,0.795,0.971,2.207,1.148,2.119,2.737,2.207,4.326,4.768,5.209,5.739,8.211,4.15,3.09,4.061,4.856,5.562,2.119,4.238,3.885,6.533,7.328,1.501,3.09,5.739,3.09,2.384,1.324,4.15,5.297,5.209,4.238,5.209,2.913,5.386,7.769,4.591,2.825,0.971,3.796,2.207,7.24,8.122,3.708,5.297,2.737,3.708,6.798,6.445,5.032,6.268,4.503,3.178,4.414,7.151,4.238,3.532,3.532,5.474,3.973,2.295,4.238,5.827,6.445,4.238,5.474,2.56,3.178,3.355,1.324,1.677,2.295,0.441,2.649,1.942,1.501,1.589,2.384,4.944,4.591,4.414,3.355,4.15,5.562,4.679,5.121,4.856,2.825,2.56,7.328,4.326,3.443,3.09,7.593,4.238,3.09,5.739,9.623,3.532,3.885,3.443,2.649,4.591,3.796,3.267,5.121,4.768,2.384,1.942,4.326,2.472,3.267,1.854,3.355,3.09,4.238,2.913,6.268,6.71,4.326,3.09,5.562,5.297,4.503,8.564,6.622,6.622,6.975,9.182,6.004,10.948,6.71,10.948,6.622,7.593,7.681,6.092,6.092,8.476,7.328,8.829],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.088,0.088,0.088,0.088,0.176,0.353,0.706,1.147,1.5,2.736,3.177,3.883,4.59,5.296,6.091,9.093,10.418,11.919,12.891,14.48,15.539,17.834,18.363,17.745,18.628,19.952,23.925,26.751,29.223,30.989,33.638,35.845,36.728,36.905,35.757,36.022,37.258,36.64,36.905,36.287,37.346,37.169,37.345,36.55,33.813,31.253,30.9,29.135,27.546,26.663,28.782,27.546,26.398,26.133,23.484,23.13,21.187,19.157,13.683,11.829,12.006,11.035,11.212,9.8,10.683,10.418,10.154,9.183,8.477,8.653,7.593,8.034,6.975,6.622,7.24,7.681,7.328,8.564,9.624,10.066,12.538,12.803,12.714,12.802,13.243,14.833,14.656,13.685,10.771,10.506,9.888,10.065,9.27,6.621,6.268,6.444,6.621,7.415,7.592,6.709,6.533,5.915,4.944,4.061,3.62,2.649,2.207,2.031,2.472,2.295,2.648,3.001,3.53,3.883,3.707,4.236,4.854,5.119,4.854,5.296,5.208,5.032,4.944,4.591,3.797,3.621,3.621,2.826,2.296,1.766,1.854,2.649,2.472,2.56,3.002,4.415,7.594,9.625,12.273,11.92,12.538,14.48,14.833,15.451,14.921,15.097,16.51,20.483,24.721,28.253,35.316,37.347,37.7,39.554,40.084,40.878,37.788,36.287,31.961,34.344,38.582,36.022,34.256,34.433,35.404,33.55,30.989,28.606,26.575,30.283,31.431,30.901,30.724,33.726,40.171,40.612,38.14,33.902,33.46,30.458,34.785,37.521,33.46,34.166,34.078,36.815,39.817,44.055,41.847,39.993,40.788,38.669,40.346,43.789,41.229,38.316,36.816,36.022,35.492,34.609,34.433,33.109,35.316,36.022,37.964,35.05,34.255,35.315,32.401,28.251,24.101,20.304,17.479,16.861,15.184,13.418,14.478,17.745,20.041,24.014,24.72,26.928,30.989,34.079,36.816,36.728,34.962,33.108,37.081,37.257,35.138,33.549,36.021,35.403,35.668,38.847,41.142,40.348,40.79,41.143,36.199,36.552,37.258,34.786,30.284,31.52,30.019,28.518,30.195,28.076,27.547,26.134,24.368,22.69,24.544,25.515,27.457,31.695,32.754,33.99,36.197,38.404,38.669,44.32,44.674,44.586,47.235,53.327,53.769,59.42,61.627,64.011,64.011,64.982,65.688,62.598,62.686,60.214,60.832,58.713],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.05,0.101,0.151,0.214,0.391,0.454,0.542,0.631,0.706,0.807,1.236,1.312,1.64,1.741,1.955,2.094,2.384,2.132,2.283,2.27,2.649,3.09,3.557,3.721,4.187,4.402,4.742,4.667,4.503,4.377,4.528,4.616,4.616,4.553,4.679,4.73,4.704,4.566,4.427,4.213,3.809,3.784,3.506,3.355,3.178,3.456,3.532,3.519,3.128,2.977,2.876,2.573,1.804,1.476,1.45,1.501,1.35,1.274,1.249,1.362,1.337,1.236,1.047,1.135,0.984,0.959,0.87,0.87,0.832,0.959,0.933,0.946,1.123,1.186,1.312,1.715,1.627,1.677,1.715,1.614,1.867,1.841,1.476,1.425,1.312,1.261,1.261,0.82,0.719,0.782,0.858,0.87,0.959,0.908,0.895,0.807,0.668,0.568,0.492,0.328,0.252,0.265,0.252,0.315,0.29,0.366,0.404,0.454,0.492,0.505,0.505,0.681,0.643,0.631,0.656,0.643,0.681,0.605,0.467,0.492,0.467,0.391,0.315,0.252,0.227,0.214,0.303,0.328,0.315,0.416,0.618,1.085,1.337,1.589,1.652,1.753,1.955,1.904,1.741,1.841,1.741,2.245,2.787,3.216,3.872,4.742,4.944,5.07,5.032,5.045,5.095,4.578,4.011,3.973,4.465,4.931,4.452,4.099,4.616,4.452,4.238,3.494,3.04,3.582,3.885,3.67,3.973,4.049,4.629,5.146,5.045,4.704,4.238,4.036,3.935,4.2,4.25,4.124,4.477,4.73,4.717,5.373,5.259,4.818,5.184,5.07,5.133,5.234,5.285,4.969,4.755,4.364,4.503,4.616,4.313,3.897,4.124,4.541,4.641,4.641,4.44,4.566,4.44,3.796,3.115,2.838,2.119,2.132,1.955,1.69,1.728,1.829,2.207,2.8,3.052,3.254,3.632,4.2,4.528,4.553,4.591,4.364,4.25,4.704,4.528,4.351,4.061,4.452,4.654,4.73,4.503,5.259,5.272,5.386,4.793,4.566,4.78,4.503,3.595,3.822,3.948,3.796,3.695,3.658,3.468,3.468,3.002,2.8,2.901,3.229,3.027,3.569,4.061,4.414,4.377,4.73,4.881,5.108,5.436,5.423,5.751,6.306,6.823,6.924,7.845,7.58,8.198,8.198,8.286,8.072,8.085,7.391,7.643,7.126,7.441]},{"iso":"CYP","continent":"Europe","population":875899,"name":"Cyprus","population_density":127.657,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,6,6,14,26,26,33,46,49,67,67,84,95,116,124,132,146,162,179,214,230,262,320,356,396,426,446,465,494,526,564,595,616,633,662,695,715,735,750,761,767,772,784,790,795,804,810,817,822,837,843,850,857,864,872,874,878,883,889,891,892,898,901,903,905,907,910,914,916,917,918,922,923,927,927,935,937,939,939,941,942,944,944,949,952,958,958,960,960,964,970,972,974,975,980,980,983,985,985,985,985,985,985,986,988,990,991,992,992,994,994,996,998,999,999,999,1002,1003,1004,1005,1008,1010,1013,1014,1021,1022,1023,1025,1031,1033,1037,1038,1038,1040,1040,1045,1047,1053,1057,1060,1067,1080,1090,1114,1124,1150,1155,1180,1195,1208,1222,1233,1242,1252,1277,1291,1305,1318,1332,1339,1351,1359,1385,1395,1406,1417,1421,1451,1474,1484,1467,1481,1483,1487,1488,1490,1495,1498,1502,1507,1509,1510,1511,1514,1517,1520,1523,1526,1534,1540,1548,1558,1565,1590,1600,1603,1618,1654,1663,1671,1684,1696,1713,1743,1755,1772,1789,1811,1824,1847,1876,1897,1918,1951,1986,2006,2047,2130,2181,2285,2379,2581,2644,2687,2839,2966,3154,3314,3444,3545,3636,3817,3930,4051,4217,4366,4563,4760,4934,5100,5333,5557,5871,5987,6098,6296,6461,6646,6853,7051,7178,7285,7513,7711,7979,8211,8456,8643,8947,9199,9453,9673,9983,10231,10383,10565,10883,11175,11523,11812,12181,12451,12867,13286,13286,13649,13649,14476,15101,15450,15789,16190,16190],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2.283,3.425,6.85,6.85,15.984,29.684,29.684,37.676,52.517,55.943,76.493,76.493,95.901,108.46,132.435,141.569,150.702,166.686,184.953,204.361,244.32,262.587,299.121,365.339,406.44,452.107,486.357,509.191,530.883,563.992,600.526,643.91,679.302,703.277,722.686,755.795,793.47,816.304,839.138,856.263,868.822,875.672,881.38,895.08,901.93,907.639,917.914,924.764,932.756,938.464,955.59,962.44,970.432,978.423,986.415,995.549,997.832,1002.399,1008.107,1014.957,1017.241,1018.382,1025.232,1028.657,1030.941,1033.224,1035.508,1038.933,1043.499,1045.783,1046.924,1048.066,1052.633,1053.774,1058.341,1058.341,1067.475,1069.758,1072.041,1072.041,1074.325,1075.466,1077.75,1077.75,1083.458,1086.883,1093.733,1093.733,1096.017,1096.017,1100.584,1107.434,1109.717,1112,1113.142,1118.85,1118.85,1122.276,1124.559,1124.559,1124.559,1124.559,1124.559,1124.559,1125.701,1127.984,1130.267,1131.409,1132.551,1132.551,1134.834,1134.834,1137.117,1139.401,1140.542,1140.542,1140.542,1143.968,1145.109,1146.251,1147.393,1150.818,1153.101,1156.526,1157.668,1165.66,1166.801,1167.943,1170.226,1177.076,1179.36,1183.926,1185.068,1185.068,1187.352,1187.352,1193.06,1195.343,1202.193,1206.76,1210.185,1218.177,1233.019,1244.436,1271.836,1283.253,1312.937,1318.645,1347.187,1364.313,1379.154,1395.138,1407.697,1417.972,1429.389,1457.931,1473.914,1489.898,1504.74,1520.723,1528.715,1542.415,1551.549,1581.233,1592.649,1605.208,1617.766,1622.333,1656.584,1682.842,1694.259,1674.851,1690.834,1693.118,1697.684,1698.826,1701.109,1706.818,1710.243,1714.81,1720.518,1722.801,1723.943,1725.085,1728.51,1731.935,1735.36,1738.785,1742.21,1751.343,1758.194,1767.327,1778.744,1786.736,1815.278,1826.695,1830.12,1847.245,1888.346,1898.621,1907.754,1922.596,1936.296,1955.705,1989.955,2003.656,2023.064,2042.473,2067.59,2082.432,2108.691,2141.799,2165.775,2189.75,2227.426,2267.385,2290.218,2337.027,2431.787,2490.013,2608.748,2716.067,2946.687,3018.613,3067.705,3241.241,3386.235,3600.872,3783.541,3931.96,4047.27,4151.164,4357.808,4486.819,4624.962,4814.482,4984.593,5209.505,5434.417,5633.07,5822.589,6088.602,6344.339,6702.828,6835.263,6961.99,7188.043,7376.421,7587.633,7823.961,8050.015,8195.009,8317.169,8577.473,8803.526,9109.498,9374.369,9654.081,9867.576,10214.648,10502.352,10792.34,11043.511,11397.433,11680.57,11854.106,12061.893,12424.949,12758.32,13155.626,13485.573,13906.855,14215.109,14690.05,15168.416,15168.416,15582.847,15582.847,16527.02,17240.572,17639.02,18026.051,18483.866,18483.866],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.142,3.425,0,9.133,13.7,0,7.992,14.842,3.425,20.55,0,19.409,12.559,23.975,9.133,9.133,15.984,18.267,19.409,39.959,18.267,36.534,66.218,41.101,45.667,34.251,22.834,21.692,33.109,36.534,43.384,35.392,23.975,19.409,33.109,37.676,22.834,22.834,17.125,12.559,6.85,5.708,13.7,6.85,5.708,10.275,6.85,7.992,5.708,17.125,6.85,7.992,7.992,7.992,9.133,2.283,4.567,5.708,6.85,2.283,1.142,6.85,3.425,2.283,2.283,2.283,3.425,4.567,2.283,1.142,1.142,4.567,1.142,4.567,0,9.133,2.283,2.283,0,2.283,1.142,2.283,0,5.708,3.425,6.85,0,2.283,0,4.567,6.85,2.283,2.283,1.142,5.708,0,3.425,2.283,0,0,0,0,0,1.142,2.283,2.283,1.142,1.142,0,2.283,0,2.283,2.283,1.142,0,0,3.425,1.142,1.142,1.142,3.425,2.283,3.425,1.142,7.992,1.142,1.142,2.283,6.85,2.283,4.567,1.142,0,2.283,0,5.708,2.283,6.85,4.567,3.425,7.992,14.842,11.417,27.4,11.417,29.684,5.708,28.542,17.125,14.842,15.984,12.559,10.275,11.417,28.542,15.984,15.984,14.842,15.984,7.992,13.7,9.133,29.684,11.417,12.559,12.559,4.567,34.251,26.259,11.417,-19.409,15.984,2.283,4.567,1.142,2.283,5.708,3.425,4.567,5.708,2.283,1.142,1.142,3.425,3.425,3.425,3.425,3.425,9.133,6.85,9.133,11.417,7.992,28.542,11.417,3.425,17.125,41.101,10.275,9.133,14.842,13.7,19.409,34.251,13.7,19.409,19.409,25.117,14.842,26.259,33.109,23.975,23.975,37.676,39.959,22.834,46.809,94.76,58.226,118.735,107.318,230.62,71.926,49.092,173.536,144.994,214.637,182.669,148.419,115.31,103.893,206.645,129.01,138.144,189.52,170.111,224.912,224.912,198.653,189.52,266.012,255.737,358.489,132.435,126.727,226.053,188.378,211.212,236.329,226.053,144.994,122.16,260.304,226.053,305.971,264.871,279.713,213.495,347.072,287.704,289.988,251.171,353.922,283.138,173.536,207.787,363.056,333.372,397.306,329.947,421.281,308.255,474.941,478.366,0,414.431,0,944.173,713.553,398.448,387.031,457.815,0],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.142,4.567,4.567,13.7,27.4,27.4,35.392,50.234,52.517,69.642,69.642,79.918,78.777,102.752,103.893,98.184,110.743,108.46,127.869,148.419,154.127,166.686,223.771,255.739,285.422,301.406,304.831,286.564,301.406,301.406,278.572,272.863,251.171,236.329,246.604,262.588,252.313,238.613,212.354,189.521,172.396,158.695,139.286,108.46,91.334,78.775,68.5,63.933,62.791,74.208,67.358,68.5,70.784,68.501,70.784,65.075,63.934,52.517,52.517,46.808,39.958,38.816,33.108,33.108,30.824,27.399,23.974,26.258,27.399,21.691,19.408,21.692,20.551,22.835,19.41,23.976,23.976,25.117,23.975,21.691,21.691,19.407,19.407,15.982,17.124,21.691,21.691,21.691,20.549,22.833,29.683,26.258,25.116,19.408,25.116,22.833,26.258,23.974,17.124,14.841,12.558,11.416,5.708,6.85,5.708,5.708,6.85,7.992,7.992,10.275,10.275,11.416,11.416,10.275,9.133,7.991,11.416,10.275,11.417,10.276,11.418,12.559,15.984,17.126,21.693,21.693,21.693,22.834,26.259,26.259,27.401,27.401,19.409,20.55,19.408,22.833,18.266,22.833,22.833,25.116,33.108,45.667,57.084,78.776,87.91,110.744,111.885,137.002,146.135,146.135,150.702,135.861,134.719,116.452,139.286,126.728,125.587,125.587,125.587,121.02,124.445,122.161,123.303,118.736,115.311,113.028,101.611,127.87,140.429,142.713,93.62,98.187,87.911,79.919,76.494,44.526,23.975,15.983,39.959,29.683,29.683,26.258,26.258,27.4,25.117,25.117,23.975,21.692,28.542,34.25,42.241,50.233,54.8,79.917,87.909,87.909,95.901,130.152,131.294,129.01,135.86,121.018,129.01,159.836,156.411,134.719,143.853,159.837,159.837,172.396,186.096,175.82,186.095,204.362,224.912,222.629,254.596,323.097,348.214,442.974,526.317,719.261,751.228,777.486,904.213,954.447,1110.858,1174.792,1215.893,1100.583,1132.55,1290.103,1245.577,1238.727,1213.61,1201.052,1277.545,1387.147,1481.907,1464.782,1601.784,1719.377,1888.346,1850.67,1752.485,1753.626,1743.351,1765.043,1735.36,1705.676,1492.181,1481.906,1615.483,1615.483,1733.076,1786.735,1830.119,1817.561,2019.639,2185.183,2214.867,2239.985,2287.936,2306.203,2200.026,2194.318,2210.302,2255.97,2363.288,2442.064,2509.423,2534.54,2835.945,3106.524,2743.468,2824.527,2427.221,3041.447,3333.719,3423.912,3336.002,3315.451,3315.451],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.914,5.056,7.013,7.013,9.949,8.644,9.46,11.254,13.537,12.722,13.537,12.885,15.494,15.494,19.409,18.593,22.507,30.662,34.251,38.165,40.285,37.839,38.328,37.839,33.598,33.924,32.456,30.989,30.499,32.13,32.783,30.825,27.89,25.28,23.649,21.855,17.941,14.516,12.232,9.786,8.807,7.992,8.155,8.155,8.644,8.644,8.97,8.644,8.807,8.97,8.481,6.687,6.524,6.361,5.545,4.567,4.241,4.404,4.077,3.588,2.936,3.099,3.588,2.936,2.61,2.446,2.773,2.61,2.773,2.12,3.099,3.262,3.425,2.773,2.936,2.446,2.773,1.468,1.957,2.12,3.099,2.773,2.936,2.61,3.262,3.425,3.262,2.61,2.773,3.262,3.262,3.099,2.446,2.12,1.794,1.631,0.815,0.815,0.489,0.489,0.815,0.979,1.142,1.142,1.468,1.305,1.305,1.305,1.305,1.142,1.142,1.305,1.468,1.305,1.142,1.468,1.794,2.283,1.957,2.936,2.936,2.936,2.773,3.425,3.262,3.751,2.773,2.61,2.773,2.446,2.283,2.283,2.61,3.099,3.588,4.404,6.524,7.339,10.928,11.58,15.168,15.494,18.43,18.756,19.246,17.615,17.778,15.005,15.82,15.82,15.657,15.82,15.657,16.147,15.82,16.147,13.374,15.331,14.679,14.353,13.863,13.374,16.31,18.756,16.147,11.743,12.232,10.764,10.764,6.035,2.61,1.794,5.056,3.425,3.914,3.588,3.588,3.425,3.099,3.099,2.936,2.61,2.773,3.914,4.73,5.545,6.687,7.339,10.928,12.069,11.254,12.722,17.288,17.125,17.288,15.331,15.657,17.941,20.387,16.473,17.778,19.246,20.713,20.877,21.855,21.692,23.16,23.812,26.422,28.542,29.684,32.62,41.427,46.32,59.857,69.806,97.043,104.056,104.383,115.636,128.032,141.732,152.496,140.753,146.951,154.78,159.51,157.226,146.299,147.277,150.376,166.033,183.322,182.18,190.824,209.091,218.551,245.462,232.251,218.225,222.139,221.976,214.147,211.375,192.455,194.249,193.597,198.49,203.872,217.409,221.487,229.152,238.938,271.068,274.983,284.116,276.288,289.009,289.498,283.79,263.892,274.657,280.854,301.731,298.306,318.041,337.286,375.451,391.924,344.299,346.746,299.611,374.309,432.209,421.281,408.234,473.636,414.431]},{"iso":"CZE","continent":"Europe","population":10708982,"name":"Czechia","population_density":137.176,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,5,8,12,18,19,31,31,41,91,94,141,189,253,298,396,464,694,833,995,1120,1236,1394,1654,1925,2279,2631,2817,3001,3308,3508,3858,4091,4472,4587,4822,5017,5312,5569,5732,5831,5991,6059,6111,6216,6433,6549,6606,6746,6900,7033,7132,7187,7273,7352,7404,7445,7504,7579,7682,7737,7755,7781,7819,7896,7974,8031,8077,8095,8123,8176,8221,8269,8351,8406,8455,8475,8586,8647,8721,8754,8813,8890,8955,9002,9050,9086,9140,9196,9230,9268,9302,9364,9438,9494,9529,9567,9628,9697,9751,9824,9855,9938,9991,10024,10064,10111,10162,10280,10406,10448,10498,10523,10650,10777,10870,11038,11298,11603,11805,11954,12046,12178,12319,12440,12515,12566,12685,12814,12919,13001,13115,13174,13238,13341,13475,13612,13742,13855,13945,14098,14324,14570,14800,15081,15212,15324,15516,15799,16093,16371,16574,16699,16800,17008,17286,17529,17731,18060,18235,18353,18494,18783,19075,19401,19693,19891,20012,20202,20483,20798,21045,21551,21790,21923,22181,22548,22951,23169,23777,24094,24367,24618,25117,25773,26452,27249,27752,28156,28716,29877,31036,32413,33860,35401,36188,37222,38896,41032,44155,46262,48306,49290,50764,53158,55464,58374,61318,63294,64597,65883,67843,70763,74255,78051,80605,82446,85566,90022,95360,100757,109374,114005,117110,121421,129747,139290,149010,160112,168827,173885,181962,193946,208915,223065,238323,250797,258097,268370,284033,297013,310068,323673,335102,341644,350896,362985,378716,391945,403497,411220,414828,417181,429880,438805,446675,454030,458229,460116,465523,469769,475284,481755,487563,490750,492263,496638,502534,505215,511520,515984,518649,519723,523298,528474,533042,537663,542406,544179,546833,546833,551070,556927,563333,569205,575422,579079,581079,586251,594148,602404],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.28,0.28,0.467,0.747,1.121,1.681,1.774,2.895,2.895,3.829,8.498,8.778,13.167,17.649,23.625,27.827,36.978,43.328,64.805,77.785,92.913,104.585,115.417,130.171,154.45,179.756,212.812,245.682,263.05,280.232,308.9,327.575,360.258,382.016,417.593,428.332,450.276,468.485,496.032,520.031,535.252,544.496,559.437,565.787,570.642,580.447,600.711,611.543,616.865,629.938,644.319,656.738,665.983,671.119,679.15,686.527,691.382,695.211,700.72,707.724,717.342,722.478,724.158,726.586,730.135,737.325,744.609,749.931,754.227,755.908,758.522,763.471,767.673,772.156,779.813,784.949,789.524,791.392,801.757,807.453,814.363,817.445,822.954,830.144,836.214,840.603,845.085,848.447,853.489,858.718,861.893,865.442,868.617,874.406,881.316,886.546,889.814,893.362,899.058,905.502,910.544,917.361,920.256,928.006,932.955,936.037,939.772,944.161,948.923,959.942,971.708,975.63,980.299,982.633,994.492,1006.351,1015.036,1030.724,1055.002,1083.483,1102.346,1116.259,1124.85,1137.176,1150.343,1161.642,1168.645,1173.408,1184.52,1196.566,1206.371,1214.028,1224.673,1230.182,1236.159,1245.777,1258.29,1271.083,1283.222,1293.774,1302.178,1316.465,1337.569,1360.54,1382.017,1408.257,1420.49,1430.948,1448.877,1475.304,1502.757,1528.717,1547.673,1559.345,1568.777,1588.2,1614.159,1636.85,1655.713,1686.435,1702.776,1713.795,1726.962,1753.948,1781.215,1811.657,1838.924,1857.413,1868.712,1886.454,1912.693,1942.108,1965.173,2012.423,2034.741,2047.16,2071.252,2105.522,2143.154,2163.511,2220.286,2249.887,2275.38,2298.818,2345.414,2406.671,2470.076,2544.5,2591.469,2629.195,2681.487,2789.901,2898.128,3026.712,3161.832,3305.73,3379.219,3475.774,3632.091,3831.55,4123.174,4319.925,4510.793,4602.678,4740.32,4963.871,5179.204,5450.938,5725.848,5910.366,6032.039,6152.125,6335.149,6607.818,6933.899,7288.368,7526.859,7698.771,7990.115,8406.215,8904.675,9408.644,10213.296,10645.736,10935.68,11338.239,12115.717,13006.839,13914.488,14951.188,15764.991,16237.304,16991.531,18110.592,19508.39,20829.711,22254.496,23419.313,24100.984,25060.272,26522.876,27734.942,28954.013,30224.442,31291.676,31902.566,32766.513,33895.379,35364.332,36599.651,37678.371,38399.542,38736.455,38956.177,40142.004,40975.417,41710.314,42397.12,42789.221,42965.428,43470.332,43866.821,44381.81,44986.069,45528.417,45826.018,45967.301,46375.837,46926.403,47176.753,47765.511,48182.358,48431.214,48531.504,48865.336,49348.668,49775.226,50206.733,50649.632,50815.194,51063.024,51063.024,51458.673,52005.597,52603.786,53152.111,53732.652,54074.141,54260.9,54743.859,55481.277,56252.219],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.187,0.28,0.374,0.56,0.093,1.121,0,0.934,4.669,0.28,4.389,4.482,5.976,4.202,9.151,6.35,21.477,12.98,15.127,11.672,10.832,14.754,24.279,25.306,33.056,32.87,17.369,17.182,28.668,18.676,32.683,21.757,35.578,10.739,21.944,18.209,27.547,23.999,15.221,9.245,14.941,6.35,4.856,9.805,20.263,10.832,5.323,13.073,14.38,12.419,9.245,5.136,8.031,7.377,4.856,3.829,5.509,7.003,9.618,5.136,1.681,2.428,3.548,7.19,7.284,5.323,4.295,1.681,2.615,4.949,4.202,4.482,7.657,5.136,4.576,1.868,10.365,5.696,6.91,3.082,5.509,7.19,6.07,4.389,4.482,3.362,5.042,5.229,3.175,3.548,3.175,5.79,6.91,5.229,3.268,3.548,5.696,6.443,5.042,6.817,2.895,7.751,4.949,3.082,3.735,4.389,4.762,11.019,11.766,3.922,4.669,2.334,11.859,11.859,8.684,15.688,24.279,28.481,18.863,13.914,8.591,12.326,13.167,11.299,7.003,4.762,11.112,12.046,9.805,7.657,10.645,5.509,5.976,9.618,12.513,12.793,12.139,10.552,8.404,14.287,21.104,22.971,21.477,26.24,12.233,10.459,17.929,26.426,27.454,25.96,18.956,11.672,9.431,19.423,25.96,22.691,18.863,30.722,16.341,11.019,13.167,26.987,27.267,30.442,27.267,18.489,11.299,17.742,26.24,29.415,23.065,47.25,22.318,12.419,24.092,34.27,37.632,20.357,56.775,29.601,25.493,23.438,46.596,61.257,63.405,74.424,46.97,37.725,52.293,108.414,108.227,128.584,135.12,143.898,73.49,96.554,156.317,199.459,291.624,196.751,190.868,91.885,137.641,223.551,215.333,271.735,274.909,184.518,121.674,120.086,183.024,272.668,326.081,354.469,238.491,171.912,291.344,416.099,498.46,503.969,804.652,432.441,289.944,402.559,777.478,891.121,907.649,1036.7,813.803,472.314,754.227,1119.061,1397.799,1321.321,1424.785,1164.817,681.671,959.288,1462.604,1212.067,1219.07,1270.429,1067.235,610.889,863.948,1128.865,1468.954,1235.318,1078.721,721.17,336.913,219.722,1185.827,833.413,734.897,686.807,392.101,176.207,504.903,396.49,514.988,604.259,542.348,297.601,141.283,408.536,550.566,250.351,588.758,416.846,248.857,100.29,333.832,483.333,426.558,431.507,442.899,165.562,247.829,0,395.649,546.924,598.189,548.325,580.541,341.489,186.759,482.959,737.418,770.942],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.187,0.467,0.841,1.401,1.494,2.615,2.615,3.549,8.031,8.031,12.046,15.968,21.851,24.932,34.083,39.499,56.307,69.007,79.745,86.935,91.791,102.343,117.471,136.427,148.006,167.896,170.138,175.648,193.484,197.406,205.81,202.261,204.783,182.652,187.227,188.254,187.133,192.456,174.994,162.482,141.845,137.456,120.368,111.964,104.68,91.513,81.615,85.443,84.882,90.951,95.34,90.671,78.439,74.984,74.517,65.273,56.402,50.986,51.359,51.359,45.009,40.06,38.752,42.113,43.888,42.208,36.885,33.43,34.364,36.885,37.539,34.831,35.204,35.017,35.298,35.485,43.235,43.982,46.69,45.29,43.142,45.196,46.69,49.211,43.328,40.994,39.126,41.273,38.939,35.297,32.402,33.803,36.231,38.098,36.324,34.643,37.164,40.059,41.926,42.953,38.938,41.46,43.141,42.675,40.714,38.66,38.38,42.582,51.453,47.624,47.344,46.596,54.72,62.19,66.112,70.781,83.294,107.853,122.047,133.627,130.359,130.826,135.309,130.92,113.644,89.925,82.174,80.306,81.52,76.851,74.329,68.539,67.512,72.368,73.769,74.516,76.85,79.745,77.504,86.282,101.41,114.763,123.727,137.174,137.268,137.175,146.7,158.839,165.189,168.178,165.657,151.089,148.287,157.251,165.282,161.547,152.956,157.718,155.103,154.45,158.186,165.75,167.057,174.808,183.212,170.979,165.937,172.66,185.733,188.161,183.959,200.767,195.818,189.748,202.541,219.069,230.461,221.403,255.113,237.464,240.639,251.658,274.162,301.149,326.922,380.989,371.184,379.308,406.108,491.084,552.715,620.042,691.757,761.231,787.751,846.58,950.604,1041.649,1225.046,1293.213,1348.961,1296.948,1361.099,1488.096,1547.112,1619.388,1602.673,1590.44,1521.246,1549.447,1594.83,1643.947,1754.695,1837.429,1801.011,1788.405,1958.075,2254.088,2569.524,2800.825,3279.396,3357.368,3408.821,3639.468,4125.602,4600.624,5009.813,5542.544,5551.695,5591.568,6055.851,6772.353,7392.674,7822.874,8340.01,8468.127,8335.995,8822.969,9531.346,9624.352,9445.623,9394.731,9037.181,8483.253,8665.53,8835.107,8841.457,8864.708,8724.359,8175.1,7444.778,7053.611,7375.49,7080.038,6345.981,5797.47,5110.85,4565.887,4733.877,4910.645,4239.806,4010.652,3818.103,3428.897,3178.079,3410.408,3456.071,3309.932,3383.702,3196.289,2902.798,2705.487,2898.036,2972.833,2848.825,3029.981,2884.122,2632.838,2631.81,2531.52,2593.337,2656.928,2828.559,2945.377,3083.019,3258.946,3197.876,3680.835,4022.604,4246.622],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.213,0.374,0.374,0.48,1.107,1.094,1.641,2.268,2.961,3.562,4.736,4.976,8.004,9.231,10.752,11.566,12.513,13.313,15.875,16.421,19.29,21.824,22.638,23.545,25.533,24.732,25.786,24.172,24.559,23.612,24.292,22.798,24.065,22.825,21.891,18.129,18.729,16.502,14.594,12.059,11.526,10.899,10.338,10.072,11.219,12.299,12.219,10.058,9.658,9.952,8.778,7.27,6.283,5.963,6.603,6.19,5.376,5.029,4.989,5.229,5.269,4.656,4.536,4.536,4.562,4.762,4.335,3.935,4.269,4.389,4.802,4.696,5.469,5.683,6.03,5.376,5.429,5.803,6.403,5.549,5.376,4.869,5.149,5.109,4.536,4.175,4.002,4.189,4.696,4.722,4.442,4.496,4.802,5.269,5.163,5.149,4.816,5.456,5.656,5.283,4.896,4.802,4.509,5.669,6.243,6.096,6.323,6.123,7.19,8.204,7.871,8.431,11.339,14.741,17.102,17.395,16.928,17.449,17.088,15.234,12.166,10.152,9.751,10.245,9.885,9.098,9.004,8.791,8.964,8.751,8.818,9.245,9.885,9.872,10.285,11.472,13.113,14.607,15.848,17.862,18.102,18.396,18.916,19.676,20.317,20.957,19.917,19.836,19.69,19.903,19.836,19.156,18.142,19.823,20.49,20.717,19.823,19.97,20.624,22.278,21.784,22.091,22.131,22.785,22.678,22.985,21.931,24.786,25.333,25.493,26.4,27.547,28.721,28.334,29.695,30.735,32.603,32.509,34.27,37.645,43.795,46.316,48.797,50.545,54.667,63.498,70.208,79.519,88.19,102.037,107.146,113.47,120.313,133.346,156.638,165.442,172.152,174.78,180.649,190.254,192.522,189.681,200.846,199.939,204.194,201.687,195.897,204.088,211.852,223.217,230.928,238.105,262.57,295.866,328.122,353.535,417.847,445.554,462.416,478.303,529.929,586.023,643.692,676.842,731.322,757.375,807.613,856.411,928.793,987.889,1043.33,1093.475,1123.383,1152.677,1201.755,1175.222,1160.615,1138.564,1124.623,1114.512,1100.892,1053.215,1089.913,1092.234,1064.847,1015.409,976.27,884.238,892.375,801.583,730.095,674.107,627.097,604.139,644.879,532.117,486.628,467.965,447.328,433.828,428.839,415.072,437.083,399.278,397.063,379.134,372.171,366.315,355.643,346.038,371.21,348.746,352.468,340.569,361.646,313.955,301.429,318.624,342.436,357.497,416.78,430.16,456.839,469.312,496.526,521.205]},{"iso":"COD","continent":"Africa","population":89561404,"name":"Democratic Republic of Congo","population_density":35.879,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,2,2,2,3,4,14,18,23,30,36,45,48,51,51,65,65,81,98,109,134,134,154,154,161,180,180,180,215,223,234,235,241,254,267,287,307,327,332,350,359,377,394,416,442,459,471,491,572,604,674,674,682,705,797,863,937,937,991,1024,1102,1169,1242,1298,1455,1455,1538,1629,1731,1835,1945,2025,2141,2297,2403,2546,2660,2833,2966,3070,3195,3326,3495,3644,3764,3878,4016,4106,4259,4390,4515,4637,4724,4778,4837,4974,5100,5283,5477,5672,5826,5924,6027,6213,6411,6552,6690,6827,6939,7039,7122,7189,7311,7379,7411,7432,7432,7432,7846,7905,7971,8033,8075,8135,8163,8199,8249,8324,8403,8443,8534,8626,8720,8767,8801,8831,8844,8873,8931,9010,9070,9084,9115,9133,9178,9253,9309,9355,9436,9454,9489,9499,9538,9589,9605,9638,9676,9706,9721,9741,9757,9802,9811,9830,9842,9891,9912,9915,9994,10007,10045,10097,10104,10114,10125,10149,10178,10210,10233,10292,10324,10343,10361,10385,10390,10390,10401,10414,10442,10456,10488,10515,10519,10523,10537,10555,10578,10593,10612,10624,10631,10659,10685,10729,10752,10760,10778,10789,10804,10822,10835,10841,10851,10868,10872,10935,10935,10999,11000,11006,11052,11066,11066,11097,11122,11143,11143,11174,11191,11211,11211,11306,11306,11373,11395,11427,11450,11450,11517,11550,11591,11608,11642,11656,11692,11692,11760,11760,11839,11866,11918,12008,12129,12180,12180,12278,12310,12365,12470,12470,12608,12702,12772,12859,12987,13132,13281,13413,13527,13595,13750,13843,13997,14169,14342,14461,14513,14597,14930,15089],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.011,0.011,0.022,0.022,0.022,0.022,0.033,0.045,0.156,0.201,0.257,0.335,0.402,0.502,0.536,0.569,0.569,0.726,0.726,0.904,1.094,1.217,1.496,1.496,1.719,1.719,1.798,2.01,2.01,2.01,2.401,2.49,2.613,2.624,2.691,2.836,2.981,3.205,3.428,3.651,3.707,3.908,4.008,4.209,4.399,4.645,4.935,5.125,5.259,5.482,6.387,6.744,7.526,7.526,7.615,7.872,8.899,9.636,10.462,10.462,11.065,11.433,12.304,13.052,13.868,14.493,16.246,16.246,17.173,18.189,19.328,20.489,21.717,22.61,23.905,25.647,26.831,28.427,29.7,31.632,33.117,34.278,35.674,37.137,39.024,40.687,42.027,43.3,44.841,45.846,47.554,49.017,50.412,51.775,52.746,53.349,54.008,55.537,56.944,58.987,61.154,63.331,65.05,66.145,67.295,69.371,71.582,73.157,74.697,76.227,77.478,78.594,79.521,80.269,81.631,82.39,82.748,82.982,82.982,82.982,87.605,88.263,89,89.693,90.162,90.832,91.144,91.546,92.104,92.942,93.824,94.271,95.287,96.314,97.363,97.888,98.268,98.603,98.748,99.072,99.719,100.601,101.271,101.428,101.774,101.975,102.477,103.315,103.94,104.453,105.358,105.559,105.95,106.061,106.497,107.066,107.245,107.613,108.038,108.373,108.54,108.763,108.942,109.444,109.545,109.757,109.891,110.438,110.673,110.706,111.588,111.733,112.158,112.738,112.816,112.928,113.051,113.319,113.643,114,114.257,114.916,115.273,115.485,115.686,115.954,116.01,116.01,116.133,116.278,116.59,116.747,117.104,117.405,117.45,117.495,117.651,117.852,118.109,118.276,118.489,118.623,118.701,119.013,119.304,119.795,120.052,120.141,120.342,120.465,120.632,120.833,120.978,121.045,121.157,121.347,121.392,122.095,122.095,122.81,122.821,122.888,123.401,123.558,123.558,123.904,124.183,124.417,124.417,124.764,124.953,125.177,125.177,126.237,126.237,126.986,127.231,127.588,127.845,127.845,128.593,128.962,129.42,129.609,129.989,130.145,130.547,130.547,131.307,131.307,132.189,132.49,133.071,134.076,135.427,135.996,135.996,137.09,137.448,138.062,139.234,139.234,140.775,141.824,142.606,143.577,145.007,146.626,148.289,149.763,151.036,151.795,153.526,154.564,156.284,158.204,160.136,161.465,162.045,162.983,166.701,168.477],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.011,0,0,0,0.011,0.011,0.112,0.045,0.056,0.078,0.067,0.1,0.033,0.033,0,0.156,0,0.179,0.19,0.123,0.279,0,0.223,0,0.078,0.212,0,0,0.391,0.089,0.123,0.011,0.067,0.145,0.145,0.223,0.223,0.223,0.056,0.201,0.1,0.201,0.19,0.246,0.29,0.19,0.134,0.223,0.904,0.357,0.782,0,0.089,0.257,1.027,0.737,0.826,0,0.603,0.368,0.871,0.748,0.815,0.625,1.753,0,0.927,1.016,1.139,1.161,1.228,0.893,1.295,1.742,1.184,1.597,1.273,1.932,1.485,1.161,1.396,1.463,1.887,1.664,1.34,1.273,1.541,1.005,1.708,1.463,1.396,1.362,0.971,0.603,0.659,1.53,1.407,2.043,2.166,2.177,1.719,1.094,1.15,2.077,2.211,1.574,1.541,1.53,1.251,1.117,0.927,0.748,1.362,0.759,0.357,0.234,0,0,4.623,0.659,0.737,0.692,0.469,0.67,0.313,0.402,0.558,0.837,0.882,0.447,1.016,1.027,1.05,0.525,0.38,0.335,0.145,0.324,0.648,0.882,0.67,0.156,0.346,0.201,0.502,0.837,0.625,0.514,0.904,0.201,0.391,0.112,0.435,0.569,0.179,0.368,0.424,0.335,0.167,0.223,0.179,0.502,0.1,0.212,0.134,0.547,0.234,0.033,0.882,0.145,0.424,0.581,0.078,0.112,0.123,0.268,0.324,0.357,0.257,0.659,0.357,0.212,0.201,0.268,0.056,0,0.123,0.145,0.313,0.156,0.357,0.301,0.045,0.045,0.156,0.201,0.257,0.167,0.212,0.134,0.078,0.313,0.29,0.491,0.257,0.089,0.201,0.123,0.167,0.201,0.145,0.067,0.112,0.19,0.045,0.703,0,0.715,0.011,0.067,0.514,0.156,0,0.346,0.279,0.234,0,0.346,0.19,0.223,0,1.061,0,0.748,0.246,0.357,0.257,0,0.748,0.368,0.458,0.19,0.38,0.156,0.402,0,0.759,0,0.882,0.301,0.581,1.005,1.351,0.569,0,1.094,0.357,0.614,1.172,0,1.541,1.05,0.782,0.971,1.429,1.619,1.664,1.474,1.273,0.759,1.731,1.038,1.719,1.92,1.932,1.329,0.581,0.938,3.718,1.775],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.011,0.011,0.011,0.011,0.022,0.033,0.145,0.19,0.235,0.313,0.38,0.48,0.502,0.524,0.412,0.523,0.467,0.568,0.691,0.714,0.96,0.927,1.15,0.994,1.072,1.105,0.915,0.792,0.904,0.993,0.893,0.904,0.893,0.826,0.971,1.194,1.026,1.16,1.093,1.283,1.316,1.372,1.417,1.44,1.507,1.474,1.552,1.574,2.378,2.534,3.126,2.88,2.679,2.746,3.639,4.153,4.075,3.718,3.539,3.907,4.689,5.18,4.968,4.856,5.783,5.783,6.107,6.755,7.023,7.436,7.849,8.117,7.659,9.401,9.658,10.239,10.373,11.144,11.401,11.669,11.77,11.491,12.194,12.261,12.328,11.669,11.725,11.569,11.881,11.881,11.39,11.088,10.719,10.049,9.167,9.692,9.391,9.971,10.741,11.556,12.304,12.795,13.286,13.833,14.637,14.168,13.543,12.896,12.428,12.451,12.228,10.899,10.05,9.235,8.051,6.755,5.504,4.387,8.083,7.994,7.369,7.302,7.414,7.85,8.163,8.565,4.5,4.678,4.823,4.578,5.125,5.482,6.219,6.342,6.164,5.662,4.925,4.802,4.434,4.289,3.909,3.54,3.506,3.372,3.729,4.242,4.219,3.851,4.085,4.13,4.175,4.086,4.019,3.751,3.305,3.159,2.679,2.813,2.589,2.7,2.444,2.377,2.298,2.142,1.852,2.064,2.131,1.941,2.644,2.287,2.611,2.98,2.924,2.489,2.378,2.613,2.055,2.267,2.1,2.178,2.457,2.557,2.635,2.635,2.367,2.01,1.876,1.362,1.318,1.262,1.418,1.451,1.44,1.485,1.518,1.574,1.518,1.529,1.384,1.217,1.25,1.518,1.652,1.942,1.942,1.864,1.853,1.842,1.931,1.819,1.674,1.25,1.105,1.206,1.05,1.63,1.463,1.977,1.843,1.843,2.245,2.211,2.166,1.809,2.088,1.607,1.596,1.875,1.551,1.618,1.618,2.333,2.054,2.568,2.814,2.825,2.892,2.669,3.417,2.724,3.182,2.624,2.758,2.557,2.702,2.702,2.713,2.345,2.769,2.88,3.081,3.93,4.879,5.448,4.689,5.783,5.258,5.571,6.162,5.157,5.347,5.828,6.61,6.487,7.559,8.564,9.056,10.53,10.262,9.971,10.92,10.987,11.277,11.578,11.846,11.701,11.009,11.188,13.175,13.912],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.003,0.005,0.021,0.026,0.033,0.045,0.054,0.067,0.07,0.059,0.053,0.067,0.056,0.072,0.085,0.097,0.132,0.132,0.142,0.142,0.128,0.131,0.113,0.073,0.129,0.11,0.128,0.118,0.097,0.118,0.139,0.115,0.134,0.148,0.155,0.174,0.167,0.175,0.171,0.174,0.183,0.203,0.193,0.211,0.311,0.335,0.412,0.37,0.356,0.373,0.488,0.464,0.531,0.42,0.506,0.546,0.633,0.593,0.605,0.576,0.826,0.74,0.82,0.841,0.896,0.946,1.032,0.909,1.094,1.211,1.235,1.3,1.316,1.416,1.501,1.482,1.432,1.472,1.514,1.57,1.485,1.455,1.509,1.453,1.488,1.428,1.389,1.393,1.349,1.215,1.166,1.14,1.133,1.225,1.34,1.512,1.672,1.734,1.68,1.775,1.799,1.715,1.624,1.597,1.619,1.614,1.45,1.241,1.211,1.099,0.932,0.786,0.627,0.494,1.048,0.947,0.944,0.992,1.026,1.121,1.166,0.563,0.549,0.563,0.59,0.587,0.636,0.739,0.831,0.826,0.761,0.683,0.64,0.541,0.486,0.463,0.483,0.451,0.453,0.461,0.486,0.514,0.477,0.455,0.561,0.541,0.568,0.512,0.455,0.447,0.399,0.322,0.354,0.346,0.354,0.324,0.268,0.314,0.276,0.246,0.217,0.271,0.273,0.252,0.306,0.313,0.343,0.407,0.34,0.322,0.335,0.247,0.273,0.263,0.217,0.3,0.335,0.348,0.338,0.33,0.287,0.25,0.174,0.144,0.158,0.152,0.164,0.199,0.206,0.195,0.196,0.18,0.195,0.167,0.155,0.167,0.172,0.195,0.207,0.241,0.254,0.236,0.246,0.252,0.231,0.219,0.169,0.142,0.145,0.144,0.132,0.209,0.18,0.262,0.254,0.247,0.293,0.309,0.209,0.258,0.196,0.228,0.219,0.195,0.199,0.231,0.182,0.293,0.26,0.367,0.353,0.376,0.381,0.381,0.337,0.389,0.348,0.34,0.343,0.329,0.386,0.279,0.335,0.27,0.368,0.357,0.418,0.504,0.697,0.67,0.67,0.7,0.708,0.713,0.737,0.544,0.683,0.833,0.788,0.876,0.992,1.056,1.294,1.284,1.316,1.313,1.421,1.365,1.38,1.416,1.482,1.49,1.464,1.351,1.734,1.742]},{"iso":"DNK","continent":"Europe","population":5792203,"name":"Denmark","population_density":136.52,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,3,4,4,6,11,11,24,24,37,92,264,444,617,804,836,875,933,1025,1116,1225,1337,1420,1514,1572,1718,1862,2023,2200,2366,2564,2755,3039,3290,3573,3946,4269,4561,4875,5266,5597,5830,6014,6191,6369,6513,6706,6876,7074,7268,7437,7580,7711,7891,8108,8271,8408,8643,8773,8896,9049,9206,9356,9509,9605,9721,9868,10019,10136,10281,10416,10517,10627,10711,10789,10865,10911,10989,11056,11125,11166,11242,11315,11380,11428,11487,11559,11586,11627,11680,11712,11793,11833,11869,11899,11934,11971,12011,12075,12124,12148,12162,12201,12216,12235,12299,12339,12393,12417,12450,12494,12544,12591,12591,12591,12727,12761,12815,12836,12875,12875,12875,12951,12968,12994,13015,13032,13032,13033,13079,13089,13101,13117,13147,13147,13147,13238,13262,13293,13325,13374,13374,13377,13466,13506,13554,13594,13642,13643,13665,13775,13811,13868,13964,14028,14028,14028,14235,14314,14440,14586,14747,14751,14759,15135,15291,15423,15590,15758,15867,16003,16127,16246,16336,16453,16525,16637,16715,16821,16905,16962,17052,17125,17204,17316,17410,17509,17620,17800,17974,18163,18310,18540,18784,19036,19353,19646,19989,20327,20674,21013,21013,21836,22291,22881,23353,23774,24261,24822,25385,26066,26687,27111,27546,27941,28479,28882,29418,29789,30168,30546,30868,31201,31648,32131,32575,32915,33304,33594,34087,34519,34939,35440,35893,36345,36877,37507,38270,39129,39918,40863,41919,42668,43685,44545,45736,46863,47811,48753,50106,51042,52265,53692,54742,55635,56406,57472,58466,59478,60515,61593,62652,63847,65067,66324,67621,68878,70152,71003,72172,73539,74722,75913,77236,78874,79872,81002,82470,84056,85663,87266,89382,91131,93177,95332,97895,101027,104103,107660,110305,113642,116636,120330,124366],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.173,0.173,0.518,0.691,0.691,1.036,1.899,1.899,4.144,4.144,6.388,15.883,45.579,76.655,106.523,138.807,144.332,151.065,161.079,176.962,192.673,211.491,230.828,245.157,261.386,271.399,296.606,321.467,349.263,379.821,408.48,442.664,475.639,524.671,568.005,616.864,681.261,737.025,787.438,841.649,909.153,966.299,1006.525,1038.292,1068.851,1099.582,1124.443,1157.763,1187.113,1221.297,1254.79,1283.967,1308.656,1331.272,1362.349,1399.813,1427.954,1451.607,1492.178,1514.622,1535.858,1562.273,1589.378,1615.275,1641.69,1658.264,1678.291,1703.67,1729.739,1749.939,1774.972,1798.28,1815.717,1834.708,1849.21,1862.676,1875.798,1883.739,1897.206,1908.773,1920.685,1927.764,1940.885,1953.488,1964.71,1972.997,1983.183,1995.614,2000.275,2007.354,2016.504,2022.029,2036.013,2042.919,2049.134,2054.313,2060.356,2066.744,2073.65,2084.699,2093.159,2097.302,2099.719,2106.452,2109.042,2112.322,2123.372,2130.278,2139.6,2143.744,2149.441,2157.038,2165.67,2173.784,2173.784,2173.784,2197.264,2203.134,2212.457,2216.083,2222.816,2222.816,2222.816,2235.937,2238.872,2243.361,2246.986,2249.921,2249.921,2250.094,2258.036,2259.762,2261.834,2264.596,2269.775,2269.775,2269.775,2285.486,2289.63,2294.982,2300.506,2308.966,2308.966,2309.484,2324.849,2331.755,2340.042,2346.948,2355.235,2355.408,2359.206,2378.197,2384.412,2394.253,2410.827,2421.876,2421.876,2421.876,2457.614,2471.253,2493.007,2518.213,2546.009,2546.699,2548.081,2612.995,2639.928,2662.717,2691.549,2720.554,2739.372,2762.852,2784.26,2804.805,2820.343,2840.543,2852.973,2872.31,2885.776,2904.076,2918.579,2928.419,2943.958,2956.561,2970.2,2989.536,3005.765,3022.857,3042.02,3073.097,3103.137,3135.767,3161.146,3200.855,3242.98,3286.487,3341.216,3391.801,3451.019,3509.373,3569.281,3627.808,3627.808,3769.895,3848.449,3950.31,4031.799,4104.483,4188.562,4285.416,4382.616,4500.188,4607.401,4680.603,4755.703,4823.899,4916.782,4986.358,5078.897,5142.948,5208.381,5273.641,5329.233,5386.724,5463.897,5547.285,5623.94,5682.639,5749.798,5799.866,5884.98,5959.563,6032.074,6118.57,6196.779,6274.815,6366.662,6475.429,6607.158,6755.461,6891.678,7054.829,7237.143,7366.455,7542.035,7690.511,7896.132,8090.704,8254.372,8417.005,8650.595,8812.191,9023.337,9269.703,9450.981,9605.154,9738.264,9922.304,10093.914,10268.632,10447.666,10633.778,10816.61,11022.922,11233.55,11450.566,11674.487,11891.503,12111.454,12258.376,12460.199,12696.206,12900.446,13106.067,13334.477,13617.271,13789.572,13984.662,14238.106,14511.922,14789.364,15066.116,15431.434,15733.392,16086.625,16458.677,16901.169,17441.896,17972.954,18587.056,19043.704,19619.823,20136.725,20774.479,21471.278],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.345,0.173,0,0.345,0.863,0,2.244,0,2.244,9.496,29.695,31.076,29.868,32.285,5.525,6.733,10.013,15.883,15.711,18.818,19.336,14.33,16.229,10.013,25.206,24.861,27.796,30.558,28.659,34.184,32.975,49.031,43.334,48.859,64.397,55.765,50.413,54.211,67.505,57.146,40.226,31.767,30.558,30.731,24.861,33.321,29.35,34.184,33.493,29.177,24.688,22.617,31.076,37.464,28.141,23.652,40.572,22.444,21.235,26.415,27.105,25.897,26.415,16.574,20.027,25.379,26.07,20.2,25.034,23.307,17.437,18.991,14.502,13.466,13.121,7.942,13.466,11.567,11.913,7.078,13.121,12.603,11.222,8.287,10.186,12.431,4.661,7.078,9.15,5.525,13.984,6.906,6.215,5.179,6.043,6.388,6.906,11.049,8.46,4.144,2.417,6.733,2.59,3.28,11.049,6.906,9.323,4.144,5.697,7.596,8.632,8.114,0,0,23.48,5.87,9.323,3.626,6.733,0,0,13.121,2.935,4.489,3.626,2.935,0,0.173,7.942,1.726,2.072,2.762,5.179,0,0,15.711,4.144,5.352,5.525,8.46,0,0.518,15.365,6.906,8.287,6.906,8.287,0.173,3.798,18.991,6.215,9.841,16.574,11.049,0,0,35.738,13.639,21.753,25.206,27.796,0.691,1.381,64.915,26.933,22.789,28.832,29.005,18.818,23.48,21.408,20.545,15.538,20.2,12.431,19.336,13.466,18.3,14.502,9.841,15.538,12.603,13.639,19.336,16.229,17.092,19.164,31.076,30.04,32.63,25.379,39.709,42.126,43.507,54.729,50.585,59.218,58.354,59.908,58.527,0,142.088,78.554,101.861,81.489,72.684,84.079,96.854,97.2,117.572,107.213,73.202,75.101,68.195,92.883,69.576,92.538,64.052,65.433,65.26,55.592,57.491,77.173,83.388,76.655,58.7,67.159,50.067,85.114,74.583,72.511,86.496,78.209,78.036,91.848,108.767,131.729,148.303,136.218,163.15,182.314,129.312,175.581,148.475,205.621,194.572,163.668,162.632,233.59,161.597,211.146,246.366,181.278,154.173,133.11,184.041,171.61,174.718,179.034,186.112,182.832,206.312,210.628,217.016,223.922,217.016,219.951,146.922,201.823,236.007,204.24,205.621,228.411,282.794,172.301,195.09,253.444,273.816,277.442,276.751,365.319,301.958,353.233,372.052,442.491,540.727,531.059,614.101,456.648,576.119,516.902,637.754,696.799],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.345,0.518,0.518,0.863,1.726,1.726,3.97,3.97,5.869,15.192,44.887,75.618,104.623,136.908,140.189,146.922,154.691,161.078,147.094,134.836,124.304,106.349,117.053,120.333,135.526,144.504,156.589,168.329,177.652,197.506,214.252,253.27,271.398,295.396,331.997,357.204,378.958,398.985,433.515,441.63,438.522,421.43,387.591,362.557,337.005,316.115,277.96,254.998,248.265,245.675,239.805,231.691,237.906,242.049,240.84,230.308,237.387,230.654,227.201,230.999,227.028,215.461,213.735,206.657,186.112,189.047,193.882,187.667,185.596,183.006,174.028,176.445,170.92,159.007,146.058,133.8,122.232,110.492,104.968,93.055,91.674,90.811,88.912,89.257,85.977,86.841,79.589,79.589,75.618,68.54,71.302,69.921,65.95,58.698,60.08,59.39,57.146,62.67,57.146,54.384,50.586,52.14,48.687,45.579,49.722,45.579,46.442,46.442,49.722,50.585,56.627,61.461,50.412,43.506,57.663,59.389,63.015,59.045,57.146,49.032,49.032,62.153,41.608,40.227,34.53,33.839,27.106,27.279,35.221,23.826,22.963,21.236,22.789,19.854,19.854,35.392,31.594,35.22,38.673,44.371,39.192,39.71,55.075,46.27,50.413,51.967,54.729,46.442,50.24,68.713,59.563,62.498,70.785,74.928,66.641,66.468,98.408,93.056,108.594,123.959,135.181,124.823,126.204,191.119,182.314,191.464,198.543,202.342,193.364,216.153,236.18,191.81,180.415,177.826,161.425,151.756,146.404,141.224,134.318,123.614,123.614,116.017,117.225,117.225,119.988,118.78,123.442,144.677,159.179,179.206,190.946,211.319,237.216,263.631,299.196,318.705,347.883,373.607,408.136,426.954,384.828,483.409,507.234,558.51,580.781,595.111,619.282,657.609,754.809,730.293,758.952,730.293,723.905,719.416,728.22,700.942,696.28,642.76,600.98,593.038,573.529,562.825,547.115,560.927,545.044,539.692,541.418,526.225,555.747,572.839,568.177,571.285,572.839,592.175,616.864,675.564,722.179,795.899,859.606,936.26,1040.365,1091.641,1175.374,1215.082,1288.974,1335.243,1362.693,1362.175,1413.451,1445.736,1481.301,1579.192,1554.849,1514.45,1483.892,1505.301,1443.321,1456.442,1424.33,1364.076,1365.63,1417.769,1495.287,1528.262,1580.574,1622.872,1663.789,1624.599,1643.59,1673.285,1666.897,1655.502,1659.991,1725.769,1678.119,1726.287,1777.908,1815.717,1888.919,1960.049,2096.957,2116.121,2297.053,2474.015,2663.062,2929.973,3183.59,3520.94,3612.269,3886.43,4050.099,4315.801,4570.109],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.247,0.247,0.567,0.518,0.814,2.17,6.363,10.679,14.946,19.238,20.027,20.668,20.742,18.769,16.574,14.996,13.146,14.404,15.76,15.76,17.092,18.399,19.682,21.285,23.332,25.897,29.177,32.581,35.22,38.229,43.063,46.935,49.253,52.287,54.926,56.899,55.666,51.005,47.404,44.592,40.399,35.516,31.545,30.682,30.928,30.731,29.868,29.547,29.226,30.386,29.522,28.117,29.744,29.424,29.226,28.561,27.081,26.76,27.155,23.726,23.381,23.973,23.924,22.937,22.814,22.37,22.493,22.345,20.791,18.991,17.98,15.538,14.132,13.294,12.283,11.222,11.173,11.099,11.567,10.827,10.63,10.704,10.359,9.496,9.002,8.188,9.002,8.534,7.646,7.72,7.572,7.177,7.374,6.955,7.177,6.881,6.487,6.585,6.043,5.525,5.525,5.303,6.043,6.289,6.141,6.857,7.621,7.202,6.215,4.883,7.646,7.67,7.917,7.202,7.004,7.004,7.004,5.525,5.105,4.415,4.415,3.872,3.872,3.897,3.157,2.984,2.639,2.516,2.836,2.836,2.812,3.922,4.267,4.735,5.13,5.599,5.599,5.673,5.623,6.018,6.437,6.635,6.61,6.635,7.103,7.621,7.522,7.744,9.126,9.52,9.496,8.953,11.345,12.406,14.108,15.341,17.733,17.832,18.029,22.197,24.096,24.244,24.762,24.935,27.525,30.682,24.466,23.554,22.518,21.285,18.917,18.991,17.561,17.117,16.253,15.439,14.774,14.798,13.984,14.823,14.527,14.897,16.229,18.448,20.939,23.652,24.516,27.87,31.446,34.924,38.303,41.238,45.036,49.747,52.632,54.975,48.76,61.24,65.235,71.327,74.632,76.457,80.108,93.944,87.531,93.105,93.87,92.686,93.031,90.762,90.195,86.249,82.673,76.507,75.397,73.991,72.191,67.135,68.22,66.913,68.713,67.751,68.022,67.233,71.179,70.809,69.256,70.661,73.448,75.002,80.971,84.35,92.514,103.341,110.444,122.579,137.475,142.827,152.372,154.765,162.953,171.289,171.363,168.552,183.449,181.451,190.404,196.224,194.325,192.969,188.751,181.673,183.103,177.899,168.28,168.971,173.065,183.523,187.321,193.807,200.836,206.263,211.097,205.967,205.325,208.951,207.126,204.511,206.139,215.117,218.742,217.78,220.271,230.211,240.471,247.377,259.166,277.689,300.281,317.224,341.321,378.933,415.263,450.803,472.902,504.743,525.435,553.33,575.626]},{"iso":"DJI","continent":"Africa","population":988002,"name":"Djibouti","population_density":41.285,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,3,3,11,11,12,14,18,18,30,33,40,49,50,59,90,90,135,135,150,187,214,298,363,435,591,732,732,846,846,945,974,986,999,1008,1023,1035,1072,1077,1089,1097,1112,1112,1116,1120,1124,1133,1135,1189,1210,1227,1256,1268,1284,1309,1331,1401,1518,1618,1828,2047,2270,2270,2270,2468,2468,2697,2914,2914,3194,3354,3569,3779,3935,4054,4123,4169,4207,4278,4331,4373,4398,4441,4449,4465,4501,4539,4545,4557,4565,4565,4582,4599,4617,4630,4635,4643,4643,4643,4656,4682,4704,4715,4736,4736,4792,4822,4878,4889,4955,4968,4968,4972,4977,4979,4985,4993,5003,5003,5011,5020,5027,5030,5031,5039,5039,5050,5059,5068,5081,5081,5084,5084,5161,5240,5248,5330,5330,5338,5338,5344,5347,5348,5358,5358,5367,5367,5369,5372,5374,5374,5374,5382,5382,5382,5383,5383,5383,5383,5383,5385,5385,5387,5387,5387,5387,5387,5387,5388,5388,5388,5391,5394,5394,5394,5395,5396,5396,5399,5399,5403,5403,5403,5404,5407,5407,5407,5409,5409,5409,5410,5416,5416,5417,5417,5418,5419,5421,5423,5423,5423,5423,5423,5423,5426,5428,5440,5443,5449,5452,5459,5469,5499,5512,5522,5528,5530,5536,5541,5544,5555,5558,5559,5561,5563,5573,5575,5580,5599,5604,5605,5608,5627,5633,5635,5641,5641,5645,5649,5655,5656,5658,5658,5660,5661,5668,5668,5669,5670,5676,5676,5676,5677,5679,5680,5682,5689,5690,5692,5701,5708,5714,5717,5717,5721,5725,5728,5733,5749,5759,5770],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.012,1.012,1.012,1.012,1.012,3.036,3.036,11.134,11.134,12.146,14.17,18.219,18.219,30.364,33.401,40.486,49.595,50.607,59.716,91.093,91.093,136.639,136.639,151.822,189.271,216.599,301.619,367.408,440.283,598.177,740.889,740.889,856.274,856.274,956.476,985.828,997.974,1011.132,1020.241,1035.423,1047.569,1085.018,1090.079,1102.224,1110.322,1125.504,1125.504,1129.552,1133.601,1137.65,1146.759,1148.783,1203.439,1224.694,1241.9,1271.252,1283.398,1299.593,1324.896,1347.163,1418.013,1536.434,1637.649,1850.199,2071.858,2297.566,2297.566,2297.566,2497.971,2497.971,2729.752,2949.387,2949.387,3232.787,3394.73,3612.341,3824.891,3982.785,4103.231,4173.068,4219.627,4258.089,4329.951,4383.594,4426.104,4451.408,4494.93,4503.027,4519.222,4555.659,4594.12,4600.193,4612.339,4620.436,4620.436,4637.642,4654.849,4673.067,4686.225,4691.286,4699.383,4699.383,4699.383,4712.541,4738.857,4761.124,4772.258,4793.513,4793.513,4850.193,4880.557,4937.237,4948.371,5015.172,5028.33,5028.33,5032.378,5037.439,5039.463,5045.536,5053.633,5063.755,5063.755,5071.852,5080.961,5088.046,5091.083,5092.095,5100.192,5100.192,5111.326,5120.435,5129.544,5142.702,5142.702,5145.739,5145.739,5223.674,5303.633,5311.73,5394.726,5394.726,5402.823,5402.823,5408.896,5411.932,5412.945,5423.066,5423.066,5432.175,5432.175,5434.2,5437.236,5439.26,5439.26,5439.26,5447.357,5447.357,5447.357,5448.37,5448.37,5448.37,5448.37,5448.37,5450.394,5450.394,5452.418,5452.418,5452.418,5452.418,5452.418,5452.418,5453.43,5453.43,5453.43,5456.467,5459.503,5459.503,5459.503,5460.515,5461.527,5461.527,5464.564,5464.564,5468.612,5468.612,5468.612,5469.625,5472.661,5472.661,5472.661,5474.685,5474.685,5474.685,5475.697,5481.77,5481.77,5482.782,5482.782,5483.795,5484.807,5486.831,5488.855,5488.855,5488.855,5488.855,5488.855,5488.855,5491.892,5493.916,5506.062,5509.098,5515.171,5518.207,5525.292,5535.414,5565.778,5578.936,5589.058,5595.13,5597.155,5603.228,5608.288,5611.325,5622.458,5625.495,5626.507,5628.531,5630.555,5640.677,5642.701,5647.762,5666.993,5672.053,5673.065,5676.102,5695.333,5701.405,5703.43,5709.503,5709.503,5713.551,5717.6,5723.673,5724.685,5726.709,5726.709,5728.733,5729.745,5736.83,5736.83,5737.843,5738.855,5744.928,5744.928,5744.928,5745.94,5747.964,5748.976,5751.001,5758.086,5759.098,5761.122,5770.231,5777.316,5783.389,5786.426,5786.426,5790.474,5794.523,5797.559,5802.62,5818.814,5828.936,5840.069],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2.024,0,8.097,0,1.012,2.024,4.049,0,12.146,3.036,7.085,9.109,1.012,9.109,31.376,0,45.546,0,15.182,37.449,27.328,85.02,65.789,72.874,157.894,142.712,0,115.384,0,100.202,29.352,12.146,13.158,9.109,15.182,12.146,37.449,5.061,12.146,8.097,15.182,0,4.049,4.049,4.049,9.109,2.024,54.656,21.255,17.206,29.352,12.146,16.194,25.304,22.267,70.85,118.421,101.214,212.55,221.659,225.708,0,0,200.404,0,231.781,219.635,0,283.4,161.943,217.611,212.55,157.894,120.445,69.838,46.559,38.461,71.862,53.644,42.51,25.304,43.522,8.097,16.194,36.437,38.461,6.073,12.146,8.097,0,17.206,17.206,18.219,13.158,5.061,8.097,0,0,13.158,26.316,22.267,11.134,21.255,0,56.68,30.364,56.68,11.134,66.801,13.158,0,4.049,5.061,2.024,6.073,8.097,10.121,0,8.097,9.109,7.085,3.036,1.012,8.097,0,11.134,9.109,9.109,13.158,0,3.036,0,77.935,79.959,8.097,82.996,0,8.097,0,6.073,3.036,1.012,10.121,0,9.109,0,2.024,3.036,2.024,0,0,8.097,0,0,1.012,0,0,0,0,2.024,0,2.024,0,0,0,0,0,1.012,0,0,3.036,3.036,0,0,1.012,1.012,0,3.036,0,4.049,0,0,1.012,3.036,0,0,2.024,0,0,1.012,6.073,0,1.012,0,1.012,1.012,2.024,2.024,0,0,0,0,0,3.036,2.024,12.146,3.036,6.073,3.036,7.085,10.121,30.364,13.158,10.121,6.073,2.024,6.073,5.061,3.036,11.134,3.036,1.012,2.024,2.024,10.121,2.024,5.061,19.231,5.061,1.012,3.036,19.231,6.073,2.024,6.073,0,4.049,4.049,6.073,1.012,2.024,0,2.024,1.012,7.085,0,1.012,1.012,6.073,0,0,1.012,2.024,1.012,2.024,7.085,1.012,2.024,9.109,7.085,6.073,3.036,0,4.049,4.049,3.036,5.061,16.194,10.121,11.134],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2.024,2.024,10.121,10.121,11.133,13.157,17.206,17.206,27.328,30.364,29.352,38.461,38.461,45.546,72.873,72.873,106.273,103.237,111.334,139.674,165.99,241.901,276.314,349.188,461.536,604.248,589.066,667.001,639.673,654.855,618.418,557.69,412.954,279.351,294.533,191.295,228.744,133.603,116.397,112.348,114.372,105.263,94.13,86.033,52.633,56.681,46.559,93.118,99.191,116.397,141.7,149.797,161.942,178.137,198.38,214.574,311.74,395.748,578.946,788.459,997.973,972.669,950.402,1079.956,961.535,1092.102,1099.187,877.528,935.22,1097.163,1314.774,1326.92,1484.814,1373.478,1223.681,1270.24,1025.301,935.22,771.253,601.213,468.623,391.7,329.959,299.594,297.57,264.169,216.598,186.234,169.027,125.505,134.614,135.626,117.408,92.105,91.093,87.044,78.947,78.947,74.899,84.009,88.057,86.033,102.227,94.13,150.81,181.174,224.696,209.514,254.048,256.072,234.817,238.866,187.247,158.907,108.3,105.263,48.583,35.425,43.522,48.582,50.606,51.618,46.557,46.557,36.436,47.57,48.582,48.582,54.655,51.619,53.643,45.546,123.481,192.306,191.294,265.181,252.023,260.12,257.084,263.157,188.258,109.311,111.335,28.339,37.448,29.351,31.375,28.338,27.326,26.314,16.193,24.29,15.181,15.181,14.169,11.133,9.109,9.109,9.109,3.036,3.036,5.06,4.048,4.048,4.048,4.048,4.048,3.036,3.036,1.012,4.048,7.084,7.084,7.084,8.096,8.096,8.096,11.132,8.096,9.109,9.109,9.109,9.109,11.133,11.133,8.097,10.121,6.072,6.072,7.084,12.145,9.109,10.121,10.121,9.109,10.121,12.145,13.157,7.084,7.084,6.072,6.072,5.06,7.084,7.084,17.206,20.242,26.315,29.351,36.436,46.557,73.885,85.019,82.994,86.031,81.982,85.019,82.995,75.91,56.68,46.558,37.449,33.4,33.4,37.448,34.411,36.436,44.533,46.558,46.558,47.57,64.777,60.729,60.729,61.741,42.51,41.498,44.535,47.572,29.353,25.304,23.28,19.231,20.243,23.279,19.23,14.169,14.169,18.218,18.218,16.194,16.194,11.133,12.145,13.157,19.23,14.169,16.193,25.302,31.375,35.424,37.448,35.424,32.388,35.425,36.437,32.389,41.498,45.546,53.644],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.289,1.446,1.446,1.591,1.88,2.458,2.169,3.904,3.181,4.193,5.35,5.205,5.928,10.411,8.676,14.748,13.736,14.604,19.809,22.412,30.075,39.474,43.378,65.934,84.153,78.803,91.382,79.236,84.153,77.935,57.114,38.606,39.907,25.593,27.328,18.363,14.893,14.893,14.17,15.038,12.869,11.712,6.94,6.796,6.362,5.494,11.134,14.17,16.05,19.665,20.821,21.833,25.159,20.532,27.617,42.076,52.342,80.971,110.324,138.953,135.772,125.65,137.362,122.903,125.65,125.361,93.117,133.603,156.738,159.196,189.56,179.005,164.835,174.812,140.977,123.337,102.516,79.815,63.331,49.74,45.98,40.486,37.305,32.244,30.075,24.87,22.99,17.929,16.773,16.917,14.17,11.278,12.29,11.278,11.278,11.278,8.82,8.242,9.398,10.7,11.567,13.447,13.447,21.544,24.002,28.34,26.75,34.702,33.545,33.545,26.027,22.412,14.604,13.881,5.494,5.061,5.061,5.639,6.217,6.94,6.507,5.494,5.205,5.205,5.639,5.639,5.928,7.374,7.23,6.507,6.507,16.05,26.171,26.027,36.003,36.003,36.726,36.726,26.46,15.471,14.459,4.049,4.049,4.193,4.193,3.615,3.615,3.759,2.313,2.313,2.169,2.169,1.88,1.591,1.301,1.301,1.301,0.145,0.434,0.434,0.578,0.578,0.578,0.578,0.578,0.289,0.434,0.145,0.145,0.578,1.012,1.012,1.012,1.012,1.157,1.157,1.157,0.723,1.301,1.301,1.157,1.157,1.591,1.157,1.157,0.868,0.868,0.868,0.868,1.301,1.301,1.446,1.157,1.301,1.446,1.591,1.012,1.012,0.868,0.868,0.723,0.578,0.723,0.723,2.458,2.892,3.759,4.193,5.205,6.217,10.266,10.411,11.423,11.423,11.278,11.134,10.411,6.507,6.217,5.205,4.482,4.482,3.904,4.627,4.482,3.615,5.928,6.507,6.362,6.507,7.808,8.386,7.953,6.073,5.35,5.784,5.928,4.049,3.326,3.326,2.458,2.747,2.313,2.747,1.88,1.88,1.735,2.603,2.313,2.169,1.301,1.591,1.591,1.735,1.88,2.024,2.313,3.47,4.193,4.916,5.061,4.049,4.482,4.772,3.904,3.615,5.061,6.073,7.663]},{"iso":"DMA","continent":"North America","population":71991,"name":"Dominica","population_density":98.567,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,7,11,11,11,11,11,12,12,12,12,14,14,15,15,15,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,19,19,20,20,20,20,20,20,20,20,20,20,20,20,22,22,22,22,22,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,30,30,30,30,31,31,31,31,31,31,31,31,32,32,32,32,32,32,33,33,33,33,33,33,33,33,37,38,38,38,38,38,38,42,50,50,50,50,50,57,57,63,63,63,63,68,68,68,68,68,68,68,68,68,68,72,72,77,77,77,77,80,85,85,85,85,85,85,85,85,85,85,85,85,85,87,87,88,88,88,88,88],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13.891,27.781,27.781,97.234,152.797,152.797,152.797,152.797,152.797,166.688,166.688,166.688,166.688,194.469,194.469,208.359,208.359,208.359,208.359,222.25,222.25,222.25,222.25,222.25,222.25,222.25,222.25,222.25,222.25,222.25,222.25,222.25,222.25,222.25,222.25,222.25,222.25,222.25,222.25,222.25,222.25,222.25,222.25,222.25,222.25,222.25,222.25,222.25,222.25,222.25,222.25,222.25,222.25,222.25,222.25,222.25,222.25,222.25,222.25,222.25,222.25,222.25,222.25,222.25,222.25,222.25,222.25,222.25,222.25,222.25,222.25,222.25,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,250.031,263.922,263.922,277.813,277.813,277.813,277.813,277.813,277.813,277.813,277.813,277.813,277.813,277.813,277.813,305.594,305.594,305.594,305.594,305.594,333.375,333.375,333.375,333.375,333.375,333.375,333.375,333.375,333.375,333.375,333.375,333.375,333.375,333.375,333.375,333.375,333.375,416.719,416.719,416.719,416.719,430.609,430.609,430.609,430.609,430.609,430.609,430.609,430.609,444.5,444.5,444.5,444.5,444.5,444.5,458.391,458.391,458.391,458.391,458.391,458.391,458.391,458.391,513.953,527.844,527.844,527.844,527.844,527.844,527.844,583.406,694.531,694.531,694.531,694.531,694.531,791.766,791.766,875.109,875.109,875.109,875.109,944.563,944.563,944.563,944.563,944.563,944.563,944.563,944.563,944.563,944.563,1000.125,1000.125,1069.578,1069.578,1069.578,1069.578,1111.25,1180.703,1180.703,1180.703,1180.703,1180.703,1180.703,1180.703,1180.703,1180.703,1180.703,1180.703,1180.703,1180.703,1208.484,1208.484,1222.375,1222.375,1222.375,1222.375,1222.375],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13.891,0,69.453,55.563,0,0,0,0,13.891,0,0,0,27.781,0,13.891,0,0,0,13.891,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27.781,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13.891,0,13.891,0,0,0,0,0,0,0,0,0,0,0,27.781,0,0,0,0,27.781,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83.344,0,0,0,13.891,0,0,0,0,0,0,0,13.891,0,0,0,0,0,13.891,0,0,0,0,0,0,0,55.563,13.891,0,0,0,0,0,55.563,111.125,0,0,0,0,97.234,0,83.344,0,0,0,69.453,0,0,0,0,0,0,0,0,0,55.563,0,69.453,0,0,0,41.672,69.453,0,0,0,0,0,0,0,0,0,0,0,0,27.781,0,13.891,0,0,0,0],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13.891,13.891,83.344,138.907,138.907,138.907,138.907,138.907,138.907,138.907,69.454,13.891,41.672,41.672,55.563,55.563,41.672,41.672,55.563,55.563,27.782,27.782,13.891,13.891,13.891,13.891,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27.781,27.781,27.781,27.781,27.781,27.781,27.781,27.781,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13.891,13.891,27.782,27.782,27.782,27.782,27.782,27.782,13.891,13.891,0,0,0,0,27.781,27.781,27.781,27.781,27.781,55.562,55.562,55.562,27.781,27.781,27.781,27.781,27.781,0,0,0,0,0,0,0,0,0,83.344,83.344,83.344,83.344,97.235,97.235,97.235,97.235,13.891,13.891,13.891,13.891,13.891,13.891,13.891,13.891,13.891,13.891,27.782,27.782,13.891,13.891,13.891,13.891,13.891,13.891,55.563,69.454,69.454,69.454,69.454,69.454,69.454,125.017,180.579,166.688,166.688,166.688,166.688,263.922,263.922,291.703,180.578,180.578,180.578,250.031,250.031,152.797,152.797,69.453,69.453,69.453,69.453,0,0,55.563,55.563,125.016,125.016,125.016,125.016,166.688,236.141,180.578,180.578,111.125,111.125,111.125,111.125,69.453,0,0,0,0,0,27.781,27.781,41.672,41.672,41.672,41.672,41.672],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19.844,19.844,17.859,19.844,9.922,1.984,1.984,5.953,5.953,7.938,5.953,5.953,5.953,7.938,3.969,3.969,1.984,1.984,1.984,1.984,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.969,3.969,3.969,3.969,3.969,3.969,3.969,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.984,1.984,3.969,3.969,3.969,3.969,3.969,1.984,1.984,0,0,0,0,0,3.969,3.969,3.969,3.969,3.969,7.938,7.938,3.969,3.969,3.969,3.969,3.969,0,0,0,0,0,0,0,0,0,0,11.906,11.906,11.906,11.906,13.891,13.891,13.891,1.984,1.984,1.984,1.984,0,1.984,1.984,1.984,1.984,1.984,1.984,3.969,1.984,1.984,1.984,1.984,1.984,1.984,0,7.938,9.922,9.922,9.922,9.922,9.922,9.922,9.922,23.813,23.813,23.813,23.813,23.813,37.703,29.766,25.797,25.797,25.797,25.797,35.719,21.828,21.828,9.922,9.922,9.922,9.922,0,0,0,7.938,7.938,17.859,17.859,17.859,17.859,23.813,25.797,25.797,15.875,15.875,15.875,15.875,9.922,0,0,0,0,0,0,3.969,3.969,5.953,5.953,5.953,5.953,5.953]},{"iso":"DOM","continent":"North America","population":10847904,"name":"Dominican Republic","population_density":222.873,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,2,2,5,5,5,5,5,5,11,11,11,21,21,34,72,112,202,245,312,392,488,581,719,859,901,1109,1284,1380,1488,1488,1745,1828,1956,2111,2349,2620,2759,2967,3167,3286,3614,3755,4126,4335,4680,4964,5044,5300,5543,5749,5926,6135,6293,6416,6652,6972,7288,7578,7954,8235,8480,8807,9095,9376,9882,10347,10634,10900,11196,11320,11739,12110,12314,12725,13223,13477,13657,13989,14422,14801,15073,15264,15723,16068,16531,16908,17285,17572,17752,18040,18319,18708,19195,19600,20126,20415,20808,21437,22008,22572,22962,23271,23686,24105,24645,25068,25778,26677,27370,27936,28631,29141,29764,30619,31373,31816,32568,33387,34197,35148,36184,37425,38128,38430,39588,40790,41915,43114,44532,45506,46305,47671,48743,50113,51519,52855,53956,54797,56043,57615,59077,60896,62908,64156,64690,66182,67915,69649,71415,72243,73117,74295,75660,76536,77709,78778,79732,80499,81094,82224,83134,84488,85545,86309,86737,87123,88127,89010,89867,90561,91161,91608,92217,92557,92964,93390,93732,94241,94715,94979,95627,96629,96629,98776,99333,99898,100131,100937,101716,102232,103092,103660,104110,104803,105521,106136,106732,107700,108289,108783,109269,109737,110122,110597,110957,111386,111666,111900,112209,112728,113350,113926,114480,115054,115371,116148,116872,117457,118014,118477,118843,119008,119662,120066,120450,120925,121347,121667,121973,122398,122873,122873,124018,124527,124843,125008,125570,125913,126332,127018,127332,127591,127848,128278,128824,129300,129645,130182,130603,131131,131265,131636,132554,133225,133724,134203,134697,135157,136183,136784,137770,138410,138829,139111,139396,140922,141777,142653,143473,143988,144302,145197,146009,146680,147655,148453,149138,149630,150161,151721,152452,153585,154692,155184,155797,156585,157305],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.092,0.092,0.092,0.092,0.092,0.184,0.184,0.461,0.461,0.461,0.461,0.461,0.461,1.014,1.014,1.014,1.936,1.936,3.134,6.637,10.325,18.621,22.585,28.761,36.136,44.986,53.559,66.28,79.186,83.058,102.232,118.364,127.214,137.169,137.169,160.861,168.512,180.311,194.6,216.54,241.521,254.335,273.509,291.946,302.916,333.152,346.15,380.35,399.616,431.42,457.6,464.975,488.574,510.974,529.964,546.281,565.547,580.112,591.451,613.206,642.705,671.835,698.568,733.229,759.133,781.718,811.862,838.411,864.314,910.959,953.825,980.282,1004.802,1032.089,1043.52,1082.145,1116.345,1135.15,1173.038,1218.945,1242.36,1258.953,1289.558,1329.473,1364.411,1389.485,1407.092,1449.404,1481.208,1523.889,1558.642,1593.395,1619.852,1636.445,1662.994,1688.713,1724.573,1769.466,1806.801,1855.289,1881.93,1918.159,1976.142,2028.779,2080.771,2116.722,2145.207,2183.463,2222.088,2271.867,2310.861,2376.312,2459.185,2523.068,2575.244,2639.312,2686.325,2743.756,2822.573,2892.079,2932.917,3002.239,3077.737,3152.406,3240.073,3335.575,3449.975,3514.78,3542.62,3649.369,3760.173,3863.88,3974.408,4105.125,4194.912,4268.567,4394.489,4493.31,4619.602,4749.212,4872.37,4973.864,5051.391,5166.251,5311.164,5445.937,5613.619,5799.093,5914.138,5963.364,6100.902,6260.656,6420.503,6583.299,6659.628,6740.196,6848.788,6974.619,7055.372,7163.504,7262.048,7349.991,7420.696,7475.546,7579.713,7663.6,7788.417,7885.855,7956.284,7995.738,8031.321,8123.874,8205.272,8284.273,8348.249,8403.559,8444.765,8500.905,8532.247,8569.766,8609.036,8640.563,8687.485,8731.18,8755.516,8815.251,8907.619,8907.619,9105.538,9156.884,9208.968,9230.447,9304.747,9376.558,9424.125,9503.403,9555.763,9597.246,9661.129,9727.317,9784.01,9838.951,9928.185,9982.481,10028.02,10072.821,10115.963,10151.454,10195.241,10228.428,10267.974,10293.786,10315.357,10343.842,10391.685,10449.023,10502.121,10553.191,10606.104,10635.326,10706.953,10773.694,10827.622,10878.968,10921.649,10955.388,10970.599,11030.887,11068.129,11103.527,11147.315,11186.216,11215.715,11243.923,11283.101,11326.889,11326.889,11432.439,11479.36,11508.49,11523.701,11575.508,11607.127,11645.752,11708.99,11737.936,11761.811,11785.503,11825.142,11875.474,11919.353,11951.157,12000.659,12039.469,12088.142,12100.494,12134.694,12219.319,12281.174,12327.174,12371.33,12416.869,12459.273,12553.854,12609.256,12700.149,12759.147,12797.772,12823.768,12850.04,12990.712,13069.529,13150.282,13225.873,13273.348,13302.293,13384.798,13459.651,13521.506,13611.385,13684.948,13748.094,13793.448,13842.398,13986.204,14053.59,14158.035,14260.082,14305.436,14361.945,14434.586,14500.958],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.092,0,0.277,0,0,0,0,0,0.553,0,0,0.922,0,1.198,3.503,3.687,8.297,3.964,6.176,7.375,8.85,8.573,12.721,12.906,3.872,19.174,16.132,8.85,9.956,0,23.691,7.651,11.8,14.288,21.94,24.982,12.814,19.174,18.437,10.97,30.236,12.998,34.2,19.266,31.803,26.18,7.375,23.599,22.401,18.99,16.317,19.266,14.565,11.339,21.755,29.499,29.13,26.733,34.661,25.904,22.585,30.144,26.549,25.904,46.645,42.865,26.457,24.521,27.286,11.431,38.625,34.2,18.805,37.888,45.907,23.415,16.593,30.605,39.916,34.938,25.074,17.607,42.312,31.803,42.681,34.753,34.753,26.457,16.593,26.549,25.719,35.859,44.893,37.334,48.489,26.641,36.228,57.984,52.637,51.992,35.952,28.485,38.256,38.625,49.779,38.994,65.45,82.873,63.883,52.176,64.068,47.014,57.43,78.817,69.507,40.837,69.322,75.498,74.669,87.667,95.502,114.4,64.805,27.839,106.749,110.805,103.707,110.528,130.716,89.787,73.655,125.923,98.821,126.292,129.61,123.157,101.494,77.526,114.861,144.913,134.773,167.682,185.474,115.045,49.226,137.538,159.754,159.847,162.796,76.328,80.569,108.592,125.831,80.753,108.131,98.544,87.943,70.705,54.849,104.168,83.887,124.817,97.438,70.428,39.455,35.583,92.552,81.398,79.001,63.975,55.31,41.206,56.14,31.342,37.519,39.27,31.527,46.922,43.695,24.336,59.735,92.368,0,197.918,51.346,52.084,21.479,74.3,71.811,47.567,79.278,52.36,41.483,63.883,66.188,56.693,54.941,89.234,54.296,45.539,44.801,43.142,35.491,43.787,33.186,39.547,25.811,21.571,28.485,47.843,57.338,53.098,51.07,52.913,29.222,71.627,66.741,53.927,51.346,42.681,33.739,15.21,60.288,37.242,35.399,43.787,38.902,29.499,28.208,39.178,43.787,0,105.55,46.922,29.13,15.21,51.807,31.619,38.625,63.238,28.946,23.876,23.691,39.639,50.332,43.879,31.803,49.503,38.809,48.673,12.353,34.2,84.625,61.855,46,44.156,45.539,42.405,94.58,55.402,90.893,58.998,38.625,25.996,26.272,140.672,78.817,80.753,75.591,47.475,28.946,82.504,74.853,61.855,89.879,73.563,63.146,45.354,48.95,143.807,67.386,104.444,102.047,45.354,56.509,72.641,66.372],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.092,0.092,0.369,0.369,0.369,0.369,0.369,0.369,0.83,0.83,0.553,1.475,1.475,2.673,6.176,9.863,17.607,21.571,27.747,34.2,43.05,50.425,59.643,68.862,64.437,79.647,89.603,91.078,92.184,83.611,94.581,89.326,97.254,92.368,98.176,114.308,117.166,136.34,131.086,134.405,152.841,151.551,163.811,158.095,177.084,184.09,173.028,185.657,177.822,183.814,165.931,165.931,148.693,133.852,148.232,154.132,160.861,168.604,186.948,193.586,201.606,220.411,225.205,221.61,239.125,255.257,247.053,245.67,250.371,231.658,243.734,252.03,224.19,219.213,238.663,237.557,226.864,246.038,247.329,248.067,254.336,234.055,230.46,238.848,264.936,269.084,263.921,255.44,246.959,255.901,239.308,243.364,245.576,248.157,261.893,262.077,281.712,313.147,340.065,356.198,347.257,338.408,328.175,340.159,353.71,334.72,347.533,378.414,406.345,430.036,455.848,464.237,471.888,511.711,515.768,473.732,479.171,502.493,513.094,553.747,591.819,627.402,622.7,609.702,647.129,682.436,711.474,734.335,769.549,744.936,753.786,851.87,843.942,859.429,885.332,897.961,868.739,856.478,897.684,916.674,952.626,994.016,1049.88,1041.768,989.5,1049.512,1094.405,1109.339,1137.362,1046.008,941.103,934.65,1011.255,954.47,902.847,841.544,766.691,761.068,735.348,730.924,688.98,733.044,722.351,694.235,645.747,610.625,648.328,625.558,620.672,559.83,517.702,488.48,505.165,500.924,445.891,403.763,356.289,339.236,327.621,310.751,314.346,375.372,337.853,496.501,516.32,521.482,499.266,549.23,561.306,516.505,595.783,450.225,440.362,452.161,496.87,479.263,462.393,504.06,479.078,472.257,475.575,454.834,424.137,411.231,389.476,339.789,311.304,287.336,271.02,275.721,297.568,306.879,324.763,338.129,341.54,391.596,429.852,435.936,429.944,419.527,402.196,364.493,395.559,361.174,329.832,319.692,307.248,294.066,288.535,312.503,296.002,258.76,328.911,332.046,322.274,307.985,331.584,324.025,318.863,382.101,305.497,282.451,277.012,301.441,299.966,312.226,305.404,291.669,301.532,326.329,314.991,309.552,343.845,361.821,376.018,370.671,377.401,371.133,453.36,474.562,480.83,477.973,470.598,452.438,433.171,531.438,515.675,541.026,525.724,514.201,504.522,561.03,609.611,530.794,541.856,534.666,522.221,520.1,540.104,601.407,593.94,636.529,648.697,620.488,613.851,641.138,658.56],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.013,0.053,0.053,0.053,0.053,0.053,0.04,0.119,0.079,0.079,0.211,0.211,0.382,0.882,1.33,2.515,3.082,3.832,4.886,5.979,6.703,7.994,8.652,8.639,10.496,11.747,11.747,11.944,10.127,11.668,12.208,11.154,10.891,12.761,14.907,16.738,16.093,17.633,17.515,19.793,18.516,19.833,20.755,22.559,23.665,23.151,22.203,23.546,21.373,20.952,19.161,17.502,18.068,17.805,18.819,20.267,21.755,23.955,25.574,27.181,28.379,27.958,27.497,30.342,31.514,31.593,31.869,31.461,29.301,31.119,29.341,25.904,27.537,30.592,30.039,30.776,29.63,30.447,32.752,30.921,26.878,29.578,31.751,33.476,32.738,32.712,32.91,32.765,30.513,29.644,28.669,30.118,30.486,33.634,35.069,36.452,41.061,43.458,44.472,44.275,41.417,43.076,43.419,42.246,40.297,42.22,48.923,53.98,55.969,59.603,59.208,61.842,63.752,61.842,58.55,60.999,62.632,66.583,70.902,73.286,79.699,83.123,77.197,81.662,86.824,89.115,91.262,93.593,97.162,103.707,106.446,104.734,107.96,110.686,109.606,111.279,111.832,110.252,116.836,118.048,123.487,132.389,134.325,130.282,133.522,135.642,139.224,138.526,122.934,118.008,126.489,124.817,113.531,106.143,96.964,98.623,97.214,89.537,86.442,86.89,89.273,89.115,86.613,82.149,79.397,77.737,77.382,70.837,66.056,63.896,64.147,67.083,58.339,52.071,46.395,41.759,40.561,40.916,36.373,40.429,48.265,42.655,66.425,67.057,68.255,67.847,69.928,66.991,73.786,56.838,56.983,55.468,61.526,60.367,58.207,59.261,60.683,60.96,61.539,58.813,55.521,52.492,50.899,42.892,40.785,37.967,34.648,32.554,34.319,36.255,39.099,40.745,44.617,45.71,51.873,54.573,54.085,53.835,52.637,49.898,47.896,46.276,42.062,39.415,38.335,37.795,37.19,39.046,36.031,36.966,31.909,40.732,41.878,41.825,39.968,41.772,40.034,45.552,39.507,36.939,36.189,37.4,35.662,38.335,39.086,34.595,37.532,39.665,43.234,39.336,37.032,42.852,47.145,46.645,47.409,46.961,51.254,59.88,55.705,59.854,61.71,60.92,58.128,55.824,62.408,65.753,64.305,66.675,67.939,68.361,76.394,66.991,64.568,65.872,65.582,67.821,70.165,65.371,75.222,76.012,78.093,82.162,79.62,81.214,84.598,73.536]},{"iso":"ECU","continent":"South America","population":17643060,"name":"Ecuador","population_density":66.939,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,7,10,13,13,13,14,15,15,17,17,17,28,28,37,58,111,199,367,506,789,981,1082,1173,1403,1595,1823,1924,1962,2240,2748,3163,3368,3465,3646,3747,3747,4450,4965,7161,7257,7466,7529,7603,7858,8225,8450,9022,9468,10128,10398,10850,11183,22719,22719,22719,23240,24258,24675,24934,26336,27464,29538,31881,31881,31881,30298,28818,29071,29559,29509,30419,30486,30502,31467,32763,33182,33582,34151,34854,35306,35828,36258,36756,37355,37355,38103,38471,38571,38571,39098,39098,40414,40966,40966,41575,42728,43120,43378,43917,44440,44440,45778,46356,46751,47322,47943,48490,49097,49731,49731,50640,50640,51643,51643,53156,53856,54574,55255,55665,56432,58257,59468,60657,61535,61958,62380,63245,63245,64221,65018,67209,67870,68459,69570,70329,71365,72444,73382,74013,74620,76217,77257,78148,79049,80036,80694,81161,82279,83193,84370,85355,86232,86232,87041,87963,88866,90537,91969,93572,94459,94701,95563,97110,98343,99409,100688,101542,101751,102941,104475,105508,106481,107089,107769,108289,109030,110549,111219,112141,112906,113648,113767,114309,115457,116360,117175,118045,118045,110092,110757,112166,113206,114732,116451,118594,118911,119553,121525,122257,124129,125620,126419,126711,127643,129892,131146,132475,133981,134747,134965,135749,137047,138584,139534,140351,141034,141339,142056,143531,145045,145848,146828,147033,147315,148171,149083,150360,151659,152422,153289,153423,154115,155625,156451,158270,159614,161635,162178,163192,164908,166302,167147,168192,169194,169562,170110,171433,171783,172508,173486,174907,175269,175711,176630,177513,178674,179627,180295,180676,181104,182250,183246,183840,184876,185643,185944,186436,187230,188138,189534,190909,192117,192685,193673,194876,195884,196482,197391,197998,198244,198752,199228,200379,200765,201524,202110,202180,202356,203461,204249],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.34,0.34,0.397,0.567,0.737,0.737,0.737,0.794,0.85,0.85,0.964,0.964,0.964,1.587,1.587,2.097,3.287,6.291,11.279,20.801,28.68,44.72,55.603,61.327,66.485,79.521,90.404,103.327,109.051,111.205,126.962,155.755,179.277,190.897,196.395,206.653,212.378,212.378,252.224,281.414,405.882,411.323,423.169,426.74,430.934,445.388,466.189,478.942,511.363,536.642,574.05,589.354,614.973,633.847,1287.702,1287.702,1287.702,1317.232,1374.932,1398.567,1413.247,1492.712,1556.646,1674.199,1806.999,1806.999,1806.999,1717.276,1633.39,1647.73,1675.39,1672.556,1724.134,1727.932,1728.838,1783.534,1856.991,1880.74,1903.411,1935.662,1975.508,2001.127,2030.713,2055.086,2083.312,2117.263,2117.263,2159.659,2180.517,2186.185,2186.185,2216.055,2216.055,2290.646,2321.933,2321.933,2356.451,2421.802,2444.02,2458.644,2489.194,2518.837,2518.837,2594.675,2627.435,2649.824,2682.188,2717.386,2748.389,2782.794,2818.729,2818.729,2870.25,2870.25,2927.1,2927.1,3012.856,3052.532,3093.228,3131.826,3155.065,3198.538,3301.978,3370.617,3438.009,3487.774,3511.749,3535.668,3584.696,3584.696,3640.015,3685.188,3809.373,3846.838,3880.223,3943.194,3986.213,4044.933,4106.09,4159.256,4195.021,4229.425,4319.942,4378.889,4429.39,4480.459,4536.401,4573.696,4600.166,4663.533,4715.338,4782.05,4837.88,4887.588,4887.588,4933.441,4985.7,5036.881,5131.593,5212.758,5303.615,5353.89,5367.606,5416.464,5504.147,5574.033,5634.453,5706.947,5755.351,5767.197,5834.645,5921.592,5980.142,6035.291,6069.752,6108.294,6137.767,6179.767,6265.863,6303.838,6356.097,6399.457,6441.513,6448.258,6478.978,6544.046,6595.228,6641.422,6690.733,6690.733,6239.961,6277.653,6357.514,6416.461,6502.954,6600.386,6721.85,6739.817,6776.205,6887.977,6929.467,7035.571,7120.08,7165.367,7181.917,7234.743,7362.215,7433.291,7508.618,7593.977,7637.394,7649.75,7694.187,7767.757,7854.873,7908.719,7955.026,7993.738,8011.025,8051.665,8135.267,8221.08,8266.593,8322.139,8333.758,8349.742,8398.26,8449.951,8522.331,8595.958,8639.204,8688.345,8695.941,8735.163,8820.749,8867.566,8970.666,9046.843,9161.393,9192.17,9249.643,9346.905,9425.916,9473.81,9533.04,9589.833,9610.691,9641.751,9716.738,9736.576,9777.669,9833.102,9913.643,9934.161,9959.213,10011.302,10061.35,10127.155,10181.17,10219.032,10240.627,10264.886,10329.841,10386.294,10419.961,10478.681,10522.154,10539.215,10567.101,10612.105,10663.57,10742.694,10820.629,10889.097,10921.291,10977.291,11045.476,11102.609,11136.504,11188.025,11222.43,11236.373,11265.166,11292.145,11357.384,11379.262,11422.282,11455.496,11459.463,11469.439,11532.07,11576.733],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.057,0.17,0.17,0,0,0.057,0.057,0,0.113,0,0,0.623,0,0.51,1.19,3.004,4.988,9.522,7.878,16.04,10.882,5.725,5.158,13.036,10.882,12.923,5.725,2.154,15.757,28.793,23.522,11.619,5.498,10.259,5.725,0,39.846,29.19,124.468,5.441,11.846,3.571,4.194,14.453,20.801,12.753,32.421,25.279,37.408,15.303,25.619,18.874,653.855,0,0,29.53,57.7,23.635,14.68,79.465,63.934,117.553,132.8,0,0,-89.724,-83.886,14.34,27.66,-2.834,51.578,3.798,0.907,54.696,73.457,23.749,22.672,32.251,39.846,25.619,29.587,24.372,28.226,33.951,0,42.396,20.858,5.668,0,29.87,0,74.59,31.287,0,34.518,65.351,22.218,14.623,30.55,29.643,0,75.837,32.761,22.388,32.364,35.198,31.004,34.404,35.935,0,51.522,0,56.85,0,85.756,39.676,40.696,38.599,23.239,43.473,103.44,68.639,67.392,49.765,23.975,23.919,49.028,0,55.319,45.174,124.185,37.465,33.384,62.971,43.02,58.72,61.157,53.165,35.765,34.404,90.517,58.947,50.501,51.068,55.943,37.295,26.469,63.368,51.805,66.712,55.829,49.708,0,45.854,52.259,51.182,94.711,81.165,90.857,50.275,13.716,48.858,87.683,69.886,60.42,72.493,48.404,11.846,67.449,86.946,58.55,55.149,34.461,38.542,29.473,42,86.096,37.975,52.259,43.36,42.056,6.745,30.72,65.068,51.182,46.194,49.311,0,-450.772,37.692,79.861,58.947,86.493,97.432,121.464,17.967,36.388,111.772,41.489,106.104,84.509,45.287,16.55,52.825,127.472,71.076,75.327,85.359,43.417,12.356,44.437,73.57,87.116,53.846,46.307,38.712,17.287,40.639,83.602,85.813,45.514,55.546,11.619,15.984,48.518,51.692,72.38,73.627,43.246,49.141,7.595,39.222,85.586,46.817,103.1,76.177,114.549,30.777,57.473,97.262,79.011,47.894,59.23,56.793,20.858,31.06,74.987,19.838,41.093,55.433,80.542,20.518,25.052,52.088,50.048,65.805,54.016,37.862,21.595,24.259,64.955,56.453,33.668,58.72,43.473,17.061,27.886,45.004,51.465,79.125,77.934,68.469,32.194,55.999,68.185,57.133,33.894,51.522,34.404,13.943,28.793,26.979,65.238,21.878,43.02,33.214,3.968,9.976,62.631,44.663],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.057,0.227,0.397,0.397,0.397,0.454,0.511,0.511,0.567,0.397,0.227,0.85,0.85,1.303,2.436,5.44,10.315,19.837,27.715,43.132,54.014,59.229,63.197,73.229,79.123,82.524,80.371,66.485,71.36,94.428,112.792,111.375,105.991,103.327,103.327,101.173,125.262,125.659,226.605,220.427,226.775,220.087,218.556,233.009,213.964,197.527,105.48,125.318,150.88,162.612,184.037,188.458,821.512,808.759,776.338,780.589,800.881,809.213,798.274,858.865,268.944,386.497,519.297,489.767,432.067,318.708,220.142,155.017,118.743,-1.644,-82.866,-79.068,-78.161,66.259,223.602,233.011,228.023,263.108,251.376,273.197,301.877,271.553,226.322,236.524,213.852,223.997,205.009,185.058,155.471,160.969,132.743,173.382,204.669,162.273,175.933,235.616,257.834,242.587,273.137,228.19,196.903,272.74,270.983,228.02,238.166,258.741,259.195,263.956,299.891,224.054,242.815,220.427,244.913,209.715,264.467,269.739,274.5,313.099,284.816,328.289,374.879,443.518,425.154,435.243,418.522,403.842,429.631,386.158,338.037,314.572,371.365,359.065,368.474,407.526,401.518,460.238,466.076,474.067,385.647,382.586,439.719,435.695,443.176,435.524,430.31,414.44,405.144,434.108,395.396,403.161,408.489,407.129,351.186,359.745,385.535,373.349,416.255,430.708,465.736,466.303,480.019,483.023,518.447,537.151,502.86,494.188,451.735,413.306,467.039,505.127,475.994,461.257,435.298,401.347,382.416,412.57,431.217,382.246,375.955,364.166,371.761,339.964,341.211,364.279,329.365,337.584,334.636,291.276,-201.552,-170.605,-121.464,-127.585,-92.274,-41.036,31.117,49.084,536.244,610.324,571.952,619.109,617.125,564.98,460.066,494.924,586.008,545.312,579.15,558.405,517.313,484.382,512.269,533.014,492.658,475.428,446.408,399.761,373.631,401.914,441.079,453.322,411.72,413.42,378.732,356.004,387.235,398.288,387.066,374.88,372.612,366.207,362.183,385.421,422.489,417.614,448.334,450.884,522.187,503.823,553.701,611.741,605.166,606.243,562.373,542.989,449.298,449.581,467.095,389.671,351.753,359.292,380.604,344.329,348.523,369.551,344.612,390.579,403.502,385.931,326.984,330.725,370.628,374.993,358.613,351.528,340.985,320.184,326.475,347.22,333.73,356.402,400.668,410.417,399.138,438.076,478.375,490.504,472.933,445.33,401.8,347.274,343.873,314.853,311.906,276.651,285.777,267.469,237.033,233.066,266.904,284.588],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.057,0.065,0.073,0.065,0.057,0.032,0.032,0.121,0.113,0.178,0.348,0.761,1.474,2.834,3.87,6.162,7.644,8.291,8.599,9.749,9.943,10.664,9.19,7.943,9.376,12.753,14.251,14.356,13.295,13.943,14.453,12.202,13.781,14.591,30.712,30.704,30.931,30.623,31.222,27.595,26.396,10.437,14.291,16.21,21.044,22.631,24.226,23.951,115.537,110.906,107.294,106.169,112.225,111.942,111.343,29.287,38.421,55.214,69.967,61.724,58.348,43.433,20.097,13.012,0.17,-19.206,-11.838,-11.295,1.652,21.449,29.894,29.336,32.979,30.218,35.368,38.898,35.311,28.299,28.939,30.55,25.943,26.307,25.627,22.21,18.729,18.963,14.113,24.769,23.182,20.202,24.324,33.66,32.566,34.655,28.364,28.129,28.129,34.032,29.376,29.4,31.935,32.599,32.793,37.708,32.008,27.328,31.49,26.866,29.959,25.53,32.866,33.4,39.214,37.368,40.688,38.777,53.554,51.109,55.068,56.364,54.275,54.372,55.165,40.388,38.485,35.311,45.943,47.87,49.222,51.214,57.36,57.845,60.129,49.983,49.74,49.886,53.821,56.097,54.922,53.481,53.878,54.097,52.963,49.084,48.064,50.38,51.06,50.169,44.842,47.611,46.024,45.935,49.935,53.554,59.433,66.615,62.024,61.538,66.752,63.206,60.242,57.619,57.352,57.084,59.74,59.635,58.016,57.262,51.829,50.42,52.939,49.303,49.182,46.242,45.829,47.101,47.603,44.356,42.744,39.74,41.627,40.761,41.611,35.603,-29.757,-28.761,-26.647,-25.538,-19.781,-12.907,4.445,71.408,71.222,75.781,73.287,76.088,74.242,63.36,63.157,65.505,67.748,71.975,67.578,67.7,67.432,66.833,65.635,57.935,60.226,57.157,51.578,50.906,51.611,51.068,52.501,52.315,51.125,52.445,48.574,48.388,49.514,44.955,43.036,47.052,45.295,50.655,49.457,48.129,52.971,49.319,53.53,58.234,67.578,70.89,73.497,75.165,79.764,71.878,69.457,61.206,59.789,56.016,52.833,44.38,43.408,42.866,46.259,46.21,45.352,42.08,46.396,49.927,49.724,43.627,43.781,43.668,45.506,46.421,41.829,42.502,43.303,42.655,43.174,40.323,39.611,46.105,48.85,52.42,54.582,58.599,61.91,62.72,56.258,52.485,47.619,45.012,41.125,35.238,36.396,34.68,33.465,33.295,31.87,29.182,34.275,31.336]},{"iso":"EGY","continent":"Africa","population":102334403,"name":"Egypt","population_density":97.999,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,3,15,15,49,55,59,60,67,80,109,110,150,196,196,256,285,294,327,366,402,456,495,536,576,609,656,710,779,865,985,1070,1173,1322,1450,1560,1699,1794,1939,2065,2190,2350,2505,2673,2844,3032,3144,3333,3490,3659,3891,4092,4319,4534,4782,5042,5268,5537,5895,6193,6465,6813,7201,7588,7981,8476,8964,9400,9746,10093,10431,10829,11228,11719,12229,12764,13484,14229,15003,15786,16513,17265,17967,18756,19666,20793,22082,23449,24985,26384,27536,28615,29767,31115,32612,34079,35444,36829,38284,39726,41303,42980,44598,46289,47856,49219,50437,52211,53758,55233,56809,58141,59561,61130,62755,63923,65188,66754,68311,69814,71299,72711,74035,75253,76222,77279,78304,79254,80235,81158,82070,83001,83930,84843,85771,86474,87172,87775,88402,89078,89745,90413,91072,91583,92062,92482,92947,93356,93757,94078,94316,94483,94640,94752,94875,95006,95147,95314,95492,95666,95834,95963,96108,96220,96336,96475,96590,96753,96914,97025,97148,97237,97340,97478,97619,97825,98062,98285,98497,98727,98939,99115,99280,99425,99582,99712,99863,100041,100228,100403,100557,100708,100856,101009,101177,101340,101500,101641,101772,101900,102015,102141,102254,102375,102513,102625,102736,102840,102955,103079,103198,103317,103466,103575,103683,103781,103902,104035,104156,104262,104387,104516,104648,104787,104915,105033,105159,105297,105424,105547,105705,105883,106060,106230,106397,106540,106707,106877,107030,107209,107376,107555,107736,107925,108122,108329,108530,108754,108962,109201,109422,109654,109881,110095,110319,110547,110767,111009,111284,111613,111955,112318,112676,113027,113381,113742,114107,114475,114832,115183,115541,115911,116303,116724,117156,117583,118014,118432,118847,119281,119702,120147,120611,121089,121575,122086,122609,123153,123701],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.02,0.02,0.02,0.02,0.029,0.147,0.147,0.479,0.537,0.577,0.586,0.655,0.782,1.065,1.075,1.466,1.915,1.915,2.502,2.785,2.873,3.195,3.577,3.928,4.456,4.837,5.238,5.629,5.951,6.41,6.938,7.612,8.453,9.625,10.456,11.462,12.918,14.169,15.244,16.602,17.531,18.948,20.179,21.4,22.964,24.479,26.12,27.791,29.628,30.723,32.57,34.104,35.755,38.022,39.987,42.205,44.306,46.729,49.27,51.478,54.107,57.605,60.517,63.175,66.576,70.367,74.149,77.989,82.826,87.595,91.856,95.237,98.628,101.931,105.82,109.719,114.517,119.5,124.728,131.764,139.044,146.608,154.259,161.363,168.712,175.571,183.281,192.174,203.187,215.783,229.141,244.151,257.821,269.079,279.622,290.88,304.052,318.681,333.016,346.355,359.889,374.107,388.198,403.608,419.996,435.807,452.331,467.643,480.962,492.865,510.2,525.317,539.731,555.131,568.147,582.023,597.355,613.235,624.648,637.01,652.312,667.527,682.214,696.726,710.524,723.461,735.364,744.833,755.161,765.178,774.461,784.047,793.067,801.979,811.076,820.154,829.076,838.144,845.014,851.835,857.727,863.854,870.46,876.978,883.505,889.945,894.939,899.619,903.723,908.267,912.264,916.183,919.319,921.645,923.277,924.811,925.906,927.108,928.388,929.766,931.397,933.137,934.837,936.479,937.739,939.156,940.251,941.384,942.743,943.866,945.459,947.032,948.117,949.319,950.189,951.195,952.544,953.922,955.935,958.251,960.43,962.501,964.749,966.821,968.54,970.153,971.57,973.104,974.374,975.85,977.589,979.416,981.127,982.631,984.107,985.553,987.048,988.69,990.283,991.846,993.224,994.504,995.755,996.879,998.11,999.214,1000.397,1001.745,1002.84,1003.924,1004.941,1006.064,1007.276,1008.439,1009.602,1011.058,1012.123,1013.178,1014.136,1015.318,1016.618,1017.8,1018.836,1020.058,1021.318,1022.608,1023.966,1025.217,1026.37,1027.602,1028.95,1030.191,1031.393,1032.937,1034.676,1036.406,1038.067,1039.699,1041.097,1042.729,1044.39,1045.885,1047.634,1049.266,1051.015,1052.784,1054.631,1056.556,1058.579,1060.543,1062.732,1064.764,1067.1,1069.259,1071.526,1073.744,1075.836,1078.025,1080.253,1082.402,1084.767,1087.454,1090.669,1094.011,1097.559,1101.057,1104.487,1107.946,1111.474,1115.04,1118.637,1122.125,1125.555,1129.053,1132.669,1136.5,1140.613,1144.835,1149.008,1153.219,1157.304,1161.359,1165.6,1169.714,1174.063,1178.597,1183.268,1188.017,1193.01,1198.121,1203.437,1208.792],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0.01,0.117,0,0.332,0.059,0.039,0.01,0.068,0.127,0.283,0.01,0.391,0.45,0,0.586,0.283,0.088,0.322,0.381,0.352,0.528,0.381,0.401,0.391,0.322,0.459,0.528,0.674,0.84,1.173,0.831,1.007,1.456,1.251,1.075,1.358,0.928,1.417,1.231,1.221,1.564,1.515,1.642,1.671,1.837,1.094,1.847,1.534,1.651,2.267,1.964,2.218,2.101,2.423,2.541,2.208,2.629,3.498,2.912,2.658,3.401,3.791,3.782,3.84,4.837,4.769,4.261,3.381,3.391,3.303,3.889,3.899,4.798,4.984,5.228,7.036,7.28,7.563,7.651,7.104,7.348,6.86,7.71,8.892,11.013,12.596,13.358,15.01,13.671,11.257,10.544,11.257,13.173,14.629,14.335,13.339,13.534,14.218,14.091,15.41,16.387,15.811,16.524,15.313,13.319,11.902,17.335,15.117,14.414,15.4,13.016,13.876,15.332,15.879,11.414,12.361,15.303,15.215,14.687,14.511,13.798,12.938,11.902,9.469,10.329,10.016,9.283,9.586,9.019,8.912,9.098,9.078,8.922,9.068,6.87,6.821,5.892,6.127,6.606,6.518,6.528,6.44,4.993,4.681,4.104,4.544,3.997,3.919,3.137,2.326,1.632,1.534,1.094,1.202,1.28,1.378,1.632,1.739,1.7,1.642,1.261,1.417,1.094,1.134,1.358,1.124,1.593,1.573,1.085,1.202,0.87,1.007,1.349,1.378,2.013,2.316,2.179,2.072,2.248,2.072,1.72,1.612,1.417,1.534,1.27,1.476,1.739,1.827,1.71,1.505,1.476,1.446,1.495,1.642,1.593,1.564,1.378,1.28,1.251,1.124,1.231,1.104,1.182,1.349,1.094,1.085,1.016,1.124,1.212,1.163,1.163,1.456,1.065,1.055,0.958,1.182,1.3,1.182,1.036,1.221,1.261,1.29,1.358,1.251,1.153,1.231,1.349,1.241,1.202,1.544,1.739,1.73,1.661,1.632,1.397,1.632,1.661,1.495,1.749,1.632,1.749,1.769,1.847,1.925,2.023,1.964,2.189,2.033,2.335,2.16,2.267,2.218,2.091,2.189,2.228,2.15,2.365,2.687,3.215,3.342,3.547,3.498,3.43,3.459,3.528,3.567,3.596,3.489,3.43,3.498,3.616,3.831,4.114,4.221,4.173,4.212,4.085,4.055,4.241,4.114,4.348,4.534,4.671,4.749,4.993,5.111,5.316,5.355],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0.01,0.01,0.01,0.02,0.137,0.137,0.469,0.518,0.557,0.567,0.635,0.752,0.918,0.928,0.987,1.378,1.339,1.915,2.13,2.091,2.13,2.501,2.462,2.54,2.921,2.736,2.844,3.078,3.215,3.362,3.684,3.996,4.788,5.218,5.834,6.968,7.76,8.307,8.991,9.079,9.323,9.723,9.937,10.045,10.309,10.876,11.189,12.098,11.775,12.391,12.704,12.791,13.543,13.865,14.412,14.676,16.005,16.699,17.373,18.351,19.582,20.53,20.97,22.27,23.638,24.879,26.511,28.719,29.99,31.339,32.062,32.052,31.564,31.671,31.73,31.691,31.906,32.873,36.528,40.417,44.677,48.439,51.644,54.194,56.07,58.552,60.408,64.141,69.174,74.881,82.787,89.11,93.507,96.341,98.706,100.866,102.899,103.876,102.205,102.068,105.029,108.576,112.729,115.943,117.125,119.314,121.288,121.073,118.757,122.001,121.708,119.735,119.324,115.816,114.379,116.392,120.369,114.448,111.692,112.581,112.396,114.067,114.702,113.168,110.227,110.715,107.823,102.849,97.65,92.246,87.321,82.542,78.516,75.712,75.321,73.914,72.966,70.553,67.788,64.661,61.876,59.384,56.824,54.43,51.802,49.925,47.785,45.997,44.414,41.805,39.206,35.815,31.701,28.34,25.193,22.183,18.841,16.124,13.583,12.078,11.491,11.559,11.667,11.834,12.049,11.863,11.619,11.345,10.73,10.623,10.554,10.378,10.163,9.939,9.812,9.803,10.057,10.477,11.22,12.314,13.184,14.562,15.627,15.998,16.232,15.636,14.854,13.945,13.349,12.84,12.595,12.585,12.478,12.537,12.449,12.674,12.84,12.694,12.431,12.099,11.874,11.649,11.327,11.063,10.525,10.114,9.899,9.615,9.42,9.185,9.185,9.166,9.225,9.206,9.313,9.284,9.254,9.196,9.254,9.342,9.361,9.234,8.999,9.195,9.43,9.83,9.899,9.752,9.801,10.114,10.134,10.075,10.329,10.71,11.189,11.697,12.098,12.146,12.537,12.996,12.947,12.957,12.859,12.947,13.084,13.534,13.827,14.189,14.658,15.098,15.499,16.085,16.476,16.896,17.189,17.257,17.482,17.521,17.638,17.668,18.195,19.143,20.267,21.723,23.032,24.234,25.543,26.706,27.586,27.967,28.114,27.997,27.997,28.183,28.555,29.141,29.795,30.372,31.095,31.75,32.307,32.932,33.215,33.449,33.762,34.26,34.797,35.705,36.761,37.836,39.077],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.001,0.001,0.001,0.001,0.003,0.02,0.02,0.066,0.074,0.08,0.081,0.089,0.091,0.131,0.085,0.133,0.191,0.19,0.264,0.286,0.258,0.303,0.302,0.288,0.363,0.334,0.35,0.394,0.394,0.405,0.43,0.451,0.517,0.627,0.69,0.787,0.93,1.033,1.09,1.164,1.129,1.213,1.245,1.212,1.256,1.319,1.36,1.466,1.526,1.506,1.596,1.591,1.611,1.7,1.742,1.797,1.94,2.023,2.167,2.246,2.298,2.517,2.616,2.696,2.835,3.014,3.239,3.412,3.603,3.868,4.097,4.094,4.037,3.969,3.976,3.842,3.846,3.949,4.213,4.734,5.302,5.827,6.363,6.692,7.03,7.263,7.36,7.59,8.083,8.789,9.683,10.777,11.75,12.257,12.493,12.528,12.61,12.791,12.695,12.648,12.973,13.498,13.903,14.222,14.474,14.684,15.139,15.394,15.265,14.952,15.227,15.046,14.846,14.686,14.358,14.437,14.927,14.719,14.19,13.897,13.883,14.197,14.313,14.196,13.898,14.116,14.051,13.217,12.519,11.852,11.105,10.503,9.944,9.516,9.463,9.285,9.128,9.098,8.71,8.395,7.964,7.54,7.187,6.843,6.48,6.419,6.158,5.985,5.696,5.401,5.041,4.668,4.196,3.815,3.38,3.013,2.52,2.12,1.744,1.492,1.393,1.409,1.432,1.51,1.519,1.538,1.498,1.427,1.372,1.29,1.283,1.328,1.28,1.295,1.258,1.208,1.24,1.209,1.272,1.448,1.587,1.759,1.936,2.04,2.088,2.031,1.903,1.811,1.696,1.586,1.538,1.554,1.568,1.58,1.572,1.597,1.6,1.586,1.552,1.531,1.513,1.485,1.457,1.404,1.346,1.276,1.221,1.217,1.191,1.167,1.152,1.136,1.152,1.149,1.122,1.174,1.171,1.177,1.153,1.149,1.168,1.171,1.111,1.134,1.163,1.21,1.235,1.228,1.224,1.252,1.27,1.268,1.255,1.282,1.351,1.434,1.495,1.536,1.558,1.619,1.636,1.601,1.604,1.6,1.617,1.67,1.7,1.738,1.813,1.844,1.924,1.964,2.045,2.09,2.139,2.167,2.185,2.185,2.213,2.186,2.215,2.275,2.418,2.597,2.791,2.972,3.155,3.311,3.431,3.482,3.518,3.51,3.5,3.51,3.532,3.575,3.653,3.743,3.84,3.952,4.036,4.099,4.157,4.157,4.175,4.227,4.293,4.388,4.522,4.646,4.818,4.961]},{"iso":"SLV","continent":"North America","population":6486201,"name":"El Salvador","population_density":307.811,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,3,3,3,5,9,13,13,19,24,30,32,32,41,46,56,62,69,78,93,103,117,118,125,137,149,159,164,177,190,201,218,225,237,250,274,274,298,323,345,377,395,424,446,490,555,587,633,695,742,784,889,958,998,1037,1112,1210,1265,1338,1413,1498,1571,1640,1725,1819,1915,1983,2042,2109,2194,2278,2395,2517,2582,2653,2705,2781,2849,2934,3015,3104,3191,3274,3373,3481,3603,3720,3826,3941,4066,4200,4329,4475,4626,4808,4973,5150,5336,5517,5727,5934,6173,6438,6736,7000,7267,7507,7777,8027,8307,8566,8844,9142,9391,9674,9978,10303,10645,10957,11207,11508,11846,12207,12582,12975,13377,13792,14221,14630,15035,15446,15841,16230,16632,17050,17448,17843,18262,18701,19126,19544,19978,20423,20872,21269,21644,21993,22314,22619,22912,23193,23462,23717,23964,24200,24420,24622,24811,24986,25140,25284,25415,25537,25635,25729,25820,25904,26000,26099,26206,26308,26413,26511,26602,26688,26773,26851,26928,27009,27088,27163,27249,27346,27428,27553,27798,27954,27954,28201,28415,28415,28630,28809,28981,29077,29175,29175,29358,29450,29539,29634,29737,29842,29951,29951,30196,30196,30480,30766,31061,31265,31456,31666,31666,31975,32120,32262,32421,32585,32585,32925,32925,32925,33445,33445,33445,34015,34015,34015,34015,34782,34966,35145,35145,35145,35145,35145,36030,36195,36358,36358,36669,36669,36965,37109,37250,37250,37562,37562,37884,37884,37884,38405,38405,38405,38405,39130,39130,39130,39718,39718,40131,40345,40551,40741,40741,40741,41394,41394,41880,42132,42397,42397],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.154,0.154,0.463,0.463,0.463,0.771,1.388,2.004,2.004,2.929,3.7,4.625,4.934,4.934,6.321,7.092,8.634,9.559,10.638,12.026,14.338,15.88,18.038,18.192,19.272,21.122,22.972,24.514,25.284,27.289,29.293,30.989,33.61,34.689,36.539,38.543,42.244,42.244,45.944,49.798,53.19,58.123,60.899,65.37,68.761,75.545,85.566,90.5,97.592,107.151,114.397,120.872,137.06,147.698,153.865,159.878,171.441,186.55,195.029,206.284,217.847,230.952,242.206,252.844,265.949,280.442,295.242,305.726,314.822,325.152,338.257,351.207,369.245,388.055,398.076,409.022,417.039,428.756,439.24,452.345,464.833,478.554,491.967,504.764,520.027,536.678,555.487,573.525,589.868,607.598,626.869,647.528,667.417,689.926,713.206,741.266,766.705,793.993,822.67,850.575,882.951,914.865,951.713,992.569,1038.512,1079.214,1120.378,1157.38,1199.007,1237.55,1280.719,1320.65,1363.51,1409.454,1447.843,1491.474,1538.343,1588.449,1641.176,1689.279,1727.822,1774.228,1826.339,1881.995,1939.81,2000.401,2062.378,2126.36,2192.501,2255.558,2317.998,2381.363,2442.262,2502.235,2564.213,2628.657,2690.018,2750.917,2815.516,2883.198,2948.721,3013.166,3080.077,3148.684,3217.908,3279.115,3336.93,3390.737,3440.226,3487.249,3532.422,3575.745,3617.218,3656.532,3694.613,3730.998,3764.916,3796.059,3825.198,3852.178,3875.921,3898.122,3918.318,3937.127,3952.236,3966.729,3980.759,3993.709,4008.51,4023.773,4040.269,4055.995,4072.183,4087.292,4101.322,4114.581,4127.686,4139.711,4151.583,4164.071,4176.25,4187.813,4201.072,4216.027,4228.669,4247.941,4285.714,4309.765,4309.765,4347.846,4380.839,4380.839,4413.986,4441.583,4468.101,4482.901,4498.01,4498.01,4526.224,4540.408,4554.13,4568.776,4584.656,4600.844,4617.649,4617.649,4655.422,4655.422,4699.207,4743.3,4788.782,4820.233,4849.68,4882.057,4882.057,4929.696,4952.051,4973.944,4998.457,5023.742,5023.742,5076.161,5076.161,5076.161,5156.331,5156.331,5156.331,5244.21,5244.21,5244.21,5244.21,5362.461,5390.829,5418.426,5418.426,5418.426,5418.426,5418.426,5554.869,5580.308,5605.438,5605.438,5653.386,5653.386,5699.022,5721.223,5742.961,5742.961,5791.063,5791.063,5840.707,5840.707,5840.707,5921.031,5921.031,5921.031,5921.031,6032.807,6032.807,6032.807,6123.461,6123.461,6187.135,6220.128,6251.888,6281.181,6281.181,6281.181,6381.856,6381.856,6456.784,6495.636,6536.492,6536.492],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.308,0,0,0.308,0.617,0.617,0,0.925,0.771,0.925,0.308,0,1.388,0.771,1.542,0.925,1.079,1.388,2.313,1.542,2.158,0.154,1.079,1.85,1.85,1.542,0.771,2.004,2.004,1.696,2.621,1.079,1.85,2.004,3.7,0,3.7,3.854,3.392,4.934,2.775,4.471,3.392,6.784,10.021,4.934,7.092,9.559,7.246,6.475,16.188,10.638,6.167,6.013,11.563,15.109,8.48,11.255,11.563,13.105,11.255,10.638,13.105,14.492,14.801,10.484,9.096,10.33,13.105,12.951,18.038,18.809,10.021,10.946,8.017,11.717,10.484,13.105,12.488,13.721,13.413,12.796,15.263,16.651,18.809,18.038,16.342,17.73,19.272,20.659,19.888,22.509,23.28,28.06,25.439,27.289,28.676,27.905,32.376,31.914,36.847,40.856,45.944,40.702,41.164,37.002,41.627,38.543,43.169,39.931,42.86,45.944,38.389,43.631,46.869,50.106,52.727,48.102,38.543,46.406,52.111,55.657,57.815,60.59,61.978,63.982,66.14,63.057,62.44,63.365,60.899,59.973,61.978,64.445,61.361,60.899,64.599,67.682,65.524,64.445,66.911,68.607,69.224,61.207,57.815,53.807,49.49,47.023,45.173,43.323,41.473,39.314,38.081,36.385,33.918,31.143,29.139,26.98,23.743,22.201,20.197,18.809,15.109,14.492,14.03,12.951,14.801,15.263,16.497,15.726,16.188,15.109,14.03,13.259,13.105,12.026,11.871,12.488,12.18,11.563,13.259,14.955,12.642,19.272,37.772,24.051,0,38.081,32.993,0,33.147,27.597,26.518,14.801,15.109,0,28.214,14.184,13.721,14.646,15.88,16.188,16.805,0,37.772,0,43.785,44.094,45.481,31.451,29.447,32.376,0,47.64,22.355,21.893,24.514,25.284,0,52.419,0,0,80.17,0,0,87.879,0,0,0,118.251,28.368,27.597,0,0,0,0,136.444,25.439,25.13,0,47.948,0,45.635,22.201,21.738,0,48.102,0,49.644,0,0,80.324,0,0,0,111.776,0,0,90.654,0,63.674,32.993,31.76,29.293,0,0,100.675,0,74.928,38.852,40.856,0],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.308,0.308,0.308,0.616,1.233,1.85,1.85,2.775,3.238,4.163,4.471,4.163,4.934,5.088,6.63,6.63,6.938,7.401,9.406,10.948,11.718,11.101,10.638,11.563,12.334,12.488,10.946,11.408,11.254,12.796,14.338,13.567,13.567,14.029,16.958,14.954,16.65,18.808,19.579,23.434,24.359,26.826,26.518,33.302,39.623,40.703,44.403,49.028,53.499,55.503,68.299,72.153,68.299,69.378,73.849,79.399,80.633,85.413,80.788,83.255,88.343,92.968,94.51,93.893,100.214,99.443,96.976,94.201,96.051,98.364,103.297,107.614,102.834,103.296,102.217,103.604,100.983,101.137,95.587,90.499,93.891,95.741,102.987,107.921,116.246,121.179,125.033,129.042,134.901,142.764,147.389,153.247,157.718,167.74,176.837,186.396,195.8,203.046,215.534,224.939,238.506,251.302,271.807,285.22,297.708,306.805,316.056,322.685,329.007,328.082,324.998,330.24,327.465,334.094,339.336,350.899,360.457,368.628,364.311,364.773,378.495,390.521,401.467,411.951,421.202,437.082,464.679,481.33,491.659,499.367,502.451,501.834,501.834,502.297,497.518,495.36,497.519,501.836,506.461,510.933,515.866,520.028,527.891,528.199,521.415,507.54,491.506,474.084,452.346,427.062,399.311,377.418,357.684,340.262,324.69,308.81,292.776,276.433,258.703,241.59,223.706,206.13,187.321,170.67,155.561,141.532,132.59,125.652,121.952,118.869,119.948,120.565,120.565,120.873,119.177,115.94,111.314,108.076,104.068,100.522,99.751,101.447,100.984,108.23,134.131,145.694,133.514,160.032,179.766,164.811,185.316,193.641,182.387,173.137,188.246,150.165,145.386,159.57,140.144,127.193,116.555,117.942,119.638,119.638,129.196,115.012,145.076,174.524,204.125,219.388,232.03,264.406,226.634,274.274,252.844,230.643,209.676,203.509,174.062,194.105,194.105,146.465,204.28,182.387,157.873,220.468,220.468,168.049,168.049,286.3,234.498,262.095,262.095,174.216,174.216,174.216,310.66,217.848,214.61,187.013,234.961,234.961,280.596,302.797,188.091,162.652,185.624,185.624,187.32,187.32,141.685,199.808,178.07,178.07,129.968,241.744,192.1,192.1,282.754,202.43,266.104,299.097,330.857,248.374,248.374,248.374,258.395,258.395,269.649,275.508,284.604,255.311],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.176,0.264,0.264,0.352,0.463,0.595,0.595,0.507,0.617,0.727,0.815,0.837,0.859,1.013,1.344,1.366,1.564,1.366,1.388,1.498,1.564,1.454,1.344,1.321,1.586,1.674,1.784,1.674,1.718,1.894,2.136,1.85,2.136,2.313,2.643,3.083,3.194,3.304,3.788,4.229,5.11,5.33,5.638,6.607,7.004,7.444,8.788,8.876,9.052,8.898,9.184,10.308,10.594,9.889,10.021,11.012,11.761,11.629,11.343,12.202,12.708,12.554,11.981,11.849,12.202,12.18,12.686,13.259,13.193,13.457,13.127,12.929,12.576,11.871,10.968,11.497,11.849,12.532,13.039,13.92,14.735,15.527,15.902,16.519,17.444,18.214,18.677,19.206,19.954,21.628,22.73,23.875,25.02,26.165,27.575,28.808,30.064,32.266,34.931,36.649,38.543,39.204,40.592,40.834,41.164,40.305,40.614,41.296,41.495,41.781,42.97,43.961,45.79,46.538,45.481,46.626,47.838,49.093,50.194,51.318,53.3,56.934,59.753,61.317,62.286,63.079,63.123,62.837,62.55,62.308,62.066,61.846,62.022,62.991,63.784,64.136,64.489,65.524,66.713,66.229,64.819,63.145,61.009,58.167,54.82,51.12,48.3,45.657,43.411,41.539,39.667,37.662,35.636,33.566,31.341,29.073,26.76,24.602,22.311,20.219,18.369,16.827,15.77,15.065,14.735,14.823,15.065,15.219,15.373,15.153,14.845,14.206,13.655,13.127,12.708,12.356,12.356,12.62,12.708,13.765,17.378,19.073,17.422,20.968,23.544,21.738,23.721,22.267,22.619,24.734,21.452,16.739,20.769,18.06,16.078,14.382,14.536,14.691,17.091,13.061,16.43,14.47,18.633,22.663,26.848,28.941,33.147,32.376,32.376,32.927,29.822,26.452,25.461,24.866,20.241,27.729,20.924,17.73,26.055,22.553,18.941,31.495,24.007,24.007,24.007,29.447,33.5,37.442,24.888,24.888,24.888,24.888,27.487,27.068,26.716,26.716,33.566,33.566,40.085,23.765,23.236,19.646,26.518,19.668,26.76,20.241,17.069,25.439,25.439,18.567,18.567,27.443,27.443,27.443,28.919,28.919,38.015,42.728,31.297,35.482,35.482,22.531,36.914,27.817,33.808,34.821,36.473,36.473]},{"iso":"GNQ","continent":"Africa","population":1402985,"name":"Equatorial Guinea","population_density":45.194,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,4,6,6,6,6,9,9,9,12,12,12,12,12,12,15,15,16,16,16,16,16,18,18,18,18,21,21,41,51,51,79,79,79,79,83,84,84,214,258,258,258,315,315,315,315,315,315,315,315,439,439,439,439,439,439,439,522,583,594,594,594,719,825,890,903,960,960,960,1043,1043,1043,1043,1306,1306,1306,1306,1306,1306,1306,1306,1306,1306,1306,1306,1306,1306,1306,1306,1306,1306,1664,1664,1664,1664,1664,1664,1664,1664,1664,2001,2001,2001,2001,2001,2001,2001,3071,3071,3071,3071,3071,3071,3071,3071,3071,3071,3071,3071,3071,3071,3071,3071,3071,3071,3071,3071,3071,3071,3071,3071,3071,3071,3071,3071,3071,4821,4821,4821,4821,4821,4821,4821,4821,4821,4821,4821,4821,4821,4821,4821,4821,4821,4821,4821,4892,4892,4926,4926,4926,4926,4926,4928,4928,4941,4941,4941,4941,4965,4965,4965,4972,4972,4972,4985,4985,4990,4990,4996,4996,4996,5000,5000,5000,5002,5002,5002,5002,5002,5018,5018,5018,5018,5028,5028,5028,5030,5030,5045,5045,5045,5045,5045,5052,5052,5062,5063,5063,5063,5066,5066,5068,5068,5068,5070,5070,5070,5074,5074,5074,5074,5079,5079,5079,5083,5083,5083,5083,5088,5088,5089,5089,5089,5092,5092,5092,5092,5092,5102,5102,5104,5104,5104,5104,5104,5121,5121,5121,5121,5130,5130,5137,5137,5137,5146,5146,5153,5153,5153,5156,5156,5159,5159,5159,5159,5166,5166,5183,5183,5183,5185,5185,5185,5195,5195,5214],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.713,0.713,0.713,2.851,4.277,4.277,4.277,4.277,6.415,6.415,6.415,8.553,8.553,8.553,8.553,8.553,8.553,10.691,10.691,11.404,11.404,11.404,11.404,11.404,12.83,12.83,12.83,12.83,14.968,14.968,29.223,36.351,36.351,56.309,56.309,56.309,56.309,59.16,59.872,59.872,152.532,183.894,183.894,183.894,224.521,224.521,224.521,224.521,224.521,224.521,224.521,224.521,312.904,312.904,312.904,312.904,312.904,312.904,312.904,372.064,415.543,423.383,423.383,423.383,512.479,588.032,634.362,643.628,684.255,684.255,684.255,743.415,743.415,743.415,743.415,930.872,930.872,930.872,930.872,930.872,930.872,930.872,930.872,930.872,930.872,930.872,930.872,930.872,930.872,930.872,930.872,930.872,930.872,1186.043,1186.043,1186.043,1186.043,1186.043,1186.043,1186.043,1186.043,1186.043,1426.245,1426.245,1426.245,1426.245,1426.245,1426.245,1426.245,2188.904,2188.904,2188.904,2188.904,2188.904,2188.904,2188.904,2188.904,2188.904,2188.904,2188.904,2188.904,2188.904,2188.904,2188.904,2188.904,2188.904,2188.904,2188.904,2188.904,2188.904,2188.904,2188.904,2188.904,2188.904,2188.904,2188.904,2188.904,2188.904,3436.245,3436.245,3436.245,3436.245,3436.245,3436.245,3436.245,3436.245,3436.245,3436.245,3436.245,3436.245,3436.245,3436.245,3436.245,3436.245,3436.245,3436.245,3436.245,3486.851,3486.851,3511.085,3511.085,3511.085,3511.085,3511.085,3512.511,3512.511,3521.777,3521.777,3521.777,3521.777,3538.883,3538.883,3538.883,3543.873,3543.873,3543.873,3553.138,3553.138,3556.702,3556.702,3560.979,3560.979,3560.979,3563.83,3563.83,3563.83,3565.256,3565.256,3565.256,3565.256,3565.256,3576.66,3576.66,3576.66,3576.66,3583.787,3583.787,3583.787,3585.213,3585.213,3595.904,3595.904,3595.904,3595.904,3595.904,3600.894,3600.894,3608.021,3608.734,3608.734,3608.734,3610.873,3610.873,3612.298,3612.298,3612.298,3613.724,3613.724,3613.724,3616.575,3616.575,3616.575,3616.575,3620.138,3620.138,3620.138,3622.99,3622.99,3622.99,3622.99,3626.553,3626.553,3627.266,3627.266,3627.266,3629.404,3629.404,3629.404,3629.404,3629.404,3636.532,3636.532,3637.958,3637.958,3637.958,3637.958,3637.958,3650.075,3650.075,3650.075,3650.075,3656.49,3656.49,3661.479,3661.479,3661.479,3667.894,3667.894,3672.883,3672.883,3672.883,3675.021,3675.021,3677.16,3677.16,3677.16,3677.16,3682.149,3682.149,3694.266,3694.266,3694.266,3695.692,3695.692,3695.692,3702.819,3702.819,3716.362],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2.138,1.426,0,0,0,2.138,0,0,2.138,0,0,0,0,0,2.138,0,0.713,0,0,0,0,1.426,0,0,0,2.138,0,14.255,7.128,0,19.957,0,0,0,2.851,0.713,0,92.66,31.362,0,0,40.628,0,0,0,0,0,0,0,88.383,0,0,0,0,0,0,59.16,43.479,7.84,0,0,89.096,75.553,46.33,9.266,40.628,0,0,59.16,0,0,0,187.457,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255.17,0,0,0,0,0,0,0,0,240.202,0,0,0,0,0,0,762.66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1247.34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50.606,0,24.234,0,0,0,0,1.426,0,9.266,0,0,0,17.106,0,0,4.989,0,0,9.266,0,3.564,0,4.277,0,0,2.851,0,0,1.426,0,0,0,0,11.404,0,0,0,7.128,0,0,1.426,0,10.691,0,0,0,0,4.989,0,7.128,0.713,0,0,2.138,0,1.426,0,0,1.426,0,0,2.851,0,0,0,3.564,0,0,2.851,0,0,0,3.564,0,0.713,0,0,2.138,0,0,0,0,7.128,0,1.426,0,0,0,0,12.117,0,0,0,6.415,0,4.989,0,0,6.415,0,4.989,0,0,2.138,0,2.138,0,0,0,4.989,0,12.117,0,0,1.426,0,0,7.128,0,13.543],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2.138,3.564,3.564,3.564,3.564,5.702,5.702,5.702,5.702,4.276,4.276,4.276,4.276,2.138,4.276,4.276,2.851,2.851,2.851,2.851,2.851,4.277,2.139,2.139,1.426,3.564,3.564,17.819,24.947,23.521,43.478,43.478,43.478,41.34,44.191,30.649,23.521,116.181,127.586,127.586,127.586,168.214,165.363,164.65,164.65,71.99,40.628,40.628,40.628,88.383,88.383,88.383,88.383,88.383,88.383,88.383,147.543,102.639,110.479,110.479,110.479,199.575,275.128,321.458,271.564,268.713,260.873,260.873,320.033,230.937,155.384,109.054,287.245,246.617,246.617,246.617,187.457,187.457,187.457,187.457,0,0,0,0,0,0,0,0,0,0,255.17,255.17,255.17,255.17,255.17,255.17,255.17,255.17,0,240.202,240.202,240.202,240.202,240.202,240.202,240.202,1002.862,762.66,762.66,762.66,762.66,762.66,762.66,762.66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1247.34,1247.34,1247.34,1247.34,1247.34,1247.34,1247.34,1247.34,0,0,0,0,0,0,0,0,0,0,0,50.606,50.606,74.84,74.84,74.84,74.84,74.84,76.266,25.66,34.926,10.692,10.692,10.692,27.798,27.798,26.372,31.361,22.095,22.095,31.361,31.361,17.819,17.819,22.096,17.107,17.107,19.958,10.692,10.692,8.554,8.554,4.277,4.277,4.277,12.83,12.83,12.83,11.404,18.532,18.532,18.532,19.958,8.554,19.245,19.245,19.245,12.117,12.117,17.106,15.68,22.808,12.83,12.83,12.83,14.968,14.968,11.405,11.405,4.277,4.99,4.99,4.99,5.703,5.703,4.277,4.277,7.841,6.415,6.415,9.266,6.415,6.415,6.415,9.979,6.415,7.128,7.128,4.277,6.415,6.415,6.415,2.851,2.851,9.266,9.266,10.692,8.554,8.554,8.554,8.554,20.671,13.543,13.543,12.117,18.532,18.532,23.521,23.521,11.404,17.819,17.819,22.808,16.393,16.393,13.542,13.542,15.68,9.265,9.265,4.276,9.265,9.265,19.244,19.244,17.106,18.532,18.532,18.532,20.671,20.671,22.097],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.509,0.509,0.815,0.815,0.509,0.611,0.611,0.611,0.611,0.305,0.305,0.611,0.305,0.407,0.407,0.407,0.407,0.407,0.305,0.305,0.204,0.204,0.509,0.509,2.546,3.36,3.36,6.211,6.211,5.906,5.906,4.277,3.36,3.36,13.746,18.226,18.226,18.226,23.623,23.521,23.521,10.284,5.804,5.804,5.804,0,12.626,12.626,12.626,12.626,12.626,12.626,12.626,8.451,14.663,15.783,15.783,15.783,28.511,39.304,37.471,32.584,37.267,37.267,37.267,32.991,22.198,15.579,14.255,35.231,35.231,35.231,26.78,26.78,26.78,26.78,0,0,0,0,0,0,0,0,0,0,0,36.453,36.453,36.453,36.453,36.453,36.453,36.453,0,0,34.315,34.315,34.315,34.315,34.315,34.315,34.315,108.951,108.951,108.951,108.951,108.951,108.951,108.951,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,178.191,178.191,178.191,178.191,178.191,178.191,178.191,0,0,0,0,0,0,0,0,0,0,0,0,7.229,7.229,10.691,10.691,10.691,10.691,10.691,3.666,3.666,1.527,1.527,1.527,1.527,3.971,3.767,3.767,3.157,3.157,3.157,4.48,2.036,2.546,2.546,2.444,2.444,2.444,1.527,1.527,1.018,1.222,0.611,0.611,0.611,0.204,1.833,1.833,1.629,1.629,2.647,2.647,2.647,1.222,1.222,2.749,2.749,1.731,1.731,1.731,2.24,2.24,1.731,1.833,1.833,1.833,2.138,1.426,1.629,0.611,0.509,0.713,0.713,0.407,0.815,0.611,0.611,0.611,0.916,0.916,0.916,0.916,0.916,0.916,0.916,0.916,0.916,1.018,0.611,0.611,0.916,0.916,0.407,0.407,0.305,1.324,1.324,1.222,1.222,1.222,1.222,1.222,1.935,1.935,1.731,1.731,2.647,2.647,3.36,1.629,1.629,2.546,2.546,2.342,2.342,1.629,1.935,1.935,1.324,1.324,0.611,0.611,1.324,1.018,2.749,2.444,2.444,2.647,2.647,1.935,2.953,1.222,3.157]},{"iso":"ERI","continent":"Africa","population":3546427,"name":"Eritrea","population_density":44.304,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,4,6,6,6,12,12,15,15,22,22,29,29,31,31,33,33,34,34,34,34,34,35,35,35,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,41,41,41,65,96,109,121,131,142,142,143,143,143,143,144,144,167,191,191,191,203,203,215,215,215,215,215,215,215,232,232,232,232,232,232,232,251,251,251,251,251,251,251,261,261,263,263,265,265,265,279,279,279,279,282,282,282,282,285,285,285,285,285,285,285,285,285,285,285,304,304,306,306,306,306,306,315,315,317,317,318,318,319,319,319,330,330,330,330,330,341,341,361,361,361,361,361,364,364,364,364,364,364,364,364,364,369,369,375,375,375,375,375,381,381,398,398,398,398,398,405,405,414,414,414,414,414,422,422,452,452,452,452,452,457,461,461,461,461,461,461,461,463,463,463,480,480,480,484,484,491,491,491,491,491,493,493,493,493,518,518,518,527,527,551,551,558,558,558,566,566,577,577,577,577,577,594,632,632,632,649,649,649,656,656,711,711,711,711,711,741],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.282,0.282,0.282,0.282,1.128,1.692,1.692,1.692,3.384,3.384,4.23,4.23,6.203,6.203,8.177,8.177,8.741,8.741,9.305,9.305,9.587,9.587,9.587,9.587,9.587,9.869,9.869,9.869,10.997,10.997,10.997,10.997,10.997,10.997,10.997,10.997,10.997,10.997,10.997,10.997,10.997,10.997,10.997,10.997,10.997,10.997,10.997,10.997,10.997,10.997,10.997,10.997,10.997,10.997,10.997,10.997,10.997,10.997,10.997,10.997,10.997,10.997,10.997,10.997,10.997,10.997,10.997,10.997,10.997,10.997,10.997,10.997,10.997,10.997,10.997,10.997,10.997,10.997,10.997,10.997,10.997,11.561,11.561,11.561,18.328,27.069,30.735,34.119,36.939,40.04,40.04,40.322,40.322,40.322,40.322,40.604,40.604,47.09,53.857,53.857,53.857,57.241,57.241,60.624,60.624,60.624,60.624,60.624,60.624,60.624,65.418,65.418,65.418,65.418,65.418,65.418,65.418,70.775,70.775,70.775,70.775,70.775,70.775,70.775,73.595,73.595,74.159,74.159,74.723,74.723,74.723,78.671,78.671,78.671,78.671,79.517,79.517,79.517,79.517,80.363,80.363,80.363,80.363,80.363,80.363,80.363,80.363,80.363,80.363,80.363,85.72,85.72,86.284,86.284,86.284,86.284,86.284,88.822,88.822,89.386,89.386,89.668,89.668,89.95,89.95,89.95,93.051,93.051,93.051,93.051,93.051,96.153,96.153,101.793,101.793,101.793,101.793,101.793,102.639,102.639,102.639,102.639,102.639,102.639,102.639,102.639,102.639,104.048,104.048,105.74,105.74,105.74,105.74,105.74,107.432,107.432,112.226,112.226,112.226,112.226,112.226,114.199,114.199,116.737,116.737,116.737,116.737,116.737,118.993,118.993,127.452,127.452,127.452,127.452,127.452,128.862,129.99,129.99,129.99,129.99,129.99,129.99,129.99,130.554,130.554,130.554,135.347,135.347,135.347,136.475,136.475,138.449,138.449,138.449,138.449,138.449,139.013,139.013,139.013,139.013,146.063,146.063,146.063,148.6,148.6,155.368,155.368,157.341,157.341,157.341,159.597,159.597,162.699,162.699,162.699,162.699,162.699,167.493,178.208,178.208,178.208,183.001,183.001,183.001,184.975,184.975,200.483,200.483,200.483,200.483,200.483,208.943],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.846,0.564,0,0,1.692,0,0.846,0,1.974,0,1.974,0,0.564,0,0.564,0,0.282,0,0,0,0,0.282,0,0,1.128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.564,0,0,6.767,8.741,3.666,3.384,2.82,3.102,0,0.282,0,0,0,0.282,0,6.485,6.767,0,0,3.384,0,3.384,0,0,0,0,0,0,4.794,0,0,0,0,0,0,5.358,0,0,0,0,0,0,2.82,0,0.564,0,0.564,0,0,3.948,0,0,0,0.846,0,0,0,0.846,0,0,0,0,0,0,0,0,0,0,5.358,0,0.564,0,0,0,0,2.538,0,0.564,0,0.282,0,0.282,0,0,3.102,0,0,0,0,3.102,0,5.639,0,0,0,0,0.846,0,0,0,0,0,0,0,0,1.41,0,1.692,0,0,0,0,1.692,0,4.794,0,0,0,0,1.974,0,2.538,0,0,0,0,2.256,0,8.459,0,0,0,0,1.41,1.128,0,0,0,0,0,0,0.564,0,0,4.794,0,0,1.128,0,1.974,0,0,0,0,0.564,0,0,0,7.049,0,0,2.538,0,6.767,0,1.974,0,0,2.256,0,3.102,0,0,0,0,4.794,10.715,0,0,4.794,0,0,1.974,0,15.509,0,0,0,0,8.459],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.846,1.41,1.41,1.41,3.102,3.102,3.948,3.948,5.076,4.512,6.486,6.486,5.358,5.358,5.076,5.076,3.384,3.384,1.41,1.41,0.846,1.128,0.564,0.564,1.41,1.41,1.41,1.41,1.41,1.128,1.128,1.128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.564,0.564,0.564,7.331,16.072,19.738,23.122,25.942,28.48,28.48,28.762,21.995,13.254,9.588,6.486,3.666,7.049,13.816,13.534,13.534,16.918,16.918,20.02,20.02,13.535,6.768,6.768,6.768,3.384,8.178,4.794,4.794,4.794,4.794,4.794,4.794,10.152,5.358,5.358,5.358,5.358,5.358,5.358,8.178,2.82,3.384,3.384,3.948,3.948,3.948,7.896,5.076,5.076,4.512,5.358,4.794,4.794,4.794,1.692,1.692,1.692,1.692,0.846,0.846,0.846,0.846,0,0,0,5.358,5.358,5.922,5.922,5.922,5.922,5.922,8.46,3.102,3.666,3.102,3.384,3.384,3.666,3.666,1.128,4.23,3.666,3.666,3.384,3.384,6.204,6.204,11.843,8.741,8.741,8.741,8.741,9.587,6.485,6.485,0.846,0.846,0.846,0.846,0.846,0,1.41,1.41,3.102,3.102,3.102,3.102,3.102,4.794,3.384,8.178,6.486,6.486,6.486,6.486,8.46,6.768,9.306,4.512,4.512,4.512,4.512,6.768,4.794,13.253,10.715,10.715,10.715,10.715,12.125,10.997,10.997,2.538,2.538,2.538,2.538,2.538,1.692,0.564,0.564,5.358,5.358,5.358,6.486,6.486,7.896,7.896,7.896,3.102,3.102,3.666,2.538,2.538,0.564,7.613,7.613,7.613,10.151,9.587,16.354,16.354,18.328,11.279,11.279,13.535,10.997,14.099,7.332,7.332,5.358,5.358,10.152,18.611,18.611,15.509,20.303,20.303,20.303,22.277,17.483,22.277,22.277,22.277,17.483,17.483,25.942],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.201,0.201,0.443,0.443,0.564,0.443,0.645,0.645,0.926,0.685,0.765,0.645,0.725,0.443,0.483,0.201,0.201,0.121,0.121,0.081,0.081,0.04,0.201,0.201,0.201,0.201,0.161,0.161,0.161,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.081,0.081,0.081,1.047,2.296,2.82,3.303,3.625,4.068,4.068,3.142,1.893,1.37,0.886,0.524,0.081,1.007,1.934,1.934,1.934,2.417,2.377,2.86,1.934,0.967,0.967,0.967,0.483,0.483,0.685,0.685,0.685,0.685,0.685,0.685,0.685,0.765,0.765,0.765,0.765,0.765,0.765,0.765,0.403,0.403,0.483,0.483,0.564,0.564,0.564,0.725,0.725,0.645,0.645,0.685,0.685,0.685,0.121,0.242,0.242,0.242,0.121,0.121,0.121,0.121,0,0,0,0,0.765,0.765,0.846,0.846,0.846,0.846,0.846,0.443,0.443,0.443,0.443,0.483,0.483,0.524,0.161,0.161,0.524,0.524,0.483,0.483,0.443,0.886,0.886,1.249,1.249,1.249,1.249,1.249,0.926,0.926,0.121,0.121,0.121,0.121,0.121,0,0,0.201,0.201,0.443,0.443,0.443,0.443,0.443,0.483,0.483,0.926,0.926,0.926,0.926,0.926,0.967,0.967,0.645,0.645,0.645,0.645,0.645,0.685,0.685,1.531,1.531,1.531,1.531,1.531,1.41,1.571,0.363,0.363,0.363,0.363,0.363,0.161,0.081,0.081,0.081,0.765,0.765,0.765,0.926,0.846,1.128,1.128,0.443,0.443,0.443,0.363,0.363,0.081,0.081,1.088,1.088,1.088,1.37,1.37,2.336,2.336,1.611,1.611,1.611,1.571,1.571,1.047,1.047,0.765,0.765,0.765,1.128,2.659,2.216,2.216,2.9,2.9,2.9,2.497,0.967,3.182,3.182,2.497,2.497,2.497,3.424]},{"iso":"EST","continent":"Europe","population":1326539,"name":"Estonia","population_density":31.033,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,2,2,3,10,10,10,10,12,16,16,79,115,171,205,225,258,267,283,306,326,352,369,404,538,575,645,679,715,745,779,858,961,1039,1097,1108,1149,1185,1207,1258,1304,1309,1332,1373,1400,1434,1459,1512,1528,1535,1552,1559,1592,1605,1635,1643,1647,1660,1666,1689,1694,1699,1700,1703,1711,1713,1720,1725,1733,1739,1741,1746,1751,1758,1766,1770,1774,1784,1791,1794,1800,1807,1821,1823,1824,1834,1840,1851,1859,1865,1869,1870,1870,1880,1890,1910,1931,1939,1940,1947,1958,1965,1970,1973,1973,1974,1975,1977,1977,1979,1981,1981,1981,1982,1983,1984,1986,1986,1987,1987,1989,1989,1990,1991,1993,1993,1994,1995,2003,2011,2013,2014,2014,2014,2015,2016,2016,2020,2021,2021,2021,2022,2025,2027,2028,2033,2034,2034,2038,2042,2051,2064,2072,2079,2080,2091,2113,2124,2133,2147,2152,2158,2167,2174,2174,2177,2184,2190,2192,2200,2207,2227,2244,2265,2272,2275,2294,2311,2325,2343,2363,2373,2375,2395,2415,2441,2456,2491,2516,2532,2564,2585,2600,2632,2655,2676,2698,2722,2756,2778,2814,2875,2924,2941,2976,3033,3076,3118,3165,3200,3267,3315,3371,3450,3507,3577,3607,3617,3659,3715,3760,3809,3846,3865,3883,3908,3947,3980,4017,4052,4078,4085,4127,4171,4247,4300,4351,4411,4428,4465,4590,4671,4771,4905,4985,5046,5125,5333,5464,5705,5933,6125,6250,6376,6508,6881,7148,7412,7637,7848,8033,8304,8715,9076,9375,9724,9956,10159,10541,10955,11323,11698,12052,12308,12497,13019,13469,13939,14500,14978,15226,15510,16054,16598,16956,17713,18055,18385,18682,19271,20004],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.754,0.754,0.754,0.754,0.754,1.508,1.508,2.262,7.538,7.538,7.538,7.538,9.046,12.061,12.061,59.553,86.692,128.907,154.537,169.614,194.491,201.276,213.337,230.675,245.752,265.352,278.167,304.552,405.567,433.459,486.228,511.858,538.997,561.612,587.242,646.796,724.442,783.241,826.964,835.256,866.164,893.302,909.887,948.332,983.009,986.778,1004.117,1035.024,1055.378,1081.009,1099.855,1139.808,1151.87,1157.147,1169.962,1175.239,1200.115,1209.915,1232.531,1238.561,1241.577,1251.377,1255.9,1273.238,1277.007,1280.777,1281.53,1283.792,1289.823,1291.33,1296.607,1300.376,1306.407,1310.93,1312.438,1316.207,1319.976,1325.253,1331.284,1334.299,1337.315,1344.853,1350.13,1352.391,1356.914,1362.191,1372.745,1374.253,1375.007,1382.545,1387.068,1395.36,1401.391,1405.914,1408.93,1409.683,1409.683,1417.222,1424.76,1439.837,1455.668,1461.698,1462.452,1467.729,1476.021,1481.298,1485.068,1487.329,1487.329,1488.083,1488.837,1490.344,1490.344,1491.852,1493.36,1493.36,1493.36,1494.114,1494.867,1495.621,1497.129,1497.129,1497.883,1497.883,1499.391,1499.391,1500.144,1500.898,1502.406,1502.406,1503.16,1503.914,1509.944,1515.975,1517.483,1518.237,1518.237,1518.237,1518.99,1519.744,1519.744,1522.76,1523.513,1523.513,1523.513,1524.267,1526.529,1528.036,1528.79,1532.56,1533.313,1533.313,1536.329,1539.344,1546.129,1555.929,1561.959,1567.236,1567.99,1576.282,1592.867,1601.159,1607.944,1618.497,1622.267,1626.79,1633.574,1638.851,1638.851,1641.113,1646.39,1650.913,1652.42,1658.451,1663.728,1678.805,1691.62,1707.451,1712.728,1714.989,1729.312,1742.127,1752.681,1766.25,1781.327,1788.866,1790.373,1805.45,1820.527,1840.127,1851.434,1877.819,1896.665,1908.726,1932.849,1948.68,1959.988,1984.111,2001.449,2017.28,2033.864,2051.956,2077.587,2094.171,2121.31,2167.294,2204.232,2217.048,2243.432,2286.401,2318.816,2350.477,2385.908,2412.292,2462.8,2498.984,2541.199,2600.753,2643.722,2696.491,2719.106,2726.644,2758.306,2800.521,2834.444,2871.382,2899.274,2913.597,2927.166,2946.012,2975.412,3000.289,3028.181,3054.565,3074.165,3079.442,3111.103,3144.272,3201.564,3241.518,3279.964,3325.194,3338.01,3365.902,3460.132,3521.193,3596.577,3697.592,3757.899,3803.884,3863.437,4020.236,4118.989,4300.665,4472.541,4617.278,4711.509,4806.493,4906,5187.183,5388.458,5587.472,5757.087,5916.147,6055.608,6259.899,6569.728,6841.864,7067.263,7330.354,7505.245,7658.275,7946.242,8258.332,8535.746,8818.437,9085.296,9278.28,9420.756,9814.261,10153.49,10507.795,10930.7,11291.036,11477.989,11692.08,12102.17,12512.259,12782.135,13352.792,13610.606,13859.374,14083.265,14527.277,15079.843],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.754,0,0.754,5.277,0,0,0,1.508,3.015,0,47.492,27.138,42.215,25.631,15.077,24.877,6.785,12.061,17.338,15.077,19.6,12.815,26.384,101.015,27.892,52.769,25.631,27.138,22.615,25.631,59.553,77.646,58.8,43.723,8.292,30.907,27.138,16.585,38.446,34.677,3.769,17.338,30.907,20.354,25.631,18.846,39.954,12.061,5.277,12.815,5.277,24.877,9.8,22.615,6.031,3.015,9.8,4.523,17.338,3.769,3.769,0.754,2.262,6.031,1.508,5.277,3.769,6.031,4.523,1.508,3.769,3.769,5.277,6.031,3.015,3.015,7.538,5.277,2.262,4.523,5.277,10.554,1.508,0.754,7.538,4.523,8.292,6.031,4.523,3.015,0.754,0,7.538,7.538,15.077,15.831,6.031,0.754,5.277,8.292,5.277,3.769,2.262,0,0.754,0.754,1.508,0,1.508,1.508,0,0,0.754,0.754,0.754,1.508,0,0.754,0,1.508,0,0.754,0.754,1.508,0,0.754,0.754,6.031,6.031,1.508,0.754,0,0,0.754,0.754,0,3.015,0.754,0,0,0.754,2.262,1.508,0.754,3.769,0.754,0,3.015,3.015,6.785,9.8,6.031,5.277,0.754,8.292,16.585,8.292,6.785,10.554,3.769,4.523,6.785,5.277,0,2.262,5.277,4.523,1.508,6.031,5.277,15.077,12.815,15.831,5.277,2.262,14.323,12.815,10.554,13.569,15.077,7.538,1.508,15.077,15.077,19.6,11.308,26.384,18.846,12.061,24.123,15.831,11.308,24.123,17.338,15.831,16.585,18.092,25.631,16.585,27.138,45.984,36.938,12.815,26.384,42.969,32.415,31.661,35.431,26.384,50.507,36.184,42.215,59.553,42.969,52.769,22.615,7.538,31.661,42.215,33.923,36.938,27.892,14.323,13.569,18.846,29.4,24.877,27.892,26.384,19.6,5.277,31.661,33.169,57.292,39.954,38.446,45.23,12.815,27.892,94.23,61.061,75.384,101.015,60.307,45.984,59.553,156.799,98.753,181.676,171.876,144.738,94.23,94.984,99.507,281.183,201.276,199.014,169.614,159.061,139.461,204.291,309.829,272.137,225.399,263.091,174.891,153.03,287.967,312.09,277.414,282.691,266.86,192.983,142.476,393.505,339.229,354.305,422.905,360.336,186.953,214.091,410.09,410.09,269.875,570.658,257.814,248.768,223.891,444.013,552.566],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.754,0.754,1.508,6.785,6.785,6.785,6.785,8.293,10.554,10.554,57.292,79.153,121.368,146.999,162.076,185.445,189.215,201.276,171.122,159.061,136.446,123.63,134.937,211.075,232.182,272.89,281.183,293.244,296.259,309.075,342.244,318.875,349.783,340.737,323.398,327.167,331.69,322.644,301.537,258.568,203.537,177.152,199.767,189.214,187.707,189.968,191.476,168.86,170.368,165.845,140.215,144.738,128.907,132.676,98.753,89.707,94.23,85.938,97.999,76.891,70.86,48.999,45.23,48.246,39.954,40.708,27.139,29.401,30.155,30.909,32.416,30.154,33.923,34.677,33.923,30.907,33.922,37.691,36.184,36.938,36.938,41.461,39.954,37.693,37.693,36.939,42.969,44.477,43.723,36.184,35.43,34.676,34.676,37.691,44.476,54.276,55.784,53.523,58.046,66.338,64.077,60.308,47.493,31.662,26.385,26.385,22.616,14.324,10.555,8.294,6.032,6.032,6.032,6.032,5.278,6.786,5.278,4.524,4.524,6.032,5.278,5.278,5.278,5.278,5.278,5.278,6.032,10.555,16.586,17.34,17.34,15.832,15.832,15.832,15.832,9.801,6.785,6.031,5.277,5.277,6.031,7.539,8.293,9.047,9.801,9.801,9.801,12.816,15.077,19.6,27.892,33.169,34.677,34.677,42.969,56.539,61.816,61.816,62.57,60.308,59.554,65.585,62.57,45.985,39.955,38.447,32.416,30.155,31.663,30.155,39.955,52.77,66.339,66.339,64.078,76.893,83.677,88.954,87.446,89.708,81.415,77.646,90.461,91.215,98,98.754,111.569,115.338,119.861,142.476,143.23,139.461,143.984,150.014,139.461,137.2,143.231,144.739,145.493,161.323,183.184,202.784,199.768,209.567,234.444,241.228,256.304,264.597,244.997,258.566,281.935,297.766,314.35,324.904,346.012,333.196,314.35,295.504,301.535,293.243,270.628,255.551,217.105,208.059,219.367,217.106,199.768,193.737,183.183,174.891,165.845,183.937,198.26,226.152,241.229,251.783,270.629,263.844,286.459,349.028,376.92,395.012,456.073,477.934,478.688,525.426,654.333,658.856,779.471,875.963,919.686,953.609,1002.609,1042.563,1166.947,1269.47,1286.808,1284.546,1298.869,1344.1,1453.407,1663.729,1654.683,1678.806,1742.883,1748.16,1742.129,1890.635,1998.434,1966.019,1976.573,2018.034,1947.926,1915.511,2155.986,2207.248,2249.463,2394.954,2472.599,2392.692,2413.8,2681.414,2697.999,2628.645,2844.998,2679.907,2568.339,2605.277,2835.199,2977.675],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.108,0.215,0.969,0.969,0.969,0.969,1.077,1.508,1.4,7.431,11.308,17.338,21,22.938,26.061,27.031,21.969,20.569,16.692,15.831,15.508,15.723,29.184,31.446,36.507,38.015,39.092,40.492,40.384,34.461,41.569,42.431,45.015,42.323,43.507,43.723,37.584,31.984,28.538,22.831,24.123,24.123,23.154,24.446,21.646,22.4,23.584,21.861,19.277,17.123,17.015,15.723,13.246,12.385,12.061,11.631,11.523,10.446,9.585,6.892,6.138,6.031,5.492,5.062,3.338,3.338,3.662,4.2,4.092,3.769,4.092,4.092,4.415,3.985,3.769,4.631,4.846,4.631,4.523,4.415,5.492,5.277,4.308,4.631,4.954,5.492,5.6,4.738,4.954,4.954,3.877,4.308,4.2,5.492,7.108,7.538,7.538,8.292,8.4,8.077,6.461,4.523,3.662,3.662,3.015,2.046,1.292,0.969,0.862,0.862,0.754,0.754,0.646,0.754,0.754,0.538,0.646,0.646,0.754,0.646,0.646,0.538,0.754,0.646,0.754,0.646,1.508,2.262,2.369,2.262,2.262,2.154,2.154,1.4,0.538,0.754,0.754,0.754,0.754,0.754,0.969,1.185,0.862,1.292,1.4,1.4,1.723,1.831,2.585,3.877,4.2,4.846,4.954,5.708,7.646,7.861,7.431,8.077,7.861,8.4,8.185,6.569,5.385,4.738,3.985,4.092,3.662,3.554,3.554,5.708,7.215,8.723,8.831,8.938,10.123,11.2,10.554,10.661,10.554,10.877,10.769,10.877,11.2,12.492,12.169,13.785,15.4,16.908,18.2,18.308,17.123,18.954,17.661,17.231,17.877,17.015,18.415,19.169,19.6,23.692,26.708,26.169,27.354,29.831,32.092,32.738,31.231,29.723,35.107,36.507,36.4,40.277,41.892,44.369,43.83,37.692,37.046,37.046,33.384,32.523,28.969,27.784,28.646,26.815,24.984,23.692,22.4,22.184,22.938,21.754,23.584,24.123,28.754,30.477,32.2,35.861,36.938,36.4,45.123,45.661,50.723,59.661,61.815,66.553,71.076,80.015,85.399,100.584,110.707,122.768,129.661,134.722,126.538,152.599,155.399,159.276,162.83,172.091,178.445,193.414,197.506,207.629,211.399,224.752,227.014,228.952,240.906,241.229,241.983,250.168,250.706,253.291,251.783,266.86,270.737,281.721,301.752,315.106,314.244,324.475,326.844,336.967,324.906,346.013,331.367,340.198,341.598,346.444,366.798]},{"iso":"SWZ","continent":"Africa","population":1160164,"name":"Eswatini","population_density":79.492,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,4,4,4,4,6,9,9,9,9,9,9,9,9,9,9,10,10,12,12,12,12,14,15,15,15,16,16,22,22,24,31,31,31,36,56,59,65,71,91,100,106,108,112,116,119,123,153,159,163,172,175,184,187,187,190,202,203,205,208,217,220,225,238,250,256,261,272,279,279,283,285,293,294,295,300,305,322,333,340,371,398,449,472,486,490,506,520,563,586,623,627,635,643,674,690,706,728,745,781,795,812,840,873,909,954,988,1011,1056,1138,1213,1257,1311,1351,1389,1434,1489,1552,1619,1729,1793,1826,1894,1938,2021,2073,2142,2207,2316,2404,2551,2577,2648,2706,2775,2838,2856,2909,2968,3036,3128,3236,3309,3410,3525,3599,3670,3745,3839,3894,3989,4058,4110,4128,4189,4225,4304,4327,4387,4433,4461,4510,4561,4577,4618,4668,4720,4780,4819,4853,4884,4904,4936,4994,5025,5050,5075,5104,5128,5155,5191,5215,5245,5269,5282,5307,5343,5375,5399,5419,5431,5452,5462,5482,5500,5521,5530,5569,5579,5598,5617,5632,5644,5660,5669,5683,5696,5715,5733,5746,5765,5780,5788,5800,5805,5814,5831,5847,5854,5863,5875,5886,5899,5909,5917,5925,5929,5942,5955,5967,5976,5989,6003,6013,6024,6044,6060,6076,6093,6095,6105,6124,6144,6156,6185,6205,6219,6233,6247,6272,6329,6362,6406,6410,6419,6442,6455,6474,6480,6495,6501,6529,6563,6612,6633,6685,6714,6768,6825,6912,7026,7093],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.862,0.862,0.862,0.862,0.862,0.862,0.862,0.862,3.448,3.448,3.448,3.448,5.172,7.758,7.758,7.758,7.758,7.758,7.758,7.758,7.758,7.758,7.758,8.619,8.619,10.343,10.343,10.343,10.343,12.067,12.929,12.929,12.929,13.791,13.791,18.963,18.963,20.687,26.72,26.72,26.72,31.03,48.269,50.855,56.027,61.198,78.437,86.195,91.366,93.09,96.538,99.986,102.572,106.019,131.878,137.05,140.497,148.255,150.841,158.598,161.184,161.184,163.77,174.113,174.975,176.699,179.285,187.043,189.628,193.938,205.143,215.487,220.658,224.968,234.45,240.483,240.483,243.931,245.655,252.551,253.412,254.274,258.584,262.894,277.547,287.028,293.062,319.782,343.055,387.014,406.839,418.906,422.354,436.145,448.212,485.276,505.101,536.993,540.441,547.336,554.232,580.952,594.744,608.535,627.497,642.151,673.181,685.248,699.901,724.036,752.48,783.51,822.298,851.604,871.429,910.216,980.896,1045.542,1083.468,1130.013,1164.491,1197.245,1236.032,1283.439,1337.742,1395.492,1490.307,1545.471,1573.915,1632.528,1670.453,1741.995,1786.816,1846.291,1902.317,1996.269,2072.121,2198.827,2221.238,2282.436,2332.429,2391.903,2446.206,2461.721,2507.404,2558.259,2616.871,2696.171,2789.261,2852.183,2939.24,3038.364,3102.148,3163.346,3227.992,3309.015,3356.422,3438.307,3497.781,3542.603,3558.118,3610.696,3641.727,3709.82,3729.645,3781.362,3821.012,3845.146,3887.381,3931.341,3945.132,3980.472,4023.569,4068.39,4120.107,4153.723,4183.029,4209.75,4226.989,4254.571,4304.564,4331.284,4352.833,4374.382,4399.378,4420.065,4443.337,4474.367,4495.054,4520.913,4541.599,4552.805,4574.353,4605.383,4632.966,4653.652,4670.891,4681.235,4699.336,4707.955,4725.194,4740.709,4758.81,4766.567,4800.183,4808.803,4825.18,4841.557,4854.486,4864.829,4878.621,4886.378,4898.445,4909.651,4926.028,4941.543,4952.748,4969.125,4982.054,4988.95,4999.293,5003.603,5011.36,5026.014,5039.805,5045.838,5053.596,5063.939,5073.421,5084.626,5093.245,5100.141,5107.037,5110.484,5121.69,5132.895,5143.238,5150.996,5162.201,5174.268,5182.888,5192.369,5209.608,5223.399,5237.191,5251.844,5253.568,5262.187,5278.564,5295.803,5306.146,5331.143,5348.382,5360.449,5372.516,5384.584,5406.132,5455.263,5483.707,5521.633,5525.081,5532.838,5552.663,5563.869,5580.246,5585.417,5598.346,5603.518,5627.653,5656.959,5699.194,5717.295,5762.116,5787.113,5833.658,5882.789,5957.778,6056.04,6113.791],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2.586,0,0,0,1.724,2.586,0,0,0,0,0,0,0,0,0,0.862,0,1.724,0,0,0,1.724,0.862,0,0,0.862,0,5.172,0,1.724,6.034,0,0,4.31,17.239,2.586,5.172,5.172,17.239,7.758,5.172,1.724,3.448,3.448,2.586,3.448,25.858,5.172,3.448,7.758,2.586,7.758,2.586,0,2.586,10.343,0.862,1.724,2.586,7.758,2.586,4.31,11.205,10.343,5.172,4.31,9.481,6.034,0,3.448,1.724,6.896,0.862,0.862,4.31,4.31,14.653,9.481,6.034,26.72,23.273,43.959,19.825,12.067,3.448,13.791,12.067,37.064,19.825,31.892,3.448,6.896,6.896,26.72,13.791,13.791,18.963,14.653,31.03,12.067,14.653,24.135,28.444,31.03,38.788,29.306,19.825,38.788,70.68,64.646,37.926,46.545,34.478,32.754,38.788,47.407,54.303,57.75,94.814,55.165,28.444,58.612,37.926,71.542,44.821,59.474,56.027,93.952,75.851,126.706,22.411,61.198,49.993,59.474,54.303,15.515,45.683,50.855,58.612,79.299,93.09,62.922,87.057,99.124,63.784,61.198,64.646,81.023,47.407,81.885,59.474,44.821,15.515,52.579,31.03,68.094,19.825,51.717,39.65,24.135,42.235,43.959,13.791,35.34,43.097,44.821,51.717,33.616,29.306,26.72,17.239,27.582,49.993,26.72,21.549,21.549,24.996,20.687,23.273,31.03,20.687,25.858,20.687,11.205,21.549,31.03,27.582,20.687,17.239,10.343,18.101,8.619,17.239,15.515,18.101,7.758,33.616,8.619,16.377,16.377,12.929,10.343,13.791,7.758,12.067,11.205,16.377,15.515,11.205,16.377,12.929,6.896,10.343,4.31,7.758,14.653,13.791,6.034,7.758,10.343,9.481,11.205,8.619,6.896,6.896,3.448,11.205,11.205,10.343,7.758,11.205,12.067,8.619,9.481,17.239,13.791,13.791,14.653,1.724,8.619,16.377,17.239,10.343,24.996,17.239,12.067,12.067,12.067,21.549,49.131,28.444,37.926,3.448,7.758,19.825,11.205,16.377,5.172,12.929,5.172,24.135,29.306,42.235,18.101,44.821,24.996,46.545,49.131,74.989,98.262,57.75],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2.586,2.586,2.586,2.586,4.31,6.896,6.896,6.896,4.31,4.31,4.31,4.31,2.586,0,0,0.862,0.862,2.586,2.586,2.586,2.586,4.31,5.172,4.31,4.31,3.448,3.448,8.62,8.62,8.62,13.792,13.792,13.792,17.24,34.479,31.893,37.065,40.513,51.718,59.476,64.648,62.062,48.271,49.133,46.547,44.823,53.442,50.856,49.132,55.166,54.304,58.614,58.614,55.166,31.894,37.065,34.479,28.445,28.445,28.445,28.445,32.755,41.374,41.374,45.684,48.27,55.165,53.441,50.855,49.993,40.512,37.065,32.755,29.307,24.136,22.412,37.065,43.098,47.408,67.232,89.643,132.74,148.255,156.012,144.807,149.117,155.15,165.494,162.046,149.979,133.602,128.431,131.879,144.808,146.532,123.259,122.397,105.158,132.74,137.911,145.668,143.083,157.736,174.975,194.8,209.453,198.248,224.969,280.996,321.507,330.989,346.504,342.194,345.642,364.605,373.224,356.847,349.951,406.839,415.459,409.425,435.283,434.421,458.556,449.074,450.798,412.011,450.798,498.205,566.299,550.784,540.44,545.612,545.612,543.888,465.451,435.283,359.432,395.633,413.734,456.831,460.279,493.033,576.642,594.743,605.086,611.12,612.844,567.161,586.124,558.541,504.238,455.969,447.35,413.734,400.805,373.223,343.055,323.231,302.545,329.265,320.645,303.406,270.652,293.924,287.028,299.095,308.576,295.647,278.408,281.856,274.098,280.994,262.893,232.725,220.658,216.348,210.315,216.349,219.797,190.491,189.629,188.767,178.423,174.976,185.319,189.628,179.285,175.837,160.322,157.736,155.15,150.84,135.325,125.844,112.915,129.292,127.568,125.844,133.602,129.292,124.12,119.81,119.81,98.261,100.847,100.847,99.985,98.261,104.295,103.433,102.571,100.847,93.952,85.333,84.471,87.057,76.714,71.543,74.99,74.128,81.023,81.884,74.127,67.232,64.646,68.093,68.955,69.817,66.37,68.956,74.127,75.85,81.883,87.917,90.503,93.951,100.846,91.365,87.917,95.675,103.433,96.537,107.742,111.19,108.604,118.947,122.395,127.567,159.459,177.56,190.49,176.699,172.39,180.148,179.286,174.114,130.155,114.64,81.886,102.573,124.121,146.531,153.427,181.871,201.695,235.311,279.27,330.124,399.08,414.595],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.369,0.369,0.369,0.369,0.616,0.985,0.985,0.616,0.616,0.616,0.616,0.369,0,0,0,0.123,0.123,0.369,0.369,0.369,0.369,0.616,0.616,0.616,0.369,0.493,0.493,1.231,0.985,1.108,1.97,1.97,1.847,2.463,4.187,4.556,5.049,4.925,7.388,8.496,8.619,6.403,6.526,6.28,5.91,3.94,6.526,6.526,6.772,7.388,7.265,8.004,7.881,4.187,3.817,4.802,3.817,3.694,2.955,3.694,4.063,4.31,4.433,5.787,6.28,6.526,6.772,7.265,6.649,5.541,4.31,4.556,4.063,2.832,2.586,3.202,4.802,5.91,5.787,9.481,12.683,18.347,20.564,20.194,19.332,20.44,18.347,20.317,16.87,18.593,17.362,17.855,16.87,18.963,15.638,14.776,12.929,14.53,17.978,18.717,16.993,18.47,20.564,22.287,25.735,25.489,26.597,30.045,36.694,41.866,42.851,43.959,44.698,46.545,46.545,43.22,41.743,44.575,51.471,54.426,53.81,56.642,55.288,57.75,55.903,50.855,50.978,60.336,62.799,75.482,68.463,70.803,69.448,69.941,64.277,55.657,44.082,48.146,47.776,51.963,56.765,57.997,68.217,75.851,77.698,78.068,75.974,74.251,72.034,71.295,65.631,62.922,56.396,54.672,47.53,50.485,41.62,40.512,39.773,41.004,39.526,41.373,33.616,35.832,34.601,35.34,39.28,38.049,35.956,37.803,35.217,33,33.739,30.168,28.444,27.336,27.09,27.582,26.967,24.258,23.396,24.011,23.888,21.918,22.041,23.149,22.657,22.657,21.426,19.948,20.933,19.086,17.116,15.392,15.023,13.668,16.993,15.638,16.746,16.623,16.254,15.146,16.008,12.314,12.806,12.067,12.067,12.437,12.56,12.929,13.668,12.929,12.806,11.082,9.974,10.467,10.097,9.112,9.235,9.235,9.974,10.467,9.605,8.619,8.743,8.127,8.25,8.496,8.373,8.25,8.866,9.605,10.343,10.097,10.959,11.452,12.314,12.806,11.328,11.328,12.314,12.314,11.821,13.422,13.791,15.269,15.761,15.146,15.761,21.302,21.795,24.75,23.519,22.903,24.011,22.534,17.855,14.53,10.959,11.205,13.545,14.899,19.332,19.579,25.243,26.967,32.877,36.448,42.974,50.978,56.642]},{"iso":"ETH","continent":"Africa","population":114963583,"name":"Ethiopia","population_density":104.957,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,5,5,6,6,9,9,11,11,12,12,12,16,16,21,23,26,29,29,35,38,43,44,52,55,56,65,69,71,74,82,85,92,96,105,108,111,114,116,116,117,122,123,124,126,130,131,133,133,135,140,145,162,191,194,210,239,250,261,263,272,287,306,317,352,365,389,399,433,494,582,655,701,731,831,968,1063,1172,1257,1344,1486,1636,1805,1934,2020,2156,2336,2506,2670,2915,3166,3345,3521,3630,3759,3954,4070,4469,4532,4663,4848,5034,5175,5425,5570,5689,5846,5846,5846,5846,5846,5846,5846,5846,5846,6774,6973,7120,7402,7560,7766,7969,8181,8475,8803,9147,9503,10207,11072,11524,11933,12693,13248,13968,14547,15200,15810,16615,17530,17999,18706,19289,19877,20336,20900,21452,22253,22818,23591,24175,25118,26204,27242,28894,29876,31336,32722,34058,35836,37665,39033,40671,42143,43688,45221,46407,48140,49654,51122,52131,53304,54409,55213,56516,57466,58672,59648,60784,61700,62578,63367,63888,64301,64786,65486,66224,66913,67515,68131,68820,69709,70422,71083,71687,72173,72700,73332,73944,74584,75368,76098,76988,77860,78819,79437,80003,80895,81797,82662,83429,84295,85136,85718,86430,87169,87834,88434,89137,89860,90490,91118,91693,92229,92858,93343,93707,94218,94820,95301,95789,96169,96583,96942,97502,97881,98391,98746,99201,99675,99982,100327,100727,101248,101757,102321,102720,103056,103395,103928,104427,104879,105352,105785,106203,106591,107109,107669,108438,108930,109534,110074,110554,110984,111579,112091,112740,113295,113735,114266,114834,115360,115782,116297,116769,117242,117542,118006,118481],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.009,0.009,0.009,0.043,0.043,0.052,0.052,0.078,0.078,0.096,0.096,0.104,0.104,0.104,0.139,0.139,0.183,0.2,0.226,0.252,0.252,0.304,0.331,0.374,0.383,0.452,0.478,0.487,0.565,0.6,0.618,0.644,0.713,0.739,0.8,0.835,0.913,0.939,0.966,0.992,1.009,1.009,1.018,1.061,1.07,1.079,1.096,1.131,1.139,1.157,1.157,1.174,1.218,1.261,1.409,1.661,1.687,1.827,2.079,2.175,2.27,2.288,2.366,2.496,2.662,2.757,3.062,3.175,3.384,3.471,3.766,4.297,5.062,5.697,6.098,6.359,7.228,8.42,9.246,10.195,10.934,11.691,12.926,14.231,15.701,16.823,17.571,18.754,20.319,21.798,23.225,25.356,27.539,29.096,30.627,31.575,32.697,34.394,35.403,38.873,39.421,40.561,42.17,43.788,45.014,47.189,48.45,49.485,50.851,50.851,50.851,50.851,50.851,50.851,50.851,50.851,50.851,58.923,60.654,61.933,64.386,65.76,67.552,69.318,71.162,73.719,76.572,79.564,82.661,88.785,96.309,100.24,103.798,110.409,115.236,121.499,126.536,132.216,137.522,144.524,152.483,156.563,162.712,167.784,172.898,176.891,181.797,186.598,193.566,198.48,205.204,210.284,218.487,227.933,236.962,251.332,259.874,272.573,284.629,296.25,311.716,327.625,339.525,353.773,366.577,380.016,393.351,403.667,418.741,431.911,444.68,453.457,463.66,473.272,480.265,491.599,499.863,510.353,518.843,528.724,536.692,544.329,551.192,555.724,559.316,563.535,569.624,576.043,582.036,587.273,592.631,598.624,606.357,612.559,618.309,623.563,627.79,632.374,637.872,643.195,648.762,655.582,661.931,669.673,677.258,685.6,690.975,695.899,703.658,711.504,719.028,725.699,733.232,740.548,745.61,751.803,758.231,764.016,769.235,775.35,781.639,787.119,792.581,797.583,802.245,807.717,811.935,815.102,819.546,824.783,828.967,833.212,836.517,840.118,843.241,848.112,851.409,855.845,858.933,862.891,867.014,869.684,872.685,876.164,880.696,885.124,890.03,893.5,896.423,899.372,904.008,908.349,912.28,916.395,920.161,923.797,927.172,931.678,936.549,943.238,947.517,952.771,957.468,961.644,965.384,970.56,975.013,980.658,985.486,989.313,993.932,998.873,1003.448,1007.119,1011.599,1015.704,1019.819,1022.428,1026.464,1030.596],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.035,0,0.009,0,0.026,0,0.017,0,0.009,0,0,0.035,0,0.043,0.017,0.026,0.026,0,0.052,0.026,0.043,0.009,0.07,0.026,0.009,0.078,0.035,0.017,0.026,0.07,0.026,0.061,0.035,0.078,0.026,0.026,0.026,0.017,0,0.009,0.043,0.009,0.009,0.017,0.035,0.009,0.017,0,0.017,0.043,0.043,0.148,0.252,0.026,0.139,0.252,0.096,0.096,0.017,0.078,0.13,0.165,0.096,0.304,0.113,0.209,0.087,0.296,0.531,0.765,0.635,0.4,0.261,0.87,1.192,0.826,0.948,0.739,0.757,1.235,1.305,1.47,1.122,0.748,1.183,1.566,1.479,1.427,2.131,2.183,1.557,1.531,0.948,1.122,1.696,1.009,3.471,0.548,1.139,1.609,1.618,1.226,2.175,1.261,1.035,1.366,0,0,0,0,0,0,0,0,8.072,1.731,1.279,2.453,1.374,1.792,1.766,1.844,2.557,2.853,2.992,3.097,6.124,7.524,3.932,3.558,6.611,4.828,6.263,5.036,5.68,5.306,7.002,7.959,4.08,6.15,5.071,5.115,3.993,4.906,4.802,6.967,4.915,6.724,5.08,8.203,9.446,9.029,14.37,8.542,12.7,12.056,11.621,15.466,15.909,11.899,14.248,12.804,13.439,13.335,10.316,15.074,13.169,12.769,8.777,10.203,9.612,6.994,11.334,8.263,10.49,8.49,9.881,7.968,7.637,6.863,4.532,3.592,4.219,6.089,6.419,5.993,5.236,5.358,5.993,7.733,6.202,5.75,5.254,4.227,4.584,5.497,5.323,5.567,6.82,6.35,7.742,7.585,8.342,5.376,4.923,7.759,7.846,7.524,6.672,7.533,7.315,5.062,6.193,6.428,5.784,5.219,6.115,6.289,5.48,5.463,5.002,4.662,5.471,4.219,3.166,4.445,5.236,4.184,4.245,3.305,3.601,3.123,4.871,3.297,4.436,3.088,3.958,4.123,2.67,3.001,3.479,4.532,4.427,4.906,3.471,2.923,2.949,4.636,4.341,3.932,4.114,3.766,3.636,3.375,4.506,4.871,6.689,4.28,5.254,4.697,4.175,3.74,5.176,4.454,5.645,4.828,3.827,4.619,4.941,4.575,3.671,4.48,4.106,4.114,2.61,4.036,4.132],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.035,0.035,0.044,0.044,0.07,0.07,0.087,0.087,0.061,0.061,0.052,0.087,0.061,0.104,0.104,0.13,0.147,0.147,0.199,0.19,0.233,0.199,0.252,0.252,0.235,0.313,0.296,0.287,0.27,0.331,0.287,0.322,0.348,0.348,0.339,0.348,0.348,0.295,0.269,0.217,0.225,0.156,0.139,0.13,0.139,0.131,0.148,0.139,0.113,0.147,0.181,0.312,0.529,0.546,0.668,0.92,0.999,1.052,1.026,0.956,0.834,0.973,0.93,0.982,0.999,1.112,1.182,1.4,1.801,2.401,2.94,3.036,3.184,3.845,4.95,5.48,5.897,5.871,5.993,6.828,7.872,8.472,8.402,8.324,8.559,9.386,10.108,10.3,11.126,11.839,12.274,13.057,12.822,12.378,12.595,12.177,13.517,11.882,11.464,11.542,12.212,12.316,12.795,13.047,10.611,11.429,10.29,8.681,7.063,5.837,3.662,2.401,1.366,0,8.072,9.803,11.082,13.535,14.909,16.701,18.467,20.311,14.796,15.918,17.631,18.275,23.025,28.757,30.923,32.637,36.691,38.666,41.937,43.876,43.432,41.214,44.284,48.685,46.154,47.476,46.284,46.363,44.676,44.276,42.076,41.084,41.919,42.493,42.502,45.59,51.043,55.166,64.734,66.309,74.094,79.426,85.967,93.23,99.693,102.563,102.441,106.703,107.442,108.721,107.416,107.024,104.284,105.154,99.683,97.082,93.255,86.914,87.932,81.121,78.442,74.163,75.267,73.032,71.057,70.926,64.124,59.453,53.182,50.781,47.319,45.344,42.943,41.438,42.899,47.04,49.023,48.684,47.519,45.753,45.101,45.24,44.57,42.404,43.022,43.622,46.11,49.468,53.226,53.105,52.705,54.897,55.923,57.097,56.027,55.975,54.948,54.634,55.904,54.573,52.511,50.206,49.649,48.405,46.57,46.971,45.78,44.014,43.701,42.701,39.752,37.908,37.664,36.385,35.628,34.271,32.401,31.305,33.01,31.862,31.062,29.966,29.679,30.497,29.566,29.444,28.052,29.287,29.278,31.096,30.609,29.409,29.688,31.323,32.185,31.585,31.272,30.132,30.297,30.749,32.306,32.541,34.889,35.237,36.377,37.308,37.847,38.212,38.882,38.465,37.421,37.969,36.542,36.464,37.23,38.065,36.56,36.586,35.047,34.333,33.116,32.533,31.724],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.006,0.01,0.01,0.012,0.007,0.009,0.007,0.007,0.009,0.009,0.012,0.015,0.017,0.021,0.021,0.024,0.027,0.027,0.026,0.032,0.032,0.034,0.037,0.039,0.035,0.037,0.037,0.037,0.045,0.039,0.045,0.046,0.046,0.04,0.039,0.03,0.026,0.021,0.019,0.016,0.015,0.017,0.019,0.02,0.014,0.015,0.02,0.024,0.04,0.075,0.076,0.096,0.129,0.137,0.144,0.126,0.101,0.116,0.119,0.097,0.127,0.129,0.157,0.158,0.181,0.234,0.329,0.377,0.418,0.425,0.537,0.665,0.707,0.733,0.748,0.799,0.938,1,1.04,1.082,1.054,1.117,1.233,1.267,1.285,1.379,1.531,1.646,1.696,1.608,1.557,1.596,1.435,1.619,1.475,1.419,1.514,1.584,1.517,1.684,1.368,1.438,1.47,1.24,1.009,0.834,0.523,0.343,0.195,0,0,1.153,1.4,1.583,1.934,2.13,2.386,2.638,1.748,1.866,2.091,2.168,2.414,3.033,3.856,4.154,4.297,4.834,5.096,5.548,5.393,5.13,5.326,5.818,6.011,5.904,5.888,5.893,5.812,5.624,5.325,4.874,5.286,5.11,5.346,5.341,5.942,6.591,7.195,8.252,8.77,9.624,10.621,11.109,11.969,12.952,12.599,13.414,13.429,13.627,13.871,13.136,13.017,13.198,12.987,12.411,11.949,11.417,10.943,10.408,9.707,9.382,9.341,9.295,9.06,9.152,8.513,7.98,6.995,6.385,5.843,5.622,5.387,5.154,5.272,5.615,6.117,6.134,6.038,5.932,5.788,5.678,5.607,5.263,5.172,5.325,5.481,5.983,6.412,6.818,6.826,6.734,6.868,7.082,7.051,6.92,6.805,7.082,7.102,6.878,6.675,6.427,6.219,6.017,5.87,5.93,5.825,5.622,5.461,5.497,5.226,4.78,4.633,4.6,4.483,4.424,4.114,4.026,4.02,4.081,3.804,3.84,3.674,3.768,3.842,3.778,3.51,3.537,3.55,3.742,3.877,3.784,3.82,3.812,3.978,3.95,3.879,3.766,3.809,3.911,3.971,3.953,4.029,4.423,4.446,4.659,4.81,4.925,4.815,4.859,4.539,4.734,4.674,4.549,4.613,4.784,4.698,4.587,4.42,4.317,4.358,4.071,3.942,3.878]},{"iso":"FJI","continent":"Oceania","population":896444,"name":"Fiji","population_density":49.562,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,3,4,5,5,5,5,5,5,5,5,7,7,12,12,14,15,15,15,16,16,16,16,16,16,17,17,17,17,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,19,21,21,21,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,29,29,29,29,31,31,31,31,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,34,34,34,34,34,35,35,35,35,35,35,35,35,35,35,35,35,35,38,38,38,38,38,38,42,42,42,42,44,44,44,44,44,44,44,44,44,46,46,46,46,46],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.116,1.116,1.116,2.231,3.347,4.462,5.578,5.578,5.578,5.578,5.578,5.578,5.578,5.578,7.809,7.809,13.386,13.386,15.617,16.733,16.733,16.733,17.848,17.848,17.848,17.848,17.848,17.848,18.964,18.964,18.964,18.964,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,20.079,21.195,23.426,23.426,23.426,29.003,29.003,29.003,29.003,29.003,29.003,29.003,29.003,29.003,29.003,30.119,30.119,30.119,30.119,30.119,30.119,30.119,30.119,30.119,30.119,30.119,30.119,30.119,30.119,30.119,30.119,30.119,30.119,30.119,30.119,30.119,30.119,30.119,30.119,30.119,31.235,31.235,31.235,31.235,31.235,31.235,31.235,31.235,31.235,31.235,31.235,31.235,31.235,31.235,31.235,31.235,31.235,31.235,31.235,32.35,32.35,32.35,32.35,34.581,34.581,34.581,34.581,35.697,35.697,35.697,35.697,35.697,35.697,35.697,35.697,35.697,35.697,35.697,35.697,35.697,35.697,35.697,35.697,35.697,35.697,35.697,35.697,35.697,35.697,35.697,35.697,35.697,35.697,35.697,35.697,35.697,35.697,35.697,35.697,35.697,35.697,35.697,35.697,35.697,35.697,35.697,35.697,35.697,35.697,36.812,36.812,36.812,36.812,36.812,36.812,36.812,36.812,37.928,37.928,37.928,37.928,37.928,37.928,37.928,37.928,37.928,37.928,37.928,37.928,37.928,39.043,39.043,39.043,39.043,39.043,39.043,39.043,39.043,39.043,39.043,39.043,39.043,39.043,42.39,42.39,42.39,42.39,42.39,42.39,46.852,46.852,46.852,46.852,49.083,49.083,49.083,49.083,49.083,49.083,49.083,49.083,49.083,51.314,51.314,51.314,51.314,51.314],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.116,1.116,1.116,1.116,0,0,0,0,0,0,0,2.231,0,5.578,0,2.231,1.116,0,0,1.116,0,0,0,0,0,1.116,0,0,0,1.116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.116,2.231,0,0,5.578,0,0,0,0,0,0,0,0,0,1.116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.116,0,0,0,2.231,0,0,0,1.116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.116,0,0,0,0,0,0,0,1.116,0,0,0,0,0,0,0,0,0,0,0,0,1.116,0,0,0,0,0,0,0,0,0,0,0,0,3.347,0,0,0,0,0,4.462,0,0,0,2.231,0,0,0,0,0,0,0,0,2.231,0,0,0,0],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.116,2.232,3.348,4.464,4.464,4.464,4.464,4.464,3.348,2.232,1.116,2.231,2.231,7.809,7.809,10.04,11.156,11.156,11.156,10.041,10.041,4.463,4.463,2.232,1.116,2.232,2.232,1.116,1.116,2.232,2.232,2.232,2.232,1.116,1.116,1.116,1.116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.116,3.347,3.347,3.347,8.925,8.925,8.925,8.925,7.809,5.578,5.578,5.578,0,0,1.116,1.116,1.116,1.116,1.116,1.116,1.116,1.116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.116,1.116,1.116,1.116,1.116,1.116,1.116,1.116,0,0,0,0,0,0,0,0,0,0,0,1.116,1.116,1.116,1.116,3.347,3.347,3.347,3.347,3.347,3.347,3.347,3.347,1.116,1.116,1.116,1.116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.116,1.116,1.116,1.116,1.116,1.116,1.116,1.116,1.116,1.116,1.116,1.116,1.116,1.116,1.116,1.116,0,0,0,0,0,1.116,1.116,1.116,1.116,1.116,1.116,1.116,1.116,0,0,0,0,0,3.347,3.347,3.347,3.347,3.347,3.347,7.809,7.809,4.462,4.462,6.693,6.693,6.693,6.693,2.231,2.231,2.231,2.231,0,2.231,2.231,2.231,2.231,2.231],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.637,0.637,0.637,0.637,0.478,0.319,0.159,0,0.319,0.319,1.116,1.116,1.434,1.594,1.594,1.275,1.434,0.637,0.637,0.319,0.159,0.159,0.319,0.159,0.159,0.159,0.319,0.319,0.319,0.159,0.159,0.159,0.159,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.159,0.478,0.478,0.478,1.275,1.275,1.275,1.116,0.797,0.797,0.797,0,0,0,0.159,0.159,0.159,0.159,0.159,0.159,0.159,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.159,0.159,0.159,0.159,0.159,0.159,0.159,0,0,0,0,0,0,0,0,0,0,0,0,0.159,0.159,0.159,0.159,0.478,0.478,0.478,0.319,0.478,0.478,0.478,0.159,0.159,0.159,0.159,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.159,0.159,0.159,0.159,0.159,0.159,0.159,0,0.159,0.159,0.159,0.159,0.159,0.159,0.159,0,0,0,0,0,0,0.159,0.159,0.159,0.159,0.159,0.159,0.159,0,0,0,0,0,0,0.478,0.478,0.478,0.478,0.478,0.478,1.116,0.637,0.637,0.637,0.956,0.956,0.956,0.319,0.319,0.319,0.319,0,0,0.319,0.319,0.319,0.319,0.319]},{"iso":"FIN","continent":"Europe","population":5540718,"name":"Finland","population_density":18.136,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,3,6,6,6,6,12,15,15,23,30,40,59,59,155,225,244,277,321,336,400,450,523,626,700,792,880,958,1041,1167,1240,1352,1418,1446,1518,1615,1882,1927,2176,2308,2487,2605,2769,2905,2974,3064,3161,3237,3369,3489,3681,3783,3868,4014,4129,4284,4395,4475,4576,4695,4740,4906,4995,5051,5176,5254,5327,5412,5573,5673,5738,5880,5962,5984,6003,6054,6145,6228,6286,6347,6380,6399,6443,6493,6537,6568,6579,6599,6628,6692,6743,6776,6826,6859,6885,6887,6911,6911,6941,6964,6981,7001,7025,7040,7064,7073,7087,7104,7108,7112,7117,7119,7133,7142,7143,7144,7155,7167,7172,7191,7198,7198,7209,7214,7236,7241,7242,7248,7253,7257,7262,7265,7273,7279,7291,7294,7295,7301,7296,7293,7301,7318,7335,7340,7351,7362,7372,7380,7388,7393,7398,7404,7414,7423,7432,7443,7453,7466,7483,7512,7532,7554,7568,7584,7601,7623,7642,7683,7700,7720,7731,7752,7776,7805,7842,7871,7906,7920,7938,7981,8002,8019,8042,8049,8077,8086,8142,8161,8200,8225,8261,8291,8327,8337,8430,8469,8512,8557,8580,8627,8725,8750,8799,8858,8922,8980,9046,9195,9288,9379,9484,9577,9682,9743,9892,9992,10103,10244,10391,10538,10702,10929,11049,11345,11580,11849,11998,12212,12499,12703,12944,13133,13293,13424,13555,13849,14071,14255,14474,14652,14848,14970,15163,15378,15566,15910,16113,16291,16400,16637,16930,17119,17385,17385,17797,17887,18107,18345,18542,18858,19102,19315,19419,19647,19935,20286,20747,21216,21639,21936,22289,22652,23148,23766,24307,24629,24912,25462,25882,26422,26758,27218,27631,27881,28242,28732,29572,30073,30450,30810,31110,31459,31870,32228],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.18,0.18,0.18,0.18,0.18,0.18,0.18,0.18,0.18,0.18,0.18,0.18,0.18,0.18,0.18,0.18,0.18,0.18,0.18,0.18,0.18,0.18,0.18,0.18,0.18,0.18,0.18,0.18,0.361,0.361,0.361,0.541,1.083,1.083,1.083,1.083,2.166,2.707,2.707,4.151,5.414,7.219,10.648,10.648,27.975,40.608,44.038,49.994,57.935,60.642,72.193,81.217,94.392,112.982,126.337,142.942,158.824,172.902,187.882,210.623,223.798,244.012,255.924,260.977,273.972,291.478,339.667,347.789,392.729,416.553,448.859,470.156,499.755,524.3,536.754,552.997,570.504,584.22,608.044,629.702,664.354,682.763,698.104,724.455,745.21,773.185,793.218,807.657,825.886,847.363,855.485,885.445,901.508,911.615,934.175,948.253,961.428,976.769,1005.826,1023.875,1035.606,1061.234,1076.034,1080.004,1083.434,1092.638,1109.062,1124.042,1134.51,1145.519,1151.475,1154.904,1162.846,1171.87,1179.811,1185.406,1187.391,1191.001,1196.235,1207.786,1216.99,1222.946,1231.97,1237.926,1242.619,1242.98,1247.311,1247.311,1252.726,1256.877,1259.945,1263.555,1267.886,1270.593,1274.925,1276.549,1279.076,1282.144,1282.866,1283.588,1284.491,1284.852,1287.378,1289.003,1289.183,1289.364,1291.349,1293.515,1294.417,1297.846,1299.11,1299.11,1301.095,1301.997,1305.968,1306.87,1307.051,1308.134,1309.036,1309.758,1310.66,1311.202,1312.646,1313.729,1315.894,1316.436,1316.616,1317.699,1316.797,1316.255,1317.699,1320.767,1323.836,1324.738,1326.723,1328.709,1330.513,1331.957,1333.401,1334.304,1335.206,1336.289,1338.094,1339.718,1341.342,1343.328,1345.133,1347.479,1350.547,1355.781,1359.391,1363.361,1365.888,1368.776,1371.844,1375.814,1379.244,1386.643,1389.712,1393.321,1395.307,1399.097,1403.428,1408.662,1415.34,1420.574,1426.891,1429.418,1432.666,1440.427,1444.217,1447.285,1451.436,1452.7,1457.753,1459.378,1469.485,1472.914,1479.953,1484.465,1490.962,1496.376,1502.874,1504.679,1521.463,1528.502,1536.263,1544.385,1548.536,1557.018,1574.706,1579.218,1588.061,1598.71,1610.261,1620.729,1632.64,1659.532,1676.317,1692.741,1711.692,1728.476,1747.427,1758.436,1785.328,1803.376,1823.41,1848.858,1875.389,1901.92,1931.519,1972.488,1994.146,2047.569,2089.982,2138.532,2165.423,2204.046,2255.845,2292.663,2336.159,2370.27,2399.148,2422.791,2446.434,2499.496,2539.563,2572.771,2612.297,2644.423,2679.797,2701.816,2736.649,2775.453,2809.383,2871.469,2908.107,2940.233,2959.905,3002.679,3055.561,3089.672,3137.68,3137.68,3212.039,3228.282,3267.988,3310.943,3346.498,3403.53,3447.568,3486.01,3504.78,3545.93,3597.909,3661.258,3744.461,3829.107,3905.451,3959.054,4022.764,4088.279,4177.798,4289.336,4386.977,4445.092,4496.168,4595.433,4671.236,4768.696,4829.338,4912.36,4986.899,5032.019,5097.173,5185.61,5337.214,5427.636,5495.678,5560.651,5614.796,5677.784,5751.962,5816.575],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.18,0,0,0.18,0.541,0,0,0,1.083,0.541,0,1.444,1.263,1.805,3.429,0,17.326,12.634,3.429,5.956,7.941,2.707,11.551,9.024,13.175,18.59,13.356,16.604,15.882,14.078,14.98,22.741,13.175,20.214,11.912,5.053,12.995,17.507,48.189,8.122,44.94,23.824,32.306,21.297,29.599,24.546,12.453,16.243,17.507,13.717,23.824,21.658,34.653,18.409,15.341,26.35,20.755,27.975,20.034,14.439,18.229,21.477,8.122,29.96,16.063,10.107,22.56,14.078,13.175,15.341,29.058,18.048,11.731,25.628,14.8,3.971,3.429,9.205,16.424,14.98,10.468,11.009,5.956,3.429,7.941,9.024,7.941,5.595,1.985,3.61,5.234,11.551,9.205,5.956,9.024,5.956,4.693,0.361,4.332,0,5.414,4.151,3.068,3.61,4.332,2.707,4.332,1.624,2.527,3.068,0.722,0.722,0.902,0.361,2.527,1.624,0.18,0.18,1.985,2.166,0.902,3.429,1.263,0,1.985,0.902,3.971,0.902,0.18,1.083,0.902,0.722,0.902,0.541,1.444,1.083,2.166,0.541,0.18,1.083,-0.902,-0.541,1.444,3.068,3.068,0.902,1.985,1.985,1.805,1.444,1.444,0.902,0.902,1.083,1.805,1.624,1.624,1.985,1.805,2.346,3.068,5.234,3.61,3.971,2.527,2.888,3.068,3.971,3.429,7.4,3.068,3.61,1.985,3.79,4.332,5.234,6.678,5.234,6.317,2.527,3.249,7.761,3.79,3.068,4.151,1.263,5.053,1.624,10.107,3.429,7.039,4.512,6.497,5.414,6.497,1.805,16.785,7.039,7.761,8.122,4.151,8.483,17.687,4.512,8.844,10.648,11.551,10.468,11.912,26.892,16.785,16.424,18.951,16.785,18.951,11.009,26.892,18.048,20.034,25.448,26.531,26.531,29.599,40.969,21.658,53.423,42.413,48.55,26.892,38.623,51.798,36.818,43.496,34.111,28.877,23.643,23.643,53.062,40.067,33.209,39.526,32.126,35.374,22.019,34.833,38.804,33.931,62.086,36.638,32.126,19.673,42.774,52.881,34.111,48.008,0,74.359,16.243,39.706,42.955,35.555,57.032,44.038,38.443,18.77,41.15,51.979,63.349,83.202,84.646,76.344,53.603,63.71,65.515,89.519,111.538,97.641,58.115,51.076,99.265,75.802,97.46,60.642,83.022,74.539,45.121,65.154,88.436,151.605,90.421,68.042,64.974,54.145,62.988,74.178,64.613],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.18,0.18,0.18,0.36,0.901,0.901,0.901,0.901,1.804,2.345,2.345,3.609,4.331,6.136,9.565,9.565,25.808,37.901,41.33,45.842,52.52,53.422,61.544,70.568,66.417,72.373,82.3,92.948,100.889,112.26,115.689,129.406,129.406,131.03,129.586,118.035,115.148,118.577,151.786,137.167,168.932,172.542,192.936,209.18,225.784,232.823,197.087,205.208,177.775,167.668,159.186,159.547,164.601,158.464,161.352,171.459,174.707,188.965,185.175,177.956,161.532,164.6,157.381,160.991,156.299,138.431,140.957,140.596,135.542,129.406,150.342,138.43,134.098,149.619,141.859,131.752,122.006,115.87,103.236,100.168,98.905,84.286,75.442,74.9,79.412,79.231,70.748,61.363,52.88,45.481,44.759,52.881,54.145,51.077,52.16,52.521,55.229,51.98,51.078,39.527,35.736,33.931,27.975,25.629,25.268,27.614,27.614,29.238,26.351,25.268,22.922,20.034,16.604,14.258,12.453,12.453,10.106,7.218,8.481,9.925,9.925,12.993,11.729,10.105,11.91,12.632,14.618,13.354,12.632,10.286,9.925,10.647,9.564,9.203,6.676,6.857,8.843,8.301,7.579,7.94,6.136,5.054,5.054,7.039,7.941,8.302,10.107,11.009,13.716,15.701,15.701,13.535,11.369,11.55,11.37,11.009,10.828,11.369,11.73,13.174,15.34,19.491,21.296,23.643,24.546,25.449,26.712,28.337,28.698,30.864,30.322,29.961,29.419,30.321,31.585,32.848,36.097,33.931,37.18,36.097,37.361,41.332,40.79,38.624,36.097,32.126,30.862,29.959,36.817,32.485,35.734,37.178,39.524,43.675,45.119,45.3,51.978,55.588,56.31,59.92,57.574,60.643,71.833,74.54,66.599,70.208,73.998,76.344,84.105,102.514,101.612,113.524,123.631,129.768,137.168,137.709,152.689,143.845,147.094,156.118,163.698,173.444,184.092,214.052,208.818,244.193,266.572,289.674,290.035,302.127,324.326,320.175,342.013,322.701,309.165,284.258,281.009,295.448,283.717,280.108,276.138,274.153,280.65,279.026,290.216,275.958,269.822,298.699,295.811,295.811,280.11,300.865,318.913,314.22,328.297,266.211,303.932,288.049,308.082,308.263,290.937,313.858,309.888,348.331,292.742,317.649,329.922,350.316,397.963,425.577,457.883,473.043,517.983,542.348,579.888,628.077,642.516,615.985,590.717,636.379,648.471,680.416,651.539,623.023,599.921,586.927,601.005,590.176,665.979,658.94,666.34,648.292,627.898,645.765,654.789,630.966],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.026,0.026,0.026,0.052,0.129,0.129,0.129,0.103,0.258,0.335,0.309,0.438,0.619,0.877,1.367,1.212,3.61,5.414,5.698,6.368,7.245,7.142,8.792,7.606,7.683,9.849,10.906,12.144,14.026,14.387,15.238,16.604,15.831,16.811,16.14,14.593,14.439,14.8,18.435,17.713,21.245,22.947,26.84,28.026,29.754,26.376,26.995,22.895,21.993,19.337,19.698,18.564,20.008,20.859,20.73,21.993,22.999,23.592,23.36,20.472,20.446,21.323,18.719,20.034,18.332,16.914,18.074,17.481,16.295,17.326,17.197,17.481,17.713,18.151,18.254,16.94,15.238,12.402,12.17,12.634,10.468,9.927,10.21,10.21,10.03,8.973,7.967,7.271,5.982,5.647,5.904,6.42,6.446,6.162,6.652,7.219,7.374,6.678,5.647,4.332,4.254,3.558,3.146,2.991,3.558,3.326,3.945,3.403,3.171,3.171,2.759,2.243,1.985,1.418,1.547,1.418,1.006,0.928,1.109,1.289,1.367,1.495,1.444,1.418,1.676,1.521,1.779,1.779,1.315,1.289,1.418,1.238,1.238,0.748,0.825,0.954,1.109,1.057,0.98,1.006,0.799,0.516,0.567,0.696,1.057,1.16,1.289,1.702,2.037,2.037,1.805,1.495,1.495,1.367,1.341,1.315,1.341,1.418,1.547,1.753,2.037,2.527,2.81,3.146,3.223,3.378,3.481,3.61,3.352,3.893,3.764,3.919,3.79,3.893,3.945,4.203,4.1,4.409,4.796,4.873,4.796,5.286,5.079,4.564,4.409,3.687,4.048,3.816,4.151,4.1,4.667,4.718,5.466,5.518,6.214,5.028,6.936,6.936,7.4,7.632,7.451,7.735,10.004,8.251,8.508,8.921,9.411,10.313,10.803,12.118,13.871,14.954,16.14,16.888,18.1,17.971,17.971,18.151,18.667,19.595,20.987,22.07,24.726,26.737,27.253,32.023,34.446,37.592,37.643,38.933,40.48,42.645,41.227,40.041,37.231,36.767,34.627,34.807,35.271,33.802,34.575,35.039,36.715,36.483,33.879,33.699,33.802,37.025,37.669,37.205,36.87,38.004,40.015,40.041,38.03,32.796,38.829,38.34,37.901,36.483,36.689,37.979,44.27,39.139,39.5,39.706,40.995,44.966,48.704,54.506,59.92,64.896,68.119,70.053,73.791,77.839,79.696,77.092,76.731,81.81,83.28,84.414,77.143,75.055,77.401,76.55,71.677,73.482,81.217,85.471,83.331,81.965,83.254,82.944,80.908,68.48]},{"iso":"FRA","continent":"Europe","population":65273512,"name":"France","population_density":122.578,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,3,3,4,5,5,5,6,6,6,6,6,6,6,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,14,18,38,57,100,130,191,212,288,426,616,948,1125,1411,1783,2293,2293,3681,4496,4532,6683,7715,9124,10970,12758,14463,16758,20123,22372,25334,29252,33047,37692,40295,44649,52278,57122,59228,64452,47378,48233,50887,47396,51251,55035,56600,58045,108791,111932,129380,132588,145166,147057,150863,151955,154402,157068,158868,157158,159969,161647,162280,165966,169098,167643,168861,169387,170179,170540,171102,172219,176355,177096,177627,178156,178405,178719,179472,179993,180635,181148,181563,181703,182147,182648,183130,183397,184153,184699,184260,184585,184840,185012,188355,188949,190744,190975,191382,190735,187509,191869,192450,193022,193363,193637,194190,194815,195179,195981,196478,196868,197004,197667,198155,198741,199528,200147,200490,200632,201330,201598,201853,203116,203564,203158,203803,204244,205234,205773,206312,206670,206681,207699,208153,208975,209419,210134,210385,210401,211824,211886,212613,213182,214011,214174,214178,216089,216684,217605,218841,219932,220020,220020,222508,223072,224542,225931,227239,227302,227305,230665,231636,233344,234945,237332,237402,237437,242168,243582,246180,248858,251781,254991,257994,258644,260763,264535,269335,274344,277818,282498,284474,288090,288377,299580,307221,312681,318047,321160,326264,333377,340499,349333,357927,364943,369209,375947,384566,394328,403837,415174,421519,427915,435741,445932,456171,469404,482964,493500,499039,509123,522414,538264,554368,568588,579223,583522,591527,605893,618944,631380,647868,660372,666011,677321,696274,713676,734764,761441,777378,786590,800216,823218,852975,878607,910711,940548,954837,975213,1002635,1043448,1086285,1131550,1138166,1211176,1245658,1283208,1329820,1379294,1414364,1460543,1566634,1639235,1593159,1650965,1711917,1798572,1837134,1858558,1881171,1917577,1950205,1974270,2006227,2033419,2043469,2089071,2117968,2138704,2161968,2179638,2192768,2197830,2207751,2224505,2237506,2250280,2262757,2272520,2276874,2285238,2299466,2312253,2323764,2336646,2347595,2351006,2365043,2379718,2393590,2407079,2407079,2432559,2435751,2447406,2465126,2483524],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.031,0.046,0.046,0.046,0.061,0.077,0.077,0.077,0.092,0.092,0.092,0.092,0.092,0.092,0.092,0.169,0.169,0.169,0.169,0.169,0.169,0.169,0.184,0.184,0.184,0.184,0.184,0.184,0.184,0.184,0.184,0.184,0.214,0.276,0.582,0.873,1.532,1.992,2.926,3.248,4.412,6.526,9.437,14.524,17.235,21.617,27.316,35.129,35.129,56.393,68.879,69.431,102.385,118.195,139.781,168.062,195.454,221.575,256.735,308.287,342.742,388.121,448.145,506.285,577.447,617.325,684.029,800.907,875.118,907.382,987.414,725.838,738.937,779.596,726.114,785.173,843.144,867.12,889.258,1666.694,1714.815,1982.121,2031.268,2223.965,2252.935,2311.244,2327.973,2365.462,2406.305,2433.882,2407.684,2450.749,2476.456,2486.154,2542.624,2590.607,2568.316,2586.976,2595.034,2607.168,2612.698,2621.308,2638.421,2701.785,2713.137,2721.272,2729.377,2733.191,2738.002,2749.538,2757.52,2767.355,2775.215,2781.572,2783.717,2790.519,2798.195,2805.579,2809.67,2821.252,2829.616,2822.891,2827.87,2831.777,2834.412,2885.627,2894.727,2922.227,2925.766,2932.001,2922.089,2872.666,2939.462,2948.363,2957.126,2962.35,2966.548,2975.02,2984.595,2990.172,3002.458,3010.072,3016.047,3018.131,3028.288,3035.764,3044.742,3056.799,3066.282,3071.537,3073.712,3084.406,3088.512,3092.418,3111.768,3118.631,3112.411,3122.293,3129.049,3144.216,3152.473,3160.731,3166.215,3166.384,3181.98,3188.935,3201.528,3208.331,3219.284,3223.13,3223.375,3245.175,3246.125,3257.263,3265.98,3278.681,3281.178,3281.239,3310.516,3319.631,3333.741,3352.677,3369.391,3370.739,3370.739,3408.856,3417.497,3440.017,3461.297,3481.336,3482.301,3482.347,3533.822,3548.698,3574.865,3599.393,3635.962,3637.034,3637.57,3710.05,3731.713,3771.515,3812.542,3857.323,3906.5,3952.507,3962.465,3994.928,4052.716,4126.253,4202.991,4256.213,4327.912,4358.184,4413.582,4417.979,4589.611,4706.672,4790.32,4872.528,4920.219,4998.413,5107.386,5216.496,5351.834,5483.495,5590.982,5656.337,5759.564,5891.609,6041.164,6186.843,6360.528,6457.734,6555.722,6675.618,6831.745,6988.608,7191.34,7399.081,7560.494,7645.352,7799.841,8003.461,8246.285,8493.001,8710.853,8873.783,8939.645,9062.282,9282.372,9482.315,9672.836,9925.435,10116.998,10203.388,10376.659,10667.022,10933.623,11256.695,11665.39,11909.548,12050.677,12259.429,12611.823,13067.705,13460.391,13952.229,14409.337,14628.246,14940.41,15360.519,15985.78,16642.049,17335.516,17436.874,18555.398,19083.668,19658.939,20373.042,21130.991,21668.269,22375.738,24001.068,25113.326,24407.435,25293.032,26226.825,27554.393,28145.169,28473.387,28819.822,29377.567,29877.433,30246.113,30735.699,31152.284,31306.252,32004.881,32447.588,32765.266,33121.674,33392.381,33593.535,33671.085,33823.077,34079.75,34278.928,34474.627,34665.777,34815.347,34882.051,35010.189,35228.164,35424.063,35600.413,35797.767,35965.508,36017.765,36232.814,36457.637,36670.158,36876.812,36876.812,37267.169,37316.071,37494.627,37766.1,38047.96],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.015,0,0,0.015,0.015,0,0,0.015,0,0,0,0,0,0,0.077,0,0,0,0,0,0,0.015,0,0,0,0,0,0,0,0,0,0.031,0.061,0.306,0.291,0.659,0.46,0.935,0.322,1.164,2.114,2.911,5.086,2.712,4.382,5.699,7.813,0,21.264,12.486,0.552,32.954,15.81,21.586,28.281,27.392,26.121,35.16,51.552,34.455,45.378,60.024,58.14,71.162,39.878,66.704,116.877,74.211,32.264,80.032,-261.576,13.099,40.66,-53.483,59.059,57.971,23.976,22.138,777.436,48.121,267.306,49.147,192.697,28.97,58.308,16.73,37.488,40.844,27.576,-26.197,43.065,25.707,9.698,56.47,47.983,-22.291,18.66,8.058,12.134,5.531,8.61,17.113,63.364,11.352,8.135,8.104,3.815,4.811,11.536,7.982,9.836,7.859,6.358,2.145,6.802,7.675,7.384,4.09,11.582,8.365,-6.726,4.979,3.907,2.635,51.215,9.1,27.5,3.539,6.235,-9.912,-49.423,66.796,8.901,8.763,5.224,4.198,8.472,9.575,5.577,12.287,7.614,5.975,2.084,10.157,7.476,8.978,12.057,9.483,5.255,2.175,10.693,4.106,3.907,19.349,6.863,-6.22,9.881,6.756,15.167,8.258,8.258,5.485,0.169,15.596,6.955,12.593,6.802,10.954,3.845,0.245,21.801,0.95,11.138,8.717,12.7,2.497,0.061,29.277,9.115,14.11,18.936,16.714,1.348,0,38.117,8.641,22.521,21.28,20.039,0.965,0.046,51.476,14.876,26.167,24.528,36.569,1.072,0.536,72.48,21.663,39.802,41.027,44.781,49.178,46.006,9.958,32.463,57.788,73.537,76.739,53.222,71.698,30.273,55.398,4.397,171.632,117.061,83.648,82.208,47.692,78.194,108.972,109.11,135.338,131.661,107.486,65.356,103.227,132.044,149.555,145.679,173.685,97.206,97.988,119.895,156.128,156.863,202.732,207.741,161.413,84.858,154.488,203.62,242.824,246.716,217.853,162.93,65.861,122.638,220.089,199.943,190.521,252.599,191.563,86.39,173.271,290.363,266.601,323.071,408.696,244.157,141.129,208.752,352.394,455.882,392.686,491.838,457.107,218.91,312.163,420.109,625.261,656.269,693.467,101.358,1118.524,528.269,575.272,714.103,757.949,537.278,707.469,1625.33,1112.258,-705.891,885.597,933.794,1327.568,590.776,328.219,346.435,557.745,499.866,368.679,489.586,416.586,153.968,698.629,442.706,317.679,356.408,270.707,201.154,77.551,151.991,256.674,199.177,195.7,191.15,149.571,66.704,128.138,217.975,195.899,176.35,197.354,167.74,52.257,215.049,224.823,212.521,206.654,0,390.357,48.902,178.556,271.473,281.86],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.015,0.015,0.015,0.03,0.045,0.045,0.045,0.06,0.045,0.045,0.045,0.03,0.015,0.015,0.092,0.077,0.077,0.077,0.077,0.077,0.077,0.092,0.015,0.015,0.015,0.015,0.015,0.015,0.015,0,0,0.031,0.092,0.398,0.689,1.348,1.808,2.743,3.065,4.198,6.251,8.856,13.651,15.704,19.626,24.39,31.881,30.717,49.867,59.442,54.908,85.15,96.578,112.465,132.933,160.325,165.182,187.856,238.856,240.357,269.925,308.363,338.222,381.992,395.749,427.293,492.618,532.374,519.26,539.268,219.552,161.489,162.271,42.084,-15.734,-31.974,-40.262,-98.156,940.856,975.878,1202.524,1305.154,1438.792,1409.791,1444.123,1438.715,698.767,691.49,451.76,376.416,226.784,223.521,174.911,214.651,225.146,162.011,153.095,187.35,156.419,136.243,135.155,95.798,111.179,144.822,134.297,134.343,126.024,125.304,128.23,119.099,65.571,62.078,60.301,54.342,57.329,60.193,56.041,52.149,53.895,54.401,41.317,44.151,41.256,36.216,80.047,85.057,100.975,96.149,109.11,94.219,40.889,105.05,62.736,62.399,40.123,40.782,43.019,62.506,117.506,62.997,61.71,58.922,55.782,61.741,60.745,60.148,66.628,63.824,61.465,57.665,66.274,60.223,56.654,67.025,61.831,46.128,50.754,55.335,59.809,63.961,68.312,54.448,47.754,69.57,66.644,72.481,64.116,66.812,62.399,57.159,78.791,64.145,68.328,64.452,70.35,61.893,58.109,87.141,74.455,87.615,95.413,103.41,92.058,89.561,127.617,106.981,120.387,127.557,128.66,112.911,111.609,163.085,139.844,157.37,159.377,174.666,155.699,155.27,227.704,197.891,222.817,237.677,257.93,270.539,315.473,324.895,284.878,321.003,354.738,390.45,398.891,421.411,405.678,451.118,423.052,536.896,580.42,587.329,616.315,592.309,640.23,693.804,798.517,762.223,776.823,800.661,783.809,839.344,893.194,933.777,970.346,1008.693,974.238,964.74,1019.279,1072.18,1096.999,1150.176,1212.238,1199.966,1187.618,1244.118,1327.843,1414.539,1504.392,1519.513,1474.702,1379.15,1416.93,1482.531,1478.854,1426.551,1432.434,1406.144,1329.604,1437.014,1604.739,1651.251,1774.379,1992.554,1984.112,1933.678,2056.04,2235.163,2400.682,2526.767,2695.534,2743.945,2718.698,2889.732,3101.089,3373.956,3574.343,3875.124,3484.644,4146.061,4455.42,4718.529,5012.523,5145.211,5026.22,5040.222,6564.194,6557.928,5323.768,5634.093,5853.784,6423.403,6476.901,6097.651,4818.756,4264.243,5470,4953.082,4508.874,3597.892,3161.084,3531.494,3627.765,3387.699,3244.241,3146.269,2857.837,2518.802,2516.825,2074.87,1831.341,1709.362,1544.104,1422.968,1288.518,1339.105,1405.089,1344.314,1321.487,1323.141,1299.731,1202.417,1350.762,1447.447,1441.993,1452.748,1276.398,1469.401,1350.563,1476.862,1533.286,1590.323],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.007,0.007,0.007,0.007,0.007,0.004,0.002,0.002,0.002,0.011,0.011,0.011,0.011,0.011,0.011,0.011,0.002,0.002,0.002,0.002,0.002,0.002,0.002,0,0,0,0.004,0.013,0.057,0.098,0.193,0.258,0.392,0.433,0.591,0.849,1.223,1.856,2.178,2.67,3.438,4.388,4.086,6.708,7.765,7.457,11.538,12.983,14.95,18.99,19.866,21.814,26.758,29.415,32.078,35.477,40.012,44.404,50.839,51.513,53.677,65.452,69.571,65.605,68.733,21.199,17.373,13.652,-10.685,-12.849,-9.177,-17.185,23.346,132.537,133.603,179.43,178.014,197.26,197.974,203.141,94.468,92.95,60.598,57.516,26.246,28.259,23.602,22.597,25.309,26.329,19.205,25.613,20.612,18.673,18.078,11.241,6.831,19.067,18.023,18.034,17.458,17.213,16.671,15.874,7.962,7.745,7.706,7.457,7.218,7.502,6.951,6.866,6.045,6.577,6.863,5.596,5.336,4.797,4.119,10.851,10.496,13.23,14.696,14.876,12.902,5.465,7.691,7.662,4.986,5.226,4.935,7.562,15.99,7.244,7.728,7.564,7.671,7.369,7.61,7.31,7.796,7.763,8.03,7.927,7.94,8.017,7.535,6.811,7.853,7.478,5.839,6.94,6.378,7.958,8.579,6.995,6.798,7.71,8.527,8.555,8.188,7.98,8.365,8.131,8.142,9.028,8.17,7.962,8.236,8.485,8.293,8.266,9.334,10.501,10.925,12.385,12.959,12.795,12.786,14.049,13.981,15.182,15.517,15.992,15.937,15.944,17.852,18.743,19.264,19.728,22.089,22.105,22.175,25.175,26.145,28.093,30.45,31.623,38.495,44.991,36.059,37.602,40.172,44.816,49.381,49.959,53.629,56.531,59.808,52.18,66.194,71.954,76.301,77.802,80.291,83.547,98.487,89.555,92.166,99.025,102.636,105.16,108.736,112.032,117.81,119.287,125.29,123.822,128.484,130.865,134.305,135.349,143.499,148.365,157.537,155.661,160.603,167.388,179.668,185.952,187.396,187.613,184.899,180.349,182.702,176.576,168.548,173.512,177.602,180.535,187.768,197.807,207.33,226.265,248.565,256.078,263.898,268.967,277.829,304.869,314.814,326.691,357.113,368.224,382.997,392.671,416.868,454.523,483.327,432.505,561.022,591.894,614.06,626.752,641.277,618.965,705.552,777.953,861.38,678.357,702.856,727.976,840.875,824.204,638.903,529.499,710.019,654.915,574.184,454.472,429.588,404.695,455.008,438.574,412.548,410.795,379.526,348.75,337.833,259.742,233.166,216.237,193.279,181.914,174.545,172.995,169.587,164.059,163.591,160.827,161.713,164.309,162.245,174.661,175.639,178.014,182.343,154.149,185.952,185.472,180.259,186.923,196.829]},{"iso":"GAB","continent":"Africa","population":2225728,"name":"Gabon","population_density":7.859,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,3,4,5,5,6,6,7,7,7,7,7,16,18,21,21,21,21,24,30,34,44,44,46,49,57,57,80,80,108,108,109,120,156,166,167,172,176,176,211,238,276,276,276,335,335,367,397,397,504,620,661,661,802,863,1004,1104,1209,1320,1320,1432,1502,1567,1567,1728,1934,1934,2135,2238,2319,2431,2613,2655,2655,2655,2803,2902,2955,3101,3101,3101,3101,3247,3375,3463,3463,3463,3463,4033,4114,4229,4340,4428,4428,4428,4739,4849,4956,5087,5209,5209,5209,5394,5394,5513,5513,5620,5620,5620,5743,5743,5871,5871,5942,5942,5942,6026,6026,6121,6121,6315,6315,6315,6433,6433,6588,6588,6984,6984,6984,7189,7189,7352,7352,7352,7531,7531,7646,7646,7787,7787,7923,7923,7923,8006,8006,8077,8077,8225,8225,8225,8270,8270,8319,8319,8388,8388,8388,8409,8409,8468,8468,8505,8505,8505,8533,8533,8538,8538,8601,8601,8601,8608,8608,8621,8621,8643,8643,8643,8654,8654,8678,8678,8696,8696,8696,8704,8704,8716,8716,8728,8728,8728,8728,8752,8766,8766,8797,8797,8797,8808,8808,8815,8815,8835,8835,8835,8860,8860,8869,8869,8881,8881,8881,8884,8884,8901,8901,8919,8919,8919,8937,8937,8957,8957,8968,8968,8968,8984,8984,9005,9005,9022,9022,9022,9029,9029,9048,9048,9062,9062,9062,9084,9084,9084,9116,9131,9131,9131,9150,9150,9173,9173,9191,9191,9191,9214,9214,9239,9239,9254,9254,9254,9278,9278,9300,9300,9330,9330,9330,9351,9351,9373,9373],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.449,0.449,0.449,0.449,0.449,0.449,1.348,1.797,2.246,2.246,2.696,2.696,3.145,3.145,3.145,3.145,3.145,7.189,8.087,9.435,9.435,9.435,9.435,10.783,13.479,15.276,19.769,19.769,20.667,22.015,25.61,25.61,35.943,35.943,48.523,48.523,48.973,53.915,70.089,74.582,75.032,77.278,79.075,79.075,94.8,106.931,124.004,124.004,124.004,150.513,150.513,164.89,178.369,178.369,226.443,278.561,296.981,296.981,360.332,387.738,451.088,496.017,543.193,593.064,593.064,643.385,674.835,704.039,704.039,776.375,868.929,868.929,959.237,1005.514,1041.906,1092.227,1173.998,1192.868,1192.868,1192.868,1259.363,1303.843,1327.655,1393.252,1393.252,1393.252,1393.252,1458.849,1516.358,1555.895,1555.895,1555.895,1555.895,1811.991,1848.384,1900.052,1949.924,1989.461,1989.461,1989.461,2129.191,2178.613,2226.687,2285.544,2340.358,2340.358,2340.358,2423.477,2423.477,2476.942,2476.942,2525.017,2525.017,2525.017,2580.279,2580.279,2637.789,2637.789,2669.688,2669.688,2669.688,2707.429,2707.429,2750.111,2750.111,2837.274,2837.274,2837.274,2890.29,2890.29,2959.93,2959.93,3137.85,3137.85,3137.85,3229.954,3229.954,3303.189,3303.189,3303.189,3383.612,3383.612,3435.281,3435.281,3498.631,3498.631,3559.734,3559.734,3559.734,3597.025,3597.025,3628.925,3628.925,3695.42,3695.42,3695.42,3715.638,3715.638,3737.653,3737.653,3768.655,3768.655,3768.655,3778.09,3778.09,3804.598,3804.598,3821.222,3821.222,3821.222,3833.802,3833.802,3836.048,3836.048,3864.354,3864.354,3864.354,3867.499,3867.499,3873.339,3873.339,3883.224,3883.224,3883.224,3888.166,3888.166,3898.949,3898.949,3907.036,3907.036,3907.036,3910.631,3910.631,3916.022,3916.022,3921.414,3921.414,3921.414,3921.414,3932.197,3938.487,3938.487,3952.415,3952.415,3952.415,3957.357,3957.357,3960.502,3960.502,3969.488,3969.488,3969.488,3980.72,3980.72,3984.764,3984.764,3990.155,3990.155,3990.155,3991.503,3991.503,3999.141,3999.141,4007.228,4007.228,4007.228,4015.315,4015.315,4024.301,4024.301,4029.243,4029.243,4029.243,4036.432,4036.432,4045.867,4045.867,4053.505,4053.505,4053.505,4056.65,4056.65,4065.187,4065.187,4071.477,4071.477,4071.477,4081.361,4081.361,4081.361,4095.739,4102.478,4102.478,4102.478,4111.014,4111.014,4121.348,4121.348,4129.435,4129.435,4129.435,4139.769,4139.769,4151.001,4151.001,4157.741,4157.741,4157.741,4168.524,4168.524,4178.408,4178.408,4191.887,4191.887,4191.887,4201.322,4201.322,4211.206,4211.206],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.899,0.449,0.449,0,0.449,0,0.449,0,0,0,0,4.044,0.899,1.348,0,0,0,1.348,2.696,1.797,4.493,0,0.899,1.348,3.594,0,10.334,0,12.58,0,0.449,4.942,16.174,4.493,0.449,2.246,1.797,0,15.725,12.131,17.073,0,0,26.508,0,14.377,13.479,0,48.074,52.118,18.421,0,63.35,27.407,63.35,44.929,47.176,49.871,0,50.321,31.45,29.204,0,72.336,92.554,0,90.308,46.277,36.393,50.321,81.771,18.87,0,0,66.495,44.48,23.812,65.597,0,0,0,65.597,57.509,39.538,0,0,0,256.096,36.393,51.668,49.871,39.538,0,0,139.73,49.422,48.074,58.857,54.814,0,0,83.119,0,53.466,0,48.074,0,0,55.263,0,57.509,0,31.9,0,0,37.74,0,42.683,0,87.162,0,0,53.016,0,69.64,0,177.919,0,0,92.105,0,73.234,0,0,80.423,0,51.668,0,63.35,0,61.104,0,0,37.291,0,31.9,0,66.495,0,0,20.218,0,22.015,0,31.001,0,0,9.435,0,26.508,0,16.624,0,0,12.58,0,2.246,0,28.305,0,0,3.145,0,5.841,0,9.884,0,0,4.942,0,10.783,0,8.087,0,0,3.594,0,5.391,0,5.391,0,0,0,10.783,6.29,0,13.928,0,0,4.942,0,3.145,0,8.986,0,0,11.232,0,4.044,0,5.391,0,0,1.348,0,7.638,0,8.087,0,0,8.087,0,8.986,0,4.942,0,0,7.189,0,9.435,0,7.638,0,0,3.145,0,8.537,0,6.29,0,0,9.884,0,0,14.377,6.739,0,0,8.537,0,10.334,0,8.087,0,0,10.334,0,11.232,0,6.739,0,0,10.783,0,9.884,0,13.479,0,0,9.435,0,9.884,0],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.899,1.348,1.797,1.797,2.246,2.246,2.695,2.695,1.796,1.347,0.898,4.942,5.392,6.74,6.291,6.291,6.291,7.639,10.335,8.088,11.682,10.334,11.233,12.581,16.175,14.827,22.465,20.668,28.755,28.755,28.305,31.899,44.479,48.972,39.087,41.333,30.55,30.55,45.826,53.015,53.914,49.421,48.972,73.234,71.437,85.814,83.568,71.437,102.438,154.556,172.977,146.469,209.819,222.849,272.72,317.649,316.751,314.504,296.083,346.404,314.504,316.301,252.951,280.358,325.736,275.865,366.173,362.129,367.072,388.189,469.96,416.494,323.94,323.94,300.127,298.33,285.749,301.025,219.254,200.384,200.384,265.981,256.995,252.053,228.241,162.644,162.644,418.74,455.133,441.204,433.566,433.566,433.566,433.566,573.296,366.622,378.303,385.492,390.435,350.897,350.897,434.016,294.286,298.33,250.256,239.473,184.659,184.659,239.922,156.803,214.312,160.846,192.746,144.672,144.672,182.412,127.149,169.832,112.323,199.485,167.585,167.585,220.601,182.861,252.501,209.818,387.737,300.575,300.575,392.68,339.664,412.898,343.258,343.258,245.762,245.762,297.43,205.325,268.675,195.441,256.545,256.545,176.122,213.413,161.745,193.645,130.295,196.79,135.686,135.686,155.904,118.613,140.628,108.728,139.729,73.234,73.234,82.669,62.451,88.959,66.944,83.568,52.567,52.567,65.147,55.712,57.958,31.45,59.755,43.131,43.131,46.276,33.696,39.537,37.291,47.175,18.87,18.87,23.812,20.667,31.45,25.609,33.696,23.812,23.812,27.406,22.464,27.855,17.072,22.463,14.376,14.376,14.376,21.565,27.855,22.464,36.392,31.001,31.001,35.943,35.943,28.305,22.015,31.001,17.073,17.073,28.305,23.363,27.407,24.262,29.653,20.667,20.667,22.015,10.783,18.421,14.377,22.464,17.073,17.073,25.16,23.812,32.798,25.16,30.102,22.015,22.015,29.204,21.117,30.552,21.566,29.204,24.262,24.262,27.407,20.218,28.755,19.32,25.61,17.972,17.972,27.856,24.711,24.711,30.551,37.29,31,31,39.537,29.653,39.987,39.987,33.697,26.958,26.958,37.292,28.755,39.987,29.653,36.392,28.305,28.305,39.088,28.754,38.638,27.406,40.885,34.146,34.146,43.581,32.798,42.682,32.798],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.128,0.193,0.257,0.257,0.321,0.321,0.385,0.257,0.193,0.128,0.128,0.642,0.77,0.899,0.899,0.899,0.899,1.091,0.899,1.027,1.476,1.476,1.605,1.797,2.118,1.733,2.952,2.311,4.108,3.979,3.851,4.044,6.354,5.52,5.584,4.108,4.365,4.3,5.841,5.263,7.06,6.996,6.675,10.205,10.205,10.013,10.205,7.766,14.634,22.079,20.924,20.924,27.92,29.91,38.96,38.511,37.805,42.298,42.298,40.436,41.014,36.136,29.717,33.312,39.409,39.409,45.122,47.24,48.267,55.455,56.803,46.277,46.277,33.376,36.264,37.42,33.633,31.322,28.626,28.626,28.626,28.498,30.359,32.606,23.235,23.235,23.235,59.82,55.648,54.814,56.29,61.938,61.938,61.938,45.314,47.176,46.662,47.946,50.128,50.128,50.128,42.041,34.981,35.751,27.343,26.38,26.38,26.38,22.4,22.4,22.978,22.978,20.667,20.667,20.667,18.164,18.164,16.046,16.046,23.941,23.941,23.941,26.123,26.123,29.974,29.974,42.939,42.939,42.939,48.523,48.523,49.037,49.037,23.62,35.109,35.109,29.332,29.332,27.92,27.92,36.649,25.16,25.16,23.106,23.106,18.613,18.613,19.384,19.384,19.384,16.945,16.945,15.533,15.533,10.462,10.462,10.462,8.922,8.922,9.563,9.563,7.51,7.51,7.51,7.959,7.959,4.493,4.493,6.162,6.162,6.162,4.814,4.814,5.327,5.327,2.696,2.696,2.696,2.952,2.952,3.659,3.659,3.402,3.402,3.402,3.209,3.209,2.439,2.439,2.054,2.054,2.054,1.54,3.081,3.209,3.209,4.429,4.429,4.429,5.135,3.594,3.145,3.145,2.439,2.439,2.439,3.338,3.338,3.466,3.466,2.952,2.952,2.952,1.54,1.54,2.054,2.054,2.439,2.439,2.439,3.402,3.402,3.594,3.594,3.145,3.145,3.145,3.017,3.017,3.081,3.081,3.466,3.466,3.466,2.888,2.888,2.76,2.76,2.567,2.567,2.567,3.53,3.53,2.311,4.365,4.429,4.429,4.429,4.236,4.236,5.712,3.659,3.851,3.851,3.851,4.108,4.108,4.236,4.236,4.044,4.044,4.044,4.108,4.108,3.915,3.915,4.878,4.878,4.878,4.685,4.685,4.685,4.685]},{"iso":"GMB","continent":"Africa","population":2416664,"name":"Gambia","population_density":207.566,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,11,12,17,17,17,17,17,18,20,20,20,22,22,23,23,23,23,23,24,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,28,28,28,28,28,28,28,30,34,34,36,36,37,37,41,42,42,43,43,44,45,47,49,49,55,55,57,57,61,61,61,63,64,64,64,64,64,64,78,78,93,93,112,112,146,170,216,277,277,326,326,326,403,498,498,498,498,671,799,935,1090,1090,1235,1235,1346,1477,1556,1623,1689,1872,1872,2116,2288,2401,2437,2437,2685,2585,2686,2708,2743,2797,2895,2963,2963,3029,3067,3101,3120,3150,3197,3197,3275,3293,3330,3362,3376,3405,3405,3428,3440,3473,3485,3504,3526,3526,3540,3542,3552,3555,3555,3569,3569,3579,3579,3584,3585,3590,3594,3594,3613,3613,3617,3621,3628,3632,3636,3636,3642,3644,3649,3649,3649,3649,3655,3657,3659,3659,3659,3660,3665,3666,3666,3666,3670,3672,3672,3672,3679,3680,3681,3684,3684,3684,3696,3696,3697,3697,3698,3702,3702,3705,3705,3705,3705,3706,3726,3726,3726,3726,3727,3728,3731,3731,3734,3742,3743,3765,3767,3768,3770,3770,3770,3776,3776,3777,3779,3779,3782,3782,3785,3786,3786],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.414,0.414,0.414,0.414,0.414,0.414,0.828,1.241,1.241,1.241,1.241,1.241,1.655,1.655,1.655,1.655,1.655,1.655,1.655,1.655,1.655,1.655,1.655,1.655,1.655,3.724,3.724,3.724,3.724,3.724,3.724,3.724,3.724,4.138,4.138,4.138,4.138,4.138,4.138,4.138,4.138,4.138,4.138,4.138,4.552,4.966,7.034,7.034,7.034,7.034,7.034,7.448,8.276,8.276,8.276,9.103,9.103,9.517,9.517,9.517,9.517,9.517,9.931,9.931,9.931,9.931,10.345,10.345,10.345,10.345,10.345,10.345,10.345,10.345,10.345,10.345,10.345,10.345,10.759,10.759,10.759,10.759,10.759,11.586,11.586,11.586,11.586,11.586,11.586,11.586,12.414,14.069,14.069,14.897,14.897,15.31,15.31,16.966,17.379,17.379,17.793,17.793,18.207,18.621,19.448,20.276,20.276,22.759,22.759,23.586,23.586,25.241,25.241,25.241,26.069,26.483,26.483,26.483,26.483,26.483,26.483,32.276,32.276,38.483,38.483,46.345,46.345,60.414,70.345,89.379,114.621,114.621,134.897,134.897,134.897,166.759,206.069,206.069,206.069,206.069,277.655,330.621,386.897,451.035,451.035,511.035,511.035,556.966,611.173,643.863,671.587,698.897,774.622,774.622,875.587,946.76,993.518,1008.415,1008.415,1111.036,1069.656,1111.45,1120.553,1135.036,1157.381,1197.932,1226.07,1226.07,1253.381,1269.105,1283.174,1291.036,1303.45,1322.898,1322.898,1355.174,1362.622,1377.933,1391.174,1396.967,1408.967,1408.967,1418.484,1423.45,1437.105,1442.071,1449.933,1459.036,1459.036,1464.829,1465.657,1469.795,1471.036,1471.036,1476.829,1476.829,1480.967,1480.967,1483.036,1483.45,1485.519,1487.174,1487.174,1495.036,1495.036,1496.691,1498.346,1501.243,1502.898,1504.553,1504.553,1507.036,1507.864,1509.933,1509.933,1509.933,1509.933,1512.415,1513.243,1514.071,1514.071,1514.071,1514.484,1516.553,1516.967,1516.967,1516.967,1518.622,1519.45,1519.45,1519.45,1522.347,1522.76,1523.174,1524.415,1524.415,1524.415,1529.381,1529.381,1529.795,1529.795,1530.209,1531.864,1531.864,1533.105,1533.105,1533.105,1533.105,1533.519,1541.795,1541.795,1541.795,1541.795,1542.209,1542.622,1543.864,1543.864,1545.105,1548.416,1548.829,1557.933,1558.76,1559.174,1560.002,1560.002,1560.002,1562.484,1562.484,1562.898,1563.726,1563.726,1564.967,1564.967,1566.209,1566.622,1566.622],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.414,0.414,0,0,0,0,0.414,0,0,0,0,0,0,0,0,0,0,0,0,2.069,0,0,0,0,0,0,0,0.414,0,0,0,0,0,0,0,0,0,0,0.414,0.414,2.069,0,0,0,0,0.414,0.828,0,0,0.828,0,0.414,0,0,0,0,0.414,0,0,0,0.414,0,0,0,0,0,0,0,0,0,0,0,0.414,0,0,0,0,0.828,0,0,0,0,0,0,0.828,1.655,0,0.828,0,0.414,0,1.655,0.414,0,0.414,0,0.414,0.414,0.828,0.828,0,2.483,0,0.828,0,1.655,0,0,0.828,0.414,0,0,0,0,0,5.793,0,6.207,0,7.862,0,14.069,9.931,19.035,25.241,0,20.276,0,0,31.862,39.31,0,0,0,71.586,52.966,56.276,64.138,0,60,0,45.931,54.207,32.69,27.724,27.31,75.724,0,100.966,71.172,46.759,14.897,0,102.621,-41.379,41.793,9.103,14.483,22.345,40.552,28.138,0,27.31,15.724,14.069,7.862,12.414,19.448,0,32.276,7.448,15.31,13.241,5.793,12,0,9.517,4.966,13.655,4.966,7.862,9.103,0,5.793,0.828,4.138,1.241,0,5.793,0,4.138,0,2.069,0.414,2.069,1.655,0,7.862,0,1.655,1.655,2.897,1.655,1.655,0,2.483,0.828,2.069,0,0,0,2.483,0.828,0.828,0,0,0.414,2.069,0.414,0,0,1.655,0.828,0,0,2.897,0.414,0.414,1.241,0,0,4.966,0,0.414,0,0.414,1.655,0,1.241,0,0,0,0.414,8.276,0,0,0,0.414,0.414,1.241,0,1.241,3.31,0.414,9.103,0.828,0.414,0.828,0,0,2.483,0,0.414,0.828,0,1.241,0,1.241,0.414,0],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.414,0.828,0.828,0.828,0.828,0.828,1.242,1.242,0.828,0.414,0.414,0.414,0.414,0.414,0,0,0,0,0,2.069,2.069,2.069,2.069,2.069,2.069,2.069,2.069,0.414,0.414,0.414,0.414,0.414,0.414,0.414,0.414,0,0,0,0.414,0.828,2.897,2.897,2.897,2.897,2.897,3.311,3.725,3.311,1.242,2.07,2.07,2.484,2.484,2.07,1.242,1.242,1.656,0.828,0.828,0.414,0.828,0.828,0.828,0.828,0.414,0.414,0.414,0.414,0,0,0,0,0.414,0.414,0.414,0.414,0.414,1.242,1.242,1.242,0.828,0.828,0.828,0.828,1.656,2.483,2.483,3.311,3.311,3.725,3.725,5.38,4.966,3.311,3.725,2.897,3.311,3.311,4.139,3.312,2.898,5.381,4.967,5.795,5.381,6.622,5.794,4.966,5.794,3.725,3.725,2.897,2.897,1.242,1.242,7.035,6.207,12,12,19.862,19.862,33.931,43.862,57.104,82.345,76.138,96.414,88.552,88.552,106.345,135.724,116.689,91.448,91.448,142.758,195.724,252,284.276,244.966,304.966,304.966,350.897,333.518,313.242,284.69,247.862,323.586,263.586,364.552,389.793,382.345,364.552,336.828,412.139,295.036,336.829,244.966,188.277,163.863,189.518,217.656,115.035,183.724,157.655,162.621,156,146.069,124.965,96.827,129.103,109.241,108.827,107.999,105.93,105.516,86.068,95.585,68.275,74.482,64.138,58.759,62.069,50.069,55.862,47.173,46.345,33.931,28.965,26.896,17.793,21.931,16.138,17.379,13.655,14.483,16.138,10.345,18.207,14.069,15.724,15.31,17.793,17.379,17.379,17.379,12,12.828,13.242,11.587,8.69,7.035,7.863,8.691,7.036,6.208,4.139,4.553,6.622,7.036,4.553,3.725,4.552,5.38,5.38,4.966,5.794,5.794,6.208,7.449,5.794,4.966,9.932,9.932,7.449,7.035,7.035,7.449,7.449,8.69,3.724,3.724,3.31,3.724,11.586,9.931,9.931,8.69,9.104,9.518,10.759,10.345,3.31,6.62,7.034,16.137,16.551,16.551,16.138,16.138,14.897,14.07,13.656,4.967,4.967,4.553,4.966,4.966,6.207,4.138,4.138],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.059,0.118,0.118,0.118,0.118,0.118,0.177,0.118,0.059,0.059,0.059,0.059,0.059,0,0,0,0,0,0,0.296,0.296,0.296,0.296,0.296,0.296,0.296,0,0.059,0.059,0.059,0.059,0.059,0.059,0.059,0,0,0,0,0.059,0.118,0.414,0.414,0.414,0.414,0.414,0.414,0.473,0.177,0.177,0.296,0.296,0.355,0.296,0.177,0.177,0.177,0.118,0.118,0.059,0.059,0.118,0.118,0.118,0.059,0.059,0.059,0.059,0,0,0,0,0,0.059,0.059,0.059,0.059,0.059,0.177,0.177,0.118,0.118,0.118,0.118,0.118,0.118,0.355,0.355,0.473,0.473,0.532,0.532,0.65,0.473,0.473,0.414,0.414,0.414,0.473,0.355,0.414,0.414,0.709,0.709,0.768,0.709,0.828,0.709,0.709,0.473,0.532,0.414,0.414,0.177,0.177,0.177,0.887,0.828,1.714,1.714,2.837,2.837,4.847,5.438,8.158,10.877,10.877,12.65,12.65,10.64,13.773,16.67,13.064,13.064,10.167,20.394,27.961,31.448,34.995,34.995,43.567,43.567,39.902,40.079,36.709,31.507,35.409,37.655,37.655,45.517,47.941,49.951,48.118,44.217,48.059,42.148,33.695,24.828,20.217,21.281,27.074,16.434,22.345,20.276,21.222,21.163,19.094,15.074,13.833,13.833,14.542,13.36,13.537,14.305,13.36,12.296,12.296,9.044,8.69,8.453,7.271,7.567,7.153,7.153,6.621,6.03,4.67,4.138,3.015,2.542,2.542,2.305,2.187,1.892,1.773,2.069,1.478,1.478,2.01,2.01,1.951,2.128,2.246,2.246,2.483,1.36,1.714,1.596,1.655,1.241,1.005,0.768,1.123,0.887,0.887,0.591,0.591,0.65,0.946,0.65,0.532,0.414,0.65,0.768,0.709,0.414,0.768,0.828,0.887,0.828,0.709,0.709,1.419,1.005,1.005,0.946,0.828,1.064,1.064,0.532,0.532,0.473,0.473,0.473,1.419,1.419,1.241,1.241,1.3,1.36,1.478,0.296,0.473,0.946,1.005,2.246,2.305,2.187,2.305,2.128,1.655,1.951,0.65,0.591,0.65,0.532,0.709,0.709,0.532,0.591,0.532]},{"iso":"GEO","continent":"Asia","population":3989175,"name":"Georgia","population_density":65.032,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,3,3,3,3,4,4,4,13,15,15,24,24,25,30,33,33,34,38,40,43,49,54,61,70,75,79,83,90,91,103,110,117,134,155,162,174,188,196,211,218,234,242,257,272,300,306,348,370,388,394,402,408,416,425,444,456,486,497,511,517,539,566,582,589,593,604,610,615,623,626,635,638,642,647,667,671,683,695,701,707,713,721,723,728,730,731,732,735,738,746,757,783,794,796,800,801,805,808,809,812,818,827,831,843,851,864,879,879,888,893,896,898,906,908,911,914,917,919,921,924,926,928,931,939,943,948,951,953,958,963,968,973,981,986,995,999,1004,1006,1010,1018,1028,1039,1049,1073,1085,1104,1117,1131,1137,1145,1155,1160,1168,1171,1177,1179,1182,1197,1206,1213,1216,1225,1250,1264,1278,1283,1306,1321,1336,1341,1351,1361,1370,1385,1394,1411,1421,1429,1436,1447,1455,1462,1469,1487,1510,1548,1568,1596,1621,1650,1684,1729,1773,1830,1917,2075,2227,2392,2562,2758,2937,3119,3306,3502,3695,3913,4140,4399,4664,4960,5254,5552,5866,6192,6640,7093,7564,8118,8696,9245,9753,10225,10752,11271,11794,12272,12841,13521,14440,15327,16285,17477,18663,19857,21208,22803,24562,26503,28431,30303,32127,33858,35567,37263,38936,40727,42579,44522,46817,49218,51993,54852,57753,60680,63650,66561,69681,73154,76658,79678,82835,85952,89395,93092,96860,100684,104732,108690,111818,114889,118690,123470,127942,132368,135584,139343,143376,147636,152704,158154,162475,164976,169649,174383,178953,183099,187006,189726,191063,194900,198387,201368],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.251,0.251,0.251,0.251,0.752,0.752,0.752,0.752,1.003,1.003,1.003,3.259,3.76,3.76,6.016,6.016,6.267,7.52,8.272,8.272,8.523,9.526,10.027,10.779,12.283,13.537,15.291,17.547,18.801,19.804,20.806,22.561,22.812,25.82,27.575,29.329,33.591,38.855,40.61,43.618,47.128,49.133,52.893,54.648,58.659,60.664,64.424,68.185,75.204,76.708,87.236,92.751,97.263,98.767,100.773,102.277,104.282,106.538,111.301,114.309,121.83,124.587,128.097,129.601,135.116,141.884,145.895,147.65,148.652,151.41,152.914,154.167,156.173,156.925,159.181,159.933,160.936,162.189,167.202,168.205,171.213,174.221,175.726,177.23,178.734,180.739,181.24,182.494,182.995,183.246,183.497,184.249,185.001,187.006,189.764,196.281,199.039,199.54,200.543,200.793,201.796,202.548,202.799,203.551,205.055,207.311,208.314,211.322,213.327,216.586,220.346,220.346,222.602,223.856,224.608,225.109,227.115,227.616,228.368,229.12,229.872,230.373,230.875,231.627,232.128,232.63,233.382,235.387,236.39,237.643,238.395,238.897,240.15,241.403,242.657,243.91,245.916,247.169,249.425,250.428,251.681,252.182,253.185,255.191,257.697,260.455,262.962,268.978,271.986,276.749,280.008,283.517,285.021,287.027,289.534,290.787,292.792,293.544,295.048,295.55,296.302,300.062,302.318,304.073,304.825,307.081,313.348,316.857,320.367,321.62,327.386,331.146,334.906,336.16,338.667,341.173,343.429,347.19,349.446,353.707,356.214,358.219,359.974,362.732,364.737,366.492,368.247,372.759,378.524,388.05,393.064,400.083,406.35,413.619,422.142,433.423,444.453,458.741,480.55,520.158,558.261,599.623,642.238,691.371,736.242,781.866,828.743,877.876,926.257,980.905,1037.809,1102.734,1169.164,1243.365,1317.064,1391.766,1470.479,1552.201,1664.505,1778.062,1896.131,2035.007,2179.899,2317.522,2444.866,2563.187,2695.294,2825.396,2956.501,3076.325,3218.961,3389.423,3619.796,3842.148,4082.298,4381.106,4678.411,4977.721,5316.387,5716.22,6157.163,6643.73,7127.038,7596.308,8053.545,8487.469,8915.879,9341.029,9760.414,10209.379,10673.636,11160.704,11736.011,12337.889,13033.522,13750.212,14477.43,15211.165,15955.68,16685.405,17467.521,18338.128,19216.505,19973.553,20764.945,21546.31,22409.395,23336.153,24280.71,25239.304,26254.05,27246.235,28030.357,28800.191,29753.019,30951.262,32072.296,33181.798,33987.98,34930.28,35941.266,37009.156,38279.594,39645.791,40728.973,41355.919,42527.34,43714.051,44859.651,45898.964,46878.365,47560.21,47895.367,48857.22,49731.335,50478.608],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.501,0,0,0,0.251,0,0,2.256,0.501,0,2.256,0,0.251,1.253,0.752,0,0.251,1.003,0.501,0.752,1.504,1.253,1.755,2.256,1.253,1.003,1.003,1.755,0.251,3.008,1.755,1.755,4.262,5.264,1.755,3.008,3.509,2.005,3.76,1.755,4.011,2.005,3.76,3.76,7.019,1.504,10.528,5.515,4.512,1.504,2.005,1.504,2.005,2.256,4.763,3.008,7.52,2.757,3.509,1.504,5.515,6.768,4.011,1.755,1.003,2.757,1.504,1.253,2.005,0.752,2.256,0.752,1.003,1.253,5.014,1.003,3.008,3.008,1.504,1.504,1.504,2.005,0.501,1.253,0.501,0.251,0.251,0.752,0.752,2.005,2.757,6.518,2.757,0.501,1.003,0.251,1.003,0.752,0.251,0.752,1.504,2.256,1.003,3.008,2.005,3.259,3.76,0,2.256,1.253,0.752,0.501,2.005,0.501,0.752,0.752,0.752,0.501,0.501,0.752,0.501,0.501,0.752,2.005,1.003,1.253,0.752,0.501,1.253,1.253,1.253,1.253,2.005,1.253,2.256,1.003,1.253,0.501,1.003,2.005,2.507,2.757,2.507,6.016,3.008,4.763,3.259,3.509,1.504,2.005,2.507,1.253,2.005,0.752,1.504,0.501,0.752,3.76,2.256,1.755,0.752,2.256,6.267,3.509,3.509,1.253,5.766,3.76,3.76,1.253,2.507,2.507,2.256,3.76,2.256,4.262,2.507,2.005,1.755,2.757,2.005,1.755,1.755,4.512,5.766,9.526,5.014,7.019,6.267,7.27,8.523,11.281,11.03,14.289,21.809,39.607,38.103,41.362,42.615,49.133,44.871,45.623,46.877,49.133,48.381,54.648,56.904,64.926,66.43,74.201,73.699,74.702,78.713,81.721,112.304,113.557,118.07,138.876,144.892,137.622,127.345,118.32,132.108,130.102,131.105,119.824,142.636,170.461,230.373,222.352,240.15,298.809,297.305,299.31,338.667,399.832,440.943,486.567,483.308,469.27,457.237,433.924,428.409,425.151,419.385,448.965,464.256,487.068,575.307,601.879,695.633,716.69,727.218,733.736,744.515,729.725,782.117,870.606,878.377,757.049,791.392,781.365,863.086,926.758,944.556,958.594,1014.746,992.185,784.122,769.833,952.829,1198.243,1121.034,1109.503,806.182,942.3,1010.986,1067.89,1270.438,1366.197,1083.181,626.947,1171.42,1186.712,1145.6,1039.313,979.401,681.845,335.157,961.853,874.116,747.272],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.501,0.501,0.501,0.501,0.752,0.752,0.752,3.008,3.008,3.008,5.264,5.264,5.264,6.517,7.269,5.013,4.763,5.766,4.011,4.763,6.016,6.016,7.019,9.275,10.277,10.277,10.779,11.782,10.529,12.284,12.284,11.783,14.792,19.053,19.805,21.058,24.316,23.313,25.318,25.318,25.067,21.808,23.813,24.565,28.075,27.574,34.342,38.102,38.603,38.102,36.347,34.091,29.077,29.829,24.064,21.557,24.565,25.818,27.322,27.322,30.832,35.344,34.592,33.339,26.822,26.822,24.817,24.566,21.056,15.04,13.285,12.282,12.282,10.778,14.288,14.038,15.041,17.297,16.545,17.297,17.798,18.55,14.037,14.287,11.78,9.023,7.77,7.018,6.266,6.266,8.522,13.787,16.043,16.293,17.045,16.544,16.795,15.542,13.036,7.27,6.017,7.772,7.772,10.529,11.531,14.038,17.547,16.795,17.547,16.544,16.293,13.786,13.786,11.028,8.02,8.772,7.268,6.516,6.265,6.516,5.012,5.012,5.012,6.265,6.516,7.268,7.519,7.268,8.02,8.772,9.273,8.521,9.523,9.523,11.027,11.529,11.529,10.777,10.527,11.279,11.781,13.285,13.536,18.549,20.304,24.566,26.822,28.326,27.323,26.571,26.571,21.808,20.805,16.794,15.039,12.031,11.279,13.034,12.783,13.285,12.032,13.536,18.299,21.307,24.064,21.557,25.067,27.072,30.08,29.077,25.317,24.315,23.062,25.569,22.059,22.561,21.308,22.06,21.308,21.558,21.307,19.302,18.801,19.051,22.31,29.831,33.09,37.352,41.614,47.129,53.897,60.666,65.93,70.693,87.488,120.076,151.912,186.004,220.096,257.948,291.789,323.123,348.191,357.717,367.995,381.281,395.57,411.363,432.922,461.5,488.322,513.891,544.223,571.296,626.696,675.327,726.967,791.642,862.835,925.755,974.387,1010.986,1030.79,1047.335,1060.37,1041.318,1039.062,1071.901,1174.929,1278.961,1387.003,1555.71,1721.91,1901.396,2097.427,2326.798,2537.368,2801.583,3044.741,3215.202,3375.134,3509.748,3599.49,3624.809,3603.251,3565.649,3546.597,3564.395,3682.465,3850.42,4117.644,4409.183,4717.016,5001.787,5282.046,5524.703,5731.513,6000.24,6182.984,6223.343,6287.517,6335.146,6453.717,6650.75,6813.189,6901.177,7037.546,7272.682,7265.412,7253.88,7343.623,7615.108,7791.586,7942.495,7733.931,7684.046,7910.91,8208.967,8526.576,8694.53,8656.677,8174.121,8539.359,8783.771,8918.385,8889.808,8598.771,7914.419,7166.395,7501.301,7203.997,6764.557],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.072,0.072,0.107,0.107,0.107,0.358,0.43,0.43,0.752,0.716,0.752,0.931,0.716,0.645,0.68,0.501,0.573,0.645,0.68,0.752,1.003,1.289,1.325,1.397,1.432,1.468,1.325,1.504,1.432,1.504,1.97,2.578,2.578,2.972,3.044,3.08,3.366,3.008,2.829,2.865,2.972,3.008,3.724,3.402,4.655,4.87,5.228,4.906,4.655,3.868,3.939,2.757,2.65,2.435,3.295,3.402,3.689,3.617,4.082,4.369,4.512,3.689,3.438,3.33,3.33,2.722,2.041,1.576,1.647,1.612,1.361,1.325,1.862,1.719,2.041,2.149,2.256,2.328,2.364,1.934,1.862,1.612,1.253,1.074,0.895,0.788,0.609,0.824,1.039,1.898,2.256,2.292,2.328,2.256,2.113,1.826,0.931,0.645,0.788,0.967,1.074,1.361,1.54,1.97,2.399,2.184,2.184,2.22,1.898,1.683,1.504,1.039,1.146,0.931,0.859,0.824,0.824,0.645,0.645,0.609,0.609,0.788,0.859,0.967,0.967,0.967,1.074,1.146,1.039,1.074,1.182,1.253,1.504,1.468,1.468,1.361,1.325,1.325,1.504,1.576,1.791,2.471,2.829,3.366,3.545,3.689,3.509,3.438,2.937,2.686,2.292,1.934,1.647,1.504,1.325,1.504,1.647,1.612,1.612,1.719,2.543,2.937,2.901,2.757,3.33,3.76,3.975,3.259,3.116,2.972,3.116,2.829,2.614,2.686,2.865,2.793,2.686,2.757,2.507,2.435,2.077,2.364,2.901,4.011,4.333,5.049,5.694,6.482,7.055,7.843,8.058,9.383,11.495,16.258,20.663,25.354,29.831,35.274,39.643,43.045,44.084,45.659,46.662,48.381,49.491,52.356,55.328,59.232,62.741,66.501,69.939,73.485,80.253,86.985,93.252,102.563,112.59,121.006,127.524,128.383,131.033,132.752,131.642,128.061,128.777,134.937,150.944,163.836,179.557,203.515,228.869,251.251,275.281,299.489,330.716,365.919,392.276,416.842,439.403,453.012,457.094,454.838,445.241,440.335,439.618,443.88,464.077,488.859,527.499,569.971,609.721,648.219,684.997,707.056,732.805,757.801,780.899,785.161,793.397,798.661,817.713,838.376,848.94,860.4,897.214,925.899,926.292,912.971,916.695,952.936,976.142,989.678,963.106,985.703,1020.154,1036.591,1046.905,1081.928,1078.168,1052.563,1085.294,1110.398,1121.499,1088.481,1033.225,975.891,934.207,904.269,859.612,802.708]},{"iso":"DEU","continent":"Europe","population":83783945,"name":"Germany","population_density":237.016,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,4,4,4,5,8,10,12,12,12,12,13,13,14,14,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,27,46,48,79,130,159,196,262,482,670,799,1040,1176,1457,1908,2078,3675,4585,5795,7272,9257,12327,15320,19848,22213,24873,29056,32986,37323,43938,50871,57695,62095,66885,71808,77872,84794,91159,96092,100123,103374,107663,113296,118181,122171,124908,127854,130072,131359,134753,137698,141397,143342,145184,147065,148291,150648,153129,154999,156513,157770,158758,159912,161539,163009,164077,164967,165664,166152,167007,168162,169430,170588,171324,171879,172576,173171,174098,174478,175233,175752,176369,176551,177778,178473,179021,179710,179986,180328,180600,181200,181524,182196,182922,183189,183410,183594,183879,184121,184472,184924,185450,185750,186109,186506,186522,186691,187226,187267,187518,187682,188252,188604,189817,190299,190670,191272,191768,192480,192871,193371,194036,194458,194693,195042,195418,195893,196370,196780,197198,197523,198064,198343,198699,199001,199332,199709,199919,200180,200456,200890,201450,202045,202426,202735,203325,203717,204276,204881,205623,206278,206667,207112,207707,208546,209535,210399,211005,211220,212111,212828,214113,215039,216196,216903,217288,218508,219540,220859,222281,223791,224488,225007,226700,228120,229706,231292,233029,233861,234494,236122,237583,239010,240571,242126,242835,243305,244802,246015,247411,248840,250283,251058,251728,253626,254957,256433,258149,259735,260817,261737,263222,265014,266869,269048,271247,272932,273965,275560,277412,279025,281346,283712,285026,286339,288631,290471,292913,295539,298374,300027,301573,304673,307127,311137,315941,320495,323463,326309,332850,337314,344487,352107,359802,364664,368671,377068,385591,397922,403874,417350,427808,437698,450258,463419,479621,498354,517736,531790,544346,569598,577131,608611,631172,653992,668114,682624,689146,715693,738094,762832,785093,799733,802946,817526,843757,867484,891525,914118,927990,932367,946822,963192,995879,1017830,1038649,1052494,1055691,1069912,1094678,1117953,1141544,1157514,1183640,1194550,1200006,1229269,1254358,1287092,1314309,1336101,1350810,1357261,1391086,1423830,1454009],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.012,0.048,0.048,0.048,0.06,0.095,0.119,0.143,0.143,0.143,0.143,0.155,0.155,0.167,0.167,0.191,0.191,0.191,0.191,0.191,0.191,0.191,0.191,0.191,0.191,0.191,0.191,0.191,0.191,0.203,0.322,0.549,0.573,0.943,1.552,1.898,2.339,3.127,5.753,7.997,9.536,12.413,14.036,17.39,22.773,24.802,43.863,54.724,69.166,86.795,110.487,147.128,182.851,236.895,265.122,296.871,346.797,393.703,445.467,524.42,607.169,688.616,741.132,798.303,857.062,929.438,1012.055,1088.025,1146.902,1195.014,1233.816,1285.008,1352.24,1410.545,1458.167,1490.835,1525.996,1552.469,1567.83,1608.339,1643.489,1687.638,1710.853,1732.838,1755.289,1769.921,1798.053,1827.665,1849.985,1868.055,1883.058,1894.85,1908.623,1928.042,1945.588,1958.335,1968.957,1977.276,1983.101,1993.306,2007.091,2022.225,2036.046,2044.831,2051.455,2059.774,2066.876,2077.94,2082.475,2091.487,2097.681,2105.045,2107.218,2121.862,2130.158,2136.698,2144.922,2148.216,2152.298,2155.544,2162.706,2166.573,2174.593,2183.258,2186.445,2189.083,2191.279,2194.681,2197.569,2201.758,2207.153,2213.431,2217.012,2221.297,2226.035,2226.226,2228.243,2234.629,2235.118,2238.114,2240.071,2246.874,2251.076,2265.553,2271.306,2275.734,2282.919,2288.839,2297.338,2302.004,2307.972,2315.909,2320.946,2323.751,2327.916,2332.404,2338.073,2343.766,2348.66,2353.649,2357.528,2363.985,2367.315,2371.564,2375.169,2379.119,2383.619,2386.125,2389.241,2392.535,2397.715,2404.399,2411.5,2416.048,2419.736,2426.778,2431.456,2438.128,2445.349,2454.205,2462.023,2466.666,2471.977,2479.079,2489.093,2500.897,2511.209,2518.442,2521.008,2531.643,2540.2,2555.537,2566.59,2580.399,2588.837,2593.432,2607.994,2620.311,2636.054,2653.026,2671.049,2679.368,2685.562,2705.769,2722.717,2741.647,2760.577,2781.309,2791.239,2798.794,2818.225,2835.663,2852.695,2871.326,2889.885,2898.348,2903.957,2921.825,2936.302,2952.964,2970.02,2987.243,2996.493,3004.49,3027.143,3043.029,3060.646,3081.127,3100.057,3112.971,3123.952,3141.676,3163.064,3185.205,3211.212,3237.458,3257.569,3269.899,3288.936,3311.04,3330.292,3357.994,3386.233,3401.917,3417.588,3444.944,3466.905,3496.052,3527.394,3561.231,3580.961,3599.413,3636.413,3665.702,3713.563,3770.901,3825.256,3860.68,3894.648,3972.718,4025.998,4111.611,4202.559,4294.403,4352.433,4400.258,4500.48,4602.206,4749.382,4820.422,4981.265,5106.086,5224.127,5374.037,5531.119,5724.498,5948.085,6179.418,6347.159,6497.02,6798.415,6888.324,7264.053,7533.329,7805.696,7974.249,8147.432,8225.275,8542.126,8809.492,9104.752,9370.447,9545.182,9583.531,9757.55,10070.629,10353.821,10640.762,10910.42,11075.988,11128.23,11300.757,11496.14,11886.275,12148.27,12396.755,12562.001,12600.159,12769.893,13065.486,13343.284,13624.854,13815.463,14127.289,14257.505,14322.625,14671.892,14971.341,15362.036,15686.884,15946.981,16122.54,16199.536,16603.253,16994.067,17354.268],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.036,0,0,0.012,0.036,0.024,0.024,0,0,0,0.012,0,0.012,0,0.024,0,0,0,0,0,0,0,0,0,0,0,0,0,0.012,0.119,0.227,0.024,0.37,0.609,0.346,0.442,0.788,2.626,2.244,1.54,2.876,1.623,3.354,5.383,2.029,19.061,10.861,14.442,17.629,23.692,36.642,35.723,54.044,28.227,31.748,49.926,46.906,51.764,78.953,82.749,81.448,52.516,57.171,58.758,72.377,82.617,75.969,58.878,48.112,38.802,51.191,67.232,58.305,47.622,32.667,35.162,26.473,15.361,40.509,35.15,44.149,23.214,21.985,22.451,14.633,28.132,29.612,22.319,18.07,15.003,11.792,13.774,19.419,17.545,12.747,10.623,8.319,5.825,10.205,13.785,15.134,13.821,8.784,6.624,8.319,7.102,11.064,4.535,9.011,6.195,7.364,2.172,14.645,8.295,6.541,8.224,3.294,4.082,3.246,7.161,3.867,8.021,8.665,3.187,2.638,2.196,3.402,2.888,4.189,5.395,6.278,3.581,4.285,4.738,0.191,2.017,6.385,0.489,2.996,1.957,6.803,4.201,14.478,5.753,4.428,7.185,5.92,8.498,4.667,5.968,7.937,5.037,2.805,4.165,4.488,5.669,5.693,4.894,4.989,3.879,6.457,3.33,4.249,3.605,3.951,4.5,2.506,3.115,3.294,5.18,6.684,7.102,4.547,3.688,7.042,4.679,6.672,7.221,8.856,7.818,4.643,5.311,7.102,10.014,11.804,10.312,7.233,2.566,10.634,8.558,15.337,11.052,13.809,8.438,4.595,14.561,12.317,15.743,16.972,18.023,8.319,6.195,20.207,16.948,18.93,18.93,20.732,9.93,7.555,19.431,17.438,17.032,18.631,18.56,8.462,5.61,17.867,14.478,16.662,17.056,17.223,9.25,7.997,22.654,15.886,17.617,20.481,18.93,12.914,10.981,17.724,21.388,22.14,26.007,26.246,20.111,12.329,19.037,22.104,19.252,27.702,28.239,15.683,15.671,27.356,21.961,29.146,31.343,33.837,19.729,18.452,37,29.29,47.861,57.338,54.354,35.424,33.968,78.07,53.28,85.613,90.948,91.843,58.03,47.825,100.222,101.726,147.176,71.04,160.842,124.821,118.042,149.909,157.083,193.378,223.587,231.333,167.741,149.862,301.394,89.91,375.728,269.276,272.367,168.553,173.184,77.843,316.851,267.366,295.259,265.695,174.735,38.349,174.019,313.079,283.193,286.94,269.658,165.569,52.242,172.527,195.383,390.134,261.995,248.484,165.246,38.158,169.734,295.594,277.798,281.569,190.609,311.826,130.216,65.12,349.267,299.449,390.695,324.847,260.098,175.559,76.996,403.717,390.815,360.2],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.036,0.036,0.036,0.048,0.084,0.108,0.132,0.132,0.096,0.096,0.108,0.096,0.072,0.048,0.048,0.048,0.048,0.048,0.036,0.036,0.024,0.024,0,0,0,0,0,0,0.012,0.131,0.358,0.382,0.752,1.361,1.707,2.149,2.925,5.432,7.449,8.965,11.471,12.485,15.493,20.434,21.675,38.11,46.727,59.629,74.382,96.451,129.739,160.079,212.094,221.26,242.147,277.631,306.908,334.98,377.291,424.317,451.721,476.01,501.433,510.265,535.736,566.589,563.605,539.734,506.398,492.684,486.704,495.178,481.106,446.111,402.809,379.093,357.454,334.013,323.331,291.249,277.093,252.685,242.003,229.292,217.452,230.223,219.326,206.495,180.416,172.205,162.012,153.335,158.121,147.534,130.669,118.973,109.222,100.044,98.457,98.468,94.183,90.459,86.496,82.497,82.497,83.774,84.633,75.383,69.26,61.634,60.214,55.762,62.088,63.281,58.758,62.447,56.73,54.617,50.499,55.488,44.71,44.436,46.56,41.523,40.867,38.981,39.137,34.864,35.186,32.56,30.173,30.567,32.214,34.756,31.545,30.674,32.87,27.964,24.682,23.058,25.576,25.039,39.326,43.062,41.105,47.801,50.725,57.266,55.13,56.897,50.356,49.64,48.017,44.997,43.565,40.736,41.762,40.688,37.74,36.582,40.234,39.399,39.16,37.096,35.354,34.96,32.477,31.713,28.55,30.4,32.835,36.332,36.928,36.116,40.652,42.216,45.594,47.635,49.807,50.523,50.619,52.242,52.302,57.637,62.769,65.86,64.237,58.985,64.976,68.223,76.458,77.496,79.501,77.627,74.989,86.984,88.667,95.852,97.487,104.458,98.968,96.725,112.337,114.724,121.337,124.524,128.284,120.191,119.427,132.663,129.894,129.978,129.679,129.309,117.039,112.719,123.031,118.078,117.302,117.326,115.918,106.608,106.143,123.187,121.206,124.345,128.164,130.038,125.729,127.46,137.187,135.921,142.175,150.565,156.33,157.511,156.926,164.982,169.362,167.226,172.788,175.02,164.457,160.017,175.044,177.968,185.01,197.101,203.236,194.726,197.495,218.824,220.758,246.658,274.85,297.861,299.448,313.687,373.305,389.585,445.908,488.995,523.5,527.176,539.577,605.831,629.487,723.383,708.81,778.704,811.682,871.694,973.778,1030.639,1122.291,1198.702,1358.995,1365.894,1390.935,1574.287,1514.288,1732.933,1808.831,1857.611,1794.831,1800.274,1728.255,1743.712,1921.168,1840.699,1837.118,1739.486,1609.282,1610.117,1845.353,1811.695,1831.269,1805.668,1705.542,1583.049,1717.227,1738.591,1815.646,1794.448,1755.992,1651.58,1524.169,1641.661,1764.728,1847.143,1738.578,1667.192,1730.534,1695.504,1722.466,1901.999,1905.854,2018.751,2062.029,2131.518,1995.251,1942.031,2280.628,2322.176,2382.927],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.015,0.019,0.014,0.014,0.014,0.014,0.009,0.007,0.003,0.007,0.007,0.007,0.005,0.005,0.003,0.003,0,0,0,0,0,0,0,0.002,0.019,0.051,0.055,0.107,0.194,0.244,0.305,0.401,0.743,1.061,1.228,1.552,1.734,2.15,2.807,2.721,5.124,6.455,8.108,10.394,13.3,17.765,22.578,27.576,30.057,32.529,37.143,40.46,42.62,48.796,52.896,60.499,63.466,64.501,66.194,69.139,69.662,68.694,65.469,64.84,62.216,61.135,60.4,56.927,52.878,49.133,47.283,45.522,40.403,36.586,33.278,32.782,31.431,29.549,28.974,28.87,27.102,26.311,23.192,22.457,21.46,19.937,19.815,18.57,16.846,15.479,14.415,13.46,12.607,12.097,11.293,10.948,11.102,10.839,10.597,10.953,10.51,10.121,8.607,7.92,7.55,7.656,6.778,7.855,7.46,7.746,7.634,7.219,6.75,6.904,5.835,5.202,5.414,5.477,5.461,5.255,5.105,4.568,4.428,3.881,3.414,3.855,3.99,4.288,4.479,4.094,3.784,3.925,3.098,3.015,2.682,2.977,3.55,5.33,5.24,5.802,6.401,6.967,7.209,7.276,6.06,6.372,6.459,5.833,5.582,5.009,5.153,5.113,4.679,4.672,4.825,5.153,4.987,4.784,4.486,4.351,4.281,4.085,3.608,3.603,3.736,4.176,4.626,4.633,4.801,5.362,5.56,5.773,5.85,6.101,6.568,6.704,6.457,6.803,7.281,7.935,8.143,8.06,7.763,8.524,8.732,9.492,9.385,9.884,10.056,10.346,10.907,11.444,11.502,12.348,12.95,12.933,13.161,13.968,14.629,15.085,15.364,15.751,15.982,16.176,16.065,16.135,15.864,15.821,15.511,15.301,15.023,14.8,14.377,14.324,14.099,13.908,14.021,14.362,15.046,15.247,15.383,15.872,16.116,16.64,17.066,16.362,17.148,17.794,18.584,19.629,20.657,20.85,21.037,21.139,20.727,20.969,21.254,20.621,21.098,22.287,22.266,23.68,24.2,25,25.578,25.975,27.353,28.4,31.073,34.787,37.718,39.96,42.177,48.044,51.471,56.864,61.665,67.021,70.25,72.23,75.395,82.315,91.11,88.266,98.123,107.665,117.696,124.794,132.702,139.302,161.095,171.165,177.296,181.842,203.483,193.886,219.936,226.463,232.325,232.441,235.773,203.837,236.257,220.777,224.489,223.536,224.419,205.157,218.896,218.358,220.618,219.43,219.996,218.687,220.671,220.458,203.645,218.922,215.358,212.334,212.288,210.276,209.877,224.192,208.144,210.941,202.673,223.613,236.764,221.819,229.487,232.58,248.169,267.346,259.956,266.434,268.13,275.909,288.961,284.604]},{"iso":"GHA","continent":"Africa","population":31072945,"name":"Ghana","population_density":126.719,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,6,6,7,7,11,16,19,23,27,53,93,132,137,141,152,152,161,195,204,205,205,214,214,287,313,378,378,408,566,566,636,636,641,641,834,1042,1042,1042,1154,1154,1279,1279,1550,1550,1671,1671,2074,2074,2169,2169,2719,2719,3091,3091,4012,4263,4263,4700,5127,5408,5530,5638,5735,5735,5735,6096,6269,6269,6486,6617,6683,6808,7117,7303,7303,7616,7768,8070,8070,8297,8548,8885,9168,9462,9638,9910,10201,10201,10358,10856,11118,11964,11964,12193,12590,12929,13203,13717,14154,14154,14568,15013,15473,15834,16431,16742,17351,17741,18134,18134,19388,19388,20085,21077,21968,22822,23463,23834,24248,24518,24988,24988,25430,26125,26572,27060,27667,28430,28989,29672,29672,31057,31851,32969,33624,34406,35142,35142,35501,37014,37014,37812,37812,39075,39642,40097,40533,41003,41212,41404,41572,41725,41847,42210,42532,42653,42993,43094,43260,43325,43325,43505,43622,43717,43769,43841,43949,44118,44205,44298,44460,44658,44713,44777,44777,44777,44869,45012,45313,45313,45388,45434,45434,45601,45655,45655,45714,45760,45877,46004,46062,46062,46153,46222,46222,46222,46387,46444,46482,46626,46656,46694,46803,46829,46829,46829,46829,46947,46987,47005,47005,47030,47126,47126,47173,47173,47232,47310,47372,47461,47461,47538,47601,47690,47690,47775,47775,47775,48055,48055,48055,48124,48200,48200,48643,48788,48788,48904,49102,49202,49302,49302,49957,50018,50018,50123,50376,50376,50457,50631,50631,50717,50874,50941,51184,51225,51225,51225,51379,51569,51667,51667,51667,51667,52096,52096,52274,52274,52500,52622,52738,52738,52933,52933,53014,53270,53386,53553],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.097,0.193,0.193,0.225,0.225,0.354,0.515,0.611,0.74,0.869,1.706,2.993,4.248,4.409,4.538,4.892,4.892,5.181,6.276,6.565,6.597,6.597,6.887,6.887,9.236,10.073,12.165,12.165,13.13,18.215,18.215,20.468,20.468,20.629,20.629,26.84,33.534,33.534,33.534,37.138,37.138,41.161,41.161,49.883,49.883,53.777,53.777,66.746,66.746,69.803,69.803,87.504,87.504,99.476,99.476,129.116,137.193,137.193,151.257,164.999,174.042,177.968,181.444,184.566,184.566,184.566,196.184,201.751,201.751,208.735,212.951,215.075,219.097,229.042,235.028,235.028,245.101,249.992,259.711,259.711,267.017,275.095,285.94,295.048,304.509,310.173,318.927,328.292,328.292,333.345,349.371,357.803,385.029,385.029,392.399,405.176,416.085,424.903,441.445,455.509,455.509,468.832,483.153,497.957,509.575,528.788,538.797,558.396,570.947,583.595,583.595,623.951,623.951,646.382,678.307,706.982,734.465,755.094,767.034,780.357,789.047,804.172,804.172,818.397,840.764,855.149,870.854,890.389,914.944,932.934,954.914,954.914,999.487,1025.04,1061.019,1082.099,1107.266,1130.952,1130.952,1142.505,1191.197,1191.197,1216.879,1216.879,1257.525,1275.772,1290.415,1304.447,1319.572,1326.298,1332.477,1337.884,1342.808,1346.734,1358.416,1368.779,1372.673,1383.615,1386.866,1392.208,1394.3,1394.3,1400.093,1403.858,1406.915,1408.589,1410.906,1414.382,1419.82,1422.62,1425.613,1430.827,1437.199,1438.969,1441.029,1441.029,1441.029,1443.989,1448.591,1458.278,1458.278,1460.692,1462.172,1462.172,1467.547,1469.285,1469.285,1471.183,1472.664,1476.429,1480.516,1482.383,1482.383,1485.311,1487.532,1487.532,1487.532,1492.842,1494.676,1495.899,1500.534,1501.499,1502.722,1506.23,1507.067,1507.067,1507.067,1507.067,1510.864,1512.151,1512.731,1512.731,1513.535,1516.625,1516.625,1518.137,1518.137,1520.036,1522.546,1524.542,1527.406,1527.406,1529.884,1531.911,1534.776,1534.776,1537.511,1537.511,1537.511,1546.522,1546.522,1546.522,1548.743,1551.189,1551.189,1565.445,1570.112,1570.112,1573.845,1580.217,1583.435,1586.654,1586.654,1607.733,1609.696,1609.696,1613.075,1621.217,1621.217,1623.824,1629.424,1629.424,1632.192,1637.244,1639.4,1647.221,1648.54,1648.54,1648.54,1653.496,1659.611,1662.765,1662.765,1662.765,1662.765,1676.571,1676.571,1682.3,1682.3,1689.573,1693.499,1697.232,1697.232,1703.508,1703.508,1706.114,1714.353,1718.086,1723.461],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.097,0,0.032,0,0.129,0.161,0.097,0.129,0.129,0.837,1.287,1.255,0.161,0.129,0.354,0,0.29,1.094,0.29,0.032,0,0.29,0,2.349,0.837,2.092,0,0.965,5.085,0,2.253,0,0.161,0,6.211,6.694,0,0,3.604,0,4.023,0,8.721,0,3.894,0,12.969,0,3.057,0,17.7,0,11.972,0,29.64,8.078,0,14.064,13.742,9.043,3.926,3.476,3.122,0,0,11.618,5.568,0,6.984,4.216,2.124,4.023,9.944,5.986,0,10.073,4.892,9.719,0,7.305,8.078,10.845,9.108,9.462,5.664,8.754,9.365,0,5.053,16.027,8.432,27.226,0,7.37,12.776,10.91,8.818,16.542,14.064,0,13.323,14.321,14.804,11.618,19.213,10.009,19.599,12.551,12.648,0,40.357,0,22.431,31.925,28.674,27.484,20.629,11.94,13.323,8.689,15.126,0,14.225,22.367,14.386,15.705,19.535,24.555,17.99,21.981,0,44.573,25.553,35.98,21.079,25.167,23.686,0,11.553,48.692,0,25.682,0,40.646,18.247,14.643,14.031,15.126,6.726,6.179,5.407,4.924,3.926,11.682,10.363,3.894,10.942,3.25,5.342,2.092,0,5.793,3.765,3.057,1.673,2.317,3.476,5.439,2.8,2.993,5.214,6.372,1.77,2.06,0,0,2.961,4.602,9.687,0,2.414,1.48,0,5.374,1.738,0,1.899,1.48,3.765,4.087,1.867,0,2.929,2.221,0,0,5.31,1.834,1.223,4.634,0.965,1.223,3.508,0.837,0,0,0,3.798,1.287,0.579,0,0.805,3.09,0,1.513,0,1.899,2.51,1.995,2.864,0,2.478,2.027,2.864,0,2.735,0,0,9.011,0,0,2.221,2.446,0,14.257,4.666,0,3.733,6.372,3.218,3.218,0,21.079,1.963,0,3.379,8.142,0,2.607,5.6,0,2.768,5.053,2.156,7.82,1.319,0,0,4.956,6.115,3.154,0,0,0,13.806,0,5.728,0,7.273,3.926,3.733,0,6.276,0,2.607,8.239,3.733,5.374],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.097,0.097,0.129,0.129,0.258,0.419,0.516,0.645,0.677,1.514,2.769,4.024,4.056,4.024,4.281,4.152,4.313,4.57,3.573,2.35,2.189,2.35,1.996,4.345,4.892,5.89,5.6,6.533,11.618,11.328,13.581,11.232,10.556,8.464,14.675,20.404,15.319,15.319,16.67,16.67,20.532,20.532,23.042,16.348,20.242,20.242,29.607,29.607,28.641,28.641,37.62,37.62,45.698,45.698,62.369,70.447,67.39,81.454,77.496,86.539,78.493,81.969,55.451,47.373,47.373,44.927,36.753,27.71,30.768,31.508,30.51,34.533,44.477,38.845,33.277,43.35,41.258,46.761,44.637,47.919,46.053,50.912,60.02,59.409,60.181,59.216,68.581,61.276,58.251,63.433,62.757,80.521,74.857,73.473,76.884,87.794,91.559,92.074,97.706,70.48,83.803,90.754,92.782,93.49,103.885,97.352,102.887,115.438,114.763,100.442,125.995,114.377,117.595,139.511,148.586,163.519,171.5,183.44,156.406,165.095,157.79,125.865,111.416,106.299,100.056,103.821,110.033,125.899,128.763,150.744,136.519,158.725,169.892,190.167,191.711,192.323,198.019,176.038,187.591,191.71,166.157,155.859,134.78,150.259,144.82,159.463,161.941,128.375,135.101,115.598,121.005,85.283,70.962,68.001,64.333,53.101,57.317,54.388,54.323,51.491,47.565,41.676,35.078,34.241,24.972,24.039,22.173,25.52,28.32,25.52,26.969,30.284,30.381,30.124,26.648,21.209,21.37,22.979,27.452,21.08,21.724,21.144,21.144,26.518,25.295,20.693,12.905,14.385,15.736,18.343,20.21,14.836,16.027,18.248,16.349,14.869,16.414,14.161,13.517,18.151,16.187,15.189,18.697,19.534,14.224,12.39,11.167,10.331,10.653,10.009,6.501,6.469,9.559,9.559,11.072,7.274,7.886,9.817,11.812,13.871,10.781,13.259,13.773,16.637,14.738,14.963,12.968,10.104,19.115,16.637,14.61,13.967,16.413,13.678,27.935,32.601,23.59,27.323,33.695,34.692,35.464,35.464,42.286,39.583,39.583,39.229,40.999,37.781,37.17,42.77,21.691,22.496,27.549,26.326,26.004,27.323,24.716,19.116,24.072,27.419,25.52,23.364,15.544,14.225,28.031,28.031,28.803,22.688,26.807,30.733,34.466,34.466,26.936,26.936,23.815,32.054,28.514,29.962],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.06,0.074,0.078,0.097,0.211,0.395,0.556,0.556,0.561,0.593,0.575,0.497,0.469,0.331,0.313,0.294,0.285,0.285,0.579,0.543,0.8,0.795,0.933,1.618,1.618,1.605,1.485,1.209,1.209,1.959,2.188,2.188,1.867,2.381,2.359,2.933,2.046,2.336,2.336,2.892,2.377,4.23,3.655,4.092,2.846,5.374,4.818,6.528,4.676,8.91,9.627,9.627,9.108,11.071,10.652,11.213,7.475,6.767,6.767,4.758,4.455,3.958,3.398,3.899,4.055,4.358,4.933,4.694,4.754,4.754,5.195,5.292,6.377,5.802,5.425,5.724,7.273,7.135,7.788,7.209,8.459,8.754,7.6,6.772,7.761,7.613,10.694,9.443,9.158,10.983,11.82,10.79,11.949,10.068,10.068,10.919,11.14,11.696,12.096,12.478,11.898,14.698,14.588,14.349,12.234,16.339,13.595,15.369,17.13,19.434,21.553,24.5,20.44,22.344,20.381,17.981,13.884,11.99,12.238,12.588,12.928,14.477,15.825,18.395,19.502,16.307,20.62,22.027,24.376,23.879,24.905,25.148,25.148,20.431,23.737,18.597,19.254,15.659,18.082,20.689,21.13,16.179,18.339,15.631,16.514,11.48,9.577,8.046,7.71,7.03,6.625,7.305,6.997,7.057,6.795,5.126,4.473,4.455,3.329,3.103,2.671,2.869,3.646,3.218,3.108,3.416,4.087,4.009,3.807,3.03,2.63,2.625,2.538,3.011,2.758,2.809,3.021,3.021,3.365,2.956,1.572,1.844,1.71,2.037,2.621,2.119,1.871,2.29,2.336,2.124,1.586,1.761,1.756,1.931,2.175,1.995,2.17,2.671,2.032,1.77,1.595,0.933,1.338,1.347,0.929,0.809,0.924,1.365,1.365,1.039,0.855,1.044,1.402,1.572,1.54,1.54,1.678,1.968,2.106,1.747,1.853,1.444,1.444,2.377,2.087,1.678,1.995,1.954,1.954,3.991,3.37,3.37,3.903,4.496,4.607,5.066,3.03,5.374,5.655,5.122,4.694,5.397,4.938,5.31,3.099,2.818,3.214,3.453,2.598,3.715,3.531,2.731,2.731,3.044,3.195,3.338,2.221,2.032,2.032,4.004,3.296,3.241,2.791,3.83,4.391,4.924,2.952,3.848,3.03,3.402,3.54,3.512,3.747]},{"iso":"GRC","continent":"Europe","population":10423056,"name":"Greece","population_density":83.479,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,4,4,7,7,7,9,31,45,46,73,73,89,99,99,190,228,331,331,387,418,418,495,530,624,695,743,821,892,966,1061,1156,1212,1314,1415,1544,1613,1673,1735,1755,1832,1884,1955,2011,2081,2114,2145,2170,2192,2207,2224,2235,2235,2245,2401,2408,2463,2490,2506,2517,2534,2566,2576,2591,2612,2620,2626,2632,2642,2663,2678,2691,2710,2716,2726,2744,2760,2770,2810,2819,2834,2836,2840,2850,2853,2874,2876,2878,2882,2892,2903,2906,2909,2915,2917,2918,2937,2937,2952,2967,2980,2997,3049,3058,3068,3088,3108,3112,3121,3134,3148,3203,3227,3237,3256,3266,3287,3302,3310,3321,3343,3366,3376,3390,3409,3432,3458,3486,3511,3519,3562,3589,3622,3672,3732,3772,3803,3826,3883,3910,3939,3964,3983,4007,4012,4048,4077,4110,4135,4166,4193,4227,4279,4336,4401,4477,4587,4662,4737,4855,4974,5123,5270,5421,5623,5749,5942,6177,6381,6632,6858,7075,7222,7472,7684,7934,8138,8381,8664,8819,8987,9280,9531,9800,9977,10134,10317,10524,10757,10998,11200,11386,11524,11663,11832,12080,12452,12734,13036,13240,13420,13730,14041,14400,14738,14978,15142,15595,15928,16286,16627,16913,17228,17444,17707,18123,18475,18886,19346,19613,19842,20142,20541,20947,21381,21772,22078,22358,22652,23060,23495,23947,24450,24932,25370,25802,26469,27334,28216,29057,29992,30782,31496,32752,34299,35510,37196,39251,40929,42080,44246,46892,49807,52254,54809,56698,58187,60570,63321,66637,69675,72510,74205,76403,78825,82034,85261,87812,90121,91619,93006,95137,97288,99306,101287,103034,104227,105271,107470,109655,111537,113185,114568,115471,116721,118045,119720,121253,122648,123842,124534,125173,126372,127557,128710],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.096,0.288,0.384,0.384,0.672,0.672,0.672,0.863,2.974,4.317,4.413,7.004,7.004,8.539,9.498,9.498,18.229,21.875,31.757,31.757,37.129,40.103,40.103,47.491,50.849,59.867,66.679,71.284,78.768,85.58,92.679,101.794,110.908,116.281,126.067,135.757,148.133,154.753,160.51,166.458,168.377,175.764,180.753,187.565,192.938,199.654,202.82,205.794,208.192,210.303,211.742,213.373,214.428,214.428,215.388,230.355,231.026,236.303,238.893,240.429,241.484,243.115,246.185,247.144,248.584,250.598,251.366,251.941,252.517,253.477,255.491,256.93,258.178,260.001,260.576,261.536,263.263,264.798,265.757,269.595,270.458,271.897,272.089,272.473,273.432,273.72,275.735,275.927,276.119,276.502,277.462,278.517,278.805,279.093,279.668,279.86,279.956,281.779,281.779,283.218,284.657,285.905,287.536,292.525,293.388,294.347,296.266,298.185,298.569,299.432,300.68,302.023,307.3,309.602,310.562,312.384,313.344,315.359,316.798,317.565,318.621,320.731,322.938,323.897,325.241,327.063,329.27,331.765,334.451,336.849,337.617,341.742,344.333,347.499,352.296,358.052,361.89,364.864,367.071,372.539,375.13,377.912,380.311,382.134,384.436,384.916,388.37,391.152,394.318,396.717,399.691,402.281,405.543,410.532,416.001,422.237,429.529,440.082,447.278,454.473,465.794,477.211,491.507,505.61,520.097,539.477,551.566,570.082,592.628,612.2,636.282,657.964,678.784,692.887,716.872,737.212,761.197,780.769,804.083,831.234,846.105,862.223,890.334,914.415,940.223,957.205,972.268,989.825,1009.685,1032.039,1055.161,1074.541,1092.386,1105.626,1118.962,1135.176,1158.969,1194.659,1221.715,1250.689,1270.261,1287.53,1317.272,1347.11,1381.553,1413.981,1437.007,1452.741,1496.202,1528.151,1562.498,1595.214,1622.653,1652.874,1673.597,1698.83,1738.741,1772.513,1811.945,1856.078,1881.694,1903.664,1932.447,1970.727,2009.679,2051.318,2088.831,2118.189,2145.052,2173.259,2212.403,2254.137,2297.503,2345.761,2392.005,2434.027,2475.474,2539.466,2622.455,2707.076,2787.762,2877.467,2953.261,3021.763,3142.265,3290.686,3406.87,3568.627,3765.786,3926.775,4037.204,4245.012,4498.872,4778.541,5013.309,5258.439,5439.671,5582.528,5811.156,6075.09,6393.231,6684.7,6956.693,7119.313,7330.192,7562.561,7870.436,8180.039,8424.784,8646.313,8790.032,8923.103,9127.553,9333.923,9527.532,9717.591,9885.201,9999.658,10099.821,10310.796,10520.427,10700.988,10859.099,10991.786,11078.421,11198.347,11325.373,11486.075,11633.153,11766.99,11881.544,11947.935,12009.242,12124.275,12237.966,12348.586],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.192,0.096,0,0.288,0,0,0.192,2.111,1.343,0.096,2.59,0,1.535,0.959,0,8.731,3.646,9.882,0,5.373,2.974,0,7.387,3.358,9.018,6.812,4.605,7.483,6.812,7.1,9.114,9.114,5.373,9.786,9.69,12.376,6.62,5.756,5.948,1.919,7.387,4.989,6.812,5.373,6.716,3.166,2.974,2.399,2.111,1.439,1.631,1.055,0,0.959,14.967,0.672,5.277,2.59,1.535,1.055,1.631,3.07,0.959,1.439,2.015,0.768,0.576,0.576,0.959,2.015,1.439,1.247,1.823,0.576,0.959,1.727,1.535,0.959,3.838,0.863,1.439,0.192,0.384,0.959,0.288,2.015,0.192,0.192,0.384,0.959,1.055,0.288,0.288,0.576,0.192,0.096,1.823,0,1.439,1.439,1.247,1.631,4.989,0.863,0.959,1.919,1.919,0.384,0.863,1.247,1.343,5.277,2.303,0.959,1.823,0.959,2.015,1.439,0.768,1.055,2.111,2.207,0.959,1.343,1.823,2.207,2.494,2.686,2.399,0.768,4.125,2.59,3.166,4.797,5.756,3.838,2.974,2.207,5.469,2.59,2.782,2.399,1.823,2.303,0.48,3.454,2.782,3.166,2.399,2.974,2.59,3.262,4.989,5.469,6.236,7.292,10.554,7.196,7.196,11.321,11.417,14.295,14.103,14.487,19.38,12.089,18.517,22.546,19.572,24.081,21.683,20.819,14.103,23.985,20.34,23.985,19.572,23.314,27.151,14.871,16.118,28.111,24.081,25.808,16.982,15.063,17.557,19.86,22.354,23.122,19.38,17.845,13.24,13.336,16.214,23.793,35.69,27.055,28.974,19.572,17.269,29.742,29.838,34.443,32.428,23.026,15.734,43.461,31.948,34.347,32.716,27.439,30.221,20.723,25.233,39.912,33.771,39.432,44.133,25.616,21.971,28.782,38.281,38.952,41.638,37.513,29.358,26.864,28.207,39.144,41.734,43.365,48.258,46.244,42.022,41.447,63.993,82.989,84.62,80.687,89.705,75.794,68.502,120.502,148.421,116.185,161.757,197.159,160.989,110.428,207.809,253.86,279.668,234.768,245.13,181.233,142.856,228.628,263.934,318.141,291.469,271.993,162.62,210.879,232.369,307.875,309.602,244.746,221.528,143.72,133.07,204.451,206.369,193.609,190.059,167.609,114.458,100.163,210.975,209.631,180.561,158.111,132.687,86.635,119.926,127.026,160.701,147.078,133.838,114.554,66.391,61.306,115.033,113.69,110.62],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.192,0.288,0.288,0.576,0.576,0.576,0.768,2.879,4.03,4.03,6.62,6.332,7.867,8.826,8.634,15.254,17.557,27.343,24.753,30.126,31.565,30.606,37.993,32.62,37.992,34.922,39.527,41.637,45.475,52.575,54.302,60.058,56.413,59.387,64.472,69.365,69.173,67.829,64.663,57.468,59.482,54.685,51.807,44.804,44.9,42.31,39.336,39.816,34.54,30.99,25.809,21.491,14.775,12.568,24.561,22.834,26,27.151,27.055,27.055,28.686,30.797,16.789,17.556,14.294,12.472,11.513,11.034,10.362,9.307,9.787,9.595,9.403,9.211,9.594,10.745,11.321,10.265,12.664,12.28,11.896,11.512,10.937,10.169,8.922,9.978,6.332,5.661,4.606,5.373,6.044,5.373,5.373,3.934,3.934,3.838,5.277,4.318,4.702,5.853,6.812,7.867,12.664,13.431,12.567,14.486,14.966,13.911,13.527,13.143,9.497,13.911,15.255,14.295,14.199,14.774,15.926,16.118,15.543,11.321,11.129,12.377,11.513,11.897,11.705,12.473,14.199,15.83,16.118,14.679,17.845,19.092,20.435,23.025,26.287,27.439,28.014,29.453,30.797,30.797,30.413,28.015,24.082,22.547,20.053,21.3,18.613,19.189,18.806,19.381,20.148,21.107,25.616,27.631,31.085,35.211,43.366,47.588,52.194,60.253,66.681,75.507,83.374,90.569,99.395,104.288,115.609,126.834,134.989,144.775,152.355,158.687,153.41,165.306,167.129,168.568,168.568,167.801,173.269,167.321,169.336,173.462,177.203,179.026,176.436,168.185,158.591,163.58,169.816,164.827,160.126,152.163,148.421,146.694,145.351,149.284,162.62,166.553,176.147,177.874,181.903,198.309,211.933,222.583,219.321,215.292,202.052,225.941,240.62,245.225,248.103,241.099,238.892,236.589,246.088,242.539,244.362,249.447,260.864,259.041,250.791,258.85,271.898,270.938,278.805,276.886,262.111,263.359,269.595,279.957,283.41,287.823,294.443,303.174,315.838,330.421,366.207,410.052,452.938,490.26,531.707,561.257,587.737,666.792,751.22,784.416,861.553,978.025,1049.309,1083.943,1223.25,1356.608,1487.855,1606.438,1689.811,1673.885,1655.752,1773.952,1830.077,1894.358,1906.159,1943.384,1860.874,1890.52,1980.033,2059.28,2104.948,2031.553,1961.612,1833.339,1803.789,1797.361,1771.361,1657.095,1537.552,1460.415,1353.345,1309.788,1387.693,1392.873,1367.065,1331.567,1274.195,1193.221,1198.689,1225.552,1175.278,1112.725,1066.002,1022.445,956.149,930.82,925.927,912.591,862.51],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.082,0.11,0.384,0.562,0.576,0.905,0.905,1.124,1.234,0.932,1.987,2.494,3.536,3.536,4.084,4.372,4.372,4.18,4.139,4.016,4.989,4.879,5.523,6.497,6.455,7.278,7.292,7.086,7.826,8.141,8.936,8.868,8.388,7.936,7.442,7.1,6.428,5.633,5.455,5.592,5.195,5.345,4.633,4.221,3.454,2.919,2.111,1.658,1.371,3.166,2.96,3.509,3.646,3.714,3.865,3.961,2.261,2.303,1.754,1.672,1.562,1.494,1.343,1.042,1.192,1.192,1.083,1.234,1.234,1.288,1.398,1.329,1.261,1.631,1.494,1.617,1.508,1.316,1.234,1.138,0.877,0.781,0.603,0.63,0.713,0.726,0.726,0.48,0.535,0.535,0.493,0.617,0.466,0.63,0.795,0.891,1.096,1.795,1.658,1.795,1.864,1.933,1.809,1.7,1.165,1.234,1.85,1.905,1.768,1.974,1.987,2.097,2.111,1.467,1.288,1.453,1.508,1.508,1.412,1.467,1.672,1.878,1.96,1.987,1.96,2.357,2.467,2.604,2.933,3.372,3.577,3.892,3.618,4.03,3.947,3.659,3.18,2.892,2.796,2.549,2.261,2.289,2.344,2.344,2.508,2.549,2.947,3.166,3.55,3.988,4.687,5.77,6.428,6.99,7.895,8.744,9.896,10.869,11.431,13.171,13.87,14.898,16.488,17.242,18.667,19.695,19.901,20.189,20.97,20.655,21.285,20.641,20.874,21.779,21.888,20.764,21.875,21.888,22.779,21.875,20.148,20.531,21.066,20.244,20.107,19.188,19.312,19.051,18.448,17.927,18.133,19.928,21.025,22.615,23.519,24.081,26.014,26.877,26.699,27.467,26.617,26.069,29.81,30.126,30.77,30.523,29.81,30.838,31.551,28.947,30.084,30.002,30.962,33.346,32.689,32.867,33.374,33.141,33.881,34.196,33.25,33.785,34.484,34.402,34.525,34.923,35.169,36.704,39.117,41.282,43.174,46.723,52.617,58.51,63.143,69.352,74.176,78.041,86.114,95.461,99.971,111.552,126.903,139.074,145.063,157.535,172.598,195.953,206.383,213.236,216.128,220.761,223.735,225.174,230.67,238.77,242.608,239.949,249.666,250.201,256.478,255.258,248.584,241.374,238.674,227.559,223.57,209.069,192.499,184.687,176.984,172.804,168.103,169.035,169.501,167.637,163.073,158.084,154.109,156.932,144.94,137.95,133.166,129.699,127.108,124.216,115.842,114.129,107.413,102.205]},{"iso":"GRD","continent":"North America","population":112519,"name":"Grenada","population_density":317.132,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,7,7,7,9,9,9,9,10,12,12,12,12,12,12,12,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,18,18,18,19,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,29,29,30,30,30,30,32,32,32,32,32,32,32,32,33,33,36,36,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,43,43,43,43,43,43,69,69,69,85,85],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8.887,8.887,8.887,8.887,62.212,62.212,62.212,79.986,79.986,79.986,79.986,88.874,106.649,106.649,106.649,106.649,106.649,106.649,106.649,124.423,124.423,124.423,124.423,124.423,124.423,124.423,124.423,124.423,124.423,124.423,124.423,133.311,133.311,133.311,159.973,159.973,159.973,168.86,177.748,177.748,177.748,186.635,186.635,186.635,186.635,186.635,186.635,186.635,186.635,186.635,186.635,186.635,186.635,186.635,195.523,195.523,195.523,195.523,195.523,195.523,195.523,195.523,195.523,195.523,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,204.41,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,213.297,222.185,222.185,222.185,222.185,222.185,239.959,239.959,239.959,239.959,239.959,239.959,239.959,248.847,248.847,248.847,248.847,248.847,248.847,248.847,248.847,248.847,257.734,257.734,266.622,266.622,266.622,266.622,284.396,284.396,284.396,284.396,284.396,284.396,284.396,284.396,293.284,293.284,319.946,319.946,364.383,364.383,364.383,364.383,364.383,364.383,364.383,364.383,364.383,364.383,364.383,364.383,364.383,364.383,364.383,364.383,364.383,382.158,382.158,382.158,382.158,382.158,382.158,613.23,613.23,613.23,755.428,755.428],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53.324,0,0,17.775,0,0,0,8.887,17.775,0,0,0,0,0,0,17.775,0,0,0,0,0,0,0,0,0,0,0,8.887,0,0,26.662,0,0,8.887,8.887,0,0,8.887,0,0,0,0,0,0,0,0,0,0,0,0,8.887,0,0,0,0,0,0,0,0,0,8.887,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8.887,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8.887,0,0,0,0,17.775,0,0,0,0,0,0,8.887,0,0,0,0,0,0,0,0,8.887,0,8.887,0,0,0,17.775,0,0,0,0,0,0,0,8.887,0,26.662,0,44.437,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17.775,0,0,0,0,0,231.072,0,0,142.198,0],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53.324,53.324,53.324,71.099,71.099,71.099,71.099,79.986,44.437,44.437,44.437,26.662,26.662,26.662,26.662,35.55,17.775,17.775,17.775,17.775,17.775,17.775,17.775,0,0,0,0,8.887,8.887,8.887,35.549,35.549,35.549,44.436,53.323,44.436,44.436,53.323,26.661,26.661,26.661,17.774,8.887,8.887,8.887,0,0,0,0,0,8.887,8.887,8.887,8.887,8.887,8.887,8.887,8.887,0,0,8.887,8.887,8.887,8.887,8.887,8.887,8.887,8.887,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8.887,8.887,8.887,8.887,8.887,8.887,8.887,8.887,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8.887,8.887,8.887,8.887,8.887,26.662,26.662,26.662,17.775,17.775,17.775,17.775,26.662,8.887,8.887,8.887,8.887,8.887,8.887,8.887,0,8.887,8.887,17.774,17.774,17.774,17.774,35.549,35.549,26.662,26.662,17.775,17.775,17.775,17.775,8.887,8.887,35.549,35.549,79.986,79.986,79.986,79.986,71.099,71.099,44.437,44.437,0,0,0,0,0,0,0,0,0,17.775,17.775,17.775,17.775,17.775,17.775,248.847,248.847,231.072,373.27,373.27],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7.618,10.157,10.157,10.157,10.157,3.809,6.348,6.348,3.809,3.809,3.809,3.809,2.539,2.539,2.539,2.539,2.539,2.539,2.539,2.539,0,0,0,0,0,1.27,1.27,1.27,5.079,5.079,5.079,6.348,6.348,6.348,6.348,3.809,3.809,3.809,2.539,1.27,1.27,1.27,0,0,0,0,0,0,1.27,1.27,1.27,1.27,1.27,1.27,1.27,0,0,0,1.27,1.27,1.27,1.27,1.27,1.27,1.27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.27,1.27,1.27,1.27,1.27,1.27,1.27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.27,1.27,1.27,1.27,1.27,3.809,3.809,2.539,2.539,2.539,2.539,2.539,1.27,1.27,1.27,1.27,1.27,1.27,1.27,0,0,1.27,1.27,2.539,2.539,2.539,2.539,5.079,3.809,3.809,2.539,2.539,2.539,2.539,0,1.27,1.27,5.079,5.079,11.427,11.427,11.427,10.157,10.157,6.348,6.348,0,0,0,0,0,0,0,0,0,0,2.539,2.539,2.539,2.539,2.539,2.539,35.55,33.01,33.01,53.324,53.324]},{"iso":"GTM","continent":"North America","population":17915567,"name":"Guatemala","population_density":157.834,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,6,6,9,12,17,19,20,21,24,25,28,34,34,36,38,39,47,50,61,61,70,77,87,95,126,137,155,156,167,180,196,214,235,257,289,294,316,384,430,473,500,530,530,557,599,644,688,703,730,763,798,832,900,967,1052,1114,1199,1342,1518,1643,1763,1763,1912,2133,2265,2512,2743,3054,3424,3760,3954,4145,4348,4607,4739,5087,5336,5586,5760,6154,6485,6792,7055,7502,7866,8221,8561,8982,9491,9845,10272,10706,11251,11868,12509,12755,13145,13769,14540,14819,15619,15828,16397,16930,17409,18096,19011,20072,21293,22501,23248,23972,24787,25411,26658,27619,28598,29355,29742,30872,32074,32939,33809,38042,38677,39039,40229,41135,42192,43283,44492,45053,45309,46451,47605,48826,49789,50979,51306,51542,52365,53509,54339,55270,56189,56605,56987,57966,59089,60284,61428,62313,62562,62944,63847,64881,65983,66941,67856,68188,68533,69651,70714,71856,72921,73679,73912,74074,74893,75644,76358,77040,77481,77683,77828,78721,79622,80306,81009,81658,81909,82172,82684,82924,83664,84344,85152,85444,85681,86623,87442,87933,88878,89702,90092,90263,90968,91746,92409,93090,93748,93963,94182,94870,95704,96480,96935,97544,97715,97826,98380,99094,99765,100431,101028,101360,101599,102219,102415,103172,103902,104632,104787,104894,105571,106320,106790,107339,107939,108104,108104,108483,109147,109849,110502,111050,111262,111360,112129,112811,113543,114123,114719,114885,115032,115730,116381,117066,117757,118417,118629,118722,119349,119989,120685,121132,121798,121971,122062,122774,123460,124053,124805,125352,125550,125674,126473,127127,127786,128541,129099,129282,129405,130082,130828,131435],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.056,0.056,0.112,0.335,0.335,0.502,0.67,0.949,1.061,1.116,1.172,1.34,1.395,1.563,1.898,1.898,2.009,2.121,2.177,2.623,2.791,3.405,3.405,3.907,4.298,4.856,5.303,7.033,7.647,8.652,8.708,9.322,10.047,10.94,11.945,13.117,14.345,16.131,16.41,17.638,21.434,24.001,26.402,27.909,29.583,29.583,31.09,33.435,35.946,38.402,39.24,40.747,42.589,44.542,46.44,50.236,53.975,58.72,62.181,66.925,74.907,84.731,91.708,98.406,98.406,106.723,119.058,126.426,140.213,153.107,170.466,191.119,209.873,220.702,231.363,242.694,257.151,264.519,283.943,297.842,311.796,321.508,343.5,361.976,379.112,393.792,418.742,439.06,458.875,477.853,501.352,529.763,549.522,573.356,597.581,628.001,662.441,698.22,711.951,733.719,768.549,811.585,827.158,871.812,883.477,915.238,944.988,971.725,1010.071,1061.144,1120.366,1188.519,1255.947,1297.642,1338.054,1383.545,1418.375,1487.98,1541.62,1596.265,1638.519,1660.12,1723.194,1790.287,1838.569,1887.13,2123.405,2158.849,2179.055,2245.477,2296.048,2355.047,2415.944,2483.427,2514.74,2529.03,2592.773,2657.186,2725.339,2779.092,2845.514,2863.766,2876.939,2922.877,2986.732,3033.061,3085.027,3136.323,3159.543,3180.865,3235.51,3298.193,3364.895,3428.75,3478.148,3492.047,3513.369,3563.772,3621.487,3682.998,3736.471,3787.544,3806.075,3825.332,3887.736,3947.07,4010.814,4070.259,4112.569,4125.574,4134.617,4180.331,4222.25,4262.103,4300.171,4324.786,4336.061,4344.155,4394,4444.291,4482.47,4521.71,4557.936,4571.946,4586.626,4615.204,4628.6,4669.905,4707.861,4752.961,4769.26,4782.489,4835.069,4880.783,4908.19,4960.937,5006.931,5028.699,5038.244,5077.595,5121.021,5158.028,5196.04,5232.768,5244.768,5256.992,5295.395,5341.946,5385.261,5410.658,5444.65,5454.195,5460.391,5491.314,5531.167,5568.621,5605.795,5639.118,5657.65,5670.99,5705.597,5716.537,5758.791,5799.537,5840.284,5848.936,5854.908,5892.697,5934.504,5960.738,5991.382,6024.872,6034.082,6034.082,6055.237,6092.3,6131.483,6167.932,6198.52,6210.353,6215.823,6258.747,6296.814,6337.673,6370.047,6403.314,6412.58,6420.785,6459.745,6496.082,6534.317,6572.887,6609.727,6621.56,6626.751,6661.748,6697.472,6736.32,6761.271,6798.445,6808.102,6813.181,6852.923,6891.214,6924.313,6966.288,6996.82,7007.872,7014.793,7059.391,7095.896,7132.68,7174.822,7205.968,7216.182,7223.048,7260.836,7302.476,7336.357],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.056,0.223,0,0.167,0.167,0.279,0.112,0.056,0.056,0.167,0.056,0.167,0.335,0,0.112,0.112,0.056,0.447,0.167,0.614,0,0.502,0.391,0.558,0.447,1.73,0.614,1.005,0.056,0.614,0.726,0.893,1.005,1.172,1.228,1.786,0.279,1.228,3.796,2.568,2.4,1.507,1.675,0,1.507,2.344,2.512,2.456,0.837,1.507,1.842,1.954,1.898,3.796,3.74,4.744,3.461,4.744,7.982,9.824,6.977,6.698,0,8.317,12.336,7.368,13.787,12.894,17.359,20.652,18.755,10.829,10.661,11.331,14.457,7.368,19.424,13.899,13.954,9.712,21.992,18.476,17.136,14.68,24.95,20.318,19.815,18.978,23.499,28.411,19.759,23.834,24.225,30.42,34.439,35.779,13.731,21.769,34.83,43.035,15.573,44.654,11.666,31.76,29.751,26.737,38.347,51.073,59.222,68.153,67.427,41.696,40.412,45.491,34.83,69.604,53.641,54.645,42.254,21.601,63.074,67.092,48.282,48.561,236.275,35.444,20.206,66.423,50.571,58.999,60.897,67.483,31.314,14.289,63.743,64.413,68.153,53.752,66.423,18.252,13.173,45.938,63.855,46.328,51.966,51.296,23.22,21.322,54.645,62.683,66.702,63.855,49.398,13.899,21.322,50.403,57.715,61.511,53.473,51.073,18.531,19.257,62.404,59.334,63.743,59.446,42.31,13.005,9.042,45.714,41.919,39.854,38.067,24.615,11.275,8.094,49.845,50.291,38.179,39.24,36.225,14.01,14.68,28.578,13.396,41.305,37.956,45.1,16.299,13.229,52.58,45.714,27.406,52.747,45.994,21.769,9.545,39.351,43.426,37.007,38.012,36.728,12.001,12.224,38.402,46.552,43.314,25.397,33.993,9.545,6.196,30.923,39.854,37.453,37.174,33.323,18.531,13.34,34.607,10.94,42.254,40.747,40.747,8.652,5.972,37.788,41.807,26.234,30.644,33.49,9.21,0,21.155,37.063,39.184,36.449,30.588,11.833,5.47,42.924,38.067,40.858,32.374,33.267,9.266,8.205,38.961,36.337,38.235,38.57,36.839,11.833,5.191,34.997,35.723,38.849,24.95,37.174,9.656,5.079,39.742,38.291,33.1,41.975,30.532,11.052,6.921,44.598,36.505,36.784,42.142,31.146,10.215,6.866,37.788,41.64,33.881],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.056,0.279,0.279,0.446,0.613,0.892,1.004,1.06,1.06,1.004,1.06,1.06,1.228,0.949,0.949,1.005,1.005,1.285,1.396,1.843,1.508,2.01,2.289,2.735,3.126,4.409,4.856,5.247,5.303,5.415,5.75,6.085,6.643,6.085,6.699,7.48,7.703,8.317,11.387,13.062,14.457,14.792,15.239,13.453,14.681,15.797,14.513,14.401,12.838,12.838,13.005,14.959,15.35,16.802,18.03,20.318,22.942,26.179,32.319,40.189,45.268,48.17,44.43,48.003,56.878,59.502,65.307,68.377,78.759,92.713,111.468,113.98,112.305,116.268,116.938,111.412,113.477,106.724,101.923,100.806,112.137,119.282,121.961,129.273,134.799,141.218,147.079,156.345,157.852,167.787,170.41,179.564,178.839,188.941,203.565,220.366,210.598,203.956,219.027,238.228,229.576,243.81,221.037,217.018,233.038,238.006,241.523,249.561,293.21,316.709,372.47,382.406,393.067,411.821,408.304,426.835,421.254,407.746,382.573,362.478,385.14,406.741,420.193,399.15,581.784,562.583,540.535,585.357,572.854,564.761,577.376,596.298,391.337,370.182,413.719,411.709,429.291,424.044,429.57,380.339,362.198,393.847,393.959,375.874,359.687,357.231,314.028,317.098,358.57,375.315,378.162,395.689,393.121,355.724,353.826,382.907,385.977,384.805,371.576,358.794,327.927,333.285,374.367,383.298,389.326,387.261,376.098,338.03,328.541,354.998,334.513,315.033,289.357,254.526,223.491,218.58,259.383,263.96,260.22,259.606,257.764,247.159,250.564,271.048,234.599,225.613,225.39,231.25,211.324,210.543,248.443,265.579,279.589,291.031,299.069,275.738,268.984,295.106,285.952,277.245,287.851,271.832,237.839,228.294,257.151,264.352,264.24,252.63,248.611,221.428,215.623,234.322,235.774,226.675,220.535,228.461,212.999,216.794,245.205,225.222,227.622,230.916,234.489,209.818,197.259,221.707,228.907,244.201,232.591,225.334,193.797,185.145,200.328,199.603,196.98,207.195,207.139,185.482,181.742,224.666,241.578,245.373,238.563,235.381,214.059,210.431,243.922,237.335,237.503,235.215,239.68,218.246,214.171,240.963,237.725,240.237,226.952,225.556,198.373,191.619,226.17,229.464,226.841,229.967,235.549,209.427,206.692,246.211,242.974,241.467,250.509,239.68,219.363,215.177,246.044,243.086,240.462],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.088,0.128,0.144,0.144,0.12,0.144,0.128,0.128,0.136,0.12,0.128,0.136,0.12,0.175,0.175,0.215,0.215,0.271,0.311,0.383,0.383,0.606,0.606,0.75,0.686,0.718,0.742,0.805,0.702,0.781,0.813,1.061,1.013,1.084,1.499,1.722,1.898,1.938,1.922,1.882,1.922,1.714,1.706,1.714,1.619,1.595,1.858,1.922,1.858,2.041,2.225,2.783,3.062,3.477,4.338,5.47,5.925,6.347,5.669,6.363,7.448,7.36,7.926,8.771,10.294,13.245,14.736,14.52,14.991,14.64,14.863,13.436,13.261,12.567,13.013,12.878,14.401,14.975,16.37,15.693,17.271,18.181,19.624,19.193,19.911,21.522,22.247,22.088,22.646,24.161,26.37,28.124,26.027,26.314,27.885,30.572,28.451,29.91,26.465,29.041,30.181,29.025,28.355,33.427,35.508,43.577,48.673,50.379,52.333,53.353,51.033,52.516,50.443,48.617,48.697,46.009,48.521,53.13,50.084,49.359,75.306,74.333,74.133,74.612,72.252,73.783,75.545,51.432,50.842,49.996,49.614,51.591,52.899,51.878,51.727,49.861,49.701,47.158,47.078,43.96,43.705,41.544,42.254,43.418,44.662,44.494,47.405,49.103,48.832,47.501,47.501,46.895,46.185,45.443,43.96,44.199,44.861,44.566,46.281,46.512,46.831,47.684,46.432,45.643,44.183,41.799,39.311,35.899,32.845,30.317,30.07,29.934,30.524,31.72,31.481,31.648,33.307,33.698,34.639,31.601,26.33,26.776,26.593,27.861,28.188,27.98,31.409,36.026,34.041,36.154,36.281,37.063,36.536,34.647,34.32,35.691,33.586,32.262,30.867,31.25,31.114,31.561,32.462,30.66,30.269,29.918,29.057,27.988,27.032,26.194,27.877,27.781,29.065,30.086,30.612,26.481,27.167,27.677,28.738,27.327,26.274,26.729,31.138,28.85,27.406,26.37,26.449,25.596,23.22,22.542,24.392,25.221,24.807,25.182,25.963,29.073,29.216,29.456,28.874,29.256,28.889,29.28,28.714,28.467,28.092,28.977,29.488,29.854,29.424,28.858,28.77,28.858,26.912,26.96,26.649,26.633,27.311,27.677,26.856,29.288,28.339,28.539,28.802,29.495,29.24,29.767,29.791,29.878,29.759,29.751,28.778,29.511,29.097]},{"iso":"GIN","continent":"Africa","population":13132792,"name":"Guinea","population_density":51.755,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,4,4,4,4,8,8,16,22,22,30,52,73,111,121,128,144,164,194,212,250,250,319,363,404,438,477,518,579,622,688,761,862,954,996,996,1163,1240,1351,1495,1537,1586,1586,1710,1811,1856,1927,2009,2042,2146,2146,2298,2374,2473,2473,2658,2658,2796,2863,2863,3067,3067,3176,3275,3275,3275,3275,3553,3656,3706,3706,3844,3886,3933,3991,4060,4117,4117,4216,4258,4258,4372,4426,4484,4532,4572,4639,4668,4841,4904,4960,4988,4988,5040,5174,5174,5260,5291,5342,5351,5391,5404,5450,5521,5570,5610,5610,5636,5697,5881,5969,6044,6141,6141,6200,6276,6359,6430,6491,6544,6590,6652,6747,6806,6867,6927,7008,7055,7126,7183,7242,7308,7308,7317,7364,7489,7575,7664,7777,7875,7930,7930,8018,8116,8198,8260,8343,8482,8620,8715,8792,8876,8932,8932,8967,9076,9128,9167,9213,9251,9251,9371,9409,9479,9479,9579,9649,9649,9798,9816,9848,9885,9946,9979,10020,10045,10061,10111,10154,10154,10231,10286,10325,10344,10387,10434,10434,10478,10512,10580,10598,10634,10652,10652,10735,10735,10754,10800,10863,10863,10901,10954,10996,11022,11062,11134,11188,11255,11362,11478,11518,11518,11538,11599,11635,11635,11635,11635,11635,11819,11819,12020,12072,12072,12195,12213,12213,12331,12363,12363,12400,12414,12459,12484,12516,12537,12537,12585,12611,12624,12654,12713,12713,12743,12798,12826,12841,12863,12929,12949,13039,13039,13039,13119,13119,13143,13167,13186,13233,13233,13264,13264,13325,13368,13398,13420,13420,13457,13457,13474,13485],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.076,0.076,0.076,0.076,0.076,0.076,0.076,0.076,0.152,0.152,0.305,0.305,0.305,0.305,0.609,0.609,1.218,1.675,1.675,2.284,3.96,5.559,8.452,9.214,9.747,10.965,12.488,14.772,16.143,19.036,19.036,24.29,27.641,30.763,33.352,36.321,39.443,44.088,47.362,52.388,57.947,65.637,72.643,75.841,75.841,88.557,94.42,102.872,113.837,117.035,120.766,120.766,130.208,137.899,141.326,146.732,152.976,155.489,163.408,163.408,174.982,180.769,188.307,188.307,202.394,202.394,212.902,218.004,218.004,233.538,233.538,241.837,249.376,249.376,249.376,249.376,270.544,278.387,282.194,282.194,292.702,295.901,299.479,303.896,309.15,313.49,313.49,321.028,324.227,324.227,332.907,337.019,341.435,345.09,348.136,353.238,355.446,368.619,373.416,377.681,379.813,379.813,383.772,393.976,393.976,400.524,402.885,406.768,407.453,410.499,411.489,414.992,420.398,424.129,427.175,427.175,429.155,433.8,447.81,454.511,460.222,467.608,467.608,472.101,477.888,484.208,489.614,494.259,498.295,501.797,506.518,513.752,518.245,522.89,527.458,533.626,537.205,542.611,546.951,551.444,556.47,556.47,557.155,560.734,570.252,576.8,583.577,592.182,599.644,603.832,603.832,610.533,617.995,624.239,628.96,635.28,645.864,656.372,663.606,669.469,675.865,680.13,680.13,682.795,691.094,695.054,698.024,701.526,704.42,704.42,713.557,716.451,721.781,721.781,729.396,734.726,734.726,746.071,747.442,749.879,752.696,757.341,759.854,762.976,764.879,766.098,769.905,773.179,773.179,779.042,783.23,786.2,787.647,790.921,794.5,794.5,797.85,800.439,805.617,806.988,809.729,811.099,811.099,817.419,817.419,818.866,822.369,827.166,827.166,830.06,834.095,837.293,839.273,842.319,847.801,851.913,857.015,865.163,873.995,877.041,877.041,878.564,883.209,885.95,885.95,885.95,885.95,885.95,899.961,899.961,915.266,919.226,919.226,928.592,929.962,929.962,938.947,941.384,941.384,944.201,945.267,948.694,950.598,953.034,954.633,954.633,958.288,960.268,961.258,963.542,968.035,968.035,970.319,974.507,976.639,977.781,979.457,984.482,986.005,992.858,992.858,992.858,998.95,998.95,1000.777,1002.605,1004.052,1007.63,1007.63,1009.991,1009.991,1014.636,1017.91,1020.194,1021.87,1021.87,1024.687,1024.687,1025.981,1026.819],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.076,0,0.152,0,0,0,0.305,0,0.609,0.457,0,0.609,1.675,1.599,2.894,0.761,0.533,1.218,1.523,2.284,1.371,2.894,0,5.254,3.35,3.122,2.589,2.97,3.122,4.645,3.274,5.026,5.559,7.691,7.005,3.198,0,12.716,5.863,8.452,10.965,3.198,3.731,0,9.442,7.691,3.427,5.406,6.244,2.513,7.919,0,11.574,5.787,7.538,0,14.087,0,10.508,5.102,0,15.534,0,8.3,7.538,0,0,0,21.168,7.843,3.807,0,10.508,3.198,3.579,4.416,5.254,4.34,0,7.538,3.198,0,8.681,4.112,4.416,3.655,3.046,5.102,2.208,13.173,4.797,4.264,2.132,0,3.96,10.203,0,6.548,2.361,3.883,0.685,3.046,0.99,3.503,5.406,3.731,3.046,0,1.98,4.645,14.011,6.701,5.711,7.386,0,4.493,5.787,6.32,5.406,4.645,4.036,3.503,4.721,7.234,4.493,4.645,4.569,6.168,3.579,5.406,4.34,4.493,5.026,0,0.685,3.579,9.518,6.548,6.777,8.604,7.462,4.188,0,6.701,7.462,6.244,4.721,6.32,10.584,10.508,7.234,5.863,6.396,4.264,0,2.665,8.3,3.96,2.97,3.503,2.894,0,9.137,2.894,5.33,0,7.615,5.33,0,11.346,1.371,2.437,2.817,4.645,2.513,3.122,1.904,1.218,3.807,3.274,0,5.863,4.188,2.97,1.447,3.274,3.579,0,3.35,2.589,5.178,1.371,2.741,1.371,0,6.32,0,1.447,3.503,4.797,0,2.894,4.036,3.198,1.98,3.046,5.482,4.112,5.102,8.148,8.833,3.046,0,1.523,4.645,2.741,0,0,0,0,14.011,0,15.305,3.96,0,9.366,1.371,0,8.985,2.437,0,2.817,1.066,3.427,1.904,2.437,1.599,0,3.655,1.98,0.99,2.284,4.493,0,2.284,4.188,2.132,1.142,1.675,5.026,1.523,6.853,0,0,6.092,0,1.827,1.827,1.447,3.579,0,2.361,0,4.645,3.274,2.284,1.675,0,2.817,0,1.294,0.838],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.076,0.076,0.228,0.228,0.228,0.228,0.533,0.533,1.066,1.523,1.371,1.98,3.655,5.254,7.843,8.604,8.528,9.289,10.812,12.487,12.183,13.478,10.584,15.077,17.894,19.798,20.864,21.55,23.301,25.052,28.326,28.098,30.307,34.876,39.292,39.52,36.398,44.469,47.058,50.484,55.89,51.397,48.123,44.925,54.367,49.342,46.906,43.86,39.139,38.454,42.642,42.642,44.774,42.87,46.981,41.575,49.418,46.905,49.494,54.596,43.022,52.769,45.231,53.531,46.982,46.982,36.474,31.372,52.54,44.849,48.656,40.356,43.326,46.524,50.103,54.519,38.605,35.102,31.295,38.833,31.523,28.325,33.427,33.123,32.285,31.6,34.646,32.21,31.22,44.393,40.509,40.661,38.377,34.722,35.636,40.737,38.529,31.904,29.468,29.087,27.64,30.686,27.716,21.016,26.422,23.605,24.29,20.407,21.702,23.301,36.322,39.52,39.825,43.48,40.434,44.927,48.734,50.409,41.804,39.748,38.073,34.19,38.911,41.652,40.358,38.683,37.846,39.369,38.912,40.815,40.434,37.693,38.226,33.581,29.697,27.108,33.047,34.189,36.626,40.737,43.173,47.361,46.676,49.798,47.742,47.438,45.382,43.098,46.22,52.54,59.774,58.936,57.87,55.89,51.169,47.514,45.23,38.682,34.418,32.058,28.556,24.292,33.429,33.658,30.688,26.728,31.373,33.2,30.306,41.652,33.886,33.429,30.916,35.561,30.459,28.251,30.155,20.027,22.463,23.3,20.483,21.701,23.376,23.224,22.767,24.823,24.595,21.321,24.671,21.397,22.387,20.788,22.082,20.179,16.6,22.92,19.57,18.428,16.753,20.179,17.438,18.961,22.997,19.875,21.855,23.454,25.433,24.748,29.85,35.104,39.901,39.749,37.769,36.246,35.409,34.038,28.936,20.788,11.955,8.909,22.92,21.397,32.057,33.276,33.276,42.642,44.013,44.013,38.987,41.424,26.119,24.976,26.042,20.103,20.636,23.073,15.687,13.25,16.905,16.068,15.992,14.849,17.438,15.001,15.686,19.874,18.351,17.513,18.198,20.94,17.97,24.823,22.539,18.351,22.311,21.169,21.321,18.122,18.046,14.772,14.772,17.133,11.041,15.686,17.133,17.59,17.818,14.239,17.056,14.695,15.989,12.182],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.011,0.011,0.033,0.033,0.033,0.033,0.076,0.065,0.152,0.196,0.196,0.283,0.522,0.707,1.12,1.142,1.153,1.327,1.458,1.545,1.512,1.512,1.403,2.078,2.382,2.611,2.654,2.883,2.915,3.579,3.296,3.535,3.883,4.612,5.189,5.2,4.536,5.885,6.005,6.418,6.886,6.342,6.418,6.418,5.95,6.211,5.493,4.699,5.134,4.96,6.092,4.743,5.298,5.635,5.939,5.047,6.701,5.569,7.071,6.146,5.319,6.461,6.461,5.635,6.712,5.211,4.482,4.482,5.287,6.407,5.765,4.688,6.19,6.646,7.158,4.765,4.395,4.471,4.471,4.047,4.047,3.535,4.144,3.981,3.992,4.514,3.873,4.144,4.46,5.102,5.2,5.178,4.96,4.525,4.362,5.504,3.622,3.873,3.601,3.851,3.949,3.818,2.502,3.002,2.839,3.035,2.915,2.817,2.665,3.187,4.688,4.873,5.156,5.776,5.776,6.135,6.298,5.2,5.015,4.862,4.384,4.884,4.917,5.123,4.862,4.754,4.743,5.047,5.058,5.156,4.743,4.743,4.797,4.144,3.361,3.361,3.949,4.264,4.59,5.102,6.168,6.668,6.157,5.754,5.885,5.809,5.254,5.091,6.005,7.506,7.582,7.353,7.375,7.31,6.407,5.276,4.96,4.493,4.079,3.666,3.47,3.47,4.395,3.622,3.818,3.394,3.981,4.329,4.329,4.645,4.427,4.014,4.416,3.992,3.59,4.036,2.687,2.665,2.861,2.926,2.263,2.741,2.894,3.046,3.078,3.002,3.046,3.046,2.687,2.458,2.774,2.763,2.687,2.371,2.371,2.796,2.426,1.893,2.197,2.491,2.295,2.709,2.382,2.839,2.915,2.85,2.948,3.535,3.851,4.438,5.243,5.395,4.96,4.395,4.471,4.134,2.97,1.708,1.273,1.273,3.057,2.393,4.188,4.754,4.754,6.092,6.287,4.286,5.569,3.731,3.165,3.568,2.382,2.676,2.948,2.012,1.893,1.893,2.012,2.143,1.795,1.849,2.143,1.915,2.241,2.317,2.339,2.361,2.273,2.35,2.567,3.22,2.622,2.317,3.024,2.785,2.328,2.371,1.599,2.11,2.11,1.577,1.577,1.98,2.186,2.306,2.034,2.034,2.099,2.099,1.621,1.273]},{"iso":"GNB","continent":"Africa","population":1967998,"name":"Guinea-Bissau","population_density":66.191,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,8,8,9,9,15,18,18,18,33,33,36,36,38,38,38,38,43,43,43,46,50,50,50,50,50,52,52,53,73,73,205,205,257,257,257,413,413,475,564,594,641,726,761,820,836,913,913,969,990,1032,1038,1089,1109,1114,1114,1114,1178,1178,1195,1195,1256,1256,1256,1339,1339,1339,1339,1368,1368,1368,1389,1389,1389,1389,1460,1460,1460,1492,1492,1492,1492,1541,1541,1541,1556,1556,1556,1556,1614,1614,1614,1654,1654,1654,1654,1765,1765,1765,1790,1790,1790,1790,1842,1842,1842,1842,1842,1842,1902,1927,1949,1949,1949,1954,1954,1954,1954,1954,1954,1954,1954,1954,1981,1981,1981,1981,1981,1981,2032,2032,2032,2052,2052,2052,2088,2088,2088,2088,2117,2117,2117,2117,2117,2149,2149,2149,2149,2149,2149,2205,2205,2205,2205,2205,2205,2205,2205,2205,2245,2245,2245,2245,2245,2245,2275,2275,2275,2275,2275,2275,2275,2275,2303,2303,2303,2303,2324,2324,2324,2324,2324,2324,2324,2324,2324,2324,2362,2362,2362,2385,2385,2385,2385,2385,2385,2385,2389,2389,2389,2389,2389,2389,2389,2403,2403,2403,2403,2403,2403,2403,2403,2403,2403,2403,2403,2413,2413,2413,2413,2414,2414,2414,2414,2414,2419,2419,2419,2419,2419,2419,2419,2419,2419,2421,2421,2421,2421,2421,2422,2422,2422,2422,2422,2422,2422,2441,2441,2441,2441,2441,2441,2441,2444,2444,2444,2444,2444,2444,2444,2444,2447,2447,2447],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.016,1.016,1.016,1.016,1.016,4.065,4.065,4.573,4.573,7.622,9.146,9.146,9.146,16.768,16.768,18.293,18.293,19.309,19.309,19.309,19.309,21.85,21.85,21.85,23.374,25.407,25.407,25.407,25.407,25.407,26.423,26.423,26.931,37.094,37.094,104.167,104.167,130.59,130.59,130.59,209.858,209.858,241.362,286.586,301.83,325.712,368.903,386.687,416.667,424.797,463.923,463.923,492.379,503.049,524.391,527.44,553.354,563.517,566.057,566.057,566.057,598.578,598.578,607.216,607.216,638.212,638.212,638.212,680.387,680.387,680.387,680.387,695.123,695.123,695.123,705.793,705.793,705.793,705.793,741.871,741.871,741.871,758.131,758.131,758.131,758.131,783.029,783.029,783.029,790.651,790.651,790.651,790.651,820.123,820.123,820.123,840.448,840.448,840.448,840.448,896.851,896.851,896.851,909.554,909.554,909.554,909.554,935.977,935.977,935.977,935.977,935.977,935.977,966.464,979.168,990.347,990.347,990.347,992.887,992.887,992.887,992.887,992.887,992.887,992.887,992.887,992.887,1006.607,1006.607,1006.607,1006.607,1006.607,1006.607,1032.521,1032.521,1032.521,1042.684,1042.684,1042.684,1060.977,1060.977,1060.977,1060.977,1075.712,1075.712,1075.712,1075.712,1075.712,1091.973,1091.973,1091.973,1091.973,1091.973,1091.973,1120.428,1120.428,1120.428,1120.428,1120.428,1120.428,1120.428,1120.428,1120.428,1140.753,1140.753,1140.753,1140.753,1140.753,1140.753,1155.997,1155.997,1155.997,1155.997,1155.997,1155.997,1155.997,1155.997,1170.225,1170.225,1170.225,1170.225,1180.896,1180.896,1180.896,1180.896,1180.896,1180.896,1180.896,1180.896,1180.896,1180.896,1200.204,1200.204,1200.204,1211.891,1211.891,1211.891,1211.891,1211.891,1211.891,1211.891,1213.924,1213.924,1213.924,1213.924,1213.924,1213.924,1213.924,1221.038,1221.038,1221.038,1221.038,1221.038,1221.038,1221.038,1221.038,1221.038,1221.038,1221.038,1221.038,1226.119,1226.119,1226.119,1226.119,1226.627,1226.627,1226.627,1226.627,1226.627,1229.168,1229.168,1229.168,1229.168,1229.168,1229.168,1229.168,1229.168,1229.168,1230.184,1230.184,1230.184,1230.184,1230.184,1230.692,1230.692,1230.692,1230.692,1230.692,1230.692,1230.692,1240.347,1240.347,1240.347,1240.347,1240.347,1240.347,1240.347,1241.871,1241.871,1241.871,1241.871,1241.871,1241.871,1241.871,1241.871,1243.396,1243.396,1243.396],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.049,0,0.508,0,3.049,1.524,0,0,7.622,0,1.524,0,1.016,0,0,0,2.541,0,0,1.524,2.033,0,0,0,0,1.016,0,0.508,10.163,0,67.073,0,26.423,0,0,79.268,0,31.504,45.224,15.244,23.882,43.191,17.785,29.98,8.13,39.126,0,28.455,10.671,21.341,3.049,25.915,10.163,2.541,0,0,32.52,0,8.638,0,30.996,0,0,42.175,0,0,0,14.736,0,0,10.671,0,0,0,36.077,0,0,16.26,0,0,0,24.898,0,0,7.622,0,0,0,29.472,0,0,20.325,0,0,0,56.402,0,0,12.703,0,0,0,26.423,0,0,0,0,0,30.488,12.703,11.179,0,0,2.541,0,0,0,0,0,0,0,0,13.72,0,0,0,0,0,25.915,0,0,10.163,0,0,18.293,0,0,0,14.736,0,0,0,0,16.26,0,0,0,0,0,28.455,0,0,0,0,0,0,0,0,20.325,0,0,0,0,0,15.244,0,0,0,0,0,0,0,14.228,0,0,0,10.671,0,0,0,0,0,0,0,0,0,19.309,0,0,11.687,0,0,0,0,0,0,2.033,0,0,0,0,0,0,7.114,0,0,0,0,0,0,0,0,0,0,0,5.081,0,0,0,0.508,0,0,0,0,2.541,0,0,0,0,0,0,0,0,1.016,0,0,0,0,0.508,0,0,0,0,0,0,9.654,0,0,0,0,0,0,1.524,0,0,0,0,0,0,0,1.524,0,0],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.049,3.049,3.557,3.557,6.606,8.13,8.13,8.13,12.703,12.703,13.719,13.719,11.686,10.162,10.162,10.162,5.081,5.081,3.557,5.081,6.098,6.098,6.098,6.098,3.557,4.573,4.573,3.557,11.687,11.687,78.76,78.76,105.183,104.167,104.167,182.927,172.764,204.268,182.419,197.663,195.122,238.313,256.098,206.81,214.94,222.562,177.338,190.549,177.338,155.488,140.752,136.687,138.72,102.135,102.135,73.68,95.529,74.188,79.777,53.862,74.695,72.154,72.154,114.329,81.809,81.809,73.171,87.907,56.911,56.911,67.582,25.407,25.407,25.407,61.484,46.748,46.748,63.008,52.337,52.337,52.337,77.235,41.158,41.158,48.78,32.52,32.52,32.52,61.992,37.094,37.094,57.419,49.797,49.797,49.797,106.199,76.727,76.727,89.43,69.105,69.105,69.105,95.528,39.126,39.126,39.126,26.423,26.423,56.911,69.614,54.37,54.37,54.37,56.911,56.911,56.911,26.423,13.72,2.541,2.541,2.541,0,13.72,13.72,13.72,13.72,13.72,13.72,39.635,39.635,25.915,36.078,36.078,36.078,54.371,54.371,28.456,28.456,43.192,33.029,33.029,33.029,14.736,30.996,30.996,30.996,16.26,16.26,16.26,44.715,44.715,28.455,28.455,28.455,28.455,28.455,28.455,0,20.325,20.325,20.325,20.325,20.325,20.325,35.569,35.569,15.244,15.244,15.244,15.244,15.244,15.244,14.228,14.228,14.228,14.228,24.899,24.899,24.899,24.899,10.671,10.671,10.671,10.671,0,0,19.309,19.309,19.309,30.996,30.996,30.996,30.996,30.996,11.687,11.687,13.72,2.033,2.033,2.033,2.033,2.033,2.033,9.147,7.114,7.114,7.114,7.114,7.114,7.114,7.114,0,0,0,0,5.081,5.081,5.081,5.081,5.589,5.589,5.589,5.589,0.508,3.049,3.049,3.049,2.541,2.541,2.541,2.541,2.541,0,1.016,1.016,1.016,1.016,1.016,1.524,1.524,1.524,0.508,0.508,0.508,0.508,10.162,9.654,9.654,9.654,9.654,9.654,9.654,11.178,1.524,1.524,1.524,1.524,1.524,1.524,1.524,1.524,1.524,1.524],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.436,0.508,0.508,0.944,1.161,1.161,0.726,1.815,1.742,1.96,1.524,1.452,1.452,1.452,0.363,0.726,0.508,0.508,0.581,0.871,0.871,0.871,0.508,0.508,0.653,0.436,0.218,1.67,1.67,11.251,11.251,14.881,14.881,14.808,24.681,24.681,19.599,26.06,24.463,27.875,34.045,25.261,29.544,26.205,25.334,23.156,23.81,19.164,19.672,15.825,18.365,14.228,14.591,10.526,9.001,10.598,10.163,7.695,6.243,10.308,10.308,10.308,11.687,11.687,10.453,10.453,8.13,8.13,8.13,3.63,3.63,3.63,3.63,6.678,6.678,6.678,7.477,7.477,7.477,7.477,5.88,5.88,5.88,4.646,4.646,4.646,4.646,5.299,5.299,5.299,7.114,7.114,7.114,7.114,10.961,10.961,10.961,9.872,9.872,9.872,9.872,5.589,5.589,5.589,3.775,3.775,3.775,8.13,6.17,7.767,7.767,7.767,8.13,8.13,3.775,1.96,0.363,0.363,0.363,0,0,1.96,1.96,1.96,1.96,1.96,1.96,5.662,3.702,3.702,5.154,5.154,5.154,7.767,4.065,4.065,4.065,4.718,4.718,4.718,2.105,2.105,4.428,4.428,2.323,2.323,2.323,2.323,6.388,4.065,4.065,4.065,4.065,4.065,4.065,0,0,2.904,2.904,2.904,2.904,2.904,2.904,5.081,2.178,2.178,2.178,2.178,2.178,2.178,0,2.033,2.033,2.033,2.033,3.557,3.557,3.557,1.524,1.524,1.524,1.524,0,0,0,2.758,2.758,2.758,4.428,4.428,4.428,4.428,1.67,1.67,1.67,0.29,0.29,0.29,0.29,0.29,0.29,0.29,1.016,1.016,1.016,1.016,1.016,1.016,1.016,0,0,0,0,0,0.726,0.726,0.726,0.726,0.798,0.798,0.798,0.073,0.073,0.436,0.436,0.363,0.363,0.363,0.363,0.363,0,0,0.145,0.145,0.145,0.145,0.145,0.218,0.218,0.073,0.073,0.073,0.073,0.073,1.379,1.379,1.379,1.379,1.379,1.379,1.379,0.218,0.218,0.218,0.218,0.218,0.218,0.218,0,0.218,0.218,0.218]},{"iso":"GUY","continent":"South America","population":786559,"name":"Guyana","population_density":3.952,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,4,4,7,7,7,7,7,19,20,5,5,5,5,8,8,8,12,19,19,23,23,24,31,33,37,37,37,45,45,45,47,55,55,63,63,65,65,66,67,70,73,73,74,74,74,78,82,82,82,82,92,93,93,93,94,94,104,109,113,113,113,116,117,117,124,125,125,127,127,127,135,137,139,139,150,150,152,153,153,153,153,153,153,154,154,154,156,156,158,159,159,159,159,171,171,183,183,183,184,205,206,209,215,215,230,230,235,245,248,250,256,272,273,273,284,284,286,290,291,297,300,308,313,315,320,327,336,337,339,350,351,352,360,370,389,396,398,401,413,430,474,474,497,509,538,538,554,568,568,602,623,631,649,674,709,709,737,776,846,881,925,955,1029,1060,1093,1140,1180,1184,1234,1306,1373,1382,1401,1401,1459,1468,1560,1613,1703,1750,1763,1812,1853,1884,1958,1958,2027,2102,2168,2269,2402,2437,2535,2579,2709,2725,2772,2787,2846,2894,2929,2968,2968,3093,3188,3188,3292,3329,3358,3405,3469,3521,3565,3589,3620,3672,3710,3734,3765,3796,3850,3877,3960,3994,4023,4026,4061,4074,4098,4143,4162,4208,4238,4245,4324,4393,4457,4484,4514,4524,4530,4618,4662,4724,4794,4823,4874,4890,4914,4976,5005,5093,5133,5154,5189,5236,5276,5310,5338,5376,5406,5423,5449,5528,5601,5637,5665,5697,5700,5732,5811,5839,5879,5920,5943,5973,6016,6042],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.271,1.271,1.271,5.085,5.085,8.9,8.9,8.9,8.9,8.9,24.156,25.427,6.357,6.357,6.357,6.357,10.171,10.171,10.171,15.256,24.156,24.156,29.241,29.241,30.513,39.412,41.955,47.04,47.04,47.04,57.211,57.211,57.211,59.754,69.925,69.925,80.096,80.096,82.638,82.638,83.91,85.181,88.995,92.809,92.809,94.081,94.081,94.081,99.166,104.252,104.252,104.252,104.252,116.965,118.237,118.237,118.237,119.508,119.508,132.221,138.578,143.664,143.664,143.664,147.478,148.749,148.749,157.649,158.92,158.92,161.463,161.463,161.463,171.634,174.176,176.719,176.719,190.704,190.704,193.247,194.518,194.518,194.518,194.518,194.518,194.518,195.79,195.79,195.79,198.332,198.332,200.875,202.146,202.146,202.146,202.146,217.403,217.403,232.659,232.659,232.659,233.93,260.629,261.9,265.714,273.342,273.342,292.413,292.413,298.77,311.483,315.297,317.84,325.468,345.81,347.081,347.081,361.066,361.066,363.609,368.695,369.966,377.594,381.408,391.579,397.936,400.479,406.835,415.735,427.177,428.448,430.991,444.976,446.248,447.519,457.69,470.403,494.559,503.459,506.001,509.816,525.072,546.685,602.625,602.625,631.866,647.122,683.992,683.992,704.334,722.133,722.133,765.359,792.058,802.228,825.113,856.897,901.395,901.395,936.993,986.576,1075.571,1120.069,1176.008,1214.149,1308.23,1347.642,1389.597,1449.351,1500.205,1505.291,1568.859,1660.397,1745.578,1757.02,1781.176,1781.176,1854.915,1866.357,1983.322,2050.704,2165.127,2224.881,2241.408,2303.705,2355.831,2395.243,2489.324,2489.324,2577.048,2672.4,2756.309,2884.717,3053.808,3098.305,3222.899,3278.839,3444.115,3464.457,3524.211,3543.282,3618.292,3679.317,3723.815,3773.398,3773.398,3932.318,4053.097,4053.097,4185.319,4232.359,4269.228,4328.982,4410.349,4476.46,4532.4,4562.913,4602.325,4668.436,4716.747,4747.26,4786.672,4826.084,4894.738,4929.064,5034.587,5077.814,5114.683,5118.497,5162.995,5179.522,5210.035,5267.246,5291.402,5349.885,5388.026,5396.925,5497.363,5585.086,5666.454,5700.78,5738.921,5751.635,5759.263,5871.143,5927.082,6005.907,6094.902,6131.771,6196.611,6216.953,6247.465,6326.29,6363.159,6475.039,6525.893,6552.592,6597.089,6656.843,6707.698,6750.924,6786.522,6834.834,6872.975,6894.588,6927.643,7028.081,7120.89,7166.659,7202.257,7242.94,7246.755,7287.438,7387.876,7423.474,7474.328,7526.454,7555.695,7593.836,7648.504,7681.56],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.814,0,3.814,0,0,0,0,15.256,1.271,-19.07,0,0,0,3.814,0,0,5.085,8.9,0,5.085,0,1.271,8.9,2.543,5.085,0,0,10.171,0,0,2.543,10.171,0,10.171,0,2.543,0,1.271,1.271,3.814,3.814,0,1.271,0,0,5.085,5.085,0,0,0,12.714,1.271,0,0,1.271,0,12.714,6.357,5.085,0,0,3.814,1.271,0,8.9,1.271,0,2.543,0,0,10.171,2.543,2.543,0,13.985,0,2.543,1.271,0,0,0,0,0,1.271,0,0,2.543,0,2.543,1.271,0,0,0,15.256,0,15.256,0,0,1.271,26.699,1.271,3.814,7.628,0,19.07,0,6.357,12.714,3.814,2.543,7.628,20.342,1.271,0,13.985,0,2.543,5.085,1.271,7.628,3.814,10.171,6.357,2.543,6.357,8.9,11.442,1.271,2.543,13.985,1.271,1.271,10.171,12.714,24.156,8.9,2.543,3.814,15.256,21.613,55.94,0,29.241,15.256,36.869,0,20.342,17.799,0,43.226,26.699,10.171,22.884,31.784,44.498,0,35.598,49.583,88.995,44.498,55.94,38.141,94.081,39.412,41.955,59.754,50.854,5.085,63.568,91.538,85.181,11.442,24.156,0,73.739,11.442,116.965,67.382,114.422,59.754,16.528,62.297,52.126,39.412,94.081,0,87.724,95.352,83.91,128.407,169.091,44.498,124.593,55.94,165.277,20.342,59.754,19.07,75.01,61.025,44.498,49.583,0,158.92,120.779,0,132.221,47.04,36.869,59.754,81.367,66.111,55.94,30.513,39.412,66.111,48.312,30.513,39.412,39.412,68.653,34.327,105.523,43.226,36.869,3.814,44.498,16.528,30.513,57.211,24.156,58.483,38.141,8.9,100.437,87.724,81.367,34.327,38.141,12.714,7.628,111.88,55.94,78.824,88.995,36.869,64.839,20.342,30.513,78.824,36.869,111.88,50.854,26.699,44.498,59.754,50.854,43.226,35.598,48.312,38.141,21.613,33.055,100.437,92.809,45.769,35.598,40.684,3.814,40.684,100.437,35.598,50.854,52.126,29.241,38.141,54.668,33.055],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.814,3.814,7.628,7.628,7.628,7.628,7.628,22.884,20.341,1.271,-2.543,-2.543,-2.543,1.271,1.271,-13.985,-10.171,17.799,17.799,22.884,22.884,20.341,29.241,31.784,31.784,22.884,22.884,27.97,27.97,26.699,20.342,27.97,22.885,33.056,33.056,25.428,25.428,26.699,25.427,19.07,22.884,12.713,13.984,11.441,11.441,15.255,19.069,15.255,11.441,11.441,22.884,24.155,24.155,19.07,15.256,15.256,27.97,34.327,26.698,25.427,25.427,29.241,29.241,29.241,25.427,20.341,15.256,17.799,17.799,13.985,22.885,25.428,19.071,17.8,31.785,29.242,31.785,33.056,22.885,20.342,17.799,17.799,3.814,5.085,2.542,1.271,3.814,3.814,6.357,7.628,7.628,6.357,6.357,21.613,19.07,34.326,31.783,30.512,31.783,58.482,59.753,48.311,55.939,40.683,59.753,59.753,64.839,50.854,53.397,52.126,52.126,72.468,54.669,54.669,62.297,49.583,48.312,50.854,44.497,31.783,34.326,44.497,36.869,39.412,43.226,47.041,57.212,50.855,49.584,53.398,48.312,47.04,50.854,54.668,67.382,75.011,75.011,64.84,78.825,99.167,144.936,132.222,137.307,143.663,177.989,174.175,179.261,175.447,119.507,162.733,160.191,155.106,141.121,172.905,197.061,179.262,214.86,221.217,283.513,317.84,350.896,357.253,406.836,446.248,452.605,462.776,424.635,385.222,392.85,446.247,437.347,409.377,391.578,331.824,354.709,361.066,414.463,390.307,419.548,467.86,460.232,522.529,500.916,528.886,506.002,438.62,411.922,447.52,514.902,581.012,697.977,703.063,733.575,789.515,867.068,792.058,767.902,658.565,564.484,581.011,500.916,494.559,329.282,467.86,528.885,509.815,567.026,553.041,545.412,555.583,636.95,544.141,479.302,509.815,417.006,436.077,447.52,418.279,376.324,349.625,362.338,366.152,432.263,409.378,397.935,371.236,376.322,353.438,315.298,338.182,256.815,272.072,273.344,278.43,334.369,405.565,456.419,433.535,447.52,401.751,371.238,474.218,429.721,420.821,428.449,430.991,457.689,465.317,488.202,455.146,436.075,469.131,430.99,420.82,400.479,439.891,460.232,424.634,423.363,359.795,347.082,341.996,330.553,371.236,413.191,415.734,415.734,408.106,373.779,392.85,460.232,395.393,353.438,359.795,353.438,350.895,401.749,394.12],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.09,1.09,1.09,1.09,2.724,2.906,-0.363,-0.363,-0.363,-0.363,0.182,-1.998,-2.179,1.271,2.543,2.543,3.269,2.724,2.906,4.177,3.814,3.269,3.269,2.543,3.996,3.814,2.543,2.543,3.269,3.269,4.722,3.269,3.632,3.632,3.451,2.179,2.724,1.816,1.816,1.635,1.635,1.453,1.998,2.179,1.635,1.635,1.453,3.269,3.451,2.724,1.998,2.179,2.179,3.996,3.088,3.632,3.632,3.632,3.996,4.177,2.361,2.724,2.179,2.179,2.543,1.998,1.816,3.269,2.361,2.543,2.543,4.177,4.177,4.541,3.269,2.906,2.543,2.543,0.545,0.545,0.363,0.182,0.182,0.545,0.545,0.908,1.09,0.908,0.908,0.908,2.724,2.724,4.541,4.359,4.359,4.541,8.355,6.357,6.902,5.812,5.812,8.536,8.355,5.449,7.083,7.083,6.357,7.447,7.628,7.81,6.902,7.083,6.538,6.538,6.175,3.451,4.359,4.904,4.359,5.267,5.267,5.449,6.538,7.083,6.72,5.63,6.72,6.538,5.812,5.994,6.175,9.444,10.353,8.718,9.081,11.079,12.714,18.889,15.438,18.344,20.16,24.882,22.703,22.521,17.073,17.073,19.07,20.705,16.891,20.16,21.795,25.609,25.609,24.519,27.788,39.049,42.137,45.587,44.679,58.119,58.664,57.574,53.397,54.305,47.04,50.673,50.31,56.848,52.489,47.404,40.139,49.946,42.5,46.132,43.59,58.301,63.386,65.747,64.113,69.925,58.846,62.66,46.314,50.31,61.57,64.658,75.555,94.081,86.997,104.796,100.256,110.245,101.164,91.356,69.925,74.284,65.203,63.568,47.04,44.134,58.301,72.831,62.115,72.286,72.649,70.833,79.369,68.29,60.48,68.472,53.942,52.852,57.03,55.395,48.13,44.316,41.955,47.404,46.677,52.307,51.581,52.489,47.404,48.13,40.684,40.139,33.237,30.513,33.6,38.504,33.419,45.406,53.579,57.03,58.483,55.577,51.944,51.763,53.397,48.857,48.493,56.303,56.121,63.568,65.384,53.76,57.03,51.036,54.305,56.303,50.854,54.305,58.483,54.487,55.395,44.498,44.134,45.769,42.5,38.686,45.769,52.852,54.305,52.489,52.852,50.31,51.399,51.399,43.226,43.953,46.314,44.679,49.583,51.581,41.955]},{"iso":"HTI","continent":"North America","population":11402533,"name":"Haiti","population_density":398.448,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,6,7,8,8,8,8,15,15,15,16,16,18,20,21,24,25,27,30,31,33,33,40,40,41,41,43,44,47,57,57,62,72,72,72,74,76,76,76,81,85,85,88,100,101,101,129,146,151,182,209,209,234,273,310,358,456,533,533,596,734,812,865,865,958,1174,1320,1320,1584,1865,2124,2226,2226,2507,2640,2740,3072,3334,3538,3662,3796,3941,3941,4165,4165,4441,4547,4688,4916,4980,5077,5077,5211,5324,5429,5543,5722,5777,5777,5933,5975,6040,6101,6230,6294,6333,6371,6432,6486,6486,6617,6690,6727,6727,6727,6831,6948,6975,7053,7053,7053,7100,7167,7197,7260,7297,7315,7340,7340,7378,7412,7424,7468,7468,7511,7511,7544,7582,7599,7611,7634,7634,7649,7743,7781,7810,7831,7879,7897,7921,7949,7997,8016,8050,8082,8110,8112,8122,8151,8161,8174,8209,8224,8230,8258,8301,8326,8336,8360,8376,8376,8384,8429,8457,8478,8493,8499,8530,8541,8556,8600,8600,8619,8624,8633,8646,8668,8684,8723,8740,8740,8740,8766,8781,8792,8811,8819,8827,8838,8838,8854,8854,8860,8882,8882,8887,8908,8925,8925,8956,8964,8976,8976,8979,9007,9015,9015,9026,9026,9040,9046,9057,9057,9057,9057,9057,9057,9100,9109,9127,9127,9127,9137,9137,9152,9160,9168,9168,9168,9188,9191,9191,9208,9211,9214,9214,9224,9229,9248,9256,9264,9272,9272,9294,9296,9313,9331,9347,9370,9370,9399,9399,9434,9434,9465,9491,9491,9588,9597,9597,9627],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.175,0.175,0.175,0.526,0.614,0.702,0.702,0.702,0.702,1.315,1.315,1.315,1.403,1.403,1.579,1.754,1.842,2.105,2.192,2.368,2.631,2.719,2.894,2.894,3.508,3.508,3.596,3.596,3.771,3.859,4.122,4.999,4.999,5.437,6.314,6.314,6.314,6.49,6.665,6.665,6.665,7.104,7.454,7.454,7.718,8.77,8.858,8.858,11.313,12.804,13.243,15.961,18.329,18.329,20.522,23.942,27.187,31.397,39.991,46.744,46.744,52.269,64.372,71.212,75.86,75.86,84.016,102.96,115.764,115.764,138.917,163.56,186.274,195.22,195.22,219.863,231.528,240.297,269.414,292.391,310.282,321.157,332.908,345.625,345.625,365.27,365.27,389.475,398.771,411.137,431.132,436.745,445.252,445.252,457.004,466.914,476.122,486.12,501.818,506.642,506.642,520.323,524.006,529.707,535.057,546.37,551.983,555.403,558.736,564.085,568.821,568.821,580.31,586.712,589.957,589.957,589.957,599.077,609.338,611.706,618.547,618.547,618.547,622.669,628.545,631.176,636.701,639.946,641.524,643.717,643.717,647.049,650.031,651.083,654.942,654.942,658.713,658.713,661.607,664.94,666.431,667.483,669.5,669.5,670.816,679.06,682.392,684.936,686.777,690.987,692.565,694.67,697.126,701.335,703.002,705.983,708.79,711.245,711.421,712.298,714.841,715.718,716.858,719.928,721.243,721.769,724.225,727.996,730.189,731.066,733.17,734.574,734.574,735.275,739.222,741.677,743.519,744.835,745.361,748.079,749.044,750.36,754.218,754.218,755.885,756.323,757.112,758.253,760.182,761.585,765.005,766.496,766.496,766.496,768.777,770.092,771.057,772.723,773.425,774.126,775.091,775.091,776.494,776.494,777.02,778.95,778.95,779.388,781.23,782.721,782.721,785.44,786.141,787.194,787.194,787.457,789.912,790.614,790.614,791.579,791.579,792.806,793.332,794.297,794.297,794.297,794.297,794.297,794.297,798.068,798.858,800.436,800.436,800.436,801.313,801.313,802.629,803.33,804.032,804.032,804.032,805.786,806.049,806.049,807.54,807.803,808.066,808.066,808.943,809.382,811.048,811.749,812.451,813.153,813.153,815.082,815.257,816.748,818.327,819.73,821.747,821.747,824.291,824.291,827.36,827.36,830.079,832.359,832.359,840.866,841.655,841.655,844.286],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.351,0.088,0.088,0,0,0,0.614,0,0,0.088,0,0.175,0.175,0.088,0.263,0.088,0.175,0.263,0.088,0.175,0,0.614,0,0.088,0,0.175,0.088,0.263,0.877,0,0.438,0.877,0,0,0.175,0.175,0,0,0.438,0.351,0,0.263,1.052,0.088,0,2.456,1.491,0.438,2.719,2.368,0,2.192,3.42,3.245,4.21,8.595,6.753,0,5.525,12.103,6.841,4.648,0,8.156,18.943,12.804,0,23.153,24.644,22.714,8.945,0,24.644,11.664,8.77,29.116,22.977,17.891,10.875,11.752,12.716,0,19.645,0,24.205,9.296,12.366,19.996,5.613,8.507,0,11.752,9.91,9.208,9.998,15.698,4.823,0,13.681,3.683,5.7,5.35,11.313,5.613,3.42,3.333,5.35,4.736,0,11.489,6.402,3.245,0,0,9.121,10.261,2.368,6.841,0,0,4.122,5.876,2.631,5.525,3.245,1.579,2.192,0,3.333,2.982,1.052,3.859,0,3.771,0,2.894,3.333,1.491,1.052,2.017,0,1.315,8.244,3.333,2.543,1.842,4.21,1.579,2.105,2.456,4.21,1.666,2.982,2.806,2.456,0.175,0.877,2.543,0.877,1.14,3.069,1.315,0.526,2.456,3.771,2.192,0.877,2.105,1.403,0,0.702,3.946,2.456,1.842,1.315,0.526,2.719,0.965,1.315,3.859,0,1.666,0.438,0.789,1.14,1.929,1.403,3.42,1.491,0,0,2.28,1.315,0.965,1.666,0.702,0.702,0.965,0,1.403,0,0.526,1.929,0,0.438,1.842,1.491,0,2.719,0.702,1.052,0,0.263,2.456,0.702,0,0.965,0,1.228,0.526,0.965,0,0,0,0,0,3.771,0.789,1.579,0,0,0.877,0,1.315,0.702,0.702,0,0,1.754,0.263,0,1.491,0.263,0.263,0,0.877,0.438,1.666,0.702,0.702,0.702,0,1.929,0.175,1.491,1.579,1.403,2.017,0,2.543,0,3.069,0,2.719,2.28,0,8.507,0.789,0,2.631],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.351,0.439,0.527,0.527,0.527,0.527,1.141,1.141,0.79,0.79,0.702,0.877,1.052,1.14,0.789,0.877,1.052,1.227,1.315,1.315,1.14,1.666,1.403,1.403,1.228,1.14,1.14,1.228,2.105,1.491,1.929,2.718,2.718,2.543,2.63,2.542,1.665,1.665,1.665,1.139,1.139,1.402,2.279,2.192,2.192,4.648,5.701,5.788,8.507,10.612,9.56,11.664,15.084,15.873,18.592,26.749,30.783,28.415,33.94,43.851,47.272,48.675,44.465,44.026,56.216,69.02,63.495,74.545,92.348,110.414,119.359,111.203,116.904,115.764,124.534,130.497,128.83,124.007,125.937,137.689,125.761,114.097,124.972,95.856,97.084,88.489,89.98,98.224,91.121,99.628,79.983,91.735,77.44,77.352,74.984,70.686,69.896,61.389,75.07,67.001,62.791,58.933,60.248,50.163,48.76,52.093,43.762,44.815,39.115,45.254,40.343,37.975,34.555,31.222,34.993,40.518,42.886,38.238,31.836,28.591,32.713,38.589,32.099,27.363,28.24,22.978,25.17,25.17,24.381,21.487,19.908,18.242,14.997,17.189,14.997,17.891,17.891,16.4,16.4,14.558,14.558,12.102,20.346,20.785,19.995,20.346,23.504,23.066,25.171,26.312,22.278,20.611,21.05,22.014,20.26,18.856,17.628,17.715,14.382,13.856,13.943,12.452,10.522,12.803,15.697,15.346,15.346,16.311,14.645,13.33,13.506,14.996,13.681,13.331,13.769,12.19,13.506,14.471,15.084,14.997,12.541,12.365,11.488,11.751,10.172,11.136,11.224,10.785,12.276,10.61,10.172,11.663,11.838,10.874,11.137,8.419,7.63,8.595,8.595,7.718,6.403,5.964,6.227,5.525,5.261,6.138,7.629,6.226,8.945,9.121,8.244,8.244,8.069,8.683,7.894,7.894,6.14,5.438,5.614,6.14,6.842,4.386,3.684,3.684,2.719,2.719,5.262,5.525,6.139,6.139,6.139,7.016,7.016,8.331,5.262,5.175,3.596,3.596,5.35,4.736,4.736,4.912,4.473,4.034,4.034,4.911,3.595,4.998,5.7,4.911,5.35,5.087,7.016,6.314,7.367,7.28,7.981,9.296,8.594,11.137,9.208,12.102,10.611,11.751,12.628,10.611,19.118,17.364,17.364,16.926],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.075,0.075,0.075,0.163,0.113,0.1,0.1,0.1,0.125,0.15,0.075,0.113,0.125,0.138,0.175,0.163,0.163,0.15,0.2,0.188,0.175,0.138,0.15,0.138,0.175,0.213,0.213,0.263,0.388,0.363,0.351,0.338,0.238,0.238,0.175,0.113,0.163,0.163,0.175,0.301,0.313,0.313,0.601,0.764,0.827,1.178,1.366,1.353,1.666,1.804,2.055,2.593,3.433,4.059,4.059,4.535,5.776,6.289,6.352,5.124,5.325,8.031,9.071,7.342,9.672,12.529,15.773,15.886,13.18,14.871,16.538,14.483,15.122,15.16,16.437,17.991,16.149,16.3,15.047,13.694,10.411,11.313,11.088,11.175,12.215,13.017,11.426,11.426,9.647,9.735,9.284,7.855,9.296,8.77,8.77,9.046,8.156,7.655,6.991,6.365,6.477,6.966,5.488,5.726,5.588,4.823,4.849,4.961,4.936,4.46,3.696,4.322,5.788,4.485,4.548,4.084,4.084,4.673,4.21,3.12,3.571,3.057,3.282,3.596,3.007,2.644,2.694,2.055,2.142,1.917,2.142,2.142,2.08,2.13,2.192,1.792,2.08,1.541,1.729,2.493,2.493,2.644,2.756,3.069,3.295,3.408,2.581,2.706,2.581,2.744,2.543,2.669,2.393,2.167,1.929,1.817,1.554,1.591,1.428,1.478,1.704,1.879,2.067,2.03,1.892,1.904,1.829,1.579,1.604,1.641,1.779,1.666,1.541,1.929,1.967,1.591,1.792,1.528,1.579,1.566,1.29,1.315,1.403,1.052,1.541,1.516,1.453,1.341,1.503,1.416,1.353,1.103,0.99,1.09,1.228,0.902,0.915,0.777,0.614,0.789,0.689,0.614,0.877,0.89,0.89,1.203,1.027,1.178,1.115,0.89,1.027,1.128,0.739,0.777,0.626,0.802,0.839,0.626,0.526,0.526,0.388,0.388,0.213,0.677,0.651,0.877,0.877,0.877,1.002,1.002,0.651,0.639,0.514,0.514,0.514,0.639,0.677,0.489,0.601,0.539,0.576,0.576,0.451,0.476,0.714,0.601,0.664,0.727,0.727,0.877,0.839,0.814,0.94,1.04,1.228,1.228,1.315,1.29,1.516,1.29,1.478,1.516,1.516,2.368,2.481,2.042,2.418]},{"iso":"HND","continent":"North America","population":9904608,"name":"Honduras","population_density":82.805,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,3,6,8,9,12,24,24,26,30,30,36,52,68,95,110,139,141,172,219,222,264,268,298,305,312,343,382,392,393,397,407,419,426,442,457,472,477,494,510,519,591,627,627,661,702,738,771,804,1010,1055,1178,1270,1461,1685,1771,1830,1972,2100,2080,2255,2318,2460,2565,2646,2798,2955,2955,3204,3477,3477,3950,4189,4401,4640,4752,4752,5094,5202,5362,5527,5690,5880,5971,6155,6327,6450,6935,7360,7669,8132,8455,8858,9178,9656,10299,10739,11258,12306,12769,13356,13943,14571,15366,15994,17007,18082,18818,19558,20262,21120,22116,22921,23943,24665,25428,25978,26384,27053,27583,28090,28579,29106,30036,30867,31745,32793,33835,34611,35345,36102,36902,37559,38438,39276,39741,40460,40944,41426,42014,42685,43197,43794,44299,45098,45755,46365,46973,47454,47872,48403,48657,49042,49467,49979,50502,50995,51670,52298,52819,53381,53983,54511,55479,55877,56649,57669,58810,59645,60174,61014,61769,62526,63158,63798,64352,64764,64814,65218,65597,65802,66049,67136,67789,68620,68620,69660,70120,70611,71143,71616,72075,72306,72675,73193,73840,74548,74548,75537,76098,76900,77598,78269,78788,79629,80020,80662,81016,81672,82552,83146,84081,84413,84852,85458,86089,86691,87594,88425,89381,90232,91078,91509,91509,92724,93214,93966,94623,95199,96150,96888,96888,98212,98405,98688,99124,99347,99576,100041,100041,100573,100804,101169,101468,102079,102555,103102,103239,103488,103488,103488,103551,104435,104435,105211,105211,106116,106681,107134,107513,107888,108253,108253,109144,109760,109760,109960,111023,111023,111707,112792,113207,113708,114043,114359,114642,114943,115317,115474],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.202,0.202,0.202,0.202,0.303,0.606,0.808,0.909,1.212,2.423,2.423,2.625,3.029,3.029,3.635,5.25,6.865,9.591,11.106,14.034,14.236,17.366,22.111,22.414,26.654,27.058,30.087,30.794,31.5,34.63,38.568,39.578,39.679,40.082,41.092,42.304,43.01,44.626,46.14,47.655,48.159,49.876,51.491,52.4,59.669,63.304,63.304,66.737,70.876,74.511,77.843,81.174,101.973,106.516,118.935,128.223,147.507,170.123,178.806,184.762,199.099,212.023,210.003,227.672,234.032,248.369,258.97,267.148,282.495,298.346,298.346,323.486,351.049,351.049,398.804,422.934,444.339,468.469,479.777,479.777,514.306,525.21,541.364,558.023,574.48,593.663,602.851,621.428,638.794,651.212,700.179,743.088,774.286,821.032,853.643,894.331,926.639,974.9,1039.819,1084.243,1136.643,1242.452,1289.198,1348.463,1407.729,1471.133,1551.399,1614.804,1717.08,1825.615,1899.924,1974.636,2045.714,2132.341,2232.9,2314.175,2417.36,2490.255,2567.29,2622.82,2663.811,2731.355,2784.865,2836.054,2885.425,2938.632,3032.528,3116.428,3205.074,3310.883,3416.087,3494.434,3568.541,3644.97,3725.741,3792.073,3880.82,3965.427,4012.375,4084.967,4133.833,4182.498,4241.864,4309.61,4361.303,4421.578,4472.565,4553.234,4619.567,4681.154,4742.54,4791.103,4833.306,4886.917,4912.562,4951.433,4994.342,5046.035,5098.839,5148.614,5216.764,5280.169,5332.77,5389.512,5450.291,5503.6,5601.332,5641.516,5719.459,5822.441,5937.64,6021.945,6075.354,6160.163,6236.39,6312.819,6376.628,6441.244,6497.178,6538.775,6543.823,6584.612,6622.877,6643.574,6668.512,6778.259,6844.188,6928.088,6928.088,7033.09,7079.533,7129.106,7182.818,7230.574,7276.916,7300.238,7337.494,7389.793,7455.116,7526.598,7526.598,7626.45,7683.091,7764.063,7834.535,7902.281,7954.681,8039.591,8079.068,8143.886,8179.627,8245.859,8334.706,8394.679,8489.079,8522.599,8566.922,8628.105,8691.813,8752.593,8843.762,8927.663,9024.183,9110.103,9195.518,9239.033,9239.033,9361.703,9411.175,9487.099,9553.432,9611.587,9707.603,9782.114,9782.114,9915.789,9935.275,9963.847,10007.867,10030.382,10053.502,10100.45,10100.45,10154.163,10177.485,10214.337,10244.525,10306.213,10354.271,10409.498,10423.33,10448.47,10448.47,10448.47,10454.831,10544.082,10544.082,10622.429,10622.429,10713.801,10770.845,10816.582,10854.847,10892.708,10929.559,10929.559,11019.517,11081.711,11081.711,11101.903,11209.227,11209.227,11278.286,11387.831,11429.73,11480.313,11514.136,11546.04,11574.613,11605.002,11642.763,11658.614],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.101,0.303,0.202,0.101,0.303,1.212,0,0.202,0.404,0,0.606,1.615,1.615,2.726,1.514,2.928,0.202,3.13,4.745,0.303,4.24,0.404,3.029,0.707,0.707,3.13,3.938,1.01,0.101,0.404,1.01,1.212,0.707,1.615,1.514,1.514,0.505,1.716,1.615,0.909,7.269,3.635,0,3.433,4.139,3.635,3.332,3.332,20.798,4.543,12.418,9.289,19.284,22.616,8.683,5.957,14.337,12.923,-2.019,17.669,6.361,14.337,10.601,8.178,15.346,15.851,0,25.14,27.563,0,47.756,24.13,21.404,24.13,11.308,0,34.529,10.904,16.154,16.659,16.457,19.183,9.188,18.577,17.366,12.418,48.967,42.909,31.198,46.746,32.611,40.688,32.308,48.26,64.919,44.424,52.4,105.809,46.746,59.265,59.265,63.405,80.266,63.405,102.276,108.535,74.309,74.713,71.078,86.626,100.559,81.275,103.184,72.895,77.035,55.53,40.991,67.544,53.51,51.188,49.371,53.208,93.896,83.9,88.646,105.809,105.204,78.347,74.107,76.429,80.77,66.333,88.747,84.607,46.948,72.592,48.866,48.664,59.366,67.746,51.693,60.275,50.986,80.67,66.333,61.587,61.386,48.563,42.203,53.611,25.645,38.871,42.909,51.693,52.804,49.775,68.15,63.405,52.602,56.741,60.78,53.309,97.732,40.183,77.944,102.982,115.199,84.304,53.409,84.809,76.227,76.429,63.809,64.616,55.934,41.597,5.048,40.789,38.265,20.697,24.938,109.747,65.929,83.9,0,105.002,46.443,49.573,53.712,47.756,46.342,23.322,37.255,52.299,65.323,71.482,0,99.853,56.64,80.972,70.472,67.746,52.4,84.91,39.477,64.818,35.741,66.232,88.848,59.972,94.401,33.52,44.323,61.184,63.708,60.78,91.17,83.9,96.521,85.92,85.415,43.515,0,122.67,49.472,75.924,66.333,58.155,96.016,74.511,0,133.675,19.486,28.573,44.02,22.515,23.121,46.948,0,53.712,23.322,36.852,30.188,61.688,48.058,55.227,13.832,25.14,0,0,6.361,89.251,0,78.347,0,91.372,57.044,45.736,38.265,37.861,36.852,0,89.958,62.193,0,20.193,107.324,0,69.059,109.545,41.9,50.583,33.823,31.904,28.573,30.39,37.76,15.851],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.101,0.404,0.606,0.707,1.01,2.222,2.222,2.424,2.727,2.424,2.828,4.342,5.654,7.168,8.682,11.408,11.206,14.336,18.475,17.163,19.788,17.466,18.981,16.76,17.265,17.265,16.458,17.165,13.026,13.026,11.007,11.512,11.512,9.997,7.573,8.077,8.481,9.793,10.398,10.095,16.657,18.677,17.163,19.082,22.716,24.635,26.352,28.775,42.304,43.212,55.63,61.486,76.631,95.612,100.963,103.588,97.127,105.507,91.07,99.45,86.527,78.248,80.166,82.387,83.396,86.324,88.343,95.814,117.016,102.679,139.834,155.786,161.844,170.123,181.431,156.291,163.257,174.161,142.559,135.088,130.141,125.194,123.074,141.651,124.488,126.002,158.815,185.065,199.806,227.369,250.792,272.903,287.845,323.687,339.639,341.154,362.356,421.419,435.554,454.131,481.088,496.233,511.58,530.561,580.437,583.163,610.726,626.174,637.987,661.208,681.501,699.371,700.279,664.639,667.365,648.182,618.095,599.013,551.964,521.877,468.064,448.377,465.238,493.608,541.263,579.528,631.222,658.381,683.117,706.338,693.212,675.645,675.746,654.544,596.288,590.533,565.292,537.527,516.123,517.536,480.482,456.15,460.188,468.266,485.733,498.656,500.676,481.493,472.003,465.339,439.998,398.199,374.775,364.881,356.299,357.511,383.458,393.252,420.209,438.079,455.95,457.566,502.494,492.902,502.696,542.273,604.87,632.433,625.062,656.562,635.057,671.303,657.168,618.802,559.537,516.83,468.469,424.449,386.487,330.755,291.884,337.015,347.01,389.313,384.265,448.478,456.656,485.532,514.306,452.315,432.728,372.15,409.405,356.702,375.582,397.491,343.779,395.876,406.174,463.824,497.041,512.488,499.565,512.993,552.47,517.435,496.536,481.796,500.172,492.398,534.399,483.009,487.855,484.221,512.188,506.736,509.058,532.986,535.106,587.506,628.598,610.929,547.221,609.111,567.413,559.437,529.249,501.484,512.085,543.081,543.081,554.086,524.1,476.749,454.436,418.796,345.901,318.338,318.338,238.375,242.211,250.49,236.658,275.831,300.768,309.047,322.879,294.307,270.985,234.133,210.306,237.869,189.811,212.931,199.099,265.331,322.375,368.111,400.015,348.625,385.477,307.13,397.088,367.909,310.865,285.322,354.381,316.52,348.727,458.272,410.214,398.604,432.427,444.138,365.387,395.777,364.478,270.784],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.087,0.101,0.144,0.317,0.317,0.332,0.346,0.317,0.389,0.577,0.635,1.024,1.212,1.572,1.601,1.962,2.409,2.221,2.438,2.279,2.293,2.365,2.019,1.788,2.308,1.846,1.803,1.428,1.471,1.543,1.197,0.865,0.938,1.139,1.154,1.255,1.313,1.341,2.149,2.452,2.236,2.654,3,3.289,3.635,3.072,5.524,6.173,7.457,8.192,10.428,13.183,13.947,11.827,13.226,13.298,11.683,11.452,9.13,9.938,10.601,9.721,10.067,12.62,10.096,12.779,14.668,13.154,18.808,20.063,20.856,24.303,22.327,18.39,23.322,18.058,16.919,16.241,15.144,16.269,17.582,15.303,16.226,15.693,20.308,24.087,25.803,31.169,33.174,36.505,39.347,39.246,42.39,44.28,45.087,55.544,56.41,60.261,61.833,61.616,66.737,68.309,67.804,76.631,78.78,80.987,82.083,82.992,88.299,85.299,84.535,84.333,84.665,82.444,75.924,71.208,67.241,59.813,56.453,53.049,58.53,64.66,67.674,75.145,82.862,87.001,89.987,87.492,87.045,83.857,81.42,78.477,73.992,73.775,69.838,65.251,64.256,61.256,56.554,58.458,55.371,59.914,62.438,62.756,61.847,61.4,58.818,59.193,51.333,47.409,44.741,43.356,43.962,45.044,47.121,52.515,54.477,56.453,57.751,57.823,64.674,60.679,62.756,69.953,78.304,81.665,81.679,79.833,84.982,84.766,79.169,71.943,67.89,66.203,54.809,49.746,44.294,38.135,32.467,40.154,43.63,54.895,49.068,58.602,62.28,65.799,57.794,55.198,49.833,53.164,43.486,44.323,46.573,49.111,42.289,49.933,54.693,60.938,63.535,63.881,61.155,73.285,64.66,65.828,59.366,58.761,61.775,62.857,64.213,63.362,60.434,64.068,63.708,59.698,64.155,62.655,71.655,77.597,81.059,78.174,69.491,73.992,69.073,66.131,63.333,59.438,66.939,77.583,60.059,72.088,64.025,58.631,56.611,46.111,38.77,45.477,26.38,31.27,30.52,29.496,30.592,36.102,36.26,44.15,38.453,38.712,33.448,29.135,21.231,27.116,19.226,28.443,24.851,37.904,46.054,51.679,44.395,49.804,43.876,43.876,43.674,44.409,37.876,35.294,45.217,39.953,49.818,52.616,49.717,56.943,58.89,48.116,52.198,46.674,36.419,32.698]},{"iso":"HKG","continent":"Asia","population":7496988,"name":"Hong Kong","population_density":7039.714,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},{"iso":"HUN","continent":"Europe","population":9660350,"name":"Hungary","population_density":108.043,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,4,7,9,9,13,13,19,30,32,39,50,58,73,85,103,131,167,187,226,261,300,343,408,447,492,525,585,623,678,733,744,817,895,980,1190,1310,1410,1458,1512,1579,1652,1763,1834,1916,1984,2098,2168,2284,2443,2443,2500,2583,2649,2727,2775,2863,2942,2998,3035,3065,3111,3150,3178,3213,3263,3284,3313,3341,3380,3417,3473,3509,3535,3556,3598,3641,3678,3713,3741,3756,3771,3793,3816,3841,3867,3876,3892,3921,3931,3954,3970,3990,4008,4014,4017,4027,4039,4053,4064,4069,4076,4077,4078,4079,4081,4086,4094,4102,4107,4114,4123,4127,4138,4142,4145,4155,4157,4166,4172,4174,4183,4189,4205,4210,4220,4223,4229,4234,4247,4258,4263,4279,4293,4315,4333,4339,4347,4366,4380,4398,4424,4435,4448,4456,4465,4484,4505,4526,4535,4544,4553,4564,4597,4621,4653,4696,4731,4746,4768,4813,4853,4877,4916,4946,4970,5002,5046,5098,5133,5155,5191,5215,5288,5379,5511,5669,5961,6139,6257,6622,6923,7382,7892,8387,8963,9304,9715,10191,10909,11825,12309,13153,13879,14460,15170,16111,16920,17990,18866,19499,20450,21200,22127,23077,24014,24716,25567,26461,27309,28631,29717,30575,31480,32298,33114,34046,35222,36596,37664,38837,39862,40782,41732,43025,44816,46290,47768,48757,50180,52212,54278,56098,59247,61563,63642,65933,68127,71413,75321,79199,82780,86769,90988,94916,99625,104943,109616,114778,118918,122863,126790,131887,136723,140961,147456,152659,156949,161461,165901,170298,174618,177952,181881,185687,192047,198440,204708,211527,217122,221073,225209,231844,238056,243581,250278,254148,256367,259588,265003,271200,276247,280400,283870,285763,288567,291549],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.207,0.207,0.207,0.414,0.725,0.932,0.932,1.346,1.346,1.967,3.105,3.313,4.037,5.176,6.004,7.557,8.799,10.662,13.561,17.287,19.357,23.395,27.018,31.055,35.506,42.234,46.272,50.93,54.346,60.557,64.49,70.184,75.877,77.016,84.573,92.647,101.446,123.184,135.606,145.957,150.926,156.516,163.452,171.008,182.499,189.848,198.336,205.376,217.176,224.423,236.43,252.889,252.889,258.79,267.382,274.214,282.288,287.257,296.366,304.544,310.341,314.171,317.276,322.038,326.075,328.974,332.597,337.772,339.946,342.948,345.847,349.884,353.714,359.511,363.237,365.929,368.103,372.45,376.901,380.732,384.355,387.253,388.806,390.359,392.636,395.017,397.605,400.296,401.228,402.884,405.886,406.921,409.302,410.958,413.029,414.892,415.513,415.823,416.859,418.101,419.55,420.689,421.206,421.931,422.034,422.138,422.241,422.448,422.966,423.794,424.622,425.14,425.864,426.796,427.21,428.349,428.763,429.073,430.109,430.316,431.247,431.868,432.075,433.007,433.628,435.284,435.802,436.837,437.148,437.769,438.286,439.632,440.771,441.288,442.945,444.394,446.671,448.534,449.156,449.984,451.95,453.4,455.263,457.954,459.093,460.439,461.267,462.199,464.165,466.339,468.513,469.445,470.376,471.308,472.447,475.863,478.347,481.66,486.111,489.734,491.287,493.564,498.222,502.363,504.847,508.884,511.99,514.474,517.787,522.341,527.724,531.347,533.625,537.351,539.836,547.392,556.812,570.476,586.832,617.058,635.484,647.699,685.482,716.641,764.155,816.948,868.188,927.813,963.112,1005.657,1054.931,1129.255,1224.076,1274.177,1361.545,1436.697,1496.84,1570.336,1667.745,1751.489,1862.251,1952.931,2018.457,2116.901,2194.537,2290.497,2388.837,2485.831,2558.499,2646.591,2739.135,2826.916,2963.764,3076.183,3164.999,3258.681,3343.357,3427.826,3524.303,3646.038,3788.269,3898.824,4020.248,4126.352,4221.586,4319.926,4453.772,4639.169,4791.752,4944.748,5047.126,5194.429,5404.773,5618.637,5807.036,6133.008,6372.75,6587.96,6825.115,7052.229,7392.382,7796.922,8198.357,8569.048,8981.973,9418.706,9825.317,10312.773,10863.271,11347.001,11881.35,12309.906,12718.276,13124.783,13652.404,14153.007,14591.707,15264.043,15802.637,16246.72,16713.784,17173.394,17628.554,18075.743,18420.865,18827.579,19221.56,19879.922,20541.699,21190.537,21896.412,22475.583,22884.575,23312.716,23999.545,24642.585,25214.511,25907.757,26308.364,26538.065,26871.49,27432.029,28073.517,28595.962,29025.863,29385.064,29581.019,29871.278,30179.962],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.207,0.311,0.207,0,0.414,0,0.621,1.139,0.207,0.725,1.139,0.828,1.553,1.242,1.863,2.898,3.727,2.07,4.037,3.623,4.037,4.451,6.729,4.037,4.658,3.416,6.211,3.934,5.693,5.693,1.139,7.557,8.074,8.799,21.738,12.422,10.352,4.969,5.59,6.936,7.557,11.49,7.35,8.488,7.039,11.801,7.246,12.008,16.459,0,5.9,8.592,6.832,8.074,4.969,9.109,8.178,5.797,3.83,3.105,4.762,4.037,2.898,3.623,5.176,2.174,3.002,2.898,4.037,3.83,5.797,3.727,2.691,2.174,4.348,4.451,3.83,3.623,2.898,1.553,1.553,2.277,2.381,2.588,2.691,0.932,1.656,3.002,1.035,2.381,1.656,2.07,1.863,0.621,0.311,1.035,1.242,1.449,1.139,0.518,0.725,0.104,0.104,0.104,0.207,0.518,0.828,0.828,0.518,0.725,0.932,0.414,1.139,0.414,0.311,1.035,0.207,0.932,0.621,0.207,0.932,0.621,1.656,0.518,1.035,0.311,0.621,0.518,1.346,1.139,0.518,1.656,1.449,2.277,1.863,0.621,0.828,1.967,1.449,1.863,2.691,1.139,1.346,0.828,0.932,1.967,2.174,2.174,0.932,0.932,0.932,1.139,3.416,2.484,3.313,4.451,3.623,1.553,2.277,4.658,4.141,2.484,4.037,3.105,2.484,3.313,4.555,5.383,3.623,2.277,3.727,2.484,7.557,9.42,13.664,16.356,30.227,18.426,12.215,37.783,31.158,47.514,52.793,51.24,59.625,35.299,42.545,49.274,74.324,94.821,50.102,87.367,75.153,60.143,73.496,97.408,83.744,110.762,90.68,65.526,98.444,77.637,95.959,98.34,96.994,72.668,88.092,92.543,87.781,136.848,112.418,88.817,93.682,84.676,84.469,96.477,121.735,142.231,110.555,121.424,106.104,95.235,98.34,133.846,185.397,152.582,152.997,102.377,147.303,210.344,213.864,188.399,325.972,239.743,215.21,237.155,227.114,340.153,404.54,401.435,370.691,412.925,436.734,406.611,487.456,550.498,483.73,534.349,428.556,408.37,406.507,527.621,500.603,438.7,672.336,538.593,444.083,467.064,459.611,455.159,447.189,345.122,406.714,393.982,658.361,661.777,648.838,705.875,579.172,408.991,428.142,686.828,643.041,571.925,693.246,400.607,229.702,333.425,560.539,641.488,522.445,429.902,359.2,195.956,290.259,308.684],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.207,0.518,0.725,0.725,1.139,1.139,1.76,2.899,2.899,3.313,4.245,5.073,6.212,7.454,8.696,10.455,13.975,15.32,18.218,21.013,23.497,26.706,31.572,32.711,33.642,34.988,37.162,37.473,39.129,40.371,34.781,38.301,41.717,47.1,62.627,71.115,75.774,75.05,79.501,78.88,78.363,81.054,66.666,62.732,59.419,66.251,67.907,72.979,81.881,70.391,68.941,69.045,68.838,65.111,62.834,59.935,51.654,57.451,55.381,49.894,47.824,43.787,41.716,36.23,33.228,29.605,28.777,28.57,27.845,27.638,30.537,30.641,28.156,28.156,29.502,31.055,30.848,30.641,27.742,25.568,24.43,24.533,22.566,20.703,19.564,16.873,15.631,17.08,16.562,16.666,15.941,15.423,14.595,14.284,12.939,10.972,11.179,10.247,9.73,8.178,7.04,6.523,6.316,5.385,4.35,3.419,3.108,3.418,3.211,3.832,4.66,4.97,5.902,5.798,5.281,5.488,5.177,5.384,5.073,4.866,4.659,4.866,6.211,5.694,6.522,5.901,5.901,6.212,6.626,7.144,6.006,7.144,7.558,9.524,10.766,10.869,10.351,11.179,12.11,12.317,13.559,12.421,11.904,12.111,12.215,12.215,12.94,13.251,11.492,11.285,10.871,11.182,13.666,14.183,15.322,17.599,20.29,20.911,22.256,25.775,26.5,26.5,27.224,25.878,24.739,26.499,28.777,29.502,28.984,28.777,28.467,27.846,32.919,39.026,48.135,59.108,85.712,101.861,110.349,145.648,169.249,207.343,246.472,281.356,310.754,327.627,357.957,369.448,412.614,459.921,457.23,493.357,508.885,533.729,564.68,612.814,622.234,638.175,678.753,656.912,680.203,697.697,720.16,721.092,734.342,696.248,693.66,720.677,710.014,769.225,785.684,776.161,772.849,784.857,781.234,785.168,819.122,824.505,822.642,855.249,867.671,878.23,892.101,929.47,993.132,1003.483,1045.925,1026.878,1068.077,1183.186,1298.71,1353.263,1493.838,1580.999,1643.212,1777.99,1857.801,1987.61,2178.286,2391.322,2436.041,2609.223,2830.747,3000.203,3260.545,3470.89,3550.08,3682.994,3740.859,3736.304,3706.077,3827.087,3840.234,3728.436,3917.042,3921.286,3936.813,3995.507,4048.611,3976.149,3922.735,3829.157,3563.535,3418.924,3633.202,3827.915,4017.142,4267.858,4399.841,4463.71,4485.138,4777.984,4762.664,4672.812,4717.22,4411.952,4062.482,3986.916,4119.313,4073.973,3953.377,3811.354,3477.308,3272.657,3333.214,3308.473],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.104,0.163,0.163,0.251,0.384,0.37,0.444,0.606,0.665,0.887,0.976,1.08,1.464,1.893,2.026,2.484,2.78,3.179,3.549,4.096,4.141,4.51,4.422,4.791,4.777,4.954,4.806,4.392,4.806,5.472,5.841,8.385,9.346,10.011,10.559,10.278,10.115,9.938,8.474,7.749,7.483,7.778,8.666,8.71,9.346,10.056,9.006,8.636,8.858,8.148,8.266,7.261,6.211,7.379,7.364,6.684,6.152,5.679,5.545,4.658,4.008,3.919,3.682,3.667,3.401,3.401,3.534,3.845,3.638,3.712,3.593,3.801,3.86,3.86,3.549,3.431,3.268,3.179,2.884,2.588,2.41,2.277,1.996,2.011,2.218,2.041,2.041,1.908,1.819,1.952,1.804,1.42,1.42,1.257,1.227,1.094,0.902,0.917,0.887,0.754,0.592,0.414,0.325,0.37,0.384,0.444,0.532,0.651,0.68,0.769,0.71,0.636,0.71,0.636,0.636,0.665,0.532,0.606,0.651,0.739,0.784,0.799,0.754,0.813,0.754,0.858,0.784,0.784,0.872,1.035,1.272,1.464,1.36,1.316,1.523,1.494,1.553,1.612,1.508,1.612,1.612,1.464,1.538,1.582,1.508,1.479,1.42,1.434,1.464,1.671,1.715,1.878,2.381,2.765,2.854,3.017,3.194,3.431,3.313,3.253,3.179,3.313,3.46,3.446,3.623,3.786,3.534,3.623,3.623,4.229,4.924,6.107,7.926,11.919,14.019,15.409,19.727,22.833,27.668,32.874,35.876,41.761,45.059,45.739,48.327,52.157,58.161,57.998,61.962,67.655,70.169,73.629,76.927,75.345,84.011,84.484,83.108,88.58,89.172,88.965,91.05,89.083,86.51,89.734,88.891,90.34,96.181,98.192,97.024,100.026,99.538,98.384,99.627,97.468,101.727,104.832,108.795,111.856,113.394,113.66,115.391,121.557,127.561,132.072,131.539,138.978,154.978,166.409,166.838,191.608,204,220.119,232.955,235.351,253.392,284.269,295.05,313.757,342.002,370.513,396.155,417.199,438.05,449.806,473.186,475.419,471.367,471.352,477.09,469.962,463.529,483.242,498.962,504.063,512.714,502.999,496.507,497.719,450.974,432.135,424.977,452.305,481.186,508.855,545.81,579.246,579.571,584.451,588.518,585.841,574.853,573.049,547.54,521.927,508.396,490.355,490.133,483.064,445.444,439.529,434.708,428.541,392.562]},{"iso":"ISL","continent":"Europe","population":341250,"name":"Iceland","population_density":3.404,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,3,6,11,26,34,43,50,50,58,69,85,103,134,156,171,180,220,250,330,409,473,568,588,648,737,802,890,963,1020,1086,1135,1220,1319,1364,1417,1486,1562,1586,1616,1648,1675,1689,1701,1711,1720,1727,1739,1754,1760,1771,1773,1778,1785,1789,1789,1790,1792,1792,1795,1797,1797,1798,1798,1799,1799,1799,1799,1801,1801,1801,1801,1801,1801,1802,1802,1802,1802,1802,1802,1802,1803,1803,1803,1804,1804,1804,1804,1805,1805,1805,1806,1806,1806,1806,1806,1806,1806,1806,1807,1807,1807,1807,1807,1807,1808,1810,1811,1812,1812,1814,1815,1815,1815,1815,1815,1817,1818,1820,1820,1821,1822,1824,1825,1830,1830,1830,1830,1832,1833,1833,1833,1833,1833,1833,1833,1835,1835,1836,1836,1838,1839,1839,1839,1840,1841,1843,1843,1847,1854,1857,1861,1872,1885,1893,1907,1915,1918,1926,1932,1952,1955,1958,1962,1968,1972,1976,1983,1999,2011,2014,2027,2035,2040,2050,2058,2064,2073,2077,2082,2087,2092,2100,2105,2107,2116,2121,2128,2135,2136,2141,2143,2150,2153,2157,2161,2162,2165,2168,2174,2189,2206,2230,2307,2307,2377,2419,2476,2512,2561,2601,2623,2663,2695,2728,2769,2809,2872,2921,2980,3081,3172,3267,3373,3460,3526,3582,3668,3757,3837,3929,3998,4055,4101,4193,4230,4268,4308,4394,4448,4504,4574,4671,4719,4797,4865,4890,4931,4957,4989,5017,5039,5063,5078,5101,5114,5142,5160,5170,5186,5189,5205,5215,5226,5231,5251,5269,5277,5289,5298,5312,5323,5346,5371,5381,5392,5413,5413,5448,5462,5476,5482,5496,5506,5516,5524,5539,5552,5557,5564,5571,5578,5588],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2.93,2.93,8.791,17.582,32.234,76.19,99.634,126.007,146.52,146.52,169.963,202.198,249.084,301.832,392.674,457.143,501.099,527.473,644.689,732.601,967.033,1198.535,1386.081,1664.469,1723.077,1898.901,2159.707,2350.183,2608.059,2821.978,2989.011,3182.418,3326.007,3575.092,3865.201,3997.07,4152.381,4354.579,4577.289,4647.619,4735.531,4829.304,4908.425,4949.451,4984.615,5013.919,5040.293,5060.806,5095.971,5139.927,5157.509,5189.744,5195.604,5210.256,5230.769,5242.491,5242.491,5245.421,5251.282,5251.282,5260.073,5265.934,5265.934,5268.864,5268.864,5271.795,5271.795,5271.795,5271.795,5277.656,5277.656,5277.656,5277.656,5277.656,5277.656,5280.586,5280.586,5280.586,5280.586,5280.586,5280.586,5280.586,5283.516,5283.516,5283.516,5286.447,5286.447,5286.447,5286.447,5289.377,5289.377,5289.377,5292.308,5292.308,5292.308,5292.308,5292.308,5292.308,5292.308,5292.308,5295.238,5295.238,5295.238,5295.238,5295.238,5295.238,5298.168,5304.029,5306.96,5309.89,5309.89,5315.751,5318.681,5318.681,5318.681,5318.681,5318.681,5324.542,5327.473,5333.333,5333.333,5336.264,5339.194,5345.055,5347.985,5362.637,5362.637,5362.637,5362.637,5368.498,5371.429,5371.429,5371.429,5371.429,5371.429,5371.429,5371.429,5377.289,5377.289,5380.22,5380.22,5386.081,5389.011,5389.011,5389.011,5391.941,5394.872,5400.733,5400.733,5412.454,5432.967,5441.758,5453.48,5485.714,5523.81,5547.253,5588.278,5611.722,5620.513,5643.956,5661.538,5720.147,5728.938,5737.729,5749.451,5767.033,5778.755,5790.476,5810.989,5857.875,5893.04,5901.832,5939.927,5963.37,5978.022,6007.326,6030.769,6048.352,6074.725,6086.447,6101.099,6115.751,6130.403,6153.846,6168.498,6174.359,6200.733,6215.385,6235.897,6256.41,6259.341,6273.993,6279.853,6300.366,6309.158,6320.879,6332.601,6335.531,6344.322,6353.114,6370.696,6414.652,6464.469,6534.799,6760.44,6760.44,6965.568,7088.645,7255.678,7361.172,7504.762,7621.978,7686.447,7803.663,7897.436,7994.139,8114.286,8231.502,8416.117,8559.707,8732.601,9028.571,9295.238,9573.626,9884.249,10139.194,10332.601,10496.703,10748.718,11009.524,11243.956,11513.553,11715.751,11882.784,12017.582,12287.179,12395.604,12506.96,12624.176,12876.19,13034.432,13198.535,13403.663,13687.912,13828.571,14057.143,14256.41,14329.67,14449.817,14526.007,14619.78,14701.832,14766.3,14836.63,14880.586,14947.985,14986.081,15068.132,15120.879,15150.183,15197.07,15205.861,15252.747,15282.051,15314.286,15328.938,15387.546,15440.293,15463.736,15498.901,15525.275,15566.3,15598.535,15665.934,15739.194,15768.498,15800.733,15862.271,15862.271,15964.835,16005.861,16046.886,16064.469,16105.495,16134.799,16164.103,16187.546,16231.502,16269.597,16284.249,16304.762,16325.275,16345.788,16375.092],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5.861,8.791,14.652,43.956,23.443,26.374,20.513,0,23.443,32.234,46.886,52.747,90.842,64.469,43.956,26.374,117.216,87.912,234.432,231.502,187.546,278.388,58.608,175.824,260.806,190.476,257.875,213.919,167.033,193.407,143.59,249.084,290.11,131.868,155.311,202.198,222.711,70.33,87.912,93.773,79.121,41.026,35.165,29.304,26.374,20.513,35.165,43.956,17.582,32.234,5.861,14.652,20.513,11.722,0,2.93,5.861,0,8.791,5.861,0,2.93,0,2.93,0,0,0,5.861,0,0,0,0,0,2.93,0,0,0,0,0,0,2.93,0,0,2.93,0,0,0,2.93,0,0,2.93,0,0,0,0,0,0,0,2.93,0,0,0,0,0,2.93,5.861,2.93,2.93,0,5.861,2.93,0,0,0,0,5.861,2.93,5.861,0,2.93,2.93,5.861,2.93,14.652,0,0,0,5.861,2.93,0,0,0,0,0,0,5.861,0,2.93,0,5.861,2.93,0,0,2.93,2.93,5.861,0,11.722,20.513,8.791,11.722,32.234,38.095,23.443,41.026,23.443,8.791,23.443,17.582,58.608,8.791,8.791,11.722,17.582,11.722,11.722,20.513,46.886,35.165,8.791,38.095,23.443,14.652,29.304,23.443,17.582,26.374,11.722,14.652,14.652,14.652,23.443,14.652,5.861,26.374,14.652,20.513,20.513,2.93,14.652,5.861,20.513,8.791,11.722,11.722,2.93,8.791,8.791,17.582,43.956,49.817,70.33,225.641,0,205.128,123.077,167.033,105.495,143.59,117.216,64.469,117.216,93.773,96.703,120.147,117.216,184.615,143.59,172.894,295.971,266.667,278.388,310.623,254.945,193.407,164.103,252.015,260.806,234.432,269.597,202.198,167.033,134.799,269.597,108.425,111.355,117.216,252.015,158.242,164.103,205.128,284.249,140.659,228.571,199.267,73.26,120.147,76.19,93.773,82.051,64.469,70.33,43.956,67.399,38.095,82.051,52.747,29.304,46.886,8.791,46.886,29.304,32.234,14.652,58.608,52.747,23.443,35.165,26.374,41.026,32.234,67.399,73.26,29.304,32.234,61.538,0,102.564,41.026,41.026,17.582,41.026,29.304,29.304,23.443,43.956,38.095,14.652,20.513,20.513,20.513,29.304],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5.861,14.652,29.304,73.26,96.703,123.077,143.59,143.59,161.172,184.615,216.849,225.64,293.039,331.134,354.577,380.951,474.724,530.402,717.948,896.703,993.407,1207.326,1221.978,1371.428,1515.018,1617.582,1641.025,1623.442,1602.929,1517.948,1602.93,1676.19,1705.494,1646.886,1544.322,1532.601,1588.279,1465.202,1409.524,1254.213,1043.224,952.382,832.236,659.342,463.005,413.188,360.441,310.624,249.085,240.293,210.989,196.337,190.476,181.685,146.52,105.494,93.773,61.539,64.469,55.678,35.165,26.373,26.373,26.373,20.512,20.512,11.721,11.721,11.721,8.791,8.791,5.861,5.861,8.791,8.791,2.93,2.93,2.93,2.93,2.93,5.86,2.93,2.93,5.86,5.86,5.86,5.86,8.79,5.86,5.86,8.79,5.86,5.86,5.86,5.86,2.93,2.93,2.93,2.93,2.93,2.93,2.93,2.93,2.93,5.86,11.721,11.721,14.651,14.651,20.512,23.442,23.442,20.512,14.651,11.721,14.652,17.582,17.582,14.652,17.582,20.512,26.373,29.303,38.094,35.164,29.303,29.303,32.234,32.234,26.373,23.443,8.791,8.791,8.791,8.791,8.791,5.861,8.791,8.791,14.652,17.582,17.582,17.582,14.651,17.581,20.512,20.512,26.373,43.956,52.747,64.469,93.773,128.938,146.52,187.546,199.267,187.545,202.197,208.057,234.431,205.127,190.475,161.171,155.31,158.241,146.52,149.451,137.729,164.103,164.103,190.476,196.337,199.267,216.849,219.779,190.475,181.684,184.615,161.172,152.381,152.381,146.52,137.729,126.008,126.008,128.938,134.799,140.66,128.938,120.147,111.356,126.008,108.425,105.495,96.704,79.121,84.982,79.121,90.842,114.285,155.311,213.919,427.838,424.908,621.245,735.531,884.982,946.521,1040.294,1087.18,926.008,1043.224,931.869,905.495,858.609,870.33,911.355,937.729,1046.154,1224.909,1397.803,1579.488,1769.964,1907.693,1916.485,1936.998,2016.119,1980.954,1948.719,1939.928,1831.503,1743.591,1684.983,1790.477,1646.887,1497.436,1380.22,1362.638,1318.682,1315.752,1386.081,1400.733,1432.967,1550.183,1632.234,1453.479,1415.384,1327.471,1216.116,1013.918,937.728,779.487,624.176,618.315,536.263,542.124,501.098,448.351,430.768,369.229,372.159,334.064,328.203,260.804,266.665,290.108,266.665,293.039,272.527,284.249,284.249,336.996,351.648,328.205,336.996,363.369,336.995,398.533,407.325,380.952,325.274,336.996,334.066,301.832,325.275,266.667,263.736,237.362,240.293,219.78,210.989,210.989],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13.815,17.582,20.513,19.676,21.769,24.28,24.699,28.885,38.095,44.375,50.654,51.073,63.213,69.074,95.029,115.123,132.705,166.196,170.801,179.173,203.872,197.593,201.361,205.128,189.22,208.477,203.872,202.198,216.431,198.43,190.058,195.081,199.267,188.802,165.777,137.729,130.194,113.867,90.005,62.376,56.096,46.468,38.095,33.072,29.723,29.304,25.955,24.28,24.28,20.931,14.652,12.559,8.791,7.954,7.117,5.024,3.349,3.768,3.349,2.93,2.93,1.675,0.837,1.675,1.256,1.256,0.837,0.837,0.837,1.256,0.419,0.419,0.419,0.419,0.419,0.419,0.419,0.419,0.419,0.837,0.837,0.837,0.837,0.837,0.837,0.837,0.837,0.837,0.837,0.837,0.419,0.419,0.419,0,0.419,0.419,0.419,0.419,0.419,0.419,0.837,1.256,1.675,2.093,2.093,2.93,3.349,2.93,2.093,1.675,1.256,2.093,1.675,2.093,2.093,2.512,2.93,3.768,3.349,5.024,4.186,4.186,3.768,4.186,3.768,3.349,1.256,1.256,1.256,1.256,0.419,0.837,0.837,1.256,1.256,2.093,2.512,2.512,1.675,2.093,2.093,2.93,2.093,3.349,6.279,7.535,8.791,12.977,17.582,20.931,25.118,25.536,25.536,27.211,25.118,28.048,25.955,21.35,19.676,20.931,19.257,18.42,12.977,18.42,22.187,21.769,24.699,26.374,26.792,28.048,24.699,22.187,24.699,20.931,19.676,19.676,17.582,17.582,17.164,14.233,16.327,16.327,17.164,18.001,15.071,15.071,15.071,14.233,13.396,12.14,10.884,10.884,10.047,10.466,10.047,15.071,20.513,28.885,60.701,59.445,87.493,102.564,120.147,128.1,138.566,123.077,132.287,119.728,115.542,105.495,107.588,103.82,113.448,124.751,132.705,161.591,185.871,208.477,236.107,246.154,253.271,252.015,245.735,244.898,238.619,232.758,225.222,221.455,217.268,219.78,198.012,180.429,158.66,165.777,164.521,168.707,159.498,184.615,188.802,204.71,197.174,185.034,178.755,160.335,133.124,124.751,101.308,82.889,78.702,71.167,65.725,64.05,59.864,54.84,51.491,46.468,43.537,42.282,35.165,29.723,33.909,34.746,36.839,35.165,34.746,36.002,38.514,39.77,42.7,43.537,43.119,48.142,42.282,52.329,48.561,43.956,42.282,43.537,38.932,43.119,31.816,32.234,31.816,31.397,28.467,27.211,25.955,26.792]},{"iso":"IND","continent":"Asia","population":1380004385,"name":"India","population_density":450.419,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,5,5,28,30,31,34,39,43,56,62,73,82,102,113,119,142,156,194,244,330,396,499,536,657,727,887,987,1024,1251,1397,1998,2543,2567,3082,3588,4778,5311,5916,6725,7598,8446,9205,10453,11487,12322,13430,14352,15722,17615,18539,20080,21370,23077,24530,26283,27890,29451,31324,33062,34863,37257,39699,42505,46437,49400,52987,56351,59695,62808,67161,70768,74292,78055,81997,85784,90648,95698,100328,106475,112028,118226,124794,131423,138536,144950,150793,158086,165386,173491,181827,190609,198370,207191,216824,226713,236184,246622,257486,265928,276146,286605,297535,308993,320922,332424,343091,354065,366946,380532,395048,410451,425282,440215,456183,473105,490401,508953,528859,548318,566840,585481,604641,625544,648315,673165,697413,719664,742417,767296,793802,820916,849522,878254,906752,936181,968857,1003832,1039084,1077781,1118206,1155338,1193078,1238798,1288108,1337024,1385635,1435616,1480073,1531669,1581963,1634746,1695988,1750723,1803695,1855745,1908254,1964536,2027074,2088611,2153010,2215074,2268675,2329638,2396637,2461190,2525922,2589952,2647663,2702681,2767253,2836925,2905825,2975701,3044940,3106348,3167323,3224547,3310234,3387500,3463972,3542733,3621245,3691166,3769523,3853406,3936747,4023179,4113811,4204613,4280422,4370128,4465863,4562414,4659984,4754356,4846427,4930236,5020359,5118253,5214677,5308014,5400619,5487580,5562663,5646010,5732518,5818570,5903932,5992532,6074702,6145291,6225763,6312584,6394068,6473544,6549373,6623815,6685082,6757131,6835655,6906151,6979423,7053806,7120538,7175880,7239389,7307097,7370468,7432680,7494551,7550273,7597063,7651107,7706946,7761312,7814682,7864811,7909959,7946429,7990322,8040203,8088851,8137119,8184082,8229313,8267623,8313876,8364086,8411724,8462080,8507754,8553657,8591730,8636011,8683916,8728795,8773479,8814579,8845127,8874290,8912907,8958483,9004365,9050597,9095806,9139865,9177840,9222216,9266705,9309787,9351109,9392919,9431691,9462809,9499413,9534964,9571559,9608211,9644222,9677203,9703770,9735850,9767371,9796744,9826775,9857029,9884100,9906165,9932547,9956557,9979447],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.001,0.001,0.001,0.001,0.002,0.002,0.002,0.002,0.002,0.002,0.002,0.002,0.002,0.002,0.002,0.002,0.002,0.002,0.002,0.002,0.002,0.002,0.002,0.002,0.002,0.002,0.002,0.002,0.002,0.002,0.002,0.002,0.004,0.004,0.02,0.022,0.022,0.025,0.028,0.031,0.041,0.045,0.053,0.059,0.074,0.082,0.086,0.103,0.113,0.141,0.177,0.239,0.287,0.362,0.388,0.476,0.527,0.643,0.715,0.742,0.907,1.012,1.448,1.843,1.86,2.233,2.6,3.462,3.849,4.287,4.873,5.506,6.12,6.67,7.575,8.324,8.929,9.732,10.4,11.393,12.764,13.434,14.551,15.485,16.722,17.775,19.046,20.21,21.341,22.698,23.958,25.263,26.998,28.767,30.801,33.65,35.797,38.396,40.834,43.257,45.513,48.667,51.281,53.835,56.561,59.418,62.162,65.687,69.346,72.701,77.156,81.179,85.671,90.43,95.234,100.388,105.036,109.27,114.555,119.845,125.718,131.758,138.122,143.746,150.138,157.118,164.284,171.147,178.711,186.583,192.701,200.105,207.684,215.604,223.907,232.551,240.886,248.616,256.568,265.902,275.747,286.266,297.427,308.174,318.995,330.566,342.829,355.362,368.805,383.23,397.331,410.752,424.26,438.144,453.291,469.792,487.799,505.37,521.494,537.982,556.01,575.217,594.865,615.594,636.414,657.065,678.39,702.068,727.412,752.957,780.998,810.292,837.199,864.547,897.677,933.409,968.855,1004.08,1040.298,1072.513,1109.902,1146.346,1184.595,1228.973,1268.636,1307.021,1344.738,1382.788,1423.572,1468.89,1513.481,1560.147,1605.121,1643.962,1688.138,1736.688,1783.465,1830.372,1876.771,1918.59,1958.458,2005.249,2055.736,2105.664,2156.298,2206.471,2250.97,2295.154,2336.621,2398.713,2454.702,2510.117,2567.19,2624.082,2674.749,2731.53,2792.314,2852.706,2915.338,2981.013,3046.811,3101.745,3166.749,3236.122,3306.087,3376.789,3445.175,3511.892,3572.623,3637.93,3708.867,3778.739,3846.375,3913.48,3976.495,4030.902,4091.299,4153.985,4216.342,4278.198,4342.401,4401.944,4453.095,4511.408,4574.322,4633.368,4690.959,4745.907,4799.851,4844.247,4896.456,4953.357,5004.441,5057.537,5111.437,5159.794,5199.897,5245.917,5294.981,5340.902,5385.983,5430.817,5471.195,5505.101,5544.263,5584.726,5624.121,5662.795,5699.12,5731.836,5758.264,5790.07,5826.216,5861.468,5896.444,5930.475,5963.251,5991.012,6024.529,6060.913,6095.433,6131.923,6165.02,6198.282,6225.872,6257.959,6292.673,6325.194,6357.573,6387.356,6409.492,6430.624,6458.608,6491.634,6524.881,6558.383,6591.143,6623.07,6650.588,6682.744,6714.982,6746.201,6776.144,6806.441,6834.537,6857.086,6883.611,6909.372,6935.89,6962.45,6988.544,7012.444,7031.695,7054.941,7077.783,7099.067,7120.829,7142.752,7162.369,7178.358,7197.475,7214.873,7231.46],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.001,0.001,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.001,0,0.017,0.001,0.001,0.002,0.004,0.003,0.009,0.004,0.008,0.007,0.014,0.008,0.004,0.017,0.01,0.028,0.036,0.062,0.048,0.075,0.027,0.088,0.051,0.116,0.072,0.027,0.164,0.106,0.436,0.395,0.017,0.373,0.367,0.862,0.386,0.438,0.586,0.633,0.614,0.55,0.904,0.749,0.605,0.803,0.668,0.993,1.372,0.67,1.117,0.935,1.237,1.053,1.27,1.164,1.131,1.357,1.259,1.305,1.735,1.77,2.033,2.849,2.147,2.599,2.438,2.423,2.256,3.154,2.614,2.554,2.727,2.857,2.744,3.525,3.659,3.355,4.454,4.024,4.491,4.759,4.804,5.154,4.648,4.234,5.285,5.29,5.873,6.041,6.364,5.624,6.392,6.98,7.166,6.863,7.564,7.872,6.117,7.404,7.579,7.92,8.303,8.644,8.335,7.73,7.952,9.334,9.845,10.519,11.162,10.747,10.821,11.571,12.262,12.533,13.443,14.425,14.101,13.422,13.508,13.884,15.147,16.501,18.007,17.571,16.124,16.488,18.028,19.207,19.648,20.729,20.82,20.651,21.325,23.678,25.344,25.545,28.041,29.293,26.907,27.348,33.13,35.732,35.446,35.225,36.218,32.215,37.388,36.445,38.248,44.378,39.663,38.385,37.717,38.05,40.784,45.317,44.592,46.666,44.974,38.841,44.176,48.55,46.777,46.907,46.398,41.819,39.868,46.791,50.487,49.927,50.635,50.173,44.498,44.185,41.467,62.092,55.99,55.414,57.073,56.893,50.667,56.78,60.785,60.392,62.632,65.675,65.798,54.934,65.004,69.373,69.964,70.703,68.385,66.718,60.731,65.306,70.937,69.872,67.635,67.105,63.015,54.408,60.396,62.687,62.356,61.856,64.203,59.543,51.151,58.313,62.914,59.046,57.591,54.948,53.943,44.396,52.209,56.901,51.084,53.095,53.901,48.356,40.103,46.021,49.064,45.921,45.081,44.834,40.378,33.906,39.162,40.463,39.396,38.674,36.325,32.716,26.427,31.806,36.146,35.252,34.977,34.031,32.776,27.761,33.517,36.384,34.52,36.49,33.097,33.263,27.589,32.088,34.714,32.521,32.38,29.783,22.136,21.133,27.983,33.026,33.248,33.501,32.76,31.927,27.518,32.156,32.238,31.219,29.943,30.297,28.096,22.549,26.525,25.762,26.518,26.559,26.095,23.899,19.251,23.246,22.841,21.285,21.762,21.923,19.617,15.989,19.117,17.398,16.587],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.001,0.002,0.002,0.002,0.002,0.002,0.002,0.002,0.001,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.001,0.001,0.018,0.019,0.02,0.022,0.026,0.029,0.037,0.041,0.032,0.038,0.051,0.057,0.057,0.071,0.072,0.096,0.124,0.179,0.213,0.28,0.303,0.374,0.415,0.503,0.539,0.504,0.62,0.651,1.06,1.367,1.333,1.59,1.885,2.72,2.942,3.274,3.424,3.662,4.259,4.436,4.973,4.86,5.079,5.444,5.526,5.886,6.644,6.764,6.977,7.163,7.795,8.045,8.647,8.818,8.577,9.264,9.406,9.776,10.274,10.991,11.754,13.439,14.455,15.697,16.876,17.994,18.515,19.899,20.48,20.185,20.765,21.023,21.329,22.431,23.834,24.035,25.875,27.345,29.109,31.011,33.071,34.7,35.689,36.568,37.399,38.665,40.047,41.329,42.889,43.359,45.103,47.849,49.73,51.303,52.994,54.825,54.578,56.358,57.545,58.485,59.622,61.403,62.174,62.032,63.867,65.797,68.063,70.662,73.521,75.624,78.11,81.951,86.261,89.46,93.058,96.964,99.903,102.578,105.265,107.578,110.463,114.431,118.995,122.141,124.164,127.23,131.75,137.073,141.574,145.802,148.615,151.695,156.896,164.086,171.402,177.74,186.133,194.697,200.784,207.481,219.286,231.34,241.442,251.122,259.299,262.221,272.702,281.799,286.917,295.563,299.78,302.94,304.439,310.274,313.67,322.542,328.886,331.174,336.485,336.941,343.4,353.9,359.893,361.483,363.289,358.442,353.336,361.286,367.597,368.974,372.832,376.098,374.198,376.564,378.163,393.464,398.967,404.454,410.892,417.612,423.781,436.376,455.694,453.994,460.636,470.897,479.622,477.663,492,504.593,513.772,524.083,529.836,530.879,525.812,536.184,542.117,542.616,540.287,536.689,531.319,519.009,518.674,516.055,507.474,499.458,496.026,488.464,476.6,480.505,483.023,479.382,474.617,467.709,457.449,442.302,443.36,441.948,430.118,424.167,420.477,413.885,400.045,401.67,398.525,387.545,381.542,373.281,359.758,345.308,344.367,338.809,329.141,321.894,313.138,301.02,287.069,284.969,281.953,276.742,272.323,267.68,264.131,259.176,266.266,270.844,269.218,270.456,268.576,267.808,262.621,266.948,268.145,264.282,262.142,255.435,244.474,232.344,232.738,233.676,232.21,233.19,233.57,235.714,241.096,252.119,256.374,254.567,251.262,248.058,243.394,234.016,233.023,226.629,220.909,216.249,212.401,206.003,197.158,197.855,194.171,189.694,184.938,180.302,173.824,165.914,165.78,159.932,153.678],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.003,0.003,0.003,0.003,0.004,0.004,0.005,0.004,0.004,0.005,0.007,0.008,0.008,0.009,0.01,0.013,0.017,0.024,0.029,0.039,0.041,0.052,0.055,0.067,0.068,0.065,0.078,0.089,0.139,0.188,0.174,0.217,0.265,0.365,0.405,0.406,0.433,0.521,0.555,0.581,0.587,0.639,0.663,0.694,0.699,0.753,0.871,0.837,0.89,0.937,0.999,1.054,1.093,1.064,1.13,1.164,1.21,1.22,1.317,1.389,1.513,1.758,1.871,2.063,2.224,2.323,2.392,2.552,2.519,2.577,2.595,2.655,2.701,2.882,2.954,3.06,3.332,3.517,3.75,4.038,4.221,4.435,4.619,4.588,4.768,4.882,5.041,5.218,5.391,5.53,5.838,6.081,6.349,6.49,6.708,6.923,6.994,7.138,7.224,7.331,7.537,7.691,7.758,7.988,8.066,8.317,8.592,8.908,9.268,9.613,10.054,10.571,10.99,11.374,11.791,12.258,12.737,13.108,13.385,13.617,13.99,14.427,14.938,15.434,15.82,16.246,16.838,17.418,17.868,18.256,18.721,19.367,20.058,20.865,21.742,22.585,23.629,24.84,25.733,26.594,27.944,29.428,30.843,31.869,32.858,33.616,35.051,35.524,35.884,37.16,37.794,38.103,38.889,38.984,39.604,40.614,40.644,41.644,42.586,42.746,43.621,44.731,44.939,45.27,45.232,44.781,44.928,45.302,45.578,46.028,46.561,47.1,47.483,48.099,47.339,48.997,49.863,50.545,51.531,53.302,54.228,56.416,56.229,56.858,57.889,59.118,60.39,60.999,62.174,63.401,64.769,65.922,66.309,66.44,67.268,67.311,67.535,67.522,67.084,66.901,66.372,65.468,64.767,63.588,62.515,61.689,61.274,60.778,60.313,60.016,60.048,59.575,58.966,57.644,56.844,55.879,55.007,54.148,53.01,52.368,52.219,51.42,50.807,49.923,48.803,48.066,46.921,45.626,44.486,43.601,42.621,41.392,40.46,39.545,38.329,37.234,36.166,35.115,34.499,33.907,33.378,33.051,33.059,33.25,33.494,33.528,33.424,33.64,33.506,33.576,33.551,33.347,33.109,32.823,32.236,31.762,30.173,29.25,28.664,28.423,28.527,28.687,29.112,30.511,31.423,32.019,31.907,31.617,31.109,30.757,30.21,29.5,28.695,27.77,27.098,26.615,26.015,25.415,24.944,24.476,24.059,23.311,22.626,22.03,21.418,20.952,20.362,19.584,18.913]},{"iso":"IDN","continent":"Asia","population":273523621,"name":"Indonesia","population_density":145.725,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,4,4,6,19,27,34,34,69,96,117,134,172,227,311,369,450,514,579,686,790,893,1046,1155,1285,1414,1528,1677,1790,1986,2092,2273,2491,2738,2956,3293,3512,3842,4241,4557,4839,5136,5516,5923,6248,6575,6760,7135,7418,7775,8211,8607,8882,9096,9511,9771,10118,10551,10843,11192,11587,12071,12438,12776,13112,13645,14032,14265,14749,15438,16006,16496,17025,17514,18010,18496,19189,20162,20796,21745,22271,22750,23165,23851,24538,25216,25773,26473,26940,27549,28233,28818,29521,30514,31186,32033,33076,34316,35295,36406,37420,38277,39294,40400,41431,42762,43803,45029,45891,46845,47896,49009,50187,51427,52812,54010,55092,56385,57770,59394,60695,62142,63749,64958,66226,68079,70736,72347,74018,75699,76981,78572,80094,81668,83130,84882,86521,88214,89869,91751,93657,95418,97286,98778,100303,102051,104432,106336,108376,109936,111455,113134,115056,116871,118753,121226,123503,125396,127083,128776,130718,132816,135123,137468,139549,141370,143043,144945,147211,149408,151498,153535,155412,157859,160165,162884,165887,169195,172053,174796,177571,180646,184268,187537,190665,194109,196989,200035,203342,207203,210940,214746,218382,221523,225030,228993,232628,236519,240687,244676,248852,252923,257388,262022,266845,271339,275213,278722,282724,287008,291182,295499,299506,303498,307120,311176,315714,320564,324658,328952,333449,336716,340622,344749,349160,353461,357762,361867,365240,368842,373109,377541,381910,385980,389712,392934,396454,400483,404048,406945,410088,412784,415402,418375,421731,425796,429574,433836,437716,440569,444348,448118,452291,457735,463007,467113,470648,474455,478720,483518,488310,493308,497668,502110,506302,511836,516753,522581,527999,534266,538883,543975,549508,557877,563680,569707,575796,581550,586842,592900,598933,605243,611631,617820,623309,629429,636154,643508],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.007,0.007,0.007,0.007,0.015,0.015,0.022,0.069,0.099,0.124,0.124,0.252,0.351,0.428,0.49,0.629,0.83,1.137,1.349,1.645,1.879,2.117,2.508,2.888,3.265,3.824,4.223,4.698,5.17,5.586,6.131,6.544,7.261,7.648,8.31,9.107,10.01,10.807,12.039,12.84,14.046,15.505,16.66,17.691,18.777,20.166,21.654,22.843,24.038,24.715,26.085,27.12,28.425,30.019,31.467,32.473,33.255,34.772,35.723,36.991,38.574,39.642,40.918,42.362,44.131,45.473,46.709,47.937,49.886,51.301,52.153,53.922,56.441,58.518,60.309,62.243,64.031,65.844,67.621,70.155,73.712,76.03,79.5,81.423,83.174,84.691,87.199,89.711,92.189,94.226,96.785,98.492,100.719,103.22,105.358,107.929,111.559,114.016,117.112,120.926,125.459,129.038,133.1,136.807,139.94,143.659,147.702,151.471,156.338,160.143,164.626,167.777,171.265,175.107,179.176,183.483,188.017,193.08,197.46,201.416,206.143,211.207,217.144,221.9,227.191,233.066,237.486,242.122,248.896,258.61,264.5,270.609,276.755,281.442,287.259,292.823,298.578,303.923,310.328,316.32,322.51,328.56,335.441,342.409,348.847,355.677,361.132,366.707,373.098,381.802,388.763,396.222,401.925,407.479,413.617,420.644,427.279,434.16,443.201,451.526,458.447,464.614,470.804,477.904,485.574,494.009,502.582,510.19,516.848,522.964,529.918,538.202,546.234,553.875,561.323,568.185,577.131,585.562,595.502,606.481,618.575,629.024,639.053,649.198,660.44,673.682,685.634,697.07,709.661,720.19,731.326,743.417,757.532,771.195,785.11,798.403,809.886,822.708,837.196,850.486,864.711,879.95,894.533,909.801,924.684,941.008,957.95,975.583,992.013,1006.176,1019.005,1033.637,1049.299,1064.559,1080.342,1094.991,1109.586,1122.828,1137.657,1154.248,1171.979,1186.947,1202.646,1219.087,1231.031,1245.311,1260.399,1276.526,1292.25,1307.975,1322.983,1335.314,1348.483,1364.083,1380.287,1396.26,1411.14,1424.784,1436.563,1449.432,1464.162,1477.196,1487.787,1499.278,1509.135,1518.706,1529.575,1541.845,1556.707,1570.519,1586.101,1600.286,1610.716,1624.532,1638.316,1653.572,1673.475,1692.75,1707.761,1720.685,1734.603,1750.196,1767.738,1785.257,1803.53,1819.47,1835.71,1851.036,1871.268,1889.245,1910.552,1930.36,1953.272,1970.152,1988.768,2008.997,2039.594,2060.809,2082.844,2105.105,2126.142,2145.489,2167.637,2189.694,2212.763,2236.118,2258.745,2278.812,2301.187,2325.774,2352.66],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.007,0,0.007,0.048,0.029,0.026,0,0.128,0.099,0.077,0.062,0.139,0.201,0.307,0.212,0.296,0.234,0.238,0.391,0.38,0.377,0.559,0.399,0.475,0.472,0.417,0.545,0.413,0.717,0.388,0.662,0.797,0.903,0.797,1.232,0.801,1.206,1.459,1.155,1.031,1.086,1.389,1.488,1.188,1.196,0.676,1.371,1.035,1.305,1.594,1.448,1.005,0.782,1.517,0.951,1.269,1.583,1.068,1.276,1.444,1.769,1.342,1.236,1.228,1.949,1.415,0.852,1.769,2.519,2.077,1.791,1.934,1.788,1.813,1.777,2.534,3.557,2.318,3.47,1.923,1.751,1.517,2.508,2.512,2.479,2.036,2.559,1.707,2.226,2.501,2.139,2.57,3.63,2.457,3.097,3.813,4.533,3.579,4.062,3.707,3.133,3.718,4.044,3.769,4.866,3.806,4.482,3.151,3.488,3.842,4.069,4.307,4.533,5.064,4.38,3.956,4.727,5.064,5.937,4.756,5.29,5.875,4.42,4.636,6.775,9.714,5.89,6.109,6.146,4.687,5.817,5.564,5.755,5.345,6.405,5.992,6.19,6.051,6.881,6.968,6.438,6.829,5.455,5.575,6.391,8.705,6.961,7.458,5.703,5.553,6.138,7.027,6.636,6.881,9.041,8.325,6.921,6.168,6.19,7.1,7.67,8.434,8.573,7.608,6.658,6.116,6.954,8.284,8.032,7.641,7.447,6.862,8.946,8.431,9.941,10.979,12.094,10.449,10.028,10.145,11.242,13.242,11.951,11.436,12.591,10.529,11.136,12.09,14.116,13.662,13.915,13.293,11.483,12.822,14.489,13.29,14.225,15.238,14.584,15.267,14.884,16.324,16.942,17.633,16.43,14.163,12.829,14.631,15.662,15.26,15.783,14.65,14.595,13.242,14.829,16.591,17.732,14.968,15.699,16.441,11.944,14.28,15.088,16.127,15.724,15.724,15.008,12.332,13.169,15.6,16.203,15.973,14.88,13.644,11.78,12.869,14.73,13.034,10.591,11.491,9.857,9.571,10.869,12.27,14.862,13.812,15.582,14.185,10.431,13.816,13.783,15.256,19.903,19.274,15.012,12.924,13.918,15.593,17.541,17.52,18.273,15.94,16.24,15.326,20.232,17.977,21.307,19.808,22.912,16.88,18.616,20.229,30.597,21.216,22.035,22.261,21.037,19.348,22.148,22.057,23.069,23.354,22.627,20.068,22.375,24.587,26.886],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.007,0.007,0.014,0.062,0.091,0.117,0.117,0.245,0.337,0.414,0.469,0.56,0.732,1.013,1.225,1.393,1.528,1.689,2.018,2.259,2.435,2.687,2.874,3.053,3.291,3.47,3.624,3.657,3.997,3.826,4.089,4.411,4.842,5.222,5.909,6.297,6.786,7.857,8.35,8.584,8.767,9.359,9.615,10.002,9.992,9.209,9.425,9.429,9.648,9.853,9.813,9.63,9.216,10.057,9.637,9.871,10.149,9.623,9.451,9.89,10.877,10.702,10.987,10.946,11.312,11.659,11.235,11.56,12.31,13.045,13.6,14.306,14.145,14.543,15.468,16.233,17.271,17.512,19.191,19.18,19.143,18.847,19.578,19.556,18.478,18.196,17.285,17.069,17.544,18.528,18.159,18.217,19.368,19.789,20.327,22.433,24.74,25.818,27.741,28.878,28.381,29.642,30.589,30.545,30.878,31.105,31.525,30.969,31.324,31.448,31.473,32.011,31.678,32.936,32.834,33.639,34.878,36.1,37.968,38.417,39.174,39.985,40.025,40.705,42.753,47.403,47.356,48.709,49.565,48.377,49.774,50.702,49.682,45.313,45.828,45.711,45.755,47.119,48.183,49.587,50.27,51.754,50.804,50.387,50.588,53.242,53.322,53.812,53.077,51.801,52.484,53.936,54.181,52.357,54.437,55.304,56.522,57.137,57.189,57.262,58.296,59.849,59.381,58.664,58.401,58.349,59.113,60.297,60.659,59.866,58.74,57.994,60.282,62.597,65.584,68.279,72.341,75.149,77.73,81.013,83.309,88.12,90.13,90.587,91.084,91.164,92.272,94.217,97.091,97.511,99.475,101.332,100.224,102.517,105.87,107.07,107.179,108.755,109.424,111.398,114.799,118.301,120.754,125.097,127.302,126.227,124.472,123.836,124.614,123.55,122.391,119.408,117.573,116.652,118.652,120.612,122.682,122.39,122.306,124.097,121.446,122.484,122.743,122.279,120.271,121.027,120.336,116.227,117.452,118.772,119.887,119.733,118.889,116.809,113.581,114.118,115.679,113.113,107.501,103.019,97.996,93.923,93.012,92.413,92.545,93.323,98.314,101.008,101.582,105.827,108.741,111.727,116.768,122.23,121.66,120.399,123.886,125.663,129.421,131.685,130.055,126.721,127.949,130.351,136.665,139.049,142.815,145.103,149.742,150.682,153.058,157.961,168.326,171.565,172.293,174.746,172.871,175.339,178.871,180.699,173.171,175.309,175.901,173.708,175.046,180.285,185.023],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.002,0.009,0.013,0.017,0.017,0.034,0.048,0.058,0.06,0.076,0.101,0.145,0.157,0.185,0.207,0.232,0.268,0.294,0.304,0.354,0.368,0.403,0.436,0.44,0.463,0.468,0.491,0.489,0.516,0.563,0.632,0.668,0.785,0.797,0.914,1.028,1.079,1.097,1.139,1.161,1.259,1.257,1.219,1.151,1.199,1.192,1.18,1.195,1.232,1.205,1.22,1.241,1.229,1.224,1.222,1.168,1.206,1.301,1.337,1.393,1.388,1.338,1.463,1.483,1.399,1.399,1.567,1.687,1.767,1.765,1.819,1.956,1.957,1.959,2.171,2.246,2.465,2.485,2.476,2.439,2.435,2.286,2.308,2.104,2.195,2.188,2.29,2.289,2.235,2.248,2.476,2.462,2.66,2.887,3.177,3.383,3.596,3.607,3.704,3.792,3.825,3.716,3.9,3.863,3.974,3.977,3.944,3.915,3.958,3.878,3.982,4.065,4.24,4.307,4.434,4.576,4.809,4.841,4.873,5.087,5.153,5.14,5.384,5.924,6.086,6.203,6.241,6.279,6.448,6.275,5.71,5.632,5.674,5.652,5.867,5.9,6.088,6.262,6.418,6.478,6.402,6.314,6.362,6.623,6.622,6.768,6.607,6.621,6.701,6.792,6.497,6.485,6.711,7.086,7.281,7.285,7.166,7.232,7.345,7.258,7.294,7.392,7.462,7.451,7.431,7.518,7.461,7.328,7.305,7.334,7.738,7.949,8.186,8.607,9.243,9.672,10.124,10.295,10.697,11.169,11.307,11.213,11.52,11.591,11.733,11.854,11.979,12.223,12.577,12.677,12.814,13.055,13.397,13.279,13.36,13.549,13.733,14.274,14.568,14.83,15.352,15.839,16.009,15.949,15.601,15.565,15.47,15.23,14.966,14.711,14.773,14.832,14.86,14.993,15.346,15.229,15.379,15.643,15.458,15.379,15.165,14.935,15.043,15.047,14.842,14.898,14.739,14.812,14.823,14.858,14.738,14.543,14.464,14.421,14.297,13.844,13.075,12.591,12.05,11.735,11.449,11.098,11.359,11.819,12.403,13.022,13.144,13.565,13.782,13.838,14.708,15.236,15.354,15.71,15.724,15.983,16.309,15.969,15.826,15.958,16.432,16.633,17.296,17.358,17.899,18.119,19.115,19.206,19.676,19.676,21.478,21.465,21.783,21.69,22.284,22.389,22.663,21.443,21.708,21.896,21.948,21.81,22.243,22.591,23.281]},{"iso":"","continent":"","population":null,"name":"International","population_density":null,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,61,64,135,135,175,175,218,285,355,454,542,621,634,634,634,691,691,691,705,705,705,705,705,705,706,706,706,706,706,706,706,706,706,706,706,706,706,706,706,712,712,712,712,712,712,712,712,712,712,714,714,714,714,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},{"iso":"IRN","continent":"Asia","population":83992953,"name":"Iran","population_density":49.831,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,5,18,28,43,61,95,139,245,388,593,978,1501,2336,2922,3513,4747,5823,6566,7161,8042,9000,10075,11364,12729,13938,14991,16169,17361,18407,19644,20610,21638,23049,24811,27017,29406,32332,35408,38309,41495,44605,47593,50468,53183,55743,58226,60500,62589,64586,66220,68192,70029,71686,73303,74877,76389,77995,79494,80868,82211,83505,84802,85996,87026,88194,89328,90481,91472,92584,93657,94640,95646,96448,97424,98647,99970,101650,103135,104691,106220,107603,109286,110767,112725,114533,116635,118392,120198,122492,124603,126949,129341,131652,133521,135701,137724,139511,141591,143849,146668,148950,151466,154445,157562,160696,164270,167156,169425,171789,173832,175927,177938,180156,182525,184955,187427,189876,192439,195051,197647,200262,202584,204952,207525,209970,212501,215096,217724,220180,222669,225205,227662,230211,232863,235429,237878,240438,243051,245688,248379,250458,252720,255117,257303,259652,262173,264561,267061,269440,271606,273788,276202,278827,281413,284034,286523,288839,291172,293606,296273,298909,301530,304204,306752,309437,312035,314786,317483,320117,322567,324692,326712,328844,331189,333699,336324,338825,341070,343203,345450,347835,350279,352558,354764,356792,358905,361150,363363,365606,367796,369911,371816,373570,375212,376894,378752,380746,382772,384666,386658,388810,391112,393425,395488,397801,399940,402029,404648,407353,410334,413149,416198,419043,422140,425481,429193,432798,436319,439882,443086,446448,449960,453637,457219,461044,464596,468119,471772,475674,479825,483844,488236,492378,496253,500075,504281,508389,513219,517835,522387,526490,530380,534631,539670,545286,550757,556891,562705,568896,574856,581824,588648,596941,604952,612772,620491,628780,637712,646164,654936,663800,673250,682486,692949,703288,715068,726585,738322,749525,762068,775121,788473,801894,815117,828377,841308,854361,866821,880542,894385,908346,922397,935799,948749,962070,975951,989572,1003494,1016835,1028986,1040547,1051374,1062397,1072620,1083023,1092407,1100818,1108269,1115770,1123474,1131077,1138530],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.024,0.06,0.214,0.333,0.512,0.726,1.131,1.655,2.917,4.619,7.06,11.644,17.871,27.812,34.789,41.825,56.517,69.327,78.173,85.257,95.746,107.152,119.951,135.297,151.548,165.942,178.479,192.504,206.696,219.149,233.877,245.378,257.617,274.416,295.394,321.658,350.101,384.937,421.559,456.098,494.03,531.056,566.631,600.86,633.184,663.663,693.225,720.299,745.17,768.945,788.399,811.878,833.749,853.476,872.728,891.468,909.469,928.59,946.437,962.795,978.784,994.191,1009.632,1023.848,1036.111,1050.017,1063.518,1077.245,1089.044,1102.283,1115.058,1126.761,1138.738,1148.287,1159.907,1174.468,1190.219,1210.221,1227.901,1246.426,1264.63,1281.096,1301.133,1318.765,1342.077,1363.602,1388.628,1409.547,1431.049,1458.36,1483.494,1511.424,1539.903,1567.417,1589.669,1615.624,1639.709,1660.985,1685.749,1712.632,1746.194,1773.363,1803.318,1838.785,1875.895,1913.208,1955.759,1990.119,2017.134,2045.279,2069.602,2094.545,2118.487,2144.894,2173.099,2202.03,2231.461,2260.618,2291.133,2322.231,2353.138,2384.271,2411.917,2440.109,2470.743,2499.853,2529.986,2560.882,2592.17,2621.41,2651.044,2681.237,2710.489,2740.837,2772.411,2802.961,2832.119,2862.597,2893.707,2925.103,2957.141,2981.893,3008.824,3037.362,3063.388,3091.355,3121.369,3149.8,3179.564,3207.888,3233.676,3259.654,3288.395,3319.648,3350.436,3381.641,3411.274,3438.848,3466.624,3495.603,3527.355,3558.739,3589.944,3621.78,3652.116,3684.083,3715.014,3747.767,3779.877,3811.236,3840.406,3865.705,3889.755,3915.138,3943.057,3972.94,4004.193,4033.969,4060.698,4086.093,4112.845,4141.24,4170.338,4197.471,4223.735,4247.88,4273.037,4299.765,4326.113,4352.818,4378.891,4404.072,4426.752,4447.635,4467.184,4487.21,4509.331,4533.071,4557.192,4579.741,4603.458,4629.079,4656.486,4684.024,4708.585,4736.124,4761.59,4786.461,4817.642,4849.847,4885.338,4918.853,4955.154,4989.026,5025.898,5065.675,5109.869,5152.789,5194.71,5237.13,5275.276,5315.303,5357.116,5400.894,5443.54,5489.08,5531.369,5573.313,5616.805,5663.261,5712.682,5760.531,5812.821,5862.135,5908.269,5953.773,6003.849,6052.758,6110.263,6165.22,6219.415,6268.264,6314.577,6365.189,6425.182,6492.045,6557.181,6630.211,6699.431,6773.14,6844.098,6927.057,7008.302,7107.037,7202.414,7295.517,7387.417,7486.104,7592.446,7693.074,7797.511,7903.044,8015.553,8125.515,8250.085,8373.179,8513.429,8650.547,8790.285,8923.665,9072.999,9228.405,9387.371,9547.158,9704.588,9862.458,10016.412,10171.818,10320.163,10483.522,10648.334,10814.55,10981.838,11141.399,11295.579,11454.175,11619.439,11781.607,11947.359,12106.194,12250.861,12388.504,12517.407,12648.644,12770.357,12894.213,13005.936,13106.076,13194.786,13284.091,13375.813,13466.332,13555.066],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.036,0.155,0.119,0.179,0.214,0.405,0.524,1.262,1.703,2.441,4.584,6.227,9.941,6.977,7.036,14.692,12.811,8.846,7.084,10.489,11.406,12.799,15.347,16.251,14.394,12.537,14.025,14.192,12.453,14.727,11.501,12.239,16.799,20.978,26.264,28.443,34.836,36.622,34.539,37.932,37.027,35.574,34.229,32.324,30.479,29.562,27.074,24.871,23.776,19.454,23.478,21.871,19.728,19.252,18.74,18.002,19.121,17.847,16.359,15.989,15.406,15.442,14.215,12.263,13.906,13.501,13.727,11.799,13.239,12.775,11.703,11.977,9.548,11.62,14.561,15.751,20.002,17.68,18.525,18.204,16.466,20.037,17.632,23.311,21.526,25.026,20.918,21.502,27.312,25.133,27.931,28.479,27.514,22.252,25.955,24.085,21.276,24.764,26.883,33.562,27.169,29.955,35.467,37.11,37.313,42.551,34.36,27.014,28.145,24.323,24.943,23.942,26.407,28.205,28.931,29.431,29.157,30.514,31.098,30.907,31.134,27.645,28.193,30.634,29.11,30.133,30.895,31.288,29.241,29.633,30.193,29.252,30.348,31.574,30.55,29.157,30.479,31.11,31.395,32.038,24.752,26.931,28.538,26.026,27.967,30.014,28.431,29.764,28.324,25.788,25.978,28.741,31.253,30.788,31.205,29.633,27.574,27.776,28.979,31.753,31.384,31.205,31.836,30.336,31.967,30.931,32.753,32.11,31.36,29.169,25.3,24.05,25.383,27.919,29.883,31.253,29.776,26.728,25.395,26.752,28.395,29.098,27.133,26.264,24.145,25.157,26.728,26.347,26.705,26.074,25.181,22.68,20.883,19.549,20.025,22.121,23.74,24.121,22.55,23.716,25.621,27.407,27.538,24.562,27.538,25.466,24.871,31.181,32.205,35.491,33.515,36.301,33.872,36.872,39.777,44.194,42.92,41.92,42.42,38.146,40.027,41.813,43.777,42.646,45.54,42.289,41.944,43.492,46.456,49.421,47.849,52.29,49.314,46.135,45.504,50.076,48.909,57.505,54.957,54.195,48.849,46.313,50.611,59.993,66.863,65.136,73.03,69.22,73.709,70.958,82.959,81.245,98.734,95.377,93.103,91.901,98.687,106.342,100.627,104.437,105.533,112.509,109.962,124.57,123.094,140.25,137.119,139.738,133.38,149.334,155.406,158.966,159.787,157.43,157.87,153.953,155.406,148.346,163.359,164.811,166.216,167.288,159.561,154.18,158.597,165.264,162.168,165.752,158.835,144.667,137.642,128.904,131.237,121.713,123.856,111.724,100.139,88.71,89.305,91.722,90.519,88.734],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.036,0.191,0.31,0.489,0.703,1.108,1.632,2.894,4.561,6.847,11.312,17.36,27.087,33.659,40.171,53.601,64.709,71.114,73.614,77.876,79.341,85.163,93.474,95.033,96.616,100.307,107.248,110.951,111.998,113.926,110.08,106.068,108.473,116.914,129.153,143.404,165.787,187.682,210.72,236.413,256.641,271.237,279.202,283.083,278.726,271.666,264.201,251.14,237.889,221.769,211.018,200.565,189.814,179.504,171.17,164.301,159.646,158.039,150.92,145.038,140.716,136.906,132.381,126.642,121.427,117.081,114.449,110.259,108.092,105.425,102.913,102.627,98.269,96.388,97.222,101.174,107.937,112.842,119.664,125.891,132.809,141.226,144.297,151.857,153.381,160.727,163.12,166.418,177.264,182.36,192.659,197.827,203.815,201.041,206.078,208.661,202.625,202.256,201.208,206.291,205.946,213.649,223.161,236.186,252.223,270.01,277.487,270.939,271.915,266.283,255.759,242.591,231.685,217.339,211.91,214.327,215.339,221.53,227.685,234.65,239.377,238.817,238.079,239.282,239.235,238.854,238.651,239.032,237.139,239.127,241.127,239.745,240.983,242.424,242.079,239.948,241.186,242.663,243.865,246.651,241.055,236.412,234.4,231.269,228.757,227.661,224.697,222.423,225.995,224.852,222.292,225.007,228.293,229.067,231.841,231.71,230.96,232.948,235.949,238.961,239.092,239.509,240.14,240.843,245.236,248.391,252.165,252.522,252.498,250.462,243.926,237.64,231.056,228.044,225.174,224.317,222.733,220.292,220.387,223.089,226.101,227.28,224.53,219.541,213.91,212.339,213.672,213.267,211.577,208.553,206.601,203.017,199.755,194.147,187.444,183.218,180.253,178.3,175.669,176.705,181.443,189.301,196.814,199.255,203.053,204.398,206.719,214.184,220.768,228.852,234.829,246.568,252.902,264.308,279.214,292.227,302.942,309.371,318.276,320.121,326.276,331.217,335.217,333.669,336.289,336.658,336.182,341.528,347.957,355.565,359.637,369.281,373.055,376.901,380.461,387.045,389.498,397.582,404.69,406.595,406.13,406.308,411.415,421.332,439.286,446.917,464.99,480.015,504.875,529.52,561.868,583.12,614.991,645.232,665.305,687.986,712.964,748.348,766.016,789.208,796.007,813.139,829.998,862.667,887.074,920.982,957.474,992.775,1020.622,1057.447,1102.891,1137.287,1173.98,1191.16,1211.911,1226.126,1248.152,1247.164,1255.117,1260.962,1267.391,1277.249,1278.94,1279.167,1282.358,1299.276,1298.085,1299.026,1291.645,1269.024,1247.105,1221.829,1194.469,1150.918,1112.606,1058.578,999.882,943.925,895.588,858.406,817.688,784.709],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.158,0.233,0.408,0.629,0.961,1.59,2.449,3.812,4.733,5.558,7.414,8.895,9.504,9.627,9.705,10.338,11.161,11.254,11.746,12.538,13.317,13.823,14.221,14.171,14.083,13.404,13.096,13.705,14.699,16.423,18.707,21.58,25.169,28.354,31.373,33.666,34.996,35.823,35.464,34.586,33.875,32.324,30.588,28.902,26.791,25.528,24.298,22.893,21.776,20.9,20.075,20.027,19.223,18.435,17.901,17.352,16.881,16.34,15.36,14.797,14.389,14.066,13.55,13.236,13.03,12.95,12.675,12.11,11.809,12.203,12.562,13.595,14.448,15.384,16.62,17.313,18.095,18.364,18.837,19.386,20.315,20.702,21.422,22.461,23.533,24.193,25.186,25.541,25.732,26.368,25.907,25.356,24.903,24.676,25.54,26.242,26.813,28.439,30.702,32.494,34.733,34.846,34.824,34.566,32.974,31.236,29.326,27.019,26.14,26.414,26.597,27.288,28.084,29.106,29.749,30.167,29.984,29.807,30.018,29.817,29.679,29.678,29.7,29.928,30.133,30.071,30.091,30.122,30.219,30.113,30.101,30.222,30.353,30.659,30.901,29.926,29.409,29.32,28.684,28.235,28.038,27.523,28.239,28.438,28.045,28.038,28.149,28.326,28.662,28.868,29.055,29.31,29.567,29.601,29.673,29.758,29.758,30.072,30.467,31.066,31.344,31.487,31.591,31.613,31.232,30.513,29.382,28.589,27.899,27.581,27.565,27.652,27.856,28.048,28.244,28.312,28.2,27.611,27.109,26.74,26.706,26.703,26.41,26.069,25.917,25.762,25.553,24.943,23.917,23.014,22.359,22.026,21.874,21.856,22.26,23.128,24.182,24.956,25.074,25.562,25.978,26.143,26.938,27.623,28.759,30.038,31.29,32.491,34.205,35.433,37.146,38.207,39.408,40.282,40.893,41.344,41.634,41.575,41.536,42.053,42.034,42.577,43.072,43.735,44.541,45.284,46.249,47.252,47.851,48.138,48.655,48.582,49.962,50.343,51.04,51.428,51.543,51.62,53.203,54.54,55.994,58.685,61.595,65.509,68.416,71.696,73.751,78.551,81.743,85.155,87.754,91.715,95.056,97.825,98.639,100.09,102.862,105.443,109.14,111.533,117.194,121.862,126.749,129.73,135.355,139.76,144.885,147.676,150.577,153.168,156.107,156.974,155.965,156.593,157.311,158.566,159.911,160.712,160.537,162.002,162.274,161.896,161.83,160.622,158.495,156.132,151.89,147.029,141.25,135.265,128.535,122.174,115.183,109.526,103.881,99.425,94.408]},{"iso":"IRQ","continent":"Asia","population":40222503,"name":"Iraq","population_density":88.125,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,5,7,7,13,19,26,32,35,35,40,54,60,60,71,71,71,101,110,116,124,154,164,192,208,214,233,266,316,346,382,458,506,547,630,694,728,772,820,878,961,1031,1122,1202,1232,1279,1318,1352,1378,1400,1415,1434,1482,1513,1539,1574,1602,1631,1677,1708,1763,1820,1847,1928,2003,2085,2153,2219,2296,2346,2431,2480,2543,2603,2679,2767,2818,2913,3032,3143,3193,3260,3404,3554,3611,3724,3877,3964,4272,4469,4632,4848,5135,5457,5873,6179,6439,6868,7387,8168,8840,9846,11098,12366,13481,14268,15414,16675,17770,18950,20209,21315,22700,24254,25717,27352,29222,30868,32676,34502,36702,39139,41193,43262,45402,47151,49109,51524,53708,56020,58354,60479,62275,64701,67442,69612,72460,75194,77506,79735,81757,83867,86148,88171,90220,92530,94693,97159,99865,102226,104711,107573,110032,112585,115332,118300,121263,124609,126704,129151,131886,134722,137556,140603,144064,147389,150115,153599,156995,160436,164277,168290,172583,176931,180133,184709,188802,192797,197085,201050,204341,207985,211947,215784,219435,223612,227446,231177,234934,238338,242284,247039,252075,256719,260370,264684,269578,273821,278418,282672,286778,290309,294478,298702,303059,307385,311690,315597,319035,322856,327580,332635,337106,341699,345969,349450,353566,358290,362981,367474,372259,375931,379141,382949,387121,391044,394566,397780,400124,402330,405437,409358,413215,416802,420303,423524,426634,430678,434598,438265,442164,445949,449153,451707,455398,459908,463951,467755,470633,472630,475288,478701,482296,485870,489571,493139,496019,498549,501733,505310,508508,511806,514496,516915,519152,521542,524503,526852,529226,531769,533555,535321,537457,539749,542187,544670,547215,548821,550435,552549,554767,556728,558767,560622,562520,564200,566015,568138,569873,571253,572600,573622,574634,575972,577363,578916,580449],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.025,0.025,0.124,0.174,0.174,0.323,0.472,0.646,0.796,0.87,0.87,0.994,1.343,1.492,1.492,1.765,1.765,1.765,2.511,2.735,2.884,3.083,3.829,4.077,4.773,5.171,5.32,5.793,6.613,7.856,8.602,9.497,11.387,12.58,13.599,15.663,17.254,18.099,19.193,20.387,21.829,23.892,25.632,27.895,29.884,30.63,31.798,32.768,33.613,34.259,34.806,35.179,35.652,36.845,37.616,38.262,39.132,39.828,40.549,41.693,42.464,43.831,45.248,45.92,47.933,49.798,51.837,53.527,55.168,57.082,58.326,60.439,61.657,63.223,64.715,66.605,68.792,70.06,72.422,75.381,78.14,79.383,81.049,84.629,88.358,89.776,92.585,96.389,98.552,106.209,111.107,115.159,120.53,127.665,135.67,146.013,153.62,160.085,170.75,183.653,203.07,219.777,244.788,275.915,307.44,335.161,354.727,383.218,414.569,441.792,471.129,502.43,529.927,564.361,602.996,639.368,680.017,726.509,767.431,812.381,857.779,912.474,973.062,1024.128,1075.567,1128.771,1172.254,1220.933,1280.974,1335.272,1392.753,1450.78,1503.611,1548.263,1608.577,1676.723,1730.673,1801.479,1869.451,1926.931,1982.348,2032.618,2085.077,2141.786,2192.081,2243.023,2300.454,2354.229,2415.538,2482.814,2541.513,2603.294,2674.448,2735.583,2799.055,2867.35,2941.14,3014.805,3097.992,3150.077,3210.914,3278.911,3349.419,3419.877,3495.63,3581.677,3664.342,3732.115,3818.733,3903.163,3988.712,4084.206,4183.976,4290.708,4398.806,4478.413,4592.181,4693.94,4793.262,4899.869,4998.446,5080.266,5170.862,5269.364,5364.758,5455.528,5559.376,5654.695,5747.454,5840.86,5925.489,6023.593,6141.811,6267.014,6382.472,6473.242,6580.496,6702.169,6807.657,6921.946,7027.708,7129.79,7217.577,7321.225,7426.241,7534.563,7642.115,7749.145,7846.279,7931.754,8026.751,8144.197,8269.873,8381.03,8495.22,8601.379,8687.923,8790.254,8907.7,9024.327,9136.03,9254.993,9346.286,9426.092,9520.765,9624.488,9722.021,9809.583,9889.489,9947.765,10002.61,10079.855,10177.338,10273.229,10362.408,10449.449,10529.529,10606.849,10707.389,10804.847,10896.015,10992.951,11087.052,11166.709,11230.206,11321.971,11434.097,11534.613,11629.187,11700.739,11750.388,11816.47,11901.323,11990.701,12079.557,12171.57,12260.276,12331.878,12394.778,12473.938,12562.868,12642.376,12724.37,12791.248,12851.388,12907.004,12966.423,13040.039,13098.439,13157.461,13220.684,13265.087,13308.993,13362.097,13419.08,13479.693,13541.425,13604.698,13644.626,13684.753,13737.31,13792.453,13841.207,13891.9,13938.019,13985.206,14026.974,14072.098,14124.879,14168.014,14202.324,14235.812,14261.221,14286.381,14319.646,14354.229,14392.839,14430.952],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.099,0.05,0,0.149,0.149,0.174,0.149,0.075,0,0.124,0.348,0.149,0,0.273,0,0,0.746,0.224,0.149,0.199,0.746,0.249,0.696,0.398,0.149,0.472,0.82,1.243,0.746,0.895,1.889,1.193,1.019,2.064,1.591,0.845,1.094,1.193,1.442,2.064,1.74,2.262,1.989,0.746,1.169,0.97,0.845,0.646,0.547,0.373,0.472,1.193,0.771,0.646,0.87,0.696,0.721,1.144,0.771,1.367,1.417,0.671,2.014,1.865,2.039,1.691,1.641,1.914,1.243,2.113,1.218,1.566,1.492,1.889,2.188,1.268,2.362,2.959,2.76,1.243,1.666,3.58,3.729,1.417,2.809,3.804,2.163,7.657,4.898,4.052,5.37,7.135,8.005,10.342,7.608,6.464,10.666,12.903,19.417,16.707,25.011,31.127,31.525,27.721,19.566,28.492,31.351,27.224,29.337,31.301,27.497,34.433,38.635,36.373,40.649,46.491,40.922,44.95,45.397,54.696,60.588,51.066,51.439,53.204,43.483,48.679,60.041,54.298,57.48,58.027,52.831,44.652,60.314,68.146,53.95,70.806,67.972,57.48,55.417,50.27,52.458,56.71,50.295,50.942,57.431,53.776,61.309,67.276,58.698,61.781,71.154,61.135,63.472,68.295,73.79,73.665,83.187,52.085,60.837,67.997,70.508,70.458,75.754,86.046,82.665,67.773,86.618,84.43,85.549,95.494,99.77,106.731,108.099,79.607,113.767,101.759,99.323,106.607,98.577,81.82,90.596,98.502,95.394,90.77,103.847,95.32,92.759,93.405,84.629,98.104,118.217,125.204,115.458,90.77,107.253,121.673,105.488,114.289,105.762,102.082,87.787,103.648,105.016,108.322,107.552,107.03,97.135,85.475,94.997,117.447,125.676,111.157,114.19,106.159,86.544,102.331,117.447,116.626,111.704,118.963,91.292,79.806,94.673,103.723,97.532,87.563,79.906,58.276,54.845,77.245,97.483,95.892,89.179,87.041,80.08,77.32,100.541,97.458,91.168,96.936,94.102,79.657,63.497,91.765,112.126,100.516,94.574,71.552,49.649,66.082,84.853,89.378,88.856,92.013,88.707,71.602,62.9,79.16,88.93,79.508,81.994,66.878,60.14,55.616,59.419,73.616,58.4,59.022,63.223,44.403,43.906,53.105,56.983,60.613,61.732,63.273,39.928,40.127,52.558,55.143,48.754,50.693,46.118,47.188,41.768,45.124,52.781,43.135,34.309,33.489,25.409,25.16,33.265,34.583,38.61,38.113],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.099,0.149,0.149,0.298,0.447,0.621,0.77,0.845,0.746,0.82,1.168,1.168,1.019,1.118,0.969,0.894,1.64,1.74,1.541,1.591,2.337,2.313,3.009,3.407,2.81,3.058,3.729,4.773,4.773,5.419,6.612,7.407,8.277,9.869,10.64,10.242,10.59,10.888,10.441,11.312,12.033,12.231,12.629,12.53,12.605,12.382,11.785,10.367,9.174,7.285,5.768,6.215,5.817,5.493,5.518,5.568,5.742,6.513,6.812,6.986,7.632,7.657,8.801,9.97,11.288,11.835,12.705,13.252,13.078,14.52,13.724,13.425,12.878,13.076,13.623,12.977,14.096,14.942,16.484,16.161,16.335,18.026,19.567,19.716,20.163,21.008,20.411,26.825,30.057,30.529,32.17,37.888,43.084,49.622,55.067,53.874,59.642,68.493,82.54,92.112,109.118,129.903,153.82,175.077,183.977,199.566,211.5,222.017,226.343,226.517,222.489,229.201,248.27,256.151,265.449,284.716,296.301,309.95,327.85,348.113,370.066,384.759,395.549,402.262,404.823,408.552,423.196,422.798,419.69,426.651,428.043,419.491,436.322,455.789,449.698,466.206,476.698,476.151,478.737,484.355,476.499,465.063,461.408,441.544,431.003,427.299,433.191,450.197,456.437,461.508,482.367,492.56,498.601,513.12,525.601,531.99,556.479,546.783,536.466,543.328,550.364,552.527,554.491,566.872,566.35,582.038,607.819,624.252,639.293,664.329,688.345,709.03,734.464,746.298,773.447,790.776,804.55,815.663,814.47,789.559,772.056,790.951,772.578,761.589,766.113,754.826,749.008,760.593,754.626,754.228,777.051,811.485,823.096,818.546,833.04,861.308,882.167,898.352,885.897,862.775,835.104,847.982,845.745,832.394,834.458,827.199,818.572,801.965,809.175,822.974,843.634,846.469,853.107,852.236,841.645,858.501,880.951,880.13,866.158,873.964,851.066,824.713,832.842,834.234,814.319,785.256,753.458,692.771,656.324,653.763,656.573,648.742,640.389,639.867,640.041,659.085,704.781,724.994,718.679,719.723,724.646,717.262,700.679,715.124,726.709,729.767,733.173,707.789,663.336,649.761,671.117,668.73,645.46,636.957,631.09,631.14,644.391,657.469,661.546,651.676,644.814,619.679,591.112,575.126,571.645,566.101,535.571,515.085,496.314,473.839,457.605,455.094,452.658,439.655,442.987,447.238,423.943,419.667,428.319,430.357,422.128,412.208,396.594,380.509,382.349,387.346,387.569,375.561,361.116,343.912,323.203,301.175,292.672,282.131,267.96,262.938],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.064,0.089,0.11,0.107,0.099,0.117,0.146,0.146,0.121,0.139,0.128,0.128,0.217,0.199,0.199,0.227,0.295,0.33,0.43,0.38,0.369,0.416,0.504,0.575,0.646,0.675,0.888,1.037,1.115,1.293,1.343,1.357,1.385,1.286,1.321,1.47,1.424,1.52,1.683,1.634,1.63,1.563,1.389,1.232,0.987,0.757,0.717,0.721,0.693,0.664,0.696,0.717,0.767,0.863,0.803,0.888,0.998,0.97,1.158,1.321,1.449,1.58,1.62,1.691,1.772,1.786,1.694,1.627,1.598,1.634,1.673,1.676,1.712,1.961,2.131,2.095,2.064,2.262,2.614,2.479,2.458,2.607,2.738,3.594,3.783,3.829,4.393,5.011,5.612,6.78,6.773,6.997,7.942,9.018,10.772,12.015,14.111,17.471,21.051,23.487,24.439,25.735,27.827,28.143,27.888,27.856,27.824,29.948,31.397,32.114,34.032,36.483,37.857,40.351,41.917,44.211,47.671,49.159,49.865,51.62,51.41,51.879,52.643,51.744,52.661,53.602,53.549,53.715,55.378,56.536,56.486,58.389,59.81,60.474,62.012,60.577,58.336,58.73,55.8,53.367,53.36,53.126,54.703,56.82,57.104,58.745,61.632,62.161,63.547,64.545,65.475,67.613,70.671,67.947,67.904,68.551,68.867,68.391,68.689,69.098,73.466,74.457,77.117,79.106,81.262,84.082,86.043,89.481,95.242,94.24,98.431,100.747,101.294,102.27,101.105,97.351,98.921,96.74,95.831,94.609,94.215,93.75,95.313,95.714,93.732,94.119,98.04,101.091,103.968,103.684,105.662,110.954,112.009,111.448,108.671,106.76,106.334,105.819,103.439,103.844,102.881,103.062,102.356,102.025,100.789,102.565,105.044,105.559,106.582,107.871,108.024,109.072,109.072,107.779,107.857,108.539,106.415,105.453,104.359,102.398,99.671,96.222,90.642,85.926,82.36,79.87,78.979,78.744,78.975,79.994,83.109,86.32,89.648,89.644,88.969,90.078,91.086,91.026,89.051,87.797,89.893,91.228,90.891,87.669,83.383,83.752,82.765,79.515,77.849,77.483,79.934,83.07,82.615,81.802,81.738,80.403,78.971,75.853,74.216,73.175,70.355,68.167,65.152,61.87,61.348,59.1,57.427,56.525,54.149,54.465,54.852,54.859,54.22,53.68,53.602,53.339,51.645,50.068,47.617,48.654,48.889,47.827,47.489,46.687,44.346,42.542,39.431,37.058,35.364,32.764,32.118,32.661]},{"iso":"IRL","continent":"Europe","population":4937796,"name":"Ireland","population_density":69.874,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,6,6,18,18,19,21,34,43,43,90,129,129,169,223,292,557,683,785,906,1125,1329,1564,1819,2121,2415,2615,2910,3235,3447,3849,4273,4604,4994,5364,5709,6074,6574,8089,8928,9655,10647,11479,12547,13271,13980,14758,15251,15652,16040,16671,17607,18184,18561,19262,19648,19877,20253,20612,20833,21176,21506,21772,21983,22248,22385,22541,22760,22996,23135,23242,23401,23827,23956,24048,24112,24200,24251,24315,24391,24506,24582,24639,24698,24735,24803,24841,24876,24929,24990,25062,25066,25111,25142,25163,25183,25201,25207,25215,25231,25238,25250,25295,25303,25321,25334,25341,25355,25368,25374,25379,25383,25391,25396,25405,25414,25437,25439,25462,25473,25477,25489,25498,25509,25527,25531,25538,25542,25565,25589,25611,25628,25638,25670,25683,25698,25730,25750,25760,25766,25802,25819,25826,25845,25869,25881,25892,25929,25942,26027,26065,26109,26162,26208,26253,26303,26372,26470,26644,26712,26768,26801,26838,26929,26995,27191,27257,27313,27499,27547,27676,27755,27908,27969,28116,28201,28363,28453,28578,28720,28760,28811,29025,29114,29206,29303,29534,29672,29774,30080,30164,30360,30571,30730,30985,31192,31549,31799,32023,32271,32538,32933,33121,33444,33675,33994,34315,34560,34990,35377,35740,36155,36597,37063,37668,38032,38549,38973,39584,40086,40703,41714,42528,43351,44159,45243,46429,47427,48678,49962,50993,52256,53422,54476,55261,56108,57128,58067,58767,59434,60297,61059,61456,62002,62750,63048,63483,64046,64538,64855,65394,65659,65889,66247,66632,67099,67526,67903,68356,68686,69058,69473,69802,70143,70461,70711,70930,71187,71494,71699,71942,72241,72544,72798,73066,73228,73491,73948,74246,74468,74682,74900,75203,75507,75756,76185,76449,76776,77197,77678],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.203,0.203,0.203,0.405,1.215,1.215,3.645,3.645,3.848,4.253,6.886,8.708,8.708,18.227,26.125,26.125,34.226,45.162,59.136,112.803,138.321,158.978,183.483,227.834,269.148,316.741,368.383,429.544,489.085,529.589,589.332,655.151,698.085,779.498,865.366,932.4,1011.382,1086.315,1156.184,1230.103,1331.363,1638.18,1808.094,1955.326,2156.225,2324.721,2541.012,2687.636,2831.223,2988.783,3088.625,3169.835,3248.413,3376.203,3565.761,3682.615,3758.965,3900.931,3979.103,4025.48,4101.628,4174.332,4219.089,4288.553,4355.384,4409.255,4451.986,4505.654,4533.399,4564.992,4609.344,4657.139,4685.289,4706.958,4739.159,4825.432,4851.557,4870.189,4883.15,4900.972,4911.301,4924.262,4939.653,4962.943,4978.334,4989.878,5001.827,5009.32,5023.091,5030.787,5037.875,5048.609,5060.962,5075.544,5076.354,5085.467,5091.745,5095.998,5100.049,5103.694,5104.909,5106.529,5109.77,5111.187,5113.617,5122.731,5124.351,5127.996,5130.629,5132.047,5134.882,5137.515,5138.73,5139.743,5140.553,5142.173,5143.185,5145.008,5146.831,5151.489,5151.894,5156.552,5158.779,5159.589,5162.02,5163.842,5166.07,5169.715,5170.525,5171.943,5172.753,5177.411,5182.272,5186.727,5190.17,5192.195,5198.676,5201.308,5204.346,5210.827,5214.877,5216.902,5218.118,5225.408,5228.851,5230.269,5234.117,5238.977,5241.407,5243.635,5251.128,5253.761,5270.975,5278.671,5287.582,5298.315,5307.631,5316.745,5326.871,5340.844,5360.691,5395.93,5409.701,5421.042,5427.725,5435.218,5453.648,5467.014,5506.708,5520.074,5531.415,5569.084,5578.805,5604.93,5620.929,5651.914,5664.268,5694.038,5711.253,5744.061,5762.287,5787.602,5816.36,5824.461,5834.789,5878.129,5896.153,5914.785,5934.429,5981.211,6009.159,6029.816,6091.787,6108.798,6148.492,6191.224,6223.424,6275.067,6316.988,6389.288,6439.918,6485.282,6535.507,6589.58,6669.575,6707.649,6773.062,6819.844,6884.448,6949.457,6999.074,7086.157,7164.533,7238.047,7322.093,7411.606,7505.98,7628.505,7702.222,7806.924,7892.793,8016.532,8118.197,8243.151,8447.899,8612.749,8779.423,8943.059,9162.59,9402.778,9604.893,9858.244,10118.279,10327.077,10582.859,10818.997,11032.453,11191.43,11362.964,11569.534,11759.7,11901.464,12036.544,12211.319,12365.638,12446.039,12556.614,12708.099,12768.45,12856.546,12970.564,13070.204,13134.402,13243.56,13297.228,13343.808,13416.31,13494.28,13588.856,13675.332,13751.682,13843.423,13910.255,13985.592,14069.638,14136.266,14205.326,14269.727,14320.357,14364.708,14416.756,14478.929,14520.446,14569.658,14630.212,14691.575,14743.015,14797.29,14830.098,14883.361,14975.912,15036.263,15081.222,15124.562,15168.711,15230.074,15291.64,15342.068,15428.948,15482.414,15548.637,15633.898,15731.31],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.203,0.81,0,2.43,0,0.203,0.405,2.633,1.823,0,9.518,7.898,0,8.101,10.936,13.974,53.668,25.517,20.657,24.505,44.352,41.314,47.592,51.642,61.161,59.541,40.504,59.743,65.819,42.934,81.413,85.868,67.034,78.983,74.932,69.869,73.92,101.26,306.817,169.914,147.232,200.899,168.496,216.291,146.624,143.586,157.56,99.842,81.21,78.578,127.79,189.558,116.854,76.35,141.966,78.173,46.377,76.147,72.705,44.757,69.464,66.831,53.87,42.732,53.668,27.745,31.593,44.352,47.795,28.15,21.67,32.201,86.273,26.125,18.632,12.961,17.822,10.328,12.961,15.391,23.29,15.391,11.544,11.949,7.493,13.771,7.696,7.088,10.734,12.354,14.581,0.81,9.113,6.278,4.253,4.05,3.645,1.215,1.62,3.24,1.418,2.43,9.113,1.62,3.645,2.633,1.418,2.835,2.633,1.215,1.013,0.81,1.62,1.013,1.823,1.823,4.658,0.405,4.658,2.228,0.81,2.43,1.823,2.228,3.645,0.81,1.418,0.81,4.658,4.86,4.455,3.443,2.025,6.481,2.633,3.038,6.481,4.05,2.025,1.215,7.291,3.443,1.418,3.848,4.86,2.43,2.228,7.493,2.633,17.214,7.696,8.911,10.734,9.316,9.113,10.126,13.974,19.847,35.238,13.771,11.341,6.683,7.493,18.429,13.366,39.694,13.366,11.341,37.669,9.721,26.125,15.999,30.985,12.354,29.77,17.214,32.808,18.227,25.315,28.758,8.101,10.328,43.339,18.024,18.632,19.644,46.782,27.948,20.657,61.971,17.012,39.694,42.732,32.201,51.642,41.922,72.299,50.63,45.364,50.225,54.073,79.995,38.074,65.414,46.782,64.604,65.009,49.617,87.083,78.375,73.515,84.046,89.514,94.374,122.524,73.717,104.703,85.868,123.739,101.665,124.955,204.747,164.851,166.674,163.636,219.531,240.188,202.114,253.352,260.035,208.798,255.782,236.138,213.456,158.978,171.534,206.57,190.166,141.764,135.081,174.774,154.32,80.4,110.576,151.485,60.351,88.096,114.018,99.64,64.199,109.158,53.668,46.579,72.502,77.97,94.577,86.476,76.35,91.741,66.831,75.337,84.046,66.629,69.059,64.401,50.63,44.352,52.048,62.173,41.516,49.212,60.553,61.363,51.44,54.275,32.808,53.263,92.551,60.351,44.959,43.339,44.149,61.363,61.566,50.427,86.881,53.465,66.224,85.261,97.412],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.203,1.013,1.013,3.443,3.443,3.646,4.051,6.684,8.304,7.494,17.012,22.48,22.48,30.378,40.909,52.25,104.095,129.612,140.751,157.358,201.71,234.923,271.579,309.247,316.74,350.764,370.611,405.849,427.316,428.936,462.757,496.983,502.856,522.298,556.726,566.852,574.953,633.279,858.683,942.729,1022.927,1144.843,1238.407,1384.829,1457.533,1499.859,1350.602,1280.53,1214.508,1092.187,1051.481,1024.748,994.978,927.742,912.148,890.479,855.646,853.215,798.13,653.329,605.939,596.42,508.324,472.883,480.174,431.772,390.66,390.255,368.586,329.905,297.705,287.174,319.779,318.159,305.198,273.807,243.834,226.012,217.303,200.493,137.51,126.776,119.688,118.676,108.347,111.79,106.525,98.222,85.666,82.629,85.666,74.527,76.147,68.654,65.211,62.173,55.084,43.945,30.984,33.414,25.719,21.871,26.731,24.301,24.301,25.719,25.517,25.112,26.327,25.112,17.012,16.202,14.177,12.557,12.962,11.95,13.975,13.165,16.81,18.228,17.418,18.835,18.835,19.24,18.227,18.632,15.392,13.974,17.822,20.252,22.884,24.099,22.479,28.15,29.365,31.593,33.416,32.606,30.176,27.948,33.214,30.176,28.961,29.771,28.15,26.53,26.733,33.011,28.353,42.124,48.402,53.465,59.339,66.225,73.11,75.743,87.084,89.717,117.259,122.119,122.726,120.093,118.473,126.776,126.168,146.015,124.143,121.713,148.041,151.079,169.711,167.281,184.9,157.56,173.964,179.837,174.976,183.482,182.672,195.431,172.547,170.521,184.09,184.9,170.724,172.141,193.608,192.798,205.354,256.997,230.67,252.34,276.44,288.997,293.857,307.831,359.473,348.132,376.484,387.015,398.356,446.15,432.582,456.074,430.557,444.531,464.176,463.568,496.578,494.958,530.399,549.031,591.763,621.533,679.048,703.148,720.768,728.261,778.485,796.104,831.545,941.918,984.245,1077.202,1136.135,1269.798,1386.247,1486.696,1615.093,1670.381,1714.328,1803.436,1875.938,1869.863,1788.653,1758.073,1711.291,1641.422,1574.388,1453.687,1392.323,1333.187,1254.609,1193.651,1138.566,1008.751,955.083,934.02,858.886,768.765,797.523,740.615,635.709,647.86,637.734,618.293,605.129,617.28,599.863,613.026,641.784,653.328,641.987,616.469,594.394,568.674,521.285,506.502,493.338,450.808,433.391,424.885,421.847,422.657,432.58,413.34,404.43,455.465,466.604,451.01,432.986,425.695,432.783,461.541,458.705,453.035,446.149,467.414,509.336,562.599],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.492,0.492,0.521,0.579,0.926,1.07,1.07,2.083,3.211,3.182,4.282,5.468,7.204,14.871,17.156,18.979,22.48,27.658,31.998,36.801,36.511,41.603,47.158,49.444,51.642,55.143,54.478,58.731,62.26,63.331,68.828,70.998,71.576,76.003,78.838,110.402,125.099,134.849,152.844,166.934,187.273,193.753,170.435,168.67,161.9,144.801,131.956,119.313,125.446,121.627,110.026,116.044,115.61,111.01,103.632,86.939,76.639,75.656,64.922,61.45,60.929,57.718,51.295,49.415,45.827,43.108,39.433,36.425,33.358,41.719,40.938,37.264,32.287,30.812,29.192,26.443,16.317,15.912,15.449,15.247,14.408,14.003,14.119,13.019,10.705,10.039,10.155,10.531,9.576,8.911,8.708,8.303,7.349,6.105,4.195,4.311,3.472,2.777,2.517,3.24,2.951,3.298,3.443,3.182,3.385,3.414,2.286,2.199,1.794,1.649,1.591,1.447,1.331,1.823,1.736,2.286,2.372,2.343,2.43,2.43,2.083,2.546,1.996,1.881,1.881,2.199,2.633,2.951,2.922,3.096,3.819,4.079,3.848,4.079,4.021,3.819,3.703,3.819,3.935,3.703,3.327,3.443,3.501,3.645,3.674,3.559,5.815,6.365,6.944,8.13,9.142,9.374,10.444,9.981,11.717,15.478,15.912,16.202,15.854,15.478,16.115,15.189,15.825,15.768,15.768,20.194,20.512,21.612,21.988,20.744,20.599,23.232,20.31,23.608,22.48,23.811,23.492,22.885,20.107,23.839,21.727,21.785,20.975,23.55,26.385,27.861,30.523,30.378,33.387,36.685,34.602,37.987,41.025,42.5,47.303,48.113,49.183,52.308,56.358,55.809,54.825,54.275,57.024,59.136,58.499,59.512,65.269,66.426,71.75,75.308,79.503,89.919,88.009,91.77,93.535,99.206,100.942,105.31,117.056,130.075,138.928,150.038,163.723,183.512,194.534,201.478,215.076,221.093,234.257,236.63,232.811,226.648,214.96,207.322,204.66,188.372,173.935,168.409,167.744,154.725,141.011,135.486,123.855,117.143,108.464,100.652,98.338,98.135,84.161,82.194,79.966,74.816,74.093,77.276,72.589,78.028,80.921,81.326,82.194,78.201,75.713,74.006,68.133,64.922,61.595,58.47,54.883,52.048,51.498,53.031,54.044,54.362,50.167,51.845,58.036,58.007,55.664,54.507,53.06,57.139,58.326,52.308,56.098,57.313,60.582,66.455,71.605]},{"iso":"ISR","continent":"Asia","population":8655541,"name":"Israel","population_density":402.606,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,2,3,6,6,7,12,15,15,21,37,47,56,60,88,60,81,112,138,177,251,295,371,386,628,843,1080,1249,1351,2468,2988,3421,3901,4433,4979,5717,6413,7132,7729,8157,8740,9191,9568,9906,10249,10607,10952,11504,11942,12341,12652,12948,13246,13537,13813,14112,14394,14619,14895,15143,15302,15385,15513,15672,15754,15896,16012,16069,16096,16149,16181,16246,16307,16340,16359,16388,16427,16450,16489,16511,16523,16528,16543,16570,16592,16607,16624,16643,16648,16661,16683,16733,16773,16850,16963,16992,17079,17179,17300,17397,17539,17666,17744,17884,18063,18236,18476,18667,18851,19000,19136,19334,19634,19905,20207,20517,20676,20849,21194,21645,22132,22648,23112,23510,23895,24652,25438,26410,27556,28495,29316,30147,31281,32671,33998,35523,36932,38100,39338,41058,42662,44539,46478,48083,49531,50547,52434,54440,56484,58474,60304,61416,62458,64506,66631,68585,70372,71734,72359,73067,74867,76596,78286,79963,81727,82481,83405,85109,86932,88554,90197,91585,92342,93410,95060,96709,98349,99836,101329,102040,103005,104905,106861,108814,110885,112717,113627,114728,116906,119158,122351,125012,127635,129140,131317,134705,138194,142190,146351,150326,153045,156220,161025,166564,171138,176523,181863,185672,188251,192117,199138,206263,214497,222887,228769,232183,233342,238333,247411,255142,262200,264793,267730,273451,278175,282340,286095,289058,289974,291620,294789,297125,299242,300854,302354,302765,303687,305204,306397,307569,308601,309450,309696,310303,311187,312074,312797,313441,314121,314349,315007,315795,316641,317410,317980,318671,318883,319417,320136,320811,321574,322410,323171,323463,324088,324961,325790,326585,327355,328129,328551,329316,330275,331132,332211,333296,334328,334908,335933,337191,338389,339968,341406,342101,343826,344906,346797,348285,350271,352397,353269,355786,357176,359506,360630,365042,367975],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.116,0.116,0.116,0.116,0.116,0.231,0.347,0.693,0.693,0.809,1.386,1.733,1.733,2.426,4.275,5.43,6.47,6.932,10.167,6.932,9.358,12.94,15.944,20.449,28.999,34.082,42.863,44.596,72.555,97.394,124.776,144.301,156.085,285.135,345.212,395.238,450.694,512.157,575.238,660.502,740.913,823.981,892.954,942.402,1009.758,1061.863,1105.419,1144.469,1184.097,1225.458,1265.317,1329.091,1379.694,1425.792,1461.723,1495.92,1530.349,1563.969,1595.856,1630.401,1662.981,1688.976,1720.863,1749.515,1767.885,1777.474,1792.262,1810.632,1820.106,1836.511,1849.913,1856.499,1859.618,1865.741,1869.438,1876.948,1883.995,1887.808,1890.003,1893.354,1897.859,1900.517,1905.022,1907.564,1908.951,1909.528,1911.261,1914.381,1916.922,1918.655,1920.619,1922.815,1923.392,1924.894,1927.436,1933.212,1937.834,1946.73,1959.785,1963.136,1973.187,1984.74,1998.72,2009.926,2026.332,2041.005,2050.016,2066.191,2086.871,2106.858,2134.586,2156.653,2177.911,2195.126,2210.838,2233.714,2268.374,2299.683,2334.574,2370.389,2388.759,2408.746,2448.605,2500.71,2556.975,2616.59,2670.197,2716.179,2760.659,2848.118,2938.927,3051.225,3183.625,3292.111,3386.963,3482.971,3613.986,3774.576,3927.889,4104.076,4266.862,4401.805,4544.834,4743.551,4928.866,5145.721,5369.739,5555.17,5722.461,5839.843,6057.854,6289.613,6525.762,6755.672,6967.098,7095.57,7215.956,7452.567,7698.075,7923.826,8130.283,8287.639,8359.847,8441.644,8649.604,8849.36,9044.611,9238.36,9442.16,9529.271,9636.024,9832.892,10043.509,10230.903,10420.724,10581.083,10668.542,10791.931,10982.56,11173.074,11362.548,11534.345,11706.836,11788.98,11900.469,12119.982,12345.964,12571.6,12810.869,13022.525,13127.66,13254.862,13506.493,13766.673,14135.569,14443.002,14746.045,14919.922,15171.438,15562.863,15965.958,16427.627,16908.36,17367.603,17681.737,18048.554,18603.69,19243.627,19772.074,20394.219,21011.165,21451.23,21749.189,22195.84,23006.996,23830.168,24781.467,25750.788,26430.353,26824.782,26958.685,27535.309,28584.117,29477.302,30292.734,30592.311,30931.631,31592.595,32138.372,32619.567,33053.393,33395.717,33501.545,33691.713,34057.836,34327.721,34572.305,34758.544,34931.843,34979.327,35085.848,35261.112,35398.943,35534.347,35653.577,35751.665,35780.086,35850.214,35952.345,36054.823,36138.353,36212.757,36291.319,36317.661,36393.681,36484.721,36582.462,36671.307,36737.161,36816.994,36841.487,36903.181,36986.25,37064.234,37152.386,37248.971,37336.892,37370.628,37442.836,37543.696,37639.473,37731.321,37820.282,37909.704,37958.459,38046.842,38157.638,38256.65,38381.31,38506.663,38625.893,38692.902,38811.323,38956.664,39095.072,39277.499,39443.635,39523.93,39723.225,39848,40066.473,40238.386,40467.834,40713.457,40814.202,41104.999,41265.589,41534.781,41664.64,42174.371,42513.229],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.116,0.116,0.347,0,0.116,0.578,0.347,0,0.693,1.849,1.155,1.04,0.462,3.235,-3.235,2.426,3.582,3.004,4.506,8.549,5.083,8.781,1.733,27.959,24.84,27.381,19.525,11.784,129.05,60.077,50.026,55.456,61.464,63.081,85.263,80.411,83.068,68.973,49.448,67.356,52.105,43.556,39.05,39.628,41.361,39.859,63.774,50.603,46.098,35.931,34.198,34.429,33.62,31.887,34.544,32.58,25.995,31.887,28.652,18.37,9.589,14.788,18.37,9.474,16.406,13.402,6.585,3.119,6.123,3.697,7.51,7.048,3.813,2.195,3.35,4.506,2.657,4.506,2.542,1.386,0.578,1.733,3.119,2.542,1.733,1.964,2.195,0.578,1.502,2.542,5.777,4.621,8.896,13.055,3.35,10.051,11.553,13.979,11.207,16.406,14.673,9.012,16.175,20.68,19.987,27.728,22.067,21.258,17.214,15.712,22.876,34.66,31.309,34.891,35.815,18.37,19.987,39.859,52.105,56.265,59.615,53.607,45.982,44.48,87.458,90.809,112.298,132.401,108.485,94.853,96.008,131.014,160.591,153.312,176.188,162.786,134.942,143.03,198.717,185.315,216.855,224.018,185.43,167.292,117.381,218.011,231.759,236.149,229.911,211.425,128.473,120.385,236.611,245.507,225.751,206.457,157.356,72.208,81.797,207.959,199.756,195.251,193.749,203.8,87.112,106.752,196.868,210.617,187.394,189.821,160.36,87.458,123.389,190.629,190.514,189.474,171.797,172.491,82.144,111.489,219.513,225.982,225.636,239.269,211.656,105.135,127.202,251.631,260.18,368.897,307.433,303.043,173.877,251.515,391.426,403.094,461.67,480.733,459.243,314.134,366.817,555.136,639.937,528.448,622.145,616.946,440.065,297.959,446.65,811.157,823.172,951.298,969.321,679.565,394.429,133.903,576.625,1048.808,893.185,815.431,299.577,339.32,660.964,545.778,481.195,433.826,342.324,105.828,190.167,366.124,269.885,244.583,186.239,173.299,47.484,106.521,175.263,137.831,135.405,119.23,98.087,28.421,70.128,102.131,102.478,83.53,74.403,78.562,26.342,76.021,91.04,97.741,88.845,65.854,79.833,24.493,61.695,83.068,77.985,88.152,96.586,87.921,33.736,72.208,100.86,95.777,91.849,88.96,89.422,48.755,88.383,110.796,99.012,124.66,125.353,119.23,67.009,118.421,145.34,138.408,182.426,166.136,80.295,199.294,124.776,218.473,171.913,229.448,245.623,100.745,290.796,160.591,269.192,129.859,509.731,338.858],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.116,0.232,0.579,0.579,0.695,1.273,1.62,1.62,2.197,3.93,4.738,5.778,6.124,8.781,5.199,7.625,10.514,11.669,15.02,22.529,27.15,32.696,37.664,63.197,84.455,108.832,123.851,127.086,251.053,302.349,350.642,378.139,414.763,450.463,516.201,584.828,538.846,547.742,547.164,559.064,549.705,530.18,483.967,443.184,401.477,372.363,386.689,369.936,363.929,356.304,351.452,346.253,338.512,330.54,301.31,283.287,263.184,259.14,253.594,237.535,213.504,196.405,180.231,157.125,147.536,129.051,106.984,91.733,88.267,77.176,66.316,63.89,51.297,40.09,36.855,38.242,34.776,35.585,30.617,24.955,21.72,21.258,21.027,19.063,18.139,15.597,15.25,14.442,15.366,16.175,18.833,20.912,28.075,39.166,40.321,49.794,59.845,71.282,76.712,88.497,94.274,90.231,103.056,113.685,122.119,135.868,146.728,151.58,154.121,160.821,167.522,181.502,192.824,199.987,213.735,210.847,213.62,237.767,266.996,288.601,316.907,335.623,345.79,371.9,439.371,490.321,550.514,626.65,675.52,716.766,766.792,853.326,926.459,988.962,1052.852,1083.237,1109.694,1157.871,1260.58,1314.881,1371.145,1441.851,1451.093,1455.599,1438.038,1513.019,1546.061,1596.895,1609.951,1597.358,1540.401,1493.494,1612.724,1640.22,1634.212,1604.52,1531.965,1392.748,1346.072,1433.646,1396.791,1346.535,1314.533,1311.876,1241.632,1276.176,1391.247,1393.905,1381.543,1376.113,1342.724,1226.382,1262.659,1346.536,1340.182,1319.039,1303.442,1286.112,1207.896,1231.927,1328.051,1363.404,1398.526,1448.321,1488.18,1420.824,1465.882,1606.024,1646.691,1789.606,1871.403,1935.177,1897.398,2043.778,2308.002,2459.465,2660.955,2772.791,2924.601,2935.692,3128.632,3432.253,3680.764,3806.118,3966.593,4102.806,4083.628,4067.453,4147.286,4403.307,4586.542,5009.392,5356.568,5419.187,5373.551,5209.495,5339.47,5577.121,5647.134,5511.267,4841.523,4501.278,4767.813,5179.688,5084.258,4469.276,3918.415,3208.812,3099.402,3126.206,2735.127,2433.932,2138.976,1878.449,1583.609,1584.302,1569.398,1341.105,1206.625,1081.272,993.12,848.242,870.886,866.496,793.711,739.41,678.408,637.74,565.995,613.595,634.507,630.117,616.484,598.808,604.238,550.169,585.522,592.569,579.514,569.925,577.666,599.733,553.636,601.351,640.516,653.225,667.089,667.897,660.733,621.567,676.214,714.802,712.954,741.837,775.341,805.611,783.198,852.864,909.821,937.433,1020.847,1062.323,1017.265,1097.329,1155.096,1255.148,1281.721,1372.761,1435.958,1370.567,1581.068,1542.365,1686.781,1598.167,1935.985,2045.395],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.033,0.083,0.083,0.099,0.182,0.231,0.215,0.297,0.512,0.677,0.809,0.792,1.205,0.743,0.99,1.238,1.502,1.997,3.152,3.416,5.133,5.034,8.516,11.636,14.904,16.472,17.429,34.61,42.945,46.098,50.471,55.34,61.563,72.06,65.111,68.395,71.102,70.244,71.086,69.518,63.56,57.651,51.445,47.501,46.131,45.619,45.404,45.768,45.322,44.546,43.556,42.665,38.109,35.815,33.884,32.465,32.135,31.309,29.131,25.945,23.123,21.093,18.733,16.521,14.343,12.659,11.735,10.497,8.401,8.12,6.783,5.414,4.786,4.819,4.588,4.44,4.011,3.367,3.02,2.789,2.558,2.36,2.344,1.948,1.865,1.981,1.981,1.948,1.865,2.327,2.74,3.73,5.282,5.678,6.899,8.186,9.358,10.299,11.372,11.603,12.412,13.286,14.59,15.448,17.809,18.617,19.558,20.73,20.664,20.977,23.074,23.585,25.417,27.497,27.662,28.273,30.699,33.191,36.756,40.288,42.83,46.774,50.273,57.073,62.602,70.607,81.005,88.845,95.826,103.187,109.41,119.379,125.238,131.493,139.25,144.977,151.695,161.366,164.898,173.976,180.809,184.044,188.665,185.001,187.758,194.392,197.149,197.99,201.704,196.158,196.588,199.245,201.209,199.723,196.373,188.649,180.611,175.098,171.005,164.469,160.112,158.297,164.932,167.061,170.626,169.041,170.593,169.47,168.909,162.703,162.753,165.13,164.238,161.366,161.664,159.089,160.822,160.063,158.363,162.489,167.556,172.722,182.36,187.956,191.24,193.485,198.073,202.958,223.424,233.162,246.217,256.037,273.797,293.767,314.184,327.437,352.194,374.508,394.545,411.017,434.404,468.238,477.778,497.98,520.509,538.499,528.662,513.164,537.624,579.728,626.75,677.089,711.303,725.085,680.406,646.902,679.136,670.834,648.849,594.565,586.693,661.987,657.58,576.493,510.87,443.283,415.605,394.297,352.177,312.764,278.963,243.593,219.447,211.112,199.162,171.896,153.032,137.435,127.862,117.117,114.394,109.195,98.748,93.697,86.287,79.883,77.093,76.796,77.638,76.054,75.377,76.136,74.915,75.096,74.832,72.786,71.647,68.825,68.726,73.116,74.271,75.592,77.093,79.635,82.177,82.705,81.616,81.83,83.976,86.287,87.706,88.168,92.855,98.054,102.313,104.92,109.212,114.147,119.775,128.027,133.853,128.291,147.189,148.097,158.544,163.331,170.048,181.403,184.325,197.396,202.513,209.758,203.751,243.791,257.11]},{"iso":"ITA","continent":"Europe","population":60461828,"name":"Italy","population_density":205.859,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,20,62,155,229,322,453,655,888,1128,1694,2036,2502,3089,3858,4636,5883,7375,9172,10149,12462,15113,17660,21157,24747,27980,31506,35713,41035,47021,53578,59138,63927,69176,74386,80589,86498,92472,97689,101739,105792,110574,115242,119827,124632,128948,132547,135586,139422,143626,147577,152271,156363,159516,162488,165155,168941,172434,175925,178972,181228,183957,187327,189973,192994,195351,197675,199414,201505,203591,205463,207428,209328,210717,211938,213013,214457,215858,217185,218268,219070,219814,221216,222104,223096,223885,224760,225435,225886,226699,227364,228006,228658,229327,229858,230158,230555,231139,231732,232248,232664,232997,233197,233515,233836,234013,234531,234801,234998,235278,235561,235763,236142,236305,236651,236989,237290,237500,237828,238159,238011,238275,238499,238720,238833,239410,239706,239961,240136,240310,240436,240578,240760,240961,241184,241419,241611,241819,241956,242149,242363,242639,242827,243061,243230,243344,243506,243736,243967,244216,244434,244624,244752,245032,245338,245590,245864,246118,246286,246488,246776,247158,247537,247832,248070,248229,248419,248803,249204,249756,250103,250566,250825,251237,251713,252235,252809,253438,253915,254235,254636,255278,256118,257065,258136,259345,260298,261174,262540,263949,265409,266853,268218,269214,270189,271515,272912,274644,276338,277634,278784,280153,281583,283180,284796,286297,287753,288761,289990,291442,293025,294932,296569,298156,299506,300897,302537,304323,306235,308104,309870,311364,313011,314861,317409,319908,322751,325329,327586,330263,333940,338398,343770,349494,354950,359569,365467,372799,381602,391611,402536,414241,423578,434449,449648,465726,484869,504509,525782,542789,564778,589766,616595,647674,679430,709335,731588,759829,790377,824879,862681,902490,935104,960373,995463,1028424,1066401,1107303,1144552,1178529,1205881,1238072,1272352,1308528,1345767,1380531,1408868,1431795,1455022,1480874,1509875,1538217,1564532,1585178,1601554,1620901,1641610,1664829,1688939,1709991,1728878,1742557,1757394,1770149,1787147,1805873,1825775,1843712,1855737,1870576,1888144,1906377],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.033,0.033,0.033,0.033,0.033,0.033,0.033,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.331,1.025,2.564,3.788,5.326,7.492,10.833,14.687,18.656,28.018,33.674,41.381,51.09,63.809,76.676,97.301,121.978,151.699,167.858,206.114,249.959,292.085,349.923,409.3,462.771,521.089,590.67,678.693,777.697,886.146,978.105,1057.312,1144.127,1230.297,1332.891,1430.622,1529.428,1615.714,1682.698,1749.732,1828.823,1906.029,1981.862,2061.334,2132.718,2192.243,2242.506,2305.951,2375.482,2440.829,2518.465,2586.144,2638.293,2687.448,2731.558,2794.176,2851.948,2909.687,2960.083,2997.395,3042.531,3098.269,3142.032,3191.997,3230.981,3269.418,3298.18,3332.764,3367.265,3398.227,3430.727,3462.151,3485.125,3505.319,3523.099,3546.982,3570.153,3592.101,3610.013,3623.278,3635.583,3658.771,3673.458,3689.865,3702.915,3717.387,3728.551,3736.01,3749.457,3760.455,3771.074,3781.857,3792.922,3801.704,3806.666,3813.232,3822.891,3832.699,3841.234,3848.114,3853.621,3856.929,3862.189,3867.498,3870.425,3878.993,3883.459,3886.717,3891.348,3896.028,3899.369,3905.638,3908.334,3914.056,3919.647,3924.625,3928.098,3933.523,3938.998,3936.55,3940.916,3944.621,3948.276,3950.145,3959.688,3964.584,3968.802,3971.696,3974.574,3976.658,3979.006,3982.017,3985.341,3989.029,3992.916,3996.092,3999.532,4001.798,4004.99,4008.529,4013.094,4016.203,4020.074,4022.869,4024.754,4027.434,4031.238,4035.058,4039.177,4042.782,4045.925,4048.042,4052.673,4057.734,4061.902,4066.433,4070.634,4073.413,4076.754,4081.517,4087.835,4094.104,4098.983,4102.919,4105.549,4108.692,4115.043,4121.675,4130.805,4136.544,4144.202,4148.485,4155.299,4163.172,4171.806,4181.299,4191.703,4199.592,4204.884,4211.517,4222.135,4236.028,4251.691,4269.404,4289.401,4305.163,4319.651,4342.244,4365.548,4389.695,4413.578,4436.154,4452.628,4468.753,4490.685,4513.79,4542.436,4570.454,4591.889,4610.909,4633.552,4657.203,4683.616,4710.344,4735.169,4759.251,4775.922,4796.249,4820.264,4846.446,4877.987,4905.062,4931.31,4953.638,4976.644,5003.769,5033.308,5064.931,5095.843,5125.052,5149.762,5177.002,5207.6,5249.742,5291.074,5338.095,5380.734,5418.063,5462.339,5523.154,5596.887,5685.736,5780.407,5870.646,5947.041,6044.591,6165.857,6311.453,6476.996,6657.688,6851.281,7005.709,7185.509,7436.891,7702.81,8019.423,8344.256,8696.098,8977.383,9341.067,9754.353,10198.087,10712.114,11237.338,11731.948,12099.998,12567.086,13072.331,13642.972,14268.192,14926.608,15466.023,15883.956,16464.322,17009.476,17637.591,18314.084,18930.159,19492.117,19944.501,20476.92,21043.889,21642.217,22258.126,22833.101,23301.776,23680.974,24065.134,24492.71,24972.368,25441.126,25876.36,26217.831,26488.68,26808.667,27151.18,27535.208,27933.972,28282.158,28594.537,28820.779,29066.174,29277.133,29558.269,29867.985,30197.152,30493.818,30692.704,30938.132,31228.695,31530.257],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.017,0,0,0,0,0,0,0,0,0,0,0,0,0,0.281,0.695,1.538,1.224,1.538,2.167,3.341,3.854,3.969,9.361,5.656,7.707,9.709,12.719,12.868,20.625,24.677,29.721,16.159,38.256,43.846,42.126,57.838,59.376,53.472,58.318,69.581,88.022,99.005,108.449,91.959,79.207,86.815,86.17,102.594,97.731,98.806,86.286,66.984,67.034,79.091,77.206,75.833,79.472,71.384,59.525,50.263,63.445,69.531,65.347,77.636,67.679,52.149,49.155,44.11,62.618,57.772,57.739,50.395,37.313,45.136,55.738,43.763,49.965,38.983,38.437,28.762,34.584,34.501,30.962,32.5,31.425,22.973,20.195,17.78,23.883,23.172,21.948,17.912,13.265,12.305,23.188,14.687,16.407,13.05,14.472,11.164,7.459,13.447,10.999,10.618,10.784,11.065,8.782,4.962,6.566,9.659,9.808,8.534,6.88,5.508,3.308,5.26,5.309,2.927,8.567,4.466,3.258,4.631,4.681,3.341,6.268,2.696,5.723,5.59,4.978,3.473,5.425,5.475,-2.448,4.366,3.705,3.655,1.869,9.543,4.896,4.218,2.894,2.878,2.084,2.349,3.01,3.324,3.688,3.887,3.176,3.44,2.266,3.192,3.539,4.565,3.109,3.87,2.795,1.885,2.679,3.804,3.821,4.118,3.606,3.142,2.117,4.631,5.061,4.168,4.532,4.201,2.779,3.341,4.763,6.318,6.268,4.879,3.936,2.63,3.142,6.351,6.632,9.13,5.739,7.658,4.284,6.814,7.873,8.634,9.494,10.403,7.889,5.293,6.632,10.618,13.893,15.663,17.714,19.996,15.762,14.488,22.593,23.304,24.147,23.883,22.576,16.473,16.126,21.931,23.105,28.646,28.018,21.435,19.02,22.642,23.651,26.413,26.728,24.826,24.081,16.672,20.327,24.015,26.182,31.541,27.075,26.248,22.328,23.006,27.125,29.539,31.623,30.912,29.209,24.71,27.24,30.598,42.142,41.332,47.021,42.638,37.329,44.276,60.815,73.732,88.849,94.671,90.239,76.395,97.549,121.267,145.596,165.542,180.693,193.593,154.428,179.799,251.382,265.92,316.613,324.833,351.842,281.285,363.684,413.286,443.735,514.027,525.224,494.61,368.05,467.088,505.244,570.641,625.221,658.415,539.415,417.933,580.366,545.154,628.115,676.493,616.075,561.958,452.385,532.419,566.969,598.328,615.909,574.974,468.676,379.198,384.16,427.576,479.658,468.759,435.233,341.472,270.849,319.987,342.514,384.027,398.764,348.187,312.379,226.242,245.394,210.96,281.136,309.716,329.166,296.667,198.886,245.428,290.563,301.562],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.017,0.017,0.017,0.017,0.017,0.017,0.017,0.017,0,0,0,0,0,0,0.281,0.976,2.514,3.738,5.276,7.443,10.784,14.638,18.326,26.992,31.11,37.593,45.764,56.316,65.843,82.614,103.322,123.682,134.185,164.734,198.871,228.278,273.248,311.999,340.794,369.391,422.813,472.579,527.738,594.061,628.182,648.013,681.356,709.208,742.221,751.93,751.731,729.568,704.593,692.42,684.696,675.732,648.971,630.712,603.29,576.529,559.808,556.219,546.659,534.8,536.603,524.81,505.575,495.205,489.052,488.225,476.466,468.858,441.617,411.251,404.238,410.821,410.474,397.821,379.032,359.73,338.097,335.368,324.733,299.957,288.694,270.154,254.144,235.902,224.92,214.219,202.89,193.876,179.288,161.128,150.46,153.453,150.36,142.884,132.762,125.286,118.538,112.732,113.874,101.685,97.616,91.993,90.008,84.318,78.116,77.223,73.435,72.244,70.16,66.256,60.699,55.225,55.523,54.266,47.534,46.293,42.225,38.603,37.726,39.099,37.18,38.139,37.908,35.064,36.188,37.908,36.75,37.494,39.628,30.912,32.582,30.564,28.629,25.52,31.59,31.061,29.804,35.146,33.658,32.037,30.731,31.872,25.653,24.445,24.114,24.396,24.958,25.14,25.983,26.512,27.753,27.174,27.157,26.776,25.221,25.634,26.246,26.528,26.081,26.578,25.85,25.172,27.918,30.3,30.664,31.375,31.458,30.631,30.83,33.476,35.163,36.37,37.081,36.485,34.914,35.277,38.287,40.156,42.968,42.439,45.218,45.566,49.75,54.481,56.764,59.626,60.899,63.049,60.684,63.032,66.836,72.856,79.885,88.105,97.698,105.571,114.766,130.727,143.413,153.667,161.887,166.749,163.226,163.59,171.033,171.545,176.887,180.758,178.31,174.754,180.923,188.448,192.93,196.553,192.733,188.796,184.033,185.34,186.713,189.244,194.372,194.719,196.141,194.388,200.722,207.52,213.044,218.485,217.856,219.99,218.452,223.364,230.956,245.973,257.766,273.164,284.89,293.01,312.576,346.151,389.285,435.992,489.331,532.549,566.306,626.526,703.517,788.298,880.108,971.952,1070.874,1135.063,1238.467,1392.3,1536.953,1707.97,1867.261,2038.41,2126.102,2335.358,2568.845,2761.198,3009.305,3217.916,3387.693,3403.901,3589.704,3731.264,3888.619,4070.105,4214.493,4228.684,4152.007,4364.323,4442.389,4565.26,4671.112,4661.966,4565.509,4478.479,4592.965,4579.568,4632.742,4620.536,4519.017,4371.618,4188.858,4120.633,4015.79,3928.479,3798.91,3618.234,3384.732,3186.905,3127.694,3086.048,3042.499,2961.605,2841.033,2718.179,2602.949,2577.494,2468.467,2407.089,2332.778,2263.18,2211.66,2098.167,2117.353,2162.522,2253.124],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.002,0.002,0.002,0.002,0.002,0.002,0.002,0,0,0,0,0,0,0,0.04,0.139,0.359,0.534,0.754,1.063,1.541,2.051,2.519,3.636,4.27,5.151,6.228,7.568,8.856,11.235,13.423,16.861,18.068,22.146,26.593,30.773,36.089,41.046,44.439,50.462,54.937,61.248,69.373,76.603,81.258,84.934,89.005,91.375,93.457,93.275,91.897,91.087,89.341,86.515,85.504,81.877,78.749,75.987,73.858,72.792,70.396,68.161,67.065,65.567,65.304,64.775,63.721,63.563,60.801,59.813,58.731,55.889,53.42,51.3,50.726,52.387,49.694,48.578,45.899,44.191,42.969,41.462,38.428,36.599,34.104,33.024,30.815,29.591,27.191,25.674,24.561,23.054,21.123,19.736,18.609,19.382,18.068,17.102,15.831,15.339,15.039,14.347,12.955,12.428,11.601,11.277,10.791,10.451,10.094,9.111,8.919,8.804,8.482,7.885,7.417,7.18,6.994,6.372,5.389,5.394,5.049,4.728,4.917,4.834,4.553,5.03,4.192,4.371,4.704,4.754,4.581,4.879,4.766,4.031,3.837,3.568,3.379,3.15,3.738,3.655,4.607,4.397,4.279,4.055,4.123,3.19,2.965,2.89,3.031,3.074,3.268,3.256,3.282,3.313,3.438,3.327,3.426,3.334,3.28,3.206,3.244,3.138,3.282,3.244,3.294,3.327,3.606,3.785,3.835,3.894,3.979,3.927,4.102,4.121,4.3,4.6,4.65,4.612,4.591,4.563,4.789,4.834,5.243,5.366,5.897,6.134,6.658,6.876,7.162,7.214,7.88,7.913,8.057,8.031,8.423,9.175,10.056,11.1,12.83,14.325,15.448,17.158,18.503,19.715,20.596,20.965,21.066,21.3,21.206,21.177,21.82,22.411,22.248,22.612,23.543,23.788,24.261,23.987,23.531,23.909,23.573,23.243,23.295,23.261,23.949,24.27,24.58,25.388,25.771,26.215,26.695,26.706,27.255,27.677,28.018,28.623,29.119,30.919,32.306,34.607,36.526,38.329,40.762,45.079,49.592,56.38,63.187,69.987,75.568,83.179,91.815,102.081,113.037,125.326,140.091,151.238,162.988,181.576,198.765,220.347,240.938,263.545,281.668,307.937,331.066,356.468,384.67,413.297,433.693,446.088,460.86,473.997,492.126,508.011,527.039,533.439,540.565,556.748,562.449,570.66,577.985,571.936,575.156,580.078,573.228,576.345,572.089,563.435,557.563,544.237,533.782,512.602,492.689,475.736,454.714,434.751,416.579,401.101,391.933,379.782,366.12,356.121,343.686,339.529,333.157,322.501,303.708,289.009,276.288,273.57,271.326,267.418,267.423,278.795,281.713]},{"iso":"JAM","continent":"North America","population":2961161,"name":"Jamaica","population_density":266.879,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,8,8,10,10,12,13,15,16,16,19,19,21,26,26,26,30,32,36,36,44,47,47,53,58,58,63,63,63,63,65,69,73,73,125,143,143,163,173,223,223,233,257,288,305,350,364,364,396,422,432,463,469,471,473,478,488,490,490,502,505,507,509,509,511,517,520,520,520,529,534,544,550,552,556,564,569,569,575,581,586,588,590,591,591,595,596,598,599,605,605,611,614,615,617,621,621,626,638,652,657,659,665,670,678,684,686,690,696,698,702,707,715,721,728,732,737,745,751,753,753,758,758,759,762,763,765,768,774,790,809,810,816,821,831,837,842,853,855,856,864,878,883,894,905,920,928,958,987,1003,1023,1031,1047,1065,1071,1082,1082,1113,1129,1146,1192,1290,1346,1346,1529,1612,1732,1804,1870,2011,2113,2357,2459,2459,2683,2896,2964,3024,3103,3183,3323,3437,3511,3511,3623,3771,3933,4042,4164,4374,4571,4758,4988,5143,5270,5395,5588,5723,5854,6017,6170,6408,6482,6555,6704,6795,6895,7012,7109,7191,7273,7363,7559,7718,7813,7910,7989,8067,8132,8195,8274,8321,8374,8445,8600,8638,8670,8714,8749,8787,8851,8927,9005,9094,9131,9257,9296,9326,9373,9426,9472,9506,9542,9573,9581,9634,9723,9780,9884,9929,9959,10019,10088,10151,10240,10284,10343,10422,10488,10541,10600,10669,10709,10763,10810,10864,10911,10987,11063,11120,11184,11271,11369,11443,11509,11608,11710,11792,11875,11907,11968],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.338,0.675,2.702,2.702,3.377,3.377,4.052,4.39,5.066,5.403,5.403,6.416,6.416,7.092,8.78,8.78,8.78,10.131,10.807,12.157,12.157,14.859,15.872,15.872,17.898,19.587,19.587,21.275,21.275,21.275,21.275,21.951,23.302,24.652,24.652,42.213,48.292,48.292,55.046,58.423,75.308,75.308,78.685,86.79,97.259,103,118.197,122.925,122.925,133.731,142.512,145.889,156.358,158.384,159.059,159.735,161.423,164.8,165.476,165.476,169.528,170.541,171.217,171.892,171.892,172.567,174.594,175.607,175.607,175.607,178.646,180.335,183.712,185.738,186.413,187.764,190.466,192.154,192.154,194.181,196.207,197.895,198.571,199.246,199.584,199.584,200.935,201.272,201.948,202.286,204.312,204.312,206.338,207.351,207.689,208.364,209.715,209.715,211.404,215.456,220.184,221.872,222.548,224.574,226.263,228.964,230.99,231.666,233.017,235.043,235.718,237.069,238.758,241.459,243.486,245.85,247.2,248.889,251.591,253.617,254.292,254.292,255.981,255.981,256.318,257.331,257.669,258.345,259.358,261.384,266.787,273.204,273.541,275.568,277.256,280.633,282.659,284.348,288.063,288.738,289.076,291.777,296.505,298.194,301.909,305.623,310.689,313.391,323.522,333.315,338.718,345.473,348.174,353.578,359.656,361.682,365.397,365.397,375.866,381.269,387.01,402.545,435.64,454.551,454.551,516.352,544.381,584.906,609.221,631.509,679.126,713.571,795.972,830.418,830.418,906.064,977.995,1000.959,1021.221,1047.9,1074.916,1122.195,1160.693,1185.684,1185.684,1223.507,1273.487,1328.195,1365.005,1406.205,1477.123,1543.651,1606.802,1684.474,1736.819,1779.707,1821.921,1887.098,1932.688,1976.927,2031.973,2083.642,2164.016,2189.006,2213.659,2263.977,2294.708,2328.479,2367.99,2400.748,2428.439,2456.131,2486.525,2552.715,2606.41,2638.492,2671.25,2697.928,2724.269,2746.22,2767.496,2794.174,2810.046,2827.945,2851.922,2904.266,2917.099,2927.906,2942.765,2954.584,2967.417,2989.03,3014.696,3041.037,3071.093,3083.588,3126.139,3139.309,3149.44,3165.313,3183.211,3198.745,3210.227,3222.385,3232.854,3235.555,3253.454,3283.509,3302.759,3337.88,3353.077,3363.208,3383.47,3406.772,3428.047,3458.103,3472.962,3492.887,3519.565,3541.854,3559.752,3579.677,3602.979,3616.487,3634.723,3650.595,3668.831,3684.703,3710.369,3736.035,3755.284,3776.897,3806.277,3839.372,3864.363,3886.651,3920.084,3954.53,3982.222,4010.251,4021.058,4041.658],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.338,2.026,0,0.675,0,0.675,0.338,0.675,0.338,0,1.013,0,0.675,1.689,0,0,1.351,0.675,1.351,0,2.702,1.013,0,2.026,1.689,0,1.689,0,0,0,0.675,1.351,1.351,0,17.561,6.079,0,6.754,3.377,16.885,0,3.377,8.105,10.469,5.741,15.197,4.728,0,10.807,8.78,3.377,10.469,2.026,0.675,0.675,1.689,3.377,0.675,0,4.052,1.013,0.675,0.675,0,0.675,2.026,1.013,0,0,3.039,1.689,3.377,2.026,0.675,1.351,2.702,1.689,0,2.026,2.026,1.689,0.675,0.675,0.338,0,1.351,0.338,0.675,0.338,2.026,0,2.026,1.013,0.338,0.675,1.351,0,1.689,4.052,4.728,1.689,0.675,2.026,1.689,2.702,2.026,0.675,1.351,2.026,0.675,1.351,1.689,2.702,2.026,2.364,1.351,1.689,2.702,2.026,0.675,0,1.689,0,0.338,1.013,0.338,0.675,1.013,2.026,5.403,6.416,0.338,2.026,1.689,3.377,2.026,1.689,3.715,0.675,0.338,2.702,4.728,1.689,3.715,3.715,5.066,2.702,10.131,9.793,5.403,6.754,2.702,5.403,6.079,2.026,3.715,0,10.469,5.403,5.741,15.534,33.095,18.912,0,61.8,28.03,40.525,24.315,22.289,47.616,34.446,82.4,34.446,0,75.646,71.931,22.964,20.262,26.679,27.016,47.279,38.498,24.99,0,37.823,49.98,54.708,36.81,41.2,70.918,66.528,63.151,77.672,52.344,42.889,42.213,65.177,45.59,44.239,55.046,51.669,80.374,24.99,24.652,50.318,30.731,33.771,39.512,32.757,27.692,27.692,30.393,66.19,53.695,32.082,32.757,26.679,26.341,21.951,21.275,26.679,15.872,17.898,23.977,52.344,12.833,10.807,14.859,11.82,12.833,21.613,25.666,26.341,30.056,12.495,42.551,13.171,10.131,15.872,17.898,15.534,11.482,12.157,10.469,2.702,17.898,30.056,19.249,35.121,15.197,10.131,20.262,23.302,21.275,30.056,14.859,19.925,26.679,22.289,17.898,19.925,23.302,13.508,18.236,15.872,18.236,15.872,25.666,25.666,19.249,21.613,29.38,33.095,24.99,22.289,33.433,34.446,27.692,28.03,10.807,20.6],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.338,2.364,2.364,3.039,3.039,3.714,4.052,4.727,4.727,2.701,3.714,3.039,3.714,4.728,4.39,3.715,4.728,5.403,5.741,5.741,7.768,7.092,7.092,9.118,9.456,8.781,9.119,9.119,6.417,5.404,6.079,5.404,5.066,5.066,20.938,27.017,27.017,33.771,36.473,52.007,50.656,54.033,44.577,48.967,54.708,63.151,64.502,47.617,58.424,63.827,59.099,59.099,55.384,40.862,36.809,38.498,31.068,22.963,19.586,13.169,12.156,12.156,12.156,10.467,7.765,9.116,10.129,6.077,5.064,7.428,8.442,11.819,13.17,11.819,12.157,14.859,16.548,13.509,13.846,12.495,12.158,12.158,11.482,9.118,7.429,8.78,7.092,5.741,4.39,5.741,5.066,6.754,7.767,6.754,7.091,7.767,7.429,7.092,11.144,13.846,14.522,14.859,16.21,16.548,19.25,19.587,16.21,12.833,13.17,13.17,12.495,12.495,12.495,12.495,14.184,14.184,13.847,15.874,16.549,15.535,12.833,12.496,10.132,9.119,8.443,6.079,4.728,5.066,7.092,10.806,17.222,17.222,18.235,19.586,22.288,23.301,22.964,21.276,15.535,15.535,16.211,19.25,17.562,19.251,21.277,22.628,24.655,34.448,41.539,42.214,47.279,46.266,47.954,48.967,48.291,41.875,32.082,37.148,35.797,38.836,48.967,75.983,92.869,89.154,150.954,168.515,203.637,222.211,228.966,243.487,259.021,341.421,314.067,286.037,321.158,368.774,369.449,342.095,334.328,278.944,291.777,330.275,279.619,207.688,222.547,252.265,280.294,290.088,284.009,316.429,357.967,421.118,460.967,463.331,451.512,456.915,480.892,455.564,433.275,425.17,399.167,427.197,409.298,391.737,376.878,362.019,351.551,336.017,317.105,264.423,267.125,272.866,288.738,311.702,310.013,303.258,297.18,295.829,290.088,280.97,241.459,203.636,189.452,180.672,206.337,192.829,181.685,175.269,160.41,157.371,161.086,162.775,136.772,153.995,155.683,183.375,184.726,182.024,176.283,168.515,157.708,139.134,138.796,106.714,96.245,104.012,118.196,119.547,139.134,142.849,140.823,150.616,171.216,174.593,174.593,170.203,155.007,166.489,178.647,176.283,172.906,174.933,158.385,161.762,157.709,149.266,142.849,150.617,156.358,152.305,160.41,171.554,188.777,195.531,201.948,209.715,218.495,226.938,233.355,214.782,202.287],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.531,0.579,0.627,0.386,0.386,0.434,0.434,0.434,0.627,0.531,0.482,0.675,0.627,0.82,0.724,0.868,1.013,1.013,1.11,1.254,1.061,1.303,0.917,0.772,0.772,0.579,0.531,0.724,0.482,2.991,3.859,3.859,4.728,5.017,7.237,7.237,5.21,5.5,6.995,6.851,8.539,6.802,6.802,7.864,7.96,6.947,7.622,5.741,5.162,5.259,3.956,3.184,2.798,1.303,1.592,1.64,1.64,1.496,1.013,1.013,1.303,0.868,0.724,0.627,0.965,1.206,1.592,1.592,1.544,1.737,2.123,1.93,1.689,1.496,1.496,1.64,1.544,1.254,1.061,1.061,0.965,0.724,0.579,0.531,0.724,0.675,0.965,0.917,0.917,0.917,1.061,0.772,1.013,1.303,1.833,2.026,2.026,2.123,2.364,2.509,2.219,1.64,1.592,1.785,1.592,1.544,1.399,1.496,1.689,1.833,1.737,1.882,2.074,2.123,1.833,1.544,1.447,1.254,1.061,0.82,0.579,0.579,0.724,0.772,1.544,2.412,2.316,2.557,2.702,3.039,3.039,2.509,2.123,2.171,1.93,2.074,2.267,2.219,2.509,2.509,3.136,3.474,4.535,5.259,5.789,6.223,6.079,6.127,6.609,5.452,4.583,3.811,4.342,4.728,4.776,6.127,10.565,12.736,12.736,20.069,23.302,28.271,29.525,27.981,32.082,37.003,39.946,40.862,35.073,42.406,49.498,45.976,43.95,35.99,34.928,41.682,36.376,29.67,26.389,28.898,32.227,36.183,34.687,35.073,41.634,51.138,54.757,58.712,58.375,59.243,59.388,58.568,55.577,52.875,49.643,49.546,54.901,52.441,46.652,47.327,45.397,42.358,40.621,33.819,34.205,34.639,31.793,36.858,39.705,38.643,38.643,38.498,38.305,37.099,30.683,26.823,24.508,22.385,21.999,25.714,24.411,22.916,21.227,20.648,19.925,19.587,15.776,17.705,20.455,20.118,24.508,24.556,22.916,21.517,20.311,18.236,18.091,13.749,13.363,12.302,12.592,14.328,14.859,18.236,18.67,18.622,21.131,21.903,20.648,22.192,19.297,19.973,22.337,22.626,21.854,21.661,20.697,20.504,20.262,18.719,18.14,17.85,18.67,19.008,19.828,20.311,22.24,24.363,25.666,25.183,26.293,28.464,29.332,29.139,25.955,25.328]},{"iso":"JPN","continent":"Asia","population":126476458,"name":"Japan","population_density":347.778,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,4,4,7,7,11,15,20,20,20,22,23,23,23,24,24,26,27,28,33,43,54,60,67,79,85,95,112,137,149,160,173,192,218,236,245,259,278,298,333,365,420,466,499,527,585,640,696,733,795,826,843,893,928,968,1022,1059,1104,1144,1217,1314,1416,1530,1728,1907,2001,2255,2535,2818,3154,3525,3876,4110,4485,5020,5614,6250,6951,7473,7773,8277,8835,9398,9958,10548,10914,11258,11641,12037,12469,12854,13186,13405,13576,13860,14076,14284,14558,14861,15061,15229,15354,15455,15553,15640,15755,15824,15861,15948,15998,16096,16148,16202,16226,16259,16287,16321,16362,16385,16410,16451,16472,16502,16528,16598,16673,16716,16751,16787,16837,16867,16911,16958,17000,17039,17060,17111,17146,17187,17250,17293,17369,17439,17484,17530,17588,17658,17725,17780,17820,17879,17963,18055,18162,18254,18366,18476,18615,18838,19055,19185,19461,19668,19848,20055,20261,20617,21044,21430,21841,22125,22437,23172,23510,24104,24946,25446,25706,26463,27136,28114,28883,29684,30548,31142,32116,33382,35144,36234,37804,39116,40099,41347,42686,44167,45764,47342,48782,49617,50302,51288,52471,53818,55051,56074,56717,57636,58728,59900,60949,61916,62658,63158,63888,64779,65653,66499,67353,67958,68396,69023,69619,70278,70866,71467,71918,72213,72724,73264,73916,74558,75206,75646,75914,76446,76997,77488,78061,78662,79142,79462,79773,80009,80490,81054,81703,82186,82484,83022,83591,84244,84768,85345,85746,86027,86540,87039,87679,88267,88962,89400,89652,90153,90694,91402,92044,92670,93098,93408,93895,94515,95134,95868,96599,97095,97503,98146,98877,99674,100450,101327,101943,102431,103309,103928,104964,106136,107439,108394,109191,110487,112011,113655,115360,117113,118611,119557,121247,123477,125859,128285,130871,133034,134554,135786,137735,140225,142778,145457,147515,148962,150976,153432,155938,158387,160870,162917,164434,166592,169429,172406,175310,178272,180639,182311,184752,187751,190950],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.016,0.016,0.016,0.016,0.032,0.032,0.055,0.055,0.087,0.119,0.158,0.158,0.158,0.174,0.182,0.182,0.182,0.19,0.19,0.206,0.213,0.221,0.261,0.34,0.427,0.474,0.53,0.625,0.672,0.751,0.886,1.083,1.178,1.265,1.368,1.518,1.724,1.866,1.937,2.048,2.198,2.356,2.633,2.886,3.321,3.684,3.945,4.167,4.625,5.06,5.503,5.796,6.286,6.531,6.665,7.061,7.337,7.654,8.081,8.373,8.729,9.045,9.622,10.389,11.196,12.097,13.663,15.078,15.821,17.829,20.043,22.281,24.937,27.871,30.646,32.496,35.461,39.691,44.388,49.416,54.959,59.086,61.458,65.443,69.855,74.306,78.734,83.399,86.293,89.013,92.041,95.172,98.588,101.632,104.257,105.988,107.34,109.586,111.293,112.938,115.104,117.5,119.081,120.41,121.398,122.197,122.972,123.659,124.569,125.114,125.407,126.095,126.49,127.265,127.676,128.103,128.293,128.554,128.775,129.044,129.368,129.55,129.747,130.072,130.238,130.475,130.68,131.234,131.827,132.167,132.444,132.728,133.124,133.361,133.709,134.08,134.412,134.721,134.887,135.29,135.567,135.891,136.389,136.729,137.33,137.883,138.239,138.603,139.061,139.615,140.145,140.58,140.896,141.362,142.026,142.754,143.6,144.327,145.213,146.083,147.182,148.945,150.66,151.688,153.871,155.507,156.93,158.567,160.196,163.011,166.387,169.439,172.688,174.934,177.401,183.212,185.884,190.581,197.238,201.192,203.247,209.233,214.554,222.286,228.367,234.7,241.531,246.228,253.929,263.938,277.87,286.488,298.901,309.275,317.047,326.915,337.502,349.211,361.838,374.315,385.7,392.302,397.718,405.514,414.868,425.518,435.267,443.355,448.439,455.705,464.339,473.606,481.9,489.546,495.412,499.366,505.137,512.182,519.093,525.782,532.534,537.317,540.78,545.738,550.45,555.661,560.31,565.062,568.628,570.96,575,579.27,584.425,589.501,594.624,598.103,600.222,604.429,608.785,612.667,617.198,621.95,625.745,628.275,630.734,632.6,636.403,640.862,645.994,649.813,652.169,656.423,660.921,666.084,670.227,674.79,677.96,680.182,684.238,688.183,693.244,697.893,703.388,706.851,708.843,712.805,717.082,722.68,727.756,732.706,736.09,738.541,742.391,747.293,752.187,757.991,763.771,767.692,770.918,776.002,781.782,788.083,794.219,801.153,806.024,809.882,816.824,821.718,829.909,839.176,849.478,857.029,863.331,873.578,885.627,898.626,912.107,925.967,937.811,945.291,958.653,976.284,995.118,1014.299,1034.746,1051.848,1063.866,1073.607,1089.017,1108.704,1128.89,1150.072,1166.344,1177.784,1193.708,1213.127,1232.941,1252.304,1271.936,1288.121,1300.115,1317.178,1339.609,1363.147,1386.108,1409.527,1428.242,1441.462,1460.762,1484.474,1509.767],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.016,0,0.024,0,0.032,0.032,0.04,0,0,0.016,0.008,0,0,0.008,0,0.016,0.008,0.008,0.04,0.079,0.087,0.047,0.055,0.095,0.047,0.079,0.134,0.198,0.095,0.087,0.103,0.15,0.206,0.142,0.071,0.111,0.15,0.158,0.277,0.253,0.435,0.364,0.261,0.221,0.459,0.435,0.443,0.293,0.49,0.245,0.134,0.395,0.277,0.316,0.427,0.293,0.356,0.316,0.577,0.767,0.806,0.901,1.566,1.415,0.743,2.008,2.214,2.238,2.657,2.933,2.775,1.85,2.965,4.23,4.697,5.029,5.543,4.127,2.372,3.985,4.412,4.451,4.428,4.665,2.894,2.72,3.028,3.131,3.416,3.044,2.625,1.732,1.352,2.245,1.708,1.645,2.166,2.396,1.581,1.328,0.988,0.799,0.775,0.688,0.909,0.546,0.293,0.688,0.395,0.775,0.411,0.427,0.19,0.261,0.221,0.269,0.324,0.182,0.198,0.324,0.166,0.237,0.206,0.553,0.593,0.34,0.277,0.285,0.395,0.237,0.348,0.372,0.332,0.308,0.166,0.403,0.277,0.324,0.498,0.34,0.601,0.553,0.356,0.364,0.459,0.553,0.53,0.435,0.316,0.466,0.664,0.727,0.846,0.727,0.886,0.87,1.099,1.763,1.716,1.028,2.182,1.637,1.423,1.637,1.629,2.815,3.376,3.052,3.25,2.245,2.467,5.811,2.672,4.697,6.657,3.953,2.056,5.985,5.321,7.733,6.08,6.333,6.831,4.697,7.701,10.01,13.931,8.618,12.413,10.373,7.772,9.867,10.587,11.71,12.627,12.477,11.386,6.602,5.416,7.796,9.354,10.65,9.749,8.088,5.084,7.266,8.634,9.267,8.294,7.646,5.867,3.953,5.772,7.045,6.91,6.689,6.752,4.783,3.463,4.957,4.712,5.21,4.649,4.752,3.566,2.332,4.04,4.27,5.155,5.076,5.123,3.479,2.119,4.206,4.357,3.882,4.53,4.752,3.795,2.53,2.459,1.866,3.803,4.459,5.131,3.819,2.356,4.254,4.499,5.163,4.143,4.562,3.171,2.222,4.056,3.945,5.06,4.649,5.495,3.463,1.992,3.961,4.277,5.598,5.076,4.95,3.384,2.451,3.851,4.902,4.894,5.803,5.78,3.922,3.226,5.084,5.78,6.302,6.136,6.934,4.87,3.858,6.942,4.894,8.191,9.267,10.302,7.551,6.302,10.247,12.05,12.998,13.481,13.86,11.844,7.48,13.362,17.632,18.834,19.181,20.446,17.102,12.018,9.741,15.41,19.687,20.186,21.182,16.272,11.441,15.924,19.419,19.814,19.363,19.632,16.185,11.994,17.062,22.431,23.538,22.961,23.419,18.715,13.22,19.3,23.712,25.293],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.016,0.016,0.04,0.04,0.072,0.104,0.144,0.144,0.128,0.144,0.128,0.128,0.096,0.072,0.032,0.048,0.056,0.048,0.08,0.159,0.246,0.285,0.34,0.419,0.458,0.529,0.623,0.742,0.75,0.79,0.838,0.893,1.052,1.115,1.052,0.965,1.02,1.091,1.265,1.368,1.597,1.819,2.009,2.119,2.428,2.705,2.871,2.911,2.966,2.847,2.72,2.894,2.712,2.593,2.577,2.577,2.443,2.514,2.957,3.329,3.858,4.443,5.582,6.704,7.091,8.783,10.42,11.891,13.742,15.774,16.983,17.418,19.64,21.862,24.345,27.136,30.022,31.216,30.813,32.948,34.395,34.616,34.347,33.983,31.334,29.927,30.583,29.729,28.733,27.326,25.523,22.59,21.048,20.573,19.253,17.767,16.517,15.869,14.825,14.421,14.057,12.611,11.678,10.721,9.464,7.614,6.326,5.686,5.093,5.069,4.705,4.444,3.725,3.44,3.368,2.949,2.878,2.285,2.072,1.969,1.945,1.921,1.906,2.19,2.459,2.617,2.696,2.657,2.886,2.886,3.028,2.847,2.586,2.554,2.443,2.561,2.443,2.53,2.68,2.648,2.917,3.162,3.352,3.313,3.495,3.724,3.756,3.851,3.566,3.479,3.787,4.15,4.537,4.711,5.067,5.502,6.285,7.582,8.634,8.935,10.271,11.181,11.718,12.485,13.015,14.067,15.727,17.751,18.819,19.427,20.471,24.645,25.688,27.57,30.851,31.752,30.558,34.298,37.152,39.074,42.482,44.118,44.292,45.036,50.681,54.706,63.316,64.201,70.534,74.574,75.515,80.685,83.571,85.271,83.967,87.826,86.799,83.028,80.672,78.601,77.368,76.308,73.43,69.041,62.739,63.403,66.621,68.092,67.032,64.028,60.146,56.011,56.699,56.478,54.754,52.176,50.634,47.771,45.367,46.371,45.311,43.476,41.215,39.278,36.092,33.641,34.218,33.531,33.974,33.84,34.314,33.041,31.594,33.468,33.785,33.397,32.772,32.448,31.12,30.171,30.511,28.171,27.617,28.194,28.795,27.862,26.423,28.147,30.187,33.484,33.824,33.927,31.967,30.37,32.07,31.761,32.322,31.808,33.16,32.061,30.882,32.621,32.842,34.495,34.511,34.812,32.701,31.689,33.548,34.489,35.106,35.311,36.015,34.987,34.829,37.462,39.391,40.791,42.033,43.164,42.254,42.19,45.906,45.716,48.127,51.092,55.258,55.875,57.307,63.696,68.804,76.908,82.198,86.791,88.333,88.262,95.322,102.707,109.491,115.674,122.639,125.881,126.055,128.316,130.364,132.419,133.771,135.772,131.598,125.937,129.843,139.521,143.925,143.601,143.047,138.05,133.772,139.393,145.9,150.019,153.166,157.222,156.305,153.34,160.646,167.296,170.158],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.006,0.006,0.01,0.015,0.02,0.018,0.018,0.017,0.018,0.014,0.009,0.005,0.005,0.007,0.006,0.006,0.011,0.023,0.034,0.041,0.046,0.059,0.064,0.07,0.078,0.094,0.101,0.105,0.106,0.121,0.139,0.14,0.122,0.124,0.133,0.141,0.159,0.166,0.208,0.25,0.271,0.281,0.324,0.347,0.374,0.354,0.372,0.369,0.357,0.348,0.325,0.307,0.326,0.298,0.314,0.34,0.366,0.436,0.506,0.574,0.756,0.907,0.968,1.172,1.379,1.584,1.834,2.03,2.224,2.382,2.519,2.807,3.158,3.497,3.87,4.063,4.137,4.283,4.309,4.274,4.188,4.063,3.887,3.936,3.8,3.617,3.469,3.271,2.98,2.814,2.618,2.506,2.303,2.05,1.925,1.892,1.87,1.867,1.687,1.558,1.433,1.222,1.01,0.862,0.714,0.671,0.613,0.613,0.574,0.505,0.454,0.45,0.383,0.365,0.3,0.268,0.235,0.254,0.241,0.243,0.234,0.267,0.325,0.346,0.339,0.356,0.378,0.383,0.354,0.322,0.321,0.325,0.308,0.309,0.315,0.312,0.33,0.331,0.373,0.428,0.421,0.434,0.453,0.461,0.488,0.464,0.43,0.446,0.489,0.527,0.569,0.598,0.662,0.741,0.831,0.988,1.13,1.155,1.363,1.471,1.55,1.627,1.607,1.764,2.1,2.224,2.454,2.572,2.691,3.288,3.268,3.456,3.971,4.072,4.045,4.547,4.477,5.2,5.398,5.352,5.763,6.14,6.385,7.055,7.94,8.303,9.172,9.678,10.117,10.427,10.509,10.192,10.764,10.773,10.918,10.751,10.115,9.716,9.379,9.097,8.707,8.236,8.02,8.284,8.404,8.391,8.055,7.754,7.437,7.275,7.062,6.835,6.498,6.269,6.141,5.986,5.916,5.8,5.467,5.224,4.933,4.647,4.473,4.311,4.18,4.117,4.109,4.17,4.223,4.211,4.18,4.204,4.216,4.035,3.957,3.904,3.949,4.008,3.758,3.402,3.391,3.381,3.435,3.438,3.413,3.67,4.046,4.24,4.195,4.114,4.021,4.002,3.974,3.895,3.88,3.952,4.085,4.127,4.094,4.081,4.128,4.205,4.266,4.188,4.177,4.242,4.227,4.316,4.215,4.319,4.438,4.515,4.625,4.802,4.927,5.128,5.175,5.34,5.476,5.566,5.832,5.705,5.975,6.422,6.904,7.287,7.636,8.108,9.13,9.817,10.419,10.927,11.54,11.709,12.154,12.951,13.785,14.599,15.54,16.291,16.939,16.422,16.105,16.227,16.37,16.475,16.357,16.274,17.157,17.73,17.748,17.631,17.409,17.397,17.476,17.639,18.069,18.601,19.115,19.656,20.017,20.192,20.512,20.695,20.946]},{"iso":"JOR","continent":"Asia","population":10203140,"name":"Jordan","population_density":109.285,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,8,17,34,52,69,85,85,112,127,154,172,212,235,246,259,268,274,278,299,310,323,345,349,353,358,372,372,381,389,391,397,401,402,407,413,417,425,428,435,437,441,444,447,449,449,451,453,459,460,461,465,471,473,494,508,522,540,562,576,582,586,596,607,613,629,649,672,684,700,704,708,711,718,720,728,730,734,739,746,755,757,765,784,795,808,831,845,863,890,915,953,961,979,981,987,1001,1008,1015,1033,1042,1047,1071,1086,1104,1111,1121,1128,1132,1133,1136,1147,1150,1164,1167,1169,1169,1169,1173,1176,1179,1183,1198,1201,1206,1209,1214,1218,1223,1113,1120,1131,1146,1154,1168,1176,1182,1187,1191,1193,1208,1213,1218,1224,1231,1232,1237,1246,1252,1268,1283,1303,1320,1329,1339,1378,1398,1438,1482,1498,1532,1576,1609,1639,1716,1756,1801,1869,1893,1966,2034,2097,2161,2233,2301,2353,2411,2478,2581,2659,2739,2945,3062,3314,3528,3677,3852,4131,4344,4540,4779,5045,5679,6042,6591,7211,8061,8492,9226,10049,11825,13101,13650,14749,15640,17464,19001,20200,21517,22763,23998,24926,26073,28127,30550,33009,34548,36053,37573,38937,40972,43620,46441,48930,50750,53087,55055,58855,61942,65385,69306,72607,75866,81743,86576,91234,95864,101248,104802,109321,114986,120982,126401,132086,136555,141305,143678,149539,155993,163926,169395,174335,178161,183429,188410,192996,198021,203021,207601,210709,214307,219430,223617,227208,231237,234353,237513,240089,244069,247131,250219,253121,255459,257275,259614,262477,265024,267585,269806],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.098,0.098,0.098,0.098,0.098,0.098,0.098,0.098,0.098,0.098,0.098,0.098,0.784,1.666,3.332,5.096,6.763,8.331,8.331,10.977,12.447,15.093,16.858,20.778,23.032,24.11,25.384,26.266,26.854,27.247,29.305,30.383,31.657,33.813,34.205,34.597,35.087,36.459,36.459,37.341,38.126,38.322,38.91,39.302,39.4,39.89,40.478,40.87,41.654,41.948,42.634,42.83,43.222,43.516,43.81,44.006,44.006,44.202,44.398,44.986,45.084,45.182,45.574,46.162,46.358,48.416,49.789,51.161,52.925,55.081,56.453,57.041,57.433,58.413,59.491,60.08,61.648,63.608,65.862,67.038,68.606,68.998,69.39,69.684,70.37,70.567,71.351,71.547,71.939,72.429,73.115,73.997,74.193,74.977,76.839,77.917,79.191,81.446,82.818,84.582,87.228,89.678,93.403,94.187,95.951,96.147,96.735,98.107,98.793,99.479,101.243,102.125,102.615,104.968,106.438,108.202,108.888,109.868,110.554,110.946,111.044,111.338,112.416,112.71,114.083,114.377,114.573,114.573,114.573,114.965,115.259,115.553,115.945,117.415,117.709,118.199,118.493,118.983,119.375,119.865,109.084,109.77,110.848,112.318,113.102,114.475,115.259,115.847,116.337,116.729,116.925,118.395,118.885,119.375,119.963,120.649,120.747,121.237,122.119,122.707,124.275,125.746,127.706,129.372,130.254,131.234,135.056,137.017,140.937,145.249,146.818,150.15,154.462,157.697,160.637,168.184,172.104,176.514,183.179,185.531,192.686,199.35,205.525,211.798,218.854,225.519,230.615,236.3,242.866,252.961,260.606,268.447,288.637,300.104,324.802,345.776,360.379,377.531,404.875,425.751,444.961,468.385,494.456,556.593,592.171,645.978,706.743,790.051,832.293,904.231,984.893,1158.957,1284.016,1337.823,1445.535,1532.861,1711.63,1862.27,1979.783,2108.861,2230.98,2352.021,2442.973,2555.39,2756.7,2994.176,3235.181,3386.016,3533.52,3682.494,3816.178,4015.627,4275.155,4551.638,4795.583,4973.959,5203.006,5395.888,5768.322,6070.876,6408.321,6792.615,7116.143,7435.554,8011.553,8485.231,8941.757,9395.539,9923.22,10271.544,10714.447,11269.668,11857.33,12388.441,12945.623,13383.625,13849.168,14081.743,14656.174,15288.725,16066.231,16602.242,17086.407,17461.389,17977.701,18465.884,18915.354,19407.849,19897.894,20346.776,20651.388,21004.024,21506.125,21916.488,22268.439,22663.317,22968.714,23278.422,23530.893,23920.969,24221.073,24523.725,24808.147,25037.292,25215.277,25444.52,25725.12,25974.749,26225.75,26443.428],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.686,0.882,1.666,1.764,1.666,1.568,0,2.646,1.47,2.646,1.764,3.92,2.254,1.078,1.274,0.882,0.588,0.392,2.058,1.078,1.274,2.156,0.392,0.392,0.49,1.372,0,0.882,0.784,0.196,0.588,0.392,0.098,0.49,0.588,0.392,0.784,0.294,0.686,0.196,0.392,0.294,0.294,0.196,0,0.196,0.196,0.588,0.098,0.098,0.392,0.588,0.196,2.058,1.372,1.372,1.764,2.156,1.372,0.588,0.392,0.98,1.078,0.588,1.568,1.96,2.254,1.176,1.568,0.392,0.392,0.294,0.686,0.196,0.784,0.196,0.392,0.49,0.686,0.882,0.196,0.784,1.862,1.078,1.274,2.254,1.372,1.764,2.646,2.45,3.724,0.784,1.764,0.196,0.588,1.372,0.686,0.686,1.764,0.882,0.49,2.352,1.47,1.764,0.686,0.98,0.686,0.392,0.098,0.294,1.078,0.294,1.372,0.294,0.196,0,0,0.392,0.294,0.294,0.392,1.47,0.294,0.49,0.294,0.49,0.392,0.49,-10.781,0.686,1.078,1.47,0.784,1.372,0.784,0.588,0.49,0.392,0.196,1.47,0.49,0.49,0.588,0.686,0.098,0.49,0.882,0.588,1.568,1.47,1.96,1.666,0.882,0.98,3.822,1.96,3.92,4.312,1.568,3.332,4.312,3.234,2.94,7.547,3.92,4.41,6.665,2.352,7.155,6.665,6.175,6.273,7.057,6.665,5.096,5.685,6.567,10.095,7.645,7.841,20.19,11.467,24.698,20.974,14.603,17.152,27.345,20.876,19.21,23.424,26.07,62.138,35.577,53.807,60.766,83.308,42.242,71.939,80.661,174.064,125.06,53.807,107.712,87.326,178.768,150.64,117.513,129.078,122.119,121.041,90.952,112.416,201.311,237.476,241.004,150.836,147.504,148.974,133.684,199.448,259.528,276.484,243.945,178.376,229.047,192.882,372.434,302.554,337.445,384.293,323.528,319.411,575.999,473.678,456.526,453.782,527.681,348.324,442.903,555.221,587.662,531.111,557.181,438.002,465.543,232.575,574.431,632.55,777.506,536.011,484.165,374.983,516.312,488.183,449.469,492.495,490.045,448.881,304.612,352.637,502.1,410.364,351.95,394.878,305.396,309.709,252.471,390.076,300.104,302.652,284.422,229.145,177.984,229.243,280.6,249.629,251.001,217.678],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.686,1.568,3.234,4.998,6.664,8.232,8.232,10.878,11.662,13.426,13.524,15.68,16.268,15.778,17.052,15.288,14.406,12.152,12.446,9.604,8.624,9.702,8.82,8.33,8.232,9.212,7.154,6.958,6.468,4.508,4.704,4.704,4.312,3.43,4.018,3.528,3.528,3.626,3.724,3.528,3.822,3.626,3.332,3.136,2.352,2.254,1.764,2.156,1.862,1.666,1.764,2.156,2.352,4.214,5.39,6.174,7.84,9.898,10.878,10.878,11.074,9.996,9.702,8.918,8.722,8.526,9.408,9.996,11.172,10.584,9.898,9.604,8.722,6.958,5.488,4.508,3.332,3.43,3.724,4.312,3.822,4.41,5.488,6.37,7.252,9.016,9.702,10.584,13.034,14.7,16.562,16.268,16.758,14.7,13.916,13.524,11.564,9.8,7.84,7.938,6.664,8.82,9.702,10.094,10.094,10.388,9.31,8.82,8.428,6.37,5.978,4.508,5.194,4.508,4.018,3.626,3.528,3.626,2.842,2.842,1.862,3.038,3.136,3.626,3.92,4.018,4.116,4.312,-6.861,-7.645,-6.861,-5.881,-5.391,-4.509,-4.117,-4.019,7.252,6.958,6.076,6.076,5.782,4.9,4.704,4.802,4.41,4.508,5.194,4.312,5.39,6.37,7.742,8.722,9.506,9.996,12.936,14.308,16.66,19.502,19.11,20.776,24.206,26.46,25.578,31.165,31.165,31.263,36.36,35.38,38.223,41.654,44.889,43.615,46.752,49.007,47.438,50.771,50.183,53.613,55.083,56.651,69.784,74.586,94.188,109.477,117.513,124.57,144.27,157.305,156.325,168.282,169.654,210.818,231.792,268.447,301.868,364.3,387.332,435.847,490.438,602.364,691.847,691.847,738.793,742.811,879.337,958.038,994.89,949.904,946.963,1014.197,997.437,1022.527,1045.07,1131.906,1255.397,1277.155,1302.54,1330.473,1373.205,1460.237,1518.454,1557.462,1560.403,1587.943,1669.486,1713.394,1952.144,2055.25,2133.167,2240.976,2320.559,2461.594,2808.546,3089.342,3173.434,3324.662,3514.898,3478.929,3598.304,3834.114,3845.777,3903.21,4003.865,3988.085,3925.947,3810.198,3941.726,4019.055,4208.899,4213.799,4140.783,4077.764,4128.533,4384.141,4259.179,4119.124,3831.663,3744.533,3564.98,3542.634,3528.422,3450.603,3353.084,3255.467,3070.818,2931.646,2879.505,2916.944,2714.948,2607.236,2539.708,2373.975,2246.563,2166.097,2194.226,2053.779,2004.676,1919.702],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.098,0.224,0.462,0.714,0.952,1.176,1.176,1.456,1.54,1.68,1.68,2.002,2.1,2.254,2.058,1.974,1.68,1.484,1.218,1.05,1.078,1.204,1.134,1.106,1.12,1.022,0.868,0.812,0.616,0.588,0.616,0.602,0.42,0.49,0.448,0.392,0.476,0.434,0.476,0.49,0.476,0.434,0.42,0.336,0.294,0.224,0.224,0.252,0.224,0.196,0.224,0.308,0.308,0.574,0.686,0.868,1.106,1.358,1.47,1.526,1.288,1.232,1.19,1.022,0.938,1.022,1.26,1.372,1.456,1.358,1.33,1.148,0.966,0.672,0.616,0.42,0.42,0.434,0.49,0.518,0.518,0.518,0.756,0.854,0.966,1.19,1.26,1.484,1.75,1.834,2.212,2.142,2.072,1.904,1.736,1.554,1.302,0.868,1.008,0.882,0.924,1.176,1.19,1.344,1.344,1.232,1.204,1.19,0.868,0.7,0.602,0.546,0.602,0.546,0.518,0.504,0.462,0.364,0.364,0.21,0.224,0.406,0.448,0.518,0.504,0.532,0.546,0.56,-1.19,-1.134,-1.05,-0.882,-0.84,-0.7,-0.658,0.966,0.938,0.84,0.658,0.756,0.63,0.588,0.588,0.616,0.574,0.616,0.532,0.546,0.7,0.826,1.008,1.232,1.288,1.302,1.764,1.82,2.17,2.506,2.492,2.842,3.318,3.234,3.374,3.892,3.836,4.242,4.718,4.438,4.998,5.531,5.334,5.671,6.049,6.049,6.441,6.231,6.217,6.777,6.973,7.085,9.017,9.927,12.643,14.701,15.345,16.704,19.49,19.588,20.694,20.512,21.24,28.031,30.663,34.443,40.142,49.299,51.987,58.539,61.186,80.969,91.148,90.154,93.641,100.081,115.343,125.34,117.261,117.835,127.594,129.498,130.016,120.537,127.776,144.913,160.903,165.005,168.786,177.074,180.113,179.847,182.997,188.065,201.367,205.777,217.216,225.673,250.385,256.532,265.24,285.29,306.026,318.935,373.666,388.13,410.126,426.745,447.229,450.772,468.413,465.445,481.728,492.383,507.155,494.344,511.089,481.042,483.787,490.199,525.398,522.374,528.969,516.032,556.565,544.244,518.09,477.374,470.807,465.767,455.714,432.332,434.32,428.734,408.656,395.06,374.563,375.291,360.981,344.978,329.226,322.184,306.404,295.511,276.694,273.375,257.736,250.525,243.146,233.612]},{"iso":"KAZ","continent":"Asia","population":18776707,"name":"Kazakhstan","population_density":6.681,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,6,9,10,33,35,44,49,53,61,62,72,81,111,150,228,284,302,343,380,435,464,531,584,662,697,727,781,812,865,951,1091,1232,1295,1402,1546,1615,1676,1852,1995,2135,2289,2482,2601,2717,2835,3027,3138,3402,3597,3857,3920,4049,4205,4422,4578,4834,4975,5090,5207,5279,5417,5571,5689,5850,6157,6751,6751,6969,7234,7919,7919,8531,8969,8969,9304,9576,9932,10382,10858,11308,11571,12067,12067,12312,12511,12694,12859,13074,13319,13872,13872,14238,14496,15192,15542,15877,15877,16779,17225,17732,18231,18765,19285,19750,20319,20319,21327,21819,22308,41065,42574,45719,47171,48574,49683,51059,51059,54747,56455,58253,58253,61755,63514,65188,66895,68703,68703,71838,73468,75153,75153,78486,80226,81720,83122,84648,86192,87664,89078,90367,90367,96774,98641,100075,102936,105526,107930,109939,111822,112722,113501,115615,117104,118514,119781,121161,121639,121973,123325,124356,125335,126243,127203,127462,127462,127462,127664,128618,130040,130673,130673,131596,131695,132354,132924,133028,133924,134123,134203,134726,135159,135589,135964,136384,136513,136586,137058,137393,137713,138013,138348,138455,138542,138982,139289,139581,139882,140175,140265,140333,140707,140958,141256,141484,141748,141844,141904,142239,142597,142945,143280,143632,143740,143814,144218,144328,144761,145019,145320,145473,145603,145966,146288,146653,146982,147297,147463,147615,148037,148479,149066,149699,150380,150863,151321,152022,152725,153547,154321,155220,155876,156451,157261,158036,158853,159756,160612,161850,162555,163585,164578,165558,166468,167341,167385,168803,169827,170808,171795,172805,173763,174563,175565,176342,177386,178378,179344,180089,180777,181721,182657,183630,184557,185513,186277,186960,187890,188837,189551],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.213,0.32,0.479,0.533,1.757,1.864,2.343,2.61,2.823,3.249,3.302,3.835,4.314,5.912,7.989,12.143,15.125,16.084,18.267,20.238,23.167,24.711,28.28,31.102,35.256,37.12,38.718,41.594,43.245,46.068,50.648,58.104,65.613,68.968,74.667,82.336,86.011,89.26,98.633,106.249,113.705,121.906,132.185,138.523,144.701,150.985,161.21,167.122,181.182,191.567,205.414,208.769,215.64,223.948,235.505,243.813,257.447,264.956,271.081,277.312,281.146,288.496,296.697,302.982,311.556,327.906,359.541,359.541,371.151,385.265,421.746,421.746,454.34,477.666,477.666,495.508,509.994,528.953,552.919,578.27,602.236,616.242,642.658,642.658,655.706,666.304,676.05,684.838,696.288,709.336,738.788,738.788,758.28,772.02,809.088,827.728,845.569,845.569,893.607,917.36,944.362,970.937,999.377,1027.07,1051.835,1082.139,1082.139,1135.822,1162.025,1188.068,2187.018,2267.384,2434.878,2512.208,2586.929,2645.991,2719.273,2719.273,2915.687,3006.651,3102.408,3102.408,3288.915,3382.595,3471.748,3562.659,3658.948,3658.948,3825.91,3912.72,4002.459,4002.459,4179.966,4272.634,4352.201,4426.868,4508.139,4590.368,4668.763,4744.069,4812.718,4812.718,5153.939,5253.371,5329.742,5482.111,5620.048,5748.079,5855.074,5955.357,6003.289,6044.777,6157.363,6236.663,6311.756,6379.234,6452.729,6478.186,6495.974,6567.978,6622.887,6675.026,6723.383,6774.511,6788.304,6788.304,6788.304,6799.062,6849.87,6925.602,6959.314,6959.314,7008.471,7013.743,7048.84,7079.197,7084.735,7132.454,7143.052,7147.313,7175.167,7198.227,7221.128,7241.099,7263.467,7270.338,7274.225,7299.363,7317.204,7334.247,7350.224,7368.065,7373.764,7378.397,7401.83,7418.18,7433.732,7449.762,7465.367,7470.16,7473.781,7493.7,7507.067,7522.938,7535.081,7549.141,7554.253,7557.449,7575.29,7594.356,7612.89,7630.731,7649.478,7655.229,7659.17,7680.687,7686.545,7709.605,7723.346,7739.376,7747.525,7754.448,7773.781,7790.929,7810.368,7827.89,7844.666,7853.507,7861.602,7884.077,7907.617,7938.879,7972.591,8008.859,8034.582,8058.974,8096.308,8133.748,8177.525,8218.747,8266.625,8301.562,8332.185,8375.324,8416.598,8460.11,8508.201,8553.79,8619.722,8657.269,8712.124,8765.009,8817.201,8865.665,8912.159,8914.502,8990.022,9044.557,9096.803,9149.368,9203.158,9254.179,9296.785,9350.149,9391.53,9447.13,9499.962,9551.409,9591.085,9627.727,9678.002,9727.851,9779.67,9829.04,9879.954,9920.643,9957.017,10006.547,10056.982,10095.008],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.107,0.16,0.053,1.225,0.107,0.479,0.266,0.213,0.426,0.053,0.533,0.479,1.598,2.077,4.154,2.982,0.959,2.184,1.971,2.929,1.544,3.568,2.823,4.154,1.864,1.598,2.876,1.651,2.823,4.58,7.456,7.509,3.355,5.699,7.669,3.675,3.249,9.373,7.616,7.456,8.202,10.279,6.338,6.178,6.284,10.225,5.912,14.06,10.385,13.847,3.355,6.87,8.308,11.557,8.308,13.634,7.509,6.125,6.231,3.835,7.35,8.202,6.284,8.574,16.35,31.635,0,11.61,14.113,36.481,0,32.594,23.327,0,17.841,14.486,18.96,23.966,25.351,23.966,14.007,26.416,0,13.048,10.598,9.746,8.787,11.45,13.048,29.451,0,19.492,13.74,37.067,18.64,17.841,0,48.038,23.753,27.002,26.575,28.439,27.694,24.765,30.304,0,53.684,26.203,26.043,998.95,80.366,167.495,77.33,74.72,59.063,73.282,0,196.414,90.964,95.757,0,186.508,93.68,89.153,90.911,96.29,0,166.962,86.81,89.739,0,177.507,92.668,79.567,74.667,81.271,82.23,78.395,75.306,68.649,0,341.221,99.432,76.371,152.37,137.937,128.031,106.994,100.284,47.932,41.488,112.586,79.3,75.093,67.477,73.495,25.457,17.788,72.004,54.908,52.139,48.358,51.127,13.794,0,0,10.758,50.808,75.732,33.712,0,49.157,5.272,35.097,30.357,5.539,47.719,10.598,4.261,27.854,23.06,22.901,19.972,22.368,6.87,3.888,25.138,17.841,17.042,15.977,17.841,5.699,4.633,23.433,16.35,15.551,16.03,15.604,4.793,3.622,19.918,13.368,15.871,12.143,14.06,5.113,3.195,17.841,19.066,18.534,17.841,18.747,5.752,3.941,21.516,5.858,23.06,13.74,16.03,8.148,6.923,19.332,17.149,19.439,17.522,16.776,8.841,8.095,22.475,23.54,31.262,33.712,36.268,25.723,24.392,37.333,37.44,43.778,41.221,47.878,34.937,30.623,43.139,41.275,43.511,48.091,45.588,65.933,37.547,54.855,52.885,52.192,48.464,46.494,2.343,75.519,54.536,52.246,52.565,53.79,51.021,42.606,53.364,41.381,55.601,52.831,51.447,39.677,36.641,50.275,49.849,51.82,49.37,50.914,40.689,36.375,49.529,50.435,38.026],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.107,0.267,0.32,1.545,1.652,2.131,2.397,2.61,2.929,2.822,3.302,2.556,4.047,5.645,9.533,12.302,12.835,14.966,16.404,18.854,18.8,20.291,18.96,20.132,21.037,20.451,21.356,20.078,21.357,22.369,27.002,30.357,31.848,35.949,40.742,42.766,43.192,47.985,48.145,48.092,52.939,57.519,56.188,58.691,61.726,62.578,60.874,67.478,69.661,73.229,70.246,70.938,72.962,74.294,76.69,76.264,73.388,65.666,68.542,65.507,64.549,61.194,59.17,54.11,62.951,88.461,82.23,90.005,96.768,125.047,118.763,142.783,149.76,118.125,135.966,138.842,143.689,131.174,156.525,147.897,138.577,164.993,147.152,145.714,137.352,123.132,106.568,94.052,93.093,96.128,96.128,102.572,105.714,133.035,142.888,149.279,136.231,154.818,178.571,186.081,198.916,190.288,199.342,206.266,236.57,188.532,218.463,217.664,217.132,1187.643,1240.315,1383.045,1430.071,1504.791,1510.17,1557.249,1531.206,728.67,739.268,667.53,590.2,701.988,736.605,752.476,843.387,743.263,652.299,723.504,810.314,713.545,619.865,708.219,709.976,693.253,767.92,682.229,677.649,666.305,741.611,632.753,540.085,801.739,826.504,821.604,891.744,951.286,1004.011,1042.356,1142.64,849.351,791.407,827.622,754.552,691.708,631.154,597.655,522.828,492.684,523.2,465.522,438.361,411.626,395.276,335.575,310.118,292.33,231.084,226.984,250.577,235.931,184.804,220.167,225.439,260.536,280.135,234.866,206.853,183.739,188,166.697,184.485,172.289,161.904,178.733,137.884,131.174,152.051,142.038,136.02,129.096,126.965,110.296,108.059,127.604,118.816,116.526,115.514,115.141,102.093,100.016,115.301,105.236,104.757,101.349,99.379,88.888,87.29,101.509,100.657,105.823,107.793,114.397,106.089,104.917,123.238,111.255,115.249,110.455,108.644,98.045,99.216,114.607,110.24,123.821,118.283,121.319,114.13,114.077,129.629,133.837,147.95,162.223,180.969,189.916,205.467,234.705,249.67,269.908,279.867,294.033,292.702,297.602,316.349,320.291,326.362,330.675,335.042,353.097,355.707,379.939,389.685,400.602,405.555,403.958,360.713,370.299,387.288,384.679,384.359,385.957,388.514,384.626,435.647,401.509,402.574,403.159,402.041,387.928,373.548,381.217,377.702,388.141,381.91,379.993,369.235,365.933,378.821,378.981,367.158],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.304,0.342,0.358,0.396,0.396,0.297,0.35,0.51,0.768,1.331,1.697,1.826,2.062,2.275,2.465,2.389,2.305,2.282,2.739,2.693,2.64,2.632,2.648,2.541,2.792,3.264,4.07,4.321,4.725,5.584,5.706,5.516,5.79,5.805,6.391,6.748,7.121,7.502,7.92,7.479,7.852,7.631,8.468,8.483,9.556,9.153,9.236,8.962,9.769,8.947,9.411,8.506,8.902,8.81,8.171,7.57,7.555,6.505,6.657,8.118,11.747,11.199,11.808,12.652,16.966,15.741,18.062,16.875,16.875,17.765,17.818,15.315,18.739,17.704,17.796,19.797,21.021,18.952,18.108,16.198,13.969,11.8,11.435,9.525,13.733,11.869,13.139,13.71,17.75,18.777,19.462,15.254,22.117,22.726,24.62,23.121,24.521,25.929,29.467,26.933,23.54,27.352,27.298,26.956,165.707,173.65,193.249,204.296,207.301,211.995,218.744,76.036,92.615,81.682,84.314,73.64,91.846,94.76,107.496,92.425,93.185,79.506,103.358,89.115,88.552,75.816,88.187,87.669,99.036,85.851,85.06,83.987,95.186,80.586,77.155,65.788,103.867,106.462,105.625,116.193,125.14,133.623,148.908,114.488,107.131,102.148,96.465,88.088,80.525,74.88,71.053,67.842,64.457,58.659,55.175,51.896,49.164,45.969,44.303,41.761,31.475,25.168,24.978,28.888,26.4,24.43,31.452,32.206,35.683,32.761,22.733,24.734,26.248,19.835,23.06,21.341,20.276,22.338,18.716,18.184,18.13,17.742,16.997,16.16,15.589,14.943,14.775,14.882,14.638,14.425,14.212,14.22,13.9,13.771,13.626,13.124,12.698,12.744,12.188,11.968,12.013,11.952,11.656,12.47,12.85,13.664,14.334,14.425,14.532,15.057,13.17,13.817,13.231,12.843,13.185,13.611,13.299,14.912,14.395,14.935,15.041,15.14,15.308,15.757,16.67,18.359,20.672,23.456,25.868,28.196,30.319,32.304,34.092,35.165,36.824,38.14,39.03,39.859,40.407,40.369,41.351,41.023,45.451,46.441,48.114,49.773,51.013,51.066,51.196,42.111,47.536,47.49,47.399,47.452,48.213,48.86,54.612,51.447,49.567,50.047,50.085,49.75,48.13,47.277,46.836,48.046,47.506,47.011,46.935,47.08,47.042,46.935,47.019,45.048]},{"iso":"KEN","continent":"Africa","population":53771300,"name":"Kenya","population_density":87.324,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,3,3,3,3,7,7,7,15,16,25,28,31,31,38,42,50,59,81,110,122,126,142,158,172,179,184,189,191,197,208,216,225,234,246,262,270,281,296,303,320,336,343,355,363,374,384,396,411,435,465,490,535,582,607,621,649,672,700,715,737,758,781,830,887,912,963,1029,1109,1161,1192,1214,1286,1348,1471,1618,1745,1888,1962,2021,2093,2216,2340,2474,2600,2767,2872,2989,3094,3215,3305,3457,3594,3727,3860,4044,4257,4374,4478,4738,4797,4952,5206,5384,5533,5811,6070,6190,6366,6673,6941,7188,7577,7886,8067,8250,8528,8975,9448,9726,10105,10294,10791,11252,11673,12062,12750,13353,13771,14168,14805,15601,16268,16643,17603,17975,18581,19125,19913,20636,21363,22053,22597,23202,23873,24411,25138,25837,26436,26928,27425,28104,28754,29334,29849,30120,30365,30636,31015,31441,31763,32118,32364,32557,32803,33016,33389,33630,33794,34057,34201,34315,34493,34705,34884,35020,35103,35205,35356,35460,35603,35793,35969,36157,36205,36301,36301,36576,36724,36829,36981,37079,37218,37348,37489,37707,37871,38115,38168,38378,38529,38713,38923,39184,39427,39449,39586,39907,40178,40620,41158,41546,41619,41937,42541,43143,43580,44196,44881,45076,45647,46144,47212,47843,48790,49721,49997,50833,51851,52612,53797,55192,55877,56601,57093,58587,59595,60704,61769,62488,63244,64588,65804,66723,68193,69273,70245,70804,71729,72686,74145,75193,76404,77372,77785,78512,79322,80102,81656,82605,83316,83618,84169,85130,86383,87249,87984,88380,88579,89100,89661,90305,90978,91526,91892,92055,92459,92853,93405],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.019,0.019,0.056,0.056,0.056,0.056,0.13,0.13,0.13,0.279,0.298,0.465,0.521,0.577,0.577,0.707,0.781,0.93,1.097,1.506,2.046,2.269,2.343,2.641,2.938,3.199,3.329,3.422,3.515,3.552,3.664,3.868,4.017,4.184,4.352,4.575,4.872,5.021,5.226,5.505,5.635,5.951,6.249,6.379,6.602,6.751,6.955,7.141,7.365,7.643,8.09,8.648,9.113,9.95,10.824,11.289,11.549,12.07,12.497,13.018,13.297,13.706,14.097,14.524,15.436,16.496,16.961,17.909,19.137,20.624,21.591,22.168,22.577,23.916,25.069,27.357,30.09,32.452,35.112,36.488,37.585,38.924,41.212,43.518,46.01,48.353,51.459,53.411,55.587,57.54,59.79,61.464,64.291,66.839,69.312,71.786,75.207,79.169,81.345,83.279,88.114,89.211,92.094,96.817,100.128,102.899,108.069,112.885,115.117,118.39,124.1,129.084,133.677,140.912,146.658,150.024,153.428,158.598,166.911,175.707,180.877,187.926,191.44,200.683,209.257,217.086,224.32,237.115,248.329,256.103,263.486,275.333,290.136,302.541,309.515,327.368,334.286,345.556,355.673,370.328,383.773,397.294,410.126,420.243,431.494,443.973,453.978,467.498,480.498,491.638,500.788,510.03,522.658,534.746,545.533,555.11,560.15,564.706,569.746,576.795,584.717,590.705,597.307,601.882,605.472,610.047,614.008,620.945,625.427,628.477,633.368,636.046,638.166,641.476,645.419,648.748,651.277,652.82,654.717,657.525,659.46,662.119,665.652,668.926,672.422,673.315,675.1,675.1,680.214,682.967,684.919,687.746,689.569,692.154,694.571,697.193,701.248,704.298,708.835,709.821,713.726,716.535,719.957,723.862,728.716,733.235,733.644,736.192,742.162,747.202,755.422,765.427,772.643,774,779.914,791.147,802.343,810.47,821.925,834.665,838.291,848.91,858.153,878.015,889.75,907.361,924.675,929.808,945.356,964.288,978.44,1000.478,1026.421,1039.16,1052.625,1061.775,1089.559,1108.305,1128.929,1148.735,1162.107,1176.166,1201.161,1223.776,1240.866,1268.204,1288.289,1306.366,1316.762,1333.964,1351.762,1378.895,1398.385,1420.907,1438.909,1446.59,1460.11,1475.174,1489.679,1518.58,1536.228,1549.451,1555.067,1565.315,1583.187,1606.489,1622.594,1636.263,1643.628,1647.329,1657.018,1667.451,1679.428,1691.943,1702.135,1708.941,1711.973,1719.486,1726.813,1737.079],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.037,0,0,0,0.074,0,0,0.149,0.019,0.167,0.056,0.056,0,0.13,0.074,0.149,0.167,0.409,0.539,0.223,0.074,0.298,0.298,0.26,0.13,0.093,0.093,0.037,0.112,0.205,0.149,0.167,0.167,0.223,0.298,0.149,0.205,0.279,0.13,0.316,0.298,0.13,0.223,0.149,0.205,0.186,0.223,0.279,0.446,0.558,0.465,0.837,0.874,0.465,0.26,0.521,0.428,0.521,0.279,0.409,0.391,0.428,0.911,1.06,0.465,0.948,1.227,1.488,0.967,0.577,0.409,1.339,1.153,2.287,2.734,2.362,2.659,1.376,1.097,1.339,2.287,2.306,2.492,2.343,3.106,1.953,2.176,1.953,2.25,1.674,2.827,2.548,2.473,2.473,3.422,3.961,2.176,1.934,4.835,1.097,2.883,4.724,3.31,2.771,5.17,4.817,2.232,3.273,5.709,4.984,4.594,7.234,5.747,3.366,3.403,5.17,8.313,8.797,5.17,7.048,3.515,9.243,8.573,7.829,7.234,12.795,11.214,7.774,7.383,11.846,14.803,12.404,6.974,17.853,6.918,11.27,10.117,14.655,13.446,13.52,12.832,10.117,11.251,12.479,10.005,13.52,12.999,11.14,9.15,9.243,12.628,12.088,10.786,9.578,5.04,4.556,5.04,7.048,7.922,5.988,6.602,4.575,3.589,4.575,3.961,6.937,4.482,3.05,4.891,2.678,2.12,3.31,3.943,3.329,2.529,1.544,1.897,2.808,1.934,2.659,3.533,3.273,3.496,0.893,1.785,0,5.114,2.752,1.953,2.827,1.823,2.585,2.418,2.622,4.054,3.05,4.538,0.986,3.905,2.808,3.422,3.905,4.854,4.519,0.409,2.548,5.97,5.04,8.22,10.005,7.216,1.358,5.914,11.233,11.196,8.127,11.456,12.739,3.626,10.619,9.243,19.862,11.735,17.612,17.314,5.133,15.547,18.932,14.153,22.038,25.943,12.739,13.464,9.15,27.784,18.746,20.624,19.806,13.371,14.06,24.995,22.614,17.091,27.338,20.085,18.077,10.396,17.202,17.798,27.133,19.49,22.521,18.002,7.681,13.52,15.064,14.506,28.9,17.649,13.223,5.616,10.247,17.872,23.302,16.105,13.669,7.365,3.701,9.689,10.433,11.977,12.516,10.191,6.807,3.031,7.513,7.327,10.266],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.037,0.037,0.037,0.037,0.111,0.111,0.111,0.26,0.242,0.409,0.465,0.521,0.447,0.577,0.651,0.651,0.799,1.041,1.524,1.691,1.765,1.933,2.157,2.268,2.231,1.915,1.469,1.283,1.321,1.228,1.079,0.986,1.023,1.153,1.358,1.47,1.563,1.637,1.618,1.767,1.898,1.805,1.73,1.73,1.73,1.637,1.73,1.693,1.841,2.269,2.511,3.199,3.868,4.147,4.184,4.426,4.408,4.371,4.185,3.757,3.274,3.237,3.888,4.427,4.464,4.891,5.839,6.918,7.494,7.643,7.141,7.42,8.108,9.447,10.954,11.828,13.52,14.319,15.007,15.007,16.141,16.16,15.918,15.899,16.346,16.923,18.002,18.616,18.579,17.947,18.282,18.487,17.854,18.374,19.62,21.628,21.554,21.814,23.822,22.371,22.781,25.032,24.92,23.73,26.724,29.607,27.004,29.18,32.006,32.266,33.55,38.013,38.59,37.139,38.31,40.207,42.811,46.624,47.2,47.014,44.782,50.659,55.829,58.488,57.409,61.407,67.451,68.177,72.045,74.648,80.878,85.453,85.193,90.251,85.955,89.451,92.185,94.994,93.637,94.753,100.611,92.875,97.208,98.417,98.305,97.17,96.723,94.343,90.661,89.787,91.164,90.773,91.554,87.612,79.653,73.069,68.959,66.764,62.058,55.958,51.774,46.771,45.32,45.339,44.26,44.149,40.709,37.771,36.06,34.163,32.694,31.429,31.411,27.803,25.85,24.344,21.35,21.48,21.294,20.643,20.233,20.177,21.144,20.493,20.381,17.573,20.753,20.846,19.266,18.82,17.147,18.839,19.472,22.094,21.034,21.332,23.917,22.076,24.158,24.381,25.385,26.668,27.468,28.937,24.808,26.37,28.435,30.667,35.465,41.565,43.927,40.766,46.271,54.956,60.182,63.269,66.505,69.239,65.649,74.91,78.239,86.868,87.407,96.892,102.75,95.144,107.065,115.378,120.288,122.464,136.672,131.799,127.949,131.966,144.203,144.017,150.488,148.256,135.684,137.005,148.536,162,151.307,159.899,159.36,157.631,154.656,157.798,150.601,155.12,157.519,152.702,150.619,140.223,143.347,141.209,137.917,139.684,137.843,128.545,116.159,118.725,123.077,131.315,132.914,117.683,107.399,97.877,101.95,102.136,96.241,85.455,79.541,72.679,68.345,72.157,69.795,69.628],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.016,0.016,0.016,0.032,0.035,0.058,0.066,0.064,0.064,0.082,0.072,0.09,0.09,0.141,0.21,0.242,0.234,0.266,0.287,0.3,0.26,0.197,0.178,0.173,0.146,0.133,0.117,0.122,0.133,0.151,0.189,0.194,0.194,0.213,0.207,0.228,0.239,0.215,0.226,0.218,0.207,0.215,0.202,0.199,0.244,0.292,0.337,0.428,0.526,0.561,0.558,0.569,0.55,0.558,0.478,0.412,0.401,0.425,0.481,0.571,0.563,0.659,0.776,0.933,1.01,0.962,0.869,0.994,1.023,1.174,1.352,1.552,1.849,1.987,1.953,1.979,1.979,1.918,1.937,1.892,2.139,2.261,2.38,2.333,2.325,2.208,2.277,2.197,2.272,2.314,2.524,2.768,2.84,2.713,3.039,2.843,2.901,3.087,2.994,3.079,3.541,3.539,3.701,3.757,3.897,4.137,4.397,4.692,4.825,4.987,5.005,4.928,5.404,6.004,5.709,5.895,5.917,6.751,7.237,7.168,6.945,8.034,8.629,9.238,8.972,9.439,10.436,11.174,10.343,11.291,11.169,11.724,11.477,11.456,11.605,12.54,11.823,12.28,12.277,12.614,11.95,11.961,11.886,11.645,11.506,11.219,11.241,11.538,11.148,10.659,9.787,9.131,8.531,7.734,7.139,6.453,6.028,5.962,5.824,5.757,5.316,5.175,4.96,4.453,4.498,4.368,4.017,3.924,3.496,3.332,3.257,2.779,2.667,2.766,2.569,2.386,2.415,2.521,2.8,2.657,2.511,2.234,2.585,2.473,2.285,2.189,2.322,2.436,2.782,2.426,2.612,2.768,3.013,2.893,3.082,3.138,3.252,3.231,3.488,3.486,3.403,3.209,3.661,3.892,4.509,5.244,5.63,5.765,6.246,6.998,7.877,7.864,8.071,8.86,9.184,9.857,9.572,10.81,11.326,12.205,12.859,13.074,13.778,15.162,14.346,15.818,17.009,16.355,17.545,16.631,17.896,18.552,18.35,17.473,17.564,17.649,19.912,19.174,18.937,19.896,19.936,20.608,20.085,18.972,18.284,19.718,18.597,18.945,18.935,18.547,18.021,17.63,15.826,17.171,16.475,15.792,15.497,15.029,15.43,16.687,14.859,14.291,13.454,13.18,13.1,12.038,10.42,9.907,9.41,9.331,9.235,8.924,8.48,8.236]},{"iso":"OWID_KOS","continent":"Europe","population":1932774,"name":"Kosovo","population_density":168.155,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,5,13,16,19,20,21,24,31,33,61,63,71,86,88,91,94,106,112,125,126,135,140,145,165,184,224,227,250,283,362,377,387,423,449,480,510,561,598,604,630,669,703,731,763,780,790,799,806,813,823,851,855,856,860,861,862,870,884,895,919,927,945,955,978,985,988,989,1003,1004,1025,1032,1038,1038,1047,1048,1052,1064,1070,1083,1110,1123,1142,1147,1158,1194,1234,1263,1269,1298,1326,1384,1437,1486,1615,1756,1833,1916,1998,2073,2169,2216,2268,2363,2432,2494,2590,2677,2799,2878,2991,3064,3178,3356,3508,3703,3886,4100,4307,4512,4715,4931,5118,5237,5369,5472,5617,5735,5877,6045,6286,6467,6680,6917,7137,7413,7652,7846,8104,8330,8554,8799,9049,9274,9492,9688,9869,10059,10247,10419,10590,10795,10988,11130,11275,11416,11545,11686,11848,12006,12168,12337,12448,12547,12683,12840,12981,13100,13215,13334,13454,13601,13713,13791,13910,14027,14119,14204,14301,14377,14446,14496,14566,14637,14692,14763,14839,14882,14939,15002,15063,15142,15208,15270,15333,15379,15425,15472,15520,15574,15620,15663,15705,15758,15814,15855,15889,15938,15971,16050,16130,16179,16247,16345,16425,16502,16606,16754,16891,17009,17139,17263,17422,17591,17757,17943,17943,17943,18626,18626,19328,19328,19328,20179,20999,21545,22206,22934,22934,22934,24792,25388,26121,26888,27851,27851,29117,29805,29805,31215,32022,32877,33588,34295,34940,35549,36253,37028,37792,38431,39057,39596,40117,40117,40117,40117,42337,42805,43324,43881,44442,45004,45594,46118,46580,46909,47203,47499,47499],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.035,2.587,6.726,8.278,9.83,10.348,10.865,12.417,16.039,17.074,31.561,32.596,36.735,44.496,45.53,47.083,48.635,54.843,57.948,64.674,65.191,69.848,72.435,75.022,85.37,95.2,115.896,117.448,129.348,146.422,187.296,195.056,200.23,218.856,232.309,248.348,263.869,290.256,309.4,312.504,325.956,346.135,363.726,378.213,394.769,403.565,408.739,413.395,417.017,420.639,425.813,440.3,442.369,442.887,444.956,445.474,445.991,450.13,457.374,463.065,475.482,479.622,488.935,494.108,506.008,509.63,511.182,511.7,518.943,519.461,530.326,533.948,537.052,537.052,541.708,542.226,544.295,550.504,553.608,560.335,574.304,581.03,590.861,593.448,599.139,617.765,638.461,653.465,656.569,671.574,686.061,716.069,743.491,768.843,835.587,908.539,948.378,991.321,1033.747,1072.552,1122.221,1146.539,1173.443,1222.595,1258.295,1290.373,1340.043,1385.056,1448.178,1489.051,1547.517,1585.286,1644.269,1736.364,1815.008,1915.899,2010.582,2121.303,2228.403,2334.468,2439.499,2551.255,2648.007,2709.577,2777.873,2831.164,2906.186,2967.238,3040.707,3127.629,3252.32,3345.968,3456.172,3578.794,3692.62,3835.42,3959.076,4059.45,4192.937,4309.868,4425.763,4552.524,4681.872,4798.285,4911.076,5012.485,5106.132,5204.437,5301.706,5390.698,5479.171,5585.237,5685.093,5758.563,5833.584,5906.536,5973.28,6046.232,6130.049,6211.797,6295.614,6383.054,6440.484,6491.706,6562.071,6643.301,6716.253,6777.823,6837.323,6898.892,6960.979,7037.036,7094.984,7135.34,7196.91,7257.444,7305.044,7349.023,7399.21,7438.531,7474.231,7500.101,7536.318,7573.053,7601.51,7638.244,7677.566,7699.814,7729.305,7761.901,7793.462,7834.336,7868.483,7900.562,7933.157,7956.957,7980.757,8005.075,8029.909,8057.848,8081.648,8103.896,8125.627,8153.048,8182.022,8203.235,8220.827,8246.179,8263.253,8304.127,8345.518,8370.87,8406.053,8456.757,8498.148,8537.987,8591.796,8668.37,8739.252,8800.305,8867.565,8931.722,9013.987,9101.426,9187.313,9283.548,9283.548,9283.548,9636.926,9636.926,10000.135,10000.135,10000.135,10440.434,10864.695,11147.191,11489.186,11865.847,11865.847,11865.847,12827.159,13135.524,13514.772,13911.611,14409.859,14409.859,15064.876,15420.841,15420.841,16150.362,16567.897,17010.266,17378.131,17743.927,18077.644,18392.735,18756.978,19157.956,19553.243,19883.856,20207.743,20486.617,20756.177,20756.177,20756.177,20756.177,21904.786,22146.925,22415.451,22703.637,22993.894,23284.668,23589.928,23861.041,24100.076,24270.298,24422.41,24575.558,24575.558],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.552,4.139,1.552,1.552,0.517,0.517,1.552,3.622,1.035,14.487,1.035,4.139,7.761,1.035,1.552,1.552,6.209,3.104,6.726,0.517,4.657,2.587,2.587,10.348,9.83,20.696,1.552,11.9,17.074,40.874,7.761,5.174,18.626,13.452,16.039,15.522,26.387,19.143,3.104,13.452,20.178,17.591,14.487,16.557,8.796,5.174,4.657,3.622,3.622,5.174,14.487,2.07,0.517,2.07,0.517,0.517,4.139,7.243,5.691,12.417,4.139,9.313,5.174,11.9,3.622,1.552,0.517,7.243,0.517,10.865,3.622,3.104,0,4.657,0.517,2.07,6.209,3.104,6.726,13.97,6.726,9.83,2.587,5.691,18.626,20.696,15.004,3.104,15.004,14.487,30.009,27.422,25.352,66.743,72.952,39.839,42.943,42.426,38.804,49.67,24.317,26.904,49.152,35.7,32.078,49.67,45.013,63.122,40.874,58.465,37.77,58.983,92.096,78.643,100.891,94.683,110.722,107.1,106.065,105.03,111.756,96.752,61.57,68.296,53.291,75.022,61.052,73.47,86.922,124.691,93.648,110.204,122.622,113.826,142.8,123.656,100.374,133.487,116.93,115.896,126.761,129.348,116.413,112.791,101.409,93.648,98.304,97.27,88.991,88.474,106.065,99.856,73.47,75.022,72.952,66.743,72.952,83.817,81.748,83.817,87.439,57.43,51.222,70.365,81.23,72.952,61.57,59.5,61.57,62.087,76.056,57.948,40.357,61.57,60.535,47.6,43.978,50.187,39.322,35.7,25.87,36.217,36.735,28.457,36.735,39.322,22.248,29.491,32.596,31.561,40.874,34.148,32.078,32.596,23.8,23.8,24.317,24.835,27.939,23.8,22.248,21.73,27.422,28.974,21.213,17.591,25.352,17.074,40.874,41.391,25.352,35.183,50.704,41.391,39.839,53.809,76.574,70.883,61.052,67.261,64.156,82.265,87.439,85.887,96.235,0,0,353.378,0,363.209,0,0,440.3,424.261,282.496,341.995,376.661,0,0,961.313,308.365,379.248,396.839,498.248,0,655.017,355.965,0,729.521,417.535,442.369,367.865,365.795,333.717,315.091,364.243,400.978,395.287,330.613,323.887,278.874,269.561,0,0,0,1148.608,242.139,268.526,288.187,290.256,290.774,305.261,271.113,239.035,170.222,152.113,153.148,0],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.552,5.691,7.243,8.795,9.312,9.829,11.381,15.003,14.486,24.834,24.317,26.904,34.148,34.666,34.666,32.596,37.77,26.387,32.078,28.456,25.352,26.904,27.939,36.735,40.356,57.948,52.774,64.157,76.574,114.861,120.035,114.861,123.657,116.413,130.9,134.522,143.835,122.104,117.447,125.725,127.277,131.416,129.864,130.899,113.308,99.339,100.892,91.062,74.506,62.089,62.089,47.602,39.323,36.219,32.079,28.974,29.491,31.56,22.764,33.111,36.733,43.976,48.633,60.016,59.499,53.808,48.634,43.46,39.838,41.39,39.838,31.042,27.42,30.525,30.525,25.352,31.044,23.283,26.387,37.253,43.979,49.152,51.222,54.843,67.26,84.852,93.13,82.264,90.542,95.199,122.621,144.352,151.078,197.125,255.073,291.808,319.747,347.686,356.481,378.729,377.694,337.855,314.055,309.916,299.051,306.295,312.504,325.956,342.513,374.074,362.692,385.975,445.993,474.966,530.844,562.405,632.253,680.888,749.183,795.23,814.89,832.999,793.678,767.291,709.86,677.782,632.769,601.209,576.375,604.314,636.392,678.3,747.631,786.435,868.183,918.369,931.821,940.617,963.899,969.591,973.73,989.252,962.865,952,953.035,913.196,894.57,875.944,838.174,797.3,786.952,774.017,746.078,727.452,702.1,671.573,655.534,650.877,626.56,610.521,624.49,606.898,585.168,588.79,597.068,586.203,566.025,541.708,515.839,520.496,545.33,532.913,492.04,480.658,479.623,467.723,450.131,438.231,401.497,379.249,364.762,339.409,315.609,296.466,289.223,278.358,261.284,255.075,261.801,257.145,261.284,266.975,262.318,255.592,257.144,251.453,243.174,236.448,223.513,213.165,203.335,192.469,196.091,201.265,198.161,190.917,188.33,181.604,200.23,219.891,217.821,224.03,253.521,277.321,291.808,328.543,364.243,393.735,429.435,461.513,474.965,515.839,563.439,595.517,615.178,544.295,483.243,769.36,705.204,986.148,898.709,812.822,1156.887,1581.148,1863.644,1852.261,2228.922,1865.713,1865.713,2827.026,2695.091,2650.078,2764.421,2920.674,2544.013,3199.03,3554.995,2593.682,3014.838,3053.125,3098.655,2968.272,3334.067,3012.767,2971.893,3336.136,3007.593,2985.345,2873.589,2829.611,2742.69,2678.534,2363.443,1999.2,1598.222,2351.543,2263.069,2207.708,2217.021,2237.716,2528.49,2833.751,3104.864,2195.291,2123.374,2006.961,1871.922,1581.666],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.404,1.626,1.922,1.478,3.326,3.252,3.77,4.804,4.73,4.435,4.509,3.326,3.622,3.991,2.957,3.474,3.622,3.77,4.361,5.322,7.317,7.465,8.5,10.57,16.039,15.67,15.004,14.709,16.409,17,16.778,14.709,16.335,16.039,15.3,16.261,16.483,16.335,14.93,13.452,13.748,12.491,10.126,8.13,6.8,6.504,5.543,4.878,4.509,4.065,3.622,3.474,2.439,2.957,4.657,4.952,6.209,6.874,7.983,7.465,6.874,5.174,5.617,4.361,5.174,3.991,3.917,3.696,4.287,3.326,3.548,2.883,2.809,3.326,5.322,5.617,6.948,7.022,6.948,9.165,11.161,11.309,10.791,11.53,13.23,16.704,17.961,18.626,26.017,35.996,39.543,43.609,45.383,47.009,50.483,44.422,37.843,39.174,38.139,36.661,38.213,37.548,43.091,45.087,46.417,46.713,50.556,56.617,61.422,66.817,74.504,81.97,91.874,98.6,100.448,105.178,104.587,99.856,93.796,86.109,81.674,75.391,69.922,68.517,77.535,81.156,89.287,96.087,103.626,113.53,118.778,115.304,120.996,121.956,120.996,122.843,120.922,119.887,121.661,117.078,113.752,111.239,107.026,101.261,97.27,96.309,96.087,93.204,89.878,86.404,83.226,81.009,77.83,75.243,76.722,78.496,76.278,74.061,73.691,73.322,72.065,68.887,64.896,65.487,67.039,67.852,64.526,59.87,59.87,60.017,58.022,55.435,51.739,49.078,48.413,43.313,39.839,38.287,36.07,34.148,34.148,32.226,32.743,32.226,31.487,33.261,32.891,31.857,33.335,32.522,31.265,30.23,27.939,27.052,25.87,24.391,24.096,24.613,25.278,24.761,23.283,23.504,22.765,25.5,27.496,26.978,28.974,33.704,35.996,39.248,41.096,46.122,52.626,56.322,58.687,61.939,68,72.804,74.135,77.756,69.035,59.426,100.743,88.991,128.387,116.117,102.37,165.269,225.878,215.752,264.609,266.53,266.53,266.53,340.961,324.404,338.226,346.061,363.43,363.43,457.004,370.526,326.474,376.513,379.469,371.487,424.039,382.722,379.543,424.556,372.374,370.009,363.282,357.961,351.974,344.139,337.635,285.6,228.317,171.848,288.704,277.026,275.548,278.209,319.674,361.213,404.822,279.465,279.022,264.978,245.539,225.952,184.413]},{"iso":"KWT","continent":"Asia","population":4270563,"name":"Kuwait","population_density":232.128,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,11,26,43,45,45,45,56,56,56,58,58,61,64,64,69,72,80,80,104,112,123,130,142,148,159,176,188,189,191,195,208,225,235,255,266,289,317,342,417,479,556,665,743,855,910,993,1154,1234,1300,1355,1405,1524,1658,1751,1915,1995,2080,2248,2399,2614,2892,3075,3288,3440,3740,4024,4377,4619,4983,5278,5804,6289,6567,7208,7623,8688,9286,10277,11028,11975,12860,13802,14850,15691,16764,17568,18609,19564,20464,21302,21967,22575,23267,24112,25184,26192,27043,27762,28649,29359,29921,30644,31131,31848,32510,33140,33823,34432,34952,35466,35920,36431,36958,37533,38074,38678,39145,39650,40291,41033,41879,42788,43703,44391,44942,45524,46195,46940,47859,48672,49303,49941,50644,51245,52007,52840,53580,54058,54894,55508,56174,56877,57668,58221,58904,59204,59763,60434,61185,61872,62625,63309,63773,64379,65149,65903,66529,66957,67448,67911,68299,68774,69425,70045,70727,71199,71713,72400,73068,73785,74486,75185,75697,76205,76827,77470,78145,78767,79269,79957,80528,80960,81573,82271,82945,83578,84224,84636,85109,85811,86478,87378,88243,88963,89582,90387,91244,92082,92822,93475,94211,94764,95472,96301,96999,97824,98528,99049,99434,99964,100683,101299,101851,102441,103199,103544,103981,104568,105182,105676,106087,106458,107025,107592,108268,108743,109441,110076,110568,111116,111893,112737,113269,114015,114744,115483,116146,116832,117718,118531,119420,120232,120927,121635,122317,123092,123906,124666,125337,125926,126534,127293,128080,128843,129638,130463,131205,131743,132478,133381,134159,134932,135650,136341,136840,137329,137885,138337,138822,139308,139734,140056,140393,140795,141217,141547,141876,142195,142426,142635,142992,143260,143574,143917,144164,144369,144599,144900,145204,145495,145789,146044,146218,146449,146710,146971,147192],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.234,2.576,6.088,10.069,10.537,10.537,10.537,13.113,13.113,13.113,13.581,13.581,14.284,14.986,14.986,16.157,16.86,18.733,18.733,24.353,26.226,28.802,30.441,33.251,34.656,37.232,41.212,44.022,44.256,44.725,45.661,48.706,52.686,55.028,59.711,62.287,67.673,74.229,80.083,97.645,112.163,130.194,155.717,173.982,200.208,213.087,232.522,270.222,288.955,304.41,317.288,328.996,356.862,388.239,410.016,448.419,467.152,487.055,526.394,561.753,612.097,677.194,720.046,769.922,805.514,875.763,942.265,1024.923,1081.59,1166.825,1235.903,1359.071,1472.64,1537.736,1687.834,1785.011,2034.392,2174.421,2406.474,2582.329,2804.08,3011.313,3231.892,3477.293,3674.223,3925.478,4113.743,4357.505,4581.129,4791.874,4988.101,5143.818,5286.188,5448.228,5646.094,5897.115,6133.149,6332.42,6500.782,6708.483,6874.738,7006.336,7175.635,7289.671,7457.565,7612.579,7760.101,7920.033,8062.637,8184.401,8304.76,8411.069,8530.725,8654.128,8788.771,8915.452,9056.885,9166.239,9284.49,9434.587,9608.335,9806.435,10019.288,10233.545,10394.648,10523.671,10659.953,10817.075,10991.525,11206.719,11397.092,11544.848,11694.243,11858.858,11999.589,12178.02,12373.076,12546.355,12658.284,12854.043,12997.818,13153.769,13318.384,13503.606,13633.097,13793.029,13863.278,13994.174,14151.296,14327.151,14488.019,14664.343,14824.509,14933.16,15075.062,15255.366,15431.923,15578.508,15678.729,15793.702,15902.119,15992.973,16104.2,16256.639,16401.819,16561.517,16672.041,16792.4,16953.268,17109.688,17277.581,17441.728,17605.407,17725.298,17844.251,17989.9,18140.465,18298.524,18444.172,18561.721,18722.824,18856.53,18957.688,19101.229,19264.673,19422.498,19570.722,19721.99,19818.464,19929.222,20093.604,20249.789,20460.534,20663.084,20831.68,20976.625,21165.125,21365.801,21562.028,21735.307,21888.215,22060.557,22190.048,22355.835,22549.954,22713.399,22906.582,23071.431,23193.429,23283.581,23407.687,23576.048,23720.292,23849.549,23987.704,24165.198,24245.983,24348.312,24485.765,24629.539,24745.215,24841.455,24928.329,25061.099,25193.868,25352.161,25463.387,25626.832,25775.524,25890.732,26019.052,26200.995,26398.627,26523.201,26697.885,26868.589,27041.634,27196.882,27357.517,27564.984,27755.357,27963.526,28153.665,28316.407,28482.193,28641.891,28823.366,29013.973,29191.936,29349.058,29486.979,29629.349,29807.077,29991.362,30170.027,30356.185,30549.368,30723.115,30849.094,31021.203,31232.65,31414.828,31595.834,31763.962,31925.767,32042.614,32157.118,32287.312,32393.153,32506.721,32620.523,32720.276,32795.676,32874.588,32968.721,33067.537,33144.81,33221.849,33296.547,33350.638,33399.578,33483.173,33545.928,33619.455,33699.772,33757.61,33805.613,33859.47,33929.953,34001.138,34069.278,34138.122,34197.833,34238.577,34292.668,34353.784,34414.9,34466.65],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2.342,3.512,3.981,0.468,0,0,2.576,0,0,0.468,0,0.702,0.702,0,1.171,0.702,1.873,0,5.62,1.873,2.576,1.639,2.81,1.405,2.576,3.981,2.81,0.234,0.468,0.937,3.044,3.981,2.342,4.683,2.576,5.386,6.557,5.854,17.562,14.518,18.03,25.524,18.265,26.226,12.879,19.435,37.7,18.733,15.455,12.879,11.708,27.865,31.378,21.777,38.402,18.733,19.904,39.339,35.358,50.345,65.097,42.851,49.876,35.592,70.248,66.502,82.659,56.667,85.235,69.078,123.169,113.568,65.097,150.097,97.177,249.382,140.028,232.054,175.855,221.751,207.233,220.58,245.401,196.93,251.255,188.266,243.762,223.624,210.745,196.227,155.717,142.37,162.04,197.866,251.021,236.034,199.271,168.362,207.701,166.254,131.599,169.299,114.036,167.894,155.015,147.522,159.932,142.604,121.764,120.359,106.309,119.656,123.403,134.643,126.681,141.433,109.353,118.251,150.097,173.748,198.1,212.852,214.257,161.103,129.023,136.282,157.122,174.45,215.194,190.373,147.756,149.395,164.615,140.731,178.431,195.056,173.279,111.929,195.759,143.775,155.951,164.615,185.221,129.491,159.932,70.248,130.896,157.122,175.855,160.869,176.323,160.166,108.651,141.902,180.304,176.558,146.585,100.221,114.973,108.417,90.855,111.227,152.439,145.18,159.698,110.524,120.359,160.869,156.42,167.894,164.147,163.679,119.891,118.954,145.648,150.566,158.059,145.648,117.549,161.103,133.706,101.158,143.541,163.444,157.825,148.224,151.268,96.474,110.758,164.381,156.185,210.745,202.549,168.596,144.946,188.5,200.676,196.227,173.279,152.907,172.343,129.491,165.786,194.12,163.444,193.183,164.849,121.998,90.152,124.105,168.362,144.243,129.257,138.155,177.494,80.786,102.328,137.453,143.775,115.676,96.24,86.874,132.769,132.769,158.293,111.227,163.444,148.692,115.207,128.32,181.943,197.632,124.574,174.684,170.703,173.045,155.249,160.635,207.467,190.373,208.169,190.139,162.742,165.786,159.698,181.475,190.607,177.962,157.122,137.921,142.37,177.728,184.285,178.665,186.158,193.183,173.748,125.979,172.108,211.448,182.177,181.007,168.128,161.805,116.846,114.505,130.194,105.841,113.568,113.802,99.753,75.4,78.912,94.133,98.816,77.273,77.039,74.697,54.091,48.94,83.596,62.755,73.527,80.317,57.838,48.003,53.857,70.483,71.185,68.141,68.843,59.711,40.744,54.091,61.116,61.116,51.75],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2.342,5.854,9.835,10.303,10.303,10.303,12.879,12.879,10.537,7.493,3.512,3.746,4.448,4.448,3.043,3.745,5.618,5.15,10.77,11.941,13.815,15.454,17.093,17.796,18.499,22.48,19.67,18.031,15.923,15.221,15.455,18.031,17.797,18.499,18.265,23.417,29.506,34.423,48.941,59.478,75.166,96.007,111.696,132.536,138.858,152.439,172.577,176.792,174.217,161.572,155.015,156.654,175.153,177.495,178.197,178.197,182.646,209.106,232.756,255.236,288.955,310.029,321.503,338.362,388.706,415.869,463.17,469.492,489.63,515.857,589.15,667.126,661.975,745.57,760.088,952.803,1007.596,1170.572,1223.258,1331.441,1473.577,1544.06,1692.284,1639.832,1751.059,1707.271,1775.178,1777.051,1780.563,1756.21,1666.526,1611.966,1522.751,1532.351,1539.61,1552.02,1540.546,1512.681,1564.665,1588.549,1558.108,1529.541,1392.556,1324.416,1280.16,1259.32,1211.551,1187.901,1178.066,1129.126,1121.399,1073.161,1041.549,1028.67,995.419,994.248,981.837,979.729,1023.517,1077.609,1152.306,1230.515,1318.091,1337.761,1357.431,1375.462,1382.487,1383.189,1400.283,1377.804,1311.303,1299.595,1335.187,1339.636,1360.945,1381.551,1339.636,1261.192,1309.195,1303.575,1294.911,1318.795,1325.585,1260.02,1246.673,1204.992,1140.129,1153.476,1173.38,1169.634,1160.736,1191.411,1140.13,1211.784,1261.192,1280.628,1251.358,1190.71,1129.36,1077.611,1059.815,1029.14,1001.275,969.897,983.01,993.313,998.699,1051.151,1116.716,1173.383,1185.091,1203.59,1163.783,1172.213,1197.502,1187.199,1188.838,1166.592,1119.994,1117.418,1131.233,1113.437,1111.33,1124.208,1123.974,1126.55,1160.269,1095.64,1072.692,1135.915,1148.559,1195.86,1240.584,1260.956,1254.634,1346.66,1436.578,1468.424,1485.518,1427.68,1397.474,1358.369,1379.209,1384.829,1347.597,1344.553,1336.123,1305.214,1223.023,1217.637,1220.213,1170.336,1136.149,1081.121,1093.766,1052.554,1064.73,1078.078,1053.491,1024.924,991.907,940.626,895.901,947.884,1003.849,977.623,997.292,1030.308,1049.275,1090.721,1139.895,1204.758,1171.039,1234.496,1241.755,1266.108,1306.15,1338.465,1363.989,1356.73,1440.325,1455.78,1447.819,1440.56,1445.009,1465.849,1448.989,1436.578,1385.531,1333.313,1312.941,1324.883,1349.47,1346.66,1342.211,1357.432,1374.058,1362.116,1391.854,1425.574,1423.466,1425.808,1407.778,1376.4,1319.498,1308.024,1266.11,1160.503,1091.894,1024.689,956.314,869.909,831.975,811.603,780.225,751.657,715.128,676.023,630.361,603.901,608.585,577.207,551.918,554.962,535.761,509.067,508.833,530.376,517.965,523.351,518.667,498.061,480.967,487.055,494.314,484.947,465.512],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.472,1.84,1.505,1.004,0.502,0.435,0.535,0.636,0.268,0.435,0.535,0.736,0.736,1.438,1.606,1.974,2.041,2.342,2.275,2.643,2.409,2.542,2.208,2.041,1.773,2.007,2.208,1.974,2.241,2.576,3.278,4.081,4.483,6.423,8.162,10.069,13.347,15.187,17.997,19.001,19.268,22.58,22.68,21.242,20.472,18.398,20.539,22.245,19.971,22.781,23.249,24.252,28.2,29.27,31.98,38.168,38.804,43.253,45.494,49.91,54.359,58.975,57.771,63.826,66.569,79.08,85.268,85.067,94.701,100.489,123.938,134.074,149.629,158.527,180.906,189.068,206.697,206.129,214.257,217,218.773,221.918,224.259,222.855,215.83,209.942,194.387,190.641,184.084,187.998,191.611,192.046,193.852,203.185,203.787,194.32,182.646,165.217,160.735,158.828,150.231,149.328,150.9,144.109,145.013,136.215,131.164,127.718,124.105,121.831,124.641,123.068,124.774,129.123,136.315,145.381,157.691,168.094,175.487,177.026,175.052,172.677,169.299,169.633,166.221,164.314,167.225,171.272,168.931,169.499,166.622,164.18,159.062,165.686,162.709,164.883,162.909,161.504,155.249,162.106,144.176,142.337,142.504,144.109,140.631,147.321,147.354,152.84,154.413,157.724,157.825,155.784,144.912,138.456,138.423,131.13,121.262,117.817,117.616,126.113,125.477,127.183,137.185,143.641,145.849,148.559,149.127,150.465,150.265,148.09,147.254,145.849,143.206,136.616,142.504,144.611,138.255,137.252,138.021,139.761,144.143,142.738,137.419,138.791,141.768,140.731,148.291,156.052,158.527,165.452,176.558,181.743,187.463,182.11,175.019,175.554,173.346,170.101,169.165,164.481,167.325,169.031,161.839,156.219,150.265,146.585,143.842,134.71,130.896,138.824,137.486,134.375,129.959,129.893,127.952,121.965,109.019,116.445,120.794,123.771,119.121,125.945,133.438,137.486,136.85,143.875,149.495,151.402,153.008,156.152,164.415,168.262,165.217,166.622,176.022,180.806,183.582,182.11,183.616,183.482,179.769,179.802,175.487,170.77,167.225,163.879,166.455,166.857,165.151,166.321,171.473,176.591,174.249,173.447,177.327,177.829,177.093,173.513,171.807,170.503,162.274,150.666,139.761,130.127,122.366,113.501,107.58,102.496,97.344,96.341,91.156,85.904,82.324,79.28,74.998,73.493,68.342,67.806,68.275,65.866,64.996,65.699,63.826,65.03,64.261,62.621,62.889,61.852,61.885,60.547,59.109,56.767]},{"iso":"KGZ","continent":"Asia","population":6524191,"name":"Kyrgyzstan","population_density":32.333,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,6,14,14,16,42,44,44,58,58,84,94,107,111,116,130,144,147,216,228,270,280,298,339,377,419,430,449,466,489,506,554,568,590,612,631,665,665,682,695,708,729,746,756,769,795,830,843,871,895,906,931,1002,1016,1037,1044,1082,1111,1117,1138,1216,1243,1270,1313,1350,1365,1403,1433,1468,1520,1594,1662,1722,1748,1817,1845,1871,1899,1936,1974,2007,2032,2055,2093,2166,2166,2207,2285,2472,2562,2657,2657,2789,2981,3356,3356,3726,3954,4204,4446,4513,5017,5296,5506,6261,6767,6878,7094,7377,8141,8279,8847,9358,9910,10410,11117,11444,11444,12282,12498,13101,24606,27143,27143,28251,28980,31247,31247,32124,32813,33296,33844,34592,35223,35805,36299,36719,37129,37541,38110,38659,39162,39571,39919,40085,40455,40759,41069,41373,41645,41856,41991,42146,42325,42507,42703,42889,43023,43126,43245,43358,43459,43587,43712,43820,43898,43958,44036,44135,44199,44293,44403,44458,44487,44613,44684,44761,44828,44881,44928,44999,45072,45153,45244,45335,45335,45471,45542,45630,45757,45932,46090,46251,46355,46522,46669,46841,47056,47184,47428,47635,47799,48097,48342,48617,48924,49230,49528,49871,50201,50589,51020,51490,52044,52526,52910,53459,54006,54588,55144,55750,56170,56738,57276,57798,58394,58878,58878,59879,60774,61309,61309,61748,62304,62819,63390,64360,64360,64887,65454,65953,66983,66983,67469,67894,68316,68702,69149,69581,69885,70366,71171,71548,71548,71971,72807,73178,73178,73513,73933,74373,74774,75395,75395,75690,76012,76391,77059,77059,77356,77674,78151,78151,78415],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.46,0.46,0.92,2.146,2.146,2.452,6.438,6.744,6.744,8.89,8.89,12.875,14.408,16.401,17.014,17.78,19.926,22.072,22.532,33.108,34.947,41.384,42.917,45.676,51.96,57.785,64.223,65.909,68.821,71.426,74.952,77.558,84.915,87.061,90.433,93.805,96.717,101.928,101.928,104.534,106.527,108.519,111.738,114.344,115.876,117.869,121.854,127.219,129.211,133.503,137.182,138.868,142.7,153.582,155.728,158.947,160.02,165.844,170.289,171.209,174.428,186.383,190.522,194.66,201.251,206.922,209.221,215.046,219.644,225.009,232.979,244.321,254.744,263.941,267.926,278.502,282.794,286.779,291.071,296.742,302.566,307.624,311.456,314.982,320.806,331.995,331.995,338.279,350.235,378.898,392.692,407.254,407.254,427.486,456.915,514.393,514.393,571.105,606.052,644.371,681.464,691.733,768.984,811.748,843.936,959.659,1037.217,1054.23,1087.338,1130.715,1247.818,1268.97,1356.03,1434.354,1518.962,1595.6,1703.966,1754.087,1754.087,1882.532,1915.64,2008.065,3771.502,4160.363,4160.363,4330.192,4441.93,4789.406,4789.406,4923.829,5029.436,5103.468,5187.463,5302.113,5398.83,5488.037,5563.755,5628.131,5690.974,5754.123,5841.337,5925.486,6002.583,6065.273,6118.613,6144.057,6200.769,6247.365,6294.88,6341.476,6383.167,6415.508,6436.2,6459.958,6487.394,6515.291,6545.333,6573.842,6594.381,6610.168,6628.408,6645.728,6661.209,6680.828,6699.988,6716.542,6728.497,6737.694,6749.649,6764.823,6774.633,6789.041,6805.901,6814.331,6818.776,6838.089,6848.972,6860.774,6871.043,6879.167,6886.371,6897.254,6908.443,6920.858,6934.806,6948.754,6948.754,6969.6,6980.482,6993.971,7013.437,7040.26,7064.477,7089.155,7105.095,7130.693,7153.224,7179.587,7212.542,7232.161,7269.56,7301.288,7326.426,7372.102,7409.654,7451.805,7498.861,7545.763,7591.439,7644.013,7694.594,7754.065,7820.127,7892.166,7977.081,8050.96,8109.818,8193.966,8277.808,8367.014,8452.236,8545.121,8609.497,8696.557,8779.019,8859.029,8950.382,9024.567,9024.567,9177.996,9315.178,9397.18,9397.18,9464.468,9549.69,9628.627,9716.147,9864.825,9864.825,9945.601,10032.508,10108.993,10266.867,10266.867,10341.359,10406.501,10471.183,10530.348,10598.862,10665.077,10711.673,10785.399,10908.785,10966.57,10966.57,11031.406,11159.545,11216.41,11216.41,11267.757,11332.133,11399.574,11461.038,11556.222,11556.222,11601.438,11650.793,11708.885,11811.273,11811.273,11856.796,11905.537,11978.65,11978.65,12019.115],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.46,1.226,0,0.307,3.985,0.307,0,2.146,0,3.985,1.533,1.993,0.613,0.766,2.146,2.146,0.46,10.576,1.839,6.438,1.533,2.759,6.284,5.824,6.438,1.686,2.912,2.606,3.525,2.606,7.357,2.146,3.372,3.372,2.912,5.211,0,2.606,1.993,1.993,3.219,2.606,1.533,1.993,3.985,5.365,1.993,4.292,3.679,1.686,3.832,10.883,2.146,3.219,1.073,5.824,4.445,0.92,3.219,11.956,4.138,4.138,6.591,5.671,2.299,5.824,4.598,5.365,7.97,11.342,10.423,9.197,3.985,10.576,4.292,3.985,4.292,5.671,5.824,5.058,3.832,3.525,5.824,11.189,0,6.284,11.956,28.663,13.795,14.561,0,20.232,29.429,57.478,0,56.712,34.947,38.319,37.093,10.269,77.251,42.764,32.188,115.723,77.558,17.014,33.108,43.377,117.103,21.152,87.061,78.324,84.608,76.638,108.366,50.121,0,128.445,33.108,92.425,1763.437,388.86,0,169.829,111.738,347.476,0,134.423,105.607,74.032,83.995,114.65,96.717,89.206,75.718,64.376,62.843,63.15,87.214,84.148,77.098,62.69,53.34,25.444,56.712,46.596,47.515,46.596,41.691,32.341,20.692,23.758,27.436,27.896,30.042,28.509,20.539,15.787,18.24,17.32,15.481,19.619,19.159,16.554,11.956,9.197,11.956,15.174,9.81,14.408,16.86,8.43,4.445,19.313,10.883,11.802,10.269,8.124,7.204,10.883,11.189,12.415,13.948,13.948,0,20.845,10.883,13.488,19.466,26.823,24.218,24.677,15.941,25.597,22.532,26.363,32.954,19.619,37.399,31.728,25.137,45.676,37.553,42.151,47.056,46.902,45.676,52.574,50.581,59.471,66.062,72.04,84.915,73.879,58.858,84.148,83.842,89.206,85.221,92.885,64.376,87.061,82.462,80.01,91.352,74.185,0,153.429,137.182,82.003,0,67.288,85.221,78.937,87.52,148.677,0,80.776,86.907,76.485,157.874,0,74.492,65.142,64.682,59.164,68.514,66.215,46.596,73.726,123.387,57.785,0,64.836,128.138,56.865,0,51.347,64.376,67.441,61.464,95.184,0,45.216,49.355,58.091,102.388,0,45.523,48.742,73.113,0,40.465],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.46,1.686,1.686,1.993,5.978,6.285,6.285,8.431,7.971,10.73,12.263,13.949,10.577,11.036,13.182,13.182,13.642,20.233,20.539,24.984,25.904,27.897,32.035,35.713,41.691,32.801,33.874,30.042,32.034,31.881,32.954,29.276,26.21,27.896,27.896,30.501,26.976,26.976,21.612,21.459,21.306,20.54,19.161,15.943,19.928,22.687,22.687,24.986,25.446,24.526,26.825,35.715,33.876,31.73,30.81,32.342,33.108,32.342,31.729,32.802,34.794,35.713,41.231,41.078,38.932,43.836,45.215,38.624,42.456,49.66,53.492,57.018,58.704,63.456,63.15,61.77,58.092,52.421,47.822,43.683,43.53,36.479,38.011,45.215,40.923,41.536,47.668,71.273,81.236,92.272,86.448,95.491,124.92,176.114,164.158,192.207,213.359,237.117,274.21,264.247,312.069,297.355,329.543,388.554,431.165,409.86,405.875,438.983,478.835,457.223,512.096,474.697,481.747,541.371,616.629,623.373,506.27,613.563,559.61,573.711,2252.54,2564.762,2456.396,2576.104,2687.842,2906.873,2873.765,2915.763,1257.933,943.105,1027.1,971.921,956.9,698.63,774.348,704.301,661.537,650.655,653.874,623.372,603.753,577.237,554.859,515.927,509.796,493.242,453.543,415.991,380.584,350.235,317.587,315.901,286.625,267.925,250.452,232.365,211.213,194.659,192.207,185.769,173.814,165.537,154.654,142.699,134.116,127.526,121.242,119.096,113.425,108.214,105.915,97.791,90.28,100.396,99.323,95.951,96.41,90.126,80.47,82.923,89.667,82.769,85.834,87.98,77.711,90.432,94.111,96.716,104.993,119.401,129.671,140.4,156.341,161.093,172.742,185.617,199.105,191.901,205.082,212.133,221.329,241.408,256.429,272.217,286.319,313.602,321.879,342.725,368.169,381.964,410.473,440.362,478.221,505.198,518.38,549.954,583.215,612.95,632.109,652.954,632.415,645.597,669.201,665.063,672.573,657.552,572.331,632.875,705.681,700.623,618.161,605.439,599.308,604.06,691.58,686.828,549.646,548.419,635.326,644.523,717.176,638.239,625.211,541.676,606.358,584.746,566.353,556.083,444.805,518.531,567.426,560.069,495.387,501.059,560.683,551.333,504.737,482.358,423.347,433.003,494.467,524.815,396.677,385.028,434.383,441.127,479.139,411.698,395.757,349.315,422.428,377.212,368.322],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.854,0.898,0.898,1.139,0.963,1.533,1.708,1.423,1.467,1.577,1.577,1.883,1.379,2.671,2.649,3.482,3.591,3.679,4.27,5.036,4.445,4.423,3.919,4.073,4.182,3.657,3.876,3.263,3.503,3.569,3.613,3.854,3.482,2.803,2.781,2.584,2.562,2.518,1.993,2.277,2.474,2.956,2.956,3.109,3.263,3.284,3.547,4.533,4.073,4.248,3.788,4.095,4.489,4.073,2.978,4.379,4.511,4.949,5.058,5.233,5.43,5.803,4.752,4.927,5.474,6.153,6.832,7.817,7.554,8.408,8.255,7.686,6.678,6,5.518,5.671,4.708,4.598,4.861,5.846,5.036,5.102,6.087,9.634,11.102,12.35,10.751,13.642,16.948,23.451,19.357,25.488,28.4,33.874,36.283,33.545,36.37,42.479,38.976,50.515,56.121,53.252,56.515,51.676,62.296,60.719,56.624,56.734,66.39,72.609,81.893,72.324,69.303,75.215,68.755,69.872,310.843,350.914,343.754,368.015,365.628,410.538,397.334,164.618,124.153,134.729,122.467,122.883,87.061,99.804,91.418,85.528,83.929,80.951,77.032,75.236,73.507,71.645,70.069,64.726,63.806,58.004,52.771,48.413,45.413,42.414,41.735,37.027,34.29,31.487,29.122,27.239,25.553,24.853,24.064,22.619,20.845,19.357,18.021,17.452,16.904,15.612,14.846,14.802,13.401,12.722,12.766,12.262,11.583,12.634,12.021,12.306,11.715,10.467,10.291,11.211,10.051,10.269,10.576,11.102,9.941,11.89,11.89,12.218,13.226,15.065,16.532,20.057,19.357,21.459,22.75,23.736,24.612,23.955,25.772,28.028,27.962,31.268,32.867,34.18,38.1,39.458,41.45,45.37,46.07,49.202,52.617,56.186,61.617,65.646,66.544,71.339,74.82,78.127,80.01,81.149,79.791,83.82,83.579,83.032,83.338,81.762,68.492,81.214,88.374,88.309,76.879,73.441,75.018,86.294,76.879,78.521,66.806,78.346,81.149,79.9,91.177,78.674,68.076,77.382,75.083,71.12,69.981,56.887,63.544,63.434,71.755,70.77,62.318,61.792,70.638,72.105,61.573,51.282,52.223,61.858,61.376,56.668,48.545,55.004,54.719,53.822,58.814,50.034,42.939,49.902,53.887,46.837,44.319]},{"iso":"LAO","continent":"Asia","population":7275556,"name":"Laos","population_density":29.715,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,6,6,8,8,8,9,10,10,10,10,11,12,14,15,16,16,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,39,39,39,39,39,39,39,39,39,39,39,39,39,39,41,41,41,41,41,41,41,41,41,41,41],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.275,0.412,0.825,0.825,1.1,1.1,1.1,1.237,1.374,1.374,1.374,1.374,1.512,1.649,1.924,2.062,2.199,2.199,2.474,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.611,2.749,2.749,2.749,2.749,2.749,2.749,2.749,2.749,2.749,2.749,2.749,2.749,2.749,2.749,2.749,2.749,2.749,2.749,2.749,2.749,2.749,3.024,3.024,3.024,3.024,3.024,3.024,3.024,3.024,3.024,3.024,3.024,3.024,3.024,3.024,3.024,3.024,3.024,3.024,3.024,3.024,3.024,3.024,3.024,3.024,3.024,3.024,3.024,3.024,3.161,3.161,3.161,3.161,3.161,3.161,3.161,3.161,3.161,3.161,3.161,3.161,3.161,3.161,3.161,3.161,3.161,3.161,3.161,3.161,3.161,3.161,3.161,3.161,3.161,3.161,3.161,3.161,3.161,3.161,3.161,3.161,3.161,3.161,3.161,3.161,3.161,3.161,3.161,3.161,3.299,3.299,3.299,3.299,3.299,3.299,3.299,3.299,3.299,3.299,3.299,3.299,3.299,3.299,3.299,3.299,3.299,3.299,3.299,3.299,3.299,3.299,3.299,3.299,3.299,3.299,3.299,3.436,3.436,3.436,3.436,3.436,3.436,5.36,5.36,5.36,5.36,5.36,5.36,5.36,5.36,5.36,5.36,5.36,5.36,5.36,5.36,5.635,5.635,5.635,5.635,5.635,5.635,5.635,5.635,5.635,5.635,5.635],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.137,0.412,0,0.275,0,0,0.137,0.137,0,0,0,0.137,0.137,0.275,0.137,0.137,0,0.275,0.137,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.137,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.275,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.137,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.137,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.137,0,0,0,0,0,1.924,0,0,0,0,0,0,0,0,0,0,0,0,0,0.275,0,0,0,0,0,0,0,0,0,0],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.137,0.549,0.549,0.824,0.824,0.824,0.961,1.098,0.961,0.549,0.549,0.411,0.548,0.823,0.823,0.823,0.823,1.098,1.235,1.098,0.961,0.686,0.549,0.412,0.412,0.137,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.137,0.137,0.137,0.137,0.137,0.137,0.137,0.137,0,0,0,0,0,0,0,0,0,0,0,0,0,0.275,0.275,0.275,0.275,0.275,0.275,0.275,0.275,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.137,0.137,0.137,0.137,0.137,0.137,0.137,0.137,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.137,0.137,0.137,0.137,0.137,0.137,0.137,0.137,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.137,0.137,0.137,0.137,0.137,0.137,2.061,2.061,1.924,1.924,1.924,1.924,1.924,1.924,0,0,0,0,0,0,0.275,0.275,0.275,0.275,0.275,0.275,0.275,0.275,0,0,0],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.118,0.137,0.137,0.079,0.079,0.039,0.059,0.079,0.098,0.098,0.118,0.118,0.157,0.157,0.137,0.098,0.079,0.059,0.059,0.02,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.02,0.02,0.02,0.02,0.02,0.02,0.02,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.039,0.039,0.039,0.039,0.039,0.039,0.039,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.02,0.02,0.02,0.02,0.02,0.02,0.02,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.02,0.02,0.02,0.02,0.02,0.02,0.02,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.02,0.02,0.02,0.02,0.02,0.02,0.295,0.275,0.275,0.275,0.275,0.275,0.275,0,0,0,0,0,0,0,0.039,0.039,0.039,0.039,0.039,0.039,0.039,0,0,0,0]},{"iso":"LVA","continent":"Europe","population":1886202,"name":"Latvia","population_density":31.212,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,6,8,10,10,17,26,30,34,49,71,86,111,124,139,180,197,221,244,280,305,347,376,398,446,458,493,509,533,542,548,577,589,612,630,651,655,657,666,675,682,712,727,739,748,761,778,784,804,812,818,836,849,858,870,871,879,896,896,900,909,928,930,939,946,950,951,962,970,997,1008,1009,1012,1016,1025,1030,1046,1047,1049,1053,1057,1061,1064,1065,1066,1066,1071,1079,1082,1085,1086,1088,1088,1089,1092,1094,1096,1097,1097,1097,1098,1104,1108,1110,1111,1111,1111,1111,1111,1111,1112,1115,1116,1117,1118,1121,1122,1122,1123,1124,1127,1134,1141,1154,1165,1173,1173,1174,1174,1178,1179,1185,1189,1192,1192,1193,1197,1203,1205,1206,1219,1219,1220,1224,1228,1231,1238,1243,1246,1249,1257,1275,1281,1288,1290,1290,1293,1303,1307,1308,1315,1322,1323,1323,1326,1327,1330,1333,1337,1337,1342,1360,1366,1375,1381,1393,1396,1404,1406,1410,1416,1425,1428,1429,1432,1443,1448,1459,1464,1474,1477,1482,1486,1494,1498,1515,1525,1526,1560,1572,1594,1625,1654,1676,1697,1729,1824,1868,1945,2019,2086,2126,2194,2261,2370,2507,2596,2670,2765,2840,2942,3056,3204,3392,3450,3494,3609,3797,3958,4208,4467,4678,4757,4893,5144,5395,5679,5894,6136,6268,6439,6752,7119,7476,7880,8095,8187,8395,8848,9381,9836,10231,10547,10636,10914,11356,11722,12102,12744,13120,13236,13693,14273,15171,15808,16561,16975,17075,17687,18377,19307,19993,20787,21313,21520,22104,22816,23706,24386,25046,25675,25885,26472,27495,28535],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.53,0.53,0.53,0.53,0.53,0.53,1.06,3.181,4.241,5.302,5.302,9.013,13.784,15.905,18.026,25.978,37.642,45.594,58.848,65.741,73.693,95.43,104.443,117.167,129.36,148.446,161.701,183.968,199.342,211.006,236.454,242.816,261.372,269.854,282.578,287.35,290.531,305.906,312.268,324.462,334.005,345.138,347.259,348.319,353.09,357.862,361.573,377.478,385.431,391.793,396.564,403.456,412.469,415.65,426.253,430.495,433.676,443.219,450.111,454.882,461.244,461.775,466.016,475.029,475.029,477.149,481.921,491.994,493.054,497.826,501.537,503.658,504.188,510.02,514.261,528.575,534.407,534.937,536.528,538.649,543.42,546.071,554.554,555.084,556.144,558.265,560.385,562.506,564.097,564.627,565.157,565.157,567.808,572.049,573.64,575.23,575.76,576.821,576.821,577.351,578.941,580.002,581.062,581.592,581.592,581.592,582.122,585.303,587.424,588.484,589.014,589.014,589.014,589.014,589.014,589.014,589.544,591.135,591.665,592.195,592.725,594.316,594.846,594.846,595.376,595.906,597.497,601.208,604.919,611.811,617.643,621.885,621.885,622.415,622.415,624.535,625.066,628.247,630.367,631.958,631.958,632.488,634.609,637.79,638.85,639.38,646.272,646.272,646.802,648.923,651.044,652.634,656.345,658.996,660.587,662.177,666.419,675.962,679.143,682.854,683.914,683.914,685.505,690.806,692.927,693.457,697.168,700.879,701.409,701.409,703,703.53,705.121,706.711,708.832,708.832,711.483,721.026,724.207,728.978,732.159,738.521,740.112,744.353,745.413,747.534,750.715,755.486,757.077,757.607,759.198,765.029,767.68,773.512,776.163,781.465,783.055,785.706,787.827,792.068,794.189,803.201,808.503,809.033,827.059,833.421,845.084,861.52,876.894,888.558,899.692,916.657,967.023,990.35,1031.173,1070.405,1105.926,1127.133,1163.184,1198.705,1256.493,1329.126,1376.311,1415.543,1465.909,1505.671,1559.748,1620.187,1698.652,1798.323,1829.072,1852.4,1913.369,2013.04,2098.397,2230.938,2368.251,2480.116,2521.999,2594.102,2727.173,2860.245,3010.812,3124.798,3253.098,3323.08,3413.738,3579.68,3774.251,3963.52,4177.707,4291.693,4340.468,4450.743,4690.908,4973.486,5214.712,5424.127,5591.66,5638.845,5786.231,6020.564,6214.605,6416.068,6756.434,6955.777,7017.276,7259.562,7567.058,8043.147,8380.863,8780.078,8999.566,9052.583,9377.044,9742.859,10235.913,10599.607,11020.559,11299.426,11409.17,11718.787,12096.265,12568.113,12928.626,13278.535,13612.01,13723.345,14034.552,14576.912,15128.284],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.53,2.121,1.06,1.06,0,3.711,4.771,2.121,2.121,7.952,11.664,7.952,13.254,6.892,7.952,21.737,9.013,12.724,12.194,19.086,13.254,22.267,15.375,11.664,25.448,6.362,18.556,8.483,12.724,4.771,3.181,15.375,6.362,12.194,9.543,11.133,2.121,1.06,4.771,4.771,3.711,15.905,7.952,6.362,4.771,6.892,9.013,3.181,10.603,4.241,3.181,9.543,6.892,4.771,6.362,0.53,4.241,9.013,0,2.121,4.771,10.073,1.06,4.771,3.711,2.121,0.53,5.832,4.241,14.314,5.832,0.53,1.59,2.121,4.771,2.651,8.483,0.53,1.06,2.121,2.121,2.121,1.59,0.53,0.53,0,2.651,4.241,1.59,1.59,0.53,1.06,0,0.53,1.59,1.06,1.06,0.53,0,0,0.53,3.181,2.121,1.06,0.53,0,0,0,0,0,0.53,1.59,0.53,0.53,0.53,1.59,0.53,0,0.53,0.53,1.59,3.711,3.711,6.892,5.832,4.241,0,0.53,0,2.121,0.53,3.181,2.121,1.59,0,0.53,2.121,3.181,1.06,0.53,6.892,0,0.53,2.121,2.121,1.59,3.711,2.651,1.59,1.59,4.241,9.543,3.181,3.711,1.06,0,1.59,5.302,2.121,0.53,3.711,3.711,0.53,0,1.59,0.53,1.59,1.59,2.121,0,2.651,9.543,3.181,4.771,3.181,6.362,1.59,4.241,1.06,2.121,3.181,4.771,1.59,0.53,1.59,5.832,2.651,5.832,2.651,5.302,1.59,2.651,2.121,4.241,2.121,9.013,5.302,0.53,18.026,6.362,11.664,16.435,15.375,11.664,11.133,16.965,50.366,23.327,40.823,39.232,35.521,21.207,36.051,35.521,57.788,72.633,47.185,39.232,50.366,39.762,54.077,60.439,78.465,99.671,30.75,23.327,60.969,99.671,85.357,132.541,137.313,111.865,41.883,72.103,133.072,133.072,150.567,113.986,128.3,69.982,90.658,165.942,194.571,189.269,214.187,113.986,48.775,110.275,240.165,282.578,241.225,209.416,167.532,47.185,147.386,234.333,194.041,201.463,340.367,199.342,61.499,242.286,307.496,476.089,337.716,399.215,219.489,53.017,324.462,365.814,493.054,363.694,420.952,278.867,109.744,309.617,377.478,471.848,360.513,349.91,333.474,111.335,311.207,542.36,551.373],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.53,2.651,3.711,4.771,4.771,8.482,13.253,15.374,16.965,22.796,33.4,40.292,53.546,56.727,59.908,79.524,86.416,91.188,91.718,102.852,102.852,118.227,125.65,115.577,132.012,125.65,132.012,121.409,120.879,103.383,91.189,94.9,75.814,81.646,72.633,75.283,64.68,60.969,62.559,51.955,49.304,53.015,51.424,46.653,49.303,55.135,59.377,57.787,64.679,53.015,48.244,51.425,53.546,51.425,48.774,46.123,39.761,44.533,41.352,33.93,31.809,37.111,31.809,36.05,35.52,28.628,29.158,32.869,32.339,36.58,41.352,37.111,34.99,34.99,39.231,36.05,40.292,26.508,21.736,23.327,23.858,23.858,20.677,18.556,10.603,10.073,11.664,13.784,13.253,12.722,11.662,12.192,11.662,12.192,11.131,7.95,7.42,6.36,5.83,4.77,5.3,7.951,8.482,8.482,7.952,7.422,7.422,7.422,6.892,3.711,2.12,2.65,2.65,3.18,3.71,5.3,5.83,5.83,5.83,4.77,5.83,9.011,12.192,17.494,22.796,27.037,26.507,26.507,24.917,23.327,20.146,16.435,12.724,10.073,10.073,10.073,12.194,13.254,13.784,11.133,15.904,14.314,14.844,16.435,16.435,14.844,17.495,19.616,14.314,15.904,19.615,27.037,28.097,30.218,27.567,24.916,24.916,28.628,26.508,17.495,18.025,18.025,17.495,17.495,17.495,12.723,12.192,13.252,11.662,7.951,10.072,19.615,21.206,25.447,27.038,31.81,31.279,35.52,33.929,26.507,26.507,26.507,24.916,19.084,19.084,20.675,22.266,25.977,25.447,25.978,25.978,28.099,28.63,27.039,26.509,29.69,32.341,27.569,44.005,47.716,57.259,69.453,82.707,85.358,91.189,107.624,139.964,156.929,186.088,208.885,229.031,238.574,263.492,282.048,289.47,338.776,345.138,345.138,359.983,378.538,396.564,421.482,442.159,469.197,452.762,436.857,447.46,507.369,538.649,610.751,669.599,681.793,692.926,741.702,813.805,847.206,912.416,893.861,884.848,842.965,891.74,985.579,1047.078,1103.275,1166.895,1166.895,1087.37,1127.663,1277.17,1393.806,1440.46,1460.607,1413.952,1347.151,1445.762,1569.82,1523.696,1442.581,1541.723,1531.649,1425.616,1620.717,1780.827,2022.583,2166.258,2364.01,2243.132,2096.807,2359.77,2483.298,2668.856,2556.461,2639.697,2519.349,2409.604,2666.204,2719.22,2825.254,2692.713,2678.929,2591.451,2423.919,2625.382,2858.125,3032.02],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.076,0.379,0.53,0.682,0.682,1.212,1.893,2.121,2.121,3.105,4.62,5.756,7.119,7.422,8.255,11.058,11.209,11.361,11.967,12.8,13.709,15.754,14.845,15.223,17.041,16.208,16.132,15.451,14.087,12.573,11.361,9.922,9.922,9.013,9.164,8.937,8.558,8.255,6.741,6.513,5.302,6.211,5.756,6.362,6.892,7.195,7.801,7.725,6.968,6.438,5.983,6.665,6.665,6.059,6.513,5.074,5.074,5.908,4.544,3.863,3.863,4.393,4.469,4.544,3.787,4.09,3.863,4.014,3.181,5.074,5.226,4.771,4.696,4.923,4.771,4.544,3.711,2.954,3.03,3.105,3.105,2.727,2.575,1.439,1.439,1.288,1.363,1.666,1.59,1.59,1.59,1.666,1.666,1.363,0.985,0.909,0.833,0.833,0.682,0.682,0.682,0.909,1.06,1.06,1.06,1.06,1.06,0.985,0.53,0.227,0.151,0.303,0.379,0.454,0.53,0.757,0.833,0.757,0.606,0.606,0.757,1.212,1.515,2.424,3.257,3.787,3.711,3.56,3.03,2.802,1.893,1.515,1.212,1.439,1.363,1.439,1.439,1.818,1.515,1.288,2.045,2.045,2.045,2.045,1.893,1.969,2.424,1.818,2.045,2.196,2.499,3.56,3.787,3.787,3.56,3.332,3.332,3.484,2.424,2.045,2.045,2.424,2.499,2.272,1.742,1.515,1.666,1.363,1.136,1.06,1.439,2.575,2.954,3.408,3.635,4.241,4.469,4.696,3.484,3.332,3.105,3.332,2.651,2.499,2.121,2.802,2.878,3.257,2.954,3.484,3.635,3.787,3.257,3.484,2.954,3.863,3.863,3.711,5.908,6.513,7.574,9.619,10.528,11.436,12.951,12.8,19.086,20.752,24.236,27.644,31.053,32.492,35.218,33.098,38.02,42.565,43.701,44.231,48.397,48.927,51.578,51.956,52.789,60.287,59.076,55.213,58.243,64.756,68.316,76.041,81.418,93.006,95.657,97.248,102.019,108.835,111.411,108.078,110.426,114.44,117.091,121.787,130.572,136.101,150.416,148.371,145.341,148.144,158.747,171.319,178.742,178.06,185.71,185.482,190.784,189.951,177.303,171.622,190.33,194.874,196.919,210.476,220.928,261.22,280.685,289.092,291.97,290.758,302.498,310.829,313.252,316.963,320.069,328.551,336.655,334.535,336.201,333.171,332.717,322.568,330.369,330.596,330.824,354.378,365.739]},{"iso":"LBN","continent":"Asia","population":6825442,"name":"Lebanon","population_density":594.561,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,2,2,2,4,10,13,13,13,16,22,22,32,32,41,61,61,77,93,110,110,120,133,157,163,187,248,267,318,333,368,391,412,438,446,470,479,494,508,520,527,541,548,576,582,609,619,630,632,641,658,663,668,672,673,677,677,682,688,696,704,707,710,717,721,725,729,733,737,740,741,750,784,796,809,845,859,870,878,886,891,902,911,931,954,961,1024,1086,1097,1114,1119,1140,1161,1168,1172,1191,1220,1233,1242,1256,1306,1312,1320,1331,1350,1368,1388,1402,1422,1442,1446,1464,1473,1489,1495,1510,1536,1587,1603,1622,1644,1662,1697,1719,1740,1745,1778,1788,1796,1830,1855,1873,1885,1907,1946,2011,2082,2168,2334,2419,2451,2542,2599,2700,2775,2859,2905,2980,3104,3260,3407,3582,3750,3882,4023,4205,4334,4555,4730,4885,5062,5062,5417,5672,5951,6223,6517,6812,7121,7413,7711,8045,8442,8881,9337,9758,10347,10952,11580,12191,12698,13155,13687,14248,14937,15613,16275,16870,17308,17777,18375,18963,19490,20011,20426,20826,21324,21877,22437,22983,23669,24310,25401,25449,26083,26768,27518,28297,29303,29987,30852,31792,32819,33962,35242,36254,37272,38377,39634,40882,42173,43494,44482,45657,46918,48377,49744,51170,52558,53568,54624,55869,57246,58745,60113,61284,62286,62944,64336,65577,67027,68479,69906,71390,72186,73995,75845,77778,79529,81228,82617,83697,85209,87097,89186,91328,93097,94236,95355,96907,98829,100703,102607,104267,105430,106446,107953,110037,111946,113655,115283,116476,117517,118705,120341,122200,123982,125678,126944,127944,129455,131297,132817,134295,134295,137112,138096,139135,140409,142187,143705,145245,146520,147613,148877,150933,153049],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.147,0.147,0.147,0.147,0.147,0.293,0.293,0.293,0.586,1.465,1.905,1.905,1.905,2.344,3.223,3.223,4.688,4.688,6.007,8.937,8.937,11.281,13.625,16.116,16.116,17.581,19.486,23.002,23.881,27.397,36.335,39.118,46.59,48.788,53.916,57.286,60.362,64.172,65.344,68.86,70.179,72.376,74.427,76.186,77.211,79.262,80.288,84.39,85.269,89.225,90.69,92.302,92.595,93.913,96.404,97.137,97.869,98.455,98.602,99.188,99.188,99.92,100.799,101.971,103.144,103.583,104.023,105.048,105.634,106.22,106.806,107.392,107.978,108.418,108.564,109.883,114.864,116.622,118.527,123.802,125.853,127.464,128.636,129.808,130.541,132.153,133.471,136.401,139.771,140.797,150.027,159.111,160.722,163.213,163.945,167.022,170.099,171.124,171.71,174.494,178.743,180.648,181.966,184.017,191.343,192.222,193.394,195.006,197.789,200.427,203.357,205.408,208.338,211.268,211.854,214.492,215.81,218.154,219.033,221.231,225.04,232.512,234.857,237.64,240.864,243.501,248.629,251.852,254.929,255.661,260.496,261.961,263.133,268.115,271.777,274.414,276.173,279.396,285.11,294.633,305.035,317.635,341.956,354.409,359.098,372.43,380.781,395.579,406.567,418.874,425.613,436.602,454.769,477.625,499.162,524.801,549.415,568.754,589.412,616.077,634.977,667.356,692.995,715.705,741.637,741.637,793.648,831.008,871.885,911.736,954.81,998.031,1043.302,1086.084,1129.744,1178.678,1236.843,1301.161,1367.97,1429.651,1515.946,1604.585,1696.593,1786.111,1860.392,1927.348,2005.291,2087.484,2188.43,2287.471,2384.461,2471.635,2535.806,2604.52,2692.133,2778.282,2855.493,2931.825,2992.627,3051.231,3124.193,3205.214,3287.26,3367.254,3467.761,3561.674,3721.517,3728.55,3821.437,3921.797,4031.68,4145.812,4293.202,4393.415,4520.147,4657.867,4808.333,4975.795,5163.329,5311.597,5460.745,5622.64,5806.803,5989.649,6178.794,6372.335,6517.087,6689.237,6873.987,7087.746,7288.026,7496.95,7700.307,7848.283,8002.998,8185.404,8387.149,8606.769,8807.195,8978.759,9125.563,9221.967,9425.91,9607.729,9820.17,10032.903,10241.974,10459.396,10576.018,10841.056,11112.101,11395.306,11651.846,11900.768,12104.271,12262.503,12484.027,12760.639,13066.7,13380.525,13639.703,13806.578,13970.524,14197.908,14479.502,14754.063,15033.019,15276.227,15446.619,15595.474,15816.265,16121.593,16401.282,16651.669,16890.188,17064.975,17217.493,17391.548,17631.239,17903.602,18164.684,18413.167,18598.649,18745.16,18966.537,19236.41,19459.106,19675.649,19675.649,20088.369,20232.536,20384.76,20571.415,20831.911,21054.314,21279.941,21466.742,21626.878,21812.067,22113.293,22423.31],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.147,0,0,0.293,0.879,0.44,0,0,0.44,0.879,0,1.465,0,1.319,2.93,0,2.344,2.344,2.491,0,1.465,1.905,3.516,0.879,3.516,8.937,2.784,7.472,2.198,5.128,3.37,3.077,3.809,1.172,3.516,1.319,2.198,2.051,1.758,1.026,2.051,1.026,4.102,0.879,3.956,1.465,1.612,0.293,1.319,2.491,0.733,0.733,0.586,0.147,0.586,0,0.733,0.879,1.172,1.172,0.44,0.44,1.026,0.586,0.586,0.586,0.586,0.586,0.44,0.147,1.319,4.981,1.758,1.905,5.274,2.051,1.612,1.172,1.172,0.733,1.612,1.319,2.93,3.37,1.026,9.23,9.084,1.612,2.491,0.733,3.077,3.077,1.026,0.586,2.784,4.249,1.905,1.319,2.051,7.326,0.879,1.172,1.612,2.784,2.637,2.93,2.051,2.93,2.93,0.586,2.637,1.319,2.344,0.879,2.198,3.809,7.472,2.344,2.784,3.223,2.637,5.128,3.223,3.077,0.733,4.835,1.465,1.172,4.981,3.663,2.637,1.758,3.223,5.714,9.523,10.402,12.6,24.321,12.453,4.688,13.332,8.351,14.798,10.988,12.307,6.739,10.988,18.167,22.856,21.537,25.639,24.614,19.339,20.658,26.665,18.9,32.379,25.639,22.709,25.932,0,52.011,37.36,40.876,39.851,43.074,43.221,45.272,42.781,43.66,48.935,58.165,64.318,66.809,61.681,86.295,88.639,92.009,89.518,74.281,66.955,77.944,82.192,100.946,99.041,96.99,87.174,64.172,68.713,87.613,86.148,77.211,76.332,60.802,58.604,72.962,81.02,82.046,79.995,100.506,93.913,159.843,7.033,92.888,100.36,109.883,114.132,147.39,100.213,126.732,137.72,150.466,167.462,187.534,148.269,149.148,161.894,184.164,182.845,189.145,193.541,144.753,172.15,184.75,213.759,200.28,208.924,203.357,147.976,154.715,182.406,201.745,219.619,200.427,171.564,146.804,96.404,203.943,181.82,212.44,212.733,209.071,217.422,116.622,265.038,271.045,283.205,256.54,248.922,203.503,158.232,221.524,276.612,306.061,313.826,259.177,166.876,163.945,227.385,281.593,274.561,278.956,243.208,170.392,148.855,220.792,305.328,279.689,250.387,238.519,174.787,152.518,174.055,239.691,272.363,261.082,248.482,185.482,146.511,221.378,269.873,222.696,216.543,0,412.721,144.166,152.225,186.655,260.496,222.403,225.626,186.801,160.136,185.189,301.226,310.017],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.147,0.147,0.147,0.44,1.319,1.759,1.759,1.759,2.052,2.931,2.931,4.103,3.224,4.103,7.033,7.033,8.937,10.402,12.893,11.428,12.893,13.479,14.065,14.944,16.116,22.709,23.002,30.474,31.207,34.43,34.284,36.482,36.775,29.01,29.742,23.589,23.589,20.512,18.9,16.849,15.091,14.945,15.531,15.091,16.849,16.263,16.117,15.384,14.652,16.117,12.748,12.602,9.232,7.914,6.888,6.595,6.009,4.397,4.836,5.275,5.129,5.422,5.862,6.448,6.301,6.008,5.422,4.836,4.836,4.543,4.836,9.231,10.403,11.722,16.41,17.875,19.047,20.072,19.925,15.677,15.531,14.945,12.601,13.92,13.334,21.392,29.304,30.183,31.062,30.476,30.623,30.33,30.33,21.686,15.386,18.023,17.437,18.023,16.997,21.246,21.099,21.685,20.513,19.048,19.78,21.391,21.391,16.995,19.046,18.46,19.485,18.02,17.727,15.676,15.823,16.702,21.244,23.002,23.149,25.053,25.346,29.595,30.62,29.888,23.149,25.64,24.321,22.27,24.614,23.149,22.563,21.244,23.734,24.613,32.671,41.901,49.52,70.178,79.994,82.924,93.033,95.67,100.945,101.531,101.238,83.656,82.191,95.67,105.194,118.38,129.221,142.847,149.879,163.798,179.475,180.208,189.731,193.833,190.903,192.221,172.882,204.235,214.93,236.906,244.378,261.813,282.325,301.665,344.446,336.095,347.67,364.959,389.426,413.161,431.621,472.644,518.502,566.851,607.434,623.55,626.187,637.322,657.833,672.484,682.886,687.867,685.523,675.414,677.172,686.841,690.797,667.062,644.353,608.165,579.595,588.385,600.692,595.125,588.972,612.267,629.848,728.889,677.318,697.244,716.584,744.421,778.558,825.442,831.742,798.631,929.318,986.896,1053.998,1131.649,1165.786,1167.544,1229.225,1286.657,1331.782,1370.461,1396.54,1353.759,1377.64,1413.242,1465.107,1481.223,1507.302,1521.514,1475.949,1485.911,1496.167,1513.162,1519.022,1519.169,1481.809,1425.256,1373.684,1422.912,1422.326,1433.021,1426.135,1434.779,1480.637,1450.455,1619.089,1686.191,1787.576,1831.676,1867.865,1862.297,1803.107,1908.009,1919.583,1954.599,1985.22,1987.857,1905.811,1866.253,1935.406,1995.475,1993.424,1966.319,1895.701,1806.916,1788.895,1845.742,1923.685,1921.781,1897.607,1857.17,1788.749,1770.875,1796.075,1814.974,1782.009,1763.402,1761.497,1708.46,1680.184,1749.044,1844.862,1827.867,1772.047,1510.965,1675.204,1633.888,1639.602,1604.879,1595.502,1595.209,1604.292,1791.093,1538.508,1579.531,1728.532,1851.894],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.021,0.021,0.063,0.188,0.251,0.251,0.23,0.293,0.419,0.377,0.46,0.398,0.586,1.005,0.942,1.151,1.486,1.633,1.633,1.653,1.507,2.009,1.8,1.967,2.888,3.286,4.144,4.186,4.416,4.772,4.709,3.977,3.746,3.181,3.056,2.637,2.449,2.26,1.863,1.988,1.633,2.03,1.842,2.114,2.072,2.156,1.905,1.946,1.716,1.695,1.235,1.109,0.9,0.942,0.753,0.502,0.523,0.586,0.67,0.712,0.691,0.837,0.816,0.774,0.691,0.607,0.628,0.628,0.502,0.607,1.235,1.402,1.591,2.26,2.491,2.7,2.679,2.135,1.988,1.946,1.381,1.507,1.758,1.737,2.888,4.081,4.081,4.249,3.935,3.893,4.186,3.014,1.8,1.967,2.219,2.386,2.135,1.988,2.888,2.93,2.7,2.323,2.449,2.637,2.763,2.009,2.302,2.553,2.407,2.386,2.198,2.114,1.946,1.842,1.967,2.951,2.909,3.119,3.244,3.495,3.914,3.83,3.202,2.972,3.265,3.014,2.805,2.784,2.846,2.784,2.93,2.7,3.307,4.5,5.274,6.551,9.649,11.177,11.386,12.474,12.307,12.935,12.705,10.988,10.172,11.072,11.763,13.835,14.798,16.891,18.649,20.449,21.83,23.044,22.479,24.028,24.028,23.756,24.698,21.746,25.367,28.004,29.218,31.249,34.158,36.628,43.095,41.776,42.676,43.828,46.444,49.479,52.848,55.193,61.409,67.834,73.988,78.467,79.89,79.911,82.234,81.648,83.406,84.411,85.479,87.32,86.923,85.604,86.378,84.265,81.146,78.195,74.427,73.632,74.239,73.297,72.711,73.109,76.562,81.292,95.755,86.337,88.032,90.648,94.918,96.864,104.504,95.985,113.085,119.49,126.648,134.874,145.36,145.485,152.476,157.499,164.134,168.759,171.857,172.715,172.213,175.499,178.764,182.992,185.482,188.308,189.71,190.171,187.68,187.345,185.629,188.392,187.178,182.636,182.469,174.138,177.215,174.369,173.343,175.101,180.459,190.548,193.436,202.164,214.91,225.019,231.278,236.971,234.982,240.926,234.71,235.505,238.771,246.954,248.419,243.187,244.003,244.84,245.552,241.052,236.071,233.789,234.291,232.136,231.194,234.584,235.317,231.236,230.566,231.194,231.717,225.04,215.664,214.617,216.145,217.568,219.096,218.238,224.999,229.31,222.215,215.852,180.355,212.817,212.482,202.603,190.715,196.115,196.952,229.185,196.91,199.192,203.901,220.268,227.343]},{"iso":"LSO","continent":"Africa","population":2142252,"name":"Lesotho","population_density":73.562,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,12,17,17,17,24,24,27,27,27,35,35,35,35,79,91,91,91,134,184,184,233,245,256,256,256,311,359,359,359,359,359,359,359,419,505,505,505,576,604,604,702,718,718,726,726,742,742,742,742,781,781,798,884,884,903,903,946,946,946,996,1015,1015,1015,1015,1049,1051,1051,1051,1051,1085,1085,1085,1085,1085,1148,1148,1148,1148,1148,1164,1164,1245,1245,1245,1245,1327,1327,1327,1390,1390,1424,1424,1424,1507,1554,1558,1558,1558,1565,1576,1595,1639,1680,1680,1683,1683,1683,1767,1786,1800,1800,1805,1805,1822,1833,1833,1833,1833,1833,1833,1918,1918,1923,1934,1940,1940,1943,1947,1947,1947,1953,1953,1953,1961,1961,1963,1963,1967,1967,1967,1967,2026,2026,2026,2041,2041,2041,2041,2052,2058,2065,2066,2085,2086,2086,2092,2092,2109,2109,2109,2109,2109,2137,2142,2145,2150,2150,2150,2150,2150,2164,2178,2214,2250,2250,2277,2307,2365,2400],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.467,0.467,0.467,0.467,0.467,0.467,0.467,0.467,0.467,0.934,0.934,0.934,0.934,0.934,0.934,0.934,0.934,0.934,0.934,0.934,0.934,1.867,1.867,1.867,1.867,1.867,1.867,1.867,1.867,1.867,1.867,1.867,1.867,1.867,1.867,1.867,1.867,1.867,1.867,1.867,5.602,7.936,7.936,7.936,11.203,11.203,12.604,12.604,12.604,16.338,16.338,16.338,16.338,36.877,42.479,42.479,42.479,62.551,85.891,85.891,108.764,114.366,119.5,119.5,119.5,145.174,167.581,167.581,167.581,167.581,167.581,167.581,167.581,195.589,235.733,235.733,235.733,268.876,281.946,281.946,327.693,335.161,335.161,338.896,338.896,346.364,346.364,346.364,346.364,364.57,364.57,372.505,412.65,412.65,421.519,421.519,441.591,441.591,441.591,464.931,473.8,473.8,473.8,473.8,489.672,490.605,490.605,490.605,490.605,506.476,506.476,506.476,506.476,506.476,535.885,535.885,535.885,535.885,535.885,543.353,543.353,581.164,581.164,581.164,581.164,619.442,619.442,619.442,648.85,648.85,664.721,664.721,664.721,703.465,725.405,727.272,727.272,727.272,730.54,735.674,744.544,765.083,784.221,784.221,785.622,785.622,785.622,824.833,833.702,840.237,840.237,842.571,842.571,850.507,855.642,855.642,855.642,855.642,855.642,855.642,895.32,895.32,897.653,902.788,905.589,905.589,906.989,908.857,908.857,908.857,911.657,911.657,911.657,915.392,915.392,916.325,916.325,918.193,918.193,918.193,918.193,945.734,945.734,945.734,952.736,952.736,952.736,952.736,957.871,960.671,963.939,964.406,973.275,973.742,973.742,976.542,976.542,984.478,984.478,984.478,984.478,984.478,997.548,999.882,1001.283,1003.617,1003.617,1003.617,1003.617,1003.617,1010.152,1016.687,1033.492,1050.297,1050.297,1062.9,1076.904,1103.978,1120.316],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.467,0,0,0,0,0,0,0,0,0,0,0,0.934,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.734,2.334,0,0,3.268,0,1.4,0,0,3.734,0,0,0,20.539,5.602,0,0,20.072,23.34,0,22.873,5.602,5.135,0,0,25.674,22.406,0,0,0,0,0,0,28.008,40.145,0,0,33.143,13.07,0,45.746,7.469,0,3.734,0,7.469,0,0,0,18.205,0,7.936,40.145,0,8.869,0,20.072,0,0,23.34,8.869,0,0,0,15.871,0.934,0,0,0,15.871,0,0,0,0,29.408,0,0,0,0,7.469,0,37.811,0,0,0,38.277,0,0,29.408,0,15.871,0,0,38.744,21.94,1.867,0,0,3.268,5.135,8.869,20.539,19.139,0,1.4,0,0,39.211,8.869,6.535,0,2.334,0,7.936,5.135,0,0,0,0,0,39.678,0,2.334,5.135,2.801,0,1.4,1.867,0,0,2.801,0,0,3.734,0,0.934,0,1.867,0,0,0,27.541,0,0,7.002,0,0,0,5.135,2.801,3.268,0.467,8.869,0.467,0,2.801,0,7.936,0,0,0,0,13.07,2.334,1.4,2.334,0,0,0,0,6.535,6.535,16.805,16.805,0,12.604,14.004,27.074,16.338],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.467,0.467,0.467,0.467,0.467,0.467,0.467,0.467,0,0,0,0,0.934,0.934,0.934,0.934,0.934,0.934,0.934,0.934,0,0,0,0,0,0,0,0,0,0,0,3.734,6.068,6.068,6.068,9.336,9.336,10.736,10.736,7.002,8.402,8.402,8.402,5.134,25.673,29.875,29.875,29.875,46.213,69.553,69.553,92.426,77.489,77.022,77.022,77.022,82.624,81.69,81.69,58.817,53.215,48.08,48.08,48.08,50.414,68.153,68.153,68.153,101.296,114.366,114.366,160.112,139.573,99.428,103.162,103.162,77.488,64.418,64.418,18.672,29.408,29.408,33.61,73.755,66.286,75.155,75.155,95.227,77.022,77.022,92.426,61.15,61.15,52.281,52.281,48.08,49.014,49.014,25.674,16.805,32.676,32.676,32.676,16.805,15.871,45.279,45.279,45.279,29.408,29.408,36.877,36.877,74.688,45.28,45.28,45.28,83.557,83.557,76.088,105.496,67.685,83.556,83.556,83.556,84.023,105.963,107.83,78.422,78.422,65.819,70.954,79.823,61.618,58.817,56.95,58.35,58.35,55.082,89.158,89.158,75.154,56.015,58.349,56.949,64.885,70.02,30.809,21.94,15.405,15.405,13.071,52.749,44.813,42.012,47.147,49.948,49.948,51.348,53.215,13.537,13.537,14.004,8.869,6.068,9.802,8.402,7.469,7.469,9.336,6.535,6.535,6.535,30.342,30.342,29.408,36.41,34.543,34.543,34.543,39.678,14.938,18.206,18.673,20.54,21.007,21.007,23.808,18.673,23.808,20.54,20.073,11.204,10.737,23.807,23.34,24.74,19.138,19.138,19.138,19.138,19.138,12.603,16.804,32.209,46.68,46.68,59.284,73.288,100.362,110.165],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.067,0.067,0.067,0.067,0.067,0.067,0.067,0,0,0,0,0,0.133,0.133,0.133,0.133,0.133,0.133,0.133,0,0,0,0,0,0,0,0,0,0,0,0,0.533,0.867,0.867,0.867,1.334,1.334,1.534,1,0.667,1.2,1.2,0.734,0.734,3.468,4.268,4.268,3.734,6.602,9.936,9.936,10.27,10.27,11.003,11.003,8.136,8.469,11.67,8.402,7.602,6.869,6.869,6.869,3.201,4.001,9.736,9.736,9.736,14.471,16.338,16.338,18.872,14.204,14.204,14.737,10.003,9.203,9.203,2.667,1.6,4.201,3.668,4.801,9.469,9.469,10.736,10.736,11.003,11.003,9.869,7.469,8.736,7.469,7.469,4.601,6.869,7.002,3.668,2.401,2.401,4.668,4.668,2.401,2.267,2.267,6.468,6.468,4.201,4.201,4.201,5.268,5.268,6.468,6.468,6.468,6.468,11.937,10.87,10.87,9.669,9.669,11.937,11.937,6.468,12.003,15.138,11.203,11.203,8.936,9.403,10.136,5.868,5.668,8.136,8.136,8.336,7.869,7.135,11.47,9.803,8.002,8.002,8.136,8.136,9.269,4.401,3.134,2.201,2.201,1.867,1.867,6.402,5.668,6.002,6.735,7.135,7.135,7.335,1.934,1.934,1.6,1.267,0.867,0.867,1.2,0.934,1.067,1.067,0.934,0.934,0.934,0.4,4.335,4.201,4.201,4.935,4.935,4.935,4.935,1.734,2.134,2.601,1.667,2.934,3.001,3.001,2.667,2.267,2.934,2.867,1.6,1.534,1.534,3.001,3.334,2.401,2.734,2.734,2.734,2.734,0.867,1.467,2.201,4.268,6.669,6.669,8.469,10.47,13.404,14.804]},{"iso":"LBR","continent":"Africa","population":5057677,"name":"Liberia","population_density":49.127,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,2,2,3,3,3,3,3,3,3,3,3,3,3,6,6,7,10,13,14,14,31,31,37,48,50,59,59,59,59,76,76,91,99,101,101,101,117,120,124,124,141,141,141,152,154,158,166,170,178,189,199,199,199,211,211,213,215,219,223,226,229,233,238,240,249,255,265,265,266,266,269,273,280,288,296,311,316,321,334,345,359,370,383,397,410,421,446,458,498,509,516,542,581,601,626,650,652,662,681,684,729,768,770,780,804,819,833,869,874,891,917,926,957,963,998,1010,1024,1024,1056,1070,1085,1088,1091,1107,1108,1114,1117,1135,1155,1162,1167,1177,1179,1181,1186,1189,1207,1214,1216,1221,1224,1230,1234,1237,1240,1250,1252,1252,1252,1257,1257,1277,1282,1282,1284,1285,1286,1286,1290,1295,1298,1298,1298,1304,1304,1304,1305,1305,1306,1306,1306,1307,1311,1311,1313,1315,1315,1316,1319,1321,1327,1332,1333,1334,1335,1335,1336,1336,1337,1338,1338,1338,1339,1342,1343,1343,1343,1346,1347,1348,1354,1354,1355,1360,1360,1363,1363,1371,1371,1372,1374,1377,1377,1377,1381,1384,1385,1385,1393,1393,1393,1416,1419,1419,1426,1426,1426,1426,1436,1436,1438,1440,1442,1442,1442,1452,1461,1461,1468,1491,1498,1507,1512,1512,1528,1539,1551,1551,1551,1551,1551,1578,1591,1595,1595,1595,1595,1595,1595,1663,1676,1676,1676,1676,1676,1676,1676,1676,1676,1676,1676,1676,1773,1779],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.198,0.198,0.395,0.395,0.395,0.593,0.593,0.593,0.593,0.593,0.593,0.593,0.593,0.593,0.593,0.593,1.186,1.186,1.384,1.977,2.57,2.768,2.768,6.129,6.129,7.316,9.491,9.886,11.665,11.665,11.665,11.665,15.027,15.027,17.992,19.574,19.97,19.97,19.97,23.133,23.726,24.517,24.517,27.878,27.878,27.878,30.053,30.449,31.24,32.821,33.612,35.194,37.369,39.346,39.346,39.346,41.719,41.719,42.114,42.51,43.301,44.091,44.685,45.278,46.069,47.057,47.453,49.232,50.418,52.396,52.396,52.593,52.593,53.186,53.977,55.361,56.943,58.525,61.491,62.479,63.468,66.038,68.213,70.981,73.156,75.726,78.495,81.065,83.24,88.183,90.555,98.464,100.639,102.023,107.164,114.875,118.829,123.772,128.517,128.913,130.89,134.647,135.24,144.137,151.848,152.244,154.221,158.966,161.932,164.7,171.818,172.807,176.168,181.309,183.088,189.217,190.404,197.324,199.696,202.464,202.464,208.792,211.56,214.525,215.119,215.712,218.875,219.073,220.259,220.852,224.411,228.366,229.75,230.738,232.716,233.111,233.506,234.495,235.088,238.647,240.031,240.427,241.415,242.008,243.195,243.986,244.579,245.172,247.149,247.544,247.544,247.544,248.533,248.533,252.487,253.476,253.476,253.871,254.069,254.267,254.267,255.058,256.046,256.64,256.64,256.64,257.826,257.826,257.826,258.024,258.024,258.221,258.221,258.221,258.419,259.21,259.21,259.605,260.001,260.001,260.199,260.792,261.187,262.373,263.362,263.56,263.757,263.955,263.955,264.153,264.153,264.351,264.548,264.548,264.548,264.746,265.339,265.537,265.537,265.537,266.13,266.328,266.526,267.712,267.712,267.91,268.898,268.898,269.491,269.491,271.073,271.073,271.271,271.666,272.259,272.259,272.259,273.05,273.643,273.841,273.841,275.423,275.423,275.423,279.97,280.564,280.564,281.948,281.948,281.948,281.948,283.925,283.925,284.32,284.716,285.111,285.111,285.111,287.088,288.868,288.868,290.252,294.799,296.183,297.963,298.951,298.951,302.115,304.29,306.663,306.663,306.663,306.663,306.663,312.001,314.571,315.362,315.362,315.362,315.362,315.362,315.362,328.807,331.377,331.377,331.377,331.377,331.377,331.377,331.377,331.377,331.377,331.377,331.377,331.377,350.556,351.743],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.198,0,0,0.198,0,0,0,0,0,0,0,0,0,0,0.593,0,0.198,0.593,0.593,0.198,0,3.361,0,1.186,2.175,0.395,1.779,0,0,0,3.361,0,2.966,1.582,0.395,0,0,3.164,0.593,0.791,0,3.361,0,0,2.175,0.395,0.791,1.582,0.791,1.582,2.175,1.977,0,0,2.373,0,0.395,0.395,0.791,0.791,0.593,0.593,0.791,0.989,0.395,1.779,1.186,1.977,0,0.198,0,0.593,0.791,1.384,1.582,1.582,2.966,0.989,0.989,2.57,2.175,2.768,2.175,2.57,2.768,2.57,2.175,4.943,2.373,7.909,2.175,1.384,5.141,7.711,3.954,4.943,4.745,0.395,1.977,3.757,0.593,8.897,7.711,0.395,1.977,4.745,2.966,2.768,7.118,0.989,3.361,5.141,1.779,6.129,1.186,6.92,2.373,2.768,0,6.327,2.768,2.966,0.593,0.593,3.164,0.198,1.186,0.593,3.559,3.954,1.384,0.989,1.977,0.395,0.395,0.989,0.593,3.559,1.384,0.395,0.989,0.593,1.186,0.791,0.593,0.593,1.977,0.395,0,0,0.989,0,3.954,0.989,0,0.395,0.198,0.198,0,0.791,0.989,0.593,0,0,1.186,0,0,0.198,0,0.198,0,0,0.198,0.791,0,0.395,0.395,0,0.198,0.593,0.395,1.186,0.989,0.198,0.198,0.198,0,0.198,0,0.198,0.198,0,0,0.198,0.593,0.198,0,0,0.593,0.198,0.198,1.186,0,0.198,0.989,0,0.593,0,1.582,0,0.198,0.395,0.593,0,0,0.791,0.593,0.198,0,1.582,0,0,4.548,0.593,0,1.384,0,0,0,1.977,0,0.395,0.395,0.395,0,0,1.977,1.779,0,1.384,4.548,1.384,1.779,0.989,0,3.164,2.175,2.373,0,0,0,0,5.338,2.57,0.791,0,0,0,0,0,13.445,2.57,0,0,0,0,0,0,0,0,0,0,0,19.179,1.186],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.198,0.198,0.198,0.396,0.396,0.396,0.396,0.396,0.198,0.198,0.198,0,0,0,0.593,0.593,0.791,1.384,1.977,2.175,2.175,5.536,4.943,6.129,8.106,7.908,9.094,8.896,8.896,5.535,8.896,7.71,8.501,9.688,8.304,8.304,8.304,11.468,8.7,9.491,6.525,8.304,7.909,7.909,10.084,7.315,7.513,8.304,9.095,7.316,9.491,11.468,9.293,8.898,10.48,8.898,8.502,7.315,5.931,4.745,5.338,5.931,4.349,5.338,5.338,6.722,7.117,8.303,7.71,7.315,6.524,6.128,6.524,6.129,6.525,6.13,9.096,9.887,10.876,12.853,14.237,15.621,16.214,17.202,17.004,18.585,19.771,22.144,22.342,27.483,27.483,26.297,28.67,33.811,35.59,35.59,37.962,30.448,30.25,32.623,28.075,29.261,33.018,28.47,25.702,30.052,31.041,30.052,36.577,28.669,24.319,29.065,28.867,30.251,28.471,32.623,27.878,29.657,26.296,27.482,28.471,25.308,24.715,18.388,19.179,16.609,17.795,12.061,12.852,13.84,14.631,15.027,13.84,14.037,13.246,13.642,10.676,10.281,10.281,9.687,8.699,8.897,9.688,9.49,9.49,6.524,7.117,7.117,6.128,5.535,5.338,4.547,7.908,8.304,6.327,6.327,6.525,6.723,5.734,6.525,3.56,3.164,3.164,2.769,3.757,3.559,3.559,2.966,1.977,1.582,1.582,1.582,0.594,1.385,1.385,1.582,1.977,1.779,1.977,2.57,2.767,3.162,4.151,3.954,3.757,3.955,3.757,3.362,2.967,1.979,1.188,0.99,0.792,0.792,1.385,1.385,1.385,1.187,1.582,1.78,1.978,2.966,2.373,2.373,3.362,3.362,3.362,3.164,4.548,3.362,3.56,3.757,3.361,3.361,2.768,3.559,2.57,2.768,2.57,3.757,3.164,3.164,7.712,7.514,6.921,8.107,8.107,6.525,6.525,8.502,3.954,3.756,4.151,3.162,3.162,3.162,5.139,4.941,4.941,5.93,10.083,11.072,12.851,13.84,11.863,13.248,15.423,16.412,11.864,10.48,8.701,7.712,13.05,12.456,11.072,8.699,8.699,8.699,8.699,8.699,16.806,16.806,16.015,16.015,16.015,16.015,16.015,16.015,2.57,0,0,0,0,19.179,20.365],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.056,0.056,0.056,0.028,0.028,0.028,0,0,0,0,0.085,0.085,0.113,0.198,0.282,0.311,0.311,0.706,0.706,0.847,1.073,1.045,1.271,1.271,0.791,0.791,1.102,0.791,1.158,1.13,1.186,1.186,1.186,1.158,1.243,0.932,0.706,1.13,1.13,1.13,0.989,0.96,0.96,1.186,0.819,1.045,1.356,1.328,1.271,1.158,1.271,1.158,0.989,0.734,0.565,0.678,0.763,0.508,0.621,0.706,0.706,0.847,0.904,1.102,1.017,0.932,0.791,0.819,0.678,0.706,0.65,0.876,1.271,1.412,1.469,1.723,1.836,2.005,2.09,2.034,2.288,2.514,2.457,2.853,2.796,3.615,3.559,3.361,3.728,4.519,4.378,4.745,4.293,4.039,4.124,3.926,2.909,3.615,4.011,3.389,3.615,4.011,3.898,4.209,3.954,2.994,3.418,3.87,3.446,3.898,3.672,3.644,3.841,3.757,3.022,3.672,3.192,3.446,2.542,2.288,2.344,2.373,1.638,1.328,1.412,1.892,2.005,1.695,1.949,1.836,1.808,1.441,0.96,1.271,1.328,1.102,1.186,1.215,1.243,1.271,0.847,0.734,0.96,0.876,0.791,0.621,0.65,0.565,1.045,0.904,0.847,0.904,0.932,0.819,0.819,0.367,0.367,0.452,0.395,0.367,0.508,0.508,0.395,0.282,0.198,0.226,0.226,0.056,0.085,0.198,0.169,0.226,0.254,0.254,0.282,0.339,0.282,0.452,0.537,0.508,0.537,0.537,0.452,0.424,0.254,0.141,0.141,0.113,0.085,0.113,0.169,0.198,0.169,0.141,0.226,0.254,0.254,0.339,0.311,0.339,0.48,0.395,0.452,0.424,0.48,0.48,0.48,0.395,0.48,0.395,0.395,0.282,0.367,0.367,0.311,0.452,0.452,0.452,0.989,0.989,0.96,1.158,0.932,0.932,0.932,0.565,0.48,0.537,0.395,0.452,0.452,0.452,0.452,0.706,0.65,0.791,1.384,1.582,1.836,1.695,1.441,1.892,2.005,1.695,1.497,1.243,1.102,1.102,1.412,1.469,1.243,1.243,1.243,1.243,1.243,0.48,2.034,2.288,2.288,2.288,2.288,2.288,2.288,0.367,0,0,0,0,0,2.74,2.909]},{"iso":"LBY","continent":"Africa","population":6871287,"name":"Libya","population_density":3.623,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,3,8,8,10,10,11,11,18,18,19,20,21,24,24,24,25,26,35,48,49,49,49,51,51,51,59,60,61,61,61,61,61,61,61,63,63,63,63,63,64,64,64,64,64,64,64,64,64,64,65,65,65,68,69,71,72,75,75,75,77,99,105,118,130,156,168,182,196,209,239,256,256,332,359,378,393,409,418,454,467,484,500,510,520,544,571,595,639,670,698,713,727,762,802,824,874,891,918,989,1046,1117,1182,1268,1342,1342,1389,1433,1512,1563,1589,1652,1704,1791,1866,1980,2088,2176,2314,2424,2547,2669,2827,3017,3222,3438,3621,3691,3837,4063,4224,4475,4879,5079,5232,5451,5929,6302,6611,7050,7327,7738,8172,8579,9068,9463,9707,10121,10437,10437,11009,11281,11834,12274,12629,12958,13423,13966,14624,15156,15773,16445,17094,17749,18834,19583,20462,20939,21908,22348,22781,23515,24144,24936,25822,26438,27234,27949,28796,29446,30097,30632,31290,31828,32364,33213,34014,34525,35208,35717,36087,36809,37437,38468,39513,40292,41368,41686,42712,43821,44985,45821,46676,47845,47845,48790,49949,50906,51625,52620,53384,54374,56013,57223,57975,58874,59656,60628,61095,62045,62907,63688,64587,65440,66444,67039,68117,69040,70010,70885,71804,72628,72628,73602,74324,74936,75465,76006,76808,76808,77823,78473,79180,79797,80407,81273,81273,82430,82809,83417,84087,84849,85529,85529,86580,87097,87986,88522,89183,89880,89880,90779,91357,92017,92577,93283],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.146,0.146,0.146,0.146,0.437,1.164,1.164,1.455,1.455,1.601,1.601,2.62,2.62,2.765,2.911,3.056,3.493,3.493,3.493,3.638,3.784,5.094,6.986,7.131,7.131,7.131,7.422,7.422,7.422,8.586,8.732,8.878,8.878,8.878,8.878,8.878,8.878,8.878,9.169,9.169,9.169,9.169,9.169,9.314,9.314,9.314,9.314,9.314,9.314,9.314,9.314,9.314,9.314,9.46,9.46,9.46,9.896,10.042,10.333,10.478,10.915,10.915,10.915,11.206,14.408,15.281,17.173,18.919,22.703,24.45,26.487,28.524,30.416,34.782,37.256,37.256,48.317,52.246,55.012,57.195,59.523,60.833,66.072,67.964,70.438,72.767,74.222,75.677,79.17,83.099,86.592,92.996,97.507,101.582,103.765,105.803,110.896,116.718,119.919,127.196,129.67,133.599,143.932,152.228,162.561,172.02,184.536,195.305,195.305,202.146,208.549,220.046,227.468,231.252,240.421,247.988,260.65,271.565,288.156,303.873,316.68,336.764,352.772,370.673,388.428,411.422,439.073,468.908,500.343,526.976,537.163,558.411,591.301,614.732,651.261,710.056,739.163,761.429,793.301,862.866,917.15,962.12,1026.009,1066.321,1126.135,1189.297,1248.529,1319.695,1377.18,1412.69,1472.941,1518.929,1518.929,1602.174,1641.759,1722.239,1786.274,1837.938,1885.818,1953.491,2032.516,2128.277,2205.7,2295.494,2393.293,2487.744,2583.068,2740.971,2849.976,2977.899,3047.319,3188.34,3252.375,3315.391,3422.212,3513.752,3629.014,3757.957,3847.605,3963.45,4067.506,4190.772,4285.369,4380.111,4457.971,4553.732,4632.029,4710.035,4833.592,4950.164,5024.532,5123.931,5198.007,5251.855,5356.929,5448.324,5598.369,5750.451,5863.821,6020.415,6066.695,6216.012,6377.408,6546.808,6668.474,6792.905,6963.033,6963.033,7100.562,7269.235,7408.51,7513.149,7657.954,7769.141,7913.219,8151.748,8327.843,8437.284,8568.118,8681.925,8823.383,8891.347,9029.604,9155.053,9268.715,9399.549,9523.689,9669.804,9756.396,9913.281,10047.608,10188.775,10316.117,10449.862,10569.781,10569.781,10711.53,10816.605,10905.672,10982.659,11061.392,11178.11,11178.11,11325.826,11420.422,11523.314,11613.108,11701.884,11827.915,11827.915,11996.297,12051.454,12139.938,12237.445,12348.342,12447.304,12447.304,12600.26,12675.5,12804.879,12882.885,12979.082,13080.519,13080.519,13211.353,13295.471,13391.523,13473.022,13575.768],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.291,0.728,0,0.291,0,0.146,0,1.019,0,0.146,0.146,0.146,0.437,0,0,0.146,0.146,1.31,1.892,0.146,0,0,0.291,0,0,1.164,0.146,0.146,0,0,0,0,0,0,0.291,0,0,0,0,0.146,0,0,0,0,0,0,0,0,0,0.146,0,0,0.437,0.146,0.291,0.146,0.437,0,0,0.291,3.202,0.873,1.892,1.746,3.784,1.746,2.037,2.037,1.892,4.366,2.474,0,11.061,3.929,2.765,2.183,2.329,1.31,5.239,1.892,2.474,2.329,1.455,1.455,3.493,3.929,3.493,6.403,4.512,4.075,2.183,2.037,5.094,5.821,3.202,7.277,2.474,3.929,10.333,8.295,10.333,9.46,12.516,10.769,0,6.84,6.403,11.497,7.422,3.784,9.169,7.568,12.661,10.915,16.591,15.718,12.807,20.084,16.009,17.901,17.755,22.994,27.651,29.834,31.435,26.633,10.187,21.248,32.89,23.431,36.529,58.795,29.107,22.267,31.872,69.565,54.284,44.97,63.889,40.313,59.814,63.161,59.232,71.166,57.486,35.51,60.251,45.988,0,83.245,39.585,80.48,64.035,51.664,47.88,67.673,79.024,95.761,77.424,89.794,97.798,94.451,95.324,157.903,109.004,127.924,69.419,141.022,64.035,63.016,106.821,91.54,115.262,128.942,89.648,115.844,104.056,123.267,94.597,94.742,77.86,95.761,78.297,78.006,123.558,116.572,74.367,99.399,74.076,53.847,105.075,91.395,150.045,152.082,113.37,156.594,46.28,149.317,161.396,169.401,121.666,124.431,170.128,0,137.529,168.673,139.275,104.638,144.805,111.187,144.078,238.529,176.095,109.441,130.834,113.807,141.458,67.964,138.256,125.45,113.661,130.834,124.14,146.115,86.592,156.885,134.327,141.167,127.342,133.745,119.919,0,141.749,105.075,89.066,76.987,78.733,116.718,0,147.716,94.597,102.892,89.794,88.775,126.032,0,168.382,55.157,88.484,97.507,110.896,98.963,0,152.955,75.241,129.379,78.006,96.197,101.437,0,130.834,84.118,96.052,81.499,102.746],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.291,1.019,1.019,1.31,1.31,1.456,1.456,2.475,2.184,1.602,1.748,1.603,2.04,1.894,1.894,1.021,1.167,2.331,4.077,4.077,3.64,3.64,3.931,3.785,3.639,3.493,1.747,1.747,1.747,1.747,1.456,1.456,1.456,0.292,0.437,0.291,0.291,0.291,0.291,0.437,0.437,0.437,0.146,0.146,0.146,0.146,0.146,0,0,0.146,0.146,0.146,0.583,0.729,1.02,1.166,1.603,1.457,1.457,1.748,4.513,5.24,6.841,8.441,11.788,13.534,15.571,17.317,16.007,19.5,20.082,18.336,25.613,27.796,28.524,28.67,29.107,26.051,28.816,30.708,22.121,20.521,19.211,18.483,19.647,22.266,20.52,25.031,27.069,28.815,29.543,30.125,31.726,33.618,33.327,34.201,32.163,32.017,40.167,46.425,51.664,55.303,64.617,68.109,65.635,68.546,64.616,67.818,64.907,59.231,55.884,52.683,65.344,69.419,79.607,83.828,89.213,105.513,112.353,122.686,127.78,139.859,150.919,165.035,183.663,190.212,184.39,187.737,202.872,203.309,212.187,241.148,238.82,234.454,256.139,304.456,325.85,347.389,374.749,356.267,386.974,427.868,455.228,456.829,460.031,450.571,446.933,452.608,392.794,412.878,393.231,402.545,409.094,425.248,412.877,434.562,513.586,526.102,563.941,573.255,607.018,649.805,697.249,787.479,817.459,849.622,841.617,892.845,859.082,827.647,839.144,772.781,779.039,780.057,800.286,775.108,815.129,875.38,863.156,866.358,828.956,795.775,784.424,746.586,766.088,759.393,739.163,743.82,740.036,698.122,724.9,738.289,764.776,800.286,839.289,896.484,868.688,964.158,1020.479,1098.485,1070.106,1042.455,1099.213,942.619,1033.868,1053.224,1031.103,966.34,989.479,976.235,950.185,1188.714,1227.28,1168.048,1159.607,1168.776,1165.429,1122.206,1116.384,1003.305,940.871,962.264,955.57,987.878,933.012,1021.933,1018.004,1033.721,1047.402,1050.313,1046.092,899.977,955.134,903.324,858.063,793.883,745.274,728.247,608.328,756.044,708.892,706.709,707.437,719.225,766.524,649.806,818.188,725.629,719.516,714.131,735.233,745.421,619.389,772.344,679.203,753.425,742.947,741.637,732.178,633.215,764.049,695.212,716.023,668.143,692.883],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.146,0.187,0.187,0.208,0.208,0.312,0.208,0.229,0.208,0.229,0.27,0.27,0.125,0.146,0.146,0.312,0.561,0.52,0.52,0.52,0.541,0.52,0.333,0.229,0.229,0.249,0.249,0.208,0.208,0.208,0.042,0.021,0.042,0.042,0.042,0.042,0.042,0.062,0.062,0.021,0.021,0.021,0.021,0.021,0,0,0,0.021,0.021,0.021,0.083,0.104,0.146,0.166,0.208,0.208,0.208,0.187,0.624,0.707,0.956,1.143,1.684,1.934,2.183,2.017,2.162,2.516,2.62,2.079,3.41,3.68,3.784,3.825,3.534,3.368,4.117,2.807,2.599,2.536,2.432,2.308,2.62,2.432,2.661,3.223,3.534,3.909,4.013,3.805,3.971,4.304,3.846,4.241,4.013,4.262,5.447,5.904,6.549,7.443,8.191,9.376,8.815,8.316,8.046,8.212,7.921,6.674,6.445,7.526,8.358,9.002,9.73,10.915,12.204,13.763,14.969,15.718,16.695,17.61,19.314,21.747,23.368,24.886,23.784,24.283,25.697,25.094,26.05,29.959,30.312,32.038,33.556,38.795,43.203,44.408,45.136,46.737,52.101,56.571,55.095,57.506,59.294,55.24,58.089,56.113,47.09,50.521,46.009,49.294,53.369,52.142,52.413,62.08,61.477,69.502,69.066,72.746,79.336,85.989,89.939,101.208,103.1,110.314,107.403,113.578,109.233,104.618,97.32,94.825,93.016,101.52,94.181,101.582,107.445,109.794,110.231,107.3,100.002,100.875,95.511,91.79,91.831,94.971,92.06,95.137,92.039,88.547,92.414,87.819,92.601,103.703,105.699,117.487,116.406,122.726,132.726,135.491,131.146,132.726,134.66,128.048,126.364,127.404,123.1,120.668,123.578,115.158,135.741,150.169,151.23,146.968,150.71,146.282,150.606,139.733,125.408,118.173,118.776,118.776,120.252,120.917,123.578,126.24,127.508,131.437,130.938,132.31,128.568,116.198,114.036,109.857,102.414,95.22,87.361,86.904,86.904,87.756,86.26,88.235,90.064,91.499,92.829,92.829,95.782,90.147,88.089,89.191,92.351,88.484,88.484,86.28,89.149,94.992,92.206,90.106,90.459,90.459,87.299,88.567,83.806,84.305,85.241]},{"iso":"LIE","continent":"Europe","population":38137,"name":"Liechtenstein","population_density":237.012,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,4,4,4,7,28,28,28,37,37,51,51,51,56,56,56,56,62,68,68,75,76,77,77,77,78,78,78,79,79,79,79,79,79,79,79,79,81,81,81,81,81,81,81,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,83,83,83,83,84,84,84,84,84,84,84,84,84,84,84,85,86,86,86,86,86,86,86,86,86,86,87,88,88,88,88,89,89,89,89,89,89,89,89,89,89,90,90,91,91,91,94,97,98,99,99,99,99,100,102,102,105,106,107,107,107,107,107,107,107,107,107,107,107,108,109,109,111,111,111,111,111,112,112,113,113,114,115,116,116,117,117,117,117,118,118,119,120,123,126,127,130,131,135,139,142,144,148,163,174,183,192,217,224,224,235,252,282,324,340,365,402,428,450,476,513,533,551,598,631,659,692,741,765,788,801,846,877,905,928,970,985,989,1002,1051,1072,1094,1109,1112,1156,1158,1183,1208,1231,1253,1253,1270,1286,1318,1339,1351,1378,1396,1397,1404,1432,1441,1466,1482,1514,1566,1579,1600,1635],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26.221,26.221,26.221,26.221,26.221,26.221,26.221,26.221,26.221,26.221,104.885,104.885,104.885,183.549,734.195,734.195,734.195,970.186,970.186,1337.284,1337.284,1337.284,1468.39,1468.39,1468.39,1468.39,1625.718,1783.045,1783.045,1966.594,1992.815,2019.037,2019.037,2019.037,2045.258,2045.258,2045.258,2071.479,2071.479,2071.479,2071.479,2071.479,2071.479,2071.479,2071.479,2071.479,2123.922,2123.922,2123.922,2123.922,2123.922,2123.922,2123.922,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2150.143,2176.364,2176.364,2176.364,2176.364,2202.585,2202.585,2202.585,2202.585,2202.585,2202.585,2202.585,2202.585,2202.585,2202.585,2202.585,2228.807,2255.028,2255.028,2255.028,2255.028,2255.028,2255.028,2255.028,2255.028,2255.028,2255.028,2281.249,2307.47,2307.47,2307.47,2307.47,2333.692,2333.692,2333.692,2333.692,2333.692,2333.692,2333.692,2333.692,2333.692,2333.692,2359.913,2359.913,2386.134,2386.134,2386.134,2464.798,2543.462,2569.683,2595.904,2595.904,2595.904,2595.904,2622.125,2674.568,2674.568,2753.232,2779.453,2805.674,2805.674,2805.674,2805.674,2805.674,2805.674,2805.674,2805.674,2805.674,2805.674,2805.674,2831.896,2858.117,2858.117,2910.559,2910.559,2910.559,2910.559,2910.559,2936.781,2936.781,2963.002,2963.002,2989.223,3015.444,3041.666,3041.666,3067.887,3067.887,3067.887,3067.887,3094.108,3094.108,3120.329,3146.551,3225.214,3303.878,3330.099,3408.763,3434.984,3539.869,3644.754,3723.418,3775.861,3880.746,4274.065,4562.498,4798.49,5034.481,5690.012,5873.561,5873.561,6161.995,6607.756,7394.394,8495.687,8915.227,9570.758,10540.944,11222.697,11799.565,12481.317,13451.504,13975.929,14447.911,15680.31,16545.612,17279.807,18145.108,19429.95,20059.26,20662.349,21003.225,22183.182,22996.041,23730.236,24333.325,25434.617,25827.936,25932.821,26273.697,27558.539,28109.185,28686.053,29079.372,29158.036,30311.771,30364.213,31019.745,31675.276,32278.365,32855.232,32855.232,33300.994,33720.534,34559.614,35110.26,35424.915,36132.889,36604.872,36631.093,36814.642,37548.837,37784.828,38440.36,38859.9,39698.98,41062.485,41403.362,41954.008,42871.752],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78.664,0,0,78.664,550.646,0,0,235.991,0,367.098,0,0,131.106,0,0,0,157.328,157.328,0,183.549,26.221,26.221,0,0,26.221,0,0,26.221,0,0,0,0,0,0,0,0,52.443,0,0,0,0,0,0,26.221,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26.221,0,0,0,26.221,0,0,0,0,0,0,0,0,0,0,26.221,26.221,0,0,0,0,0,0,0,0,0,26.221,26.221,0,0,0,26.221,0,0,0,0,0,0,0,0,0,26.221,0,26.221,0,0,78.664,78.664,26.221,26.221,0,0,0,26.221,52.443,0,78.664,26.221,26.221,0,0,0,0,0,0,0,0,0,0,26.221,26.221,0,52.443,0,0,0,0,26.221,0,26.221,0,26.221,26.221,26.221,0,26.221,0,0,0,26.221,0,26.221,26.221,78.664,78.664,26.221,78.664,26.221,104.885,104.885,78.664,52.443,104.885,393.319,288.434,235.991,235.991,655.531,183.549,0,288.434,445.761,786.638,1101.293,419.54,655.531,970.186,681.753,576.868,681.753,970.186,524.425,471.983,1232.399,865.301,734.195,865.301,1284.841,629.31,603.089,340.876,1179.956,812.859,734.195,603.089,1101.293,393.319,104.885,340.876,1284.841,550.646,576.868,393.319,78.664,1153.735,52.443,655.531,655.531,603.089,576.868,0,445.761,419.54,839.08,550.646,314.655,707.974,471.983,26.221,183.549,734.195,235.991,655.531,419.54,839.08,1363.505,340.876,550.646,917.744],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78.664,78.664,78.664,157.328,707.974,707.974,707.974,943.965,865.301,1232.399,1232.399,1153.735,734.195,734.195,734.195,498.204,655.532,445.762,445.762,629.311,524.426,550.647,550.647,550.647,419.54,262.212,262.212,104.884,78.663,52.442,52.442,52.442,26.221,26.221,26.221,0,52.443,52.443,52.443,52.443,52.443,52.443,52.443,78.664,26.221,26.221,26.221,26.221,26.221,26.221,26.221,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26.221,26.221,26.221,26.221,52.442,52.442,52.442,52.442,26.221,26.221,26.221,26.221,0,0,0,26.221,52.442,52.442,52.442,52.442,52.442,52.442,52.442,26.221,0,0,26.221,52.442,52.442,52.442,52.442,78.663,78.663,78.663,52.442,26.221,26.221,26.221,26.221,0,0,26.221,26.221,52.442,52.442,52.442,131.106,209.77,235.991,235.991,235.991,209.77,209.77,235.991,209.77,131.106,183.549,183.549,209.77,209.77,209.77,183.549,131.106,131.106,52.442,26.221,0,0,0,26.221,52.442,52.442,104.885,104.885,104.885,104.885,104.885,104.885,78.664,104.885,52.442,78.663,104.884,131.105,131.105,131.105,131.105,104.884,104.884,104.884,78.663,78.663,104.884,157.327,235.991,262.212,340.876,340.876,445.761,524.425,576.868,550.647,576.868,943.966,1153.736,1363.506,1494.612,2045.258,2150.143,2097.7,2281.249,2333.691,2831.895,3697.197,3880.746,3880.746,4667.383,5349.136,5637.57,5873.562,6057.11,5480.242,5532.685,6109.553,6004.668,6057.11,6345.543,6948.631,6607.755,6686.419,6555.312,6502.869,6450.427,6450.427,6188.215,6004.667,5768.676,5270.472,5270.472,5375.357,5113.144,4955.817,4746.047,3723.418,4483.834,4431.392,4746.047,4116.737,4169.18,4169.18,3775.861,4142.958,3408.763,4195.4,4090.515,3749.639,3854.524,3749.639,3775.86,3513.648,3828.303,3225.214,3330.099,3434.984,3566.09,4457.612,4772.267,5139.364,5322.913],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11.238,11.238,11.238,22.475,101.139,101.139,101.139,123.614,123.614,176.057,164.819,86.156,104.885,104.885,71.172,71.172,41.205,63.68,63.68,71.172,74.918,78.664,78.664,56.188,37.459,37.459,11.238,11.238,7.492,7.492,7.492,3.746,3.746,3.746,0,0,7.492,7.492,7.492,7.492,7.492,7.492,7.492,3.746,3.746,3.746,3.746,3.746,3.746,3.746,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.746,3.746,3.746,3.746,7.492,7.492,7.492,3.746,3.746,3.746,3.746,0,0,0,0,3.746,7.492,7.492,7.492,7.492,7.492,7.492,3.746,0,0,0,3.746,7.492,7.492,7.492,7.492,11.238,11.238,7.492,3.746,3.746,3.746,3.746,0,0,0,3.746,3.746,7.492,7.492,7.492,18.729,29.967,29.967,33.713,29.967,29.967,29.967,22.475,18.729,14.984,22.475,26.221,29.967,29.967,26.221,18.729,18.729,7.492,3.746,0,0,0,0,3.746,7.492,7.492,14.984,14.984,14.984,14.984,11.238,11.238,11.238,7.492,7.492,11.238,14.984,18.729,14.984,18.729,14.984,14.984,11.238,11.238,7.492,11.238,11.238,22.475,33.713,37.459,44.951,48.697,59.934,71.172,71.172,67.426,78.664,123.614,161.073,179.803,198.532,280.942,299.671,284.688,269.704,292.18,370.843,494.458,460.745,528.171,666.769,722.957,741.687,726.703,707.974,722.957,696.736,734.195,760.416,782.892,809.113,854.064,869.047,887.777,760.416,805.367,816.605,797.875,700.482,767.908,737.941,704.228,584.359,651.785,625.564,621.818,520.679,475.728,625.564,584.359,494.458,509.442,513.187,539.409,528.171,427.032,479.474,505.696,490.712,449.507,468.237,535.663,475.728,442.015,427.032,382.081,430.778,389.573,442.015,633.056,655.531,629.31,726.703]},{"iso":"LTU","continent":"Europe","population":2722291,"name":"Lithuania","population_density":45.135,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,3,3,6,8,12,17,25,27,36,49,83,143,179,209,274,299,358,394,460,491,537,581,649,696,771,811,843,880,912,955,999,1026,1053,1062,1070,1091,1128,1149,1239,1298,1326,1350,1370,1398,1410,1426,1438,1449,1344,1375,1385,1399,1406,1410,1419,1423,1428,1433,1436,1444,1479,1485,1491,1505,1511,1523,1534,1541,1547,1562,1577,1593,1604,1616,1623,1635,1639,1647,1656,1662,1670,1675,1678,1682,1684,1687,1694,1705,1714,1720,1727,1733,1752,1756,1763,1768,1773,1776,1778,1784,1792,1795,1798,1801,1803,1804,1806,1808,1813,1815,1816,1817,1818,1825,1828,1831,1836,1841,1844,1854,1857,1861,1865,1869,1874,1875,1882,1902,1908,1915,1932,1947,1949,1951,1960,1986,2001,2008,2019,2027,2043,2062,2075,2093,2110,2120,2137,2147,2171,2194,2231,2252,2265,2283,2309,2330,2352,2386,2416,2436,2474,2496,2528,2564,2594,2635,2673,2694,2726,2762,2810,2839,2874,2906,2929,2958,2978,3004,3040,3083,3100,3131,3163,3199,3243,3296,3335,3386,3397,3442,3504,3565,3664,3744,3814,3859,3932,4070,4184,4295,4385,4490,4587,4693,4784,4956,5081,5185,5285,5366,5483,5625,5758,5963,6122,6248,6366,6505,6760,7041,7269,7521,7726,7928,8239,8663,9104,9578,10184,10949,11362,12138,13088,13823,14824,15719,16556,17453,18092,19091,20747,22719,24699,25755,26841,28262,29812,31878,33387,34758,35911,36876,38810,40492,42757,44740,47047,48226,49393,51655,53757,56095,58212,60193,61325,62515,62515,67066,69582,72430,74649,76036,77426,80556,83883,86949,90252,93101,95021,96452,99869,103028],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.367,0.367,0.367,0.367,0.367,0.367,0.367,0.367,0.367,0.367,0.367,0.367,1.102,1.102,2.204,2.939,4.408,6.245,9.183,9.918,13.224,18,30.489,52.529,65.753,76.774,100.651,109.834,131.507,144.731,168.975,180.363,197.26,213.423,238.402,255.667,283.217,297.911,309.666,323.257,335.012,350.807,366.97,376.888,386.807,390.113,393.051,400.765,414.357,422.071,455.131,476.804,487.09,495.906,503.253,513.538,517.946,523.824,528.232,532.272,493.702,505.089,508.763,513.905,516.477,517.946,521.252,522.721,524.558,526.395,527.497,530.436,543.292,545.496,547.7,552.843,555.047,559.455,563.496,566.067,568.271,573.781,579.291,585.169,589.21,593.618,596.189,600.597,602.066,605.005,608.311,610.515,613.454,615.291,616.393,617.862,618.597,619.699,622.27,626.311,629.617,631.821,634.392,636.596,643.576,645.045,647.616,649.453,651.29,652.392,653.126,655.33,658.269,659.371,660.473,661.575,662.31,662.677,663.412,664.146,665.983,666.718,667.085,667.453,667.82,670.391,671.493,672.595,674.432,676.269,677.371,681.044,682.146,683.615,685.085,686.554,688.391,688.758,691.329,698.676,700.88,703.452,709.696,715.206,715.941,716.676,719.982,729.533,735.043,737.614,741.655,744.593,750.471,757.45,762.226,768.838,775.082,778.756,785.001,788.674,797.49,805.939,819.53,827.244,832.02,838.632,848.183,855.897,863.978,876.468,887.488,894.835,908.793,916.875,928.63,941.854,952.874,967.935,981.894,989.608,1001.362,1014.587,1032.219,1042.872,1055.728,1067.483,1075.932,1086.585,1093.932,1103.482,1116.706,1132.502,1138.747,1150.134,1161.889,1175.113,1191.276,1210.745,1225.071,1243.805,1247.846,1264.376,1287.151,1309.559,1345.925,1375.312,1401.026,1417.556,1444.372,1495.064,1536.941,1577.715,1610.776,1649.346,1684.978,1723.916,1757.343,1820.525,1866.443,1904.646,1941.38,1971.134,2014.112,2066.274,2115.13,2190.434,2248.841,2295.126,2338.472,2389.531,2483.203,2586.424,2670.177,2762.747,2838.051,2912.253,3026.495,3182.246,3344.242,3518.36,3740.967,4021.98,4173.69,4458.744,4807.715,5077.708,5445.413,5774.181,6081.642,6411.144,6645.873,7012.843,7621.154,8345.544,9072.873,9460.781,9859.71,10381.697,10951.07,11709.99,12264.302,12767.922,13191.463,13545.943,14256.375,14874.236,15706.256,16434.687,17282.135,17715.226,18143.909,18974.827,19746.97,20605.806,21383.46,22111.156,22526.982,22964.114,22964.114,24635.867,25560.089,26606.267,27421.389,27930.886,28441.485,29591.252,30813.385,31939.642,33152.958,34199.503,34904.792,35430.452,36685.645,37846.064],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.735,0,1.102,0.735,1.469,1.837,2.939,0.735,3.306,4.775,12.489,22.04,13.224,11.02,23.877,9.183,21.673,13.224,24.244,11.387,16.898,16.163,24.979,17.265,27.55,14.694,11.755,13.591,11.755,15.796,16.163,9.918,9.918,3.306,2.939,7.714,13.591,7.714,33.06,21.673,10.285,8.816,7.347,10.285,4.408,5.877,4.408,4.041,-38.57,11.387,3.673,5.143,2.571,1.469,3.306,1.469,1.837,1.837,1.102,2.939,12.857,2.204,2.204,5.143,2.204,4.408,4.041,2.571,2.204,5.51,5.51,5.877,4.041,4.408,2.571,4.408,1.469,2.939,3.306,2.204,2.939,1.837,1.102,1.469,0.735,1.102,2.571,4.041,3.306,2.204,2.571,2.204,6.979,1.469,2.571,1.837,1.837,1.102,0.735,2.204,2.939,1.102,1.102,1.102,0.735,0.367,0.735,0.735,1.837,0.735,0.367,0.367,0.367,2.571,1.102,1.102,1.837,1.837,1.102,3.673,1.102,1.469,1.469,1.469,1.837,0.367,2.571,7.347,2.204,2.571,6.245,5.51,0.735,0.735,3.306,9.551,5.51,2.571,4.041,2.939,5.877,6.979,4.775,6.612,6.245,3.673,6.245,3.673,8.816,8.449,13.591,7.714,4.775,6.612,9.551,7.714,8.081,12.489,11.02,7.347,13.959,8.081,11.755,13.224,11.02,15.061,13.959,7.714,11.755,13.224,17.632,10.653,12.857,11.755,8.449,10.653,7.347,9.551,13.224,15.796,6.245,11.387,11.755,13.224,16.163,19.469,14.326,18.734,4.041,16.53,22.775,22.408,36.366,29.387,25.714,16.53,26.816,50.693,41.876,40.774,33.06,38.57,35.632,38.938,33.428,63.182,45.917,38.203,36.734,29.754,42.979,52.162,48.856,75.304,58.407,46.285,43.346,51.06,93.671,103.222,83.753,92.569,75.304,74.202,114.242,155.751,161.996,174.118,222.607,281.013,151.71,285.054,348.971,269.993,367.705,328.767,307.462,329.502,234.729,366.97,608.311,724.39,727.329,387.909,398.929,521.987,569.373,758.92,554.313,503.62,423.54,354.481,710.431,617.862,832.02,728.431,847.448,433.091,428.683,830.918,772.144,858.835,777.654,727.696,415.826,437.132,0,1671.754,924.222,1046.178,815.122,509.497,510.599,1149.767,1222.132,1126.257,1213.316,1046.545,705.288,525.66,1255.193,1160.42],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.735,0.735,1.837,2.572,4.041,5.878,8.817,9.552,12.123,16.898,28.285,49.59,61.345,70.528,91.466,99.914,118.281,126.73,138.485,127.832,131.506,136.649,137.751,145.833,151.71,153.18,140.691,142.895,137.752,137.385,128.569,121.222,103.59,92.202,83.386,77.509,79.345,71.263,88.16,99.915,100.282,105.792,110.2,112.771,103.588,101.751,73.099,55.467,6.612,9.183,5.509,0.367,-1.47,-5.878,-6.98,-9.552,30.855,21.305,18.734,16.53,26.816,27.551,26.449,30.123,30.49,33.061,36,35.632,24.979,28.285,31.591,32.325,34.162,34.162,32.692,34.529,33.794,31.223,29.019,25.346,24.244,21.673,20.204,17.265,16.531,14.694,13.959,15.796,16.163,16.53,17.999,18.734,24.978,25.345,25.345,23.141,21.672,20.57,18.734,18.734,14.694,14.327,12.858,12.123,11.021,10.286,10.286,8.817,7.715,7.348,6.613,5.878,5.51,7.714,8.081,8.448,8.448,9.55,10.285,13.591,14.326,13.224,13.591,13.958,13.958,12.488,13.957,17.631,18.733,19.835,24.611,28.652,27.55,27.918,28.653,30.857,34.163,34.163,31.959,29.388,34.53,40.774,42.243,39.304,40.039,41.141,43.345,44.079,47.018,48.488,57.304,58.406,56.936,59.875,63.181,67.222,66.487,70.527,67.956,67.589,76.773,78.242,80.446,85.956,88.895,91.467,94.406,94.773,92.569,97.712,103.589,101.018,102.855,99.549,94.039,96.978,92.57,88.897,84.489,89.632,83.02,82.652,85.958,88.529,97.345,107.263,108.365,111.303,109.099,114.242,125.262,134.446,154.649,164.567,175.955,173.751,196.526,230.689,249.79,268.156,264.85,274.033,283.951,306.359,312.971,325.46,329.501,326.93,330.604,321.788,329.135,342.359,357.787,369.909,382.399,390.481,397.093,418.399,469.091,520.151,555.048,572.313,589.21,617.127,688.023,792.714,861.039,931.935,1070.789,1259.233,1335.639,1546.491,1781.22,1895.462,2101.171,2255.82,2340.675,2389.164,2472.183,2554.099,2813.439,3267.836,3627.46,3686.602,3778.069,3970.554,4305.198,4697.148,4643.15,4422.38,4118.591,4085.163,4396.665,4492.54,4755.187,4724.698,5017.833,4947.304,4952.447,5428.884,5490.597,5731.57,5677.204,5676.469,5244.847,5248.888,4820.205,5661.041,5813.119,6000.462,6037.93,5819.731,5914.504,6627.139,7849.271,7303.774,7592.868,7593.235,7483.401,7499.564,8244.158,8254.811],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.105,0.105,0.262,0.367,0.577,0.84,1.259,1.259,1.732,2.257,3.936,6.874,8.501,9.656,12.962,13.801,16.215,16.32,16.635,16.373,17.212,16.11,18.367,17.737,19.784,18.419,18.472,18,17.37,16.058,15.9,13.382,12.699,11.492,9.971,9.393,9.078,7.872,11.178,12.857,13.854,14.694,14.641,14.169,13.696,9.813,7.347,6.455,-0.315,0.262,-0.682,-0.577,-1.05,-1.469,-1.574,4.146,2.781,2.519,1.942,1.994,3.621,3.463,3.568,4.041,4.093,4.565,4.723,3.254,3.254,3.726,3.778,4.303,4.251,4.303,4.303,4.618,4.041,3.673,3.306,3.044,2.834,2.729,2.257,2.257,1.942,1.627,1.679,1.837,2.047,2.204,2.361,2.571,3.411,3.254,3.044,2.834,2.781,2.571,2.361,1.679,1.889,1.679,1.574,1.469,1.417,1.364,1.154,0.84,0.945,0.892,0.787,0.735,0.735,0.997,1.05,0.945,1.102,1.312,1.417,1.889,1.679,1.732,1.784,1.732,1.732,1.627,1.469,2.361,2.466,2.624,3.306,3.831,3.883,3.621,3.044,4.093,4.513,3.988,3.778,4.093,4.828,5.353,4.67,4.828,5.353,5.3,5.772,5.458,5.72,6.245,7.242,7.452,7.609,7.662,8.501,8.344,8.291,8.134,8.606,8.974,10.023,9.813,10.39,11.125,10.915,11.492,12.437,11.545,12.07,12.28,12.909,12.857,12.542,12.227,12.332,12.175,11.335,10.181,10.548,10.968,10.181,10.6,10.758,11.597,12.542,13.434,13.224,15.008,13.959,14.641,16.005,16.898,19.311,21.463,22.46,24.244,25.714,29.702,32.483,33.113,33.638,35.474,38.203,39.935,37.468,40.512,41.247,41.981,41.719,40.879,41.457,44.133,42.086,46.285,49.171,50.535,52.477,53.631,59.561,67.328,68.535,73.415,77.561,81.969,90.995,99.863,108.26,121.169,139.746,169.133,180.205,204.607,232.21,247.638,275.293,290.459,294.237,319.636,312.447,315.018,363.349,414.304,471.242,482.734,492.652,533.689,562.604,584.119,559.823,527.864,532.954,526.605,553.525,560.452,570.895,595.769,644.887,646.252,656.852,674.065,696.105,699.936,706.968,689.86,687.394,688.601,569.898,698.414,707.755,746.115,758.605,771.986,782.482,946.734,882.502,911.365,935.242,968.302,996.272,998.424,1013.485,1004.668]},{"iso":"LUX","continent":"Europe","population":625976,"name":"Luxembourg","population_density":231.447,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,2,3,3,5,7,19,34,51,59,77,140,203,335,484,670,798,875,1099,1333,1453,1605,1831,1950,1988,2178,2319,2487,2612,2729,2804,2843,2970,3034,3115,3223,3270,3281,3292,3307,3373,3444,3480,3537,3550,3558,3618,3654,3665,3695,3711,3723,3729,3741,3769,3784,3802,3812,3824,3828,3840,3851,3859,3871,3877,3886,3888,3894,3904,3915,3923,3930,3945,3947,3958,3971,3980,3981,3990,3992,3993,3995,4001,4008,4012,4016,4018,4019,4020,4024,4027,4032,4035,4039,4040,4046,4049,4052,4055,4063,4070,4072,4075,4085,4091,4099,4105,4120,4121,4133,4140,4151,4173,4217,4242,4256,4299,4345,4395,4447,4476,4522,4542,4603,4650,4719,4777,4842,4925,4956,5056,5122,5285,5409,5483,5605,5639,5725,5854,5952,6056,6189,6272,6321,6375,6533,6616,6695,6793,6855,6864,6917,7007,7073,7113,7169,7205,7216,7242,7300,7368,7405,7439,7458,7469,7499,7566,7637,7704,7762,7775,7794,7838,7928,7928,6580,6625,6625,6625,6625,6745,6811,6854,6896,6950,6960,6974,7023,7088,7088,7159,7159,7244,7284,7394,7541,7718,7718,7718,7916,8016,8090,8158,8233,8233,8233,8376,8431,8509,8595,8709,8709,8709,8925,8979,9119,9219,9360,9514,9722,9731,9840,10030,10244,10471,10471,10888,11010,11241,11671,12333,12851,12851,12851,14399,14884,15659,16356,17134,17134,17134,19101,19634,20344,21147,21806,21806,21806,23227,23710,23710,25218,25931,25931,25931,27256,27681,28573,29243,29762,29762,29762,31111,31484,32100,32873,33409,33409,33409,34678,35129,35802,36429,37017,37017,37017,38476,38476,38476,40037,40755,40755,40755,41900,42250,42845,43279],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.598,1.598,1.598,1.598,1.598,1.598,3.195,3.195,4.793,4.793,7.988,11.183,30.353,54.315,81.473,94.253,123.008,223.651,324.294,535.164,773.193,1070.329,1274.809,1397.817,1755.658,2129.475,2321.175,2563.996,2925.032,3115.135,3175.841,3479.367,3704.615,3972.996,4172.684,4359.592,4479.405,4541.708,4744.591,4846.831,4976.229,5148.76,5223.842,5241.415,5258.988,5282.95,5388.385,5501.808,5559.319,5650.376,5671.144,5683.924,5779.774,5837.284,5854.857,5902.782,5928.342,5947.512,5957.097,5976.267,6020.998,6044.96,6073.715,6089.69,6108.86,6115.25,6134.42,6151.993,6164.773,6183.943,6193.528,6207.906,6211.101,6220.686,6236.661,6254.233,6267.013,6278.196,6302.159,6305.354,6322.926,6343.694,6358.071,6359.669,6374.046,6377.241,6378.839,6382.034,6391.619,6402.801,6409.191,6415.581,6418.776,6420.374,6421.971,6428.361,6433.154,6441.142,6445.934,6452.324,6453.922,6463.507,6468.299,6473.092,6477.884,6490.664,6501.847,6505.042,6509.834,6525.809,6535.394,6548.174,6557.759,6581.722,6583.319,6602.49,6613.672,6631.245,6666.39,6736.68,6776.618,6798.983,6867.675,6941.161,7021.036,7104.106,7150.434,7223.919,7255.869,7353.317,7428.4,7538.628,7631.283,7735.121,7867.714,7917.236,8076.987,8182.422,8442.816,8640.906,8759.122,8954.017,9008.333,9145.718,9351.796,9508.352,9674.492,9886.961,10019.553,10097.831,10184.097,10436.502,10569.095,10695.298,10851.854,10950.899,10965.277,11049.944,11193.72,11299.155,11363.055,11452.516,11510.026,11527.599,11569.134,11661.789,11770.419,11829.527,11883.842,11914.195,11931.767,11979.693,12086.725,12200.148,12307.181,12399.836,12420.604,12450.957,12521.247,12665.022,12665.022,10511.585,10583.473,10583.473,10583.473,10583.473,10775.173,10880.609,10949.302,11016.397,11102.662,11118.637,11141.002,11219.28,11323.118,11323.118,11436.541,11436.541,11572.329,11636.229,11811.954,12046.788,12329.546,12329.546,12329.546,12645.852,12805.603,12923.818,13032.449,13152.261,13152.261,13152.261,13380.705,13468.567,13593.173,13730.558,13912.674,13912.674,13912.674,14257.735,14344,14567.651,14727.402,14952.65,15198.666,15530.947,15545.324,15719.453,16022.979,16364.845,16727.478,16727.478,17393.638,17588.534,17957.557,18644.485,19702.033,20529.541,20529.541,20529.541,23002.479,23777.269,25015.336,26128.797,27371.656,27371.656,27371.656,30513.949,31365.42,32499.649,33782.445,34835.201,34835.201,34835.201,37105.256,37876.852,37876.852,40285.89,41424.911,41424.911,41424.911,43541.605,44220.545,45645.52,46715.849,47544.954,47544.954,47544.954,49699.988,50295.858,51279.921,52514.793,53371.056,53371.056,53371.056,55398.29,56118.765,57193.886,58195.522,59134.855,59134.855,59134.855,61465.615,61465.615,61465.615,63959.321,65106.33,65106.33,65106.33,66935.474,67494.6,68445.116,69138.433],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.598,0,1.598,0,3.195,3.195,19.17,23.963,27.158,12.78,28.755,100.643,100.643,210.871,238.028,297.136,204.481,123.008,357.841,373.816,191.701,242.821,361.036,190.103,60.705,303.526,225.248,268.381,199.688,186.908,119.813,62.303,202.883,102.24,129.398,172.531,75.083,17.573,17.573,23.963,105.435,113.423,57.51,91.058,20.768,12.78,95.85,57.51,17.573,47.925,25.56,19.17,9.585,19.17,44.73,23.963,28.755,15.975,19.17,6.39,19.17,17.573,12.78,19.17,9.585,14.378,3.195,9.585,15.975,17.573,12.78,11.183,23.963,3.195,17.573,20.768,14.378,1.598,14.378,3.195,1.598,3.195,9.585,11.183,6.39,6.39,3.195,1.598,1.598,6.39,4.793,7.988,4.793,6.39,1.598,9.585,4.793,4.793,4.793,12.78,11.183,3.195,4.793,15.975,9.585,12.78,9.585,23.963,1.598,19.17,11.183,17.573,35.145,70.29,39.938,22.365,68.693,73.485,79.875,83.07,46.328,73.485,31.95,97.448,75.083,110.228,92.655,103.838,132.593,49.523,159.751,105.435,260.393,198.091,118.215,194.896,54.315,137.385,206.078,156.556,166.141,212.468,132.593,78.278,86.265,252.406,132.593,126.203,156.556,99.045,14.378,84.668,143.775,105.435,63.9,89.46,57.51,17.573,41.535,92.655,108.63,59.108,54.315,30.353,17.573,47.925,107.033,113.423,107.033,92.655,20.768,30.353,70.29,143.775,0,-2153.437,71.888,0,0,0,191.701,105.435,68.693,67.095,86.265,15.975,22.365,78.278,103.838,0,113.423,0,135.788,63.9,175.726,234.833,282.758,0,0,316.306,159.751,118.215,108.63,119.813,0,0,228.443,87.863,124.605,137.385,182.116,0,0,345.061,86.265,223.651,159.751,225.248,246.016,332.281,14.378,174.128,303.526,341.866,362.634,0,666.16,194.896,369.024,686.927,1057.549,827.508,0,0,2472.938,774.79,1238.067,1113.461,1242.859,0,0,3142.293,851.47,1134.229,1282.797,1052.756,0,0,2270.055,771.595,0,2409.038,1139.021,0,0,2116.695,678.94,1424.975,1070.329,829.105,0,0,2155.035,595.869,984.063,1234.872,856.263,0,0,2027.234,720.475,1075.121,1001.636,939.333,0,0,2330.76,0,0,2493.706,1147.009,0,0,1829.144,559.127,950.516,693.317],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.598,1.598,3.196,3.196,6.391,9.586,28.756,52.719,78.279,91.059,118.216,218.859,316.307,523.983,742.841,1016.014,1193.337,1303.565,1632.651,1905.824,1996.882,2028.832,2151.84,2044.807,1901.031,2081.549,1948.956,1843.521,1851.508,1795.595,1554.372,1426.572,1568.75,1367.464,1271.614,1175.764,1051.159,881.824,779.584,741.244,643.796,654.979,583.091,501.618,447.303,442.51,520.787,554.334,466.472,400.974,369.024,297.136,285.953,292.343,241.223,207.676,218.858,186.908,180.518,167.738,177.323,175.726,143.776,138.983,119.813,118.216,102.241,105.436,102.241,102.241,102.241,94.254,108.632,97.449,111.827,123.01,121.413,105.438,107.036,99.048,76.683,76.683,68.695,59.11,51.122,55.914,44.731,43.134,43.134,46.329,41.537,38.342,36.745,36.745,35.148,43.135,46.33,44.733,44.733,49.525,55.915,52.72,55.915,62.305,67.097,75.084,79.876,91.059,81.474,97.449,103.839,105.437,130.997,188.507,218.86,217.262,284.357,338.672,407.364,472.861,484.044,487.239,479.251,554.334,560.724,597.467,610.247,631.015,717.28,693.318,821.119,829.106,1014.416,1102.279,1127.839,1218.897,1140.619,1228.481,1274.808,1325.929,1231.677,1246.054,1260.432,1143.814,1175.764,1290.785,1217.3,1186.947,1177.362,1063.939,945.724,952.114,1009.624,862.653,793.96,757.217,658.171,576.699,603.856,611.843,576.698,530.371,520.786,461.679,421.742,452.094,517.592,538.36,536.763,570.31,536.763,536.763,589.48,685.33,578.297,-1688.563,-1723.708,-1816.363,-1837.131,-1867.484,-1746.073,-1784.413,-1715.72,504.812,519.189,535.164,557.529,635.807,547.944,442.509,487.239,420.144,469.667,517.592,670.953,827.508,1006.428,1006.428,893.005,1209.311,1233.274,1287.589,1220.493,1105.473,822.715,822.715,1051.158,822.715,787.569,806.739,880.225,760.412,760.412,1105.473,963.295,1099.083,1134.229,1222.092,1285.992,1618.273,1632.651,1461.718,1678.979,1797.194,2000.077,1774.829,2194.973,2057.588,2412.234,2925.033,3679.056,4164.698,3802.064,3802.064,5608.842,6188.736,7057.779,7484.313,7669.623,6842.115,6842.115,9984.408,8362.94,8722.379,8767.109,8706.404,7463.545,7463.545,9733.6,7362.902,6511.432,7786.241,7642.465,6589.709,6589.709,8706.404,7115.289,7768.669,8838.998,7259.065,6120.044,6120.044,8275.079,6754.253,7059.376,6869.273,6655.207,5826.102,5826.102,7853.336,6418.776,6898.028,6915.601,6620.062,5763.799,5763.799,8094.559,6067.325,5346.85,6765.435,6910.808,5971.475,5971.475,7800.619,6028.986,6979.502,7672.819],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.228,0.228,0.456,0.456,0.913,1.369,4.108,7.303,11.183,12.78,16.888,30.809,44.73,72.116,102.697,141.265,168.651,182.116,218.858,257.883,255.144,255.829,264.958,262.904,254.003,246.244,225.02,235.974,229.813,204.937,194.896,195.124,180.746,163.174,143.319,139.439,123.464,108.859,102.469,76.908,77.365,75.083,58.651,60.933,61.39,60.705,70.975,64.128,50.436,49.066,39.709,39.481,39.025,28.07,26.245,27.158,24.419,23.05,23.05,22.593,22.593,18.714,17.116,15.747,14.834,14.149,13.693,12.324,12.095,12.78,11.867,12.095,13.465,13.465,14.606,15.29,14.834,13.236,13.693,10.726,10.498,8.444,6.846,6.39,7.075,5.934,5.934,5.934,5.705,5.249,4.336,4.564,4.336,4.793,4.793,5.934,5.705,5.705,5.249,6.39,7.075,7.303,6.618,8.216,8.9,10.041,9.585,11.411,11.183,13.236,12.552,13.693,16.888,25.56,27.842,30.809,37.884,46.784,55.684,62.531,59.108,63.9,65.27,69.377,69.606,73.942,75.311,83.527,91.971,94.481,103.381,107.718,129.17,144.232,146.286,155.186,155.871,152.676,167.053,152.219,147.655,161.12,152.219,155.643,148.34,154.958,151.535,145.829,137.842,133.049,123.921,123.693,108.174,104.294,95.394,85.809,79.875,80.332,74.17,66.867,67.323,66.639,61.618,57.738,57.738,58.651,60.705,61.39,68.236,73.713,72.344,74.17,77.365,82.614,66.411,-256.514,-259.481,-262.447,-266.783,-276.825,-269.978,-254.916,62.531,61.846,74.17,76.452,79.647,63.444,63.216,53.402,60.021,47.697,64.813,70.747,84.668,103.381,143.775,127.572,127.572,153.361,167.053,158.838,140.809,117.531,117.531,117.531,104.979,94.709,95.622,99.73,108.63,108.63,108.63,125.29,125.062,139.211,142.406,148.568,183.713,231.182,183.941,196.493,207.904,233.92,253.547,218.402,266.099,291.887,319.729,374.501,476.741,543.152,543.152,447.986,773.421,831.387,910.122,918.109,977.445,977.445,977.445,1073.067,1084.021,1069.187,1093.378,1066.221,1066.221,1066.221,941.615,930.205,768.172,929.063,941.387,941.387,941.387,919.478,906.242,1109.81,918.566,874.292,874.292,874.292,879.769,867.902,804.914,828.421,832.3,832.3,832.3,814.043,831.844,844.852,811.533,823.4,823.4,823.4,866.761,763.836,610.247,823.4,853.068,853.068,853.068,781.408,861.284,997.072,739.873]},{"iso":"MDG","continent":"Africa","population":27691019,"name":"Madagascar","population_density":43.951,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,12,17,19,23,26,26,39,43,57,57,59,70,70,72,82,88,93,93,93,102,106,106,108,110,111,117,120,121,121,121,121,121,122,123,124,128,128,128,128,132,135,149,149,151,158,193,193,193,193,186,186,212,230,238,283,304,322,326,371,405,448,488,527,542,586,612,656,698,758,771,826,845,908,957,975,1026,1052,1094,1138,1162,1203,1240,1252,1272,1290,1317,1378,1403,1443,1503,1596,1640,1724,1787,1829,1922,2005,2078,2138,2214,2303,2403,2512,2728,2941,3250,3472,3573,3782,4143,4578,4867,5080,5343,5605,6089,6467,6849,7049,7153,7548,8162,8381,8741,8866,9295,9690,10104,10317,10748,10868,11273,11528,11660,11895,12222,12526,12708,12922,13086,13202,13317,13397,13522,13643,13724,13827,13886,14009,14074,14154,14218,14277,14327,14402,14475,14554,14592,14696,14791,14843,14863,14957,15023,15106,15187,15269,15319,15352,15435,15520,15624,15669,15737,15757,15769,15803,15871,15925,15971,16020,16053,16073,16136,16167,16191,16221,16257,16285,16348,16377,16408,16454,16493,16529,16558,16570,16600,16633,16654,16676,16702,16718,16726,16754,16754,16754,16754,16810,16810,16810,16810,16810,16810,16810,16968,16968,16968,16968,16968,16968,16968,17111,17111,17111,17111,17111,17111,17111,17111,17223,17223,17223,17223,17223,17223,17223,17310,17310,17310,17310,17310,17310,17310,17341,17341,17341,17341,17341,17341,17341,17341,17341,17341,17341,17341,17341,17473,17473,17473,17473,17473,17473,17473,17587,17587,17587,17587,17587,17587],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.108,0.108,0.108,0.433,0.614,0.686,0.831,0.939,0.939,1.408,1.553,2.058,2.058,2.131,2.528,2.528,2.6,2.961,3.178,3.358,3.358,3.358,3.684,3.828,3.828,3.9,3.972,4.009,4.225,4.334,4.37,4.37,4.37,4.37,4.37,4.406,4.442,4.478,4.622,4.622,4.622,4.622,4.767,4.875,5.381,5.381,5.453,5.706,6.97,6.97,6.97,6.97,6.717,6.717,7.656,8.306,8.595,10.22,10.978,11.628,11.773,13.398,14.626,16.179,17.623,19.031,19.573,21.162,22.101,23.69,25.207,27.373,27.843,29.829,30.515,32.79,34.56,35.21,37.052,37.991,39.507,41.096,41.963,43.444,44.78,45.213,45.935,46.586,47.561,49.763,50.666,52.111,54.278,57.636,59.225,62.258,64.534,66.05,69.409,72.406,75.042,77.209,79.954,83.168,86.779,90.715,98.516,106.208,117.367,125.384,129.031,136.579,149.615,165.324,175.761,183.453,192.951,202.412,219.891,233.541,247.337,254.559,258.315,272.579,294.753,302.661,315.662,320.176,335.668,349.933,364.884,372.576,388.14,392.474,407.1,416.308,421.075,429.562,441.371,452.349,458.921,466.649,472.572,476.761,480.914,483.803,488.317,492.687,495.612,499.332,501.462,505.904,508.251,511.14,513.452,515.582,517.388,520.096,522.733,525.586,526.958,530.714,534.144,536.022,536.744,540.139,542.522,545.52,548.445,551.406,553.212,554.404,557.401,560.471,564.226,565.851,568.307,569.029,569.463,570.69,573.146,575.096,576.757,578.527,579.719,580.441,582.716,583.836,584.702,585.786,587.086,588.097,590.372,591.419,592.539,594.2,595.608,596.908,597.956,598.389,599.472,600.664,601.422,602.217,603.156,603.734,604.023,605.034,605.034,605.034,605.034,607.056,607.056,607.056,607.056,607.056,607.056,607.056,612.762,612.762,612.762,612.762,612.762,612.762,612.762,617.926,617.926,617.926,617.926,617.926,617.926,617.926,617.926,621.971,621.971,621.971,621.971,621.971,621.971,621.971,625.112,625.112,625.112,625.112,625.112,625.112,625.112,626.232,626.232,626.232,626.232,626.232,626.232,626.232,626.232,626.232,626.232,626.232,626.232,626.232,630.999,630.999,630.999,630.999,630.999,630.999,630.999,635.116,635.116,635.116,635.116,635.116,635.116],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.325,0.181,0.072,0.144,0.108,0,0.469,0.144,0.506,0,0.072,0.397,0,0.072,0.361,0.217,0.181,0,0,0.325,0.144,0,0.072,0.072,0.036,0.217,0.108,0.036,0,0,0,0,0.036,0.036,0.036,0.144,0,0,0,0.144,0.108,0.506,0,0.072,0.253,1.264,0,0,0,-0.253,0,0.939,0.65,0.289,1.625,0.758,0.65,0.144,1.625,1.228,1.553,1.445,1.408,0.542,1.589,0.939,1.589,1.517,2.167,0.469,1.986,0.686,2.275,1.77,0.65,1.842,0.939,1.517,1.589,0.867,1.481,1.336,0.433,0.722,0.65,0.975,2.203,0.903,1.445,2.167,3.358,1.589,3.033,2.275,1.517,3.358,2.997,2.636,2.167,2.745,3.214,3.611,3.936,7.8,7.692,11.159,8.017,3.647,7.548,13.037,15.709,10.437,7.692,9.498,9.462,17.479,13.651,13.795,7.223,3.756,14.265,22.173,7.909,13.001,4.514,15.492,14.265,14.951,7.692,15.565,4.334,14.626,9.209,4.767,8.487,11.809,10.978,6.573,7.728,5.922,4.189,4.153,2.889,4.514,4.37,2.925,3.72,2.131,4.442,2.347,2.889,2.311,2.131,1.806,2.708,2.636,2.853,1.372,3.756,3.431,1.878,0.722,3.395,2.383,2.997,2.925,2.961,1.806,1.192,2.997,3.07,3.756,1.625,2.456,0.722,0.433,1.228,2.456,1.95,1.661,1.77,1.192,0.722,2.275,1.119,0.867,1.083,1.3,1.011,2.275,1.047,1.119,1.661,1.408,1.3,1.047,0.433,1.083,1.192,0.758,0.794,0.939,0.578,0.289,1.011,0,0,0,2.022,0,0,0,0,0,0,5.706,0,0,0,0,0,0,5.164,0,0,0,0,0,0,0,4.045,0,0,0,0,0,0,3.142,0,0,0,0,0,0,1.119,0,0,0,0,0,0,0,0,0,0,0,0,4.767,0,0,0,0,0,0,4.117,0,0,0,0,0],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.325,0.506,0.578,0.722,0.83,0.83,1.299,1.443,1.624,1.443,1.443,1.696,1.588,1.66,1.552,1.625,1.3,1.3,1.228,1.156,1.3,1.228,0.939,0.794,0.649,0.866,0.974,0.685,0.541,0.541,0.469,0.397,0.397,0.216,0.144,0.252,0.252,0.252,0.252,0.396,0.468,0.938,0.902,0.83,1.083,2.347,2.347,2.203,2.095,1.336,1.336,2.203,2.6,1.625,3.25,4.008,4.658,5.055,6.68,6.969,7.872,9.028,8.811,8.595,9.534,10.329,10.293,10.582,11.196,10.22,10.798,10.942,11.628,12.459,11.52,11.845,10.617,11.665,11.268,11.449,10.655,10.221,10.004,8.884,8.595,8.053,8.667,8.703,8.667,9.498,12.423,13.29,15.673,16.973,16.287,18.742,20.294,20.763,19.572,20.728,20.909,22.245,24.664,29.106,33.801,42.324,48.174,49.076,53.41,62.836,74.609,77.246,77.246,75.585,77.03,90.862,96.965,97.723,89.237,82.556,89.129,101.804,100.251,95.773,86.636,88.333,95.375,106.57,99.997,93.389,89.814,91.439,96.134,85.409,79.631,76.489,79.775,70.783,74.177,65.473,60.453,59.839,54.241,46.946,40.338,36.69,32.682,28.891,29.144,27.338,27.338,25.135,22.896,21.777,20.765,21.27,19.681,18.706,19.573,20.693,20.44,19.356,20.043,19.79,19.934,21.487,20.692,19.067,18.381,20.656,20.331,21.704,20.332,19.863,17.624,16.251,16.287,15.746,14.626,12.531,12.676,11.412,11.412,13.254,13.145,11.556,10.689,10.328,9.569,10.652,10.977,9.821,10.363,10.904,11.121,10.868,10.29,9.098,9.243,8.882,8.015,7.546,6.824,6.066,6.644,5.561,4.369,3.611,4.839,3.9,3.322,3.033,2.022,2.022,2.022,7.728,5.706,5.706,5.706,5.706,5.706,5.706,10.87,5.164,5.164,5.164,5.164,5.164,5.164,5.164,4.045,4.045,4.045,4.045,4.045,4.045,4.045,7.187,3.142,3.142,3.142,3.142,3.142,3.142,4.261,1.119,1.119,1.119,1.119,1.119,1.119,1.119,0,0,0,0,0,4.767,4.767,4.767,4.767,4.767,4.767,4.767,8.884,4.117,4.117,4.117,4.117,4.117],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.103,0.119,0.119,0.186,0.16,0.206,0.196,0.186,0.227,0.227,0.17,0.201,0.16,0.186,0.175,0.119,0.165,0.175,0.124,0.103,0.088,0.093,0.124,0.093,0.077,0.077,0.067,0.057,0.052,0.026,0.015,0.015,0.036,0.036,0.036,0.036,0.052,0.062,0.129,0.108,0.119,0.155,0.335,0.315,0.299,0.227,0.191,0.181,0.279,0.191,0.232,0.464,0.573,0.702,0.722,0.82,0.903,1.083,1.058,1.15,1.135,1.341,1.243,1.295,1.29,1.393,1.259,1.465,1.336,1.527,1.553,1.429,1.383,1.45,1.383,1.512,1.31,1.269,1.367,1.166,1.135,1.011,0.923,1.114,1.032,1.047,1.295,1.672,1.806,2.1,2.11,2.198,2.471,2.59,2.487,2.569,2.528,2.662,2.961,3.044,3.73,4.452,5.737,6.49,6.552,7.114,8.414,9.544,9.936,9.441,9.652,10.483,11.902,11.989,11.716,11.257,10.695,11.376,13.191,11.824,11.731,10.406,11.587,13.088,13.186,11.118,12.211,10.973,12.418,11.52,10.163,9.24,9.828,9.173,9.493,8.507,8.038,7.955,7.336,6.062,5.138,4.824,4.137,3.823,3.529,3.57,3.493,3.26,2.966,2.853,2.579,2.662,2.404,2.476,2.26,2.466,2.652,2.662,2.378,2.487,2.42,2.652,2.533,2.466,2.456,2.523,2.466,2.564,2.672,2.487,2.414,2.26,2.151,1.899,1.811,1.553,1.558,1.46,1.527,1.568,1.718,1.527,1.372,1.29,1.223,1.197,1.419,1.243,1.243,1.357,1.403,1.403,1.408,1.145,1.15,1.161,1.032,0.944,0.893,0.825,0.805,0.794,0.624,0.516,0.402,0.557,0.475,0.433,0.289,0.289,0.289,0.289,0.815,0.815,0.815,0.815,0.815,0.815,0.815,0.738,0.738,0.738,0.738,0.738,0.738,0.738,0,0.578,0.578,0.578,0.578,0.578,0.578,0.578,0.449,0.449,0.449,0.449,0.449,0.449,0.449,0.16,0.16,0.16,0.16,0.16,0.16,0.16,0,0,0,0,0,0,0.681,0.681,0.681,0.681,0.681,0.681,0.681,0.588,0.588,0.588,0.588,0.588,0.588]},{"iso":"MWI","continent":"Africa","population":19129955,"name":"Malawi","population_density":197.519,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,4,4,5,8,8,8,9,12,13,16,16,16,16,17,17,17,17,18,23,33,33,33,34,36,36,36,37,37,38,39,41,41,43,43,43,56,56,57,57,63,63,63,65,70,70,70,71,72,82,82,83,101,101,101,203,273,279,284,336,358,369,393,409,409,438,443,455,455,481,481,529,547,555,564,572,592,620,620,730,749,803,941,960,1005,1038,1146,1152,1224,1265,1342,1498,1613,1613,1742,1818,1864,1942,2069,2261,2364,2430,2497,2614,2712,2805,2810,2907,2992,3045,3302,3302,3453,3453,3640,3664,3709,3738,3858,4078,4186,4231,4272,4361,4426,4491,4575,4624,4658,4674,4714,4752,4912,4988,5026,5072,5125,5193,5240,5282,5322,5382,5414,5419,5423,5474,5496,5523,5528,5536,5566,5576,5579,5593,5608,5611,5614,5621,5630,5653,5655,5669,5678,5690,5697,5701,5704,5711,5716,5718,5731,5733,5739,5746,5747,5764,5766,5768,5770,5772,5773,5779,5783,5783,5786,5794,5796,5803,5809,5813,5821,5821,5824,5827,5829,5836,5842,5852,5857,5860,5861,5864,5874,5885,5887,5890,5894,5897,5904,5916,5923,5930,5932,5933,5934,5934,5940,5942,5948,5951,5953,5953,5955,5958,5962,5964,5965,5971,5971,5999,6002,6003,6003,6003,6009,6017,6018,6020,6024,6025,6025,6028,6028,6040,6043,6047,6049,6051,6051,6051,6051,6051,6055,6063,6066,6070,6080,6091,6138],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.157,0.157,0.209,0.209,0.261,0.418,0.418,0.418,0.47,0.627,0.68,0.836,0.836,0.836,0.836,0.889,0.889,0.889,0.889,0.941,1.202,1.725,1.725,1.725,1.777,1.882,1.882,1.882,1.934,1.934,1.986,2.039,2.143,2.143,2.248,2.248,2.248,2.927,2.927,2.98,2.98,3.293,3.293,3.293,3.398,3.659,3.659,3.659,3.711,3.764,4.286,4.286,4.339,5.28,5.28,5.28,10.612,14.271,14.584,14.846,17.564,18.714,19.289,20.544,21.38,21.38,22.896,23.157,23.785,23.785,25.144,25.144,27.653,28.594,29.012,29.483,29.901,30.946,32.41,32.41,38.16,39.153,41.976,49.19,50.183,52.535,54.26,59.906,60.22,63.983,66.127,70.152,78.307,84.318,84.318,91.061,95.034,97.439,101.516,108.155,118.192,123.576,127.026,130.528,136.644,141.767,146.629,146.89,151.961,156.404,159.174,172.609,172.609,180.502,180.502,190.277,191.532,193.884,195.4,201.673,213.174,218.819,221.171,223.315,227.967,231.365,234.763,239.154,241.715,243.492,244.329,246.42,248.406,256.77,260.743,262.729,265.134,267.904,271.459,273.916,276.111,278.202,281.339,283.012,283.273,283.482,286.148,287.298,288.71,288.971,289.389,290.957,291.48,291.637,292.369,293.153,293.31,293.466,293.832,294.303,295.505,295.61,296.342,296.812,297.439,297.805,298.014,298.171,298.537,298.798,298.903,299.583,299.687,300.001,300.367,300.419,301.308,301.412,301.517,301.621,301.726,301.778,302.092,302.301,302.301,302.458,302.876,302.98,303.346,303.66,303.869,304.287,304.287,304.444,304.601,304.705,305.071,305.385,305.908,306.169,306.326,306.378,306.535,307.058,307.633,307.737,307.894,308.103,308.26,308.626,309.253,309.619,309.985,310.09,310.142,310.194,310.194,310.508,310.612,310.926,311.083,311.187,311.187,311.292,311.449,311.658,311.762,311.815,312.128,312.128,313.592,313.749,313.801,313.801,313.801,314.115,314.533,314.585,314.69,314.899,314.951,314.951,315.108,315.108,315.735,315.892,316.101,316.206,316.31,316.31,316.31,316.31,316.31,316.519,316.937,317.094,317.303,317.826,318.401,320.858],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.052,0,0.052,0.157,0,0,0.052,0.157,0.052,0.157,0,0,0,0.052,0,0,0,0.052,0.261,0.523,0,0,0.052,0.105,0,0,0.052,0,0.052,0.052,0.105,0,0.105,0,0,0.68,0,0.052,0,0.314,0,0,0.105,0.261,0,0,0.052,0.052,0.523,0,0.052,0.941,0,0,5.332,3.659,0.314,0.261,2.718,1.15,0.575,1.255,0.836,0,1.516,0.261,0.627,0,1.359,0,2.509,0.941,0.418,0.47,0.418,1.045,1.464,0,5.75,0.993,2.823,7.214,0.993,2.352,1.725,5.646,0.314,3.764,2.143,4.025,8.155,6.012,0,6.743,3.973,2.405,4.077,6.639,10.037,5.384,3.45,3.502,6.116,5.123,4.861,0.261,5.071,4.443,2.771,13.434,0,7.893,0,9.775,1.255,2.352,1.516,6.273,11.5,5.646,2.352,2.143,4.652,3.398,3.398,4.391,2.561,1.777,0.836,2.091,1.986,8.364,3.973,1.986,2.405,2.771,3.555,2.457,2.196,2.091,3.136,1.673,0.261,0.209,2.666,1.15,1.411,0.261,0.418,1.568,0.523,0.157,0.732,0.784,0.157,0.157,0.366,0.47,1.202,0.105,0.732,0.47,0.627,0.366,0.209,0.157,0.366,0.261,0.105,0.68,0.105,0.314,0.366,0.052,0.889,0.105,0.105,0.105,0.105,0.052,0.314,0.209,0,0.157,0.418,0.105,0.366,0.314,0.209,0.418,0,0.157,0.157,0.105,0.366,0.314,0.523,0.261,0.157,0.052,0.157,0.523,0.575,0.105,0.157,0.209,0.157,0.366,0.627,0.366,0.366,0.105,0.052,0.052,0,0.314,0.105,0.314,0.157,0.105,0,0.105,0.157,0.209,0.105,0.052,0.314,0,1.464,0.157,0.052,0,0,0.314,0.418,0.052,0.105,0.209,0.052,0,0.157,0,0.627,0.157,0.209,0.105,0.105,0,0,0,0,0.209,0.418,0.157,0.209,0.523,0.575,2.457],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.052,0.052,0.104,0.261,0.261,0.261,0.313,0.47,0.47,0.627,0.575,0.418,0.418,0.47,0.418,0.261,0.209,0.104,0.365,0.888,0.888,0.836,0.888,0.993,0.993,0.941,0.732,0.209,0.261,0.313,0.366,0.261,0.366,0.366,0.314,0.994,0.942,0.942,0.837,1.151,1.046,1.046,1.151,0.732,0.732,0.68,0.732,0.47,0.993,0.993,0.94,1.62,1.62,1.62,6.9,10.507,10.298,10.559,13.225,13.434,14.009,15.264,10.768,7.109,8.311,8.311,6.22,5.07,5.854,4.599,6.272,7.213,6.115,6.324,6.115,7.16,7.265,7.265,10.506,10.558,12.963,19.707,20.282,21.589,21.85,27.496,22.06,24.831,24.151,20.962,28.124,31.784,30.059,31.156,34.815,33.456,35.39,38.004,39.886,39.258,42.708,39.467,41.61,44.328,45.112,38.734,33.768,32.827,32.148,42.08,35.964,38.734,33.873,43.387,39.571,37.48,36.225,29.064,40.564,38.317,40.669,33.037,36.434,37.48,39.362,37.48,28.541,24.672,23.156,23.104,20.438,25.404,25.979,23.574,23.418,24.412,27.131,27.497,27.707,21.434,20.597,20.284,18.14,15.578,14.689,13.382,12.597,10.767,8.049,7.944,8.206,8.154,6.22,5.854,4.6,4.496,4.444,3.346,4.025,3.973,3.973,3.659,4.129,4.338,4.181,3.868,3.032,3.188,2.561,2.771,2.249,2.197,2.354,2.249,2.772,2.616,2.616,2.041,2.041,1.779,1.727,1.884,0.995,1.047,1.36,1.36,1.621,1.883,1.778,1.987,1.987,1.987,1.726,1.726,1.726,1.726,2.04,1.883,2.04,1.935,1.935,2.353,2.562,2.353,1.987,1.935,1.935,2.249,2.719,2.562,2.353,2.353,2.248,2.091,1.934,1.882,1.36,1.308,1.099,1.099,1.047,1.1,1.257,1.152,1.152,0.89,1.047,0.942,2.406,2.458,2.353,2.144,2.039,2.301,2.405,2.457,1.098,1.15,1.15,1.15,1.307,0.993,1.202,1.307,1.411,1.307,1.36,1.36,1.203,1.203,0.576,0.628,0.837,0.889,0.993,1.516,2.091,4.548],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.037,0.037,0.045,0.06,0.067,0.082,0.06,0.06,0.06,0.06,0.037,0.03,0.007,0.015,0.052,0.127,0.119,0.119,0.127,0.142,0.134,0.097,0.03,0.03,0.037,0.037,0.037,0.037,0.052,0.045,0.045,0.134,0.127,0.119,0.119,0.149,0.149,0.149,0.067,0.105,0.097,0.097,0.06,0.067,0.142,0.127,0.097,0.231,0.231,0.224,0.978,1.426,1.471,1.501,1.755,1.919,2.001,1.419,1.016,0.971,1.15,0.799,0.724,0.642,0.657,0.538,0.896,0.814,0.836,0.814,0.874,0.829,1.038,0.68,1.367,1.449,1.785,2.756,2.748,2.875,3.122,3.107,3.009,3.144,2.42,2.853,3.682,4.294,3.487,4.406,4.436,4.473,4.481,4.264,4.839,5.608,5.138,5.071,5.601,5.75,5.496,4.1,4.055,4.197,4.092,5.138,4.406,4.839,4.802,5.474,5.018,4.959,3.256,4.152,4.667,5.474,4.413,4.54,4.869,5.138,4.727,3.711,3.271,3.189,3.002,2.636,2.434,3.144,3.084,3.002,3.092,3.368,3.577,3.644,2.763,2.494,2.659,2.554,2.196,1.718,1.747,1.598,1.501,1.09,0.911,1.098,1.143,0.784,0.724,0.635,0.62,0.582,0.411,0.403,0.553,0.463,0.456,0.5,0.568,0.568,0.53,0.381,0.418,0.351,0.299,0.306,0.269,0.284,0.314,0.269,0.358,0.358,0.276,0.276,0.246,0.202,0.239,0.142,0.127,0.134,0.179,0.179,0.224,0.224,0.224,0.284,0.261,0.224,0.231,0.194,0.202,0.217,0.231,0.269,0.269,0.254,0.261,0.284,0.321,0.261,0.246,0.254,0.269,0.299,0.314,0.284,0.321,0.314,0.291,0.276,0.224,0.179,0.142,0.134,0.142,0.149,0.142,0.157,0.134,0.149,0.119,0.105,0.134,0.134,0.329,0.329,0.306,0.291,0.284,0.284,0.344,0.142,0.134,0.157,0.164,0.164,0.142,0.082,0.164,0.172,0.172,0.179,0.194,0.172,0.172,0.082,0.06,0.06,0.105,0.112,0.142,0.217,0.299,0.65]},{"iso":"MYS","continent":"Asia","population":32365998,"name":"Malaysia","population_density":96.254,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,7,8,8,8,8,8,10,12,12,12,16,16,18,18,18,19,19,22,22,22,22,22,22,22,22,22,22,22,22,23,23,25,29,29,36,50,50,83,93,99,117,129,149,149,197,238,428,566,673,790,900,1030,1183,1306,1518,1624,1796,2031,2161,2320,2470,2626,2766,2908,3116,3333,3483,3662,3793,3963,4119,4228,4346,4530,4683,4817,4987,5072,5182,5251,5305,5389,5425,5482,5532,5603,5691,5742,5780,5820,5851,5945,6002,6071,6176,6298,6353,6383,6428,6467,6535,6589,6656,6726,6742,6779,6819,6855,6872,6894,6941,6978,7009,7059,7137,7185,7245,7417,7604,7619,7629,7732,7762,7819,7857,7877,7970,8247,8266,8303,8322,8329,8336,8338,8369,8402,8445,8453,8494,8505,8515,8529,8535,8556,8572,8587,8590,8596,8600,8606,8616,8634,8637,8639,8640,8643,8648,8658,8663,8668,8674,8677,8683,8696,8704,8718,8725,8729,8734,8737,8755,8764,8779,8800,8815,8831,8840,8861,8884,8897,8904,8943,8956,8964,8976,8985,8999,9001,9002,9023,9038,9063,9070,9083,9094,9103,9114,9129,9149,9175,9200,9212,9219,9235,9240,9249,9257,9267,9274,9285,9291,9296,9306,9317,9334,9340,9354,9360,9374,9385,9391,9397,9459,9559,9583,9628,9810,9868,9915,9946,9969,10031,10052,10147,10167,10219,10276,10358,10505,10576,10687,10769,10919,11034,11135,11224,11484,11771,12088,12381,12813,13504,13993,14368,14722,15096,15657,16220,16880,17540,18129,18758,19627,20498,21363,22225,22957,23804,24514,25742,26565,27805,28640,29441,30090,30889,31548,32505,33339,34393,35425,36434,38189,39357,40209,41181,42050,42872,43791,45095,46209,47417,48520,49730,50390,51680,52638,53679,54775,56659,58847,59817,60752,61861,63176,64485,65697,67169,68020,69095,70236,71359,72694,74294,75306,76265,78499,80309,82246,83475,84846,86618,87913,89133],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.093,0.124,0.124,0.124,0.216,0.247,0.247,0.247,0.247,0.247,0.309,0.371,0.371,0.371,0.494,0.494,0.556,0.556,0.556,0.587,0.587,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.711,0.711,0.772,0.896,0.896,1.112,1.545,1.545,2.564,2.873,3.059,3.615,3.986,4.604,4.604,6.087,7.353,13.224,17.487,20.793,24.408,27.807,31.824,36.551,40.351,46.901,50.176,55.49,62.751,66.768,71.68,76.315,81.135,85.46,89.847,96.274,102.978,107.613,113.143,117.191,122.443,127.263,130.631,134.277,139.962,144.689,148.829,154.081,156.708,160.106,162.238,163.907,166.502,167.614,169.375,170.92,173.114,175.833,177.408,178.582,179.818,180.776,183.68,185.442,187.573,190.818,194.587,196.286,197.213,198.603,199.808,201.909,203.578,205.648,207.811,208.305,209.448,210.684,211.796,212.322,213.001,214.453,215.597,216.554,218.099,220.509,221.992,223.846,229.16,234.938,235.401,235.71,238.893,239.82,241.581,242.755,243.373,246.246,254.804,255.391,256.535,257.122,257.338,257.554,257.616,258.574,259.593,260.922,261.169,262.436,262.776,263.085,263.517,263.703,264.351,264.846,265.309,265.402,265.587,265.711,265.896,266.205,266.761,266.854,266.916,266.947,267.04,267.194,267.503,267.657,267.812,267.997,268.09,268.275,268.677,268.924,269.357,269.573,269.697,269.851,269.944,270.5,270.778,271.241,271.89,272.354,272.848,273.126,273.775,274.486,274.887,275.104,276.308,276.71,276.957,277.328,277.606,278.039,278.1,278.131,278.78,279.244,280.016,280.232,280.634,280.974,281.252,281.592,282.055,282.673,283.477,284.249,284.62,284.836,285.33,285.485,285.763,286.01,286.319,286.535,286.875,287.061,287.215,287.524,287.864,288.389,288.574,289.007,289.192,289.625,289.965,290.15,290.336,292.251,295.341,296.082,297.473,303.096,304.888,306.34,307.298,308.008,309.924,310.573,313.508,314.126,315.733,317.494,320.027,324.569,326.763,330.192,332.726,337.36,340.913,344.034,346.784,354.817,363.684,373.478,382.531,395.878,417.228,432.336,443.923,454.86,466.415,483.748,501.143,521.535,541.927,560.125,579.559,606.408,633.319,660.045,686.677,709.294,735.463,757.4,795.341,820.769,859.081,884.879,909.627,929.679,954.366,974.727,1004.295,1030.062,1062.628,1094.513,1125.688,1179.911,1215.998,1242.322,1272.354,1299.203,1324.6,1352.994,1393.283,1427.702,1465.025,1499.104,1536.489,1556.881,1596.737,1626.336,1658.5,1692.362,1750.572,1818.174,1848.143,1877.032,1911.296,1951.925,1992.369,2029.815,2075.295,2101.588,2134.802,2170.055,2204.752,2245.999,2295.434,2326.701,2356.331,2425.354,2481.277,2541.124,2579.096,2621.455,2676.204,2716.215,2753.909],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.031,0,0,0.093,0.031,0,0,0,0,0.062,0.062,0,0,0.124,0,0.062,0,0,0.031,0,0.093,0,0,0,0,0,0,0,0,0,0,0,0.031,0,0.062,0.124,0,0.216,0.433,0,1.02,0.309,0.185,0.556,0.371,0.618,0,1.483,1.267,5.87,4.264,3.306,3.615,3.399,4.017,4.727,3.8,6.55,3.275,5.314,7.261,4.017,4.913,4.634,4.82,4.326,4.387,6.426,6.705,4.634,5.53,4.047,5.252,4.82,3.368,3.646,5.685,4.727,4.14,5.252,2.626,3.399,2.132,1.668,2.595,1.112,1.761,1.545,2.194,2.719,1.576,1.174,1.236,0.958,2.904,1.761,2.132,3.244,3.769,1.699,0.927,1.39,1.205,2.101,1.668,2.07,2.163,0.494,1.143,1.236,1.112,0.525,0.68,1.452,1.143,0.958,1.545,2.41,1.483,1.854,5.314,5.778,0.463,0.309,3.182,0.927,1.761,1.174,0.618,2.873,8.558,0.587,1.143,0.587,0.216,0.216,0.062,0.958,1.02,1.329,0.247,1.267,0.34,0.309,0.433,0.185,0.649,0.494,0.463,0.093,0.185,0.124,0.185,0.309,0.556,0.093,0.062,0.031,0.093,0.154,0.309,0.154,0.154,0.185,0.093,0.185,0.402,0.247,0.433,0.216,0.124,0.154,0.093,0.556,0.278,0.463,0.649,0.463,0.494,0.278,0.649,0.711,0.402,0.216,1.205,0.402,0.247,0.371,0.278,0.433,0.062,0.031,0.649,0.463,0.772,0.216,0.402,0.34,0.278,0.34,0.463,0.618,0.803,0.772,0.371,0.216,0.494,0.154,0.278,0.247,0.309,0.216,0.34,0.185,0.154,0.309,0.34,0.525,0.185,0.433,0.185,0.433,0.34,0.185,0.185,1.916,3.09,0.742,1.39,5.623,1.792,1.452,0.958,0.711,1.916,0.649,2.935,0.618,1.607,1.761,2.534,4.542,2.194,3.43,2.534,4.634,3.553,3.121,2.75,8.033,8.867,9.794,9.053,13.347,21.35,15.108,11.586,10.937,11.555,17.333,17.395,20.392,20.392,18.198,19.434,26.849,26.911,26.726,26.633,22.616,26.169,21.937,37.941,25.428,38.312,25.799,24.748,20.052,24.686,20.361,29.568,25.768,32.565,31.885,31.175,54.224,36.087,26.324,30.032,26.849,25.397,28.394,40.289,34.419,37.323,34.079,37.385,20.392,39.857,29.599,32.163,33.863,58.209,67.602,29.97,28.888,34.264,40.629,40.444,37.447,45.48,26.293,33.214,35.253,34.697,41.247,49.435,31.267,29.63,69.023,55.923,59.847,37.972,42.359,54.749,40.011,37.694],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.031,0.031,0.031,0.124,0.155,0.155,0.155,0.155,0.124,0.186,0.248,0.155,0.124,0.248,0.248,0.31,0.31,0.248,0.217,0.217,0.31,0.186,0.186,0.124,0.124,0.124,0.093,0.093,0,0,0,0,0.031,0.031,0.093,0.217,0.217,0.433,0.866,0.866,1.855,2.164,2.287,2.719,3.09,3.492,3.059,4.542,4.789,10.35,14.429,17.179,20.423,23.204,27.221,30.465,32.998,33.678,32.689,34.697,38.343,38.961,39.857,39.764,40.784,38.56,39.672,40.784,40.228,40.845,41.462,40.875,41.307,41.801,40.782,38.002,36.982,37.075,35.685,36.89,34.264,32.843,31.607,29.629,26.539,22.924,20.545,16.838,16.406,15.726,15.17,14.676,13.317,13.163,14.306,14.522,14.46,14.985,17.178,17.703,17.394,17.826,16.127,16.467,16.003,14.829,13.223,12.018,12.234,12.08,11.987,10.411,9.423,8.805,7.785,8.249,8.651,9.825,10.196,11.525,16.159,20.485,19.805,19.156,20.793,19.31,19.588,18.908,14.212,11.307,19.402,19.68,17.641,17.301,15.756,14.798,14.242,12.327,4.789,5.531,4.635,5.315,5.439,5.532,5.903,5.13,4.759,3.924,4.14,2.966,2.811,2.626,2.378,2.502,2.409,2.008,1.607,1.545,1.453,1.483,1.607,1.452,1.05,1.142,1.173,1.327,1.636,1.729,1.853,1.915,1.885,1.854,1.854,2.225,2.101,2.317,2.533,2.78,3.15,3.274,3.83,3.985,4.109,3.862,4.418,4.357,4.11,4.203,3.832,3.554,3.214,3.029,2.473,2.534,3.059,2.904,3.028,2.935,3.151,3.46,3.274,3.429,3.46,4.016,3.985,3.861,4.077,3.891,3.706,3.335,2.841,2.285,2.254,2.223,1.883,2.038,2.1,2.378,2.254,2.471,2.316,2.564,2.75,2.626,2.471,3.862,6.767,7.076,8.281,13.471,14.923,16.19,16.963,15.758,14.584,14.491,16.036,11.031,10.846,11.155,12.731,16.562,16.84,19.621,19.22,23.236,25.182,26.542,26.758,30.249,36.922,43.286,49.805,58.518,76.315,88.302,97.138,100.042,102.73,110.269,118.611,125.656,124.698,127.788,135.636,151.548,166.904,176.297,185.535,187.759,193.536,197.275,215.782,214.361,225.762,224.835,222.95,220.386,218.903,217.327,208.954,209.294,203.547,209.633,216.06,250.232,261.633,267.596,268.06,269.141,261.973,258.482,267.596,247.791,249.027,256.782,264.135,257.678,272.138,273.343,265.217,264.661,285.547,319.07,311.655,320.151,314.558,325.588,333.869,337.453,324.724,283.415,286.659,293.024,293.457,294.075,303.066,296.886,281.036,323.766,346.475,371.069,374.344,375.456,380.77,389.514,397.578],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.022,0.022,0.018,0.018,0.026,0.022,0.018,0.018,0.035,0.035,0.044,0.035,0.026,0.031,0.031,0.026,0.026,0.018,0.018,0.018,0.013,0.013,0,0,0,0,0,0.004,0.004,0.013,0.031,0.031,0.062,0.124,0.119,0.265,0.3,0.309,0.388,0.41,0.437,0.437,0.503,0.64,1.452,1.982,2.401,2.829,3.315,3.677,4.171,3.875,4.202,4.198,4.44,4.992,4.992,5.018,5.138,4.89,5.041,4.908,4.789,5.173,5.133,5.261,5.151,5.283,5.345,4.908,4.471,4.621,4.506,4.52,4.52,4.206,4.211,3.994,3.421,3.116,2.684,2.185,2.03,1.858,1.942,1.929,1.726,1.743,1.629,1.823,1.761,1.677,1.916,2.286,2.353,2.348,2.132,2.052,2.048,1.823,1.58,1.646,1.585,1.549,1.554,1.412,1.249,1.05,0.949,1.042,1.015,1.059,1.245,1.382,1.549,2.101,2.763,2.692,2.516,2.626,2.547,2.534,1.942,1.205,1.549,2.728,2.357,2.388,2.22,2.083,2.026,1.624,0.538,0.6,0.627,0.578,0.728,0.746,0.781,0.706,0.587,0.49,0.525,0.41,0.375,0.358,0.313,0.313,0.265,0.274,0.221,0.216,0.194,0.19,0.185,0.185,0.128,0.137,0.154,0.163,0.177,0.212,0.203,0.243,0.252,0.243,0.252,0.238,0.26,0.265,0.269,0.331,0.38,0.428,0.455,0.468,0.53,0.521,0.459,0.565,0.552,0.547,0.508,0.446,0.45,0.428,0.26,0.296,0.327,0.384,0.375,0.371,0.41,0.446,0.402,0.402,0.38,0.463,0.516,0.521,0.512,0.534,0.49,0.441,0.362,0.296,0.274,0.291,0.247,0.247,0.252,0.265,0.296,0.291,0.305,0.305,0.344,0.349,0.327,0.278,0.525,0.905,0.984,1.121,1.876,2.105,2.286,2.15,1.81,1.977,1.871,1.487,1.32,1.342,1.457,1.717,2.092,2.313,2.383,2.657,3.09,3.346,3.43,3.174,4.008,4.785,5.822,6.453,7.852,10.456,12.222,12.729,13.025,13.277,14.46,15.038,14.901,15.656,16.6,17.814,19.999,21.367,22.7,23.592,23.91,25.048,25.406,26.99,26.779,28.434,28.315,28.619,27.745,28.138,25.627,26.218,24.426,25.393,26.412,28.001,32.221,34.467,34.004,34.613,33.796,32.87,32.472,30.482,30.243,31.815,32.393,33.898,33.183,34.82,33.293,32.971,32.477,35.924,40.241,41.609,40.042,40.709,41.918,42.858,39.892,36.732,36.206,36.824,36.966,36.118,36.233,37.945,35.915,36.392,41.507,44.46,48.053,47.585,46.574,49.929,51.412,46.936]},{"iso":"MDV","continent":"Asia","population":540542,"name":"Maldives","population_density":1454.433,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,6,8,8,9,10,13,13,13,13,13,13,13,13,13,13,13,13,16,16,17,17,18,19,19,19,19,19,19,19,19,19,19,19,20,20,20,22,25,28,35,52,69,83,86,108,129,177,214,226,250,278,468,491,519,527,541,573,617,648,744,790,835,897,904,955,982,1031,1078,1094,1106,1143,1186,1216,1274,1313,1371,1395,1438,1457,1513,1591,1672,1773,1829,1841,1850,1872,1883,1901,1903,1916,1942,1962,1976,2003,2013,2035,2065,2094,2120,2137,2150,2187,2203,2217,2238,2261,2277,2283,2305,2324,2337,2361,2382,2400,2410,2435,2468,2491,2501,2517,2553,2617,2664,2731,2762,2801,2831,2899,2913,2930,2966,2999,3044,3103,3120,3175,3252,3302,3369,3506,3567,3719,3793,3949,4164,4293,4446,4594,4680,4769,4898,5041,5157,5223,5366,5494,5572,5679,5785,5909,6079,6225,6370,6564,6660,6779,6912,7047,7225,7329,7469,7578,7667,7804,8003,8140,8281,8361,8486,8584,8667,8741,8834,8900,8990,9052,9173,9243,9328,9427,9494,9568,9649,9724,9770,9818,9885,9939,10014,10045,10098,10157,10194,10291,10354,10398,10465,10530,10567,10621,10656,10742,10808,10859,10894,10943,10993,11062,11113,11154,11178,11210,11232,11271,11316,11358,11391,11421,11505,11532,11567,11591,11616,11643,11659,11701,11737,11796,11822,11893,11932,11962,11986,12009,12030,12059,12085,12112,12154,12204,12314,12355,12384,12452,12546,12578,12608,12758,12810,12854,12889,12933,12947,12994,13011,13049,13070,13106,13143,13159,13198,13213,13248,13274,13308,13326,13348,13368,13379,13392,13402,13418],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7.4,7.4,11.1,14.8,14.8,16.65,18.5,24.05,24.05,24.05,24.05,24.05,24.05,24.05,24.05,24.05,24.05,24.05,24.05,29.6,29.6,31.45,31.45,33.3,35.15,35.15,35.15,35.15,35.15,35.15,35.15,35.15,35.15,35.15,35.15,37,37,37,40.7,46.25,51.8,64.75,96.2,127.65,153.55,159.1,199.799,238.649,327.449,395.899,418.099,462.499,514.299,865.798,908.348,960.147,974.947,1000.847,1060.047,1141.447,1198.797,1376.396,1461.496,1544.746,1659.446,1672.395,1766.745,1816.695,1907.345,1994.295,2023.895,2046.094,2114.544,2194.094,2249.594,2356.894,2429.043,2536.343,2580.743,2660.293,2695.443,2799.042,2943.342,3093.192,3280.041,3383.641,3405.841,3422.491,3463.191,3483.541,3516.841,3520.54,3544.59,3592.69,3629.69,3655.59,3705.54,3724.04,3764.74,3820.24,3873.89,3921.989,3953.439,3977.489,4045.939,4075.539,4101.439,4140.289,4182.839,4212.439,4223.539,4264.238,4299.388,4323.438,4367.838,4406.688,4439.988,4458.488,4504.738,4565.788,4608.338,4626.838,4656.437,4723.037,4841.437,4928.387,5052.336,5109.686,5181.836,5237.336,5363.136,5389.035,5420.485,5487.085,5548.135,5631.385,5740.535,5771.984,5873.734,6016.184,6108.684,6232.633,6486.082,6598.932,6880.131,7017.031,7305.63,7703.379,7942.029,8225.078,8498.877,8657.977,8822.626,9061.276,9325.825,9540.424,9662.524,9927.073,10163.873,10308.172,10506.122,10702.221,10931.62,11246.12,11516.219,11784.468,12143.367,12320.967,12541.116,12787.165,13036.915,13366.214,13558.613,13817.613,14019.262,14183.912,14437.361,14805.51,15058.959,15319.809,15467.808,15699.058,15880.357,16033.907,16170.806,16342.856,16464.956,16631.455,16746.155,16970.004,17099.504,17256.753,17439.903,17563.853,17700.752,17850.602,17989.351,18074.451,18163.251,18287.201,18387.1,18525.85,18583.2,18681.25,18790.399,18858.849,19038.299,19154.848,19236.248,19360.198,19480.447,19548.897,19648.797,19713.547,19872.646,19994.746,20089.096,20153.846,20244.495,20336.995,20464.645,20558.994,20634.844,20679.244,20738.444,20779.144,20851.294,20934.543,21012.243,21073.293,21128.793,21284.193,21334.142,21398.892,21443.292,21489.542,21539.492,21569.092,21646.792,21713.391,21822.541,21870.641,22001.991,22074.14,22129.64,22174.04,22216.59,22255.44,22309.09,22357.19,22407.14,22484.839,22577.339,22780.838,22856.688,22910.338,23036.138,23210.037,23269.237,23324.737,23602.236,23698.436,23779.836,23844.586,23925.985,23951.885,24038.835,24070.285,24140.585,24179.435,24246.035,24314.484,24344.084,24416.234,24443.984,24508.734,24556.834,24619.734,24653.033,24693.733,24730.733,24751.083,24775.133,24793.633,24823.233],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.7,3.7,0,1.85,1.85,5.55,0,0,0,0,0,0,0,0,0,0,0,5.55,0,1.85,0,1.85,1.85,0,0,0,0,0,0,0,0,0,0,1.85,0,0,3.7,5.55,5.55,12.95,31.45,31.45,25.9,5.55,40.7,38.85,88.8,68.45,22.2,44.4,51.8,351.499,42.55,51.8,14.8,25.9,59.2,81.4,57.35,177.6,85.1,83.25,114.7,12.95,94.35,49.95,90.65,86.95,29.6,22.2,68.45,79.55,55.5,107.3,72.15,107.3,44.4,79.55,35.15,103.6,144.3,149.85,186.849,103.6,22.2,16.65,40.7,20.35,33.3,3.7,24.05,48.1,37,25.9,49.95,18.5,40.7,55.5,53.65,48.1,31.45,24.05,68.45,29.6,25.9,38.85,42.55,29.6,11.1,40.7,35.15,24.05,44.4,38.85,33.3,18.5,46.25,61.05,42.55,18.5,29.6,66.6,118.4,86.95,123.95,57.35,72.15,55.5,125.8,25.9,31.45,66.6,61.05,83.25,109.15,31.45,101.75,142.45,92.5,123.95,253.449,112.85,281.199,136.9,288.599,397.749,238.649,283.049,273.799,159.1,164.65,238.649,264.549,214.599,122.1,264.549,236.799,144.3,197.949,196.099,229.399,314.499,270.099,268.249,358.899,177.6,220.149,246.049,249.749,329.299,192.399,258.999,201.649,164.65,253.449,368.149,253.449,260.849,148,231.249,181.3,153.55,136.9,172.05,122.1,166.5,114.7,223.849,129.5,157.25,183.15,123.95,136.9,149.85,138.75,85.1,88.8,123.95,99.9,138.75,57.35,98.05,109.15,68.45,179.45,116.55,81.4,123.95,120.25,68.45,99.9,64.75,159.1,122.1,94.35,64.75,90.65,92.5,127.65,94.35,75.85,44.4,59.2,40.7,72.15,83.25,77.7,61.05,55.5,155.4,49.95,64.75,44.4,46.25,49.95,29.6,77.7,66.6,109.15,48.1,131.35,72.15,55.5,44.4,42.55,38.85,53.65,48.1,49.95,77.7,92.5,203.499,75.85,53.65,125.8,173.9,59.2,55.5,277.499,96.2,81.4,64.75,81.4,25.9,86.95,31.45,70.3,38.85,66.6,68.45,29.6,72.15,27.75,64.75,48.1,62.9,33.3,40.7,37,20.35,24.05,18.5,29.6],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.7,7.4,7.4,9.25,11.1,16.65,16.65,16.65,12.95,9.25,9.25,7.4,5.55,0,0,0,0,5.55,5.55,7.4,7.4,9.25,11.1,11.1,11.1,5.55,5.55,3.7,3.7,1.85,0,0,0,1.85,1.85,1.85,5.55,11.1,16.65,29.6,61.05,90.65,116.55,122.1,159.1,192.4,275.65,331.15,321.9,334.85,360.75,706.699,708.549,721.499,647.499,604.949,641.949,678.949,684.499,510.6,553.15,584.6,684.5,671.55,706.7,675.25,708.55,617.9,562.4,501.35,455.1,521.7,482.85,540.2,521.7,542.05,556.85,614.2,580.9,604.95,693.75,736.3,850.999,847.299,825.099,762.199,767.749,684.499,573.499,427.349,264.55,209.05,223.85,233.1,242.35,240.5,247.9,299.7,329.3,329.3,323.75,321.9,340.4,351.5,336.7,320.05,308.95,290.45,270.1,286.75,253.45,247.9,266.4,266.4,257.15,246.05,281.2,301.55,308.95,303.4,288.6,316.35,401.45,469.9,547.6,543.9,573.5,610.5,706.7,666,579.05,558.7,495.8,521.7,558.7,534.65,510.6,627.15,688.2,745.55,937.949,967.549,1139.598,1245.048,1431.897,1687.196,1833.345,1992.444,2012.794,2059.044,1942.495,2044.244,2020.194,1837.044,1720.495,1701.995,1664.995,1650.195,1683.494,1640.944,1605.794,1705.694,1853.693,1857.393,1979.493,2012.793,2034.993,2084.943,2105.293,2120.093,2042.393,2033.143,1875.893,1862.943,1896.243,2018.343,2022.043,1953.593,1909.194,1881.444,1861.095,1849.995,1733.446,1537.347,1405.998,1311.649,1278.349,1270.949,1219.149,1222.849,1269.099,1220.999,1235.799,1219.149,1243.199,1104.45,1063.75,1030.45,947.2,962,882.45,830.65,801.05,784.4,875.05,867.65,849.15,834.35,897.25,867.65,858.4,854.7,834.35,839.9,852.85,793.65,764.05,788.1,815.85,845.45,762.2,684.5,649.35,625.3,606.8,597.55,547.6,514.3,493.95,604.95,595.7,619.75,592,555,527.25,495.8,518,429.2,488.4,471.75,558.7,584.6,590.15,604.95,569.8,542.05,486.55,486.55,405.15,410.7,447.7,606.799,640.099,654.899,727.049,852.849,862.099,839.899,1024.898,917.599,923.149,934.249,889.849,741.849,769.599,745.549,538.35,481,466.2,469.9,418.1,464.35,405.15,438.45,416.25,440.3,407,379.25,386.65,334.85,331.15,284.9,266.4],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.586,2.379,2.379,1.85,1.321,1.321,1.057,0.793,0,0,0,0,0,0.793,0.793,1.057,1.057,1.321,1.586,1.586,0.793,0.793,0.529,0.529,0.264,0,0,0,0,0.264,0.264,0.264,0.793,1.586,2.379,4.229,8.457,12.95,16.65,16.914,21.936,26.693,37.528,42.814,41.493,44.136,50.743,95.143,95.671,90.385,82.721,83.25,85.364,89.593,47.571,66.864,71.621,81.4,94.085,87.478,89.328,88.271,75.85,76.114,68.45,55.236,63.164,61.05,61.843,64.221,62.107,73.207,76.378,77.964,71.621,78.493,83.778,94.878,106.243,114.7,106.507,103.864,94.878,77.171,60.521,34.357,22.993,26.693,29.6,27.486,31.714,29.6,34.886,39.378,40.171,41.757,42.55,38.85,45.986,44.4,40.171,38.057,37.264,37,35.15,31.186,31.978,31.714,32.507,31.978,32.507,33.564,34.357,38.057,40.7,37,35.678,40.436,54.707,60.521,69.507,71.621,79.286,82.985,91.443,78.228,70.3,62.107,62.636,64.221,71.886,58.407,69.243,85.1,88.8,97.785,122.1,122.628,158.307,163.328,184.207,227.814,244.199,248.428,271.421,253.978,257.942,250.806,231.778,228.342,205.349,204.028,215.128,212.221,206.407,196.628,198.742,226.228,227.021,231.514,262.171,259.264,262.699,265.078,255.828,264.285,253.449,239.178,242.614,234.685,235.742,252.656,241.821,251.599,235.742,239.971,242.349,228.078,195.042,183.414,163.592,166.235,149.585,155.664,152.228,155.135,156.721,156.985,152.757,157.778,145.621,139.278,129.5,121.043,117.607,117.871,104.657,98.843,102.278,99.371,107.3,109.678,101.485,111,114.171,108.357,112.85,96.464,102.543,108.357,104.128,96.2,99.371,98.314,107.3,98.05,91.443,84.307,83.514,76.378,73.471,67.128,64.75,62.636,64.221,77.964,79.286,78.228,72.678,68.186,66.6,62.9,51.8,54.178,60.521,61.05,73.207,76.378,80.078,75.321,71.886,61.843,62.636,50.743,47.571,50.743,57.614,80.607,85.893,85.893,96.993,114.7,112.057,106.771,117.343,120.25,124.214,115.493,102.278,97.521,102.014,66.864,63.164,57.086,57.35,55.5,56.028,53.914,53.386,52.593,53.914,53.386,48.364,49.95,44.928,43.871,38.057,33.828,29.071]},{"iso":"MLI","continent":"Africa","population":20250834,"name":"Mali","population_density":15.196,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,4,11,18,18,25,28,31,36,39,41,45,47,56,59,74,87,87,105,123,144,148,171,171,216,224,246,258,293,309,325,370,389,408,424,482,490,508,544,563,580,612,631,650,668,692,704,712,730,758,779,806,835,860,874,901,931,947,969,1015,1030,1059,1077,1116,1194,1226,1250,1265,1315,1351,1386,1461,1485,1523,1533,1547,1586,1667,1722,1752,1776,1809,1860,1885,1890,1906,1923,1933,1933,1961,1978,2005,2039,2060,2118,2147,2173,2181,2202,2260,2285,2303,2330,2331,2348,2358,2370,2404,2406,2411,2412,2423,2433,2440,2467,2472,2475,2475,2477,2494,2494,2503,2503,2510,2513,2520,2521,2522,2535,2535,2541,2543,2543,2546,2552,2561,2565,2567,2573,2577,2582,2597,2597,2614,2640,2640,2666,2667,2667,2688,2699,2705,2708,2713,2717,2730,2736,2757,2773,2776,2777,2802,2807,2814,2833,2842,2870,2882,2898,2909,2912,2916,2924,2935,2940,2966,2966,2991,3006,3013,3024,3030,3034,3041,3064,3080,3086,3090,3101,3118,3131,3156,3170,3184,3189,3195,3210,3235,3248,3273,3286,3296,3297,3352,3368,3378,3379,3388,3407,3411,3428,3440,3444,3472,3490,3499,3515,3530,3537,3545,3554,3565,3573,3584,3609,3633,3657,3676,3706,3712,3745,3753,3792,3806,3868,3900,3948,3980,4033,4093,4169,4206,4255,4326,4417,4461,4505,4567,4659,4688,4710,4762,4837,4880,4938,5062,5135,5290,5442,5469,5576,5649,5721,5814,5836,5878,5969,6049],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.099,0.198,0.543,0.889,0.889,1.235,1.383,1.531,1.778,1.926,2.025,2.222,2.321,2.765,2.913,3.654,4.296,4.296,5.185,6.074,7.111,7.308,8.444,8.444,10.666,11.061,12.148,12.74,14.469,15.259,16.049,18.271,19.209,20.147,20.937,23.801,24.197,25.085,26.863,27.801,28.641,30.221,31.159,32.097,32.986,34.171,34.764,35.159,36.048,37.431,38.468,39.801,41.233,42.467,43.159,44.492,45.973,46.764,47.85,50.121,50.862,52.294,53.183,55.109,58.961,60.541,61.726,62.467,64.936,66.713,68.442,72.145,73.33,75.207,75.701,76.392,78.318,82.318,85.034,86.515,87.7,89.33,91.848,93.083,93.329,94.12,94.959,95.453,95.453,96.836,97.675,99.008,100.687,101.724,104.588,106.02,107.304,107.699,108.736,111.6,112.835,113.724,115.057,115.106,115.946,116.44,117.032,118.711,118.81,119.057,119.106,119.649,120.143,120.489,121.822,122.069,122.217,122.217,122.316,123.155,123.155,123.6,123.6,123.946,124.094,124.439,124.489,124.538,125.18,125.18,125.476,125.575,125.575,125.723,126.02,126.464,126.661,126.76,127.056,127.254,127.501,128.242,128.242,129.081,130.365,130.365,131.649,131.698,131.698,132.735,133.278,133.575,133.723,133.97,134.167,134.809,135.106,136.143,136.933,137.081,137.13,138.365,138.612,138.957,139.895,140.34,141.723,142.315,143.105,143.648,143.797,143.994,144.389,144.932,145.179,146.463,146.463,147.698,148.438,148.784,149.327,149.623,149.821,150.167,151.302,152.093,152.389,152.586,153.129,153.969,154.611,155.845,156.537,157.228,157.475,157.771,158.512,159.747,160.388,161.623,162.265,162.759,162.808,165.524,166.314,166.808,166.857,167.302,168.24,168.438,169.277,169.87,170.067,171.45,172.339,172.783,173.573,174.314,174.659,175.055,175.499,176.042,176.437,176.98,178.215,179.4,180.585,181.523,183.005,183.301,184.931,185.326,187.252,187.943,191.004,192.585,194.955,196.535,199.152,202.115,205.868,207.695,210.115,213.621,218.114,220.287,222.46,225.522,230.065,231.497,232.583,235.151,238.854,240.978,243.842,249.965,253.57,261.224,268.73,270.063,275.347,278.951,282.507,287.099,288.186,290.26,294.753,298.704],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.099,0.346,0.346,0,0.346,0.148,0.148,0.247,0.148,0.099,0.198,0.099,0.444,0.148,0.741,0.642,0,0.889,0.889,1.037,0.198,1.136,0,2.222,0.395,1.086,0.593,1.728,0.79,0.79,2.222,0.938,0.938,0.79,2.864,0.395,0.889,1.778,0.938,0.839,1.58,0.938,0.938,0.889,1.185,0.593,0.395,0.889,1.383,1.037,1.333,1.432,1.235,0.691,1.333,1.481,0.79,1.086,2.272,0.741,1.432,0.889,1.926,3.852,1.58,1.185,0.741,2.469,1.778,1.728,3.704,1.185,1.876,0.494,0.691,1.926,4,2.716,1.481,1.185,1.63,2.518,1.235,0.247,0.79,0.839,0.494,0,1.383,0.839,1.333,1.679,1.037,2.864,1.432,1.284,0.395,1.037,2.864,1.235,0.889,1.333,0.049,0.839,0.494,0.593,1.679,0.099,0.247,0.049,0.543,0.494,0.346,1.333,0.247,0.148,0,0.099,0.839,0,0.444,0,0.346,0.148,0.346,0.049,0.049,0.642,0,0.296,0.099,0,0.148,0.296,0.444,0.198,0.099,0.296,0.198,0.247,0.741,0,0.839,1.284,0,1.284,0.049,0,1.037,0.543,0.296,0.148,0.247,0.198,0.642,0.296,1.037,0.79,0.148,0.049,1.235,0.247,0.346,0.938,0.444,1.383,0.593,0.79,0.543,0.148,0.198,0.395,0.543,0.247,1.284,0,1.235,0.741,0.346,0.543,0.296,0.198,0.346,1.136,0.79,0.296,0.198,0.543,0.839,0.642,1.235,0.691,0.691,0.247,0.296,0.741,1.235,0.642,1.235,0.642,0.494,0.049,2.716,0.79,0.494,0.049,0.444,0.938,0.198,0.839,0.593,0.198,1.383,0.889,0.444,0.79,0.741,0.346,0.395,0.444,0.543,0.395,0.543,1.235,1.185,1.185,0.938,1.481,0.296,1.63,0.395,1.926,0.691,3.062,1.58,2.37,1.58,2.617,2.963,3.753,1.827,2.42,3.506,4.494,2.173,2.173,3.062,4.543,1.432,1.086,2.568,3.704,2.123,2.864,6.123,3.605,7.654,7.506,1.333,5.284,3.605,3.555,4.592,1.086,2.074,4.494,3.95],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.099,0.445,0.791,0.791,1.137,1.285,1.433,1.68,1.729,1.482,1.334,1.433,1.531,1.531,2.124,2.519,2.371,3.161,3.852,4.79,4.544,5.532,4.791,6.371,6.766,6.963,6.667,7.358,7.95,7.604,9.826,8.542,9.085,8.789,11.06,9.727,9.826,10.814,9.53,9.431,10.073,10.221,8.295,8.789,9.085,7.9,7.357,7.407,7.21,7.309,7.704,8.247,8.297,8.395,9.333,9.925,9.332,9.381,10.32,9.629,9.826,10.024,10.617,12.988,13.778,13.877,12.346,14.074,14.42,15.259,17.037,14.37,14.666,13.975,13.925,13.382,15.604,16.592,14.369,14.369,14.123,16.147,16.691,15.012,11.802,9.925,8.938,7.753,7.506,5.827,5.925,7.357,7.604,9.629,10.567,11.851,10.863,11.061,12.592,12.148,12,10.469,9.086,8.641,8.74,8.296,7.111,5.975,5.333,4.049,4.543,4.198,4.05,4.79,3.358,3.407,3.16,3.21,3.506,3.012,3.11,1.777,1.876,1.876,2.222,2.172,1.382,2.024,1.58,1.876,1.629,1.481,1.283,1.53,1.925,1.481,1.58,1.58,1.679,1.926,2.519,2.223,2.618,3.704,3.605,4.593,4.444,4.197,4.493,5.036,4.493,3.357,3.604,2.518,3.111,3.407,3.407,3.654,3.506,3.407,4.395,4.444,4.148,4.79,4.197,4.79,5.235,5.976,5.284,5.185,5.037,4.494,4.593,3.457,4.148,3.358,4.05,4.643,4.791,4.939,4.692,4.643,3.705,4.841,4.396,3.951,3.803,3.803,4.346,4.79,5.679,5.234,5.135,5.086,5.184,5.382,5.778,5.778,5.778,5.729,5.532,5.334,7.754,7.803,7.062,6.469,5.678,5.974,5.678,6.468,4.345,3.753,4.642,5.482,5.482,5.334,5.877,5.384,5.186,5.432,4.592,4.098,4.197,4.642,5.086,5.925,6.468,7.505,7.258,8.493,8.345,9.036,8.542,10.419,11.061,11.95,13.234,14.221,16.789,18.616,19.752,19.11,21.036,23.16,23.753,23.309,23.408,24.198,23.803,22.469,21.531,20.741,20.691,21.382,24.443,23.505,29.727,36.147,34.912,36.492,37.974,38.665,37.134,34.615,29.035,26.023,28.64],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.183,0.205,0.226,0.198,0.162,0.19,0.155,0.198,0.198,0.268,0.339,0.325,0.423,0.536,0.621,0.628,0.684,0.593,0.91,0.839,0.868,0.804,1.023,0.974,1.086,1.086,1.164,1.143,1.171,1.333,1.277,1.291,1.227,1.227,1.213,1.326,1.051,1.129,1.129,1.044,0.995,0.931,0.832,0.896,0.91,0.974,1.009,1.1,1.143,1.206,1.22,1.185,1.15,1.27,1.199,1.305,1.242,1.305,1.742,1.813,1.658,1.658,1.806,1.933,1.905,1.884,1.827,1.926,1.891,1.637,1.658,1.982,1.841,1.884,1.785,1.947,2.208,2.109,1.573,1.298,1.206,1.108,0.875,0.712,0.656,0.811,0.938,0.966,1.305,1.51,1.496,1.432,1.39,1.559,1.587,1.305,1.291,1.115,1.178,1.1,0.776,0.839,0.727,0.571,0.571,0.529,0.529,0.494,0.444,0.466,0.451,0.444,0.381,0.43,0.381,0.254,0.219,0.247,0.268,0.303,0.19,0.198,0.226,0.226,0.219,0.212,0.162,0.176,0.212,0.183,0.212,0.183,0.212,0.24,0.254,0.317,0.254,0.346,0.515,0.473,0.628,0.6,0.494,0.642,0.6,0.459,0.48,0.332,0.353,0.444,0.339,0.409,0.48,0.48,0.451,0.6,0.543,0.55,0.536,0.487,0.663,0.741,0.677,0.72,0.691,0.586,0.578,0.459,0.409,0.48,0.402,0.557,0.635,0.628,0.628,0.635,0.48,0.529,0.515,0.522,0.515,0.466,0.501,0.593,0.635,0.649,0.635,0.691,0.698,0.663,0.649,0.734,0.649,0.727,0.72,0.755,0.72,1.002,0.938,0.917,0.748,0.72,0.783,0.804,0.536,0.508,0.466,0.656,0.72,0.649,0.734,0.72,0.684,0.712,0.578,0.529,0.522,0.487,0.557,0.677,0.79,0.861,0.995,0.981,1.136,1.016,1.122,1.051,1.354,1.369,1.665,1.658,1.975,2.123,2.561,2.384,2.504,2.667,3.083,3.019,2.906,2.808,3.196,3.055,2.709,2.434,2.652,2.645,2.617,2.843,3.153,4.092,4.797,4.458,4.91,5.016,4.649,4.79,3.852,3.076,3.527,3.337]},{"iso":"MLT","continent":"Europe","population":441539,"name":"Malta","population_density":1454.037,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,5,6,6,12,18,21,30,38,38,53,64,73,90,107,110,129,134,139,149,151,156,169,188,196,202,213,227,241,293,299,337,350,370,378,384,393,399,412,422,426,427,431,443,444,445,447,448,448,450,458,463,465,467,468,477,480,482,484,486,489,490,496,503,506,508,522,532,546,553,558,569,584,599,600,609,610,611,611,612,616,616,618,618,619,620,622,622,625,627,629,630,632,635,640,645,646,649,650,656,662,663,663,664,665,665,665,665,668,670,670,670,670,670,671,671,672,672,672,672,673,673,674,674,674,674,674,674,674,674,674,675,677,677,677,679,680,686,686,700,701,708,720,814,824,845,860,874,890,926,946,995,1035,1089,1112,1141,1190,1245,1276,1348,1306,1375,1423,1470,1510,1546,1577,1612,1667,1705,1751,1788,1820,1847,1862,1883,1909,1931,1965,1984,2014,2039,2076,2099,2162,2204,2247,2274,2352,2405,2454,2560,2595,2634,2699,2731,2776,2814,2856,2898,2929,2958,2979,3006,3035,3058,3095,3139,3204,3270,3327,3374,3442,3506,3581,3681,3776,3844,3937,4048,4160,4282,4486,4628,4737,4871,5026,5137,5258,5373,5498,5578,5685,5760,5866,5942,6042,6182,6400,6506,6590,6764,6893,7039,7141,7243,7396,7537,7646,7796,7917,8034,8137,8247,8420,8560,8681,8822,8924,9004,9137,9253,9405,9501,9609,9752,9873,9975,10101,10197,10320,10423,10520,10659,10699,10778,10884,10980,11101,11153,11254,11303,11415,11475],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6.794,6.794,6.794,11.324,13.589,13.589,27.178,40.767,47.561,67.944,86.063,86.063,120.035,144.948,165.331,203.833,242.334,249.129,292.16,303.484,314.808,337.456,341.986,353.31,382.752,425.783,443.902,457.491,482.404,514.111,545.818,663.588,677.177,763.239,792.682,837.978,856.097,869.685,890.069,903.657,933.1,955.748,964.807,967.072,976.131,1003.309,1005.574,1007.838,1012.368,1014.633,1014.633,1019.163,1037.281,1048.605,1053.135,1057.664,1059.929,1080.312,1087.107,1091.636,1096.166,1100.696,1107.49,1109.755,1123.344,1139.197,1145.992,1150.521,1182.229,1204.877,1236.584,1252.437,1263.762,1288.674,1322.646,1356.619,1358.883,1379.267,1381.531,1383.796,1383.796,1386.061,1395.12,1395.12,1399.65,1399.65,1401.915,1404.179,1408.709,1408.709,1415.504,1420.033,1424.563,1426.828,1431.357,1438.152,1449.476,1460.8,1463.064,1469.859,1472.124,1485.712,1499.301,1501.566,1501.566,1503.831,1506.096,1506.096,1506.096,1506.096,1512.89,1517.42,1517.42,1517.42,1517.42,1517.42,1519.685,1519.685,1521.949,1521.949,1521.949,1521.949,1524.214,1524.214,1526.479,1526.479,1526.479,1526.479,1526.479,1526.479,1526.479,1526.479,1526.479,1528.744,1533.273,1533.273,1533.273,1537.803,1540.068,1553.657,1553.657,1585.364,1587.629,1603.482,1630.66,1843.552,1866.2,1913.761,1947.733,1979.44,2015.677,2097.21,2142.506,2253.482,2344.074,2466.373,2518.464,2584.143,2695.119,2819.683,2889.892,3052.958,2957.836,3114.108,3222.818,3329.264,3419.856,3501.389,3571.598,3650.867,3775.431,3861.494,3965.675,4049.472,4121.946,4183.096,4217.068,4264.629,4323.514,4373.34,4450.343,4493.374,4561.318,4617.939,4701.736,4753.827,4896.51,4991.632,5089.018,5150.168,5326.823,5446.857,5557.833,5797.902,5877.171,5965.498,6112.71,6185.184,6287.1,6373.163,6468.285,6563.407,6633.616,6699.295,6746.856,6808.006,6873.685,6925.776,7009.573,7109.225,7256.437,7405.914,7535.008,7641.454,7795.461,7940.408,8110.269,8336.749,8551.906,8705.913,8916.54,9167.933,9421.591,9697.898,10159.918,10481.52,10728.384,11031.868,11382.913,11634.306,11908.348,12168.8,12451.901,12633.086,12875.42,13045.28,13285.35,13457.475,13683.955,14001.028,14494.756,14734.825,14925.069,15319.145,15611.305,15941.967,16172.977,16403.987,16750.502,17069.84,17316.704,17656.424,17930.466,18195.448,18428.723,18677.852,19069.663,19386.736,19660.777,19980.115,20211.125,20392.31,20693.529,20956.246,21300.497,21517.918,21762.517,22086.384,22360.426,22591.436,22876.801,23094.223,23372.794,23606.069,23825.755,24140.563,24231.155,24410.075,24650.144,24867.565,25141.607,25259.377,25488.122,25599.098,25852.756,25988.644],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4.53,2.265,0,13.589,13.589,6.794,20.383,18.118,0,33.972,24.913,20.383,38.502,38.502,6.794,43.031,11.324,11.324,22.648,4.53,11.324,29.442,43.031,18.118,13.589,24.913,31.707,31.707,117.77,13.589,86.063,29.442,45.296,18.118,13.589,20.383,13.589,29.442,22.648,9.059,2.265,9.059,27.178,2.265,2.265,4.53,2.265,0,4.53,18.118,11.324,4.53,4.53,2.265,20.383,6.794,4.53,4.53,4.53,6.794,2.265,13.589,15.854,6.794,4.53,31.707,22.648,31.707,15.854,11.324,24.913,33.972,33.972,2.265,20.383,2.265,2.265,0,2.265,9.059,0,4.53,0,2.265,2.265,4.53,0,6.794,4.53,4.53,2.265,4.53,6.794,11.324,11.324,2.265,6.794,2.265,13.589,13.589,2.265,0,2.265,2.265,0,0,0,6.794,4.53,0,0,0,0,2.265,0,2.265,0,0,0,2.265,0,2.265,0,0,0,0,0,0,0,0,2.265,4.53,0,0,4.53,2.265,13.589,0,31.707,2.265,15.854,27.178,212.892,22.648,47.561,33.972,31.707,36.237,81.533,45.296,110.975,90.592,122.3,52.091,65.679,110.975,124.564,70.209,163.066,-95.122,156.272,108.711,106.446,90.592,81.533,70.209,79.268,124.564,86.063,104.181,83.798,72.474,61.15,33.972,47.561,58.885,49.826,77.003,43.031,67.944,56.62,83.798,52.091,142.683,95.122,97.387,61.15,176.655,120.035,110.975,240.069,79.268,88.327,147.212,72.474,101.916,86.063,95.122,95.122,70.209,65.679,47.561,61.15,65.679,52.091,83.798,99.651,147.212,149.477,129.094,106.446,154.007,144.948,169.86,226.481,215.157,154.007,210.627,251.393,253.658,276.306,462.02,321.602,246.864,303.484,351.045,251.393,274.041,260.453,283.101,181.184,242.334,169.86,240.069,172.125,226.481,317.073,493.728,240.069,190.244,394.076,292.16,330.662,231.01,231.01,346.515,319.338,246.864,339.721,274.041,264.982,233.275,249.129,391.811,317.073,274.041,319.338,231.01,181.184,301.219,262.717,344.25,217.421,244.599,323.867,274.041,231.01,285.366,217.421,278.571,233.275,219.686,314.808,90.592,178.92,240.069,217.421,274.041,117.77,228.745,110.975,253.658,135.888],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4.53,6.795,6.795,20.384,33.973,40.767,61.15,79.268,74.738,106.445,131.358,138.152,163.065,194.773,181.184,206.097,217.421,194.773,192.508,176.655,149.477,140.417,176.654,151.741,154.006,167.595,176.654,203.831,310.277,294.424,337.456,348.78,380.487,373.692,355.574,344.25,240.069,255.922,192.507,172.124,129.093,120.034,133.623,115.505,104.181,79.269,58.886,49.827,52.092,61.151,45.297,47.562,49.827,47.562,65.68,72.474,72.474,58.886,52.092,54.356,52.091,63.415,58.886,58.886,58.886,86.063,104.181,129.094,142.683,140.418,149.477,176.655,206.097,176.655,174.39,144.948,131.359,120.035,97.387,72.474,38.502,40.767,20.384,20.384,20.384,24.914,22.649,20.384,24.914,24.914,27.179,29.444,33.973,40.767,52.091,47.562,49.826,47.561,58.885,67.944,63.415,52.091,43.032,43.032,36.238,33.973,20.384,13.589,15.854,15.854,13.589,11.324,11.324,13.589,13.589,9.06,4.53,4.53,4.53,6.795,6.795,6.795,6.795,4.53,4.53,4.53,4.53,2.265,2.265,0,2.265,6.795,6.795,6.795,11.325,13.59,27.179,27.179,56.621,54.356,70.21,97.388,305.75,326.133,360.105,394.077,394.077,428.049,493.728,511.846,409.929,477.873,552.612,570.731,604.703,679.441,722.472,747.385,799.476,613.762,647.734,704.354,745.121,724.738,681.707,681.707,597.909,817.595,747.386,742.856,720.208,702.09,681.707,645.47,613.763,548.084,511.847,484.669,443.902,439.372,434.842,484.668,489.198,572.996,618.292,638.676,656.795,765.506,828.921,856.098,1044.076,980.661,973.866,1023.691,1035.015,960.276,926.304,910.451,765.504,756.445,733.797,634.146,622.822,586.585,552.613,541.289,545.818,622.821,706.619,788.152,833.448,921.776,1014.633,1100.695,1227.525,1295.47,1300,1381.533,1526.48,1626.131,1757.489,2049.649,2144.77,2176.477,2325.954,2466.372,2466.372,2486.755,2470.902,2291.983,2151.565,2147.035,2013.411,1902.435,1823.167,1775.607,1832.227,2042.854,2101.739,2049.649,2273.865,2325.956,2484.493,2489.022,2402.959,2255.746,2335.015,2391.635,2337.28,2319.161,2253.481,2255.746,2273.865,2319.161,2316.896,2344.073,2323.69,2280.659,2196.861,2264.805,2278.393,2230.832,2131.18,2101.738,2106.267,2149.298,2199.124,2183.271,2137.975,2072.296,2088.15,2063.237,2054.178,1870.729,1818.639,1773.342,1773.342,1768.812,1653.307,1662.366,1458.533,1621.599,1578.567],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2.912,4.853,5.824,8.736,10.677,10.353,15.207,16.824,17.795,22.325,24.913,23.295,29.442,26.207,24.266,24.589,19.736,15.854,19.089,19.089,20.06,20.383,20.707,24.589,27.501,40.119,35.913,45.62,47.884,50.796,48.855,46.267,32.354,32.354,24.266,23.295,18.118,15.854,15.207,16.177,14.559,10.677,8.089,7.118,6.794,6.147,4.853,6.147,6.471,6.471,6.471,9.383,9.706,7.765,6.794,6.794,7.118,7.118,6.147,7.442,7.765,7.765,11.648,13.912,18.118,18.442,17.795,20.383,24.589,24.913,22.001,20.383,18.442,17.148,13.589,9.059,5.5,5.177,2.912,2.588,2.588,2.912,3.235,1.941,2.912,2.912,3.559,3.559,3.883,4.206,5.824,6.471,6.147,6.471,6.471,7.765,8.736,7.442,5.824,5.824,5.177,4.853,2.912,0.971,1.618,2.265,1.941,1.618,1.618,1.618,1.941,0.971,0.647,0.647,0.647,0.647,0.971,0.647,0.971,0.647,0.647,0.647,0.647,0.324,0.324,0,0,0.324,0.971,0.971,0.971,1.618,1.941,3.883,3.559,7.442,7.765,10.03,13.265,43.355,44.649,51.443,51.767,55.973,58.885,66.65,42.708,55.326,61.473,74.091,77.003,81.209,85.416,96.74,90.916,101.269,70.209,85.092,91.239,90.592,85.739,87.357,74.091,99.004,94.475,91.239,90.916,89.945,88.651,87.357,80.886,69.885,66.003,58.238,57.267,53.061,54.032,57.267,62.444,61.473,74.739,77.327,85.092,84.121,101.269,106.446,114.858,128.77,126.506,125.211,137.506,122.623,120.035,116.476,95.769,98.034,95.445,83.798,80.239,74.415,71.503,65.356,63.738,67.944,79.592,94.151,103.858,109.681,124.241,132.976,143.006,154.33,163.713,167.272,182.155,196.067,211.598,226.804,260.453,275.659,288.924,302.19,316.426,316.102,315.779,286.983,281.483,272.1,263.365,237.481,235.863,221.304,216.451,221.304,265.953,265.629,268.541,290.542,307.69,322.573,310.278,272.747,287.954,306.396,285.366,292.16,284.071,288.924,289.248,275.336,285.689,295.719,286.336,292.807,287.954,280.512,287.954,269.512,273.394,265.306,254.629,267.894,281.159,271.13,274.365,256.247,264.982,263.365,248.482,254.305,234.246,219.039,222.274,213.539,219.363,204.803,192.508,195.42,206.097,191.214]},{"iso":"MHL","continent":"Oceania","population":59194,"name":"Marshall Islands","population_density":295.15,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33.787,33.787,33.787,33.787,33.787,33.787,33.787,33.787,16.894,16.894,16.894,16.894,16.894,16.894,16.894,16.894,16.894,16.894,16.894,16.894,67.574,67.574,67.574,67.574,67.574,67.574,67.574,67.574,67.574,67.574,67.574,67.574,67.574,67.574,67.574,67.574,67.574,67.574,67.574,67.574,67.574,67.574,67.574,67.574,67.574,67.574,67.574,67.574,67.574,67.574,67.574],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-16.894,0,0,0,0,0,0,0,0,0,0,0,50.681,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-16.894,-16.894,-16.894,-16.894,-16.894,-16.894,-16.894,-16.894,0,0,0,0,50.681,50.681,50.681,50.681,50.681,50.681,50.681,50.681,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2.413,-2.413,-2.413,-2.413,-2.413,-2.413,-2.413,0,0,0,0,0,7.24,7.24,7.24,7.24,7.24,7.24,7.24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},{"iso":"MRT","continent":"Africa","population":4649660,"name":"Mauritania","population_density":4.289,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,2,2,2,2,2,2,2,3,3,5,5,5,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,9,15,20,29,40,62,81,131,141,173,200,227,237,262,268,292,346,423,483,530,588,668,745,784,883,947,1049,1104,1162,1283,1439,1572,1682,1783,1887,2057,2223,2424,2621,2813,2984,3121,3292,3519,3739,3907,4025,4149,4237,4363,4472,4606,4705,4827,4879,4948,5024,5087,5126,5203,5275,5355,5446,5518,5564,5659,5710,5813,5873,5923,5985,6027,6067,6116,6151,6171,6208,6249,6273,6295,6310,6319,6323,6382,6418,6444,6444,6498,6510,6523,6555,6598,6622,6653,6676,6693,6701,6762,6789,6829,6848,6885,6894,6905,6928,6960,6977,6993,7012,7012,7016,7048,7075,7089,7106,7126,7134,7142,7165,7165,7191,7222,7266,7274,7276,7295,7319,7332,7346,7361,7365,7368,7384,7403,7425,7433,7457,7462,7464,7474,7488,7502,7505,7511,7517,7520,7523,7529,7535,7540,7548,7550,7550,7554,7565,7572,7585,7603,7607,7608,7621,7634,7638,7650,7662,7663,7664,7677,7680,7688,7700,7700,7703,7704,7704,7724,7744,7777,7804,7814,7820,7833,7848,7885,7900,7932,7948,7952,7979,7994,8010,8034,8075,8096,8128,8167,8193,8246,8288,8424,8458,8547,8601,8710,8863,9005,9181,9359,9516,9679,9876,10105,10268,10501,10780,10971,11135,11431,11629,11805],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.215,0.215,0.215,0.215,0.215,0.43,0.43,0.43,0.43,0.43,0.43,0.43,0.645,0.645,1.075,1.075,1.075,1.29,1.29,1.29,1.29,1.29,1.29,1.29,1.29,1.29,1.505,1.505,1.505,1.505,1.505,1.505,1.505,1.505,1.505,1.505,1.505,1.505,1.505,1.505,1.505,1.505,1.505,1.505,1.505,1.505,1.721,1.721,1.721,1.721,1.721,1.721,1.721,1.721,1.721,1.721,1.721,1.721,1.721,1.936,3.226,4.301,6.237,8.603,13.334,17.421,28.174,30.325,37.207,43.014,48.821,50.971,56.348,57.639,62.8,74.414,90.974,103.879,113.987,126.461,143.666,160.227,168.614,189.906,203.671,225.608,237.437,249.911,275.934,309.485,338.089,361.747,383.469,405.836,442.398,478.099,521.328,563.697,604.99,641.767,671.232,708.009,756.83,804.145,840.276,865.655,892.323,911.249,938.348,961.791,990.61,1011.902,1038.14,1049.324,1064.164,1080.509,1094.058,1102.446,1119.007,1134.492,1151.697,1171.268,1186.753,1196.647,1217.078,1228.047,1250.199,1263.103,1273.857,1287.191,1296.224,1304.827,1315.365,1322.892,1327.194,1335.151,1343.969,1349.131,1353.862,1357.088,1359.024,1359.884,1372.573,1380.316,1385.908,1385.908,1397.522,1400.102,1402.898,1409.781,1419.028,1424.19,1430.857,1435.804,1439.46,1441.181,1454.3,1460.107,1468.71,1472.796,1480.753,1482.689,1485.055,1490.001,1496.884,1500.54,1503.981,1508.067,1508.067,1508.928,1515.81,1521.617,1524.628,1528.284,1532.585,1534.306,1536.026,1540.973,1540.973,1546.565,1553.232,1562.695,1564.415,1564.846,1568.932,1574.094,1576.889,1579.9,1583.127,1583.987,1584.632,1588.073,1592.159,1596.891,1598.612,1603.773,1604.849,1605.279,1607.429,1610.44,1613.451,1614.097,1615.387,1616.677,1617.323,1617.968,1619.258,1620.549,1621.624,1623.345,1623.775,1623.775,1624.635,1627.001,1628.506,1631.302,1635.173,1636.034,1636.249,1639.045,1641.84,1642.701,1645.282,1647.862,1648.077,1648.293,1651.088,1651.734,1653.454,1656.035,1656.035,1656.68,1656.895,1656.895,1661.197,1665.498,1672.595,1678.402,1680.553,1681.843,1684.639,1687.865,1695.823,1699.049,1705.931,1709.372,1710.233,1716.039,1719.265,1722.707,1727.868,1736.686,1741.203,1748.085,1756.473,1762.064,1773.463,1782.496,1811.745,1819.058,1838.199,1849.813,1873.255,1906.161,1936.701,1974.553,2012.835,2046.601,2081.658,2124.026,2173.277,2208.334,2258.445,2318.449,2359.527,2394.799,2458.459,2501.043,2538.895],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.215,0,0,0,0,0,0,0.215,0,0.43,0,0,0.215,0,0,0,0,0,0,0,0,0.215,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.215,0,0,0,0,0,0,0,0,0,0,0,0,0.215,1.29,1.075,1.936,2.366,4.732,4.086,10.753,2.151,6.882,5.807,5.807,2.151,5.377,1.29,5.162,11.614,16.56,12.904,10.108,12.474,17.206,16.56,8.388,21.292,13.764,21.937,11.829,12.474,26.023,33.551,28.604,23.658,21.722,22.367,36.562,35.702,43.229,42.369,41.293,36.777,29.465,36.777,48.821,47.315,36.132,25.378,26.669,18.926,27.099,23.443,28.819,21.292,26.238,11.184,14.84,16.345,13.549,8.388,16.56,15.485,17.206,19.571,15.485,9.893,20.432,10.969,22.152,12.904,10.753,13.334,9.033,8.603,10.538,7.527,4.301,7.958,8.818,5.162,4.732,3.226,1.936,0.86,12.689,7.743,5.592,0,11.614,2.581,2.796,6.882,9.248,5.162,6.667,4.947,3.656,1.721,13.119,5.807,8.603,4.086,7.958,1.936,2.366,4.947,6.882,3.656,3.441,4.086,0,0.86,6.882,5.807,3.011,3.656,4.301,1.721,1.721,4.947,0,5.592,6.667,9.463,1.721,0.43,4.086,5.162,2.796,3.011,3.226,0.86,0.645,3.441,4.086,4.732,1.721,5.162,1.075,0.43,2.151,3.011,3.011,0.645,1.29,1.29,0.645,0.645,1.29,1.29,1.075,1.721,0.43,0,0.86,2.366,1.505,2.796,3.871,0.86,0.215,2.796,2.796,0.86,2.581,2.581,0.215,0.215,2.796,0.645,1.721,2.581,0,0.645,0.215,0,4.301,4.301,7.097,5.807,2.151,1.29,2.796,3.226,7.958,3.226,6.882,3.441,0.86,5.807,3.226,3.441,5.162,8.818,4.516,6.882,8.388,5.592,11.399,9.033,29.249,7.312,19.141,11.614,23.443,32.906,30.54,37.852,38.282,33.766,35.056,42.369,49.251,35.056,50.111,60.004,41.078,35.271,63.661,42.584,37.852],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.215,0.215,0.215,0.215,0.215,0.215,0.215,0.43,0.215,0.645,0.645,0.645,0.86,0.86,0.86,0.645,0.645,0.215,0.215,0.215,0,0.215,0.215,0.215,0.215,0.215,0.215,0.215,0.215,0,0,0,0,0,0,0,0,0,0,0,0,0.215,0.215,0.215,0.215,0.215,0.215,0.215,0.215,0,0,0,0,0,0.215,1.505,2.58,4.516,6.882,11.614,15.7,26.453,28.389,33.981,38.713,42.584,42.369,43.014,40.218,34.627,44.09,53.768,60.865,65.166,75.489,87.318,102.588,105.814,115.492,112.696,121.729,123.45,123.45,132.267,149.258,169.474,171.84,179.798,180.228,204.961,228.189,245.395,254.213,266.902,280.021,287.764,302.174,314.433,326.046,318.949,301.958,287.334,269.483,267.117,253.783,233.781,207.758,197.864,183.67,171.841,169.26,155.71,140.655,128.396,122.589,113.557,121.944,122.589,116.137,123.02,125.601,131.193,128.612,122.159,115.922,109.47,108.18,98.286,94.844,76.993,72.047,70.112,61.94,57.639,52.262,43.66,36.993,45.381,45.166,41.94,36.778,43.66,43.015,43.875,49.897,46.456,43.875,44.95,49.897,41.939,41.079,51.402,50.327,49.682,48.606,49.897,46.886,45.596,48.822,42.585,40.434,35.272,35.272,27.314,26.238,30.754,31.614,27.743,27.743,28.603,26.238,27.959,32.046,25.164,24.949,28.605,34.412,31.832,30.541,32.906,33.121,35.917,33.336,29.895,21.292,20.216,23.227,23.227,22.797,21.722,23.873,21.722,21.292,22.798,22.368,21.293,17.206,16.775,12.903,12.473,12.688,11.827,10.106,8.17,9.246,8.386,7.096,7.311,9.032,9.247,10.753,13.549,12.688,12.473,15.269,17.205,15.699,16.775,16.56,12.904,12.259,14.84,12.689,11.614,13.335,10.754,8.818,8.818,8.603,10.108,13.764,19.14,22.366,24.517,25.162,27.743,30.969,34.626,33.551,33.336,30.97,29.679,34.196,34.626,34.841,32.045,37.637,35.271,38.712,46.24,46.025,54.198,59.79,83.877,82.371,96.996,101.728,116.783,144.097,163.238,192.057,201.09,227.544,243.459,274.214,300.022,302.172,321.743,343.895,346.691,348.196,376.801,377.016,365.617],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.031,0.031,0.031,0.031,0.031,0.031,0.031,0.031,0.092,0.092,0.092,0.123,0.123,0.092,0.092,0.031,0.031,0.031,0,0,0.031,0.031,0.031,0.031,0.031,0.031,0.031,0,0,0,0,0,0,0,0,0,0,0,0,0,0.031,0.031,0.031,0.031,0.031,0.031,0.031,0,0,0,0,0,0,0.031,0.215,0.369,0.645,0.983,1.659,2.243,3.748,3.871,4.701,5.254,5.745,5.377,5.561,4.209,4.639,5.315,6.851,7.865,9.002,10.016,12.29,13.918,13.457,14.133,14.256,15.946,15.854,15.178,16.53,20.124,21.169,22.582,22.552,24.057,27.498,28.881,30.263,32.23,34.749,36.9,37.914,37.944,39.819,40.402,39.511,37.238,35.794,34.288,32.906,29.28,26.638,24.518,24.641,22.429,21.845,20.309,18.895,15.977,15.301,13.764,14.625,15.301,15.178,14.655,16.376,15.577,16.53,15.915,14.655,14.348,14.225,12.535,12.474,10.385,9.156,8.756,8.111,7.558,7.005,5.96,5.162,4.67,5.346,5.192,5.254,4.578,5.776,5.868,6.145,5.315,5.53,5.469,6.421,5.469,5.623,5.469,6.36,5.868,6.36,5.991,6.421,6.176,6.268,5.1,5.254,4.547,4.455,3.902,3.625,3.41,3.687,3.533,3.441,3.472,3.503,3.748,3.871,3.595,2.765,3.134,3.564,4.301,4.301,4.117,3.994,4.732,4.332,3.81,2.919,2.796,2.827,2.734,2.581,2.857,2.673,2.95,2.98,2.95,2.765,2.612,2.366,2.212,1.659,1.69,1.721,1.505,1.26,1.014,1.075,1.137,1.014,0.922,0.952,1.106,1.137,1.383,1.69,1.751,1.782,2.059,2.12,2.028,1.997,1.813,1.721,1.721,1.721,1.413,1.536,1.536,1.168,1.229,1.229,0.83,1.352,1.721,2.366,3.195,3.41,3.564,3.963,3.81,4.332,3.779,3.933,4.117,4.056,4.486,4.486,3.841,4.117,4.394,4.547,5.407,5.776,6.114,7.251,7.804,10.723,11.122,12.873,13.334,15.884,18.957,22.029,23.258,27.683,29.772,33.121,35.824,38.159,38.805,40.556,43.659,44.704,44.734,47.776,46.824,47.223]},{"iso":"MUS","continent":"Africa","population":1271767,"name":"Mauritius","population_density":622.962,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,12,14,28,36,42,48,81,94,102,107,128,143,161,169,186,196,227,244,268,273,314,318,319,324,324,324,324,324,324,325,328,328,328,329,331,331,331,332,334,334,332,332,332,332,332,332,332,332,332,332,332,332,332,332,332,332,332,332,332,332,332,332,332,332,332,334,334,334,334,334,335,335,335,335,335,335,335,337,337,337,337,337,337,337,337,337,337,337,337,337,337,337,337,337,340,340,341,341,341,341,341,341,341,341,341,341,341,341,342,342,342,342,342,342,342,342,342,343,343,343,343,343,343,343,343,343,344,344,344,344,344,344,344,344,344,344,344,344,344,344,344,344,344,344,344,344,344,345,346,346,346,346,346,346,346,346,346,347,348,348,355,355,355,355,356,356,356,356,356,356,356,356,361,361,361,361,361,361,361,365,365,366,366,366,366,366,367,367,367,367,367,367,367,367,381,381,385,385,385,387,395,395,395,395,395,395,404,407,407,415,417,417,417,419,419,419,425,435,435,435,439,439,439,439,441,441,446,451,451,452,453,453,453,453,453,453,453,468,470,470,478,491,491,494,494,494,494,494,494,494,497,498,501,501,501,504,505,508,508,508,508,508,511,515,515,515,515,515,515,523,524,524,524],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2.359,2.359,9.436,11.008,22.017,28.307,33.025,37.743,63.691,73.913,80.203,84.135,100.647,112.442,126.596,132.886,146.253,154.116,178.492,191.859,210.73,214.662,246.901,250.046,250.832,254.764,254.764,254.764,254.764,254.764,254.764,255.55,257.909,257.909,257.909,258.695,260.268,260.268,260.268,261.054,262.627,262.627,261.054,261.054,261.054,261.054,261.054,261.054,261.054,261.054,261.054,261.054,261.054,261.054,261.054,261.054,261.054,261.054,261.054,261.054,261.054,261.054,261.054,261.054,261.054,261.054,261.054,262.627,262.627,262.627,262.627,262.627,263.413,263.413,263.413,263.413,263.413,263.413,263.413,264.986,264.986,264.986,264.986,264.986,264.986,264.986,264.986,264.986,264.986,264.986,264.986,264.986,264.986,264.986,264.986,264.986,267.345,267.345,268.131,268.131,268.131,268.131,268.131,268.131,268.131,268.131,268.131,268.131,268.131,268.131,268.917,268.917,268.917,268.917,268.917,268.917,268.917,268.917,268.917,269.703,269.703,269.703,269.703,269.703,269.703,269.703,269.703,269.703,270.49,270.49,270.49,270.49,270.49,270.49,270.49,270.49,270.49,270.49,270.49,270.49,270.49,270.49,270.49,270.49,270.49,270.49,270.49,270.49,270.49,271.276,272.062,272.062,272.062,272.062,272.062,272.062,272.062,272.062,272.062,272.849,273.635,273.635,279.139,279.139,279.139,279.139,279.925,279.925,279.925,279.925,279.925,279.925,279.925,279.925,283.857,283.857,283.857,283.857,283.857,283.857,283.857,287.002,287.002,287.789,287.789,287.789,287.789,287.789,288.575,288.575,288.575,288.575,288.575,288.575,288.575,288.575,299.583,299.583,302.728,302.728,302.728,304.301,310.591,310.591,310.591,310.591,310.591,310.591,317.668,320.027,320.027,326.318,327.89,327.89,327.89,329.463,329.463,329.463,334.181,342.044,342.044,342.044,345.189,345.189,345.189,345.189,346.762,346.762,350.693,354.625,354.625,355.411,356.197,356.197,356.197,356.197,356.197,356.197,356.197,367.992,369.565,369.565,375.855,386.077,386.077,388.436,388.436,388.436,388.436,388.436,388.436,388.436,390.795,391.581,393.94,393.94,393.94,396.299,397.085,399.444,399.444,399.444,399.444,399.444,401.803,404.948,404.948,404.948,404.948,404.948,404.948,411.239,412.025,412.025,412.025],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7.077,1.573,11.008,6.29,4.718,4.718,25.948,10.222,6.29,3.932,16.512,11.795,14.154,6.29,13.367,7.863,24.376,13.367,18.871,3.932,32.239,3.145,0.786,3.932,0,0,0,0,0,0.786,2.359,0,0,0.786,1.573,0,0,0.786,1.573,0,-1.573,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.573,0,0,0,0,0.786,0,0,0,0,0,0,1.573,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2.359,0,0.786,0,0,0,0,0,0,0,0,0,0,0,0.786,0,0,0,0,0,0,0,0,0.786,0,0,0,0,0,0,0,0,0.786,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.786,0.786,0,0,0,0,0,0,0,0,0.786,0.786,0,5.504,0,0,0,0.786,0,0,0,0,0,0,0,3.932,0,0,0,0,0,0,3.145,0,0.786,0,0,0,0,0.786,0,0,0,0,0,0,0,11.008,0,3.145,0,0,1.573,6.29,0,0,0,0,0,7.077,2.359,0,6.29,1.573,0,0,1.573,0,0,4.718,7.863,0,0,3.145,0,0,0,1.573,0,3.932,3.932,0,0.786,0.786,0,0,0,0,0,0,11.795,1.573,0,6.29,10.222,0,2.359,0,0,0,0,0,0,2.359,0.786,2.359,0,0,2.359,0.786,2.359,0,0,0,0,2.359,3.145,0,0,0,0,0,6.29,0.786,0,0],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7.077,8.65,19.658,25.948,30.666,35.384,61.332,71.554,70.767,73.126,78.63,84.135,93.571,95.143,82.562,80.203,98.289,107.724,110.083,102.22,120.305,117.16,104.579,100.648,76.272,62.905,44.034,40.102,7.863,5.504,7.077,3.145,3.145,3.931,5.504,5.504,5.504,5.504,4.718,4.718,3.145,2.359,0.786,0.786,0.786,0,-1.573,-1.573,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.573,1.573,1.573,1.573,1.573,2.359,2.359,2.359,0.786,0.786,0.786,0.786,2.359,1.573,1.573,1.573,1.573,1.573,1.573,1.573,0,0,0,0,0,0,0,0,0,2.359,2.359,3.145,3.145,3.145,3.145,3.145,3.145,0.786,0.786,0,0,0,0,0.786,0.786,0.786,0.786,0.786,0.786,0.786,0.786,0,0.786,0.786,0.786,0.786,0.786,0.786,0.786,0.786,0,0.786,0.786,0.786,0.786,0.786,0.786,0.786,0.786,0,0,0,0,0,0,0,0,0,0,0,0,0,0.786,1.572,1.572,1.572,1.572,1.572,1.572,1.572,0.786,0,0.786,1.572,1.572,7.076,7.076,7.076,7.076,7.862,7.076,6.29,6.29,0.786,0.786,0.786,0.786,3.932,3.932,3.932,3.932,3.932,3.932,3.932,7.077,3.145,3.931,3.931,3.931,3.931,3.931,4.717,1.572,1.572,0.786,0.786,0.786,0.786,0.786,11.008,11.008,14.153,14.153,14.153,15.726,22.016,22.016,11.008,11.008,7.863,7.863,14.94,15.726,9.436,15.726,17.299,17.299,17.299,18.872,11.795,9.436,14.154,15.727,14.154,14.154,17.299,15.726,15.726,15.726,12.581,4.718,8.65,12.582,9.437,10.223,11.009,11.009,9.436,9.436,5.504,1.572,1.572,12.581,13.368,13.368,19.658,29.88,29.88,32.239,32.239,20.444,18.871,18.871,12.581,2.359,4.718,3.145,5.504,5.504,5.504,7.863,8.649,11.008,8.649,7.863,5.504,5.504,7.863,8.649,7.863,5.504,5.504,5.504,5.504,11.794,10.221,7.076,7.076],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4.381,5.055,8.762,9.211,9.885,8.874,10.334,11.345,12.693,9.885,10.334,10.559,13.48,13.03,14.041,12.581,16.288,14.828,13.817,10.896,8.986,6.29,5.729,1.123,0.674,0.674,0.449,0.449,0.449,0.562,0.786,0.786,0.674,0.449,0.674,0.674,0.337,0.112,0.112,0.112,0,-0.225,-0.225,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.225,0.225,0.225,0.225,0.225,0.337,0.337,0.112,0.112,0.112,0.112,0.112,0.225,0.225,0.225,0.225,0.225,0.225,0.225,0,0,0,0,0,0,0,0,0,0,0.337,0.337,0.449,0.449,0.449,0.449,0.449,0.112,0.112,0,0,0,0,0,0.112,0.112,0.112,0.112,0.112,0.112,0.112,0,0,0.112,0.112,0.112,0.112,0.112,0.112,0.112,0,0,0.112,0.112,0.112,0.112,0.112,0.112,0.112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.112,0.225,0.225,0.225,0.225,0.225,0.225,0.112,0,0,0.112,0.225,0.225,1.011,1.011,1.011,1.011,1.011,0.899,0.899,0.112,0.112,0.112,0.112,0,0.562,0.562,0.562,0.562,0.562,0.562,0.562,0.449,0.449,0.562,0.562,0.562,0.562,0.562,0.225,0.225,0.112,0.112,0.112,0.112,0.112,0,1.573,1.573,2.022,2.022,2.022,2.247,3.145,1.573,1.573,1.123,1.123,1.123,1.91,1.348,1.348,2.247,2.471,2.471,2.471,1.685,1.348,1.348,1.123,2.022,2.022,2.022,2.247,2.247,2.247,1.573,0.674,0.674,1.236,1.348,1.348,1.46,1.573,1.348,1.348,0.786,0.225,0.225,0.112,1.685,1.91,1.91,2.808,4.269,4.269,4.606,2.921,2.696,2.696,1.797,0.337,0.337,0.337,0.449,0.786,0.786,0.786,1.123,1.236,1.236,1.123,0.786,0.786,0.786,0.786,1.123,0.786,0.786,0.786,0.786,0.786,1.348,1.011,1.011,1.011]},{"iso":"MEX","continent":"North America","population":128932753,"name":"Mexico","population_density":66.444,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,4,5,5,5,5,5,6,6,7,7,7,8,12,26,41,53,82,93,118,164,203,251,316,367,405,475,585,717,848,993,1094,1215,1378,1510,1688,1890,2143,2439,2785,3181,3441,3844,4219,4661,5014,5399,5847,6297,6875,7497,8261,8772,9501,10544,11633,12872,13842,14677,15529,16752,17799,19224,20739,22088,23471,24905,26025,27634,29616,31522,33460,35022,36327,38324,40186,42595,45032,47144,49219,51633,54346,56594,59567,62527,65856,68620,71105,74560,78023,81400,84627,87512,90664,93435,97326,101238,105680,110026,113619,117103,120102,124301,129184,133974,139196,142690,146837,150264,154863,159793,165455,170485,175202,180545,185122,191410,196847,202951,208392,212802,216852,220657,226089,231770,238511,245251,252165,256848,261750,268008,275003,282283,289174,295268,299750,304435,311486,317635,324041,331298,338913,344224,349396,356255,362274,370712,378285,385036,390516,395489,402697,408449,416179,424637,434193,439046,443813,449961,456100,462690,469407,475902,480278,485836,492522,498380,505751,511369,517714,522162,525733,531239,537031,543806,549734,556216,560164,563705,568621,573888,579914,585738,591712,595841,599560,606036,610957,616894,623090,629409,634023,637509,642860,647321,652364,658299,663973,668381,671716,676487,680931,684113,688954,694121,697663,700580,705263,710049,715457,720858,726431,730317,733717,738163,743216,748315,753090,757953,761665,789780,794608,799188,804488,810020,814328,817503,821045,825340,829396,834910,841661,847108,851227,854926,860714,867559,874171,880775,886800,891160,895326,901268,906863,912811,918811,924962,929392,933155,938405,943630,949197,955128,961938,967825,972785,978531,986177,991835,997393,1003253,1006522,1009396,1011153,1015071,1019543,1025969,1032688,1041875,1049358,1060152,1070487,1078594,1078594,1101403,1107071,1113543,1122362,1133613,1144643,1156770,1168395,1175850,1182249,1193255,1205229,1217126,1229379,1241436,1250044,1255974,1267202,1277499,1289298],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.008,0.031,0.039,0.039,0.039,0.039,0.039,0.047,0.047,0.054,0.054,0.054,0.062,0.093,0.202,0.318,0.411,0.636,0.721,0.915,1.272,1.574,1.947,2.451,2.846,3.141,3.684,4.537,5.561,6.577,7.702,8.485,9.424,10.688,11.712,13.092,14.659,16.621,18.917,21.6,24.672,26.688,29.814,32.722,36.151,38.888,41.875,45.349,48.839,53.322,58.147,64.072,68.035,73.69,81.779,90.225,99.835,107.358,113.835,120.443,129.928,138.049,149.101,160.851,171.314,182.041,193.163,201.849,214.329,229.701,244.484,259.515,271.63,281.752,297.24,311.682,330.366,349.267,365.648,381.742,400.465,421.507,438.942,462.001,484.958,510.778,532.215,551.489,578.286,605.145,631.337,656.365,678.741,703.188,724.68,754.859,785.2,819.652,853.36,881.227,908.249,931.509,964.076,1001.949,1039.1,1079.602,1106.701,1138.865,1165.445,1201.115,1239.351,1283.266,1322.278,1358.863,1400.304,1435.803,1484.572,1526.742,1574.084,1616.284,1650.488,1681.9,1711.412,1753.542,1797.604,1849.887,1902.162,1955.787,1992.108,2030.128,2078.665,2132.918,2189.382,2242.828,2290.093,2324.855,2361.192,2415.88,2463.571,2513.256,2569.541,2628.603,2669.795,2709.909,2763.107,2809.79,2875.235,2933.971,2986.332,3028.835,3067.405,3123.31,3167.923,3227.876,3293.477,3367.593,3405.232,3442.205,3489.889,3537.503,3588.615,3640.712,3691.087,3725.027,3768.135,3819.991,3865.426,3922.595,3966.168,4015.38,4049.879,4077.575,4120.28,4165.202,4217.749,4263.727,4314.001,4344.621,4372.085,4410.214,4451.065,4497.802,4542.973,4589.307,4621.332,4650.176,4700.404,4738.571,4784.618,4832.674,4881.684,4917.47,4944.508,4986.01,5020.609,5059.723,5105.755,5149.762,5183.95,5209.817,5246.82,5281.288,5305.968,5343.514,5383.589,5411.061,5433.685,5470.007,5507.127,5549.071,5590.961,5634.185,5664.325,5690.695,5725.178,5764.369,5803.917,5840.952,5878.669,5907.459,6125.519,6162.965,6198.487,6239.594,6282.5,6315.913,6340.538,6368.01,6401.321,6432.78,6475.546,6527.907,6570.154,6602.101,6630.79,6675.682,6728.771,6780.054,6831.274,6878.004,6911.82,6944.132,6990.218,7033.612,7079.745,7126.281,7173.988,7208.347,7237.533,7278.251,7318.776,7361.954,7407.955,7460.773,7506.432,7544.902,7589.468,7648.77,7692.654,7735.761,7781.211,7806.566,7828.856,7842.484,7872.872,7907.556,7957.396,8009.509,8080.763,8138.801,8222.519,8302.677,8365.555,8365.555,8542.461,8586.422,8636.619,8705.018,8792.281,8877.83,8971.886,9062.05,9119.87,9169.501,9254.863,9347.733,9440.006,9535.04,9628.554,9695.318,9741.311,9828.395,9908.258,9999.771],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.023,0.008,0,0,0,0,0.008,0,0.008,0,0,0.008,0.031,0.109,0.116,0.093,0.225,0.085,0.194,0.357,0.302,0.372,0.504,0.396,0.295,0.543,0.853,1.024,1.016,1.125,0.783,0.938,1.264,1.024,1.381,1.567,1.962,2.296,2.684,3.071,2.017,3.126,2.908,3.428,2.738,2.986,3.475,3.49,4.483,4.824,5.926,3.963,5.654,8.089,8.446,9.61,7.523,6.476,6.608,9.486,8.121,11.052,11.75,10.463,10.727,11.122,8.687,12.479,15.372,14.783,15.031,12.115,10.122,15.489,14.442,18.684,18.901,16.381,16.094,18.723,21.042,17.435,23.059,22.958,25.82,21.438,19.274,26.797,26.859,26.192,25.029,22.376,24.447,21.492,30.179,30.341,34.452,33.707,27.867,27.022,23.26,32.567,37.872,37.151,40.502,27.099,32.164,26.58,35.67,38.237,43.914,39.013,36.585,41.44,35.499,48.77,42.169,47.343,42.2,34.204,31.412,29.512,42.13,44.062,52.283,52.275,53.625,36.321,38.02,48.537,54.253,56.464,53.446,47.265,34.762,36.337,54.687,47.692,49.685,56.285,59.062,41.192,40.114,53.198,46.683,65.445,58.736,52.361,42.503,38.57,55.905,44.612,59.954,65.6,74.116,37.64,36.973,47.684,47.614,51.112,52.097,50.375,33.94,43.108,51.856,45.435,57.169,43.573,49.212,34.499,27.697,42.704,44.923,52.547,45.977,50.274,30.621,27.464,38.128,40.851,46.738,45.171,46.334,32.024,28.844,50.228,38.167,46.047,48.056,49.01,35.786,27.037,41.502,34.599,39.113,46.032,44.007,34.188,25.866,37.004,34.468,24.68,37.547,40.075,27.472,22.624,36.321,37.12,41.944,41.89,43.224,30.14,26.37,34.483,39.191,39.548,37.035,37.717,28.79,218.059,37.446,35.522,41.107,42.906,33.413,24.625,27.472,33.312,31.458,42.766,52.361,42.247,31.947,28.689,44.892,53.09,51.283,51.22,46.73,33.816,32.311,46.086,43.395,46.133,46.536,47.707,34.359,29.186,40.719,40.525,43.178,46.001,52.818,45.659,38.47,44.566,59.302,43.883,43.108,45.45,25.354,22.291,13.627,30.388,34.685,49.84,52.112,71.254,58.038,83.718,80.158,62.878,0,176.906,43.961,50.197,68.4,87.263,85.548,94.057,90.163,57.821,49.631,85.362,92.87,92.273,95.034,93.514,66.763,45.993,87.084,79.863,91.513],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.023,0.031,0.031,0.031,0.031,0.031,0.039,0.039,0.024,0.016,0.016,0.024,0.055,0.164,0.272,0.365,0.582,0.667,0.861,1.21,1.481,1.744,2.132,2.435,2.505,2.963,3.622,4.289,5.003,5.756,6.035,6.577,7.546,8.027,8.555,9.098,10.044,11.215,13.116,15.249,16.002,18.104,19.631,21.492,22.268,22.958,23.749,24.168,26.634,28.332,31.35,31.885,34.801,39.904,44.875,50.995,54.035,55.687,56.369,61.892,64.359,67.322,70.626,71.479,74.683,79.329,81.408,84.401,91.652,95.383,98.664,100.316,99.711,104.078,109.833,116.038,119.567,121.165,122.228,128.836,139.756,141.702,150.319,154.593,161.512,166.569,169.749,177.823,183.64,192.397,194.367,193.785,192.412,192.466,203.371,206.915,214.508,222.023,224.861,229.507,228.32,239.395,247.088,253.898,259.948,253.34,257.637,257.195,269.605,275.275,281.317,283.179,279.262,293.603,296.938,319.128,325.627,334.733,333.019,328.21,323.037,311.109,317.74,313.032,323.146,328.078,339.503,341.62,348.228,367.253,379.376,391.778,392.941,387.931,369.068,369.084,385.751,384.906,380.338,380.159,385.775,379.702,385.054,401.915,393.911,411.664,420.715,416.791,400.232,397.61,413.401,404.815,418.086,418.241,433.621,418.9,413.37,422.484,414.193,420.693,412.836,397.611,357.435,362.903,377.786,375.537,385.092,377.553,374.668,358.792,352.549,352.145,345.212,352.324,341.132,347.833,329.242,322.207,332.638,330.785,332.6,325.224,325.581,307.331,305.554,328.318,328.357,333.553,334.871,338.71,328.162,323.175,335.833,320.204,321.15,321.135,317.086,302.264,292.344,302.311,295.277,285.358,283.792,277.835,261.3,249.736,260.191,260.307,267.783,284.993,290.67,280.735,279.633,291.492,294.362,296.79,291.881,287.708,273.274,461.193,472.269,473.308,475.224,478.582,474.96,461.868,460.55,275.803,269.815,277.059,288.313,287.654,286.188,290.252,307.672,327.45,347.275,355.729,350.098,341.667,342.031,359.428,357.931,350.974,346.227,342.714,330.343,325.713,334.121,328.56,328.343,328.211,334.493,332.445,336.556,351.936,370.519,373.877,373.807,373.256,345.792,322.424,297.581,283.403,258.786,264.743,273.747,299.551,332.235,393.662,460.193,492.683,457.998,585.064,576.913,555.856,566.218,569.763,575.153,606.332,696.495,577.41,583.08,618.245,642.715,647.725,657.211,656.668,633.268,621.44,658.893,653.394,652.037],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.004,0.006,0.002,0.002,0.002,0.002,0.003,0.008,0.022,0.039,0.051,0.083,0.095,0.122,0.168,0.196,0.233,0.291,0.316,0.346,0.396,0.466,0.57,0.661,0.75,0.806,0.897,1.001,1.025,1.076,1.155,1.274,1.49,1.74,1.998,2.14,2.389,2.581,2.79,2.853,2.896,2.954,3.164,3.358,3.632,3.989,4.164,4.545,5.204,5.912,6.645,7.03,7.109,7.487,8.034,8.039,8.411,8.717,9.137,9.744,10.389,10.274,10.897,11.514,11.948,12.6,12.798,12.656,13.627,13.908,14.381,14.969,15.162,15.73,16.959,17.752,18.18,18.805,19.384,20.733,21.496,21.575,22.397,23.743,24.191,24.487,23.995,24.425,24.742,25.225,25.722,26.902,28.142,28.926,29.294,29.547,29.888,30.964,31.35,32.32,32.211,32.945,33.419,33.863,33.915,34.881,34.668,36.023,37.348,38.623,40.494,41.056,41.545,42.001,41.661,40.228,39.373,38.424,38.695,39.4,40.84,43.614,44.315,45.531,46.446,47.902,48.499,48.667,47.758,47.535,47.295,48.174,47.236,46.268,46.673,48.359,49.277,49.817,49.604,49.46,51.711,52.061,51.104,51.291,51.071,51.458,51.162,50.377,51.358,54.466,53.771,53.543,52.368,52.797,51.534,49.605,46.213,45.685,46.561,47.157,46.846,47.711,46.494,46.328,46.407,44.206,42.898,42.825,42.165,42.508,42.66,42.106,42.073,41.419,40.837,40.008,39.892,39.329,39.53,39.727,41.456,41.072,40.974,41.386,41.768,42.306,42.047,40.801,40.291,39.301,39.011,38.297,38.069,37.901,37.259,37.24,35.178,33.966,33.404,32.444,31.981,31.884,32.263,34.729,35.35,35.799,36.181,36.716,36.453,36.749,36.407,35.713,34.926,34.733,62.118,62.541,62.017,62.24,63.078,62.463,61.868,34.642,34.051,33.47,33.707,35.058,36.32,37.366,37.54,39.194,42.285,43.501,43.338,43.979,44.246,44.763,44.934,43.549,42.813,42.144,42.283,42.361,41.914,41.148,40.738,40.316,40.239,40.969,42.584,43.91,44.459,47.142,47.243,46.83,45.777,42.876,40.565,36.145,32.014,30.7,31.662,32.614,39.171,44.278,54.291,61.401,65.428,58.308,76.136,72.237,71.117,68.929,69.943,73.182,86.619,74.227,76.207,76.126,78.549,79.35,80.311,80.451,80.929,82.207,81.687,81.933,80.075,79.966]},{"iso":"MDA","continent":"Europe","population":4033963,"name":"Moldova","population_density":123.655,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,3,3,3,6,12,23,23,30,30,49,66,80,94,109,125,149,177,199,231,263,298,353,423,505,591,752,864,965,1056,1174,1289,1438,1560,1662,1712,1934,2049,2154,2264,2378,2472,2548,2614,2778,2926,3110,3304,3408,3481,3638,3771,3897,3980,4052,4121,4248,4363,4476,4605,4728,4867,4927,4995,5154,5406,5553,5745,5934,6060,6138,6340,6553,6704,6847,6994,7093,7147,7305,7537,7725,7896,8098,8251,8360,8548,8795,9018,9247,9511,9700,9807,10025,10321,10727,11093,11459,11740,11879,12254,12732,13106,13556,13953,14200,14363,14714,15078,15453,15776,16080,16250,16357,16613,16898,17150,17445,17672,17814,17906,18141,18471,18666,18924,19208,19382,19439,19708,20040,20264,20494,20794,20980,21115,21442,21798,22105,22483,22828,23034,23154,23521,23947,24343,24733,25113,25362,25482,25814,26222,26628,26990,27443,27660,27841,28223,28697,29087,29483,29905,30183,30377,30789,31415,31937,32484,33072,33478,33828,34358,34982,35546,35904,36404,36700,36920,37208,37740,38372,38906,39473,39797,40055,40556,41144,41704,42183,42714,42978,43207,43734,44361,44983,45648,46336,46596,46796,47446,48232,48953,49666,50534,50875,51194,52029,53042,54064,55016,55888,56579,56901,57732,58794,59915,60833,61762,62151,62618,63275,64424,65076,65860,66652,67050,67302,67958,68791,69568,70256,71089,71503,71811,72460,73321,74233,75201,76040,76582,76777,77487,78507,79566,80501,81675,82346,82677,83592,84707,86038,87361,88772,89279,89843,90912,92519,93961,95383,96689,97941,98418,99633,101203,102894,104140,105852,107017,107364,108863,110580,112307,113829,115557,116365,117495,119204,120970,122685,124264,125723,126518,127253,128656,130329,131919],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.248,0.248,0.744,0.744,0.744,1.487,2.975,5.702,5.702,7.437,7.437,12.147,16.361,19.832,23.302,27.021,30.987,36.936,43.877,49.331,57.264,65.196,73.873,87.507,104.86,125.187,146.506,186.417,214.181,239.219,261.777,291.029,319.537,356.473,386.716,412.002,424.397,479.429,507.937,533.966,561.235,589.495,612.797,631.637,647.998,688.653,725.341,770.954,819.046,844.827,862.923,901.843,934.813,966.048,986.623,1004.471,1021.576,1053.059,1081.567,1109.579,1141.557,1172.048,1206.506,1221.38,1238.236,1277.652,1340.121,1376.562,1424.158,1471.01,1502.245,1521.581,1571.655,1624.457,1661.889,1697.338,1733.779,1758.321,1771.707,1810.874,1868.386,1914.99,1957.38,2007.455,2045.383,2072.404,2119.008,2180.238,2235.519,2292.287,2357.731,2404.583,2431.108,2485.149,2558.526,2659.172,2749.901,2840.631,2910.289,2944.747,3037.708,3156.201,3248.914,3360.467,3458.882,3520.112,3560.519,3647.53,3737.764,3830.724,3910.794,3986.155,4028.297,4054.822,4118.283,4188.933,4251.402,4324.531,4380.804,4416.005,4438.811,4497.067,4578.872,4627.212,4691.168,4761.571,4804.704,4818.834,4885.518,4967.819,5023.348,5080.364,5154.732,5200.841,5234.307,5315.369,5403.619,5479.723,5573.427,5658.951,5710.018,5739.765,5830.743,5936.346,6034.512,6131.192,6225.392,6287.118,6316.865,6399.166,6500.308,6600.953,6690.691,6802.988,6856.781,6901.65,6996.346,7113.848,7210.527,7308.694,7413.305,7482.22,7530.312,7632.445,7787.627,7917.028,8052.627,8198.39,8299.035,8385.798,8517.183,8671.869,8811.682,8900.429,9024.376,9097.753,9152.29,9223.684,9355.564,9512.234,9644.61,9785.167,9865.485,9929.442,10053.637,10199.399,10338.221,10456.963,10588.595,10654.039,10710.807,10841.448,10996.878,11151.069,11315.919,11486.471,11550.924,11600.503,11761.635,11956.481,12135.213,12311.962,12527.135,12611.667,12690.746,12897.739,13148.856,13402.205,13638.201,13854.366,14025.662,14105.484,14311.485,14574.749,14852.64,15080.208,15310.502,15406.934,15522.701,15685.568,15970.399,16132.027,16326.377,16522.71,16621.372,16683.842,16846.461,17052.958,17245.572,17416.124,17622.621,17725.249,17801.601,17962.485,18175.923,18402.003,18641.966,18849.95,18984.309,19032.649,19208.654,19461.507,19724.028,19955.81,20246.839,20413.177,20495.23,20722.054,20998.457,21328.406,21656.371,22006.151,22131.834,22271.647,22536.647,22935.015,23292.479,23644.986,23968.737,24279.102,24397.348,24698.541,25087.736,25506.927,25815.804,26240.201,26528.999,26615.019,26986.613,27412.249,27840.364,28217.661,28646.024,28846.323,29126.445,29550.098,29987.88,30413.021,30804.447,31166.126,31363.203,31545.406,31893.203,32307.931,32702.085],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.496,0,0,0.744,1.487,2.727,0,1.735,0,4.71,4.214,3.471,3.471,3.718,3.966,5.949,6.941,5.454,7.933,7.933,8.676,13.634,17.353,20.327,21.319,39.911,27.764,25.037,22.558,29.252,28.508,36.936,30.243,25.285,12.395,55.033,28.508,26.029,27.268,28.26,23.302,18.84,16.361,40.655,36.688,45.613,48.092,25.781,18.096,38.92,32.97,31.235,20.575,17.848,17.105,31.483,28.508,28.012,31.978,30.491,34.457,14.874,16.857,39.415,62.47,36.441,47.596,46.852,31.235,19.336,50.075,52.802,37.432,35.449,36.441,24.542,13.386,39.167,57.512,46.604,42.39,50.075,37.928,27.021,46.604,61.23,55.281,56.768,65.444,46.852,26.525,54.041,73.377,100.645,90.73,90.73,69.659,34.457,92.961,118.494,92.713,111.553,98.414,61.23,40.407,87.011,90.234,92.961,80.07,75.36,42.142,26.525,63.461,70.65,62.47,73.129,56.272,35.201,22.806,58.255,81.805,48.34,63.957,70.402,43.134,14.13,66.684,82.301,55.529,57.016,74.369,46.109,33.466,81.062,88.251,76.104,93.704,85.524,51.066,29.747,90.978,105.603,98.166,96.679,94.2,61.726,29.747,82.301,101.141,100.645,89.738,112.297,53.793,44.869,94.696,117.502,96.679,98.166,104.612,68.915,48.092,102.133,155.182,129.401,135.599,145.762,100.645,86.763,131.384,154.687,139.813,88.746,123.948,73.377,54.537,71.394,131.88,156.67,132.376,140.557,80.318,63.957,124.195,145.762,138.821,118.742,131.632,65.444,56.768,130.641,155.43,154.191,164.85,170.552,64.453,49.579,161.132,194.846,178.732,176.749,215.173,84.532,79.079,206.992,251.118,253.349,235.996,216.165,171.296,79.822,206.001,263.265,277.891,227.568,230.295,96.431,115.767,162.867,284.832,161.628,194.35,196.333,98.662,62.47,162.619,206.497,192.615,170.552,206.497,102.629,76.352,160.884,213.438,226.08,239.963,207.984,134.359,48.34,176.006,252.853,262.521,231.782,291.029,166.338,82.053,226.824,276.403,329.948,327.965,349.78,125.683,139.813,265,398.368,357.465,352.507,323.751,310.365,118.246,301.193,389.195,419.191,308.877,424.397,288.798,86.02,371.595,425.636,428.115,377.296,428.363,200.299,280.122,423.653,437.783,425.14,391.426,361.679,197.077,182.203,347.797,414.729,394.153],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.496,0.496,0.496,1.24,2.727,5.454,5.454,7.189,6.693,11.403,15.617,18.344,20.328,21.319,25.285,29.499,36.44,37.184,40.903,45.365,50.57,60.486,73.873,88.251,102.629,137.086,156.917,174.021,187.903,203.521,214.676,231.285,240.209,225.583,210.214,240.21,246.16,242.937,241.697,233.021,226.08,219.635,223.601,209.223,217.403,236.987,257.811,255.332,250.126,270.206,286.815,277.395,261.282,233.517,202.53,208.232,218.644,207.736,206.744,206,219.882,216.908,216.66,224.592,258.554,266.983,282.601,298.962,295.74,300.202,333.42,346.807,321.769,320.777,309.622,287.312,269.463,289.294,296.731,290.533,295.491,310.117,311.604,314.083,347.301,369.364,367.133,377.297,400.351,397.128,385.725,412.745,439.518,478.933,514.382,548.344,552.559,540.164,606.6,671.053,690.389,701.297,708.981,679.481,650.229,702.783,700.056,674.523,661.88,625.687,569.415,534.71,557.764,541.403,513.639,493.807,470.009,429.85,410.514,442.244,460.588,438.278,439.765,437.038,423.9,402.829,446.707,470.753,444.477,453.153,463.565,439.272,429.604,496.536,518.103,511.906,550.081,578.589,555.286,538.924,596.436,620.977,630.892,651.467,651.963,628.165,606.846,659.4,669.563,664.605,656.177,671.795,631.388,614.531,679.48,714.681,710.219,707.74,722.614,679.232,673.531,730.795,791.281,803.18,842.1,889.696,885.729,903.577,986.869,1039.423,1024.054,983.399,971.748,899.363,853.255,837.886,838.382,840.365,832.928,884.739,841.109,831.689,901.347,975.715,982.656,944.728,943.984,868.871,845.321,912.005,943.24,951.669,977.698,1029.508,962.329,946.464,1050.828,1115.033,1138.335,1160.893,1211.216,1125.196,1139.822,1297.235,1387.221,1445.724,1502.988,1542.404,1498.527,1493.817,1620.739,1677.012,1703.785,1678.004,1672.303,1552.569,1497.04,1580.085,1658.916,1557.279,1473.738,1442.503,1310.87,1276.909,1323.761,1367.391,1275.174,1284.098,1296.245,1202.541,1180.231,1278.645,1329.464,1349.047,1396.395,1433.827,1361.689,1307.4,1407.054,1499.023,1548.106,1553.808,1604.874,1563.228,1510.922,1689.406,1789.803,1866.898,1932.342,2050.34,1884.994,1858.469,2041.416,2212.96,2294.022,2316.581,2312.367,2272.952,2265.515,2426.895,2551.09,2571.913,2523.325,2595.215,2560.262,2335.917,2589.266,2713.709,2752.629,2710.734,2830.22,2606.122,2597.446,2935.079,3001.267,3000.771,2964.082,2948.465,2717.179,2699.083,2766.758,2757.834,2714.204],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.39,0.779,0.779,0.956,0.956,1.629,2.125,2.408,2.514,3.046,3.364,4.214,4.533,4.71,5.347,5.985,6.693,8.074,9.703,11.616,13.882,18.45,21.284,23.621,24.896,26.596,27.764,29.995,28.614,28.26,26.454,31.093,30.987,30.633,29.252,28.968,28.685,29.606,24.081,25.817,27.339,29.96,32.793,33.147,33.041,36.264,35.166,34.387,30.81,26.489,25.25,27.162,25.675,24.967,25.073,26.489,28.862,28.543,26.454,28.012,32.935,33.572,36.016,37.786,40.124,40.478,42.001,40.619,40.761,39.026,37.538,36.582,35.732,34.174,34.847,36.157,37.149,39.097,41.009,42.957,44.019,44.55,45.79,47.844,50.039,51.314,51.243,52.306,54.041,60.522,65.374,68.986,72.244,73.377,78.937,85.382,84.249,87.224,88.322,87.117,87.967,87.117,83.08,83.116,78.618,75.325,72.598,70.615,67.25,64.453,60.097,59.105,56.378,55.387,54.856,54.112,55.706,53.687,52.377,54.395,55.529,54.289,55.493,55.564,56.591,55.599,56.166,56.591,59.353,61.407,62.257,65.196,70.438,72.031,72.74,72.208,73.625,76.104,79.256,79.681,80.92,82.443,82.443,81.203,80.566,80.92,79.928,82.514,81.38,83.541,85.311,87.649,87.082,88.286,87.188,89.349,89.809,90.871,96.254,100.929,106.276,112.155,116.688,122.212,126.391,126.32,127.808,121.115,117.998,114.103,109.499,100.929,97.671,100.079,106.312,108.684,109.676,111.022,118.565,120.548,117.998,116.05,114.775,112.651,111.624,112.544,113.926,116.121,122.708,128.268,128.126,127.099,131.455,137.086,140.592,142.292,148.666,151.535,155.749,162.301,170.339,180.999,189.463,189.604,201.999,202.105,201.964,203.699,207.205,206.001,208.019,197.325,202.46,196.298,199.379,182.77,178.024,173.172,173.491,165.877,165.842,154.651,159.078,155.678,157.13,157.697,159.68,159.432,160.424,165.204,175.12,175.333,179.866,175.864,178.024,183.655,188.861,187.692,199.556,204.124,208.94,216.2,219.564,229.197,242.937,251.33,245.522,253.774,259.228,276.651,280.582,284.088,280.369,306.753,303.672,308.842,307.532,316.35,310.117,324.495,321.414,316.81,326.868,332.073,333.348,343.122,343.689,331.046,358.775,366.212,367.947,367.522,369.541,360.015,359.554,345.566,334.729,331.436,327.009]},{"iso":"MCO","continent":"Europe","population":39244,"name":"Monaco","population_density":19347.5,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,7,7,7,7,11,11,23,23,23,31,33,42,42,46,49,52,55,60,64,66,73,77,79,81,84,90,92,93,93,93,93,93,94,94,94,94,94,94,94,94,94,94,95,95,95,95,95,95,95,95,95,95,95,95,96,96,96,96,96,96,96,96,96,97,97,97,97,97,98,98,98,98,98,98,98,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,100,101,101,102,102,102,103,103,103,103,103,106,106,106,108,108,108,108,108,108,109,109,109,109,109,109,109,109,109,109,111,112,114,116,116,116,116,117,120,120,120,120,120,121,123,125,125,128,131,133,133,138,141,144,146,146,146,148,148,148,150,154,154,154,154,154,154,154,154,154,154,154,154,142,143,147,147,147,153,156,161,165,168,169,171,177,178,181,186,191,192,193,195,197,199,205,208,210,210,212,214,218,219,221,222,222,223,224,227,229,233,233,234,236,241,248,253,255,260,265,268,271,273,281,295,296,306,310,320,337,347,355,359,366,375,397,412,430,454,483,486,490,512,524,532,540,545,548,552,557,565,573,577,581,582,583,587,594,600,603,607,608,609,617,621,630,630,637,638,641,648,655,657,659,668,668,671,678,685,700],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25.482,25.482,25.482,25.482,25.482,25.482,25.482,25.482,25.482,25.482,25.482,25.482,50.963,50.963,50.963,50.963,178.371,178.371,178.371,178.371,280.298,280.298,586.077,586.077,586.077,789.93,840.893,1070.227,1070.227,1172.154,1248.599,1325.043,1401.488,1528.896,1630.823,1681.786,1860.157,1962.083,2013.047,2064.01,2140.455,2293.344,2344.307,2369.789,2369.789,2369.789,2369.789,2369.789,2395.271,2395.271,2395.271,2395.271,2395.271,2395.271,2395.271,2395.271,2395.271,2395.271,2420.752,2420.752,2420.752,2420.752,2420.752,2420.752,2420.752,2420.752,2420.752,2420.752,2420.752,2420.752,2446.234,2446.234,2446.234,2446.234,2446.234,2446.234,2446.234,2446.234,2446.234,2471.715,2471.715,2471.715,2471.715,2471.715,2497.197,2497.197,2497.197,2497.197,2497.197,2497.197,2497.197,2522.679,2522.679,2522.679,2522.679,2522.679,2522.679,2522.679,2522.679,2522.679,2522.679,2522.679,2522.679,2522.679,2522.679,2522.679,2522.679,2522.679,2522.679,2522.679,2522.679,2522.679,2522.679,2548.16,2573.642,2573.642,2599.123,2599.123,2599.123,2624.605,2624.605,2624.605,2624.605,2624.605,2701.05,2701.05,2701.05,2752.013,2752.013,2752.013,2752.013,2752.013,2752.013,2777.495,2777.495,2777.495,2777.495,2777.495,2777.495,2777.495,2777.495,2777.495,2777.495,2828.458,2853.939,2904.903,2955.866,2955.866,2955.866,2955.866,2981.347,3057.792,3057.792,3057.792,3057.792,3057.792,3083.274,3134.237,3185.2,3185.2,3261.645,3338.09,3389.053,3389.053,3516.461,3592.906,3669.351,3720.314,3720.314,3720.314,3771.277,3771.277,3771.277,3822.24,3924.167,3924.167,3924.167,3924.167,3924.167,3924.167,3924.167,3924.167,3924.167,3924.167,3924.167,3924.167,3618.388,3643.869,3745.796,3745.796,3745.796,3898.685,3975.13,4102.538,4204.464,4280.909,4306.391,4357.354,4510.244,4535.725,4612.17,4739.578,4866.986,4892.468,4917.949,4968.912,5019.876,5070.839,5223.728,5300.173,5351.136,5351.136,5402.1,5453.063,5554.989,5580.471,5631.434,5656.916,5656.916,5682.397,5707.879,5784.324,5835.287,5937.213,5937.213,5962.695,6013.658,6141.066,6319.437,6446.845,6497.809,6625.217,6752.625,6829.069,6905.514,6956.477,7160.33,7517.073,7542.554,7797.37,7899.297,8154.113,8587.3,8842.116,9045.969,9147.895,9326.266,9555.601,10116.196,10498.42,10957.089,11568.647,12307.614,12384.059,12485.985,13046.58,13352.36,13556.212,13760.065,13887.473,13963.918,14065.844,14193.252,14397.105,14600.958,14702.885,14804.811,14830.293,14855.774,14957.701,15136.072,15288.961,15365.406,15467.333,15492.814,15518.296,15722.149,15824.075,16053.409,16053.409,16231.781,16257.262,16333.707,16512.078,16690.449,16741.413,16792.376,17021.71,17021.71,17098.155,17276.526,17454.898,17837.122],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25.482,0,0,0,127.408,0,0,0,101.926,0,305.779,0,0,203.853,50.963,229.334,0,101.926,76.445,76.445,76.445,127.408,101.926,50.963,178.371,101.926,50.963,50.963,76.445,152.89,50.963,25.482,0,0,0,0,25.482,0,0,0,0,0,0,0,0,0,25.482,0,0,0,0,0,0,0,0,0,0,0,25.482,0,0,0,0,0,0,0,0,25.482,0,0,0,0,25.482,0,0,0,0,0,0,25.482,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25.482,25.482,0,25.482,0,0,25.482,0,0,0,0,76.445,0,0,50.963,0,0,0,0,0,25.482,0,0,0,0,0,0,0,0,0,50.963,25.482,50.963,50.963,0,0,0,25.482,76.445,0,0,0,0,25.482,50.963,50.963,0,76.445,76.445,50.963,0,127.408,76.445,76.445,50.963,0,0,50.963,0,0,50.963,101.926,0,0,0,0,0,0,0,0,0,0,0,-305.779,25.482,101.926,0,0,152.89,76.445,127.408,101.926,76.445,25.482,50.963,152.89,25.482,76.445,127.408,127.408,25.482,25.482,50.963,50.963,50.963,152.89,76.445,50.963,0,50.963,50.963,101.926,25.482,50.963,25.482,0,25.482,25.482,76.445,50.963,101.926,0,25.482,50.963,127.408,178.371,127.408,50.963,127.408,127.408,76.445,76.445,50.963,203.853,356.742,25.482,254.816,101.926,254.816,433.187,254.816,203.853,101.926,178.371,229.334,560.595,382.224,458.669,611.558,738.966,76.445,101.926,560.595,305.779,203.853,203.853,127.408,76.445,101.926,127.408,203.853,203.853,101.926,101.926,25.482,25.482,101.926,178.371,152.89,76.445,101.926,25.482,25.482,203.853,101.926,229.334,0,178.371,25.482,76.445,178.371,178.371,50.963,50.963,229.334,0,76.445,178.371,178.371,382.224],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25.482,25.482,25.482,25.482,152.89,152.89,152.89,152.89,229.334,229.334,535.113,535.113,407.705,611.558,662.521,891.855,789.929,891.855,662.521,738.966,815.411,738.966,789.929,611.558,789.929,789.929,764.447,738.965,738.965,764.447,713.484,688.003,509.632,407.706,356.743,305.78,254.817,101.927,50.964,25.482,25.482,25.482,25.482,25.482,0,0,25.482,25.482,25.482,25.482,25.482,25.482,25.482,25.482,0,0,0,0,25.482,25.482,25.482,25.482,25.482,25.482,25.482,25.482,0,25.482,25.482,25.482,25.482,25.482,50.964,50.964,50.964,25.482,25.482,25.482,25.482,50.964,25.482,25.482,25.482,25.482,25.482,25.482,25.482,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25.482,50.964,50.964,76.446,76.446,76.446,101.928,101.928,76.446,50.964,50.964,101.927,101.927,101.927,127.408,127.408,127.408,127.408,127.408,50.963,76.445,76.445,25.482,25.482,25.482,25.482,25.482,25.482,0,0,50.963,76.445,127.408,178.371,178.371,178.371,178.371,203.853,229.335,203.853,152.89,101.927,101.927,127.409,178.372,203.853,127.408,203.853,280.298,331.261,331.261,433.187,458.669,484.151,535.114,458.669,382.224,382.224,382.224,254.816,229.334,254.815,203.852,203.852,203.852,152.889,152.889,152.889,101.926,0,0,0,0,-305.779,-280.297,-178.371,-178.371,-178.371,-25.481,50.964,178.372,586.077,637.04,560.596,611.559,764.449,637.041,637.041,637.041,662.523,611.56,611.56,611.56,509.633,535.114,611.559,560.596,484.151,458.669,484.15,484.15,535.113,509.632,407.705,356.742,305.779,331.261,305.78,331.262,280.299,356.743,305.78,305.78,356.743,458.669,611.558,662.521,662.521,688.003,815.411,866.374,891.856,815.411,840.893,1070.227,1044.746,1172.154,1146.672,1325.043,1681.785,1885.638,1885.638,1630.822,1783.711,1758.229,2216.898,2344.306,2369.788,2726.53,3261.643,3236.162,3159.717,3490.978,3236.162,3057.791,2802.975,2318.825,1656.304,1681.785,1707.267,1350.525,1248.599,1146.672,1044.745,942.819,891.856,891.856,942.819,891.856,764.448,764.448,688.004,688.004,866.375,866.375,917.338,764.448,866.374,789.93,840.893,993.782,968.3,917.337,738.966,968.3,789.929,840.892,942.818,942.818,1146.671],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.64,3.64,3.64,3.64,21.841,21.841,21.841,18.201,32.762,32.762,76.445,58.244,58.244,87.365,94.646,112.847,112.847,83.725,94.646,105.567,87.365,98.286,80.085,87.365,98.286,101.926,98.286,94.646,87.365,94.646,94.646,72.805,58.244,50.963,43.683,32.762,14.561,7.28,3.64,3.64,3.64,3.64,3.64,0,0,0,3.64,3.64,3.64,3.64,3.64,3.64,3.64,0,0,0,0,0,3.64,3.64,3.64,3.64,3.64,3.64,3.64,0,0,3.64,3.64,3.64,3.64,3.64,7.28,7.28,3.64,3.64,3.64,3.64,3.64,3.64,3.64,3.64,3.64,3.64,3.64,3.64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.64,7.28,7.28,10.921,10.921,10.921,14.561,10.921,7.28,7.28,3.64,14.561,14.561,10.921,18.201,18.201,18.201,18.201,7.28,7.28,10.921,3.64,3.64,3.64,3.64,3.64,3.64,0,0,0,7.28,10.921,18.201,25.482,25.482,25.482,25.482,21.841,29.122,21.841,14.561,14.561,14.561,18.201,21.841,18.201,18.201,29.122,40.043,47.323,43.683,54.603,58.244,69.164,65.524,54.603,47.323,54.603,36.402,25.482,21.841,29.122,29.122,29.122,21.841,21.841,21.841,14.561,0,0,0,0,0,-43.683,-40.043,-25.482,-25.482,-25.482,-3.64,7.28,69.164,80.085,76.445,80.085,87.365,87.365,80.085,72.805,76.445,83.725,83.725,80.085,65.524,69.164,65.524,69.164,61.884,65.524,61.884,61.884,61.884,69.164,50.963,47.323,43.683,43.683,40.043,36.402,32.762,36.402,43.683,40.043,43.683,47.323,61.884,76.445,87.365,80.085,98.286,112.847,116.487,109.207,91.006,101.926,145.609,131.048,149.249,152.89,178.371,232.975,240.255,218.414,229.334,218.414,236.615,280.298,273.017,302.139,360.383,451.388,436.827,418.626,418.626,407.706,371.303,313.06,225.694,225.694,225.694,163.81,149.249,149.249,134.688,131.048,123.768,112.847,109.207,105.567,98.286,94.646,94.646,94.646,94.646,109.207,98.286,109.207,98.286,109.207,109.207,116.487,112.847,123.768,98.286,105.567,112.847,109.207,109.207,109.207,109.207,156.53]},{"iso":"MNG","continent":"Asia","population":3278292,"name":"Mongolia","population_density":1.98,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,5,6,6,6,10,10,10,10,10,11,11,12,12,12,12,14,14,14,14,14,15,15,16,16,16,16,16,17,30,30,31,31,31,32,33,34,35,36,37,37,38,38,38,38,38,38,39,39,40,41,41,41,42,42,42,42,42,42,98,98,135,136,140,140,140,140,141,141,141,141,141,148,161,179,179,179,185,185,185,186,191,193,193,194,194,194,197,197,197,197,197,197,201,204,204,206,213,215,215,216,219,219,219,220,220,220,220,220,220,220,220,225,227,227,227,227,230,230,243,261,261,262,287,287,287,287,287,287,288,288,288,288,289,291,291,291,291,293,293,293,293,293,293,293,293,293,293,293,297,297,298,298,298,298,298,298,298,298,298,298,298,300,301,301,301,301,301,304,306,306,310,310,310,310,310,310,310,311,311,311,311,311,311,311,311,311,312,312,313,313,313,313,313,313,313,313,313,313,313,313,313,314,315,315,315,315,315,315,318,320,320,320,320,320,320,324,326,327,328,328,328,338,339,340,340,340,340,346,346,349,350,352,353,356,357,357,362,368,382,406,412,416,428,431,434,455,505,555,578,608,640,672,699,712,738,760,784,791,801,812,819,831,842,849,887,888,893,898,905,906,907,912,917,918,923,941],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.305,0.305,0.305,0.305,0.305,0.305,0.305,1.525,1.83,1.83,1.83,3.05,3.05,3.05,3.05,3.05,3.355,3.355,3.66,3.66,3.66,3.66,4.271,4.271,4.271,4.271,4.271,4.576,4.576,4.881,4.881,4.881,4.881,4.881,5.186,9.151,9.151,9.456,9.456,9.456,9.761,10.066,10.371,10.676,10.981,11.286,11.286,11.591,11.591,11.591,11.591,11.591,11.591,11.896,11.896,12.201,12.507,12.507,12.507,12.812,12.812,12.812,12.812,12.812,12.812,29.894,29.894,41.18,41.485,42.705,42.705,42.705,42.705,43.01,43.01,43.01,43.01,43.01,45.145,49.111,54.602,54.602,54.602,56.432,56.432,56.432,56.737,58.262,58.872,58.872,59.177,59.177,59.177,60.092,60.092,60.092,60.092,60.092,60.092,61.312,62.228,62.228,62.838,64.973,65.583,65.583,65.888,66.803,66.803,66.803,67.108,67.108,67.108,67.108,67.108,67.108,67.108,67.108,68.633,69.243,69.243,69.243,69.243,70.158,70.158,74.124,79.615,79.615,79.92,87.546,87.546,87.546,87.546,87.546,87.546,87.851,87.851,87.851,87.851,88.156,88.766,88.766,88.766,88.766,89.376,89.376,89.376,89.376,89.376,89.376,89.376,89.376,89.376,89.376,89.376,90.596,90.596,90.901,90.901,90.901,90.901,90.901,90.901,90.901,90.901,90.901,90.901,90.901,91.511,91.816,91.816,91.816,91.816,91.816,92.731,93.341,93.341,94.561,94.561,94.561,94.561,94.561,94.561,94.561,94.866,94.866,94.866,94.866,94.866,94.866,94.866,94.866,94.866,95.172,95.172,95.477,95.477,95.477,95.477,95.477,95.477,95.477,95.477,95.477,95.477,95.477,95.477,95.477,95.782,96.087,96.087,96.087,96.087,96.087,96.087,97.002,97.612,97.612,97.612,97.612,97.612,97.612,98.832,99.442,99.747,100.052,100.052,100.052,103.102,103.408,103.713,103.713,103.713,103.713,105.543,105.543,106.458,106.763,107.373,107.678,108.593,108.898,108.898,110.423,112.254,116.524,123.845,125.675,126.895,130.556,131.471,132.386,138.792,154.044,169.295,176.311,185.462,195.224,204.985,213.221,217.186,225.117,231.828,239.149,241.284,244.335,247.69,249.825,253.486,256.841,258.976,270.568,270.873,272.398,273.923,276.058,276.363,276.668,278.194,279.719,280.024,281.549,287.04],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.22,0.305,0,0,1.22,0,0,0,0,0.305,0,0.305,0,0,0,0.61,0,0,0,0,0.305,0,0.305,0,0,0,0,0.305,3.965,0,0.305,0,0,0.305,0.305,0.305,0.305,0.305,0.305,0,0.305,0,0,0,0,0,0.305,0,0.305,0.305,0,0,0.305,0,0,0,0,0,17.082,0,11.286,0.305,1.22,0,0,0,0.305,0,0,0,0,2.135,3.965,5.491,0,0,1.83,0,0,0.305,1.525,0.61,0,0.305,0,0,0.915,0,0,0,0,0,1.22,0.915,0,0.61,2.135,0.61,0,0.305,0.915,0,0,0.305,0,0,0,0,0,0,0,1.525,0.61,0,0,0,0.915,0,3.965,5.491,0,0.305,7.626,0,0,0,0,0,0.305,0,0,0,0.305,0.61,0,0,0,0.61,0,0,0,0,0,0,0,0,0,0,1.22,0,0.305,0,0,0,0,0,0,0,0,0,0,0.61,0.305,0,0,0,0,0.915,0.61,0,1.22,0,0,0,0,0,0,0.305,0,0,0,0,0,0,0,0,0.305,0,0.305,0,0,0,0,0,0,0,0,0,0,0,0,0.305,0.305,0,0,0,0,0,0.915,0.61,0,0,0,0,0,1.22,0.61,0.305,0.305,0,0,3.05,0.305,0.305,0,0,0,1.83,0,0.915,0.305,0.61,0.305,0.915,0.305,0,1.525,1.83,4.271,7.321,1.83,1.22,3.66,0.915,0.915,6.406,15.252,15.252,7.016,9.151,9.761,9.761,8.236,3.965,7.931,6.711,7.321,2.135,3.05,3.355,2.135,3.66,3.355,2.135,11.591,0.305,1.525,1.525,2.135,0.305,0.305,1.525,1.525,0.305,1.525,5.491],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.22,1.525,1.525,1.525,2.745,2.745,2.745,2.745,1.525,1.525,1.525,1.83,0.61,0.61,0.61,1.22,1.22,0.915,0.915,0.61,0.915,0.915,1.22,0.61,0.61,0.61,0.61,0.915,4.575,4.575,4.575,4.575,4.575,4.88,5.185,5.185,1.525,1.83,1.83,1.83,2.135,1.83,1.525,1.22,0.915,0.61,0.61,0.61,0.61,0.915,0.915,0.915,1.22,1.22,0.915,0.915,0.61,0.305,17.387,17.387,28.368,28.673,29.893,29.893,29.893,29.893,13.116,13.116,1.83,1.525,0.305,2.44,6.405,11.896,11.591,11.591,13.421,13.421,13.421,11.591,9.151,4.27,4.27,4.575,2.745,2.745,3.66,3.355,1.83,1.22,1.22,0.915,2.135,3.05,2.135,2.745,4.88,5.49,5.49,5.795,5.49,4.575,4.575,4.27,2.135,1.525,1.525,1.22,0.305,0.305,0.305,1.525,2.135,2.135,2.135,2.135,3.05,3.05,7.015,10.981,10.371,10.676,18.302,18.302,17.387,17.387,13.422,7.931,8.236,7.931,0.305,0.305,0.61,1.22,1.22,1.22,0.915,1.525,1.525,1.525,1.22,0.61,0.61,0.61,0.61,0,0,0,1.22,1.22,1.525,1.525,1.525,1.525,1.525,1.525,0.305,0.305,0,0,0,0.61,0.915,0.915,0.915,0.915,0.915,1.83,2.44,1.83,2.745,2.745,2.745,2.745,2.745,1.83,1.22,1.525,0.305,0.305,0.305,0.305,0.305,0.305,0.305,0,0.305,0.305,0.61,0.61,0.61,0.61,0.61,0.61,0.305,0.305,0,0,0,0,0,0.305,0.61,0.61,0.61,0.61,0.61,0.61,1.525,1.83,1.525,1.525,1.525,1.525,1.525,2.745,2.44,2.135,2.44,2.44,2.44,5.49,5.795,4.88,4.27,3.965,3.66,5.49,5.49,3.355,3.355,3.66,3.965,4.88,5.185,3.355,4.88,5.795,9.761,16.472,17.997,18.302,21.657,22.572,21.962,26.538,37.519,45.45,50.636,58.567,64.668,73.514,80.835,78.394,71.073,62.532,62.837,55.821,49.11,42.704,36.603,36.298,31.722,27.146,31.416,29.586,28.061,26.231,26.231,22.876,19.826,19.216,9.15,9.15,9.15,13.116],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.174,0.218,0.218,0.218,0.392,0.392,0.392,0.218,0.174,0.218,0.218,0.087,0.087,0.087,0.087,0.174,0.131,0.131,0.087,0.087,0.131,0.131,0.087,0.087,0.087,0.087,0.087,0.087,0.654,0.61,0.654,0.654,0.654,0.697,0.697,0.174,0.218,0.218,0.261,0.261,0.261,0.218,0.174,0.131,0.087,0.044,0.087,0.044,0.087,0.131,0.131,0.131,0.174,0.131,0.131,0.087,0.044,0.044,2.484,2.44,4.053,4.096,4.271,4.271,4.271,1.83,1.874,0.261,0.218,0.044,0.044,0.349,0.915,1.656,1.656,1.656,1.917,1.917,1.612,1.089,0.523,0.61,0.61,0.392,0.392,0.392,0.479,0.261,0.174,0.174,0.131,0.131,0.305,0.305,0.305,0.392,0.697,0.784,0.784,0.654,0.654,0.654,0.566,0.305,0.218,0.218,0.174,0.044,0.044,0.044,0,0.218,0.305,0.305,0.305,0.305,0.436,0.436,0.784,1.482,1.482,1.525,2.615,2.484,2.484,1.917,1.133,1.133,1.133,0.044,0.044,0.044,0.087,0.174,0.174,0.131,0.131,0.218,0.218,0.174,0.087,0.087,0.087,0.087,0,0,0,0,0.174,0.174,0.218,0.218,0.218,0.218,0.218,0.044,0.044,0,0,0,0,0.087,0.131,0.131,0.131,0.131,0.131,0.261,0.261,0.218,0.392,0.392,0.392,0.392,0.261,0.174,0.174,0.044,0.044,0.044,0.044,0.044,0.044,0.044,0,0,0.044,0.044,0.087,0.087,0.087,0.087,0.087,0.044,0.044,0,0,0,0,0,0,0.044,0.087,0.087,0.087,0.087,0.087,0.087,0.174,0.218,0.218,0.218,0.218,0.218,0.218,0.261,0.261,0.305,0.349,0.349,0.349,0.784,0.654,0.61,0.566,0.523,0.523,0.784,0.349,0.436,0.436,0.523,0.566,0.697,0.479,0.479,0.566,0.784,1.307,2.31,2.44,2.571,3.094,3.007,2.876,3.181,4.314,6.231,7.059,7.844,9.108,10.371,10.633,9.02,7.975,7.931,7.669,6.58,5.621,4.924,4.663,4.053,3.573,2.832,4.183,3.791,3.53,3.443,3.225,2.789,2.527,1.089,1.264,1.089,1.089,1.569]},{"iso":"MNE","continent":"Europe","population":628062,"name":"Montenegro","population_density":46.28,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,3,14,14,21,27,47,52,69,82,84,85,91,109,123,144,174,201,214,233,241,248,252,255,263,272,274,283,288,303,303,307,308,312,313,315,316,319,320,321,321,321,322,322,322,322,322,323,324,324,324,324,324,324,324,324,324,324,324,324,324,324,324,324,324,324,324,324,324,324,324,324,324,324,324,324,324,324,324,324,324,324,324,324,324,324,324,324,325,326,326,333,337,355,359,362,367,378,389,414,439,469,481,501,548,576,616,663,720,781,841,907,960,1019,1019,1164,1221,1287,1287,1287,1287,1965,2072,2188,2188,2381,2472,2569,2665,2747,2799,2893,2949,3016,3016,3073,3198,3258,3301,3361,3411,3480,3549,3588,3618,3696,3748,3813,3857,3930,3960,4035,4085,4132,4174,4229,4277,4313,4343,4378,4444,4499,4558,4663,4727,4790,4835,4917,5019,5165,5275,5422,5553,5659,5875,6094,6222,6385,6530,6712,6900,7061,7291,7503,7711,7898,8612,8842,9138,9428,9717,9962,10197,10313,10441,10575,10772,10987,11690,11934,12127,12359,12584,12794,13004,13348,13641,13869,14050,14268,14461,14672,15281,15427,15615,15760,15892,16069,16259,16436,16629,16797,16909,17091,17392,17746,18066,18341,18714,19210,19977,20851,21533,22079,22379,22805,23608,24154,24865,25509,26109,26686,27177,27773,28392,29031,29577,30079,30653,31062,31618,32188,32808,33316,33836,34454,34881,35265,35849,36351,36932,37467,37879,38246,38562,39153,39607,40165,40546,40948,41426,41803,42148,42563,42995],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.184,3.184,4.777,22.291,22.291,33.436,42.989,74.833,82.794,109.862,130.56,133.745,135.337,144.89,173.55,195.841,229.277,277.043,320.032,340.731,370.982,383.72,394.865,401.234,406.011,418.748,433.078,436.263,450.592,458.553,482.436,482.436,488.805,490.397,496.766,498.358,501.543,503.135,507.912,509.504,511.096,511.096,511.096,512.688,512.688,512.688,512.688,512.688,514.28,515.873,515.873,515.873,515.873,515.873,515.873,515.873,515.873,515.873,515.873,515.873,515.873,515.873,515.873,515.873,515.873,515.873,515.873,515.873,515.873,515.873,515.873,515.873,515.873,515.873,515.873,515.873,515.873,515.873,515.873,515.873,515.873,515.873,515.873,515.873,515.873,515.873,515.873,515.873,515.873,517.465,519.057,519.057,530.202,536.571,565.231,571.6,576.376,584.337,601.851,619.366,659.171,698.976,746.742,765.848,797.692,872.525,917.107,980.795,1055.628,1146.384,1243.508,1339.04,1444.125,1528.512,1622.451,1622.451,1853.32,1944.076,2049.161,2049.161,2049.161,2049.161,3128.672,3299.037,3483.732,3483.732,3791.027,3935.917,4090.361,4243.212,4373.772,4456.566,4606.233,4695.396,4802.074,4802.074,4892.829,5091.854,5187.386,5255.851,5351.383,5430.992,5540.854,5650.716,5712.812,5760.578,5884.769,5967.564,6071.057,6141.113,6257.344,6305.11,6424.525,6504.135,6578.968,6645.841,6733.412,6809.837,6867.156,6914.922,6970.649,7075.735,7163.306,7257.245,7424.426,7526.327,7626.636,7698.285,7828.845,7991.249,8223.71,8398.852,8632.906,8841.484,9010.257,9354.172,9702.864,9906.665,10166.194,10397.063,10686.843,10986.177,11242.521,11608.727,11946.273,12277.45,12575.192,13712.022,14078.228,14549.519,15011.257,15471.403,15861.491,16235.658,16420.353,16624.155,16837.51,17151.173,17493.496,18612.812,19001.309,19308.603,19677.994,20036.238,20370.6,20704.962,21252.679,21719.193,22082.215,22370.403,22717.502,23024.797,23360.751,24330.401,24562.862,24862.195,25093.064,25303.234,25585.054,25887.572,26169.391,26476.685,26744.175,26922.501,27212.282,27691.534,28255.172,28764.676,29202.531,29796.421,30586.152,31807.369,33198.952,34284.832,35154.173,35631.833,36310.11,37588.646,38457.987,39590.04,40615.417,41570.737,42489.436,43271.206,44220.157,45205.728,46223.144,47092.484,47891.769,48805.691,49456.901,50342.164,51249.717,52236.881,53045.718,53873.662,54857.641,55537.511,56148.915,57078.76,57878.044,58803.112,59654.939,60310.925,60895.262,61398.397,62339.387,63062.245,63950.693,64557.321,65197.385,65958.456,66558.716,67108.024,67768.787,68456.617],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.592,17.514,0,11.145,9.553,31.844,7.961,27.067,20.699,3.184,1.592,9.553,28.66,22.291,33.436,47.766,42.989,20.699,30.252,12.738,11.145,6.369,4.777,12.738,14.33,3.184,14.33,7.961,23.883,0,6.369,1.592,6.369,1.592,3.184,1.592,4.777,1.592,1.592,0,0,1.592,0,0,0,0,1.592,1.592,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.592,1.592,0,11.145,6.369,28.66,6.369,4.777,7.961,17.514,17.514,39.805,39.805,47.766,19.106,31.844,74.833,44.582,63.688,74.833,90.755,97.124,95.532,105.085,84.387,93.94,0,230.869,90.755,105.085,0,0,0,1079.511,170.365,184.695,0,307.295,144.89,154.443,152.851,130.56,82.794,149.667,89.163,106.677,0,90.755,199.025,95.532,68.465,95.532,79.61,109.862,109.862,62.096,47.766,124.192,82.794,103.493,70.057,116.231,47.766,119.415,79.61,74.833,66.872,87.571,76.426,57.319,47.766,55.727,105.085,87.571,93.94,167.181,101.901,100.309,71.649,130.56,162.404,232.461,175.142,234.053,208.578,168.773,343.915,348.692,203.802,259.529,230.869,289.78,299.334,256.344,366.206,337.546,331.177,297.741,1136.83,366.206,471.291,461.738,460.146,390.089,374.167,184.695,203.802,213.355,313.663,342.323,1119.316,388.497,307.295,369.39,358.245,334.362,334.362,547.717,466.514,363.021,288.188,347.099,307.295,335.954,969.649,232.461,299.334,230.869,210.17,281.819,302.518,281.819,307.295,267.49,178.326,289.78,479.252,563.639,509.504,437.855,593.89,789.731,1221.217,1391.582,1085.88,869.341,477.66,678.277,1278.536,869.341,1132.054,1025.376,955.32,918.699,781.77,948.951,985.571,1017.415,869.341,799.284,913.923,651.21,885.263,907.554,987.164,808.837,827.944,983.979,679.869,611.405,929.845,799.284,925.068,851.827,655.986,584.337,503.135,940.99,722.859,888.447,606.628,640.064,761.071,600.259,549.309,660.763,687.83],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.592,19.106,19.106,30.251,39.804,71.648,79.609,106.676,125.783,111.453,113.045,111.453,130.56,121.007,146.482,167.181,189.471,206.986,235.646,238.831,221.316,205.394,176.735,141.707,113.048,95.533,79.611,74.834,87.572,81.203,82.795,71.649,63.688,62.096,50.95,44.581,25.475,27.067,22.29,20.698,14.329,14.329,11.145,9.553,4.776,3.184,3.184,4.776,4.776,3.184,3.184,3.184,3.184,3.184,1.592,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.592,3.184,3.184,14.329,20.698,49.358,55.727,60.504,66.873,82.795,100.309,128.969,162.405,181.511,194.248,221.315,288.187,315.255,361.429,396.457,447.407,496.765,573.191,646.432,655.986,705.344,641.656,797.692,797.692,805.653,710.121,605.036,520.649,1506.22,1676.585,1630.411,1539.656,1741.866,1886.756,2041.199,2194.05,1245.099,1157.528,1122.5,1211.663,1011.045,866.155,802.467,848.641,813.613,799.284,745.149,735.596,738.781,848.643,819.984,668.725,697.385,711.714,719.675,710.122,716.491,654.395,711.714,743.558,694.199,678.277,662.355,668.724,609.812,609.812,546.124,571.599,584.337,611.405,691.015,716.49,759.48,783.363,858.196,915.515,1060.405,1141.607,1208.479,1315.156,1383.62,1655.886,1874.018,1915.416,1942.484,1998.211,2053.938,2144.694,2232.265,2254.556,2243.41,2370.785,2408.997,3314.958,3391.384,3563.341,3768.735,3862.675,3915.218,3958.208,3845.162,2912.134,2759.283,2601.655,2482.24,3141.41,3139.818,3072.946,3257.641,3412.084,3533.091,3553.79,3759.184,3106.382,3080.906,3061.799,3039.508,2988.558,2990.15,3625.437,3310.181,3143.001,3010.849,2932.831,2867.551,2862.774,2808.639,2146.285,2181.314,2060.306,2119.217,2388.299,2670.119,2877.105,3033.141,3319.736,3841.977,4884.868,5986.67,6593.298,6899,6867.156,7107.578,7792.224,7871.834,7782.671,7416.465,7285.905,7335.263,7639.373,7910.047,7617.082,7765.156,7502.443,7276.351,7234.954,6967.465,7070.958,7029.561,7031.154,6822.576,6781.179,6965.874,6731.82,6692.015,6736.597,6628.327,6566.231,6609.221,6437.263,6037.621,5860.887,6190.472,5983.486,6072.649,5754.209,5542.446,5647.531,5663.453,5709.627,5429.4,5394.371],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5.686,10.236,11.373,15.012,15.467,15.922,14.557,14.557,14.102,16.149,17.059,20.926,26.612,29.342,32.299,30.024,28.432,24.565,18.424,14.102,13.193,9.326,9.553,9.098,11.6,10.918,10.008,8.188,8.643,6.824,6.141,2.957,3.639,2.957,2.957,2.047,1.82,1.592,1.365,0.682,0.455,0.227,0.455,0.682,0.455,0.455,0.455,0.455,0.455,0.227,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.227,0.455,0.455,2.047,2.957,7.051,7.961,8.416,9.326,11.828,12.738,17.514,19.106,25.02,27.067,30.479,38.668,42.534,45.946,50.95,57.092,68.237,77.335,81.657,87.344,91.665,80.975,100.991,100.081,101.446,86.434,74.378,60.958,215.174,206.531,219.951,204.939,248.838,269.537,291.6,159.22,153.534,138.976,160.357,129.196,123.737,101.673,92.802,102.583,104.403,92.802,93.712,89.846,105.54,108.27,88.708,81.885,89.846,88.026,91.438,85.751,86.661,84.614,94.85,88.481,87.344,82.112,84.614,78.928,80.292,70.057,66.645,70.967,73.924,74.833,87.798,94.167,101.673,103.948,107.587,118.278,138.066,139.204,158.083,173.55,187.425,217.904,244.516,240.422,252.477,252.022,263.623,282.274,269.764,272.266,291.373,301.608,311.161,432.168,441.722,472.428,486.076,503.59,512.006,522.924,386.904,363.704,326.856,305.702,288.87,393.046,395.093,412.607,436.263,456.961,459.918,458.781,377.124,388.269,396.23,384.63,383.038,379.171,379.398,439.675,406.238,397.14,388.952,369.39,365.751,360.974,262.713,273.403,268.854,261.348,272.721,300.926,338.229,370.755,389.407,436.035,523.379,656.441,786.774,861.38,912.785,918.472,930.527,1000.356,950.088,913.013,904.369,916.652,979.658,994.442,947.359,963.963,947.586,925.295,903.005,902.322,883.671,874.572,863.427,859.105,850.462,854.556,864.564,868.659,829.536,832.72,805.88,822.485,825.897,779.04,765.393,749.926,751.518,740.6,735.369,700.34,698.066,723.313,737.188,681.234,672.363,643.704]},{"iso":"MAR","continent":"Africa","population":36910558,"name":"Morocco","population_density":80.08,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,2,2,2,2,3,5,6,7,17,28,29,38,49,63,77,96,115,143,170,225,275,345,402,479,556,617,654,708,791,919,1021,1120,1184,1275,1374,1448,1545,1661,1763,1888,2024,2283,2564,2685,2855,3046,3209,3446,3568,3758,3897,4065,4120,4252,4321,4423,4569,4729,4903,5053,5219,5408,5548,5711,5910,6063,6281,6418,6512,6607,6652,6741,6870,6952,7023,7133,7211,7332,7406,7433,7532,7577,7601,7643,7714,7780,7807,7833,7866,7922,8003,8071,8151,8224,8302,8437,8508,8537,8610,8692,8793,8885,8931,8997,9074,9613,9839,9977,10172,10344,10907,11338,11633,11877,12052,12290,12533,12636,12969,13288,13822,14215,14379,14607,14771,15079,15328,15542,15745,15936,16097,16262,16545,16726,17015,17236,17562,17742,17962,18264,18834,19645,20278,20887,21387,22213,23259,24322,25015,25537,26196,27217,28500,29644,30662,32007,33237,34063,35195,36694,37935,39241,41017,42489,43558,44803,46313,47638,49247,50812,52349,53252,54528,55864,57085,58489,60056,61399,62590,63781,65453,66855,68605,70160,72394,73780,75721,77878,79767,82197,84435,86686,88203,90324,92016,94504,97264,99816,101743,103119,105346,107743,110099,112522,115241,117685,119107,121183,123653,126044,128565,131228,133272,134695,137248,140024,142953,146398,149841,152404,153761,156946,160333,163650,167148,170911,173632,175749,179003,182580,186731,190416,194461,197481,199745,203733,207718,212038,215294,219084,222544,225070,229565,235310,240951,246349,252185,256781,259951,265165,270626,276821,282336,288211,293177,296189,301604,306995,311554,316260,320962,324941,327528,331527,336506,340684,345276,349688,353803,356336,359844,364190,368624,372620,376738,379657,381188,384088,388184,391529,394564,397597,399609,400826,403619,406970,409746],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.027,0.027,0.027,0.054,0.054,0.054,0.054,0.054,0.081,0.135,0.163,0.19,0.461,0.759,0.786,1.03,1.328,1.707,2.086,2.601,3.116,3.874,4.606,6.096,7.45,9.347,10.891,12.977,15.063,16.716,17.719,19.182,21.43,24.898,27.661,30.344,32.078,34.543,37.225,39.23,41.858,45.001,47.764,51.151,54.835,61.852,69.465,72.743,77.349,82.524,86.94,93.361,96.666,101.814,105.58,110.131,111.621,115.197,117.067,119.83,123.786,128.121,132.835,136.898,141.396,146.516,150.309,154.725,160.117,164.262,170.168,173.88,176.426,179,180.219,182.631,186.126,188.347,190.271,193.251,195.364,198.642,200.647,201.379,204.061,205.28,205.93,207.068,208.992,210.78,211.511,212.216,213.11,214.627,216.821,218.664,220.831,222.809,224.922,228.58,230.503,231.289,233.267,235.488,238.225,240.717,241.963,243.751,245.838,260.44,266.563,270.302,275.585,280.245,295.498,307.175,315.167,321.778,326.519,332.967,339.551,342.341,351.363,360.005,374.473,385.12,389.563,395.74,400.184,408.528,415.274,421.072,426.572,431.746,436.108,440.579,448.246,453.149,460.979,466.967,475.799,480.675,486.636,494.818,510.261,532.233,549.382,565.881,579.428,601.806,630.145,658.944,677.719,691.862,709.716,737.377,772.137,803.131,830.711,867.15,900.474,922.852,953.521,994.133,1027.755,1063.138,1111.254,1151.134,1180.096,1213.826,1254.736,1290.633,1334.225,1376.625,1418.266,1442.731,1477.301,1513.496,1546.576,1584.614,1627.068,1663.454,1695.721,1727.988,1773.287,1811.27,1858.682,1900.811,1961.336,1998.886,2051.473,2109.911,2161.089,2226.924,2287.557,2348.542,2389.641,2447.105,2492.945,2560.351,2635.127,2704.267,2756.474,2793.753,2854.089,2919.029,2982.859,3048.504,3122.169,3188.383,3226.909,3283.153,3350.071,3414.849,3483.15,3555.297,3610.674,3649.227,3718.394,3793.603,3872.957,3966.291,4059.57,4129.008,4165.773,4252.063,4343.825,4433.691,4528.46,4630.41,4704.128,4761.483,4849.642,4946.552,5059.013,5158.849,5268.438,5350.258,5411.595,5519.64,5627.604,5744.644,5832.857,5935.537,6029.278,6097.713,6219.494,6375.141,6527.97,6674.215,6832.327,6956.844,7042.727,7183.988,7331.94,7499.778,7649.193,7808.362,7942.903,8024.506,8171.212,8317.268,8440.783,8568.28,8695.669,8803.47,8873.559,8981.902,9116.795,9229.988,9354.397,9473.929,9585.415,9654.04,9749.08,9866.825,9986.953,10095.214,10206.781,10285.865,10327.343,10405.912,10516.882,10607.507,10689.733,10771.904,10826.414,10859.386,10935.055,11025.843,11101.051],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.027,0,0,0,0,0.027,0.054,0.027,0.027,0.271,0.298,0.027,0.244,0.298,0.379,0.379,0.515,0.515,0.759,0.731,1.49,1.355,1.896,1.544,2.086,2.086,1.653,1.002,1.463,2.249,3.468,2.763,2.682,1.734,2.465,2.682,2.005,2.628,3.143,2.763,3.387,3.685,7.017,7.613,3.278,4.606,5.175,4.416,6.421,3.305,5.148,3.766,4.552,1.49,3.576,1.869,2.763,3.956,4.335,4.714,4.064,4.497,5.12,3.793,4.416,5.391,4.145,5.906,3.712,2.547,2.574,1.219,2.411,3.495,2.222,1.924,2.98,2.113,3.278,2.005,0.731,2.682,1.219,0.65,1.138,1.924,1.788,0.731,0.704,0.894,1.517,2.194,1.842,2.167,1.978,2.113,3.657,1.924,0.786,1.978,2.222,2.736,2.493,1.246,1.788,2.086,14.603,6.123,3.739,5.283,4.66,15.253,11.677,7.992,6.611,4.741,6.448,6.583,2.791,9.022,8.643,14.467,10.647,4.443,6.177,4.443,8.344,6.746,5.798,5.5,5.175,4.362,4.47,7.667,4.904,7.83,5.987,8.832,4.877,5.96,8.182,15.443,21.972,17.15,16.499,13.546,22.378,28.339,28.799,18.775,14.142,17.854,27.661,34.76,30.994,27.58,36.439,33.324,22.378,30.669,40.612,33.622,35.383,48.116,39.88,28.962,33.73,40.91,35.898,43.592,42.4,41.641,24.465,34.57,36.196,33.08,38.038,42.454,36.385,32.267,32.267,45.299,37.984,47.412,42.129,60.525,37.55,52.587,58.439,51.178,65.835,60.633,60.985,41.099,57.463,45.841,67.406,74.775,69.14,52.207,37.279,60.335,64.941,63.83,65.645,73.665,66.214,38.526,56.244,66.919,64.778,68.3,72.147,55.377,38.553,69.167,75.209,79.354,93.334,93.28,69.438,36.765,86.29,91.762,89.866,94.77,101.949,73.719,57.355,88.159,96.91,112.461,99.836,109.589,81.819,61.337,108.045,107.964,117.04,88.213,102.681,93.74,68.436,121.781,155.647,152.829,146.245,158.112,124.517,85.883,141.26,147.952,167.838,149.415,159.169,134.541,81.603,146.706,146.056,123.515,127.497,127.389,107.801,70.088,108.343,134.894,113.193,124.409,119.532,111.486,68.625,95.041,117.744,120.128,108.262,111.567,79.083,41.479,78.568,110.971,90.624,82.226,82.172,54.51,32.972,75.669,90.787,75.209],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.027,0.027,0.027,0.027,0.027,0.054,0.108,0.135,0.135,0.406,0.704,0.731,0.975,1.246,1.571,1.923,2.411,2.655,3.116,3.82,5.066,6.123,7.64,8.805,10.376,11.947,12.841,13.112,13.085,13.979,15.551,16.77,17.366,17.014,17.826,19.506,20.048,20.427,20.102,20.102,20.807,22.758,27.31,32.241,33.514,35.492,37.524,39.177,42.211,41.831,39.962,36.115,37.389,34.273,32.674,30.127,26.469,27.12,26.307,27.255,26.767,29.774,31.318,33.242,34.895,36.33,36.14,37.332,36.98,35.03,32.484,29.91,27.905,26.009,24.086,20.104,19.372,18.938,19.642,20.428,18.748,17.935,16.932,15.658,13.816,13.627,12.137,10.863,10.836,9.048,9.346,10.89,11.594,11.837,12.027,13.409,16.362,17.392,16.661,16.445,16.825,17.394,17.909,17.042,15.173,15.335,29.152,33.297,34.814,37.361,39.528,53.535,63.424,69.33,61.338,59.956,62.665,63.965,62.096,55.865,52.831,59.306,63.342,63.044,62.773,60.633,66.186,63.91,61.065,52.098,46.626,46.545,44.838,48.062,44.622,45.706,45.895,49.227,48.929,50.527,54.239,62.015,79.083,88.403,98.915,103.629,121.13,143.509,164.126,167.458,159.628,160.332,171.494,192.708,201.324,200.565,208.205,222.754,230.99,243.805,256.756,255.618,260.007,280.543,283.984,279.622,290.974,301.215,296.501,306.471,313.488,307.013,291.598,297.206,299.672,291.842,293.982,292.844,286.829,277.455,285.257,295.986,297.774,312.106,316.197,334.268,335.433,355.753,381.925,387.804,415.655,428.876,447.732,428.306,448.219,441.473,450.44,474.037,477.342,468.916,445.21,464.446,471.924,489.913,488.152,487.042,484.116,470.435,489.4,495.984,495.821,500.291,506.793,488.505,460.844,491.485,510.45,522.885,551.441,576.421,573.712,555.1,602.837,625.432,640.089,655.505,664.12,644.559,632.476,683.87,694.49,715.189,725.159,739.978,719.848,707.466,758.156,777.961,798.091,773.843,776.688,760.839,747.456,807.9,855.502,900.367,929.572,999.471,1021.307,1013.45,1086.274,1112.445,1124.636,1121.222,1134.146,1110.575,1067.661,1128.484,1133.28,1108.843,1068.502,1046.476,995.108,930.655,957.395,945.583,912.72,913.614,905.649,889.746,850.57,875.523,884.924,870.158,865.227,852.385,811.936,741.929,751.872,767.802,740.682,702.78,676.69,619.633,573.522,607.712,619.931,584.169],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.004,0.004,0.008,0.015,0.015,0.019,0.058,0.101,0.104,0.135,0.17,0.221,0.271,0.306,0.337,0.441,0.511,0.681,0.821,1.037,1.184,1.409,1.598,1.73,1.66,1.676,1.726,2.001,2.098,2.183,2.194,2.403,2.578,2.543,2.423,2.477,2.489,2.725,2.899,3.518,4.319,4.412,4.621,4.966,5.113,5.504,4.973,4.621,4.691,4.683,4.157,4.037,3.387,3.309,3.139,3.22,3.243,3.611,3.743,4.207,4.354,4.42,4.571,4.49,4.753,4.641,4.273,4.099,3.642,3.216,3.123,2.597,2.342,2.403,2.338,2.632,2.574,2.179,2.245,2.144,1.811,1.672,1.478,1.448,1.448,1.165,1.119,1.242,1.393,1.382,1.436,1.614,1.815,2.21,2.268,2.067,2.086,2.094,2.202,2.256,1.912,1.893,2.078,3.882,4.439,4.583,4.981,5.469,7.392,8.762,7.818,7.888,8.031,8.197,8.472,6.692,6.313,6.405,7.528,8.372,8.085,8.027,8.263,8.166,7.896,6.657,5.922,6.026,5.767,5.771,5.674,5.411,5.701,5.771,6.293,6.367,6.58,6.653,8.159,10.179,11.774,12.869,14.107,16.453,19.332,21.241,20.784,20.354,20.548,22.564,24.333,24.712,24.538,27.062,29.802,30.448,30.878,31.714,32.089,33.204,34.872,35.809,36.749,37.186,37.229,37.554,38.727,37.91,38.162,37.519,37.639,36.966,36.563,35.77,35.778,35.027,36.141,35.812,37.113,37.813,39.153,39.106,42.555,43.309,46.212,48.089,49.974,52.606,55.249,55.315,55.822,56.519,54.719,57.037,58.315,59.53,58.276,57.73,58.141,60.869,60.358,59.054,59.7,61.701,61.879,61.295,61.577,61.713,62.092,61.875,60.327,60.331,62.177,63.362,65.444,69.02,72.039,74.048,73.792,76.238,78.603,80.105,80.31,81.548,82.16,85.101,85.369,86.104,89.332,90.056,91.147,92.304,92.873,95.714,97.293,97.947,96.287,95.3,97.003,98.017,99.979,106.791,111.904,120.194,128.113,132.51,135.002,137.785,136.686,138.83,139.283,139.434,140.866,140.254,141.032,140.761,134.429,131.298,126.758,122.938,121.293,115.813,114.218,112.744,112.302,111.18,111.706,111.497,109.597,107.147,108.138,105.831,104.693,100.064,96.186,93.833,92.865,88.651,84.931,80.732,77.221,76.006,75.592,72.709,70.506]},{"iso":"MOZ","continent":"Africa","population":31255435,"name":"Mozambique","population_density":37.728,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,3,5,7,7,8,8,8,8,10,10,10,10,10,10,10,17,17,20,20,21,21,28,29,31,34,35,39,39,39,41,46,65,70,76,76,76,76,76,79,79,80,80,81,81,81,82,87,91,103,104,104,115,119,129,137,145,146,156,162,164,168,194,209,213,227,233,234,244,254,254,307,316,352,354,409,424,433,453,472,489,509,553,583,609,638,651,662,668,688,733,737,757,762,788,816,839,859,883,889,903,918,939,969,987,1012,1040,1071,1092,1111,1135,1157,1219,1268,1330,1383,1402,1435,1491,1507,1536,1557,1582,1590,1616,1669,1701,1720,1748,1808,1864,1907,1946,1973,2029,2079,2120,2213,2241,2269,2411,2481,2559,2638,2708,2791,2855,2914,2991,3045,3115,3195,3304,3395,3440,3508,3590,3651,3697,3760,3821,3916,4039,4117,4207,4265,4341,4444,4557,4647,4764,4832,4918,5040,5269,5482,5713,5994,6161,6264,6537,6771,6912,7114,7262,7399,7589,7757,7983,8288,8556,8728,8888,8979,9049,9196,9296,9398,9494,9639,9742,9844,10001,10088,10258,10392,10537,10612,10707,10866,11080,11190,11331,11559,11748,11895,11986,12161,12273,12415,12525,12777,12869,12988,13130,13202,13283,13391,13485,13577,13768,13823,13892,13991,14094,14227,14340,14448,14514,14566,14629,14723,14877,14981,15037,15109,15231,15302,15467,15506,15586,15613,15701,15770,15866,15918,16038,16133,16244,16326,16373,16440,16521,16680,16812,16954,17002,17042,17143,17256],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.032,0.032,0.096,0.16,0.224,0.224,0.256,0.256,0.256,0.256,0.32,0.32,0.32,0.32,0.32,0.32,0.32,0.544,0.544,0.64,0.64,0.672,0.672,0.896,0.928,0.992,1.088,1.12,1.248,1.248,1.248,1.312,1.472,2.08,2.24,2.432,2.432,2.432,2.432,2.432,2.528,2.528,2.56,2.56,2.592,2.592,2.592,2.624,2.784,2.911,3.295,3.327,3.327,3.679,3.807,4.127,4.383,4.639,4.671,4.991,5.183,5.247,5.375,6.207,6.687,6.815,7.263,7.455,7.487,7.807,8.127,8.127,9.822,10.11,11.262,11.326,13.086,13.566,13.854,14.493,15.101,15.645,16.285,17.693,18.653,19.485,20.412,20.828,21.18,21.372,22.012,23.452,23.58,24.22,24.38,25.212,26.107,26.843,27.483,28.251,28.443,28.891,29.371,30.043,31.003,31.579,32.378,33.274,34.266,34.938,35.546,36.314,37.018,39.001,40.569,42.553,44.248,44.856,45.912,47.704,48.216,49.143,49.815,50.615,50.871,51.703,53.399,54.423,55.03,55.926,57.846,59.638,61.013,62.261,63.125,64.917,66.516,67.828,70.804,71.7,72.595,77.139,79.378,81.874,84.401,86.641,89.296,91.344,93.232,95.695,97.423,99.663,102.222,105.71,108.621,110.061,112.236,114.86,116.812,118.283,120.299,122.251,125.29,129.226,131.721,134.601,136.456,138.888,142.183,145.799,148.678,152.421,154.597,157.349,161.252,168.579,175.393,182.784,191.775,197.118,200.413,209.148,216.634,221.146,227.608,232.344,236.727,242.806,248.181,255.412,265.17,273.744,279.247,284.367,287.278,289.518,294.221,297.42,300.684,303.755,308.394,311.69,314.953,319.976,322.76,328.199,332.486,337.125,339.525,342.564,347.652,354.498,358.018,362.529,369.824,375.871,380.574,383.485,389.084,392.668,397.211,400.73,408.793,411.736,415.544,420.087,422.391,424.982,428.437,431.445,434.388,440.499,442.259,444.467,447.634,450.93,455.185,458.8,462.256,464.367,466.031,468.047,471.054,475.981,479.309,481.1,483.404,487.307,489.579,494.858,496.106,498.665,499.529,502.345,504.552,507.624,509.287,513.127,516.166,519.718,522.341,523.845,525.989,528.58,533.667,537.89,542.434,543.969,545.249,548.481,552.096],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.064,0.064,0.064,0,0.032,0,0,0,0.064,0,0,0,0,0,0,0.224,0,0.096,0,0.032,0,0.224,0.032,0.064,0.096,0.032,0.128,0,0,0.064,0.16,0.608,0.16,0.192,0,0,0,0,0.096,0,0.032,0,0.032,0,0,0.032,0.16,0.128,0.384,0.032,0,0.352,0.128,0.32,0.256,0.256,0.032,0.32,0.192,0.064,0.128,0.832,0.48,0.128,0.448,0.192,0.032,0.32,0.32,0,1.696,0.288,1.152,0.064,1.76,0.48,0.288,0.64,0.608,0.544,0.64,1.408,0.96,0.832,0.928,0.416,0.352,0.192,0.64,1.44,0.128,0.64,0.16,0.832,0.896,0.736,0.64,0.768,0.192,0.448,0.48,0.672,0.96,0.576,0.8,0.896,0.992,0.672,0.608,0.768,0.704,1.984,1.568,1.984,1.696,0.608,1.056,1.792,0.512,0.928,0.672,0.8,0.256,0.832,1.696,1.024,0.608,0.896,1.92,1.792,1.376,1.248,0.864,1.792,1.6,1.312,2.975,0.896,0.896,4.543,2.24,2.496,2.528,2.24,2.656,2.048,1.888,2.464,1.728,2.24,2.56,3.487,2.911,1.44,2.176,2.624,1.952,1.472,2.016,1.952,3.039,3.935,2.496,2.879,1.856,2.432,3.295,3.615,2.879,3.743,2.176,2.752,3.903,7.327,6.815,7.391,8.99,5.343,3.295,8.734,7.487,4.511,6.463,4.735,4.383,6.079,5.375,7.231,9.758,8.575,5.503,5.119,2.911,2.24,4.703,3.199,3.263,3.071,4.639,3.295,3.263,5.023,2.784,5.439,4.287,4.639,2.4,3.039,5.087,6.847,3.519,4.511,7.295,6.047,4.703,2.911,5.599,3.583,4.543,3.519,8.063,2.943,3.807,4.543,2.304,2.592,3.455,3.007,2.943,6.111,1.76,2.208,3.167,3.295,4.255,3.615,3.455,2.112,1.664,2.016,3.007,4.927,3.327,1.792,2.304,3.903,2.272,5.279,1.248,2.56,0.864,2.816,2.208,3.071,1.664,3.839,3.039,3.551,2.624,1.504,2.144,2.592,5.087,4.223,4.543,1.536,1.28,3.231,3.615],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.064,0.128,0.192,0.192,0.224,0.224,0.224,0.224,0.224,0.16,0.096,0.096,0.064,0.064,0.064,0.288,0.224,0.32,0.32,0.352,0.352,0.576,0.608,0.448,0.544,0.48,0.608,0.576,0.576,0.416,0.544,1.088,1.152,1.312,1.184,1.184,1.184,1.12,1.056,0.448,0.32,0.128,0.16,0.16,0.16,0.192,0.256,0.384,0.736,0.768,0.736,1.088,1.216,1.504,1.6,1.728,1.376,1.664,1.856,1.568,1.568,2.08,2.304,2.176,2.592,2.464,2.304,2.56,2.752,1.92,3.136,3.296,4,3.872,5.6,5.76,5.728,6.368,5.28,5.536,5.024,6.368,5.568,5.92,6.56,6.336,6.08,5.728,5.728,5.76,4.928,4.736,3.968,4.384,4.928,5.472,5.472,4.8,4.864,4.672,4.992,4.832,4.896,4.736,4.896,5.024,5.824,6.048,6.176,6.272,6.016,7.424,8.192,9.28,9.984,9.92,10.368,11.392,11.2,10.144,9.248,8.064,6.624,6.848,7.488,6.72,6.816,6.784,8.032,9.024,10.144,10.56,9.728,10.496,11.488,11.904,12.959,12.063,11.583,14.878,16.254,16.958,17.886,18.814,18.495,19.647,20.639,18.56,18.048,17.792,17.824,19.071,19.326,18.718,19.006,19.166,19.39,18.622,18.078,16.543,16.671,19.166,19.486,19.741,19.645,20.605,21.884,23.547,23.387,23.195,22.875,22.748,24.795,29.69,33.21,36.986,43.097,44.697,45.816,51.798,55.382,52.566,52.214,49.558,44.951,45.687,47.767,46.264,48.535,52.599,51.639,52.023,50.551,46.712,46.04,42.008,35.513,30.009,29.145,27.321,27.673,30.456,28.537,30.777,31.801,33.369,31.13,30.874,32.698,34.522,35.257,34.329,37.337,38.745,41.048,40.92,41.432,38.168,39.192,38.2,38.968,35.864,34.968,36.6,33.305,32.314,31.226,30.714,25.594,28.762,26.715,24.38,25.243,25.946,26.746,27.354,27.866,23.867,23.771,23.579,23.419,25.051,24.123,22.3,21.149,22.94,23.548,26.811,25.052,22.685,20.222,21.246,21.15,20.318,19.71,18.27,20.061,21.052,22.812,21.5,21.436,20.957,24.38,24.764,26.268,24.253,22.909,24.636,26.107],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.032,0.032,0.032,0.023,0.023,0.014,0.014,0.009,0.009,0.009,0.009,0.032,0.032,0.046,0.046,0.05,0.05,0.082,0.055,0.064,0.064,0.069,0.082,0.082,0.05,0.055,0.069,0.142,0.16,0.169,0.169,0.169,0.16,0.137,0.064,0.041,0.018,0.018,0.023,0.023,0.023,0.014,0.037,0.05,0.105,0.105,0.105,0.155,0.169,0.192,0.21,0.192,0.192,0.238,0.215,0.206,0.178,0.261,0.293,0.306,0.325,0.325,0.32,0.347,0.274,0.206,0.43,0.407,0.544,0.548,0.754,0.777,0.818,0.667,0.713,0.626,0.708,0.658,0.727,0.804,0.846,0.818,0.791,0.727,0.617,0.686,0.585,0.544,0.507,0.576,0.676,0.69,0.576,0.667,0.603,0.644,0.594,0.562,0.594,0.585,0.59,0.69,0.768,0.795,0.786,0.759,0.777,0.946,1.042,1.184,1.33,1.33,1.371,1.527,1.316,1.225,1.038,0.91,0.859,0.827,0.814,0.887,0.841,0.873,1.033,1.252,1.33,1.266,1.243,1.412,1.513,1.426,1.595,1.527,1.476,2.002,2.066,2.194,2.368,2.262,2.514,2.678,2.299,2.331,2.221,2.18,2.226,2.345,2.468,2.404,2.363,2.491,2.45,2.294,2.084,1.947,2.176,2.427,2.409,2.541,2.596,2.656,2.848,2.93,2.779,2.957,2.857,2.985,3.195,3.771,4.228,4.872,5.622,6.074,6.152,6.842,6.865,6.536,6.403,5.796,5.658,6.056,5.576,5.54,6.289,6.591,6.701,6.806,6.353,5.905,5.544,4.607,3.848,3.501,3.433,3.487,3.634,3.679,3.62,3.931,4.104,4.104,3.976,3.944,3.954,4.534,4.26,4.292,4.671,5.192,5.43,5.119,4.941,4.95,4.955,4.415,4.703,4.452,4.58,4.429,4.246,3.967,3.958,3.236,3.236,3.565,3.167,3.154,3.236,3.213,3.391,3.487,3.108,3.158,3.081,2.916,2.875,2.971,2.93,2.692,2.72,3.039,3.076,3.401,2.875,2.765,2.633,2.706,2.464,2.578,2.061,2.432,2.5,2.884,2.857,2.756,2.624,2.756,2.934,3.103,3.245,3.09,3.058,3.213,3.359]},{"iso":"MMR","continent":"Asia","population":54409794,"name":"Myanmar","population_density":81.721,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,10,14,15,15,20,20,21,21,22,22,22,23,27,38,41,62,63,74,85,88,98,111,119,121,123,139,144,146,146,146,150,150,151,151,151,155,161,161,161,176,177,178,180,180,180,181,181,182,182,184,191,193,199,199,199,201,201,203,206,206,206,207,224,224,228,232,233,236,236,240,242,244,246,248,260,261,261,261,262,262,262,286,286,287,290,291,292,293,293,293,296,299,299,299,303,304,306,313,313,316,316,317,321,326,330,331,336,337,337,339,339,340,341,341,341,343,343,346,348,350,350,351,351,353,353,353,353,355,356,357,357,359,359,360,360,360,361,369,374,374,375,376,376,394,399,435,441,450,474,504,580,602,643,749,775,882,919,995,1111,1171,1319,1419,1518,1807,2009,2150,2422,2796,3015,3195,3636,3894,4299,4621,5263,5805,6471,6959,7827,8515,9112,9991,10734,11631,12425,13373,14383,15525,16503,17794,18781,20033,21433,22445,23906,26064,27974,29314,30437,31325,32351,33488,34875,36025,37205,38502,39696,41008,42365,43788,44774,46200,47666,49072,50403,51496,52706,53405,54607,55804,56940,57935,59277,60348,61377,61975,63241,64453,65598,66734,68011,68994,70161,71730,73322,74882,76414,77848,79246,80505,82236,83566,85205,86633,87977,89486,90713,92189,93600,95018,96520,98047,99155,100431,101739,103166,104487,105863,107215,108342,109512,110667,111900,113082],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.147,0.147,0.184,0.257,0.276,0.276,0.368,0.368,0.386,0.386,0.404,0.404,0.404,0.423,0.496,0.698,0.754,1.14,1.158,1.36,1.562,1.617,1.801,2.04,2.187,2.224,2.261,2.555,2.647,2.683,2.683,2.683,2.757,2.757,2.775,2.775,2.775,2.849,2.959,2.959,2.959,3.235,3.253,3.271,3.308,3.308,3.308,3.327,3.327,3.345,3.345,3.382,3.51,3.547,3.657,3.657,3.657,3.694,3.694,3.731,3.786,3.786,3.786,3.804,4.117,4.117,4.19,4.264,4.282,4.337,4.337,4.411,4.448,4.484,4.521,4.558,4.779,4.797,4.797,4.797,4.815,4.815,4.815,5.256,5.256,5.275,5.33,5.348,5.367,5.385,5.385,5.385,5.44,5.495,5.495,5.495,5.569,5.587,5.624,5.753,5.753,5.808,5.808,5.826,5.9,5.992,6.065,6.083,6.175,6.194,6.194,6.23,6.23,6.249,6.267,6.267,6.267,6.304,6.304,6.359,6.396,6.433,6.433,6.451,6.451,6.488,6.488,6.488,6.488,6.525,6.543,6.561,6.561,6.598,6.598,6.616,6.616,6.616,6.635,6.782,6.874,6.874,6.892,6.911,6.911,7.241,7.333,7.995,8.105,8.271,8.712,9.263,10.66,11.064,11.818,13.766,14.244,16.21,16.89,18.287,20.419,21.522,24.242,26.08,27.899,33.211,36.923,39.515,44.514,51.388,55.413,58.721,66.826,71.568,79.012,84.93,96.729,106.69,118.931,127.9,143.853,156.498,167.47,183.625,197.281,213.767,228.36,245.783,264.346,285.335,303.309,327.037,345.177,368.187,393.918,412.518,439.369,479.031,514.135,538.763,559.403,575.724,594.58,615.477,640.969,662.105,683.792,707.63,729.575,753.688,778.628,804.782,822.903,849.112,876.056,901.896,926.359,946.447,968.686,981.533,1003.624,1025.624,1046.503,1064.79,1089.455,1109.139,1128.051,1139.041,1162.309,1184.585,1205.629,1226.507,1249.977,1268.044,1289.492,1318.329,1347.588,1376.26,1404.416,1430.772,1456.466,1479.605,1511.419,1535.863,1565.986,1592.232,1616.933,1644.667,1667.218,1694.346,1720.279,1746.34,1773.945,1802.01,1822.374,1845.826,1869.866,1896.092,1920.371,1945.661,1970.509,1991.222,2012.726,2033.954,2056.615,2078.339],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.037,0.074,0.018,0,0.092,0,0.018,0,0.018,0,0,0.018,0.074,0.202,0.055,0.386,0.018,0.202,0.202,0.055,0.184,0.239,0.147,0.037,0.037,0.294,0.092,0.037,0,0,0.074,0,0.018,0,0,0.074,0.11,0,0,0.276,0.018,0.018,0.037,0,0,0.018,0,0.018,0,0.037,0.129,0.037,0.11,0,0,0.037,0,0.037,0.055,0,0,0.018,0.312,0,0.074,0.074,0.018,0.055,0,0.074,0.037,0.037,0.037,0.037,0.221,0.018,0,0,0.018,0,0,0.441,0,0.018,0.055,0.018,0.018,0.018,0,0,0.055,0.055,0,0,0.074,0.018,0.037,0.129,0,0.055,0,0.018,0.074,0.092,0.074,0.018,0.092,0.018,0,0.037,0,0.018,0.018,0,0,0.037,0,0.055,0.037,0.037,0,0.018,0,0.037,0,0,0,0.037,0.018,0.018,0,0.037,0,0.018,0,0,0.018,0.147,0.092,0,0.018,0.018,0,0.331,0.092,0.662,0.11,0.165,0.441,0.551,1.397,0.404,0.754,1.948,0.478,1.967,0.68,1.397,2.132,1.103,2.72,1.838,1.82,5.312,3.713,2.591,4.999,6.874,4.025,3.308,8.105,4.742,7.444,5.918,11.799,9.961,12.24,8.969,15.953,12.645,10.972,16.155,13.656,16.486,14.593,17.423,18.563,20.989,17.975,23.727,18.14,23.011,25.731,18.6,26.852,39.662,35.104,24.628,20.64,16.321,18.857,20.897,25.492,21.136,21.687,23.838,21.945,24.113,24.94,26.153,18.122,26.209,26.944,25.841,24.463,20.088,22.239,12.847,22.092,22,20.879,18.287,24.665,19.684,18.912,10.991,23.268,22.275,21.044,20.879,23.47,18.067,21.448,28.837,29.259,28.671,28.157,26.356,25.694,23.139,31.814,24.444,30.123,26.245,24.701,27.734,22.551,27.127,25.933,26.061,27.605,28.065,20.364,23.452,24.04,26.227,24.279,25.29,24.848,20.713,21.503,21.228,22.661,21.724],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.037,0.111,0.129,0.129,0.221,0.221,0.239,0.239,0.22,0.146,0.128,0.146,0.128,0.33,0.367,0.753,0.753,0.955,1.157,1.194,1.304,1.341,1.433,1.084,1.103,1.195,1.085,1.067,0.883,0.644,0.571,0.534,0.515,0.221,0.129,0.166,0.276,0.276,0.202,0.478,0.478,0.496,0.533,0.459,0.349,0.367,0.367,0.109,0.091,0.11,0.202,0.239,0.349,0.331,0.331,0.35,0.35,0.35,0.276,0.239,0.129,0.147,0.459,0.422,0.496,0.533,0.496,0.551,0.551,0.607,0.332,0.369,0.332,0.295,0.498,0.461,0.461,0.387,0.368,0.331,0.294,0.698,0.477,0.477,0.532,0.55,0.55,0.568,0.568,0.127,0.182,0.219,0.164,0.146,0.202,0.202,0.239,0.368,0.313,0.313,0.313,0.331,0.331,0.405,0.442,0.331,0.423,0.386,0.386,0.405,0.331,0.257,0.201,0.183,0.091,0.11,0.11,0.128,0.165,0.184,0.166,0.184,0.184,0.184,0.184,0.129,0.092,0.092,0.11,0.11,0.11,0.11,0.11,0.128,0.128,0.091,0.091,0.22,0.312,0.275,0.293,0.293,0.293,0.624,0.698,1.213,1.231,1.396,1.819,2.352,3.749,3.822,4.484,5.77,6.138,7.94,8.179,9.025,9.76,10.459,12.425,12.315,13.657,17.002,20.035,21.229,24.096,29.867,31.172,32.642,38.927,38.357,42.088,45.415,52.215,55.302,63.517,69.178,77.026,84.929,88.457,98.694,100.551,107.076,109.429,117.883,120.493,128.837,135.84,143.412,147.896,154.421,165.559,166.736,175.025,193.698,210.827,211.728,214.228,207.538,200.664,202.961,201.601,183.075,169.658,168.868,170.173,177.965,184.048,189.304,181.934,187.007,192.264,194.267,196.785,192.76,190.059,176.753,180.723,176.514,170.449,162.895,163.097,162.693,159.366,157.51,158.686,158.961,159.126,161.718,160.523,158.906,161.442,179.288,185.279,191.675,198.788,204.265,206.489,211.561,221.927,217.534,218.398,215.972,212.516,213.894,210.751,214.739,208.858,210.475,207.957,209.777,205.44,201.158,202.647,201.747,200.093,199.322,196.565,189.213,190.352,188.128,186.749,182.246],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.032,0.032,0.034,0.029,0.021,0.018,0.018,0.008,0.018,0.045,0.053,0.105,0.108,0.137,0.163,0.16,0.158,0.184,0.15,0.152,0.129,0.142,0.147,0.126,0.092,0.071,0.076,0.071,0.032,0.018,0.013,0.024,0.039,0.029,0.029,0.066,0.068,0.071,0.066,0.05,0.05,0.053,0.013,0.013,0.011,0.011,0.029,0.034,0.047,0.047,0.045,0.05,0.045,0.032,0.034,0.018,0.018,0.021,0.06,0.06,0.066,0.068,0.071,0.079,0.076,0.042,0.047,0.042,0.037,0.039,0.063,0.066,0.055,0.05,0.047,0.042,0.037,0.068,0.066,0.068,0.076,0.076,0.079,0.081,0.018,0.018,0.024,0.024,0.021,0.018,0.026,0.029,0.034,0.045,0.037,0.045,0.045,0.037,0.045,0.053,0.045,0.047,0.053,0.055,0.053,0.047,0.034,0.026,0.026,0.013,0.011,0.016,0.011,0.018,0.021,0.024,0.024,0.026,0.021,0.026,0.018,0.013,0.008,0.013,0.013,0.016,0.011,0.016,0.016,0.018,0.013,0.011,0.011,0.032,0.039,0.039,0.039,0.042,0.042,0.087,0.079,0.16,0.176,0.197,0.257,0.336,0.488,0.533,0.546,0.809,0.853,1.071,1.09,1.09,1.336,1.386,1.497,1.691,1.67,2.332,2.662,2.728,3.285,3.878,4.19,4.403,4.802,4.949,5.642,5.774,6.477,7.325,8.601,8.725,10.326,11.069,11.791,12.414,12.941,13.548,14.351,14.561,15.407,16.838,17.098,18.537,18.773,19.975,21.162,21.167,22.005,25.103,26.728,27.655,27.317,25.972,26.009,25.158,23.134,21.139,20.718,21.175,21.979,22.73,23.307,23.402,22.971,23.617,24.061,24.617,24.667,23.974,23.415,22.661,22.073,21.367,20.658,19.776,20.43,20.065,20.931,19.345,19.526,19.726,20.12,19.579,20.12,19.999,21.493,22.289,23.286,24.376,25.416,25.828,26.917,27.159,27.584,26.896,27.104,26.831,26.594,26.886,26.802,26.132,26.345,25.765,25.959,26.44,25.387,25.515,25.074,25.116,24.862,24.531,24.071,24.121,23.843,23.441,22.932,22.567]},{"iso":"NAM","continent":"Africa","population":2540916,"name":"Namibia","population_density":3.078,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,3,3,3,3,4,7,7,8,8,8,11,11,11,14,14,14,14,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,18,19,20,21,21,21,22,22,23,23,24,25,25,25,25,25,29,29,31,31,31,31,31,32,32,32,34,36,39,45,46,55,63,72,76,102,121,136,183,196,205,285,293,350,375,412,485,539,593,615,668,668,785,861,864,960,1032,1078,1203,1247,1344,1366,1402,1522,1618,1687,1775,1843,1917,1986,2052,2129,2224,2294,2406,2470,2540,2652,2802,2802,2949,3101,3229,3406,3544,3726,3907,4154,4344,4464,4665,4912,5227,5538,5854,6030,6160,6431,6712,6906,7116,7365,7550,7692,7844,8082,8323,8514,8685,8810,8928,9108,9256,9437,9604,9719,9818,9901,9964,10078,10207,10292,10377,10526,10607,10663,10740,10835,10918,11033,11121,11140,11265,11373,11480,11572,11626,11654,11673,11714,11781,11829,11891,11936,11989,12000,12069,12103,12215,12263,12293,12326,12367,12406,12460,12501,12579,12660,12675,12729,12806,12858,12907,12935,12988,13012,13030,13046,13090,13143,13170,13211,13240,13253,13292,13345,13372,13449,13508,13555,13566,13610,13662,13712,13811,13865,13897,13938,14006,14155,14207,14285,14345,14380,14416,14477,14599,14804,14950,15078,15219,15298,15472,15773,16097,16269,16536,16726,16913,17276,17607],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.787,0.787,0.787,0.787,0.787,1.181,1.181,1.181,1.181,1.574,2.755,2.755,3.148,3.148,3.148,4.329,4.329,4.329,5.51,5.51,5.51,5.51,6.297,6.297,6.297,6.297,6.297,6.297,6.297,6.297,6.297,6.297,6.297,6.297,6.297,6.297,6.297,6.297,6.297,6.297,6.297,6.297,6.297,6.297,6.297,6.297,6.297,6.297,6.297,6.297,6.297,6.297,6.297,6.297,6.297,6.297,6.297,6.297,6.297,6.297,6.297,6.297,6.297,6.297,6.297,6.297,6.297,6.297,7.084,7.478,7.871,8.265,8.265,8.265,8.658,8.658,9.052,9.052,9.445,9.839,9.839,9.839,9.839,9.839,11.413,11.413,12.2,12.2,12.2,12.2,12.2,12.594,12.594,12.594,13.381,14.168,15.349,17.71,18.104,21.646,24.794,28.336,29.91,40.143,47.621,53.524,72.021,77.138,80.68,112.164,115.313,137.746,147.585,162.146,190.876,212.128,233.38,242.039,262.897,262.897,308.944,338.854,340.035,377.817,406.153,424.256,473.451,490.768,528.943,537.601,551.77,598.997,636.778,663.934,698.567,725.329,754.452,781.608,807.583,837.887,875.275,902.824,946.903,972.09,999.64,1043.718,1102.752,1102.752,1160.605,1220.426,1270.802,1340.461,1394.773,1466.4,1537.634,1634.843,1709.62,1756.847,1835.952,1933.161,2057.132,2179.529,2303.894,2373.16,2424.323,2530.977,2641.567,2717.917,2800.565,2898.561,2971.369,3027.255,3087.076,3180.743,3275.59,3350.76,3418.059,3467.254,3513.693,3584.534,3642.781,3714.015,3779.739,3824.999,3863.961,3896.626,3921.42,3966.286,4017.055,4050.508,4083.96,4142.601,4174.479,4196.518,4226.822,4264.21,4296.876,4342.135,4376.768,4384.246,4433.441,4475.945,4518.056,4554.263,4575.515,4586.535,4594.013,4610.148,4636.517,4655.408,4679.808,4697.519,4718.377,4722.706,4749.862,4763.243,4807.321,4826.212,4838.019,4851.006,4867.142,4882.491,4903.743,4919.879,4950.577,4982.455,4988.359,5009.611,5039.915,5060.38,5079.664,5090.684,5111.542,5120.988,5128.072,5134.369,5151.685,5172.544,5183.17,5199.306,5210.719,5215.836,5231.184,5252.043,5262.669,5292.973,5316.193,5334.69,5339.019,5356.336,5376.801,5396.479,5435.441,5456.694,5469.287,5485.423,5512.185,5570.826,5591.291,5621.988,5645.602,5659.376,5673.545,5697.552,5745.566,5826.245,5883.705,5934.08,5989.572,6020.663,6089.143,6207.604,6335.117,6402.809,6507.889,6582.665,6656.261,6799.123,6929.391],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.394,0,0,0,0.394,1.181,0,0.394,0,0,1.181,0,0,1.181,0,0,0,0.787,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.787,0.394,0.394,0.394,0,0,0.394,0,0.394,0,0.394,0.394,0,0,0,0,1.574,0,0.787,0,0,0,0,0.394,0,0,0.787,0.787,1.181,2.361,0.394,3.542,3.148,3.542,1.574,10.233,7.478,5.903,18.497,5.116,3.542,31.485,3.148,22.433,9.839,14.562,28.73,21.252,21.252,8.658,20.859,0,46.046,29.91,1.181,37.782,28.336,18.104,49.195,17.317,38.175,8.658,14.168,47.227,37.782,27.156,34.633,26.762,29.123,27.156,25.975,30.304,37.388,27.549,44.079,25.188,27.549,44.079,59.034,0,57.853,59.821,50.376,69.66,54.311,71.628,71.234,97.209,74.776,47.227,79.105,97.209,123.971,122.397,124.365,69.266,51.163,106.654,110.59,76.35,82.647,97.996,72.808,55.885,59.821,93.667,94.848,75.17,67.299,49.195,46.44,70.841,58.247,71.234,65.724,45.259,38.962,32.665,24.794,44.866,50.769,33.453,33.453,58.64,31.878,22.039,30.304,37.388,32.665,45.259,34.633,7.478,49.195,42.504,42.111,36.207,21.252,11.02,7.478,16.136,26.368,18.891,24.401,17.71,20.859,4.329,27.156,13.381,44.079,18.891,11.807,12.987,16.136,15.349,21.252,16.136,30.698,31.878,5.903,21.252,30.304,20.465,19.284,11.02,20.859,9.445,7.084,6.297,17.317,20.859,10.626,16.136,11.413,5.116,15.349,20.859,10.626,30.304,23.22,18.497,4.329,17.317,20.465,19.678,38.962,21.252,12.594,16.136,26.762,58.64,20.465,30.698,23.614,13.775,14.168,24.007,48.014,80.68,57.46,50.376,55.492,31.091,68.479,118.461,127.513,67.692,105.08,74.776,73.596,142.862,130.268],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.394,0.394,0.394,0.394,0.788,1.969,1.969,2.363,1.969,1.969,3.15,3.15,2.756,2.756,2.756,2.362,2.362,3.149,1.968,1.968,1.968,0.787,0.787,0.787,0.787,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.787,1.181,1.575,1.969,1.969,1.969,2.363,2.363,1.97,1.576,1.576,1.576,1.576,1.576,1.182,1.182,2.362,2.362,2.755,2.361,2.361,2.361,2.361,2.755,1.181,1.181,1.181,1.968,3.149,5.51,5.904,9.052,12.2,15.742,16.529,25.975,32.272,35.814,53.917,55.491,55.885,83.828,85.402,97.602,99.963,108.622,118.855,134.991,152.701,129.874,147.585,125.152,161.359,176.707,149.158,165.688,172.772,182.218,210.554,227.871,220,198.748,211.735,221.18,230.626,239.678,225.116,234.561,225.509,244.007,255.814,238.891,238.497,238.89,248.336,246.762,245.188,262.111,295.17,264.866,285.331,317.603,323.9,368.372,395.134,422.683,434.883,532.092,549.015,536.421,565.15,592.699,662.359,713.128,766.259,738.316,714.703,774.13,805.615,784.756,743.432,719.031,667.474,654.093,662.751,649.764,634.022,632.842,617.494,568.693,542.325,557.281,555.707,533.274,504.15,474.239,445.902,429.372,407.726,381.751,374.273,336.492,304.221,317.602,310.518,299.892,305.402,297.924,279.82,291.626,292.806,241.644,258.961,279.426,291.233,290.052,278.639,244.4,217.245,225.903,203.076,179.463,161.753,143.256,142.863,136.172,155.85,153.095,170.806,170.806,158.212,153.489,148.766,159.786,153.882,156.637,143.256,156.243,150.339,158.604,172.772,177.888,175.92,170.804,160.965,138.532,139.713,124.758,111.771,112.165,103.507,108.623,99.177,94.848,103.113,117.675,110.984,120.429,133.023,135.384,128.3,140.501,145.617,144.436,172.772,163.72,153.094,150.733,173.166,214.489,214.489,225.509,210.161,202.684,204.258,212.129,233.381,255.421,292.416,312.094,343.972,361.288,415.599,510.053,589.552,576.564,624.184,648.584,666.688,778.459,840.248],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.056,0.056,0.056,0.112,0.281,0.281,0.281,0.281,0.281,0.45,0.394,0.225,0.394,0.337,0.337,0.337,0.281,0.281,0.281,0.112,0.112,0.112,0.112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.112,0.169,0.225,0.281,0.281,0.281,0.337,0.225,0.225,0.169,0.169,0.225,0.225,0.169,0.169,0.112,0.337,0.281,0.337,0.337,0.337,0.337,0.337,0.169,0.169,0.056,0.169,0.281,0.45,0.787,0.787,1.293,1.743,2.136,2.249,3.542,4.273,5.06,7.197,7.478,7.478,11.751,10.739,12.875,13.437,12.875,16.248,18.778,17.317,18.104,17.879,16.473,20.971,21.14,18.272,20.634,23.445,23.051,30.079,25.975,27.156,28.224,24.85,27.549,30.36,27.212,29.686,28.055,30.979,32.834,29.798,28.73,30.192,29.18,31.653,31.091,31.147,33.734,37.838,32.497,36.826,39.075,42.673,48.689,50.151,51.95,62.126,67.748,69.885,69.435,70.784,76.913,84.39,91.699,95.579,94.791,95.354,99.289,101.201,94.398,88.719,84.952,85.458,86.133,79.443,77.025,79.668,78.599,74.214,70.841,69.491,71.065,66.005,62.632,61.283,58.134,56.672,54.705,48.127,46.215,43.291,38.681,36.995,39.806,39.693,39.3,37.219,35.308,35.195,36.882,33.453,29.967,33.846,35.589,36.264,36.77,33.34,29.967,29.967,25.244,22.939,19.622,17.935,17.429,18.835,18.385,19.959,18.104,21.702,20.915,20.072,18.947,20.634,18.947,20.072,16.08,17.766,20.634,19.622,20.353,22.489,22.377,22.826,20.015,18.441,18.947,16.923,13.493,13.044,13.269,13.212,12.538,12.819,12.538,13.831,14.337,12.875,15.686,16.698,17.71,17.598,17.879,17.823,19.116,20.353,20.072,19.228,20.915,22.264,27.718,27.83,26.65,26.987,27.156,26.874,26.481,24.963,33.565,37.388,41.211,47.171,49.588,55.942,66.005,72.696,74.158,81.973,84.728,90.8,101.426,103.112]},{"iso":"NPL","continent":"Asia","population":29136808,"name":"Nepal","population_density":204.43,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,3,3,4,5,5,5,5,5,6,6,9,9,9,9,9,9,9,9,12,14,16,16,16,30,31,31,31,43,45,48,49,49,52,52,54,57,57,59,59,75,75,82,99,101,102,110,110,134,217,250,249,267,291,295,375,402,427,457,516,584,603,682,772,886,1042,1212,1401,1572,1811,2099,2300,2634,2912,3235,3448,3762,4086,4364,4614,5062,5335,5760,6211,6591,7177,7848,8274,8605,9026,9561,10099,10728,11162,11755,12309,12772,13248,13564,14046,14519,15259,15491,15784,15964,16168,16423,16531,16649,16719,16801,16945,17061,17177,17344,17445,17502,17658,17844,17994,18094,18241,18374,18483,18613,18752,19063,19273,19547,19771,20086,20332,20750,21009,21390,21750,22214,22592,22972,23310,23948,24432,24957,25551,26019,26660,27241,28257,28938,29645,30483,31117,31935,32678,33533,34418,35529,36456,37340,38561,39460,40529,41649,42877,44236,45277,46257,47236,48138,49219,50465,51919,53120,54159,55329,56788,58327,59573,61593,62797,64122,65276,66632,67804,69301,70614,71821,73394,74745,76258,77817,79728,82450,84570,86823,89263,90814,94253,98617,100676,105684,107755,111802,115358,117996,121745,126137,129304,132246,136036,139129,144872,148509,153008,155233,158089,159830,160400,162354,164718,168235,170743,173567,176500,179614,182923,185974,188883,191636,194453,197024,199760,202329,204242,206353,208299,209776,210973,211475,212917,215020,216965,218639,220308,222288,224078,226026,227640,229343,230723,231978,233452,233452,236246,237589,238861,239885,240981,241995,243377,244433,245650,246694,247593,248423,249244,250180,250916,251692],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.069,0.069,0.103,0.103,0.137,0.172,0.172,0.172,0.172,0.172,0.206,0.206,0.309,0.309,0.309,0.309,0.309,0.309,0.309,0.309,0.412,0.48,0.549,0.549,0.549,1.03,1.064,1.064,1.064,1.476,1.544,1.647,1.682,1.682,1.785,1.785,1.853,1.956,1.956,2.025,2.025,2.574,2.574,2.814,3.398,3.466,3.501,3.775,3.775,4.599,7.448,8.58,8.546,9.164,9.987,10.125,12.87,13.797,14.655,15.685,17.71,20.043,20.695,23.407,26.496,30.408,35.762,41.597,48.084,53.952,62.155,72.039,78.938,90.401,99.942,111.028,118.338,129.115,140.235,149.776,158.356,173.732,183.102,197.688,213.167,226.209,246.321,269.35,283.971,295.331,309.78,328.142,346.606,368.194,383.089,403.442,422.455,438.346,454.683,465.528,482.071,498.304,523.702,531.664,541.72,547.898,554.899,563.651,567.358,571.408,573.81,576.625,581.567,585.548,589.529,595.261,598.727,600.684,606.038,612.421,617.569,621.001,626.047,630.611,634.352,638.814,643.585,654.258,661.466,670.87,678.558,689.369,697.812,712.158,721.047,734.123,746.478,762.403,775.377,788.419,800.019,821.916,838.527,856.545,876.932,892.994,914.994,934.934,969.804,993.177,1017.442,1046.202,1067.962,1096.036,1121.537,1150.881,1181.255,1219.385,1251.201,1281.541,1323.446,1354.301,1390.99,1429.429,1471.575,1518.217,1553.945,1587.58,1621.18,1652.137,1689.238,1732.002,1781.904,1823.124,1858.783,1898.938,1949.012,2001.832,2044.596,2113.924,2155.246,2200.722,2240.328,2286.867,2327.091,2378.469,2423.532,2464.958,2518.944,2565.312,2617.239,2670.746,2736.333,2829.754,2902.514,2979.839,3063.582,3116.814,3234.843,3384.619,3455.286,3627.165,3698.243,3837.14,3959.185,4049.723,4178.392,4329.129,4437.823,4538.795,4668.871,4775.025,4972.13,5096.955,5251.365,5327.728,5425.749,5485.501,5505.064,5572.127,5653.262,5773.968,5860.045,5956.967,6057.63,6164.505,6278.073,6382.786,6482.625,6577.11,6673.792,6762.031,6855.933,6944.103,7009.759,7082.21,7148.999,7199.691,7240.773,7258.002,7307.492,7379.669,7446.423,7503.876,7561.158,7629.113,7690.547,7757.404,7812.798,7871.247,7918.609,7961.682,8012.271,8012.271,8108.163,8154.256,8197.912,8233.057,8270.673,8305.474,8352.905,8389.148,8430.917,8466.748,8497.602,8526.088,8554.266,8586.39,8611.65,8638.283],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.034,0,0.034,0,0.034,0.034,0,0,0,0,0.034,0,0.103,0,0,0,0,0,0,0,0.103,0.069,0.069,0,0,0.48,0.034,0,0,0.412,0.069,0.103,0.034,0,0.103,0,0.069,0.103,0,0.069,0,0.549,0,0.24,0.583,0.069,0.034,0.275,0,0.824,2.849,1.133,-0.034,0.618,0.824,0.137,2.746,0.927,0.858,1.03,2.025,2.334,0.652,2.711,3.089,3.913,5.354,5.835,6.487,5.869,8.203,9.884,6.898,11.463,9.541,11.086,7.31,10.777,11.12,9.541,8.58,15.376,9.37,14.586,15.479,13.042,20.112,23.029,14.621,11.36,14.449,18.362,18.465,21.588,14.895,20.352,19.014,15.891,16.337,10.845,16.543,16.234,25.397,7.962,10.056,6.178,7.001,8.752,3.707,4.05,2.402,2.814,4.942,3.981,3.981,5.732,3.466,1.956,5.354,6.384,5.148,3.432,5.045,4.565,3.741,4.462,4.771,10.674,7.207,9.404,7.688,10.811,8.443,14.346,8.889,13.076,12.356,15.925,12.973,13.042,11.6,21.897,16.611,18.018,20.387,16.062,22,19.94,34.87,23.372,24.265,28.761,21.759,28.074,25.5,29.344,30.374,38.13,31.815,30.34,41.906,30.854,36.689,38.439,42.146,46.642,35.728,33.634,33.6,30.957,37.101,42.764,49.903,41.219,35.659,40.155,50.074,52.82,42.764,69.328,41.322,45.475,39.606,46.539,40.224,51.378,45.063,41.425,53.987,46.367,51.927,53.506,65.587,93.421,72.76,77.325,83.743,53.232,118.029,149.776,70.667,171.879,71.078,138.896,122.045,90.538,128.669,150.737,108.694,100.972,130.076,106.154,197.105,124.825,154.41,76.364,98.02,59.753,19.563,67.063,81.134,120.706,86.077,96.922,100.663,106.875,113.568,104.713,99.839,94.485,96.682,88.239,93.902,88.17,65.656,72.451,66.788,50.692,41.082,17.229,49.491,72.177,66.754,57.453,57.281,67.955,61.434,66.857,55.394,58.448,47.363,43.073,50.589,0,95.892,46.093,43.656,35.145,37.616,34.801,47.431,36.243,41.768,35.831,30.854,28.486,28.177,32.124,25.26,26.633],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.034,0.034,0.068,0.068,0.102,0.136,0.136,0.136,0.102,0.102,0.102,0.102,0.171,0.137,0.137,0.137,0.137,0.137,0.103,0.103,0.103,0.172,0.241,0.241,0.241,0.721,0.755,0.755,0.652,0.995,0.995,1.098,1.132,0.652,0.721,0.721,0.79,0.481,0.412,0.378,0.344,0.893,0.79,1.03,1.544,1.51,1.544,1.75,1.75,2.025,4.874,5.767,5.15,5.699,6.489,6.351,9.097,9.2,7.209,7.106,9.165,10.881,10.709,13.283,13.626,16.612,21.108,25.913,30.375,33.91,41.461,48.634,52.443,59.993,64.18,69.431,70.254,75.162,78.079,77.736,79.418,83.331,83.16,86.66,94.829,97.094,106.086,119.574,125.615,121.599,126.678,130.454,133.44,141.986,136.769,134.092,138.485,143.016,144.904,137.387,135.465,130.111,140.613,128.223,119.265,109.552,100.216,98.123,85.287,73.103,50.108,44.96,39.846,37.649,34.629,31.609,31.368,29.274,32.226,35.796,36.002,35.453,36.517,35.35,35.625,38.131,37.548,41.838,43.897,49.869,52.512,58.758,63.46,73.344,77.462,79.864,85.013,91.534,96.819,99.05,102.207,109.758,117.48,122.422,130.453,130.59,139.617,146.515,169.785,171.26,178.914,189.657,191.029,203.041,206.541,215.945,211.449,226.207,233.757,235.336,255.483,258.263,269.452,278.547,290.319,298.831,302.744,306.038,297.732,297.835,298.247,302.572,310.329,304.906,304.837,311.358,327.832,349.695,355.358,381.922,373.341,377.597,381.544,387.928,378.078,376.636,378.935,351.032,363.697,364.589,376.91,383.877,409.24,451.283,478.98,514.88,544.636,551.501,617.603,713.873,718.953,797.411,795.729,857.3,895.602,932.908,943.548,944.509,982.536,911.629,970.627,937.885,1012.945,1047.232,1072.973,998.6,987.926,946.707,836.194,797.103,681.132,677.013,608.68,629.238,631.881,679.003,773.008,810.658,829.363,803.142,813.747,805.064,798.303,779.598,731.686,699.424,666.373,622.58,566.98,495.97,451.559,435.566,436.664,421.666,412.159,429.422,449.774,499.402,505.305,491.576,472.185,457.805,451.113,383.158,417.616,396.852,385.114,361.811,352.064,343.792,340.634,376.877,322.753,312.491,299.689,293.03,283.591,280.914,258.743,249.133],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.005,0.005,0.01,0.01,0.015,0.02,0.02,0.015,0.015,0.01,0.015,0.01,0.02,0.02,0.02,0.02,0.02,0.015,0.015,0,0.015,0.025,0.034,0.034,0.034,0.103,0.108,0.093,0.083,0.132,0.142,0.157,0.093,0.088,0.103,0.103,0.054,0.059,0.044,0.049,0.049,0.113,0.113,0.137,0.206,0.216,0.211,0.25,0.172,0.289,0.662,0.74,0.726,0.809,0.887,0.907,1.182,0.907,0.868,1.02,1.221,1.437,1.51,1.505,1.814,2.25,2.868,3.412,4.006,4.751,5.535,6.506,6.933,7.806,8.335,8.992,9.198,9.566,9.742,10.12,9.708,10.541,10.296,11.336,12.007,12.282,13.792,15.856,15.748,16.033,16.013,16.425,17.2,17.41,16.248,17.067,18.161,18.367,18.077,16.989,16.268,16.459,17.18,15.601,14.768,13.316,12.767,11.654,9.865,6.815,6.021,4.986,4.81,4.378,3.697,3.986,3.903,3.839,4.202,4.408,4.574,4.496,4.398,4.555,4.81,4.682,4.452,5.241,5.781,6.403,6.849,7.859,8.428,9.796,9.541,10.38,10.801,11.978,12.287,12.944,12.552,14.41,14.915,15.724,16.361,16.803,18.082,19.274,21.127,22.093,22.985,24.181,24.995,25.863,26.657,25.868,26.868,28.849,29.285,30.511,32.487,33.252,34.301,35.453,36.027,38.145,38.915,37.733,38.126,37.307,37.116,37.204,37.67,38.454,38.743,39.68,42.411,44.656,44.656,47.431,47.446,48.848,48.77,48.265,46.466,47.696,44.23,44.244,45.46,46.426,47.196,49.094,51.123,58.032,62.508,65.842,71.181,71.368,80.585,92.612,89.362,103.521,102.629,110.508,120.339,116.411,113.396,124.835,115.808,120.079,118.819,116.549,131.772,131.223,131.748,127.129,126.708,116.661,104.291,85.714,79.472,74.658,76.045,75.888,81.733,94.206,100.849,104.218,101.237,102.438,102.404,100.629,98.775,95.147,89.568,85.655,81.698,75.128,68.392,57.438,51.913,52.844,52.03,50.697,51.638,55.477,61.792,64.273,61.876,60.689,59.248,57.218,54.737,45.961,50.108,48.78,46.667,44.921,44.142,41.886,48.662,40.141,39.523,38.405,37.792,36.488,35.542,33.355,31.786,29.624]},{"iso":"NLD","continent":"Europe","population":17134873,"name":"Netherlands","population_density":508.544,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,6,10,18,24,38,82,128,188,265,321,382,503,503,806,962,1138,1416,1711,2058,2467,3003,3640,4217,4764,5580,6438,7468,8647,9819,10930,11817,12667,13696,14788,15821,16727,17953,18926,19709,20682,21903,23249,24571,25746,26710,27580,28316,29383,30619,31766,32838,33588,34317,35032,35921,36729,37384,38040,38440,38612,38998,39512,39989,40434,40769,40968,41286,41518,41973,42292,42581,42826,42987,43183,43410,43680,43880,44070,44195,44341,44449,44647,44900,45088,45265,45437,45647,45780,45970,46152,46328,46460,46645,46749,46852,46939,47148,47358,47541,47780,47945,48109,48294,48458,48668,48847,48990,49155,49295,49412,49527,49634,49710,49801,49866,49930,50012,50122,50213,50282,50355,50433,50483,50545,50623,50698,50761,50834,50870,50907,50959,51013,51055,51136,51237,51308,51362,51471,51572,51682,51809,51955,52142,52307,52475,52640,52837,52984,53278,53424,53647,53895,54249,54590,55021,55408,55786,56279,56750,57465,58117,58717,59360,60058,60391,61718,62406,63127,63889,64468,64980,65560,66218,66843,67456,68051,68570,69224,69683,70382,70984,71557,72128,72679,73232,73802,74660,75356,76173,76907,77857,78702,79792,81085,82016,83370,84709,85876,87194,88673,90425,92262,94345,96261,98217,100491,102844,105304,107899,110758,113518,116559,119509,122620,125988,129283,133166,137194,141226,145837,150413,155465,161332,167348,173894,180288,187138,194591,201942,209799,217821,225970,234203,242217,250411,259207,268517,278546,287229,297466,307831,318152,326308,336629,347801,357640,366351,374663,382440,390120,397112,404392,411107,416806,421503,426227,431696,437376,443533,449501,454961,459837,464205,468900,474641,480649,486820,492293,497501,501503,506557,511162,517045,521639,527336,531930,536129,541238,546982,553040,559716,566628,573750,579997,586643,595473,604452,613630,623567,632085,638801,650072,662943],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.058,0.058,0.35,0.584,1.05,1.401,2.218,4.786,7.47,10.972,15.466,18.734,22.294,29.355,29.355,47.039,56.143,66.414,82.638,99.855,120.106,143.975,175.257,212.432,246.106,278.029,325.652,375.725,435.836,504.643,573.042,637.88,689.646,739.253,799.306,863.035,923.322,976.196,1047.746,1104.531,1150.227,1207.012,1278.27,1356.824,1433.976,1502.55,1558.809,1609.583,1652.536,1714.807,1786.941,1853.88,1916.443,1960.213,2002.758,2044.486,2096.368,2143.523,2181.749,2220.034,2243.378,2253.416,2275.943,2305.941,2333.779,2359.749,2379.3,2390.914,2409.472,2423.012,2449.566,2468.183,2485.049,2499.347,2508.743,2520.182,2533.43,2549.187,2560.859,2571.948,2579.243,2587.764,2594.066,2605.622,2620.387,2631.359,2641.689,2651.727,2663.982,2671.744,2682.833,2693.454,2703.726,2711.429,2722.226,2728.296,2734.307,2739.384,2751.582,2763.837,2774.517,2788.465,2798.095,2807.666,2818.463,2828.034,2840.29,2850.736,2859.082,2868.711,2876.882,2883.71,2890.421,2896.666,2901.101,2906.412,2910.205,2913.94,2918.726,2925.146,2930.457,2934.483,2938.744,2943.296,2946.214,2949.832,2954.384,2958.761,2962.438,2966.698,2968.799,2970.959,2973.993,2977.145,2979.596,2984.323,2990.218,2994.361,2997.513,3003.874,3009.768,3016.188,3023.6,3032.121,3043.034,3052.663,3062.468,3072.097,3083.594,3092.173,3109.331,3117.852,3130.867,3145.34,3166,3185.9,3211.054,3233.639,3255.7,3284.471,3311.959,3353.687,3391.738,3426.754,3464.28,3505.016,3524.45,3601.894,3642.046,3684.124,3728.595,3762.386,3792.266,3826.115,3864.517,3900.992,3936.767,3971.491,4001.78,4039.948,4066.736,4107.53,4142.663,4176.103,4209.427,4241.584,4273.857,4307.123,4357.196,4397.815,4445.495,4488.332,4543.775,4593.089,4656.702,4732.162,4786.496,4865.516,4943.661,5011.768,5088.687,5175.002,5277.25,5384.458,5506.023,5617.841,5731.995,5864.706,6002.029,6145.596,6297.041,6463.894,6624.969,6802.443,6974.607,7156.166,7352.724,7545.022,7771.636,8006.712,8242.022,8511.122,8778.18,9073.017,9415.418,9766.515,10148.543,10521.7,10921.47,11356.431,11785.439,12243.978,12712.146,13187.725,13668.208,14135.909,14614.115,15127.454,15670.79,16256.088,16762.832,17360.269,17965.175,18567.514,19043.503,19645.842,20297.845,20872.054,21380.433,21865.525,22319.395,22767.604,23175.661,23600.525,23992.416,24325.013,24599.132,24874.827,25194.001,25525.488,25884.814,26233.11,26551.758,26836.324,27091.243,27365.245,27700.293,28050.923,28411.066,28730.473,29034.414,29267.973,29562.927,29831.677,30175.012,30443.12,30775.6,31043.708,31288.764,31586.928,31922.151,32275.699,32665.314,33068.701,33484.345,33848.923,34236.787,34752.111,35276.13,35811.762,36391.691,36888.806,37280.755,37938.536,38689.694],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.292,0.233,0.467,0.35,0.817,2.568,2.685,3.502,4.494,3.268,3.56,7.062,0,17.683,9.104,10.271,16.224,17.216,20.251,23.869,31.281,37.176,33.674,31.923,47.622,50.073,60.111,68.807,68.399,64.839,51.766,49.606,60.053,63.73,60.286,52.875,71.55,56.785,45.696,56.785,71.258,78.553,77.153,68.574,56.26,50.774,42.953,62.271,72.134,66.94,62.562,43.77,42.545,41.728,51.882,47.155,38.226,38.284,23.344,10.038,22.527,29.997,27.838,25.97,19.551,11.614,18.559,13.54,26.554,18.617,16.866,14.298,9.396,11.439,13.248,15.757,11.672,11.088,7.295,8.521,6.303,11.555,14.765,10.972,10.33,10.038,12.256,7.762,11.088,10.622,10.271,7.704,10.797,6.069,6.011,5.077,12.197,12.256,10.68,13.948,9.629,9.571,10.797,9.571,12.256,10.447,8.346,9.629,8.17,6.828,6.711,6.245,4.435,5.311,3.793,3.735,4.786,6.42,5.311,4.027,4.26,4.552,2.918,3.618,4.552,4.377,3.677,4.26,2.101,2.159,3.035,3.151,2.451,4.727,5.894,4.144,3.151,6.361,5.894,6.42,7.412,8.521,10.913,9.629,9.805,9.629,11.497,8.579,17.158,8.521,13.014,14.473,20.66,19.901,25.153,22.586,22.06,28.772,27.488,41.728,38.051,35.016,37.526,40.736,19.434,77.444,40.152,42.078,44.471,33.791,29.881,33.849,38.401,36.475,35.775,34.725,30.289,38.168,26.787,40.794,35.133,33.441,33.324,32.157,32.273,33.265,50.073,40.619,47.681,42.837,55.442,49.315,63.613,75.46,54.334,79.02,78.145,68.107,76.919,86.315,102.248,107.208,121.565,111.819,114.153,132.712,137.322,143.567,151.446,166.853,161.075,177.474,172.164,181.56,196.558,192.298,226.614,235.076,235.31,269.1,267.058,294.837,342.401,351.097,382.028,373.157,399.77,434.961,429.008,458.539,468.168,475.58,480.482,467.701,478.206,513.339,543.336,585.298,506.744,597.437,604.907,602.339,475.988,602.339,652.004,574.209,508.378,485.093,453.87,448.209,408.057,424.865,391.891,332.597,274.119,275.695,319.174,331.488,359.326,348.296,318.648,284.566,254.919,274.003,335.048,350.63,360.143,319.407,303.942,233.559,294.954,268.75,343.335,268.108,332.48,268.108,245.056,298.164,335.223,353.548,389.615,403.388,415.644,364.578,387.864,515.323,524.019,535.633,579.928,497.115,391.949,657.781,751.158],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.292,0.525,0.992,1.342,2.159,4.727,7.412,10.914,15.116,18.151,21.244,27.956,27.139,42.254,48.673,55.442,67.172,81.12,97.811,114.618,145.899,165.392,189.962,211.614,243.012,275.869,315.729,360.667,397.785,425.448,443.54,461.223,473.654,487.311,487.486,471.554,474.705,466.651,460.581,467.76,478.965,493.788,510.655,526.354,511.064,505.053,502.31,507.796,508.672,497.059,482.468,457.664,443.949,434.903,443.832,428.716,394.808,366.152,326.934,293.202,273.184,261.453,237.409,216.224,197.549,170.879,166.094,169.596,173.623,162.243,151.271,139.599,129.444,129.269,123.958,126.175,111.293,103.764,94.193,88.416,85.323,85.439,86.956,82.171,80.829,79.779,84.74,83.981,88.766,87.833,83.339,80.071,80.538,76.569,70.324,67.639,68.748,70.382,70.791,77.035,75.867,79.369,84.155,88.649,88.708,86.899,84.565,80.246,78.787,76.044,71.958,68.632,60.811,55.675,51.122,45.228,41.844,41.436,40.036,37.818,37.643,36.884,36.009,35.892,35.658,33.615,31.981,32.214,30.055,27.662,27.779,27.312,25.211,25.561,27.778,27.662,28.712,32.914,35.773,39.042,44.003,47.797,52.816,58.301,64.955,68.223,73.826,75.985,85.731,85.731,87.832,92.676,103.531,113.803,127.459,141.466,146.368,166.619,181.093,208.348,225.739,240.854,253.227,271.377,268.751,317.423,330.087,330.437,336.857,335.632,327.987,321.1,340.067,299.098,294.721,287.368,273.186,277.563,274.469,281.414,278.146,275.112,272.661,270.093,272.077,267.174,290.46,290.285,302.833,312.229,334.347,351.505,382.845,425.04,429.301,467.702,498.166,523.436,544.913,581.913,620.548,652.296,719.527,752.326,788.334,852.939,913.342,970.594,1019.792,1079.437,1118.947,1184.602,1242.613,1291.461,1350.697,1399.428,1474.596,1542.819,1617.054,1708.68,1803.574,1916.851,2062.694,2221.493,2376.907,2514.988,2679.448,2845.309,3007.259,3170.961,3296.728,3421.211,3519.665,3614.209,3692.645,3771.023,3885.351,4012.11,4050.686,4172.543,4296.968,4431.606,4429.388,4518.388,4627.056,4615.967,4617.601,4505.257,4354.22,4200.09,4132.159,3954.685,3694.572,3452.96,3218.701,3009.303,2874.607,2757.886,2709.155,2632.586,2559.343,2511.312,2492.112,2490.42,2506.294,2525.436,2526.253,2497.364,2482.658,2431.651,2471.686,2466.433,2474.72,2392.198,2364.535,2313.236,2254.35,2318.955,2359.224,2444.022,2490.302,2625.582,2708.746,2805.216,2948.024,3165.183,3353.979,3536.064,3726.377,3820.104,3796.409,4089.612,4452.906],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.308,0.675,1.059,1.517,2.126,2.526,2.985,3.877,3.51,5.653,6.453,7.278,9.129,11.08,12.964,16.374,18.317,22.327,25.67,27.913,32.257,36.517,41.694,47.055,51.516,55.968,58.802,59.086,60.512,61.028,59.811,57.593,58.552,59.269,58.711,58.244,59.319,61.929,65.397,64.972,64.897,65.622,63.646,62.362,61.445,59.986,59.128,57.343,56.168,55.993,54.509,50.94,46.838,43.37,40.452,35.808,33.065,29.939,27.179,25.429,22.752,21.076,22.294,21.01,20.518,19.201,17.9,17.15,16.833,15.816,15.774,14.232,13.239,12.414,11.414,11.289,10.555,10.313,10.171,10.071,9.963,10.355,10.888,11.097,11.03,10.438,10.338,9.963,10.071,9.188,8.937,8.079,8.304,8.587,9.013,9.463,9.971,10.48,11.297,10.922,10.922,10.888,10.088,10.088,9.888,9.321,8.912,8.054,7.195,6.761,5.928,5.294,5.002,4.961,4.827,4.769,4.619,4.727,4.61,4.444,4.177,4.044,3.994,3.994,3.643,3.535,3.452,3.252,2.976,3.126,3.36,3.652,3.793,4.269,4.661,5.227,5.611,5.986,6.953,7.879,8.371,8.904,9.629,9.796,11.03,10.688,11.172,11.839,13.415,14.615,16.983,17.758,19.693,21.944,23.803,26.812,29.405,30.814,32.949,35.617,34.283,41.419,41.194,41.769,43.12,42.587,41.036,43.095,37.517,36.992,36.092,34.699,34.199,35.383,34.374,34.716,34.524,34.191,33.991,34.258,33.416,34.341,35.667,36.45,38.485,39.844,43.17,45.605,49.94,53.567,55.526,60.003,65.047,66.856,70.8,74.043,77.87,85.423,91.501,96.312,102.89,110.86,118.147,124.049,130.369,136.839,143.875,152.921,158.557,164.877,172.447,178.283,186.82,197.392,205.654,219.502,231.716,245.756,267.199,284.983,305.976,325.668,344.335,368.322,387.489,404.08,420.804,434.169,449.501,459.206,465.383,477.431,489.545,506.277,510.73,527.437,547.038,564.771,559.436,567.864,577.394,587.032,574.309,557.193,535.983,532.014,504.26,471.811,445.766,420.654,390.515,365.062,346.628,335.69,326.327,320.099,318.106,319.599,316.631,310.178,310.686,309.444,311.137,311.245,314.013,310.961,313.955,304.483,303.441,290.294,292.161,287.042,288.684,289.143,298.639,300.098,317.456,327.586,348.662,365.737,378.551,404.28,428.633,449.493,474.713,486.352,490.262,528.821,562.512]},{"iso":"NZL","continent":"Oceania","population":4822233,"name":"New Zealand","population_density":18.206,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,3,3,4,5,5,5,5,5,5,5,6,8,8,12,20,28,39,52,102,102,155,205,283,368,451,514,589,647,708,797,868,950,1039,1106,1160,1210,1239,1283,1312,1330,1349,1366,1386,1401,1409,1422,1431,1440,1445,1451,1456,1461,1470,1469,1472,1474,1476,1479,1485,1487,1487,1486,1488,1489,1490,1492,1494,1497,1497,1497,1497,1498,1498,1499,1499,1499,1503,1503,1504,1504,1504,1504,1504,1504,1504,1504,1504,1504,1504,1504,1504,1504,1504,1504,1504,1504,1504,1504,1504,1504,1504,1504,1504,1506,1506,1507,1507,1509,1511,1513,1515,1516,1519,1520,1522,1526,1528,1528,1528,1530,1530,1530,1533,1534,1536,1537,1540,1542,1543,1544,1544,1545,1547,1548,1549,1550,1553,1554,1555,1555,1555,1556,1556,1556,1556,1557,1559,1560,1560,1562,1565,1567,1567,1569,1569,1569,1569,1569,1569,1570,1570,1589,1602,1609,1622,1631,1643,1649,1654,1665,1671,1674,1683,1690,1695,1702,1714,1727,1729,1738,1752,1757,1759,1764,1767,1772,1776,1782,1788,1792,1793,1795,1797,1798,1801,1802,1809,1809,1811,1815,1815,1815,1824,1827,1829,1831,1833,1833,1835,1836,1848,1848,1849,1854,1855,1858,1861,1864,1866,1870,1871,1871,1872,1874,1876,1880,1883,1886,1886,1887,1912,1914,1923,1934,1935,1940,1941,1943,1949,1950,1957,1959,1963,1968,1971,1973,1974,1976,1982,1986,1987,1988,1991,1995,1998,2001,2001,2005,2008,2010,2013,2019,2028,2030,2031,2039,2040,2047,2050,2050,2056,2059,2060,2069,2069,2078,2078,2079,2085,2088,2088,2092,2092,2096,2096,2096,2100,2100,2110],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.207,0.207,0.207,0.207,0.207,0.622,0.622,0.829,1.037,1.037,1.037,1.037,1.037,1.037,1.037,1.244,1.659,1.659,2.488,4.147,5.806,8.088,10.783,21.152,21.152,32.143,42.511,58.687,76.313,93.525,106.59,122.143,134.17,146.82,165.276,180,197.004,215.46,229.354,240.552,250.921,256.935,266.059,272.073,275.806,279.746,283.271,287.419,290.529,292.188,294.884,296.75,298.617,299.654,300.898,301.935,302.972,304.838,304.631,305.253,305.668,306.082,306.704,307.949,308.363,308.363,308.156,308.571,308.778,308.985,309.4,309.815,310.437,310.437,310.437,310.437,310.644,310.644,310.852,310.852,310.852,311.681,311.681,311.889,311.889,311.889,311.889,311.889,311.889,311.889,311.889,311.889,311.889,311.889,311.889,311.889,311.889,311.889,311.889,311.889,311.889,311.889,311.889,311.889,311.889,311.889,311.889,311.889,312.303,312.303,312.511,312.511,312.926,313.34,313.755,314.17,314.377,314.999,315.207,315.621,316.451,316.866,316.866,316.866,317.28,317.28,317.28,317.903,318.11,318.525,318.732,319.354,319.769,319.976,320.184,320.184,320.391,320.806,321.013,321.22,321.428,322.05,322.257,322.465,322.465,322.465,322.672,322.672,322.672,322.672,322.879,323.294,323.502,323.502,323.916,324.538,324.953,324.953,325.368,325.368,325.368,325.368,325.368,325.368,325.575,325.575,329.515,332.211,333.663,336.359,338.225,340.714,341.958,342.995,345.276,346.52,347.142,349.008,350.46,351.497,352.949,355.437,358.133,358.548,360.414,363.317,364.354,364.769,365.806,366.428,367.465,368.294,369.538,370.783,371.612,371.819,372.234,372.649,372.856,373.478,373.686,375.137,375.137,375.552,376.382,376.382,376.382,378.248,378.87,379.285,379.7,380.114,380.114,380.529,380.736,383.225,383.225,383.432,384.469,384.677,385.299,385.921,386.543,386.958,387.787,387.995,387.995,388.202,388.617,389.031,389.861,390.483,391.105,391.105,391.312,396.497,396.912,398.778,401.059,401.266,402.303,402.511,402.925,404.17,404.377,405.829,406.243,407.073,408.11,408.732,409.147,409.354,409.769,411.013,411.842,412.05,412.257,412.879,413.709,414.331,414.953,414.953,415.782,416.405,416.819,417.441,418.686,420.552,420.967,421.174,422.833,423.041,424.492,425.114,425.114,426.358,426.981,427.188,429.054,429.054,430.921,430.921,431.128,432.372,432.994,432.994,433.824,433.824,434.653,434.653,434.653,435.483,435.483,437.557],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.415,0,0.207,0.207,0,0,0,0,0,0,0.207,0.415,0,0.829,1.659,1.659,2.281,2.696,10.369,0,10.991,10.369,16.175,17.627,17.212,13.064,15.553,12.028,12.65,18.456,14.723,17.005,18.456,13.894,11.198,10.369,6.014,9.124,6.014,3.733,3.94,3.525,4.147,3.111,1.659,2.696,1.866,1.866,1.037,1.244,1.037,1.037,1.866,-0.207,0.622,0.415,0.415,0.622,1.244,0.415,0,-0.207,0.415,0.207,0.207,0.415,0.415,0.622,0,0,0,0.207,0,0.207,0,0,0.829,0,0.207,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.415,0,0.207,0,0.415,0.415,0.415,0.415,0.207,0.622,0.207,0.415,0.829,0.415,0,0,0.415,0,0,0.622,0.207,0.415,0.207,0.622,0.415,0.207,0.207,0,0.207,0.415,0.207,0.207,0.207,0.622,0.207,0.207,0,0,0.207,0,0,0,0.207,0.415,0.207,0,0.415,0.622,0.415,0,0.415,0,0,0,0,0,0.207,0,3.94,2.696,1.452,2.696,1.866,2.488,1.244,1.037,2.281,1.244,0.622,1.866,1.452,1.037,1.452,2.488,2.696,0.415,1.866,2.903,1.037,0.415,1.037,0.622,1.037,0.829,1.244,1.244,0.829,0.207,0.415,0.415,0.207,0.622,0.207,1.452,0,0.415,0.829,0,0,1.866,0.622,0.415,0.415,0.415,0,0.415,0.207,2.488,0,0.207,1.037,0.207,0.622,0.622,0.622,0.415,0.829,0.207,0,0.207,0.415,0.415,0.829,0.622,0.622,0,0.207,5.184,0.415,1.866,2.281,0.207,1.037,0.207,0.415,1.244,0.207,1.452,0.415,0.829,1.037,0.622,0.415,0.207,0.415,1.244,0.829,0.207,0.207,0.622,0.829,0.622,0.622,0,0.829,0.622,0.415,0.622,1.244,1.866,0.415,0.207,1.659,0.207,1.452,0.622,0,1.244,0.622,0.207,1.866,0,1.866,0,0.207,1.244,0.622,0,0.829,0,0.829,0,0,0.829,0,2.074],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.415,0.415,0.622,0.829,0.829,0.829,0.829,0.829,0.414,0.414,0.414,0.622,0.622,1.451,3.11,4.769,7.05,9.746,19.908,19.493,30.484,40.024,54.54,70.508,85.439,95.807,100.991,113.019,114.678,122.765,121.313,120.691,121.935,122.765,118.41,116.751,110.115,100.783,92.074,78.802,64.286,53.917,46.866,39.608,35.253,28.825,24.677,22.81,19.907,17.626,14.516,12.442,12.649,9.746,8.502,7.051,6.429,5.807,6.014,5.392,3.526,3.526,3.319,3.111,2.903,2.696,1.867,2.074,2.074,2.281,1.866,1.866,1.659,1.451,1.036,0.414,1.243,1.243,1.45,1.243,1.243,1.036,1.036,1.036,0.207,0.207,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.415,0.415,0.622,0.622,1.037,1.452,1.867,2.282,2.074,2.696,2.696,3.111,3.525,3.525,3.11,2.695,2.903,2.281,2.074,2.281,1.659,1.659,1.866,2.488,2.488,2.695,2.902,2.28,2.28,2.28,2.28,1.865,1.657,2.072,2.072,2.279,2.072,1.657,1.657,1.45,1.243,0.621,0.621,0.829,1.036,1.036,1.244,1.866,2.281,2.281,2.489,2.074,1.867,1.867,1.452,0.83,0.622,0.622,4.147,6.843,8.295,10.991,12.857,15.345,16.382,17.419,15.76,14.308,13.478,12.648,12.234,10.783,10.991,12.442,12.857,12.028,13.272,14.309,13.894,13.272,12.857,10.991,9.332,9.746,9.124,7.465,7.257,7.049,6.427,6.22,5.39,5.183,4.146,4.354,3.525,3.733,4.147,3.732,3.525,4.769,5.184,4.147,4.562,4.562,3.733,4.148,4.355,4.977,4.355,4.147,4.769,4.561,5.183,5.39,5.805,3.732,4.561,4.561,3.524,3.524,3.317,3.11,3.317,3.524,3.317,3.11,3.317,8.294,8.294,9.745,11.197,10.782,11.197,11.404,11.612,7.672,7.464,7.05,5.184,5.806,5.806,6.221,6.221,5.184,5.392,5.184,5.598,4.976,4.146,4.146,4.56,4.975,5.182,3.938,3.938,4.353,4.561,4.561,4.976,6.22,6.013,6.22,7.05,6.635,7.672,7.672,6.428,5.806,6.013,6.013,6.22,6.013,6.427,5.805,6.012,6.012,6.012,5.805,4.768,4.768,3.731,3.731,3.524,3.109,2.487,4.561],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.059,0.089,0.118,0.118,0.118,0.118,0.059,0.059,0.03,0.03,0.089,0.089,0.207,0.444,0.681,1.007,1.363,2.785,2.785,4.236,5.481,7.554,9.747,11.82,12.205,14.427,14.575,14.901,15.227,14.812,14.783,15.553,15.316,15.197,14.872,13.094,12.294,10.724,8.621,7.199,6.103,5.214,4.799,3.733,3.259,2.992,2.696,2.34,1.926,1.629,1.54,1.422,1.126,0.948,0.859,0.741,0.681,0.711,0.504,0.533,0.415,0.415,0.385,0.326,0.207,0.207,0.296,0.326,0.267,0.237,0.237,0.178,0.148,0.059,0.059,0.178,0.178,0.178,0.178,0.148,0.148,0.148,0.03,0.03,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.059,0.059,0.089,0.089,0.148,0.207,0.267,0.267,0.296,0.355,0.385,0.385,0.444,0.444,0.385,0.355,0.326,0.296,0.237,0.207,0.178,0.237,0.267,0.296,0.355,0.385,0.326,0.296,0.267,0.296,0.237,0.207,0.207,0.267,0.296,0.296,0.237,0.207,0.207,0.178,0.089,0.059,0.059,0.118,0.148,0.118,0.178,0.267,0.326,0.296,0.296,0.267,0.267,0.207,0.118,0.059,0.089,0.03,0.592,0.978,1.185,1.57,1.837,2.163,2.34,1.926,1.866,1.837,1.54,1.54,1.392,1.363,1.422,1.452,1.659,1.629,1.629,1.837,1.837,1.689,1.481,1.185,1.274,1.126,0.889,0.918,0.978,0.859,0.829,0.741,0.652,0.563,0.415,0.504,0.474,0.474,0.533,0.504,0.415,0.652,0.533,0.592,0.592,0.533,0.533,0.592,0.355,0.622,0.563,0.533,0.622,0.652,0.681,0.741,0.474,0.533,0.622,0.504,0.474,0.415,0.385,0.355,0.415,0.385,0.444,0.444,0.444,1.126,1.126,1.274,1.511,1.452,1.6,1.6,0.918,1.037,0.8,0.681,0.711,0.681,0.8,0.829,0.711,0.711,0.563,0.681,0.681,0.563,0.504,0.533,0.622,0.652,0.563,0.444,0.533,0.592,0.563,0.533,0.622,0.8,0.859,0.77,0.918,0.889,1.007,0.918,0.652,0.77,0.829,0.622,0.859,0.652,0.829,0.829,0.681,0.77,0.829,0.563,0.681,0.415,0.533,0.504,0.326,0.355,0.355,0.533]},{"iso":"NIC","continent":"North America","population":6624554,"name":"Nicaragua","population_density":51.667,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,2,2,2,2,2,2,4,4,4,5,5,5,5,5,6,6,6,6,7,7,8,9,9,9,9,9,9,9,10,10,10,10,11,11,12,13,13,13,13,14,14,14,15,15,16,16,16,16,16,16,16,25,25,25,25,25,25,25,254,254,279,279,279,279,279,759,759,759,759,759,759,759,1118,1118,1118,1118,1118,1118,1118,1464,1464,1464,1464,1464,1464,1464,1823,1823,1823,1823,1823,1823,1823,2170,2170,2170,2170,2170,2170,2170,2519,2519,2519,2519,2519,2519,2519,2846,2846,2846,2846,2846,2846,2846,3147,3147,3147,3147,3147,3147,3147,3439,3439,3439,3439,3439,3439,3439,3672,3672,3672,3672,3672,3672,3672,3902,3902,3902,3902,3902,3902,3902,4115,4115,4115,4115,4115,4115,4115,4311,4311,4311,4311,4311,4311,4311,4494,4494,4494,4494,4494,4494,4494,4668,4668,4668,4668,4668,4668,4668,4818,4818,4818,4818,4818,4818,4818,4961,4961,4961,4961,4961,4961,4961,5073,5073,5073,5073,5073,5073,5073,5170,5170,5170,5170,5170,5170,5170,5264,5264,5264,5264,5264,5264,5264,5353,5353,5353,5353,5353,5353,5353,5434,5434,5434,5434,5434,5434,5434,5514,5514,5514,5514,5514,5514,5514,5514,5514,5591,5591,5591,5591,5591,5661,5661,5661,5661,5661,5661,5661,5725,5725,5725,5725,5725,5725,5725,5784,5784,5784,5784,5784,5784,5784,5838,5838,5838,5838,5838,5838,5838,5887,5887,5887,5887,5887,5887,5887,5887,5938,5938],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.151,0.151,0.302,0.302,0.302,0.302,0.302,0.302,0.302,0.604,0.604,0.604,0.755,0.755,0.755,0.755,0.755,0.906,0.906,0.906,0.906,1.057,1.057,1.208,1.359,1.359,1.359,1.359,1.359,1.359,1.359,1.51,1.51,1.51,1.51,1.66,1.66,1.811,1.962,1.962,1.962,1.962,2.113,2.113,2.113,2.264,2.264,2.415,2.415,2.415,2.415,2.415,2.415,2.415,3.774,3.774,3.774,3.774,3.774,3.774,3.774,38.342,38.342,42.116,42.116,42.116,42.116,42.116,114.574,114.574,114.574,114.574,114.574,114.574,114.574,168.766,168.766,168.766,168.766,168.766,168.766,168.766,220.996,220.996,220.996,220.996,220.996,220.996,220.996,275.188,275.188,275.188,275.188,275.188,275.188,275.188,327.569,327.569,327.569,327.569,327.569,327.569,327.569,380.252,380.252,380.252,380.252,380.252,380.252,380.252,429.614,429.614,429.614,429.614,429.614,429.614,429.614,475.051,475.051,475.051,475.051,475.051,475.051,475.051,519.129,519.129,519.129,519.129,519.129,519.129,519.129,554.301,554.301,554.301,554.301,554.301,554.301,554.301,589.021,589.021,589.021,589.021,589.021,589.021,589.021,621.174,621.174,621.174,621.174,621.174,621.174,621.174,650.761,650.761,650.761,650.761,650.761,650.761,650.761,678.385,678.385,678.385,678.385,678.385,678.385,678.385,704.651,704.651,704.651,704.651,704.651,704.651,704.651,727.294,727.294,727.294,727.294,727.294,727.294,727.294,748.881,748.881,748.881,748.881,748.881,748.881,748.881,765.787,765.787,765.787,765.787,765.787,765.787,765.787,780.43,780.43,780.43,780.43,780.43,780.43,780.43,794.62,794.62,794.62,794.62,794.62,794.62,794.62,808.054,808.054,808.054,808.054,808.054,808.054,808.054,820.282,820.282,820.282,820.282,820.282,820.282,820.282,832.358,832.358,832.358,832.358,832.358,832.358,832.358,832.358,832.358,843.981,843.981,843.981,843.981,843.981,854.548,854.548,854.548,854.548,854.548,854.548,854.548,864.209,864.209,864.209,864.209,864.209,864.209,864.209,873.115,873.115,873.115,873.115,873.115,873.115,873.115,881.267,881.267,881.267,881.267,881.267,881.267,881.267,888.664,888.664,888.664,888.664,888.664,888.664,888.664,888.664,896.362,896.362],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.151,0,0,0,0,0,0,0.302,0,0,0.151,0,0,0,0,0.151,0,0,0,0.151,0,0.151,0.151,0,0,0,0,0,0,0.151,0,0,0,0.151,0,0.151,0.151,0,0,0,0.151,0,0,0.151,0,0.151,0,0,0,0,0,0,1.359,0,0,0,0,0,0,34.568,0,3.774,0,0,0,0,72.458,0,0,0,0,0,0,54.192,0,0,0,0,0,0,52.23,0,0,0,0,0,0,54.192,0,0,0,0,0,0,52.381,0,0,0,0,0,0,52.683,0,0,0,0,0,0,49.362,0,0,0,0,0,0,45.437,0,0,0,0,0,0,44.078,0,0,0,0,0,0,35.172,0,0,0,0,0,0,34.719,0,0,0,0,0,0,32.153,0,0,0,0,0,0,29.587,0,0,0,0,0,0,27.625,0,0,0,0,0,0,26.266,0,0,0,0,0,0,22.643,0,0,0,0,0,0,21.586,0,0,0,0,0,0,16.907,0,0,0,0,0,0,14.642,0,0,0,0,0,0,14.19,0,0,0,0,0,0,13.435,0,0,0,0,0,0,12.227,0,0,0,0,0,0,12.076,0,0,0,0,0,0,0,0,11.623,0,0,0,0,10.567,0,0,0,0,0,0,9.661,0,0,0,0,0,0,8.906,0,0,0,0,0,0,8.151,0,0,0,0,0,0,7.397,0,0,0,0,0,0,0,7.699,0],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.151,0.151,0.151,0.151,0.151,0.151,0.151,0.453,0.302,0.302,0.453,0.453,0.453,0.453,0.453,0.302,0.302,0.302,0.151,0.302,0.302,0.453,0.604,0.453,0.453,0.453,0.453,0.302,0.302,0.302,0.151,0.151,0.151,0.302,0.302,0.453,0.604,0.453,0.453,0.453,0.604,0.453,0.453,0.453,0.302,0.453,0.453,0.453,0.302,0.302,0.302,0.151,1.51,1.359,1.359,1.359,1.359,1.359,1.359,35.927,34.568,38.342,38.342,38.342,38.342,38.342,110.8,76.232,76.232,72.458,72.458,72.458,72.458,126.65,54.192,54.192,54.192,54.192,54.192,54.192,106.422,52.23,52.23,52.23,52.23,52.23,52.23,106.422,54.192,54.192,54.192,54.192,54.192,54.192,106.573,52.381,52.381,52.381,52.381,52.381,52.381,105.064,52.683,52.683,52.683,52.683,52.683,52.683,102.045,49.362,49.362,49.362,49.362,49.362,49.362,94.799,45.437,45.437,45.437,45.437,45.437,45.437,89.515,44.078,44.078,44.078,44.078,44.078,44.078,79.25,35.172,35.172,35.172,35.172,35.172,35.172,69.891,34.719,34.719,34.719,34.719,34.719,34.719,66.872,32.153,32.153,32.153,32.153,32.153,32.153,61.74,29.587,29.587,29.587,29.587,29.587,29.587,57.212,27.625,27.625,27.625,27.625,27.625,27.625,53.891,26.266,26.266,26.266,26.266,26.266,26.266,48.909,22.643,22.643,22.643,22.643,22.643,22.643,44.229,21.586,21.586,21.586,21.586,21.586,21.586,38.493,16.907,16.907,16.907,16.907,16.907,16.907,31.549,14.642,14.642,14.642,14.642,14.642,14.642,28.832,14.19,14.19,14.19,14.19,14.19,14.19,27.625,13.435,13.435,13.435,13.435,13.435,13.435,25.662,12.227,12.227,12.227,12.227,12.227,12.227,24.303,12.076,12.076,12.076,12.076,12.076,12.076,12.076,0,11.623,11.623,11.623,11.623,11.623,22.19,22.19,22.19,10.567,10.567,10.567,10.567,20.228,9.661,9.661,9.661,9.661,9.661,9.661,18.567,8.906,8.906,8.906,8.906,8.906,8.906,17.057,8.151,8.151,8.151,8.151,8.151,8.151,15.548,7.397,7.397,7.397,7.397,7.397,7.397,7.397,7.699,7.699],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.022,0.022,0.022,0.043,0.043,0.043,0.065,0.065,0.065,0.065,0.022,0.043,0.043,0.022,0.022,0.043,0.043,0.065,0.065,0.065,0.065,0.065,0.043,0.043,0.022,0.022,0.022,0.022,0.022,0.043,0.043,0.065,0.065,0.065,0.065,0.065,0.065,0.065,0.043,0.043,0.043,0.065,0.065,0.043,0.043,0.043,0.022,0.022,0.194,0.194,0.194,0.194,0.194,0.194,0.194,4.938,4.938,5.477,5.477,5.477,5.477,5.477,10.89,10.89,10.351,10.351,10.351,10.351,10.351,7.742,7.742,7.742,7.742,7.742,7.742,7.742,7.461,7.461,7.461,7.461,7.461,7.461,7.461,7.742,7.742,7.742,7.742,7.742,7.742,7.742,7.483,7.483,7.483,7.483,7.483,7.483,7.483,7.526,7.526,7.526,7.526,7.526,7.526,7.526,7.052,7.052,7.052,7.052,7.052,7.052,7.052,6.491,6.491,6.491,6.491,6.491,6.491,6.491,6.297,6.297,6.297,6.297,6.297,6.297,6.297,5.025,5.025,5.025,5.025,5.025,5.025,5.025,4.96,4.96,4.96,4.96,4.96,4.96,4.96,4.593,4.593,4.593,4.593,4.593,4.593,4.593,4.227,4.227,4.227,4.227,4.227,4.227,4.227,3.946,3.946,3.946,3.946,3.946,3.946,3.946,3.752,3.752,3.752,3.752,3.752,3.752,3.752,3.235,3.235,3.235,3.235,3.235,3.235,3.235,3.084,3.084,3.084,3.084,3.084,3.084,3.084,2.415,2.415,2.415,2.415,2.415,2.415,2.415,2.092,2.092,2.092,2.092,2.092,2.092,2.092,2.027,2.027,2.027,2.027,2.027,2.027,2.027,1.919,1.919,1.919,1.919,1.919,1.919,1.919,1.747,1.747,1.747,1.747,1.747,1.747,1.747,1.725,1.725,1.725,1.725,1.725,1.725,1.725,0,0,1.66,1.66,1.66,1.66,1.66,3.17,3.17,1.51,1.51,1.51,1.51,1.51,1.38,1.38,1.38,1.38,1.38,1.38,1.38,1.272,1.272,1.272,1.272,1.272,1.272,1.272,1.164,1.164,1.164,1.164,1.164,1.164,1.164,1.057,1.057,1.057,1.057,1.057,1.057,1.057,0,1.1,1.1]},{"iso":"NER","continent":"Africa","population":24206636,"name":"Niger","population_density":16.955,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,3,3,7,10,10,10,18,27,27,74,98,120,144,184,253,278,342,410,438,491,529,529,570,584,584,627,639,648,648,657,662,671,681,684,696,701,709,713,719,728,736,750,755,763,770,781,795,815,821,832,854,860,876,885,889,904,909,914,920,924,937,943,945,951,952,952,955,955,956,958,958,960,961,963,966,970,973,973,974,974,974,978,980,980,980,1016,1020,1020,1020,1035,1036,1046,1051,1051,1056,1059,1062,1074,1075,1075,1075,1081,1082,1082,1088,1093,1094,1097,1097,1099,1099,1099,1099,1099,1100,1102,1102,1104,1104,1105,1113,1122,1124,1124,1124,1136,1132,1132,1132,1134,1134,1136,1147,1152,1152,1152,1153,1153,1157,1158,1158,1158,1161,1161,1161,1165,1167,1167,1167,1167,1169,1172,1172,1172,1172,1173,1173,1173,1175,1175,1175,1176,1176,1176,1177,1177,1177,1177,1177,1178,1178,1178,1178,1178,1180,1180,1182,1182,1183,1183,1183,1188,1189,1193,1193,1194,1194,1194,1196,1196,1196,1197,1197,1198,1200,1200,1200,1200,1200,1201,1201,1201,1201,1202,1203,1205,1207,1209,1209,1210,1211,1212,1214,1215,1215,1215,1215,1215,1218,1218,1219,1220,1220,1221,1222,1222,1225,1226,1230,1242,1243,1246,1256,1263,1282,1289,1301,1307,1316,1327,1331,1335,1340,1351,1368,1381,1406,1419,1443,1472,1484,1516,1548,1586,1640,1640,1726,1789,1856,1894,1987,2078,2126,2160,2199,2258,2322,2361,2361,2506],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.041,0.041,0.083,0.124,0.124,0.289,0.413,0.413,0.413,0.744,1.115,1.115,3.057,4.048,4.957,5.949,7.601,10.452,11.484,14.128,16.938,18.094,20.284,21.854,21.854,23.547,24.126,24.126,25.902,26.398,26.77,26.77,27.141,27.348,27.72,28.133,28.257,28.752,28.959,29.289,29.455,29.703,30.074,30.405,30.983,31.19,31.52,31.809,32.264,32.842,33.668,33.916,34.371,35.28,35.527,36.188,36.56,36.725,37.345,37.552,37.758,38.006,38.171,38.708,38.956,39.039,39.287,39.328,39.328,39.452,39.452,39.493,39.576,39.576,39.659,39.7,39.782,39.906,40.072,40.196,40.196,40.237,40.237,40.237,40.402,40.485,40.485,40.485,41.972,42.137,42.137,42.137,42.757,42.798,43.211,43.418,43.418,43.624,43.748,43.872,44.368,44.409,44.409,44.409,44.657,44.698,44.698,44.946,45.153,45.194,45.318,45.318,45.401,45.401,45.401,45.401,45.401,45.442,45.525,45.525,45.607,45.607,45.649,45.979,46.351,46.434,46.434,46.434,46.929,46.764,46.764,46.764,46.847,46.847,46.929,47.384,47.59,47.59,47.59,47.632,47.632,47.797,47.838,47.838,47.838,47.962,47.962,47.962,48.127,48.21,48.21,48.21,48.21,48.293,48.416,48.416,48.416,48.416,48.458,48.458,48.458,48.54,48.54,48.54,48.582,48.582,48.582,48.623,48.623,48.623,48.623,48.623,48.664,48.664,48.664,48.664,48.664,48.747,48.747,48.83,48.83,48.871,48.871,48.871,49.077,49.119,49.284,49.284,49.325,49.325,49.325,49.408,49.408,49.408,49.449,49.449,49.491,49.573,49.573,49.573,49.573,49.573,49.614,49.614,49.614,49.614,49.656,49.697,49.78,49.862,49.945,49.945,49.986,50.028,50.069,50.152,50.193,50.193,50.193,50.193,50.193,50.317,50.317,50.358,50.399,50.399,50.441,50.482,50.482,50.606,50.647,50.813,51.308,51.35,51.473,51.887,52.176,52.961,53.25,53.746,53.993,54.365,54.82,54.985,55.15,55.357,55.811,56.513,57.05,58.083,58.62,59.612,60.81,61.306,62.627,63.949,65.519,67.75,67.75,71.303,73.905,76.673,78.243,82.085,85.844,87.827,89.232,90.843,93.28,95.924,97.535,97.535,103.525],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.041,0.041,0,0.165,0.124,0,0,0.33,0.372,0,1.942,0.991,0.909,0.991,1.652,2.85,1.033,2.644,2.809,1.157,2.189,1.57,0,1.694,0.578,0,1.776,0.496,0.372,0,0.372,0.207,0.372,0.413,0.124,0.496,0.207,0.33,0.165,0.248,0.372,0.33,0.578,0.207,0.33,0.289,0.454,0.578,0.826,0.248,0.454,0.909,0.248,0.661,0.372,0.165,0.62,0.207,0.207,0.248,0.165,0.537,0.248,0.083,0.248,0.041,0,0.124,0,0.041,0.083,0,0.083,0.041,0.083,0.124,0.165,0.124,0,0.041,0,0,0.165,0.083,0,0,1.487,0.165,0,0,0.62,0.041,0.413,0.207,0,0.207,0.124,0.124,0.496,0.041,0,0,0.248,0.041,0,0.248,0.207,0.041,0.124,0,0.083,0,0,0,0,0.041,0.083,0,0.083,0,0.041,0.33,0.372,0.083,0,0,0.496,-0.165,0,0,0.083,0,0.083,0.454,0.207,0,0,0.041,0,0.165,0.041,0,0,0.124,0,0,0.165,0.083,0,0,0,0.083,0.124,0,0,0,0.041,0,0,0.083,0,0,0.041,0,0,0.041,0,0,0,0,0.041,0,0,0,0,0.083,0,0.083,0,0.041,0,0,0.207,0.041,0.165,0,0.041,0,0,0.083,0,0,0.041,0,0.041,0.083,0,0,0,0,0.041,0,0,0,0.041,0.041,0.083,0.083,0.083,0,0.041,0.041,0.041,0.083,0.041,0,0,0,0,0.124,0,0.041,0.041,0,0.041,0.041,0,0.124,0.041,0.165,0.496,0.041,0.124,0.413,0.289,0.785,0.289,0.496,0.248,0.372,0.454,0.165,0.165,0.207,0.454,0.702,0.537,1.033,0.537,0.991,1.198,0.496,1.322,1.322,1.57,2.231,0,3.553,2.603,2.768,1.57,3.842,3.759,1.983,1.405,1.611,2.437,2.644,1.611,0,5.99],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.041,0.082,0.082,0.247,0.371,0.371,0.371,0.701,1.032,0.991,2.933,3.759,4.544,5.535,7.187,9.707,10.368,13.012,13.879,14.045,15.325,15.904,14.252,13.096,12.641,9.997,8.964,8.303,6.486,4.916,5.288,3.801,3.595,4.008,2.356,2.356,2.191,2.521,2.314,2.355,2.355,2.272,2.726,2.437,2.56,2.519,2.808,3.138,3.592,3.51,3.386,4.088,4.006,4.378,4.296,3.883,3.677,3.636,3.389,2.728,2.645,2.521,2.397,2.315,1.943,1.777,1.57,1.446,1.281,0.785,0.62,0.537,0.372,0.372,0.455,0.455,0.62,0.703,0.62,0.661,0.578,0.537,0.619,0.578,0.413,0.289,1.776,1.9,1.9,1.9,2.355,2.313,2.726,2.933,1.446,1.488,1.612,1.736,1.612,1.612,1.199,0.992,1.24,1.074,0.95,1.074,0.785,0.785,0.909,0.909,0.744,0.703,0.703,0.455,0.248,0.248,0.207,0.207,0.207,0.207,0.248,0.578,0.95,0.992,0.909,0.909,1.322,1.157,1.116,0.786,0.497,0.414,0.497,0.951,0.662,0.827,0.827,0.868,0.785,0.95,0.908,0.454,0.247,0.371,0.371,0.33,0.495,0.413,0.372,0.372,0.372,0.331,0.455,0.455,0.29,0.207,0.248,0.248,0.248,0.248,0.124,0.124,0.165,0.165,0.124,0.165,0.165,0.082,0.082,0.082,0.082,0.082,0.082,0.041,0.041,0.124,0.124,0.207,0.166,0.207,0.207,0.207,0.414,0.372,0.537,0.454,0.495,0.454,0.454,0.537,0.33,0.289,0.165,0.165,0.165,0.248,0.248,0.165,0.165,0.165,0.165,0.165,0.124,0.041,0.082,0.123,0.206,0.289,0.331,0.331,0.372,0.413,0.413,0.455,0.413,0.33,0.247,0.247,0.206,0.289,0.248,0.206,0.206,0.206,0.247,0.288,0.288,0.288,0.329,0.453,0.908,0.949,1.032,1.404,1.693,2.354,2.602,2.933,2.685,3.016,3.346,3.098,2.974,2.396,2.561,2.767,3.056,3.717,3.8,4.626,5.659,5.948,6.816,7.436,8.469,9.667,9.13,11.692,13.097,15.369,15.617,18.137,20.326,20.078,21.483,19.541,19.375,19.251,19.292,15.45,17.681],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.053,0.053,0.053,0.094,0.142,0.142,0.395,0.519,0.649,0.791,0.98,1.334,1.481,1.582,1.841,1.877,2.048,2.036,1.629,1.723,1.428,1.027,1.115,0.873,0.702,0.702,0.513,0.46,0.513,0.319,0.266,0.283,0.313,0.307,0.301,0.283,0.277,0.307,0.319,0.319,0.319,0.336,0.366,0.395,0.466,0.419,0.454,0.537,0.531,0.561,0.531,0.437,0.49,0.454,0.354,0.354,0.283,0.307,0.319,0.242,0.248,0.224,0.189,0.183,0.106,0.077,0.077,0.041,0.047,0.053,0.047,0.065,0.083,0.089,0.089,0.083,0.077,0.065,0.071,0.059,0.041,0.041,0.248,0.271,0.271,0.248,0.325,0.33,0.39,0.207,0.183,0.212,0.23,0.159,0.224,0.171,0.142,0.142,0.148,0.136,0.118,0.083,0.106,0.112,0.13,0.094,0.1,0.1,0.065,0.035,0.03,0.018,0.03,0.018,0.03,0.03,0.035,0.083,0.13,0.13,0.13,0.118,0.189,0.159,0.112,0.059,0.059,0.059,0.071,0.065,0.118,0.118,0.118,0.112,0.112,0.124,0.065,0.035,0.035,0.053,0.047,0.047,0.047,0.053,0.053,0.053,0.035,0.047,0.065,0.041,0.03,0.03,0.035,0.035,0.024,0.018,0.018,0.018,0.024,0.018,0.018,0.024,0.012,0.012,0.012,0.006,0.012,0.012,0.006,0.006,0.006,0.018,0.018,0.024,0.024,0.03,0.03,0.03,0.047,0.053,0.065,0.065,0.065,0.065,0.065,0.047,0.041,0.018,0.024,0.018,0.024,0.035,0.024,0.024,0.024,0.018,0.024,0.018,0.006,0.006,0.012,0.018,0.03,0.035,0.047,0.047,0.053,0.053,0.053,0.053,0.047,0.035,0.035,0.03,0.024,0.035,0.024,0.024,0.03,0.03,0.035,0.041,0.024,0.041,0.041,0.059,0.13,0.13,0.142,0.201,0.224,0.33,0.348,0.348,0.378,0.413,0.419,0.401,0.313,0.301,0.295,0.36,0.384,0.466,0.519,0.637,0.779,0.785,0.873,0.986,1.062,1.304,1.163,1.499,1.8,2.007,2.042,2.367,2.585,2.868,2.561,2.42,2.372,2.526,2.207,1.67,2.243]},{"iso":"NGA","continent":"Africa","population":206139587,"name":"Nigeria","population_density":209.588,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,8,8,12,22,30,40,44,51,65,70,89,111,131,135,174,184,210,214,232,238,254,276,288,305,318,323,343,373,407,442,493,542,627,665,665,873,981,1095,1182,1273,1337,1532,1728,1932,2170,2388,2558,2802,2950,3145,3526,3912,4151,4399,4641,4787,4971,5162,5450,5621,5959,6175,6401,6677,7016,7261,7526,7839,8068,8344,8733,8915,9302,9855,10162,10578,10819,11166,11516,11844,12233,12486,12801,13464,13873,14554,15181,15682,16085,16658,17148,17735,18480,19147,19808,20244,20919,21371,22020,22614,23298,24077,24567,25133,25694,26484,27110,27564,28167,28711,29286,29789,30249,30748,31323,31987,32558,33153,33616,34259,34854,35454,36107,36663,37225,37801,38344,38948,39539,39977,40532,41180,41804,42208,42689,43151,43537,43841,44129,44433,44890,45244,45687,46140,46577,46867,47290,47743,48116,48445,48770,49068,49485,49895,50488,50964,51304,51905,52227,52548,52800,53021,53317,53477,53727,53865,54008,54247,54463,54588,54743,54905,55005,55160,55456,55632,55829,56017,56177,56256,56388,56478,56604,56735,56956,57145,57242,57437,57613,57724,57849,58062,58198,58324,58460,58647,58848,59001,59127,59287,59345,59465,59583,59738,59841,59992,60103,60266,60430,60655,60834,60982,61194,61307,61440,61558,61630,61667,61805,61882,61930,61992,62111,62224,62371,62521,62691,62853,62964,63036,63173,63328,63508,63731,63790,64090,64184,64336,64516,64728,64884,64996,65148,65305,65457,65693,65839,65982,66228,66383,66439,66607,66805,66974,67220,67330,67412,67557,67838,67960,68303,68627,68937,69255,69645,70195,70669,71344,72140,72757,73175,73374,74132,75062,76207],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.005,0.005,0.005,0.005,0.005,0.005,0.005,0.005,0.005,0.005,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.015,0.039,0.039,0.058,0.107,0.146,0.194,0.213,0.247,0.315,0.34,0.432,0.538,0.635,0.655,0.844,0.893,1.019,1.038,1.125,1.155,1.232,1.339,1.397,1.48,1.543,1.567,1.664,1.809,1.974,2.144,2.392,2.629,3.042,3.226,3.226,4.235,4.759,5.312,5.734,6.175,6.486,7.432,8.383,9.372,10.527,11.584,12.409,13.593,14.311,15.257,17.105,18.977,20.137,21.34,22.514,23.222,24.115,25.041,26.438,27.268,28.908,29.955,31.052,32.391,34.035,35.224,36.509,38.028,39.139,40.477,42.364,43.247,45.125,47.807,49.297,51.315,52.484,54.167,55.865,57.456,59.343,60.571,62.099,65.315,67.299,70.603,73.644,76.075,78.03,80.809,83.186,86.034,89.648,92.884,96.09,98.205,101.48,103.672,106.821,109.702,113.021,116.799,119.177,121.922,124.644,128.476,131.513,133.715,136.64,139.279,142.069,144.509,146.74,149.161,151.95,155.172,157.942,160.828,163.074,166.193,169.08,171.99,175.158,177.855,180.582,183.376,186.01,188.94,191.807,193.932,196.624,199.768,202.795,204.754,207.088,209.329,211.202,212.676,214.073,215.548,217.765,219.482,221.631,223.829,225.949,227.356,229.408,231.605,233.415,235.011,236.587,238.033,240.056,242.045,244.921,247.231,248.88,251.795,253.357,254.915,256.137,257.209,258.645,259.421,260.634,261.304,261.997,263.157,264.204,264.811,265.563,266.349,266.834,267.586,269.022,269.875,270.831,271.743,272.519,272.902,273.543,273.979,274.591,275.226,276.298,277.215,277.686,278.632,279.485,280.024,280.63,281.664,282.323,282.934,283.594,284.501,285.476,286.219,286.83,287.606,287.887,288.47,289.042,289.794,290.294,291.026,291.565,292.355,293.151,294.242,295.111,295.829,296.857,297.405,298.05,298.623,298.972,299.152,299.821,300.195,300.427,300.728,301.306,301.854,302.567,303.294,304.119,304.905,305.444,305.793,306.457,307.209,308.083,309.164,309.451,310.906,311.362,312.099,312.972,314.001,314.758,315.301,316.038,316.8,317.537,318.682,319.39,320.084,321.277,322.029,322.301,323.116,324.077,324.896,326.09,326.623,327.021,327.725,329.088,329.68,331.343,332.915,334.419,335.962,337.854,340.522,342.821,346.096,349.957,352.95,354.978,355.943,359.62,364.132,369.686],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.005,0,0,0,0,0,0,0,0.005,0.024,0,0.019,0.049,0.039,0.049,0.019,0.034,0.068,0.024,0.092,0.107,0.097,0.019,0.189,0.049,0.126,0.019,0.087,0.029,0.078,0.107,0.058,0.082,0.063,0.024,0.097,0.146,0.165,0.17,0.247,0.238,0.412,0.184,0,1.009,0.524,0.553,0.422,0.441,0.31,0.946,0.951,0.99,1.155,1.058,0.825,1.184,0.718,0.946,1.848,1.873,1.159,1.203,1.174,0.708,0.893,0.927,1.397,0.83,1.64,1.048,1.096,1.339,1.645,1.189,1.286,1.518,1.111,1.339,1.887,0.883,1.877,2.683,1.489,2.018,1.169,1.683,1.698,1.591,1.887,1.227,1.528,3.216,1.984,3.304,3.042,2.43,1.955,2.78,2.377,2.848,3.614,3.236,3.207,2.115,3.274,2.193,3.148,2.882,3.318,3.779,2.377,2.746,2.721,3.832,3.037,2.202,2.925,2.639,2.789,2.44,2.231,2.421,2.789,3.221,2.77,2.886,2.246,3.119,2.886,2.911,3.168,2.697,2.726,2.794,2.634,2.93,2.867,2.125,2.692,3.144,3.027,1.96,2.333,2.241,1.873,1.475,1.397,1.475,2.217,1.717,2.149,2.198,2.12,1.407,2.052,2.198,1.809,1.596,1.577,1.446,2.023,1.989,2.877,2.309,1.649,2.916,1.562,1.557,1.222,1.072,1.436,0.776,1.213,0.669,0.694,1.159,1.048,0.606,0.752,0.786,0.485,0.752,1.436,0.854,0.956,0.912,0.776,0.383,0.64,0.437,0.611,0.635,1.072,0.917,0.471,0.946,0.854,0.538,0.606,1.033,0.66,0.611,0.66,0.907,0.975,0.742,0.611,0.776,0.281,0.582,0.572,0.752,0.5,0.733,0.538,0.791,0.796,1.091,0.868,0.718,1.028,0.548,0.645,0.572,0.349,0.179,0.669,0.374,0.233,0.301,0.577,0.548,0.713,0.728,0.825,0.786,0.538,0.349,0.665,0.752,0.873,1.082,0.286,1.455,0.456,0.737,0.873,1.028,0.757,0.543,0.737,0.762,0.737,1.145,0.708,0.694,1.193,0.752,0.272,0.815,0.961,0.82,1.193,0.534,0.398,0.703,1.363,0.592,1.664,1.572,1.504,1.543,1.892,2.668,2.299,3.274,3.861,2.993,2.028,0.965,3.677,4.512,5.554],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.005,0.005,0.005,0.005,0.005,0.005,0.005,0.005,0.005,0.029,0.029,0.048,0.097,0.136,0.185,0.204,0.233,0.277,0.301,0.374,0.432,0.49,0.46,0.63,0.645,0.703,0.698,0.693,0.615,0.596,0.684,0.553,0.586,0.523,0.528,0.538,0.655,0.742,0.805,0.994,1.15,1.499,1.659,1.562,2.425,2.784,3.167,3.342,3.545,3.443,4.205,5.156,5.137,5.768,6.273,6.676,7.419,7.827,7.827,8.724,9.607,9.611,9.756,10.105,9.629,9.804,9.785,9.334,8.291,8.772,8.617,8.539,9.17,9.922,10.184,10.073,10.761,10.232,10.523,11.314,10.858,11.09,12.584,12.787,13.287,13.345,13.689,13.5,14.208,14.218,12.762,12.801,13.999,14.814,16.435,17.779,18.618,18.686,20.239,21.088,20.72,22.35,22.282,22.447,22.132,23.451,22.864,23.635,23.669,23.373,23.916,23.086,23.717,23.164,24.803,24.692,24.012,23.619,22.479,22.891,22.585,22.095,20.684,20.436,21.455,21.3,21.547,21.004,21.683,22.338,22.828,23.207,22.683,22.639,22.547,22.935,22.746,22.727,21.941,21.465,21.912,22.213,21.379,21.078,20.389,19.395,18.745,17.45,15.781,14.971,14.728,14.544,14.501,14.748,14.68,15.335,16.058,15.65,15.529,14.957,14.205,14.108,14.69,15.515,15.626,15.466,16.786,16.771,16.882,16.081,15.164,13.723,12.19,11.754,9.507,8.639,8.241,8.067,7.601,6.917,6.927,6.199,6.282,7.024,6.719,6.627,6.933,6.957,6.554,6.709,6.394,5.569,5.35,5.466,5.471,5.166,5.729,5.943,6.044,6.039,6.437,6.025,5.719,5.908,5.869,5.99,6.194,6.199,5.942,5.563,5.534,5.446,5.291,4.816,4.807,4.734,4.749,5.264,5.773,6.069,6.035,6.563,6.378,6.485,6.266,5.819,4.907,4.708,4.364,3.569,3.322,3.254,3.23,3.594,4.143,4.299,4.711,5.016,5.064,5.152,5.356,5.516,5.87,5.331,6,5.918,6.306,6.514,6.79,6.674,6.135,6.586,5.893,6.174,6.582,6.417,6.083,6.519,6.728,6.263,6.316,6.54,6.215,6.7,6.54,5.745,5.696,6.787,6.564,7.267,8.019,8.33,9.339,10.833,12.798,13.734,16.416,18.613,20.034,20.558,19.98,21.765,23.609,26.864],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0,0.001,0.004,0.004,0.007,0.014,0.019,0.026,0.028,0.03,0.04,0.04,0.046,0.056,0.063,0.063,0.085,0.082,0.097,0.087,0.084,0.074,0.082,0.071,0.072,0.066,0.072,0.063,0.073,0.082,0.091,0.107,0.13,0.155,0.211,0.223,0.202,0.323,0.374,0.417,0.444,0.448,0.466,0.601,0.593,0.659,0.745,0.836,0.891,1.015,0.983,0.982,1.105,1.207,1.222,1.276,1.274,1.273,1.265,1.134,1.066,1.019,1.081,1.063,1.119,1.182,1.285,1.255,1.32,1.303,1.312,1.347,1.425,1.316,1.414,1.614,1.61,1.739,1.715,1.686,1.803,1.762,1.648,1.611,1.541,1.833,1.876,2.105,2.313,2.39,2.494,2.673,2.553,2.676,2.721,2.748,2.859,2.882,2.953,2.927,2.97,2.865,2.877,2.958,2.996,2.92,2.996,3.094,3.116,2.956,2.834,2.872,2.878,2.838,2.609,2.521,2.605,2.647,2.666,2.68,2.652,2.779,2.846,2.863,2.855,2.845,2.822,2.9,2.831,2.837,2.831,2.682,2.681,2.741,2.774,2.678,2.593,2.503,2.467,2.293,2.044,1.822,1.859,1.771,1.757,1.804,1.896,1.897,1.98,1.977,1.99,1.911,1.823,1.726,1.814,1.805,1.902,1.974,1.981,2.173,2.189,2.123,2.013,1.755,1.631,1.506,1.263,1.135,1.012,1.003,0.999,0.881,0.877,0.816,0.79,0.798,0.838,0.81,0.86,0.883,0.882,0.867,0.851,0.708,0.674,0.628,0.651,0.671,0.683,0.727,0.787,0.776,0.772,0.766,0.73,0.75,0.709,0.717,0.779,0.798,0.738,0.755,0.708,0.696,0.649,0.617,0.582,0.599,0.565,0.638,0.669,0.743,0.76,0.791,0.833,0.834,0.814,0.782,0.676,0.577,0.57,0.477,0.432,0.383,0.383,0.412,0.488,0.496,0.561,0.64,0.674,0.641,0.658,0.663,0.684,0.721,0.649,0.78,0.796,0.806,0.823,0.845,0.799,0.836,0.733,0.777,0.777,0.816,0.77,0.761,0.854,0.856,0.786,0.797,0.771,0.787,0.858,0.764,0.713,0.775,0.853,0.8,0.921,0.975,1.114,1.277,1.447,1.633,1.877,2.107,2.435,2.647,2.717,2.584,2.728,3.044,3.37]},{"iso":"MKD","continent":"Europe","population":2083380,"name":"North Macedonia","population_density":82.6,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,3,3,3,3,7,7,7,14,14,14,18,26,35,48,67,85,115,136,148,177,201,219,241,259,285,329,354,384,430,483,555,570,599,617,663,711,760,828,854,908,974,1081,1117,1170,1207,1225,1231,1259,1300,1326,1367,1386,1399,1421,1442,1465,1494,1506,1511,1518,1526,1539,1572,1586,1622,1642,1664,1674,1694,1723,1740,1762,1792,1817,1839,1858,1898,1921,1941,1978,1999,2014,2039,2077,2129,2164,2226,2315,2391,2492,2611,2790,2915,3025,3152,3239,3364,3538,3701,3895,4057,4157,4299,4482,4664,4820,5005,5106,5196,5311,5445,5595,5758,5906,6080,6209,6334,6454,6625,6787,6932,7046,7124,7244,7406,7572,7777,7975,8111,8197,8332,8530,8623,8786,9026,9153,9249,9412,9547,9669,9797,9934,10086,10213,10315,10503,10617,10754,10891,11054,11128,11202,11289,11399,11554,11754,11839,11942,12083,12217,12357,12515,12653,12739,12840,12970,13076,13194,13308,13458,13595,13673,13799,13914,14004,14163,14293,14330,14341,14455,14600,14762,14871,14998,15090,15127,15226,15293,15414,15555,15694,15791,15827,15925,16088,16274,16417,16557,16735,16780,16867,17049,17200,17343,17483,17629,17674,17786,17977,18138,18363,18602,18790,18873,19096,19413,19777,20163,20555,20937,21113,21193,21636,22170,22607,23201,23628,23788,24196,24836,25473,25991,26394,26954,27199,27827,28697,29558,30488,31572,32436,32997,33908,35097,36372,37499,38782,39760,40275,41222,42540,43835,44898,46062,47050,47636,48613,50015,51213,52449,53631,54743,55127,56164,57451,58608,59701,60723,61543,61878,62945,63890,65231,66330,67311,67968,68332,69452,69954,70883,72044,73025,73638,73851,74732,75597,76251],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.48,0.48,0.48,0.48,0.48,0.48,0.48,0.48,0.48,1.44,1.44,1.44,1.44,3.36,3.36,3.36,6.72,6.72,6.72,8.64,12.48,16.8,23.039,32.159,40.799,55.199,65.279,71.038,84.958,96.478,105.118,115.677,124.317,136.797,157.916,169.916,184.316,206.395,231.835,266.394,273.594,287.514,296.153,318.233,341.272,364.792,397.431,409.911,435.83,467.51,518.868,536.148,561.587,579.347,587.987,590.867,604.306,623.986,636.466,656.145,665.265,671.505,682.065,692.144,703.184,717.104,722.864,725.264,728.624,732.464,738.703,754.543,761.263,778.543,788.142,798.702,803.502,813.102,827.021,835.181,845.741,860.141,872.14,882.7,891.82,911.02,922.059,931.659,949.419,959.499,966.698,978.698,996.938,1021.897,1038.697,1068.456,1111.175,1147.654,1196.133,1253.252,1339.17,1399.169,1451.967,1512.926,1554.685,1614.684,1698.202,1776.44,1869.558,1947.316,1995.315,2063.474,2151.312,2238.67,2313.548,2402.346,2450.825,2494.024,2549.223,2613.541,2685.54,2763.778,2834.817,2918.335,2980.253,3040.252,3097.851,3179.929,3257.687,3327.285,3382.004,3419.443,3477.042,3554.8,3634.479,3732.876,3827.914,3893.193,3934.472,3999.27,4094.308,4138.947,4217.186,4332.383,4393.342,4439.421,4517.659,4582.457,4641.016,4702.455,4768.213,4841.172,4902.13,4951.089,5041.327,5096.046,5161.804,5227.563,5305.801,5341.32,5376.84,5418.599,5471.397,5545.796,5641.794,5682.593,5732.032,5799.71,5864.029,5931.227,6007.065,6073.304,6114.583,6163.062,6225.461,6276.339,6332.978,6387.697,6459.695,6525.454,6562.893,6623.372,6678.57,6721.769,6798.088,6860.486,6878.246,6883.526,6938.245,7007.843,7085.601,7137.92,7198.879,7243.038,7260.797,7308.316,7340.476,7398.554,7466.233,7532.951,7579.51,7596.79,7643.829,7722.067,7811.345,7879.983,7947.182,8032.62,8054.22,8095.979,8183.337,8255.815,8324.454,8391.652,8461.73,8483.33,8537.089,8628.767,8706.045,8814.043,8928.76,9018.998,9058.837,9165.875,9318.031,9492.747,9678.023,9866.179,10049.535,10134.013,10172.412,10385.047,10641.362,10851.117,11136.231,11341.186,11417.984,11613.82,11921.013,12226.766,12475.401,12668.836,12937.63,13055.228,13356.661,13774.251,14187.522,14633.912,15154.221,15568.931,15838.205,16275.475,16846.183,17458.169,17999.117,18614.943,19084.373,19331.567,19786.117,20418.743,21040.329,21550.557,22109.265,22583.494,22864.768,23333.717,24006.662,24581.689,25174.956,25742.303,26276.051,26460.367,26958.116,27575.862,28131.21,28655.838,29146.387,29539.978,29700.775,30212.923,30666.513,31310.179,31837.687,32308.556,32623.909,32798.625,33336.213,33577.168,34023.078,34580.345,35051.215,35345.448,35447.686,35870.556,36285.747,36599.66],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.96,0,0,0,1.92,0,0,3.36,0,0,1.92,3.84,4.32,6.24,9.12,8.64,14.4,10.08,5.76,13.92,11.52,8.64,10.56,8.64,12.48,21.12,12,14.4,22.08,25.439,34.559,7.2,13.92,8.64,22.08,23.039,23.519,32.639,12.48,25.919,31.679,51.359,17.28,25.439,17.76,8.64,2.88,13.44,19.68,12.48,19.68,9.12,6.24,10.56,10.08,11.04,13.92,5.76,2.4,3.36,3.84,6.24,15.84,6.72,17.28,9.6,10.56,4.8,9.6,13.92,8.16,10.56,14.4,12,10.56,9.12,19.2,11.04,9.6,17.76,10.08,7.2,12,18.24,24.959,16.8,29.759,42.719,36.479,48.479,57.119,85.918,59.999,52.799,60.959,41.759,59.999,83.518,78.238,93.118,77.758,47.999,68.158,87.838,87.358,74.878,88.798,48.479,43.199,55.199,64.319,71.998,78.238,71.038,83.518,61.919,59.999,57.599,82.078,77.758,69.598,54.719,37.439,57.599,77.758,79.678,98.398,95.038,65.279,41.279,64.799,95.038,44.639,78.238,115.197,60.959,46.079,78.238,64.799,58.559,61.439,65.759,72.958,60.959,48.959,90.238,54.719,65.759,65.759,78.238,35.519,35.519,41.759,52.799,74.398,95.998,40.799,49.439,67.678,64.319,67.198,75.838,66.239,41.279,48.479,62.399,50.879,56.639,54.719,71.998,65.759,37.439,60.479,55.199,43.199,76.318,62.399,17.76,5.28,54.719,69.598,77.758,52.319,60.959,44.159,17.76,47.519,32.159,58.079,67.678,66.719,46.559,17.28,47.039,78.238,89.278,68.638,67.198,85.438,21.6,41.759,87.358,72.478,68.638,67.198,70.078,21.6,53.759,91.678,77.278,107.998,114.717,90.238,39.839,107.038,152.157,174.716,185.276,188.156,183.356,84.478,38.399,212.635,256.314,209.755,285.114,204.955,76.798,195.836,307.193,305.753,248.634,193.436,268.794,117.597,301.433,417.591,413.271,446.39,520.308,414.711,269.274,437.27,570.707,611.986,540.948,615.826,469.429,247.194,454.55,632.626,621.586,510.229,558.707,474.229,281.274,468.949,672.945,575.027,593.267,567.347,533.748,184.316,497.749,617.746,555.348,524.628,490.549,393.591,160.796,512.149,453.59,643.666,527.508,470.869,315.353,174.716,537.588,240.955,445.91,557.268,470.869,294.233,102.238,422.871,415.191,313.913],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.96,0.96,0.96,0.96,2.88,2.88,2.88,6.24,5.28,5.28,7.2,11.04,13.44,19.68,28.8,34.08,48.48,58.56,62.4,72.48,79.68,82.08,83.52,83.52,81.6,92.64,98.88,99.36,109.92,126.719,150.718,149.278,150.718,138.238,148.318,156.957,158.396,165.596,143.517,162.236,179.995,222.714,217.914,220.314,214.555,190.556,180.956,168.477,156.478,117.599,119.999,103.68,92.16,94.08,101.28,98.88,93.12,86.4,69.12,63.36,60.96,56.64,62.4,58.08,61.44,65.28,73.44,74.88,80.64,88.32,80.64,84.48,81.6,84,84,88.32,97.92,95.04,96.48,103.68,99.36,94.56,96,105.12,110.879,116.639,136.798,161.757,188.156,229.435,274.554,342.232,377.272,413.271,444.471,443.511,467.031,502.07,523.189,530.389,548.148,543.348,550.547,596.626,623.985,615.345,625.905,581.266,546.707,553.907,550.068,534.228,525.108,521.268,515.988,529.428,546.228,548.628,566.387,572.147,563.507,547.188,501.109,496.789,514.548,536.627,552.947,570.227,565.908,552.468,579.828,617.267,584.148,582.708,599.507,565.428,546.228,583.187,583.187,546.708,563.508,551.029,508.79,508.79,511.67,523.67,513.59,520.79,525.11,537.589,500.15,474.71,467.51,430.071,449.75,479.989,455.029,426.23,458.389,487.189,512.628,535.667,527.508,472.789,480.469,493.429,476.63,468.95,456.471,452.631,452.151,448.311,460.311,453.111,445.431,465.11,472.79,418.552,358.073,375.353,384.472,407.031,416.151,400.792,382.552,382.552,424.791,402.231,390.712,380.632,395.032,380.632,353.753,383.032,413.751,470.87,481.429,480.949,499.668,474.709,499.188,539.507,533.747,513.107,511.667,514.547,450.709,482.868,532.787,522.707,558.227,604.306,627.346,597.107,682.545,780.943,863.981,971.979,1052.137,1120.776,1115.016,1113.576,1219.173,1323.33,1358.369,1458.207,1475.006,1368.448,1479.806,1748.6,1841.718,1834.038,1817.719,1801.399,1714.041,1938.676,2160.431,2266.509,2407.146,2678.82,2900.095,2900.575,3220.248,3489.522,3683.917,3811.594,3981.03,3930.151,3762.634,3947.91,4143.266,4194.145,4092.388,4110.147,3968.55,3780.395,4002.15,4220.545,4162.946,4134.627,4191.745,4166.786,3876.873,4093.348,4242.145,4124.548,4074.149,3971.431,3797.675,3424.723,3752.556,3708.397,3734.317,3706.477,3652.718,3477.522,3258.647,3635.439,3364.245,3356.565,3270.167,3213.528,3036.892,2823.777,3071.932,2949.535,3022.493],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.137,0.137,0.137,0.137,0.411,0.411,0.411,0.754,0.754,0.754,1.029,1.303,1.92,2.811,3.634,4.868,6.926,8.091,8.366,9.737,10.491,10.423,10.697,9.874,10.217,12.411,12.137,12.548,14.468,16.594,20.297,19.542,18.514,18.034,19.131,19.268,18.994,18.72,19.474,21.188,24.479,28.662,27.839,28.114,25.988,25.439,22.148,19.542,15.017,14.331,13.508,12.274,11.931,13.028,12.548,11.314,11.52,9.531,8.571,8.16,7.2,6.651,7.337,6.308,7.954,8.983,10.011,10.148,10.628,10.354,10.56,9.6,10.285,10.491,11.314,11.245,12,12.411,12.274,12.754,12.48,12,12.411,12.274,14.263,15.291,17.005,21.668,25.851,31.062,36.616,45.325,51.496,54.787,57.393,58.147,59.793,63.564,62.467,67.198,70.764,68.913,72.684,76.661,77.21,76.73,76.113,71.93,71.244,69.393,66.033,63.839,64.319,61.781,66.787,69.461,70.147,69.187,70.627,70.558,70.353,66.239,62.741,62.399,65.279,64.936,67.884,71.518,73.027,73.575,74.604,77.073,72.067,69.187,72.067,71.45,72.136,74.055,69.736,71.724,69.324,62.261,63.976,66.101,61.919,65.553,65.004,65.621,65.621,66.376,62.741,60.821,53.896,53.622,54.856,59.176,53.827,55.816,60.41,63.633,65.69,65.896,61.644,61.713,61.576,60.821,58.902,57.393,54.376,55.199,58.696,57.119,56.844,57.462,55.542,58.627,57.256,50.399,45.805,44.982,47.039,51.976,48.547,48.342,52.113,53.896,52.867,47.519,44.708,46.902,47.725,48.067,47.999,47.93,54.513,58.97,59.107,59.176,64.73,65.347,64.593,65.896,63.496,63.496,63.496,61.301,61.301,63.016,63.633,64.319,69.941,76.73,79.61,82.215,89.827,98.466,112.386,123.426,133.917,147.22,153.597,143.791,152.431,164.088,167.585,181.436,184.522,183.424,205.915,219.424,226.486,232.041,218.944,228.063,233.892,248.977,264.748,280.108,308.359,355.055,375.9,397.568,416.974,438.847,467.235,480.744,494.389,502.206,499.052,501.52,510.366,511.737,507.349,499.189,499.875,504.743,506.8,512.56,505.909,517.771,519.006,527.508,513.657,517.771,509.886,507.074,497.269,486.298,466.275,462.915,464.972,441.522,454.138,454.55,451.738,440.562,442.55,446.184,415.808,387.557,391.808,391.808,388.791,378.437,362.049,386.94,368.083]},{"iso":"NOR","continent":"Europe","population":5421242,"name":"Norway","population_density":14.462,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,6,15,19,25,32,56,87,108,147,176,205,400,598,702,996,1090,1221,1333,1463,1550,1746,1914,2118,2385,2621,2863,3084,3369,3755,4015,4284,4445,4641,4863,5147,5370,5550,5687,5865,6086,6086,6211,6314,6409,6525,6603,6623,6740,6896,6937,7036,7078,7156,7191,7338,7401,7463,7499,7527,7599,7660,7710,7738,7783,7809,7847,7904,7955,7996,8034,8070,8099,8105,8132,8157,8175,8196,8219,8237,8249,8257,8267,8281,8309,8332,8346,8352,8364,8383,8401,8411,8422,8437,8440,8446,8455,8477,8504,8522,8531,8547,8561,8576,8594,8608,8620,8628,8631,8647,8660,8692,8708,8726,8742,8745,8751,8772,8788,8788,8832,8846,8855,8862,8879,8896,8902,8921,8926,8930,8936,8947,8950,8965,8974,8977,8981,8984,9001,9011,9015,9025,9028,9028,9034,9053,9059,9085,9092,9111,9117,9132,9150,9172,9208,9240,9253,9268,9334,9362,9409,9468,9551,9599,9638,9684,9751,9783,9851,9908,9965,10005,10060,10111,10162,10197,10275,10299,10323,10395,10454,10504,10542,10582,10611,10643,10782,10871,11034,11120,11231,11296,11388,11521,11623,11746,11867,12003,12079,12154,12276,12393,12498,12644,12769,12858,12897,13005,13153,13277,13406,13545,13627,13698,13788,13915,14027,14149,14284,14362,14457,14605,14784,15013,15221,15388,15466,15524,15639,15793,15953,16137,16272,16369,16457,16603,16772,16964,17234,17532,17749,17909,18342,18666,19069,19564,20062,20331,20635,21339,21956,22578,23229,23835,24243,24732,25325,25887,26511,27228,27916,28434,28434,28434,30114,30770,31441,32014,32352,32765,33183,33717,34268,34748,35193,35546,35828,36150,36591,36969,37371,37801,38073,38323,38703,39163,39525,40023,40439,40803,41003,41334,41852,42312,42776],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.184,0.184,1.107,2.767,3.505,4.611,5.903,10.33,16.048,19.922,27.116,32.465,37.814,73.784,110.307,129.491,183.722,201.061,225.225,245.885,269.864,285.912,322.066,353.056,390.685,439.936,483.469,528.108,568.873,621.444,692.646,740.605,790.225,819.923,856.077,897.027,949.413,990.548,1023.751,1049.022,1081.855,1122.621,1122.621,1145.678,1164.678,1182.201,1203.599,1217.987,1221.676,1243.258,1272.033,1279.596,1297.858,1305.605,1319.993,1326.449,1353.564,1365.185,1376.622,1383.262,1388.427,1401.708,1412.96,1422.183,1427.348,1435.649,1440.445,1447.454,1457.968,1467.376,1474.939,1481.948,1488.589,1493.938,1495.045,1500.025,1504.637,1507.957,1511.831,1516.073,1519.394,1521.607,1523.083,1524.927,1527.51,1532.675,1536.917,1539.5,1540.606,1542.82,1546.325,1549.645,1551.489,1553.519,1556.285,1556.839,1557.946,1559.606,1563.664,1568.644,1571.965,1573.625,1576.576,1579.158,1581.925,1585.246,1587.828,1590.042,1591.517,1592.071,1595.022,1597.42,1603.323,1606.274,1609.594,1612.546,1613.099,1614.206,1618.079,1621.031,1621.031,1629.147,1631.729,1633.39,1634.681,1637.817,1640.952,1642.059,1645.564,1646.486,1647.224,1648.331,1650.36,1650.913,1653.68,1655.34,1655.894,1656.631,1657.185,1660.321,1662.165,1662.903,1664.748,1665.301,1665.301,1666.408,1669.913,1671.019,1675.815,1677.106,1680.611,1681.718,1684.485,1687.805,1691.863,1698.504,1704.406,1706.804,1709.571,1721.746,1726.911,1735.58,1746.463,1761.773,1770.627,1777.821,1786.307,1798.665,1804.568,1817.111,1827.625,1838.14,1845.518,1855.663,1865.071,1874.478,1880.934,1895.322,1899.749,1904.176,1917.457,1928.34,1937.563,1944.573,1951.951,1957.301,1963.203,1988.843,2005.26,2035.327,2051.19,2071.665,2083.655,2100.626,2125.159,2143.974,2166.662,2188.982,2214.068,2228.087,2241.922,2264.426,2286.008,2305.376,2332.307,2355.364,2371.781,2378.975,2398.897,2426.197,2449.07,2472.865,2498.505,2513.631,2526.727,2543.329,2566.755,2587.414,2609.919,2634.821,2649.208,2666.732,2694.032,2727.05,2769.292,2807.659,2838.464,2852.852,2863.55,2884.763,2913.17,2942.684,2976.624,3001.526,3019.419,3035.651,3062.582,3093.756,3129.172,3178.976,3233.945,3273.973,3303.487,3383.358,3443.122,3517.46,3608.767,3700.628,3750.248,3806.323,3936.183,4049.994,4164.728,4284.811,4396.594,4471.853,4562.054,4671.439,4775.105,4890.208,5022.465,5149.374,5244.924,5244.924,5244.924,5554.816,5675.821,5799.594,5905.289,5967.636,6043.818,6120.922,6219.424,6321.061,6409.601,6491.686,6556.8,6608.818,6668.214,6749.56,6819.286,6893.439,6972.756,7022.929,7069.044,7139.139,7223.99,7290.765,7382.626,7459.361,7526.504,7563.396,7624.452,7720.002,7804.854,7890.443],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.922,1.66,0.738,1.107,1.291,4.427,5.718,3.874,7.194,5.349,5.349,35.97,36.523,19.184,54.231,17.339,24.164,20.659,23.98,16.048,36.154,30.989,37.63,49.251,43.532,44.639,40.766,52.571,71.201,47.959,49.62,29.698,36.154,40.95,52.387,41.134,33.203,25.271,32.834,40.766,0,23.057,18.999,17.524,21.397,14.388,3.689,21.582,28.776,7.563,18.261,7.747,14.388,6.456,27.116,11.621,11.436,6.641,5.165,13.281,11.252,9.223,5.165,8.301,4.796,7.009,10.514,9.407,7.563,7.009,6.641,5.349,1.107,4.98,4.611,3.32,3.874,4.243,3.32,2.214,1.476,1.845,2.582,5.165,4.243,2.582,1.107,2.214,3.505,3.32,1.845,2.029,2.767,0.553,1.107,1.66,4.058,4.98,3.32,1.66,2.951,2.582,2.767,3.32,2.582,2.214,1.476,0.553,2.951,2.398,5.903,2.951,3.32,2.951,0.553,1.107,3.874,2.951,0,8.116,2.582,1.66,1.291,3.136,3.136,1.107,3.505,0.922,0.738,1.107,2.029,0.553,2.767,1.66,0.553,0.738,0.553,3.136,1.845,0.738,1.845,0.553,0,1.107,3.505,1.107,4.796,1.291,3.505,1.107,2.767,3.32,4.058,6.641,5.903,2.398,2.767,12.174,5.165,8.67,10.883,15.31,8.854,7.194,8.485,12.359,5.903,12.543,10.514,10.514,7.378,10.145,9.407,9.407,6.456,14.388,4.427,4.427,13.281,10.883,9.223,7.009,7.378,5.349,5.903,25.64,16.417,30.067,15.864,20.475,11.99,16.97,24.533,18.815,22.689,22.32,25.087,14.019,13.834,22.504,21.582,19.368,26.931,23.057,16.417,7.194,19.922,27.3,22.873,23.795,25.64,15.126,13.097,16.601,23.426,20.659,22.504,24.902,14.388,17.524,27.3,33.018,42.241,38.368,30.805,14.388,10.699,21.213,28.407,29.514,33.941,24.902,17.893,16.232,26.931,31.174,35.416,49.804,54.969,40.028,29.514,79.871,59.765,74.337,91.307,91.861,49.62,56.076,129.86,113.812,114.734,120.083,111.783,75.26,90.201,109.385,103.666,115.103,132.258,126.908,95.55,0,0,309.892,121.005,123.772,105.695,62.347,76.182,77.104,98.501,101.637,88.541,82.085,65.114,52.018,59.396,81.347,69.726,74.153,79.318,50.173,46.115,70.095,84.851,66.774,91.861,76.735,67.143,36.892,61.056,95.55,84.851,85.589],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.922,2.582,3.32,4.427,5.718,10.145,15.863,19.737,26.009,29.698,34.309,69.172,104.404,119.161,167.674,181.139,198.109,213.419,232.05,212.128,211.759,223.564,206.963,238.875,258.243,282.223,299.009,335.532,370.579,387.549,399.539,379.986,372.608,368.919,380.54,369.103,331.105,308.417,291.631,302.699,266.545,248.652,215.264,191.654,179.848,168.965,139.82,120.636,149.412,133.918,133.18,123.403,116.394,108.462,131.889,121.928,104.588,103.666,90.57,96.104,92.968,95.735,73.784,70.464,63.824,64.192,69.541,65.667,61.978,59.764,61.24,58.288,54.599,52.57,46.667,40.58,36.891,34.125,30.804,27.669,28.038,24.903,22.874,24.719,25.088,23.427,21.214,21.214,23.243,24.718,23.981,20.845,19.369,17.34,17.34,16.786,17.339,18.999,20.474,20.105,20.289,22.318,23.978,25.638,24.162,21.396,19.552,18.445,18.445,18.261,21.397,21.028,21.766,22.503,21.58,22.134,23.057,23.61,17.707,22.872,22.134,20.843,21.581,23.61,22.872,21.028,24.533,17.339,15.495,14.942,15.68,13.097,12.728,13.281,10.329,10.145,9.96,11.989,11.805,11.99,11.068,9.961,9.408,9.777,12.729,10.7,13.651,14.204,15.864,16.418,19.185,21.398,21.951,27.485,28.592,29.699,28.961,40.028,42.426,47.776,54.601,63.27,66.221,71.017,76.735,76.92,77.658,81.531,81.162,76.366,74.89,77.841,78.763,75.811,76.364,78.209,72.122,66.035,71.938,72.676,72.492,70.094,71.016,61.977,63.453,84.666,87.802,106.986,113.627,127.093,131.705,143.326,161.956,155.131,161.403,153.656,162.879,156.423,158.267,163.801,160.85,161.403,165.645,166.382,157.712,150.887,156.975,161.771,163.062,167.489,166.198,158.267,154.947,164.354,167.858,161.217,160.848,161.955,150.703,153.101,167.304,183.721,202.536,220.245,228.546,218.032,214.343,218.032,219.139,215.635,207.335,193.869,180.957,182.801,199.033,208.994,216.003,236.293,257.321,272.447,284.068,347.707,380.541,423.704,479.595,521.652,516.303,532.351,632.697,666.638,721.607,767.353,787.829,771.228,811.809,865.118,838.924,840.215,857.739,864.564,848.331,773.071,682.87,883.377,900.716,909.385,882.822,818.261,798.893,875.997,974.498,766.243,733.779,692.092,651.511,641.182,624.396,628.639,599.864,572.38,563.157,531.245,512.246,530.323,555.778,541.205,563.34,565.922,553.747,540.466,555.407,580.862,580.862,599.677],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.817,1.449,2.266,2.688,3.478,4.137,4.743,9.697,14.282,16.206,23.4,24.849,27.537,29.724,28.012,25.087,27.511,24.191,27.089,30.673,33.941,36.892,40.423,42.768,48.513,49.989,50.041,48.065,46.853,46.879,46.853,42.557,40.449,36.971,37.419,38.078,32.228,28.038,24.876,22.636,22.082,19.447,14.151,17.234,18.051,16.417,16.522,14.572,14.572,14.968,15.758,13.307,13.861,12.201,11.832,11.674,12.359,9.803,8.88,8.432,8.169,8.432,8.037,7.774,7.536,7.8,7.563,7.642,6.799,6.008,5.323,4.717,4.269,3.926,3.636,3.795,3.294,2.899,2.793,2.978,2.978,2.872,2.714,2.82,3.057,3.162,2.688,2.372,2.398,2.319,2.161,1.897,2.003,2.451,2.635,2.477,2.82,3.03,3.189,3.083,2.741,2.582,2.556,2.214,2.266,2.214,2.582,2.635,2.793,3.004,3.004,2.741,2.951,2.53,2.108,2.793,2.741,2.899,2.925,2.82,2.846,3.004,2.345,2.108,1.976,1.95,1.792,1.423,1.66,1.397,1.344,1.344,1.265,1.423,1.607,1.318,1.344,1.344,1.239,1.318,1.37,1.265,1.845,1.766,2.187,2.345,2.582,2.556,2.978,3.241,3.9,3.742,3.979,5.323,5.586,6.245,6.851,8.195,9.118,9.75,9.223,10.251,9.855,10.093,9.407,9.645,9.671,9.908,9.486,9.987,9.118,9.671,8.801,8.38,8.828,9.039,9.012,9.091,8.09,8.222,8.432,10.198,10.989,13.966,15.231,17.102,18.051,19.632,19.474,19.816,18.762,19.684,20.343,20.633,20.185,19.895,20.291,19.816,20.475,20.185,20.528,19.579,19.21,20.027,20.528,20.08,20.449,20.264,21.107,20.633,20.08,19.764,19.579,19.474,19.368,20.001,21.529,22.899,25.982,28.249,29.092,29.092,28.117,27.247,26.589,24.77,24.138,23.295,23.795,24.586,25.403,25.798,26.641,28.907,33.203,36.365,38.262,45.825,49.909,55.47,61.399,66.669,68.039,71.834,78.975,86.696,92.467,96.578,99.424,103.087,107.962,105.037,103.587,103.64,105.379,107.54,110.439,97.553,81.926,111.387,112.23,111.018,107.988,103.245,114.128,125.143,94.944,92.177,87.144,83.771,84.166,80.714,78.185,75.734,71.175,69.12,68.724,66.59,65.747,67.275,67.776,67.354,69.884,69.515,71.939,70.622,69.33,70.859,73.441,72.545]},{"iso":"OMN","continent":"Asia","population":5106622,"name":"Oman","population_density":14.98,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,4,4,4,6,6,6,12,15,16,16,16,16,16,18,18,18,19,19,22,22,24,39,48,48,52,55,66,84,99,109,131,152,167,179,192,210,231,252,277,298,331,371,419,457,484,546,599,727,813,910,1019,1069,1180,1266,1410,1508,1614,1716,1790,1905,1998,2049,2131,2274,2348,2447,2483,2568,2637,2735,2903,2958,3112,3224,3399,3573,3721,4019,4341,4625,5029,5186,5379,5671,6043,6370,6794,7257,7770,7770,8118,8373,9009,9820,10423,11437,12223,12799,13537,14316,15086,16016,16882,17486,18198,18887,19954,21071,22077,23481,24524,25269,26079,26818,27670,28566,29471,31076,32394,33536,34902,36034,36953,38150,39060,40070,41194,42555,43929,45106,46178,47735,48997,50207,51725,53614,54697,56015,58179,59568,61247,62574,64193,65504,66661,68400,69887,71547,72646,73791,74858,76005,77058,77904,78569,79159,79159,79159,79159,79159,79159,80286,80713,81067,81357,81580,81787,82050,82299,82531,82743,82924,83086,83226,83418,83606,83769,83769,83769,83769,84509,84652,84818,85005,85005,85005,85544,85722,85928,85928,86380,86380,86380,87072,87328,87590,87939,88337,88337,88337,89746,90222,90660,91196,91753,91753,91753,93475,94051,94711,95339,95907,95907,95907,97450,98057,98585,98585,98585,98585,98585,101270,101814,102648,103465,104129,104129,104129,105890,106575,107213,107776,108296,108296,108296,109953,110594,111033,111484,111837,111837,111837,112932,113354,113820,114434,114434,114434,114434,115734,116152,116528,116847,117167,117167,117167,118140,118503,118884,119186,119442,119442,119442,120389,120718,120718,121129,121360,121360,121360,122081,122356,122579,122579,122579,122579,122579,123484,123699,123908,124145,124329,124329,124329,124886,125115,125325,125490,125669,125669,125669,126240,126504,126719,126835,127019],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.392,0.392,0.783,0.783,0.783,1.175,1.175,1.175,2.35,2.937,3.133,3.133,3.133,3.133,3.133,3.525,3.525,3.525,3.721,3.721,4.308,4.308,4.7,7.637,9.4,9.4,10.183,10.77,12.924,16.449,19.387,21.345,25.653,29.765,32.703,35.053,37.598,41.123,45.235,49.348,54.243,58.356,64.818,72.651,82.05,89.492,94.779,106.92,117.299,142.364,159.205,178.2,199.545,209.336,231.073,247.913,276.112,295.303,316.06,336.034,350.525,373.045,391.257,401.244,417.301,445.304,459.795,479.182,486.231,502.876,516.388,535.579,568.478,579.248,609.405,631.337,665.606,699.68,728.662,787.017,850.073,905.687,984.8,1015.544,1053.338,1110.519,1183.365,1247.4,1330.429,1421.096,1521.554,1521.554,1589.701,1639.636,1764.18,1922.993,2041.075,2239.641,2393.559,2506.354,2650.872,2803.419,2954.203,3136.32,3305.904,3424.181,3563.608,3698.531,3907.475,4126.211,4323.21,4598.147,4802.392,4948.281,5106.898,5251.613,5418.455,5593.913,5771.134,6085.432,6343.528,6567.159,6834.655,7056.328,7236.29,7470.692,7648.892,7846.674,8066.781,8333.297,8602.36,8832.845,9042.768,9347.667,9594.797,9831.744,10129.005,10498.917,10710.994,10969.091,11392.854,11664.854,11993.643,12253.501,12570.541,12827.266,13053.835,13394.373,13685.564,14010.632,14225.842,14450.061,14659.006,14883.616,15089.819,15255.486,15385.709,15501.245,15501.245,15501.245,15501.245,15501.245,15501.245,15721.939,15805.556,15874.878,15931.667,15975.336,16015.871,16067.373,16116.133,16161.564,16203.079,16238.523,16270.247,16297.662,16335.26,16372.075,16403.995,16403.995,16403.995,16403.995,16548.905,16576.907,16609.414,16646.033,16646.033,16646.033,16751.583,16786.439,16826.779,16826.779,16915.292,16915.292,16915.292,17050.802,17100.933,17152.239,17220.581,17298.519,17298.519,17298.519,17574.436,17667.648,17753.419,17858.381,17967.455,17967.455,17967.455,18304.664,18417.459,18546.703,18669.68,18780.908,18780.908,18780.908,19083.065,19201.93,19305.326,19305.326,19305.326,19305.326,19305.326,19831.113,19937.642,20100.959,20260.947,20390.975,20390.975,20390.975,20735.821,20869.961,20994.896,21105.145,21206.974,21206.974,21206.974,21531.455,21656.978,21742.945,21831.261,21900.387,21900.387,21900.387,22114.815,22197.453,22288.707,22408.943,22408.943,22408.943,22408.943,22663.514,22745.369,22818.999,22881.466,22944.13,22944.13,22944.13,23134.667,23205.751,23280.36,23339.499,23389.63,23389.63,23389.63,23575.076,23639.502,23639.502,23719.986,23765.221,23765.221,23765.221,23906.41,23960.262,24003.931,24003.931,24003.931,24003.931,24003.931,24181.151,24223.254,24264.181,24310.591,24346.623,24346.623,24346.623,24455.697,24500.541,24541.664,24573.975,24609.027,24609.027,24609.027,24720.843,24772.54,24814.643,24837.358,24873.39],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.392,0,0,0.392,0,0,1.175,0.587,0.196,0,0,0,0,0.392,0,0,0.196,0,0.587,0,0.392,2.937,1.762,0,0.783,0.587,2.154,3.525,2.937,1.958,4.308,4.112,2.937,2.35,2.546,3.525,4.112,4.112,4.896,4.112,6.462,7.833,9.4,7.441,5.287,12.141,10.379,25.065,16.841,18.995,21.345,9.791,21.736,16.841,28.199,19.191,20.757,19.974,14.491,22.52,18.212,9.987,16.058,28.003,14.491,19.387,7.05,16.645,13.512,19.191,32.898,10.77,30.157,21.932,34.269,34.073,28.982,58.356,63.055,55.614,79.113,30.744,37.794,57.181,72.847,64.035,83.029,90.667,100.458,0,68.147,49.935,124.544,158.813,118.082,198.566,153.918,112.795,144.518,152.547,150.785,182.116,169.584,118.278,139.427,134.923,208.944,218.736,196.999,274.937,204.245,145.889,158.618,144.714,166.842,175.458,177.221,314.298,258.096,223.631,267.496,221.673,179.962,234.402,178.2,197.782,220.106,266.517,269.062,230.485,209.924,304.898,247.13,236.947,297.261,369.912,212.078,258.096,423.763,272,328.789,259.859,317.039,256.725,226.569,340.538,291.191,325.068,215.211,224.219,208.944,224.61,206.203,165.667,130.223,115.536,0,0,0,0,0,220.694,83.617,69.322,56.789,43.669,40.536,51.502,48.76,45.431,41.515,35.444,31.724,27.415,37.598,36.815,31.919,0,0,0,144.91,28.003,32.507,36.619,0,0,105.549,34.857,40.34,0,88.513,0,0,135.51,50.131,51.306,68.343,77.938,0,0,275.916,93.212,85.771,104.962,109.074,0,0,337.209,112.795,129.244,122.978,111.228,0,0,302.157,118.865,103.395,0,0,0,0,525.788,106.528,163.317,159.988,130.027,0,0,344.846,134.14,124.936,110.249,101.829,0,0,324.481,125.523,85.967,88.317,69.126,0,0,214.427,82.638,91.254,120.236,0,0,0,254.571,81.855,73.63,62.468,62.664,0,0,190.537,71.084,74.609,59.139,50.131,0,0,185.445,64.426,0,80.484,45.235,0,0,141.189,53.852,43.669,0,0,0,0,177.221,42.102,40.927,46.41,36.032,0,0,109.074,44.844,41.123,32.311,35.053,0,0,111.816,51.698,42.102,22.716,36.032],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.392,0.392,0.392,0.784,0.784,0.784,1.959,2.546,2.35,2.35,2.35,1.958,1.958,2.35,1.175,0.588,0.588,0.588,1.175,1.175,1.567,4.112,5.874,5.874,6.461,7.048,8.615,12.14,14.685,13.706,16.252,20.364,22.518,24.281,24.673,24.673,25.848,28.002,28.59,28.59,32.115,37.598,44.452,48.368,49.543,57.572,63.055,84.008,94.387,105.549,117.494,119.844,136.293,140.993,158.813,152.939,156.855,157.834,150.98,163.709,160.185,153.331,141.19,150.002,143.736,143.149,135.708,129.833,125.133,134.337,151.177,133.944,149.61,152.155,179.374,196.802,212.272,251.437,281.594,326.438,375.394,384.206,387.731,410.839,454.704,460.383,480.357,515.41,536.755,506.011,536.364,529.118,580.815,675.593,710.646,818.545,872.005,984.8,1061.171,1163.783,1190.024,1213.327,1264.829,1184.541,1170.05,1192.178,1256.604,1322.793,1369.007,1461.828,1496.489,1524.1,1543.291,1553.082,1510.98,1467.702,1447.924,1487.285,1541.136,1618.878,1727.756,1804.715,1817.835,1876.779,1877.758,1761.242,1723.252,1766.138,1767.704,1776.516,1806.478,1876.974,1945.904,1985.069,2062.224,2165.619,2108.635,2136.246,2350.085,2317.187,2398.846,2421.758,2441.536,2328.349,2342.84,2425.282,2292.71,2345.778,2232.2,2196.56,2088.465,2056.35,2035.984,1861.113,1700.145,1490.613,1275.402,1051.183,842.239,617.629,411.426,466.453,419.847,373.633,430.422,474.091,514.627,566.129,614.889,439.626,397.524,363.646,338.581,322.327,319.389,304.702,287.861,242.43,200.915,165.471,278.657,279.245,274.154,273.958,242.039,242.039,347.588,382.445,277.875,249.872,305.878,269.259,269.259,404.769,349.351,365.8,393.803,471.741,383.228,383.228,659.144,616.846,652.486,706.142,746.873,668.935,668.935,1006.144,843.023,879.055,916.262,922.528,813.454,813.454,1115.611,897.267,887.867,758.623,635.645,524.417,524.417,1050.205,854.576,899.028,955.621,1085.648,1085.648,1085.648,1430.494,1038.846,1057.254,1004.186,946.027,816,816,1140.481,921.158,872.985,836.366,795.243,693.414,693.414,907.841,665.998,631.729,665.998,577.681,508.555,508.555,763.126,630.554,621.546,592.76,535.188,535.188,535.188,725.725,542.238,534.992,520.501,508.164,445.5,445.5,630.945,504.834,433.75,439.625,425.721,375.59,375.59,516.779,385.186,364.429,364.429,283.945,238.71,238.71,415.931,316.844,303.919,306.66,342.692,342.692,342.692,451.766,319.389,318.41,309.794,298.437,262.405,262.405,374.221,316.845,314.103,295.696,299.417],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.112,0.112,0.28,0.308,0.336,0.336,0.28,0.28,0.28,0.168,0.084,0.056,0.084,0.084,0.168,0.168,0.168,0.587,0.839,0.811,0.923,0.923,1.231,1.678,1.678,1.706,2.322,2.797,3.133,3.161,3.021,3.105,3.413,3.385,3.497,3.665,4.252,5.008,5.847,6.322,6.49,7.525,8.42,11.078,12.365,13.736,15.722,16.365,17.736,18.659,19.107,19.443,19.694,19.498,20.17,20.282,20.478,17.876,17.428,18.463,17.68,18.379,16.169,15.946,16.449,16.897,17.596,17.065,18.603,20.729,23.247,26.184,27.583,31.22,38.689,42.326,50.495,49.991,50.523,54.551,56.621,56.761,60.678,62.328,72.287,66.888,68.455,65.181,73.826,84.652,88.568,102.584,124.572,130.95,144.462,148.463,147.316,156.464,152.323,147.232,151.036,149.666,157.722,167.43,169.556,184.606,196.887,197.81,201.195,192.02,184.606,181.529,167.57,183.291,199.321,208.609,226.149,233.982,234.625,242.794,223.351,214.735,214.232,214.092,220.862,228.079,224.582,242.682,249.732,252.138,256.53,270.937,268.307,275.189,292.17,295.722,308.843,303.499,295.946,302.325,297.821,285.931,288.673,288.141,281.763,268.503,261.677,261.397,242.207,224.275,196.44,182.2,150.169,120.32,88.233,58.775,35.108,48.033,43.473,53.376,61.489,67.727,73.518,80.875,56.313,50.858,46.886,43.837,42.13,40.256,38.27,36.563,34.633,28.702,23.639,19.107,35.892,34.521,33.906,34.577,34.577,34.577,49.655,33.934,35.696,31.052,38.465,38.465,38.465,42.746,44.928,46.494,56.257,54.747,54.747,54.747,74.805,80.959,85.883,91.114,95.562,95.562,95.562,104.318,107.116,113.326,115.9,116.208,116.208,116.208,111.2,112.067,108.375,90.806,74.917,74.917,74.917,106.864,105.102,113.662,136.517,155.093,155.093,155.093,129.244,133.188,127.705,120.6,116.571,116.571,116.571,113.662,112.431,106.864,103.731,99.059,99.059,99.059,83.337,77.211,77.966,82.526,72.651,72.651,72.651,78.386,78.274,75.756,67.503,76.455,76.455,76.455,67.308,65.769,65.909,65.433,63.643,63.643,63.643,62.916,61.964,51.306,54.355,53.656,53.656,53.656,47.333,45.823,52.061,40.564,34.101,34.101,34.101,39.249,37.57,37.179,43.809,48.956,48.956,48.956,39.221,39.612,39.64,37.626,37.486,37.486,37.486,37.878,38.857,38.997,37.626,37.766]},{"iso":"PAK","continent":"Asia","population":220892331,"name":"Pakistan","population_density":255.573,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,4,4,4,5,5,5,6,6,6,6,16,19,20,28,31,53,136,236,299,454,501,730,776,875,972,1063,1201,1373,1495,1597,1717,1938,2118,2421,2686,2818,3157,3766,4035,4263,4489,4695,5011,5230,5496,5837,6383,6919,7025,7638,8348,8418,9565,10076,11155,11940,12723,13328,13915,14612,15525,16817,18114,19103,20084,20941,22049,24073,24644,26435,28736,30334,32081,34336,35298,35788,38799,38799,40151,42125,43966,45898,48091,50694,52437,54601,56349,57705,59151,61227,64028,66457,69496,72460,76398,80463,85264,89249,93983,98943,103671,108317,113702,119536,125933,125933,132405,144478,148921,154760,160118,165062,171666,176617,181088,185034,188926,192970,195745,198883,202955,206512,209337,213470,217809,221896,221896,225283,231818,234509,237489,240848,243599,246351,248872,251625,253604,255769,257914,257914,261917,263496,265083,266096,267428,269191,270400,271887,273113,273113,274289,275225,276288,277402,278305,278305,279699,280461,280461,281136,281863,282645,283487,284121,284660,285191,285921,286674,287300,288047,289215,289215,289832,290445,290958,291588,292174,293261,293261,293711,294193,294638,295053,295372,295636,295849,296149,297014,297512,298025,298025,298903,299233,299659,300030,300371,300955,301481,302020,302424,303089,303634,304386,305031,305671,306304,306886,307418,308217,309015,309581,310275,310841,311516,312263,312806,313431,313984,314616,314616,315727,316351,316934,317595,318266,318932,319317,319848,320463,321218,321877,322452,323019,323452,324034,324744,325480,326216,327063,327895,328602,329375,330200,331108,332186,332993,333970,335093,336260,337573,338875,340251,341753,343189,344839,346476,348184,349992,352296,354461,356904,359032,361082,363380,365927,368665,371508,374173,376929,379883,382892,386198,389311,392356,395185,398024,400482,403311,406810,410072,413191,416499,420294,423179,426142,429280,432327,435056,438425,440787,443246,445977,448522,451494],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.009,0.009,0.009,0.018,0.018,0.018,0.023,0.023,0.023,0.027,0.027,0.027,0.027,0.072,0.086,0.091,0.127,0.14,0.24,0.616,1.068,1.354,2.055,2.268,3.305,3.513,3.961,4.4,4.812,5.437,6.216,6.768,7.23,7.773,8.774,9.588,10.96,12.16,12.757,14.292,17.049,18.267,19.299,20.322,21.255,22.685,23.677,24.881,26.425,28.896,31.323,31.803,34.578,37.792,38.109,43.302,45.615,50.5,54.053,57.598,60.337,62.994,66.15,70.283,76.132,82.004,86.481,90.922,94.802,99.818,108.981,111.566,119.674,130.091,137.325,145.234,155.442,159.797,162.016,175.647,175.647,181.767,190.704,199.038,207.784,217.712,229.496,237.387,247.184,255.097,261.236,267.782,277.18,289.861,300.857,314.615,328.033,345.861,364.263,385.998,404.038,425.47,447.924,469.328,490.361,514.739,541.151,570.11,570.11,599.41,654.065,674.179,700.613,724.869,747.251,777.148,799.561,819.802,837.666,855.285,873.593,886.156,900.362,918.796,934.899,947.688,966.398,986.041,1004.544,1004.544,1019.877,1049.462,1061.644,1075.135,1090.341,1102.795,1115.254,1126.667,1139.13,1148.089,1157.89,1167.601,1167.601,1185.722,1192.871,1200.055,1204.641,1210.671,1218.653,1224.126,1230.858,1236.408,1236.408,1241.732,1245.969,1250.781,1255.824,1259.912,1259.912,1266.223,1269.673,1269.673,1272.729,1276.02,1279.56,1283.372,1286.242,1288.682,1291.086,1294.391,1297.8,1300.634,1304.015,1309.303,1309.303,1312.096,1314.871,1317.194,1320.046,1322.699,1327.62,1327.62,1329.657,1331.839,1333.853,1335.732,1337.176,1338.371,1339.336,1340.694,1344.61,1346.864,1349.187,1349.187,1353.162,1354.655,1356.584,1358.264,1359.807,1362.451,1364.832,1367.272,1369.101,1372.112,1374.579,1377.984,1380.904,1383.801,1386.667,1389.301,1391.71,1395.327,1398.939,1401.502,1404.644,1407.206,1410.262,1413.643,1416.102,1418.931,1421.435,1424.296,1424.296,1429.325,1432.15,1434.79,1437.782,1440.82,1443.835,1445.578,1447.981,1450.766,1454.184,1457.167,1459.77,1462.337,1464.297,1466.932,1470.146,1473.478,1476.81,1480.644,1484.411,1487.612,1491.111,1494.846,1498.957,1503.837,1507.49,1511.913,1516.997,1522.28,1528.224,1534.118,1540.348,1547.147,1553.648,1561.118,1568.529,1576.261,1584.446,1594.877,1604.678,1615.737,1625.371,1634.652,1645.055,1656.585,1668.981,1681.851,1693.916,1706.392,1719.765,1733.387,1748.354,1762.447,1776.232,1789.039,1801.891,1813.019,1825.826,1841.666,1856.434,1870.554,1885.529,1902.71,1915.77,1929.184,1943.39,1957.184,1969.539,1984.79,1995.483,2006.616,2018.979,2030.501,2043.955],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.009,0,0,0.005,0,0,0.005,0,0,0,0.045,0.014,0.005,0.036,0.014,0.1,0.376,0.453,0.285,0.702,0.213,1.037,0.208,0.448,0.439,0.412,0.625,0.779,0.552,0.462,0.543,1,0.815,1.372,1.2,0.598,1.535,2.757,1.218,1.032,1.023,0.933,1.431,0.991,1.204,1.544,2.472,2.427,0.48,2.775,3.214,0.317,5.193,2.313,4.885,3.554,3.545,2.739,2.657,3.155,4.133,5.849,5.872,4.477,4.441,3.88,5.016,9.163,2.585,8.108,10.417,7.234,7.909,10.209,4.355,2.218,13.631,0,6.121,8.936,8.334,8.746,9.928,11.784,7.891,9.797,7.913,6.139,6.546,9.398,12.68,10.996,13.758,13.418,17.828,18.403,21.735,18.04,21.431,22.454,21.404,21.033,24.378,26.411,28.96,0,29.299,54.656,20.114,26.434,24.256,22.382,29.897,22.414,20.241,17.864,17.619,18.308,12.563,14.206,18.434,16.103,12.789,18.71,19.643,18.502,0,15.333,29.585,12.182,13.491,15.207,12.454,12.459,11.413,12.463,8.959,9.801,9.711,0,18.122,7.148,7.184,4.586,6.03,7.981,5.473,6.732,5.55,0,5.324,4.237,4.812,5.043,4.088,0,6.311,3.45,0,3.056,3.291,3.54,3.812,2.87,2.44,2.404,3.305,3.409,2.834,3.382,5.288,0,2.793,2.775,2.322,2.852,2.653,4.921,0,2.037,2.182,2.015,1.879,1.444,1.195,0.964,1.358,3.916,2.254,2.322,0,3.975,1.494,1.929,1.68,1.544,2.644,2.381,2.44,1.829,3.011,2.467,3.404,2.92,2.897,2.866,2.635,2.408,3.617,3.613,2.562,3.142,2.562,3.056,3.382,2.458,2.829,2.503,2.861,0,5.03,2.825,2.639,2.992,3.038,3.015,1.743,2.404,2.784,3.418,2.983,2.603,2.567,1.96,2.635,3.214,3.332,3.332,3.834,3.767,3.201,3.499,3.735,4.111,4.88,3.653,4.423,5.084,5.283,5.944,5.894,6.229,6.8,6.501,7.47,7.411,7.732,8.185,10.43,9.801,11.06,9.634,9.281,10.403,11.531,12.395,12.871,12.065,12.477,13.373,13.622,14.967,14.093,13.785,12.807,12.852,11.128,12.807,15.84,14.767,14.12,14.976,17.18,13.061,13.414,14.206,13.794,12.354,15.252,10.693,11.132,12.363,11.521,13.455],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.009,0.009,0.009,0.014,0.014,0.014,0.019,0.019,0.01,0.01,0.055,0.064,0.069,0.105,0.114,0.214,0.59,1.043,1.283,1.971,2.179,3.18,3.374,3.722,3.785,3.744,4.084,4.161,4.5,3.925,4.26,4.812,5.188,6.148,6.723,6.542,7.525,9.82,10.495,10.527,10.735,10.296,10.527,10.92,10.589,9.376,10.63,12.025,11.482,13.324,15.107,14.433,18.422,19.191,21.604,22.731,25.796,25.76,25.203,28.041,26.981,30.517,31.504,32.427,33.323,34.464,36.823,42.831,41.283,43.542,48.087,50.844,54.312,60.641,59.98,53.035,64.081,55.973,51.677,53.379,53.804,52.341,57.914,67.48,61.74,71.537,73.329,70.532,68.744,69.396,72.148,71.36,77.227,80.848,90.763,103.027,118.216,126.858,135.609,147.067,154.713,162.328,168.878,176.886,184.111,166.071,173.939,206.141,204.851,210.252,210.13,206.101,207.038,229.452,220.394,183.602,181.107,172.981,161.288,153.112,141.649,135.338,127.886,128.732,130.756,130.95,118.387,119.514,130.665,126.744,127.446,123.943,116.754,110.711,122.124,119.254,98.628,96.247,92.467,77.26,82.928,77.617,73.388,65.511,62.582,60.762,56.524,63.256,50.684,43.536,41.676,41.327,40.109,37.171,35.786,29.054,29.815,33.265,27.941,26.76,25.239,23.736,23.46,26.33,22.459,21.413,24.718,25.071,24.614,24.456,25.932,23.062,23.415,23.786,22.803,22.246,22.065,23.604,18.316,20.353,19.742,18.982,18.539,17.131,15.673,11.716,13.074,14.953,15.025,15.332,13.453,15.984,16.283,17.248,17.57,15.198,15.588,15.647,18.087,15.941,17.458,17.996,19.72,21.096,21.349,21.834,22.029,22.608,23.214,24.36,23.518,23.74,23.405,23.595,24.342,24.392,23.604,22.494,22.793,19.651,22.119,21.888,21.145,21.679,21.888,22.4,21.282,23.686,21.44,22.033,22.377,21.988,21.517,20.462,21.354,22.164,22.712,22.626,23.477,24.641,25.275,26.814,27.914,28.811,30.359,30.68,31.269,32.586,34.668,37.113,39.272,41.39,43.31,46.158,49.205,51.532,53.981,56.222,60.758,64.33,68.59,71.723,73.534,76.526,80.325,84.535,86.976,89.24,90.657,94.396,98.737,103.301,105.863,107.253,107.189,107.976,106.627,106.061,108.279,108.079,108.106,109.297,113.67,113.879,116.165,117.564,115.518,113.105,114.237,109.954,103.906,103.208,101.315,100.564],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.002,0.002,0.002,0.003,0.001,0.001,0.001,0.007,0.009,0.01,0.014,0.016,0.03,0.084,0.142,0.181,0.281,0.306,0.452,0.468,0.478,0.476,0.494,0.483,0.564,0.495,0.531,0.545,0.625,0.682,0.789,0.849,0.856,1.009,1.325,1.356,1.387,1.337,1.299,1.418,1.341,1.119,1.165,1.371,1.572,1.507,1.699,2.016,1.89,2.411,2.388,2.74,3.179,3.289,3.221,3.555,3.264,3.524,3.662,3.993,4.126,4.369,4.544,4.81,5.528,5.062,5.381,6.23,6.629,7.205,7.946,7.26,7.207,7.996,6.508,6.349,6.496,6.228,6.855,7.957,7.693,8.82,9.345,9.199,8.885,8.571,8.495,8.623,9.067,9.633,10.419,12.089,13.783,15.545,16.311,17.802,19.044,20.185,20.643,21.497,22.165,23.725,20.663,21.641,26.391,26.26,26.553,26.245,25.306,29.577,28.593,23.677,23.355,22.096,21.246,19.844,17.602,17.034,16.442,15.717,15.873,16.064,16.913,14.883,14.44,16.366,16.279,15.534,14.9,14.036,15.816,15.256,12.81,12.349,11.822,11.037,9.258,10.067,9.458,8.704,8.079,7.54,7.293,8.075,6.448,6.22,5.193,5.299,5.043,4.59,4.528,4.151,3.358,4.259,3.992,3.386,3.135,2.885,2.807,3.351,2.86,2.716,3.059,3.095,3.111,3.011,2.949,3.294,2.946,3.001,2.926,2.771,2.773,2.669,2.617,2.617,2.509,2.424,2.38,2.241,2.068,1.536,1.674,1.577,1.824,1.859,1.922,1.716,2.113,2.189,2.27,1.951,1.849,1.895,2.235,2.016,2.064,2.218,2.331,2.597,2.636,2.71,2.771,2.886,2.8,2.964,2.994,2.943,2.978,2.934,2.994,3.133,2.968,2.856,2.848,2.807,2.441,2.723,2.644,2.67,2.693,2.769,2.791,3.04,2.665,2.659,2.771,2.769,2.707,2.643,2.674,2.707,2.769,2.756,2.806,2.982,3.153,3.331,3.454,3.529,3.64,3.861,3.835,3.929,4.198,4.453,4.768,5.023,5.216,5.665,5.962,6.303,6.607,6.862,7.19,7.79,8.219,8.87,9.179,9.446,9.828,10.306,10.586,11.025,11.168,11.574,12.159,12.619,13.11,13.352,13.483,13.589,13.643,13.322,13.206,13.33,13.427,13.475,13.784,14.403,14.679,14.765,14.532,14.393,14.141,14.18,13.253,12.978,12.828,12.444,12.396]},{"iso":"PSE","continent":"Asia","population":5101416,"name":"Palestine","population_density":778.202,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,7,16,16,19,26,30,30,31,35,38,38,39,41,44,47,48,52,59,59,59,84,91,98,109,116,119,134,161,194,217,237,254,261,263,263,267,268,271,273,284,291,294,307,313,319,329,329,335,336,340,342,342,342,343,344,344,353,353,353,362,371,374,375,375,375,375,375,375,375,375,375,376,381,388,391,398,423,423,423,423,423,429,434,446,446,447,448,449,451,457,464,464,464,472,473,481,485,487,489,489,492,505,514,555,600,675,784,833,1001,1169,1328,1382,1557,1815,1990,2185,2428,2758,3080,3334,3835,4277,4341,4647,5029,5220,5551,5931,6230,6566,6764,7064,7412,7764,8204,8549,8916,9228,9398,9744,10093,10306,10469,10621,10938,11284,11548,11837,12160,12297,12541,12770,13065,13398,13722,13928,14208,14510,14875,15184,15491,15834,16153,16534,16844,17306,17606,17989,18313,18476,18802,19213,19678,20155,20677,21251,21668,22204,22729,23281,23875,24471,25142,25575,26127,26779,27363,27919,28664,29256,29906,30574,31362,32250,33006,33843,34401,35003,35686,36151,36580,37083,37591,37963,38253,38703,39121,39541,39899,40322,40766,41078,41498,41957,42432,42840,43256,43664,43945,44299,44684,45200,45658,46100,46434,46746,47135,47616,48129,48628,49134,49579,49989,50442,50952,51528,51948,52571,53075,53520,54060,54775,55408,56090,56672,57226,57657,58158,58838,59422,60065,60784,61514,62167,63031,63867,64935,66186,67296,68768,70254,71644,73196,75007,76727,78493,80429,81890,83585,85647,88004,90192,92708,94676,96098,98038,99758,101109,102992,104879,106622,108099,109738,111102,113409,115606,117755],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.784,1.372,3.136,3.136,3.724,5.097,5.881,5.881,6.077,6.861,7.449,7.449,7.645,8.037,8.625,9.213,9.409,10.193,11.565,11.565,11.565,16.466,17.838,19.21,21.367,22.739,23.327,26.267,31.56,38.029,42.537,46.458,49.79,51.162,51.554,51.554,52.338,52.534,53.123,53.515,55.671,57.043,57.631,60.179,61.356,62.532,64.492,64.492,65.668,65.864,66.648,67.04,67.04,67.04,67.236,67.432,67.432,69.196,69.196,69.196,70.961,72.725,73.313,73.509,73.509,73.509,73.509,73.509,73.509,73.509,73.509,73.509,73.705,74.685,76.057,76.645,78.018,82.918,82.918,82.918,82.918,82.918,84.094,85.074,87.427,87.427,87.623,87.819,88.015,88.407,89.583,90.955,90.955,90.955,92.523,92.719,94.288,95.072,95.464,95.856,95.856,96.444,98.992,100.756,108.793,117.614,132.316,153.683,163.288,196.22,229.152,260.32,270.905,305.209,355.784,390.088,428.312,475.946,540.634,603.754,653.544,751.752,838.395,850.94,910.924,985.805,1023.245,1088.129,1162.618,1221.23,1287.094,1325.906,1384.714,1452.93,1521.93,1608.181,1675.809,1747.75,1808.91,1842.234,1910.058,1978.47,2020.223,2052.175,2081.971,2144.111,2211.935,2263.685,2320.336,2383.652,2410.507,2458.337,2503.227,2561.054,2626.33,2689.841,2730.222,2785.109,2844.308,2915.857,2976.429,3036.608,3103.844,3166.376,3241.061,3301.828,3392.391,3451.199,3526.276,3589.788,3621.74,3685.643,3766.209,3857.36,3950.864,4053.188,4165.706,4247.448,4352.517,4455.43,4563.635,4680.073,4796.903,4928.436,5013.314,5121.519,5249.327,5363.805,5472.794,5618.832,5734.878,5862.294,5993.238,6147.705,6321.774,6469.968,6634.04,6743.422,6861.428,6995.313,7086.464,7170.558,7269.158,7368.738,7441.659,7498.506,7586.717,7668.655,7750.985,7821.162,7904.08,7991.115,8052.274,8134.604,8224.579,8317.691,8397.668,8479.214,8559.192,8614.275,8683.667,8759.137,8860.285,8950.064,9036.707,9102.179,9163.338,9239.592,9333.879,9434.439,9532.255,9631.444,9718.674,9799.044,9887.843,9987.815,10100.725,10183.055,10305.178,10403.974,10491.205,10597.058,10737.215,10861.298,10994.986,11109.072,11217.67,11302.156,11400.364,11533.66,11648.138,11774.182,11915.123,12058.221,12186.224,12355.589,12519.465,12728.819,12974.045,13191.631,13480.179,13771.471,14043.944,14348.173,14703.173,15040.334,15386.512,15766.015,16052.406,16384.667,16788.868,17250.897,17679.797,18172.994,18558.769,18837.515,19217.801,19554.963,19819.791,20188.904,20558.802,20900.472,21189.999,21511.282,21778.659,22230.886,22661.551,23082.807],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.588,1.764,0,0.588,1.372,0.784,0,0.196,0.784,0.588,0,0.196,0.392,0.588,0.588,0.196,0.784,1.372,0,0,4.901,1.372,1.372,2.156,1.372,0.588,2.94,5.293,6.469,4.509,3.92,3.332,1.372,0.392,0,0.784,0.196,0.588,0.392,2.156,1.372,0.588,2.548,1.176,1.176,1.96,0,1.176,0.196,0.784,0.392,0,0,0.196,0.196,0,1.764,0,0,1.764,1.764,0.588,0.196,0,0,0,0,0,0,0,0,0.196,0.98,1.372,0.588,1.372,4.901,0,0,0,0,1.176,0.98,2.352,0,0.196,0.196,0.196,0.392,1.176,1.372,0,0,1.568,0.196,1.568,0.784,0.392,0.392,0,0.588,2.548,1.764,8.037,8.821,14.702,21.367,9.605,32.932,32.932,31.168,10.585,34.304,50.574,34.304,38.225,47.634,64.688,63.12,49.79,98.208,86.643,12.546,59.983,74.881,37.441,64.884,74.489,58.611,65.864,38.813,58.807,68.216,69,86.251,67.628,71.941,61.159,33.324,67.824,68.412,41.753,31.952,29.796,62.14,67.824,51.75,56.651,63.316,26.855,47.83,44.889,57.827,65.276,63.512,40.381,54.887,59.199,71.549,60.571,60.179,67.236,62.532,74.685,60.767,90.563,58.807,75.077,63.512,31.952,63.904,80.566,91.151,93.503,102.325,112.518,81.742,105.069,102.913,108.205,116.438,116.83,131.532,84.878,108.205,127.808,114.478,108.989,146.038,116.046,127.416,130.944,154.467,174.069,148.194,164.072,109.381,118.006,133.884,91.151,84.094,98.6,99.58,72.921,56.847,88.211,81.938,82.33,70.177,82.918,87.035,61.159,82.33,89.975,93.111,79.978,81.546,79.978,55.083,69.392,75.469,101.148,89.779,86.643,65.472,61.159,76.253,94.288,100.56,97.816,99.188,87.231,80.37,88.799,99.972,112.91,82.33,122.123,98.796,87.231,105.853,140.157,124.083,133.688,114.086,108.597,84.486,98.208,133.296,114.478,126.043,140.941,143.098,128.004,169.365,163.876,209.354,245.226,217.587,288.547,291.292,272.473,304.229,354.999,337.161,346.178,379.502,286.391,332.261,404.202,462.029,428.901,493.196,385.775,278.746,380.287,337.161,264.828,369.113,369.897,341.67,289.527,321.283,267.377,452.227,430.665,421.256],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.588,2.352,2.352,2.94,4.312,5.096,5.096,5.292,5.488,4.312,4.312,3.92,2.94,2.744,3.332,3.332,3.332,4.116,4.116,3.92,8.429,9.213,9.997,11.957,12.545,11.761,14.701,19.994,21.562,24.699,27.247,28.423,28.423,28.227,25.287,20.778,14.505,10.584,7.056,5.88,5.88,6.076,8.624,9.016,9.996,11.368,10.976,9.996,8.82,9.016,6.86,5.684,4.508,2.744,2.94,1.764,3.332,2.548,2.156,3.92,5.684,6.076,6.076,6.076,4.312,4.312,4.312,2.548,0.784,0.196,0,0.196,1.176,2.548,3.136,4.508,9.409,9.409,9.409,9.213,8.233,8.037,8.429,9.409,4.508,4.704,4.9,5.096,5.488,5.488,5.88,3.528,3.528,4.9,4.9,6.272,6.664,5.88,4.9,4.9,5.488,6.468,8.036,14.505,22.542,36.852,57.827,67.432,99.776,130.16,159.564,162.112,187.595,223.467,236.404,265.024,279.726,311.482,343.434,382.639,446.543,482.612,460.854,482.612,509.859,482.612,484.376,509.075,469.478,448.699,474.966,473.79,467.125,498.684,520.051,513.19,526.52,521.815,516.326,525.343,525.539,498.292,443.993,406.161,396.36,403.025,421.451,410.278,405.182,390.284,406.162,421.255,416.942,414.394,426.156,409.886,401.457,433.801,457.52,473.202,475.554,477.514,476.534,510.838,516.718,548.082,535.34,549.846,553.179,517.895,519.267,525.148,555.532,558.472,601.99,639.431,657.661,730.778,769.787,797.426,822.713,846.04,875.247,847.607,874.07,896.809,908.374,909.158,938.758,937.974,933.858,979.924,1026.186,1072.447,1106.163,1161.246,1124.589,1126.549,1133.017,1093.224,1022.851,947.382,898.768,807.617,755.083,725.288,673.342,664.521,650.604,634.922,622.377,610.615,636.098,637.862,649.035,646.683,658.052,655.112,623.16,631.393,624.532,635.705,632.373,639.038,622.964,604.145,625.315,650.211,675.302,671.97,681.379,681.967,696.865,724.505,748.224,766.846,748.616,772.923,772.531,772.531,798.014,849.372,873.483,894.261,926.017,912.491,898.181,909.158,936.601,910.922,912.882,920.135,949.147,968.554,1053.433,1119.101,1195.159,1325.907,1417.451,1565.057,1713.251,1857.72,1992.584,2183.707,2311.514,2412.466,2574.381,2572.225,2613.194,2744.923,2902.723,2976.625,3132.66,3172.257,3071.501,3165.397,3170.297,3030.923,2938.007,2879.003,2727.477,2631.229,2673.766,2560.856,2675.922,2841.759,2893.902],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.728,0.728,0.672,0.532,0.616,0.532,0.364,0.308,0.392,0.448,0.364,0.392,0.588,0.56,0.504,1.12,1.232,1.4,1.596,1.596,1.68,2.1,2.156,2.884,3.332,3.584,3.864,3.976,3.612,2.856,2.044,1.428,0.952,0.532,0.644,0.784,0.868,1.12,1.26,1.344,1.568,1.26,1.232,1.176,0.924,0.812,0.644,0.364,0.392,0.252,0.224,0.364,0.308,0.308,0.56,0.784,0.84,0.868,0.616,0.616,0.616,0.364,0.112,0.028,0,0,0.028,0.168,0.364,0.448,0.644,1.344,1.344,1.316,1.176,0.98,1.064,1.008,0.644,0.644,0.672,0.7,0.728,0.616,0.644,0.504,0.504,0.476,0.672,0.672,0.84,0.784,0.644,0.7,0.7,0.56,0.896,0.924,1.96,3.164,5.209,8.261,9.549,13.89,18.342,21.647,21.899,24.699,28.872,32.4,33.156,35.256,40.045,47.55,49.762,56.567,64.044,60.375,62.14,63.596,59.927,62.084,58.695,54.691,62.308,59.283,56.987,61.384,61.972,63.652,64.94,65.808,69,65.36,65.304,65.22,58.863,53.767,47.746,47.886,52.814,50.518,48.838,51.918,51.19,53.767,51.302,49.874,51.806,52.786,49.51,53.515,55.139,58.947,59.339,58.611,59.143,62.308,65.136,65.36,68.076,67.824,69.953,69.421,65.052,63.512,66.34,66.424,71.381,75.273,82.274,89.387,95.268,98.46,100.896,104.173,106.245,108.961,109.409,109.857,113.414,114.31,113.246,117.418,115.206,121.283,124.531,128.34,136.853,142.453,145.03,144.078,142.733,143.154,134.108,121.255,114.17,104.957,99.748,91.011,84.486,83.17,82.918,78.858,76.477,78.494,79.11,78.27,79.418,80.958,82.358,82.162,81.154,80.286,78.438,76.365,77.513,78.914,79.642,77.569,78.438,79.418,82.106,82.022,83.17,84.962,88.071,90.815,92.607,93.419,95.184,92.971,96.248,97.9,98.88,101.316,107.057,108.653,115.99,114.842,116.242,115.85,114.758,113.778,112.406,111.314,115.15,120.079,126.295,136.461,140.829,154.383,171.409,182.358,203.137,226.464,241.194,261.244,282.051,295.184,313.554,326.548,325.848,334.389,348.671,363.961,377.066,398.069,398.965,397.873,404.734,395.156,366.985,358.444,340.83,334.529,336.069,327.64,317.671,344.442,353.235,360.572]},{"iso":"PAN","continent":"North America","population":4314768,"name":"Panama","population_density":55.133,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,8,11,27,36,43,55,69,86,109,137,200,313,345,345,443,558,674,786,901,989,1181,1181,1317,1475,1673,1801,1988,2100,2249,2528,2752,2974,3234,3400,3472,3574,3751,4016,4210,4273,4467,4658,4821,5166,5338,5538,5779,6021,6021,6378,6532,6720,7090,7090,7197,7523,7731,7868,8070,8282,8448,8616,8783,8944,9118,9268,9449,9606,9726,9867,9977,10116,10267,10577,10926,11183,11447,11728,12131,12531,13018,13463,13837,14095,14609,15044,15463,16004,16425,16854,17233,17889,18586,19211,20059,21418,21422,21962,22597,23351,24274,25222,26030,26752,27314,28030,29037,29905,30658,31686,32785,33550,34463,35237,35995,36983,38149,39334,40291,41251,42216,43257,44332,45633,47173,48096,49243,50373,51408,52261,53468,54426,55153,55906,56817,57993,58864,60296,61442,62223,63269,64191,65256,66383,67453,68456,69424,70231,71418,72560,73651,74492,75394,76464,77377,78446,79402,80665,81940,82543,82790,83754,83855,84392,85480,86900,87485,88381,89082,89982,90624,91337,92065,92982,93552,94084,94914,95596,96305,97043,97578,98407,99042,99715,100330,101041,101745,102204,102832,103466,104138,104879,105601,106203,106810,107284,107990,108726,109431,110108,110555,111277,111853,112595,113342,113962,114653,115286,115919,116602,117300,118054,118841,119666,120313,120802,121296,122128,122883,123498,124107,124745,125181,125739,126435,127227,127866,128515,129200,129751,130422,131247,132045,132867,133598,134336,134915,135592,136024,136567,137760,138506,139527,140331,141302,142465,143352,144477,145309,146653,147667,148721,149833,151089,152289,153577,154783,155658,156930,158532,160287,161744,163453,164729,165806,167311,169339,171219,173607,175907,177719,179230,181166,182977,185424,187779,190585,193007,194619,196987,199947,203295],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.232,1.854,2.549,6.258,8.343,9.966,12.747,15.992,19.932,25.262,31.751,46.352,72.542,79.958,79.958,102.671,129.323,156.208,182.165,208.818,229.213,273.711,273.711,305.231,341.849,387.738,417.404,460.743,486.701,521.233,585.895,637.809,689.261,749.519,787.991,804.678,828.318,869.34,930.757,975.719,990.32,1035.282,1079.548,1117.325,1197.283,1237.146,1283.499,1339.354,1395.44,1395.44,1478.179,1513.871,1557.442,1643.194,1643.194,1667.992,1743.547,1791.753,1823.505,1870.321,1919.454,1957.927,1996.863,2035.567,2072.881,2113.207,2147.972,2189.921,2226.307,2254.119,2286.797,2312.291,2344.506,2379.502,2451.348,2532.233,2591.796,2652.982,2718.107,2811.507,2904.212,3017.08,3120.214,3206.893,3266.688,3385.814,3486.63,3583.738,3709.122,3806.694,3906.12,3993.957,4145.993,4307.532,4452.383,4648.917,4963.882,4964.809,5089.961,5237.13,5411.878,5625.795,5845.505,6032.769,6200.102,6330.352,6496.294,6729.678,6930.848,7105.365,7343.616,7598.323,7775.621,7987.22,8166.604,8342.279,8571.26,8841.495,9116.133,9337.93,9560.421,9784.072,10025.336,10274.481,10576.003,10932.917,11146.833,11412.665,11674.556,11914.43,12112.123,12391.86,12613.888,12782.379,12956.896,13168.031,13440.584,13642.448,13974.332,14239.931,14420.938,14663.361,14877.046,15123.872,15385.068,15633.054,15865.511,16089.857,16276.889,16551.991,16816.663,17069.516,17264.428,17473.477,17721.463,17933.062,18180.815,18402.38,18695.096,18990.592,19130.345,19187.59,19411.009,19434.417,19558.873,19811.03,20140.133,20275.714,20483.372,20645.838,20854.424,21003.215,21168.461,21337.184,21549.71,21681.815,21805.112,21997.475,22155.537,22319.856,22490.896,22614.889,22807.02,22954.189,23110.165,23252.699,23417.482,23580.642,23687.021,23832.568,23979.505,24135.249,24306.985,24474.317,24613.838,24754.518,24864.373,25027.997,25198.574,25361.966,25518.869,25622.467,25789.799,25923.294,26095.262,26268.388,26412.081,26572.228,26718.934,26865.639,27023.933,27185.703,27360.451,27542.848,27734.052,27884.002,27997.334,28111.824,28304.65,28479.631,28622.165,28763.308,28911.172,29012.22,29141.544,29302.85,29486.406,29634.502,29784.915,29943.673,30071.373,30226.886,30418.09,30603.036,30793.544,30962.963,31134.003,31268.193,31425.096,31525.218,31651.064,31927.557,32100.451,32337.08,32523.417,32748.458,33017.998,33223.571,33484.303,33677.129,33988.618,34223.625,34467.902,34725.621,35016.715,35294.829,35593.339,35872.844,36075.636,36370.438,36741.721,37148.463,37486.141,37882.222,38177.951,38427.559,38776.361,39246.374,39682.087,40235.535,40768.588,41188.541,41538.734,41987.426,42407.147,42974.269,43520.069,44170.393,44731.721,45105.322,45654.135,46340.151,47116.091],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.622,0.695,3.708,2.086,1.622,2.781,3.245,3.94,5.331,6.489,14.601,26.189,7.416,0,22.713,26.653,26.884,25.957,26.653,20.395,44.498,0,31.52,36.618,45.889,29.666,43.34,25.957,34.533,64.662,51.915,51.451,60.258,38.473,16.687,23.64,41.022,61.417,44.962,14.601,44.962,44.267,37.777,79.958,39.863,46.352,55.855,56.086,0,82.739,35.691,43.571,85.752,0,24.799,75.554,48.207,31.751,46.816,49.134,38.473,38.936,38.704,37.314,40.327,34.764,41.949,36.387,27.811,32.678,25.494,32.215,34.996,71.846,80.885,59.563,61.185,65.125,93.4,92.705,112.868,103.134,86.679,59.795,119.126,100.817,97.108,125.383,97.572,99.426,87.838,152.036,161.538,144.851,196.534,314.965,0.927,125.152,147.169,174.749,213.916,219.711,187.264,167.332,130.25,165.942,233.385,201.17,174.517,238.252,254.707,177.298,211.599,179.384,175.676,228.981,270.235,274.638,221.796,222.492,223.65,241.264,249.144,301.523,356.914,213.916,265.831,261.891,239.874,197.693,279.737,222.028,168.491,174.517,211.135,272.552,201.865,331.883,265.599,181.006,242.423,213.685,246.827,261.196,247.986,232.457,224.346,187.032,275.102,264.672,252.853,194.912,209.049,247.986,211.599,247.754,221.565,292.716,295.497,139.753,57.245,223.419,23.408,124.456,252.157,329.102,135.581,207.659,162.465,208.586,148.791,165.246,168.723,212.526,132.104,123.297,192.363,158.062,164.319,171.04,123.993,192.131,147.169,155.976,142.534,164.783,163.161,106.379,145.547,146.937,155.744,171.736,167.332,139.521,140.68,109.855,163.624,170.577,163.392,156.903,103.598,167.332,133.495,171.968,173.126,143.693,160.148,146.705,146.705,158.294,161.77,174.749,182.397,191.204,149.95,113.332,114.491,192.826,174.98,142.534,141.143,147.864,101.048,129.323,161.306,183.556,148.096,150.414,158.757,127.701,155.512,191.204,184.946,190.509,169.418,171.04,134.19,156.903,100.121,125.847,276.492,172.895,236.629,186.337,225.041,269.539,205.573,260.732,192.826,311.488,235.007,244.277,257.72,291.093,278.115,298.51,279.505,202.792,294.801,371.283,406.743,337.677,396.082,295.729,249.608,348.802,470.014,435.713,553.448,533.053,419.953,350.193,448.692,419.721,567.122,545.8,650.325,561.328,373.601,548.813,686.016,775.94],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.622,2.317,6.025,8.111,9.733,12.514,15.759,19.699,23.408,29.202,40.095,64.198,69.992,67.211,86.679,109.392,130.945,150.413,162.465,156.671,193.753,193.753,202.56,212.525,231.53,235.239,251.926,257.488,247.523,312.185,332.58,347.413,361.782,370.589,343.936,341.619,348.108,344.863,337.91,301.06,285.764,291.558,312.648,368.966,367.807,352.742,363.635,405.12,360.158,398.63,396.544,360.157,406.046,359.694,328.638,348.106,396.313,345.325,356.45,362.013,314.734,353.67,367.575,329.335,321.455,324.468,319.601,306.854,296.192,289.934,276.724,271.625,266.294,303.376,342.312,365.488,398.862,431.309,499.215,559.705,637.577,668.865,674.659,674.891,732.832,768.524,772.232,804.91,789.614,785.906,787.065,879.306,921.718,965.752,1065.178,1254.76,1158.115,1183.841,1243.172,1265.885,1318.263,1393.123,1383.853,1236.22,1365.543,1406.333,1492.549,1518.97,1479.571,1498.112,1565.555,1575.521,1656.87,1670.312,1612.603,1640.414,1736.132,1772.518,1739.607,1784.801,1796.852,1858.732,1932.2,2004.742,2091.421,2030.699,2074.734,2114.133,2130.357,2086.786,2117.379,2037.884,1849.461,1810.062,1755.366,1766.027,1728.018,1862.208,1848.07,1807.048,1880.98,1920.148,1955.84,1944.484,1990.605,1891.179,1849.926,1855.952,1888.631,1939.618,1945.644,1879.36,1840.423,1855.952,1843.205,1903.927,1850.39,1878.434,1921.078,1865.919,1714.115,1689.548,1501.357,1378.059,1408.651,1445.037,1285.121,1353.027,1458.247,1443.414,1568.797,1609.587,1526.153,1409.577,1406.1,1321.738,1351.636,1301.112,1316.64,1322.434,1277.704,1257.309,1272.374,1305.053,1255.224,1261.945,1260.787,1196.126,1217.68,1172.486,1181.061,1196.821,1221.619,1196.357,1173.876,1177.352,1195.429,1219.069,1226.717,1211.884,1148.15,1175.961,1168.776,1230.889,1240.391,1213.507,1210.263,1200.065,1243.172,1234.134,1262.409,1265.19,1274.461,1321.972,1311.774,1278.401,1246.187,1280.719,1293.929,1261.714,1220.46,1177.12,1128.218,1144.209,1191.024,1181.754,1154.87,1162.75,1180.364,1160.201,1214.665,1276.546,1300.186,1307.139,1328.461,1349.087,1324.52,1353.722,1298.331,1232.974,1324.52,1306.906,1374.117,1389.414,1480.265,1592.901,1698.353,1833.238,1749.572,1888.165,1886.543,1944.483,1977.162,1998.716,2071.258,2109.036,2195.715,2087.019,2146.813,2273.819,2422.842,2469.426,2587.393,2584.612,2554.715,2700.725,2875.938,2940.368,3087.073,3282.449,3306.32,3360.784,3559.868,3630.787,3727.895,3837.982,3934.859,3963.134,3916.782,4115.402,4352.726,4708.945],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.788,2.251,2.582,3.245,3.642,5.43,8.939,9.602,9.138,11.82,14.866,17.779,19.402,19.468,21.322,27.679,24.434,25.13,26.52,29.368,29.798,33.076,30.427,35.36,40.095,42.28,43.075,47.445,46.75,45.425,43.869,40.492,41.85,40.923,34.4,35.327,39.267,41.287,46.849,43.77,43.969,49.862,51.451,45.127,51.551,45.227,45.756,51.385,43.406,38.936,49.73,44.796,44.233,44.697,39.466,44.962,46.982,41.717,40.161,41.386,39.664,38.638,38.34,36.751,35.89,34.201,33.043,33.076,37.347,43.704,48.24,52.312,57.974,66.714,74.959,80.819,83.997,87.871,87.672,95.387,96.446,97.075,98.863,98.069,99.889,103.896,108.597,117.272,124.092,134.257,165.313,151.241,156.572,155.877,157.764,167.63,170.941,152.698,176.47,177.199,179.881,188.257,186.436,179.98,187.264,199.746,206.467,212.989,205.275,201.633,209.414,213.983,216.83,223.187,224.743,231.067,240.437,243.317,247.787,259.541,258.415,264.606,270.069,269.87,262.52,259.408,240.139,233.649,220.604,213.354,218.022,218.618,226.067,232.292,234.08,243.781,244.145,240.47,248.946,236.96,232.226,238.417,230.504,239.278,241.827,240.635,233.053,229.709,233.087,236.596,232.689,226.531,232.226,246.595,236.695,209.447,211.135,179.086,165.213,159.419,164.22,163.624,185.112,176.404,202.858,206.335,193.919,171.007,182,171.206,165.611,163.293,164.617,164.485,164.816,152.168,160.744,164.154,158.956,156.737,156.804,155.678,153.162,146.507,146.474,146.441,150.612,150.977,147.599,152.5,147.401,149.785,151.904,150.712,149.222,144.09,147.897,151.274,152.466,152.831,150.016,150.48,156.638,153.691,157.234,155.777,156.009,161.538,165.975,166.438,161.671,155.413,159.85,159.883,154.188,147.037,146.739,144.984,147.103,142.6,143.825,144.62,145.944,147.5,151.308,155.049,159.32,159.519,165.578,168.292,170.047,170.974,171.173,158.161,149.718,162.002,162.498,171.868,179.318,189.052,213.254,224.644,222.392,225.24,235.934,242.887,245.635,243.946,256.163,258.647,273.744,269.175,264.573,271.791,288.014,304.535,313.044,326.983,329.301,335.989,343.703,357.808,361.946,392.771,412.338,430.084,444.454,458.724,451.539,470.312,469.219,485.972,506.169,509.513,523.816,561.858,591.689]},{"iso":"PNG","continent":"Oceania","population":8947027,"name":"Papua New Guinea","population_density":18.22,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,15,16,16,19,27,30,31,32,39,62,62,63,63,63,72,91,110,111,114,153,163,188,188,214,214,214,287,271,271,271,323,333,347,347,361,361,361,401,401,419,419,424,453,453,459,459,460,471,471,479,488,497,497,503,504,507,508,508,510,511,511,516,516,516,516,517,517,527,527,531,532,532,532,532,534,534,539,539,540,540,540,541,541,549,549,549,554,565,565,578,578,578,581,581,581,581,581,583,583,583,583,588,588,588,589,589,589,589,590,597,597,597,597,597,599,599,599,599,599,600,600,602,602,602,604,604,604,604,604,630,630,645,645,645,645,645,656,669,669,671,671,671,671,671,684,684,684,720,720,725,725,729,729,760],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.112,0.112,0.112,0.112,0.112,0.112,0.112,0.112,0.112,0.112,0.112,0.112,0.112,0.112,0.112,0.112,0.112,0.224,0.224,0.224,0.224,0.224,0.224,0.224,0.224,0.224,0.224,0.782,0.782,0.782,0.782,0.782,0.782,0.894,0.894,0.894,0.894,0.894,0.894,0.894,0.894,0.894,0.894,0.894,0.894,0.894,0.894,0.894,0.894,0.894,0.894,0.894,0.894,0.894,0.894,0.894,0.894,0.894,0.894,0.894,0.894,0.894,0.894,0.894,0.894,0.894,0.894,0.894,0.894,0.894,0.894,0.894,0.894,0.894,0.894,0.894,0.894,0.894,0.894,0.894,0.894,0.894,0.894,0.894,0.894,0.894,0.894,0.894,0.894,0.894,0.894,0.894,0.894,0.894,1.006,1.006,1.118,1.118,1.229,1.229,1.229,1.229,1.229,1.229,1.229,1.229,1.229,1.229,1.229,1.229,1.229,1.229,1.229,1.229,1.229,1.229,1.229,1.229,1.229,1.677,1.788,1.788,2.124,3.018,3.353,3.465,3.577,4.359,6.93,6.93,7.041,7.041,7.041,8.047,10.171,12.295,12.406,12.742,17.101,18.218,21.013,21.013,23.919,23.919,23.919,32.078,30.289,30.289,30.289,36.101,37.219,38.784,38.784,40.349,40.349,40.349,44.819,44.819,46.831,46.831,47.39,50.631,50.631,51.302,51.302,51.414,52.643,52.643,53.537,54.543,55.549,55.549,56.22,56.332,56.667,56.779,56.779,57.002,57.114,57.114,57.673,57.673,57.673,57.673,57.785,57.785,58.902,58.902,59.349,59.461,59.461,59.461,59.461,59.685,59.685,60.243,60.243,60.355,60.355,60.355,60.467,60.467,61.361,61.361,61.361,61.92,63.149,63.149,64.602,64.602,64.602,64.938,64.938,64.938,64.938,64.938,65.161,65.161,65.161,65.161,65.72,65.72,65.72,65.832,65.832,65.832,65.832,65.944,66.726,66.726,66.726,66.726,66.726,66.95,66.95,66.95,66.95,66.95,67.061,67.061,67.285,67.285,67.285,67.508,67.508,67.508,67.508,67.508,70.414,70.414,72.091,72.091,72.091,72.091,72.091,73.32,74.773,74.773,74.997,74.997,74.997,74.997,74.997,76.45,76.45,76.45,80.474,80.474,81.033,81.033,81.48,81.48,84.944],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.112,0,0,0,0,0,0,0,0,0,0.559,0,0,0,0,0,0.112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.112,0,0.112,0,0.112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.447,0.112,0,0.335,0.894,0.335,0.112,0.112,0.782,2.571,0,0.112,0,0,1.006,2.124,2.124,0.112,0.335,4.359,1.118,2.794,0,2.906,0,0,8.159,-1.788,0,0,5.812,1.118,1.565,0,1.565,0,0,4.471,0,2.012,0,0.559,3.241,0,0.671,0,0.112,1.229,0,0.894,1.006,1.006,0,0.671,0.112,0.335,0.112,0,0.224,0.112,0,0.559,0,0,0,0.112,0,1.118,0,0.447,0.112,0,0,0,0.224,0,0.559,0,0.112,0,0,0.112,0,0.894,0,0,0.559,1.229,0,1.453,0,0,0.335,0,0,0,0,0.224,0,0,0,0.559,0,0,0.112,0,0,0,0.112,0.782,0,0,0,0,0.224,0,0,0,0,0.112,0,0.224,0,0,0.224,0,0,0,0,2.906,0,1.677,0,0,0,0,1.229,1.453,0,0.224,0,0,0,0,1.453,0,0,4.024,0,0.559,0,0.447,0,3.465],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.112,0.112,0.112,0.112,0.112,0.112,0.112,0.112,0,0,0.559,0.559,0.559,0.559,0.559,0.559,0.671,0.671,0.112,0.112,0.112,0.112,0.112,0.112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.112,0.112,0.224,0.224,0.336,0.336,0.336,0.336,0.224,0.224,0.112,0.112,0,0,0,0,0,0,0,0,0,0,0,0,0,0.447,0.559,0.559,0.894,1.788,2.123,2.235,2.347,2.682,5.141,5.141,4.918,4.024,3.689,4.583,6.595,7.937,5.478,5.813,10.06,11.178,13.972,12.966,13.748,11.624,11.512,19.336,13.189,12.071,9.277,15.089,13.301,14.866,14.866,8.272,10.06,10.06,14.531,8.719,9.613,8.048,8.607,10.283,10.283,10.954,6.483,6.595,5.812,5.812,6.147,3.912,4.918,4.247,4.918,4.918,4.024,4.136,3.242,2.46,1.566,1.566,1.454,1.342,1.007,0.895,1.007,0.783,1.789,1.789,1.677,1.789,1.789,1.789,1.677,1.901,0.783,1.342,0.895,0.895,0.895,0.895,1.007,0.783,1.677,1.118,1.118,1.565,2.794,2.794,4.135,4.135,3.241,3.576,3.576,3.017,1.788,1.788,0.559,0.559,0.559,0.224,0.783,0.783,0.783,0.895,0.671,0.671,0.671,0.783,1.006,1.006,1.006,0.894,0.894,1.118,1.118,1.006,0.224,0.224,0.336,0.336,0.56,0.336,0.336,0.56,0.56,0.56,0.448,0.448,3.13,3.13,4.807,4.583,4.583,4.583,4.583,5.812,4.359,4.359,2.906,2.906,2.906,2.906,2.906,3.13,1.677,1.677,5.477,5.477,6.036,6.036,6.483,5.03,8.495],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.016,0.016,0.016,0.016,0.016,0.016,0.016,0,0,0,0.08,0.08,0.08,0.08,0.08,0.08,0.096,0.016,0.016,0.016,0.016,0.016,0.016,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.016,0.016,0.032,0.032,0.048,0.048,0.048,0.032,0.032,0.016,0.016,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.064,0.08,0.08,0.128,0.255,0.303,0.319,0.271,0.367,0.734,0.687,0.575,0.527,0.511,0.639,0.83,0.766,0.782,0.814,1.437,1.597,1.852,1.549,1.661,1.645,1.597,2.14,1.724,1.325,1.325,1.74,1.9,2.124,0.958,1.437,1.437,1.437,1.245,1.086,1.15,1.15,1.006,1.469,1.469,0.926,0.926,0.655,0.83,0.75,0.415,0.559,0.607,0.607,0.687,0.527,0.575,0.463,0.319,0.208,0.224,0.128,0.192,0.144,0.128,0.128,0.112,0.096,0.255,0.176,0.24,0.255,0.255,0.24,0.24,0.112,0.112,0.128,0.112,0.128,0.128,0.128,0.112,0.112,0.16,0.16,0.144,0.224,0.399,0.383,0.591,0.463,0.463,0.511,0.431,0.255,0.255,0.048,0.08,0.08,0.032,0.032,0.112,0.112,0.112,0.096,0.096,0.096,0.096,0.032,0.144,0.144,0.128,0.128,0.128,0.16,0.144,0.032,0.032,0.032,0.048,0.048,0.048,0.048,0.048,0.08,0.08,0.064,0.064,0.032,0.447,0.447,0.655,0.655,0.655,0.655,0.655,0.415,0.623,0.383,0.415,0.415,0.415,0.415,0.24,0.24,0.24,0.208,0.782,0.782,0.862,0.862,0.719,0.719,1.213]},{"iso":"PRY","continent":"South America","population":7132530,"name":"Paraguay","population_density":17.144,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,5,5,6,6,6,8,9,11,11,13,18,22,22,27,37,41,52,56,59,64,65,69,77,92,96,104,113,115,119,124,129,133,134,147,159,161,174,199,202,206,208,208,213,213,223,228,228,228,239,239,266,333,370,396,415,431,440,462,563,689,713,724,737,740,754,759,778,786,788,829,833,836,838,850,862,865,877,884,900,917,964,986,995,1013,1070,1086,1087,1090,1135,1145,1187,1202,1230,1254,1261,1289,1296,1303,1308,1330,1336,1362,1379,1392,1422,1528,1569,1711,1942,2127,2191,2221,2260,2303,2349,2385,2427,2456,2502,2554,2638,2736,2820,2948,2980,3074,3198,3342,3457,3629,3721,3748,3817,4000,4113,4224,4328,4444,4548,4674,4866,5207,5338,5485,5644,5724,5852,6060,6375,6508,6705,6907,7234,7519,8018,8389,9022,9381,9791,10135,10606,11133,11817,12536,12974,13233,13602,14228,14872,15290,15873,16474,17105,17662,18338,19138,19959,20654,21871,22486,23353,24214,25026,25631,26512,27324,27817,28367,29298,30419,31113,32127,33015,33520,34260,34828,35571,36404,37226,37922,38684,39432,40101,40758,41799,42684,43452,44182,44715,45647,46435,47316,48275,48978,49675,50344,51197,51845,52596,53482,54015,54724,55452,56073,56819,57526,58259,59043,59594,60109,60557,61290,62050,62596,63185,63731,64156,64628,65258,65778,66481,66941,67589,67948,68497,69106,69653,70392,71065,71574,72099,72857,73639,74495,75058,75857,76476,77072,77891,78878,79517,80436,81131,81906,82424,83479,84482,85477,86499,87213,87920,88723,89421,90146,90958,92113,92913,93582,94223,95353,96209,97028],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.14,0.14,0.14,0.701,0.701,0.841,0.841,0.841,1.122,1.262,1.542,1.542,1.823,2.524,3.084,3.084,3.785,5.188,5.748,7.291,7.851,8.272,8.973,9.113,9.674,10.796,12.899,13.459,14.581,15.843,16.123,16.684,17.385,18.086,18.647,18.787,20.61,22.292,22.573,24.395,27.9,28.321,28.882,29.162,29.162,29.863,29.863,31.265,31.966,31.966,31.966,33.508,33.508,37.294,46.688,51.875,55.52,58.184,60.427,61.689,64.774,78.934,96.6,99.965,101.507,103.329,103.75,105.713,106.414,109.078,110.199,110.48,116.228,116.789,117.209,117.49,119.172,120.855,121.275,122.958,123.939,126.182,128.566,135.155,138.24,139.502,142.025,150.017,152.26,152.4,152.821,159.13,160.532,166.421,168.524,172.449,175.814,176.796,180.721,181.703,182.684,183.385,186.47,187.311,190.956,193.34,195.162,199.368,214.23,219.978,239.887,272.274,298.211,307.184,311.39,316.858,322.887,329.336,334.383,340.272,344.338,350.787,358.078,369.855,383.595,395.372,413.318,417.804,430.983,448.368,468.557,484.681,508.796,521.694,525.48,535.154,560.811,576.654,592.216,606.797,623.061,637.642,655.307,682.226,730.035,748.402,769.012,791.304,802.52,820.466,849.628,893.792,912.439,940.059,968.38,1014.226,1054.184,1124.145,1176.16,1264.909,1315.242,1372.725,1420.954,1486.99,1560.877,1656.775,1757.581,1818.99,1855.302,1907.037,1994.804,2085.095,2143.699,2225.438,2309.699,2398.167,2476.26,2571.037,2683.199,2798.306,2895.747,3066.373,3152.598,3274.154,3394.868,3508.713,3593.536,3717.054,3830.899,3900.019,3977.13,4107.659,4264.826,4362.127,4504.292,4628.792,4699.595,4803.345,4882.98,4987.15,5103.939,5219.186,5316.767,5423.601,5528.473,5622.269,5714.382,5860.333,5984.412,6092.088,6194.436,6269.164,6399.833,6510.313,6633.831,6768.286,6866.848,6964.569,7058.365,7177.958,7268.809,7374.101,7498.321,7573.049,7672.453,7774.52,7861.586,7966.177,8065.301,8168.069,8277.988,8355.24,8427.444,8490.255,8593.024,8699.578,8776.129,8858.708,8935.259,8994.845,9061.02,9149.348,9222.254,9320.816,9385.309,9476.161,9526.493,9603.465,9688.848,9765.539,9869.149,9963.505,10034.868,10108.475,10214.748,10324.387,10444.401,10523.335,10635.357,10722.142,10805.703,10920.529,11058.909,11148.498,11277.345,11374.786,11483.443,11556.068,11703.982,11844.605,11984.107,12127.394,12227.499,12326.622,12439.205,12537.066,12638.713,12752.558,12914.492,13026.654,13120.45,13210.319,13368.749,13488.762,13603.588],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.561,0,0.14,0,0,0.28,0.14,0.28,0,0.28,0.701,0.561,0,0.701,1.402,0.561,1.542,0.561,0.421,0.701,0.14,0.561,1.122,2.103,0.561,1.122,1.262,0.28,0.561,0.701,0.701,0.561,0.14,1.823,1.682,0.28,1.823,3.505,0.421,0.561,0.28,0,0.701,0,1.402,0.701,0,0,1.542,0,3.785,9.394,5.188,3.645,2.664,2.243,1.262,3.084,14.16,17.666,3.365,1.542,1.823,0.421,1.963,0.701,2.664,1.122,0.28,5.748,0.561,0.421,0.28,1.682,1.682,0.421,1.682,0.981,2.243,2.383,6.59,3.084,1.262,2.524,7.992,2.243,0.14,0.421,6.309,1.402,5.889,2.103,3.926,3.365,0.981,3.926,0.981,0.981,0.701,3.084,0.841,3.645,2.383,1.823,4.206,14.861,5.748,19.909,32.387,25.938,8.973,4.206,5.468,6.029,6.449,5.047,5.889,4.066,6.449,7.291,11.777,13.74,11.777,17.946,4.486,13.179,17.385,20.189,16.123,24.115,12.899,3.785,9.674,25.657,15.843,15.563,14.581,16.264,14.581,17.666,26.919,47.809,18.367,20.61,22.292,11.216,17.946,29.162,44.164,18.647,27.62,28.321,45.846,39.958,69.961,52.015,88.748,50.333,57.483,48.23,66.035,73.887,95.899,100.806,61.409,36.313,51.735,87.767,90.291,58.605,81.738,84.262,88.468,78.093,94.777,112.162,115.106,97.441,170.627,86.225,121.556,120.715,113.845,84.823,123.519,113.845,69.12,77.111,130.529,157.167,97.301,142.166,124.5,70.802,103.75,79.635,104.171,116.789,115.247,97.581,106.834,104.872,93.796,92.113,145.951,124.079,107.676,102.348,74.728,130.669,110.48,123.519,134.454,98.563,97.721,93.796,119.593,90.851,105.292,124.22,74.728,99.404,102.068,87.066,104.591,99.123,102.769,109.919,77.252,72.204,62.811,102.769,106.554,76.551,82.579,76.551,59.586,66.176,88.328,72.905,98.563,64.493,90.851,50.333,76.971,85.383,76.691,103.61,94.356,71.363,73.606,106.274,109.639,120.014,78.934,112.022,86.785,83.561,114.826,138.38,89.59,128.846,97.441,108.657,72.625,147.914,140.623,139.502,143.287,100.105,99.123,112.583,97.861,101.647,113.845,161.934,112.162,93.796,89.87,158.429,120.014,114.826],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.561,0.561,0.701,0.701,0.701,0.981,1.121,1.401,0.84,1.12,1.681,2.242,2.242,2.663,3.925,4.206,5.748,6.029,5.749,5.889,6.029,5.889,5.609,7.151,6.17,6.731,7.572,7.151,7.572,7.712,7.291,5.749,5.328,6.029,6.449,6.449,7.711,10.515,10.235,10.235,10.375,8.552,7.571,7.291,6.87,4.066,3.645,3.084,4.346,4.346,7.43,16.824,20.61,23.554,26.218,28.461,28.181,31.265,41.64,49.912,48.089,45.986,45.145,43.323,44.024,41.641,30.145,13.601,10.516,14.722,13.46,13.46,11.777,12.758,11.776,11.075,12.477,7.71,9.392,11.354,17.664,19.066,18.646,20.749,27.059,28.321,26.218,24.256,23.975,22.293,26.92,26.499,22.433,23.555,24.396,27.901,22.573,22.152,16.964,17.945,14.86,15.14,16.542,14.439,17.664,31.544,36.591,53.416,84.962,107.255,113.845,116.228,117.49,108.658,109.359,94.497,67.999,46.127,43.603,46.688,52.997,60.708,66.036,78.935,77.532,86.645,97.581,110.479,114.825,125.2,126.322,112.161,117.349,129.827,128.285,123.659,122.117,114.266,115.948,129.829,147.074,169.226,171.75,176.797,184.508,179.46,182.825,194.321,211.566,182.404,191.657,199.368,222.922,251.664,303.679,326.532,371.116,402.802,432.665,452.574,472.763,506.692,532.63,581.421,554.082,540.062,534.314,573.851,598.107,582.825,568.664,552.12,579.179,620.959,664.001,688.396,713.211,752.047,840.936,842.899,875.987,918.609,937.677,910.338,918.751,935.155,833.648,824.534,833.507,869.959,853.415,910.758,911.739,868.696,903.326,905.85,879.492,839.114,857.06,812.475,794.809,828.879,818.925,831.403,873.183,880.473,872.902,877.669,845.563,871.36,888.044,919.45,907.953,882.437,872.482,863.93,908.795,868.977,863.789,864.49,804.764,805.605,809.952,803.222,788.22,796.492,793.969,779.668,782.192,754.992,715.735,731.438,733.401,710.829,690.639,657.271,639.605,633.577,659.094,629.23,621.239,609.181,617.453,591.235,608.62,627.827,616.19,646.895,642.688,649.558,632.313,688.254,720.922,755.553,757.796,766.208,758.637,770.835,812.055,844.161,824.112,832.944,851.451,848.086,833.926,898.279,924.076,925.198,978.895,950.154,951.836,955.762,980.998,934.731,907.953,930.385,899.26,892.951,883.698,929.544,951.697,964.876],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.1,0.1,0.14,0.16,0.12,0.12,0.14,0.24,0.32,0.28,0.361,0.521,0.601,0.781,0.761,0.741,0.841,0.761,0.641,0.721,0.801,0.801,0.901,0.981,1.001,1.001,0.941,0.741,0.741,0.601,0.681,0.881,0.841,1.001,1.402,1.382,1.442,1.222,0.981,1.042,0.781,0.481,0.521,0.441,0.401,0.621,0.521,1.062,2.203,2.844,3.365,3.745,3.846,4.026,3.926,4.607,6.389,6.349,6.189,6.129,6.009,5.848,3.926,1.783,1.462,1.282,1.843,1.863,1.642,1.582,1.442,1.522,1.542,0.961,1.021,1.282,1.582,2.283,2.484,2.604,2.724,3.725,3.725,3.405,2.524,2.984,3.004,3.485,2.644,2.884,3.345,3.425,3.084,3.024,2.323,2.123,2.003,1.642,2.023,1.803,1.923,2.383,4.406,4.787,7.511,11.617,14.982,16.003,16.003,14.661,14.701,12.778,8.873,6.009,5.308,5.628,5.889,6.71,7.751,8.713,10.435,10.495,11.457,12.899,14.1,14.441,16.203,15.482,15.382,14.882,16.063,15.442,15.362,14,14.481,16.023,17.165,17.345,21.912,22.312,23.174,24.035,23.554,23.594,23.915,23.394,23.434,24.435,25.297,30.244,33.388,39.217,40.338,50.353,53.597,57.764,58.104,61.829,62.39,68.659,70.382,71.964,68.94,69.44,72.545,74.888,69.561,66.837,70.101,77.552,81.318,82.319,85.444,93.515,95.758,108.096,107.776,113.985,117.69,117.931,113.604,117.33,109.218,106.774,100.425,101.827,108.016,109.799,112.463,113.985,114.225,118.031,110.76,103.189,105.973,102.128,98.282,103.43,103.59,105.613,103.89,108.056,109.318,110.76,110.119,105.813,111.081,113.704,110.5,111.982,110.68,110.019,112.743,111.161,108.357,105.753,104.291,100.886,101.126,102.308,97.661,99.624,98.743,95.678,100.706,97.541,93.275,89.81,89.549,90.611,86.866,82.96,82.86,81.057,81.538,79.475,74.668,77.813,75.229,77.272,75.95,77.492,77.071,77.612,78.333,82.599,79.815,83.14,87.326,90.791,96.98,93.455,95.979,98.182,99.604,100.826,104.932,100.585,107.716,105.633,108.757,107.195,111.922,112.242,119.373,121.436,121.816,120.454,126.162,119.012,113.444,109.779,112.443,114.165,113.404,110.159,118.812,121.436,121.576]},{"iso":"PER","continent":"South America","population":32971846,"name":"Peru","population_density":25.129,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,6,7,11,11,15,28,38,43,86,117,145,234,234,318,363,395,416,480,580,635,671,852,950,1065,1323,1414,1595,1746,2281,2561,2954,4342,5256,5897,6848,7519,9784,10303,11475,12491,13489,14420,15628,16325,17837,19250,20914,21648,25331,27517,28699,31190,33931,36976,40459,42534,45928,47372,51189,54817,58526,61847,65015,67307,68822,72059,76306,80604,84495,88541,92273,94933,99483,104020,108769,111698,115754,119959,123979,129751,135905,141779,148285,155671,164476,170039,178165,178914,183198,187400,191758,196515,199696,203736,208823,214788,214788,220749,229736,232992,237156,240908,244388,247925,251338,254936,257447,260810,264689,268602,272364,275989,279419,282365,285213,288477,292004,295599,299080,302718,305703,309278,312911,316448,319646,322710,326326,330123,333867,337751,341586,345537,349500,353590,357681,362087,366550,371096,375961,375961,375961,389717,395005,400683,400683,407492,407492,428850,433100,439890,447624,455409,463875,463875,478024,483133,489680,489680,498555,516296,516296,525803,535946,541493,549321,558420,567059,576067,585236,594326,600438,607382,613378,621997,629961,639435,647166,652037,657129,657129,670145,676848,683702,689977,691575,696190,702776,710067,716670,722832,729619,733860,738020,744400,750098,756412,762865,768895,768895,776546,782695,794584,794584,800142,805302,808714,811768,814829,818297,821564,821564,828169,829999,832929,835662,838614,846088,849371,851171,853974,853974,859740,859740,862417,865549,868675,870876,874118,879876,879876,883116,888715,888715,890574,892497,894928,897594,900180,902503,902503,902503,911787,914722,914722,917503,920010,922333,923527,925431,928006,930237,932650,934899,937011,938268,939931,939931,943917,948081,948081,949670,950557,952439,952439,956347,960368,962530,962530,963605,963605,967075,967075,970860,972688,973912,973912,976621,979111,979111,980943,980943,984973,986130,986130,989457],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.03,0.03,0.182,0.212,0.334,0.334,0.455,0.849,1.152,1.304,2.608,3.548,4.398,7.097,7.097,9.645,11.009,11.98,12.617,14.558,17.591,19.259,20.351,25.84,28.812,32.3,40.125,42.885,48.375,52.954,69.18,77.672,89.592,131.688,159.409,178.85,207.692,228.043,296.738,312.479,348.024,378.838,409.107,437.343,473.98,495.119,540.977,583.831,634.299,656.56,768.262,834.56,870.409,945.959,1029.09,1121.442,1227.077,1290.01,1392.946,1436.741,1552.506,1662.54,1775.03,1875.752,1971.834,2041.348,2087.296,2185.471,2314.277,2444.631,2562.641,2685.352,2798.539,2879.214,3017.211,3154.813,3298.845,3387.678,3510.692,3638.225,3760.147,3935.206,4121.85,4300.002,4497.322,4721.331,4988.377,5157.097,5403.549,5426.266,5556.195,5683.637,5815.81,5960.085,6056.561,6179.09,6333.373,6514.285,6514.285,6695.076,6967.641,7066.392,7192.682,7306.476,7412.021,7519.294,7622.806,7731.93,7808.086,7910.082,8027.728,8146.405,8260.502,8370.444,8474.472,8563.821,8650.198,8749.192,8856.162,8965.194,9070.769,9181.106,9271.637,9380.063,9490.248,9597.521,9694.513,9787.441,9897.11,10012.269,10125.821,10243.618,10359.929,10479.759,10599.952,10723.998,10848.073,10981.702,11117.06,11254.935,11402.486,11402.486,11402.486,11819.69,11980.069,12152.277,12152.277,12358.786,12358.786,13006.551,13135.449,13341.382,13575.946,13812.057,14068.821,14068.821,14497.945,14652.895,14851.458,14851.458,15120.627,15658.693,15658.693,15947.029,16254.656,16422.89,16660.305,16936.267,17198.279,17471.482,17749.567,18025.257,18210.627,18421.231,18603.083,18864.488,19106.028,19393.364,19627.836,19775.569,19930.003,19930.003,20324.764,20528.059,20735.933,20926.247,20974.713,21114.681,21314.427,21535.555,21735.817,21922.703,22128.546,22257.171,22383.339,22576.837,22749.651,22941.148,23136.86,23319.744,23319.744,23551.79,23738.283,24098.863,24098.863,24267.431,24423.928,24527.41,24620.035,24712.872,24818.052,24917.137,24917.137,25117.459,25172.961,25261.825,25344.714,25434.245,25660.923,25760.493,25815.085,25900.097,25900.097,26074.973,26074.973,26156.164,26251.154,26345.962,26412.716,26511.042,26685.676,26685.676,26783.942,26953.753,26953.753,27010.135,27068.457,27142.187,27223.044,27301.474,27371.928,27371.928,27371.928,27653.502,27742.517,27742.517,27826.862,27902.896,27973.35,28009.563,28067.309,28145.406,28213.07,28286.254,28354.463,28418.518,28456.641,28507.078,28507.078,28627.969,28754.259,28754.259,28802.452,28829.353,28886.432,28886.432,29004.958,29126.91,29192.481,29192.481,29225.085,29225.085,29330.326,29330.326,29445.121,29500.562,29537.685,29537.685,29619.846,29695.365,29695.365,29750.928,29750.928,29873.153,29908.244,29908.244,30009.148],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.152,0.03,0.121,0,0.121,0.394,0.303,0.152,1.304,0.94,0.849,2.699,0,2.548,1.365,0.971,0.637,1.941,3.033,1.668,1.092,5.49,2.972,3.488,7.825,2.76,5.49,4.58,16.226,8.492,11.919,42.097,27.721,19.441,28.843,20.351,68.695,15.741,35.545,30.814,30.268,28.236,36.637,21.139,45.857,42.855,50.467,22.261,111.701,66.299,35.849,75.549,83.132,92.352,105.636,62.932,102.936,43.795,115.765,110.033,112.49,100.722,96.082,69.514,45.948,98.175,128.807,130.354,118.01,122.711,113.187,80.675,137.997,137.602,144.032,88.833,123.014,127.533,121.922,175.058,186.644,178.152,197.32,224.009,267.046,168.72,246.453,22.716,129.929,127.442,132.173,144.275,96.476,122.529,154.283,180.912,0,180.791,272.566,98.751,126.29,113.794,105.545,107.273,103.513,109.123,76.156,101.996,117.646,118.677,114.097,109.942,104.028,89.349,86.377,98.994,106.97,109.032,105.575,110.337,90.532,108.426,110.185,107.273,96.992,92.928,109.669,115.159,113.551,117.797,116.311,119.83,120.193,124.045,124.076,133.629,135.358,137.875,147.55,0,0,417.204,160.379,172.208,0,206.51,0,647.765,128.898,205.933,234.564,236.111,256.765,0,429.124,154.95,198.563,0,269.169,538.065,0,288.337,307.626,168.234,237.415,275.963,262.011,273.203,278.086,275.69,185.37,210.604,181.852,261.405,241.539,287.336,234.473,147.732,154.435,0,394.761,203.295,207.874,190.314,48.466,139.968,199.746,221.128,200.262,186.887,205.842,128.625,126.168,193.498,172.814,191.497,195.712,182.883,0,232.046,186.492,360.58,0,168.568,156.497,103.482,92.624,92.837,105.181,99.085,0,200.322,55.502,88.864,82.889,89.531,226.678,99.57,54.592,85.012,0,174.876,0,81.19,94.99,94.808,66.754,98.326,174.634,0,98.266,169.812,0,56.381,58.322,73.73,80.857,78.431,70.454,0,0,281.574,89.015,0,84.345,76.035,70.454,36.213,57.746,78.097,67.664,73.184,68.21,64.055,38.123,50.437,0,120.891,126.29,0,48.193,26.902,57.079,0,118.525,121.953,65.571,0,32.604,0,105.241,0,114.795,55.441,37.123,0,82.161,75.519,0,55.563,0,122.225,35.091,0,100.904],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.152,0.182,0.303,0.303,0.424,0.818,1.121,1.273,2.425,3.335,4.063,6.762,6.641,8.795,9.857,10.676,10.009,11.01,13.194,12.163,13.255,16.197,17.804,20.321,27.509,28.328,30.785,33.697,48.831,51.833,60.78,99.389,119.285,135.966,159.319,175.09,227.559,234.808,258.434,247.151,249.698,258.493,266.287,267.075,244.237,271.351,286.273,277.72,359.153,397.216,396.428,450.838,488.113,537.61,592.779,633.45,624.685,602.181,682.097,716.581,745.939,754.309,744.755,751.337,694.349,748.729,761.771,782.092,787.612,809.601,826.706,837.867,929.916,969.343,984.568,943.047,948.051,952.873,961.608,1055.991,1104.638,1145.188,1198.476,1333.652,1477.684,1518.871,1643.402,1491.06,1434.345,1383.635,1318.488,1238.754,1068.184,1021.993,929.823,1088.019,958.09,1011.439,1151.832,1106.308,1136.122,1127.387,1078.649,1005.01,1108.523,1036.855,840.445,843.69,835.046,839.929,848.481,851.15,851.665,831.891,842.112,839.11,828.434,818.789,810.267,810.662,797.166,816.243,840.051,848.33,838.352,822.248,826.342,831.164,854.183,863.554,869.68,882.237,905.438,936.555,950.962,969.432,991.239,1011.317,1042.556,922.726,802.533,1095.692,1131.995,1170.574,1035.216,1103.851,956.301,1604.066,1732.964,1521.693,1595.878,1659.781,1916.546,1710.036,2139.16,1646.345,1716.01,1510.077,1544.682,1846.636,1589.871,1878.208,1756.71,1769.994,1808.846,2084.809,2077.651,1812.789,2090.875,2078.228,1955.972,1998.342,1942.779,1928.221,1907.749,1921.882,1878.269,1750.311,1719.376,1508.772,1721.681,1663.571,1629.906,1532.884,1346.877,1339.113,1384.424,1605.552,1411.053,1394.645,1392.613,1330.924,1408.626,1462.156,1435.224,1405.593,1401.043,1397.039,1191.197,1294.618,1354.942,1522.024,1349.21,1326.281,1287.066,1207.665,1300.289,1161.08,1079.769,818.274,818.274,850.028,749.033,734.415,724.68,721.374,842.871,843.356,897.948,782.638,727.136,813.148,730.259,721.918,590.23,585.468,597.63,610.944,785.578,610.702,708.968,797.59,702.6,664.173,655.741,631.145,537.368,615.799,587.987,418.175,418.175,643.368,674.061,600.331,603.819,601.423,601.423,637.636,695.382,491.905,470.554,543.738,527.603,515.623,483.292,497.516,439.77,482.564,541.19,468.006,447.989,410.836,429.792,379.355,497.88,498.942,438.223,438.223,422.634,395.732,443.894,443.894,440.164,373.652,345.204,345.204,394.761,470.28,365.039,420.602,305.807,372.591,370.559,370.559,389.302],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.061,0.117,0.16,0.16,0.342,0.459,0.581,0.949,0.893,1.213,1.386,1.339,1.295,1.451,1.499,1.737,1.529,2.119,2.405,2.812,3.652,3.613,4.159,4.658,6.191,6.98,8.184,13.08,16.646,18.639,22.105,22.695,31.295,31.841,30.905,31.347,32.894,32.807,35.134,28.34,32.643,33.687,36.494,35.351,47.274,51.511,53.613,57.855,63.608,69.592,81.502,74.535,79.769,80.905,86.65,90.493,93.37,92.668,97.403,92.629,92.936,90.423,93.105,95.657,98.127,101.931,108.17,113.131,118.82,120.076,122.031,117.862,117.906,119.955,125.848,131.142,138.148,143.022,158.521,172.948,192.879,199.564,209.763,186.345,179.456,169.474,156.354,138.815,128.495,110.791,129.587,136.87,118.664,125.609,143.937,144.262,144.799,139.015,128.248,143.573,132.533,109.184,105.956,102.486,103.036,104.912,105.887,106.805,106.078,107.962,105.731,103.066,101.394,100.67,100.046,100.948,101.117,104.266,105.865,105.909,104.188,102.382,102.286,105.805,106.537,107.624,108.915,112.178,116.073,118.127,119.401,122.269,124.777,127.858,131.818,114.648,96.927,138.802,142.624,147.888,128.192,136.614,136.614,229.152,187.966,194.473,203.381,237.111,244.291,244.291,213.056,216.778,215.725,182.216,186.939,227.125,227.125,207.012,228.823,224.49,258.407,259.377,219.941,258.97,257.505,252.943,255.391,251.561,238.117,238.03,233.507,234.828,228.94,223.563,215.539,189.56,208.611,203.147,191.796,185.487,171.306,169.24,197.775,172.97,172.537,169.539,171.757,183.208,181.237,180.344,173.442,172.19,173.451,170.171,151.796,166.922,165.921,192.745,165.388,161.51,157.741,172.524,152.606,139.227,102.741,116.896,92.815,99.076,92.222,91.684,90.263,88.027,106.255,120.479,99.661,103.877,91.182,104.323,91.533,70.749,70.094,75.84,73.231,87.278,87.243,87.243,89.683,100.371,86.827,85.346,79.631,65.216,76.767,73.933,59.739,59.739,51.685,83.578,85.761,74.21,75.055,75.853,85.917,91.091,59.115,57.556,67.222,65.627,64.51,63.595,63.868,62.824,51.667,59.271,66.858,57.114,54.848,53.245,54.193,54.193,53.855,53.236,62.603,55.719,56.533,48.379,63.413,46.481,45.459,44.012,49.315,44.657,56.394,52.148,52.148,43.687,35.766,47.924,52.937,41.2,44.826]},{"iso":"PHL","continent":"Asia","population":109581085,"name":"Philippines","population_density":351.873,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,5,6,10,20,33,49,52,64,111,140,142,187,202,217,230,307,380,462,552,636,707,803,1075,1418,1546,2084,2311,2633,3018,3094,3246,3660,3764,3870,4076,4195,4428,4648,4932,5223,5453,5660,5878,6087,6259,6459,6599,6710,6981,7192,7294,7579,7777,7958,8212,8488,8772,8928,9223,9485,9684,10004,10343,10463,10610,10794,11086,11350,11618,11876,12091,12305,12513,12718,12942,13221,13434,13597,13777,14035,14319,14669,15049,15588,16634,17224,18086,18638,18997,19748,20382,20626,21340,21895,22474,22992,23732,24175,24787,25392,25930,26420,26781,27238,27799,28459,29400,30052,30682,31825,32295,33069,34073,34803,35455,36438,37514,38511,38805,40336,41830,44254,46333,47873,50359,51754,52914,54222,56259,57006,57545,58850,61266,63001,65304,67456,68898,70764,72269,74390,76444,78412,80448,82040,83673,85486,89374,93354,98232,103185,106330,112593,115980,119460,122754,126885,129913,136638,139538,143749,147526,153660,157918,161253,164474,169213,173774,178022,182365,187249,189601,194252,197164,202361,205581,209544,213131,217396,220819,224264,226440,228403,232072,234570,237365,238727,241987,245143,248947,252964,257863,261216,265888,269407,272934,276289,279526,283460,286743,290190,291789,294591,296755,299361,301256,304226,307288,309303,311694,314079,316678,319330,322497,324762,326833,329637,331869,334770,336926,339341,342816,344713,346536,348698,351750,354338,356618,359169,360775,362243,363888,365799,367819,370028,371630,373144,375180,376935,378933,380729,383113,385400,387161,388137,389725,391809,393961,396395,398449,399749,401416,402820,404713,406337,407838,409574,410718,412097,413430,415067,416852,418818,420614,421722,422915,424297,425918,427797,429864,431630,432925,434357,435413,436345,438069,439834,441399,442785,444164,445540,447039,448331,449400,450733,451839,452988,454447],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.009,0.009,0.009,0.018,0.018,0.018,0.018,0.018,0.027,0.027,0.027,0.027,0.027,0.027,0.027,0.027,0.027,0.027,0.027,0.027,0.027,0.027,0.027,0.027,0.027,0.027,0.027,0.027,0.027,0.027,0.027,0.027,0.027,0.027,0.027,0.027,0.046,0.055,0.091,0.183,0.301,0.447,0.475,0.584,1.013,1.278,1.296,1.706,1.843,1.98,2.099,2.802,3.468,4.216,5.037,5.804,6.452,7.328,9.81,12.94,14.108,19.018,21.089,24.028,27.541,28.235,29.622,33.4,34.349,35.316,37.196,38.282,40.408,42.416,45.008,47.663,49.762,51.651,53.641,55.548,57.118,58.943,60.22,61.233,63.706,65.632,66.563,69.163,70.97,72.622,74.94,77.459,80.05,81.474,84.166,86.557,88.373,91.293,94.387,95.482,96.823,98.502,101.167,103.576,106.022,108.376,110.338,112.291,114.189,116.06,118.104,120.65,122.594,124.082,125.724,128.079,130.67,133.864,137.332,142.251,151.796,157.18,165.047,170.084,173.36,180.214,185.999,188.226,194.742,199.806,205.09,209.817,216.57,220.613,226.198,231.719,236.628,241.1,244.394,248.565,253.684,259.707,268.294,274.244,279.994,290.424,294.713,301.777,310.939,317.6,323.55,332.521,342.34,351.438,354.121,368.093,381.726,403.847,422.819,436.873,459.559,472.29,482.875,494.812,513.401,520.218,525.136,537.045,559.093,574.926,595.942,615.581,628.74,645.768,659.503,678.858,697.602,715.561,734.141,748.669,763.572,780.116,815.597,851.917,896.432,941.631,970.332,1027.486,1058.394,1090.152,1120.212,1157.91,1185.542,1246.912,1273.377,1311.805,1346.272,1402.249,1441.106,1471.54,1500.934,1544.181,1585.803,1624.569,1664.201,1708.771,1730.235,1772.678,1799.252,1846.678,1876.063,1912.228,1944.962,1983.883,2015.12,2046.558,2066.415,2084.329,2117.811,2140.607,2166.113,2178.542,2208.292,2237.092,2271.806,2308.464,2353.171,2383.769,2426.404,2458.517,2490.704,2521.32,2550.86,2586.76,2616.72,2648.176,2662.768,2688.338,2708.086,2731.867,2749.161,2776.264,2804.207,2822.595,2844.414,2866.179,2889.897,2914.098,2942.999,2963.668,2982.568,3008.156,3028.524,3054.998,3074.673,3096.711,3128.423,3145.735,3162.371,3182.1,3209.952,3233.569,3254.376,3277.655,3292.311,3305.707,3320.719,3338.158,3356.592,3376.751,3391.37,3405.186,3423.766,3439.782,3458.015,3474.404,3496.16,3517.03,3533.101,3542.007,3556.499,3575.517,3595.155,3617.367,3636.111,3647.974,3663.187,3675.999,3693.274,3708.094,3721.792,3737.634,3748.074,3760.658,3772.823,3787.761,3804.051,3821.992,3838.381,3848.493,3859.38,3871.991,3886.784,3903.931,3922.794,3938.91,3950.727,3963.795,3973.432,3981.937,3997.67,4013.777,4028.058,4040.706,4053.291,4065.848,4079.527,4091.317,4101.073,4113.237,4123.33,4133.816,4147.13],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.009,0,0,0,0,0.009,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.018,0.009,0.037,0.091,0.119,0.146,0.027,0.11,0.429,0.265,0.018,0.411,0.137,0.137,0.119,0.703,0.666,0.748,0.821,0.767,0.648,0.876,2.482,3.13,1.168,4.91,2.072,2.938,3.513,0.694,1.387,3.778,0.949,0.967,1.88,1.086,2.126,2.008,2.592,2.656,2.099,1.889,1.989,1.907,1.57,1.825,1.278,1.013,2.473,1.926,0.931,2.601,1.807,1.652,2.318,2.519,2.592,1.424,2.692,2.391,1.816,2.92,3.094,1.095,1.341,1.679,2.665,2.409,2.446,2.354,1.962,1.953,1.898,1.871,2.044,2.546,1.944,1.487,1.643,2.354,2.592,3.194,3.468,4.919,9.545,5.384,7.866,5.037,3.276,6.853,5.786,2.227,6.516,5.065,5.284,4.727,6.753,4.043,5.585,5.521,4.91,4.472,3.294,4.17,5.119,6.023,8.587,5.95,5.749,10.431,4.289,7.063,9.162,6.662,5.95,8.971,9.819,9.098,2.683,13.971,13.634,22.121,18.972,14.054,22.686,12.73,10.586,11.936,18.589,6.817,4.919,11.909,22.048,15.833,21.016,19.638,13.159,17.028,13.734,19.356,18.744,17.959,18.58,14.528,14.902,16.545,35.481,36.32,44.515,45.199,28.7,57.154,30.909,31.757,30.06,37.698,27.633,61.37,26.464,38.428,34.468,55.977,38.857,30.434,29.394,43.247,41.622,38.766,39.633,44.57,21.464,42.443,26.574,47.426,29.385,36.165,32.734,38.921,31.237,31.438,19.857,17.914,33.482,22.796,25.506,12.429,29.75,28.801,34.714,36.658,44.707,30.598,42.635,32.113,32.186,30.617,29.54,35.9,29.96,31.456,14.592,25.57,19.748,23.781,17.293,27.103,27.943,18.388,21.819,21.765,23.718,24.201,28.901,20.67,18.899,25.588,20.368,26.474,19.675,22.038,31.712,17.311,16.636,19.73,27.852,23.617,20.807,23.28,14.656,13.396,15.012,17.439,18.434,20.159,14.619,13.816,18.58,16.016,18.233,16.39,21.756,20.87,16.07,8.907,14.492,19.018,19.638,22.212,18.744,11.863,15.212,12.812,17.275,14.82,13.698,15.842,10.44,12.584,12.165,14.939,16.289,17.941,16.39,10.111,10.887,12.612,14.793,17.147,18.863,16.116,11.818,13.068,9.637,8.505,15.733,16.107,14.282,12.648,12.584,12.557,13.679,11.79,9.755,12.165,10.093,10.485,13.314],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.009,0.009,0.009,0.009,0.009,0.018,0.018,0.018,0.009,0.009,0.009,0.009,0.009,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.018,0.027,0.064,0.155,0.274,0.42,0.447,0.557,0.968,1.224,1.205,1.525,1.543,1.534,1.626,2.219,2.456,2.939,3.742,4.098,4.609,5.348,7.711,10.138,10.64,14.802,16.053,18.224,21.089,20.907,19.812,20.46,20.241,16.298,16.106,14.254,12.867,14.181,15.386,14.264,15.414,16.336,16.445,17.266,16.71,16.527,15.213,13.57,13.944,13.981,12.923,13.617,13.854,13.681,14.721,16.227,16.346,15.844,17.605,17.395,17.404,18.672,19.448,18.024,16.773,17.028,17.001,17.019,17.649,17.083,15.951,16.809,17.366,17.558,16.937,17.074,16.572,15.705,15.386,15.787,16.481,17.804,19.228,21.601,29.202,33.099,39.322,42.005,42.689,46.348,48.666,45.974,42.945,42.626,40.044,39.734,43.211,40.401,40.2,43.494,41.888,41.295,39.305,38.748,37.114,39.094,42.096,42.525,43.364,49.323,50.318,53.211,57.254,57.893,55.256,58.277,62.347,61.014,59.408,66.316,70.788,86.247,99.269,104.352,117.219,120.851,128.754,126.719,131.674,116.37,102.317,100.172,99.534,102.637,113.067,120.769,115.339,125.55,134.365,141.812,138.508,140.634,138.198,133.088,134.831,134.348,156.095,173.059,198.83,226.07,236.19,278.816,294.823,310.035,304.614,305.992,289.11,305.281,303.045,284.319,287.878,312.098,320.895,313.631,315.392,297.269,312.427,312.765,317.93,306.523,289.13,301.139,298.319,302.498,290.261,287.66,280.761,275.112,284.885,273.88,267.163,237.651,241.748,228.379,221.151,194.659,193.172,190.535,205.392,224.136,235.361,243.163,260.292,279.976,282.412,284.228,279.054,278.296,263.549,264.407,236.364,229.821,217.383,210.547,198.3,189.503,187.486,174.418,181.645,177.84,181.81,182.23,193.838,187.405,178.361,185.561,184.11,188.819,184.776,182.613,185.424,182.065,179.802,173.944,181.428,178.571,179.703,180.945,163.889,159.974,158.35,156.059,146.641,143.183,136.995,127.531,131.455,134.075,137.296,136.247,139.569,140.28,141.731,136.822,132.734,135.736,137.141,142.963,139.951,130.944,130.086,133.991,136.774,132.576,126.636,120.266,111.962,112.683,109.636,111.763,110.777,113.898,116.59,110.859,111.306,111.334,113.962,116.17,118.744,116.919,112.347,115.304,114.054,109.947,110.887,109.847,105.266,101.798,102.564,102.053,106.095,109.38,103.402,99.46,95.271,93.108,93.838],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.001,0.001,0.003,0.003,0.001,0.001,0.001,0.001,0.001,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.003,0.004,0.009,0.022,0.039,0.06,0.064,0.077,0.137,0.169,0.159,0.201,0.199,0.215,0.216,0.256,0.313,0.417,0.476,0.566,0.639,0.747,1.001,1.353,1.413,1.997,2.184,2.511,2.888,2.632,2.383,2.756,2.19,2.032,1.881,1.534,1.739,1.828,1.658,1.902,2.064,2.065,2.194,2.163,2.1,1.991,1.794,1.639,1.722,1.713,1.574,1.721,1.718,1.772,1.958,1.965,2.06,2.13,2.143,2.227,2.25,2.336,2.418,2.204,2.193,2.048,2.087,2.172,2.104,1.999,2.122,2.21,2.241,2.128,2.075,2.09,2.031,1.963,1.919,1.984,2.087,2.251,2.383,2.808,3.959,4.494,5.281,5.631,5.642,6.126,6.25,5.204,5.366,4.966,5.001,5.208,5.194,4.945,5.425,5.282,5.26,5.144,4.94,4.571,4.724,4.787,5.225,5.374,5.556,6.576,6.593,6.87,7.319,7.044,7.044,7.504,7.417,8.104,7.478,8.165,9.161,11.471,12.9,13.505,15.446,16.881,16.398,16.155,15.651,13.914,12.609,11.069,12.4,13.15,14.447,14.597,15.503,17.233,17.494,17.109,17.525,17.088,16.937,17.133,16.829,17.231,19.534,22.045,25.839,29.641,31.666,37.702,39.754,39.222,38.328,37.354,34.844,39.512,35.127,36.202,36.589,40.291,40.457,40.857,36.289,38.686,39.143,39.757,37.422,38.238,36.956,38.821,36.439,37.268,35.928,35.432,33.741,36.235,34.634,35.329,31.391,29.752,29.369,27.949,26.033,23.346,23.105,24.382,26.783,27.236,30.366,31.094,35.409,35.747,36.23,35.645,34.628,33.37,33.279,31.682,29.179,28.233,26.681,25.858,23.2,22.792,22.29,22.832,22.297,22.585,22.576,23.562,23.819,22.78,22.853,23.392,23.192,23.586,22.939,21.959,23.536,23.31,22.031,21.939,22.136,22.699,22.523,21.319,20.939,20.477,19.803,18.315,17.575,17.482,16.245,16.125,16.866,17.009,17.122,16.83,17.058,17.951,18.273,16.892,16.674,16.786,17.25,17.315,17.012,16.411,17.311,17.072,16.823,16.134,14.918,14.503,14.3,13.924,13.832,13.498,13.708,14.314,14.392,14.346,14.103,14.167,14.146,14.269,14.4,14.361,14.605,14.917,14.492,13.593,13.391,12.998,12.736,12.854,12.785,13.202,13.941,13.378,12.471,12.168,11.803,11.504,11.612]},{"iso":"POL","continent":"Europe","population":37846605,"name":"Poland","population_density":124.027,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,5,5,11,16,22,31,49,68,103,119,177,238,251,355,425,536,634,749,901,1051,1221,1389,1638,1862,2055,2311,2554,2946,3383,3627,4102,4413,4848,5205,5575,5955,6356,6674,6934,7202,7582,7918,8379,8742,9287,9593,9856,10169,10511,10892,11273,11617,11902,12218,12640,12877,13105,13375,13693,14006,14431,14740,15047,15366,15651,15996,16326,16921,17204,17615,18016,18257,18529,18885,19268,19739,20143,20619,20931,21326,21631,22074,22473,22825,23155,23571,23786,24165,24395,24687,25048,25410,25986,26561,27160,27560,27842,28201,28577,29017,29392,29788,30195,30701,31015,31316,31620,31931,32227,32527,32821,33119,33395,33714,33907,34154,34393,34775,35146,35405,35719,35950,36155,36412,36689,36951,37216,37521,37891,38190,38457,38721,39054,39407,39746,40104,40383,40782,41162,41580,42038,42622,43065,43402,43904,44416,45031,45688,46346,46894,47469,48149,48789,49515,50324,51167,51791,52410,52961,53676,54487,55319,56090,56684,57279,57876,58611,59378,60281,61181,61762,62310,63073,63802,64689,65480,66239,66870,67372,67922,68517,69129,69820,70387,70824,71126,71526,71947,72453,73047,73650,74152,74529,75134,75734,76571,77328,78330,79240,79988,80699,81673,82809,84396,85980,87330,88636,89962,91514,93481,95773,98140,100074,102080,104316,107319,111599,116338,121638,125816,130210,135278,141804,149903,157608,167230,175766,183248,192539,202579,214686,228318,241946,253688,263929,280229,299049,319205,340834,362731,379902,395480,414844,439536,466679,493765,521640,546425,568138,593592,618813,641496,665547,691118,712972,733788,752940,772823,796798,819262,843475,861331,876333,909066,924422,941112,958416,973593,985075,990811,999924,1013747,1028610,1041846,1054273,1063449,1067870,1076180,1088346,1102096,1115201,1126700,1135676,1140572,1147446,1159901,1171854],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.026,0.026,0.132,0.132,0.291,0.423,0.581,0.819,1.295,1.797,2.722,3.144,4.677,6.289,6.632,9.38,11.23,14.162,16.752,19.79,23.807,27.77,32.262,36.701,43.28,49.199,54.298,61.062,67.483,77.841,89.387,95.834,108.385,116.602,128.096,137.529,147.305,157.346,167.941,176.343,183.213,190.294,200.335,209.213,221.394,230.985,245.385,253.471,260.42,268.69,277.726,287.793,297.86,306.95,314.48,322.829,333.98,340.242,346.266,353.4,361.803,370.073,381.302,389.467,397.579,406.007,413.538,422.653,431.373,447.094,454.572,465.431,476.027,482.395,489.582,498.988,509.108,521.553,532.227,544.804,553.048,563.485,571.544,583.249,593.792,603.092,611.812,622.804,628.484,638.498,644.576,652.291,661.83,671.394,686.614,701.807,717.634,728.203,735.654,745.139,755.074,766.7,776.609,787.072,797.826,811.196,819.492,827.445,835.478,843.695,851.516,859.443,867.211,875.085,882.378,890.806,895.906,902.432,908.747,918.841,928.643,935.487,943.783,949.887,955.304,962.094,969.413,976.336,983.338,991.397,1001.173,1009.073,1016.128,1023.104,1031.902,1041.229,1050.187,1059.646,1067.018,1077.56,1087.601,1098.645,1110.747,1126.178,1137.883,1146.787,1160.051,1173.58,1189.829,1207.189,1224.575,1239.054,1254.247,1272.215,1289.125,1308.308,1329.683,1351.957,1368.445,1384.801,1399.359,1418.251,1439.68,1461.663,1482.035,1497.73,1513.451,1529.226,1548.646,1568.912,1592.772,1616.552,1631.903,1646.383,1666.543,1685.805,1709.242,1730.142,1750.197,1766.869,1780.133,1794.666,1810.387,1826.557,1844.815,1859.797,1871.344,1879.323,1889.892,1901.016,1914.386,1930.081,1946.013,1959.277,1969.239,1985.224,2001.078,2023.193,2043.195,2069.67,2093.715,2113.479,2132.265,2158.001,2188.017,2229.949,2271.802,2307.472,2341.98,2377.016,2418.024,2469.997,2530.557,2593.099,2644.2,2697.204,2756.284,2835.631,2948.719,3073.935,3213.974,3324.367,3440.467,3574.376,3746.809,3960.804,4164.389,4418.626,4644.168,4841.861,5087.352,5352.633,5672.53,6032.721,6392.806,6703.058,6973.651,7404.337,7901.607,8434.178,9005.669,9584.241,10037.941,10449.55,10961.195,11613.618,12330.802,13046.481,13783.006,14437.887,15011.597,15684.154,16350.555,16949.896,17585.382,18261.03,18838.466,19388.476,19894.519,20419.876,21053.355,21646.909,22286.675,22758.475,23154.864,24019.75,24425.493,24866.484,25323.698,25724.712,26028.094,26179.653,26420.441,26785.679,27178.396,27528.123,27856.475,28098.927,28215.741,28435.311,28756.767,29120.076,29466.342,29770.174,30007.341,30136.706,30318.334,30647.425,30963.253],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.106,0,0.159,0.132,0.159,0.238,0.476,0.502,0.925,0.423,1.533,1.612,0.343,2.748,1.85,2.933,2.589,3.039,4.016,3.963,4.492,4.439,6.579,5.919,5.1,6.764,6.421,10.358,11.547,6.447,12.551,8.217,11.494,9.433,9.776,10.041,10.595,8.402,6.87,7.081,10.041,8.878,12.181,9.591,14.4,8.085,6.949,8.27,9.036,10.067,10.067,9.089,7.53,8.349,11.15,6.262,6.024,7.134,8.402,8.27,11.23,8.165,8.112,8.429,7.53,9.116,8.719,15.721,7.478,10.86,10.595,6.368,7.187,9.406,10.12,12.445,10.675,12.577,8.244,10.437,8.059,11.705,10.543,9.301,8.719,10.992,5.681,10.014,6.077,7.715,9.539,9.565,15.219,15.193,15.827,10.569,7.451,9.486,9.935,11.626,9.908,10.463,10.754,13.37,8.297,7.953,8.032,8.217,7.821,7.927,7.768,7.874,7.293,8.429,5.1,6.526,6.315,10.093,9.803,6.843,8.297,6.104,5.417,6.791,7.319,6.923,7.002,8.059,9.776,7.9,7.055,6.976,8.799,9.327,8.957,9.459,7.372,10.543,10.041,11.045,12.101,15.431,11.705,8.904,13.264,13.528,16.25,17.36,17.386,14.48,15.193,17.967,16.91,19.183,21.376,22.274,16.488,16.355,14.559,18.892,21.429,21.983,20.372,15.695,15.721,15.774,19.421,20.266,23.859,23.78,15.351,14.48,20.16,19.262,23.437,20.9,20.055,16.673,13.264,14.532,15.721,16.171,18.258,14.982,11.547,7.98,10.569,11.124,13.37,15.695,15.933,13.264,9.961,15.986,15.853,22.116,20.002,26.475,24.044,19.764,18.786,25.735,30.016,41.932,41.853,35.67,34.508,35.036,41.008,51.973,60.56,62.542,51.101,53.003,59.081,79.347,113.088,125.216,140.039,110.393,116.1,133.909,172.433,213.995,203.585,254.237,225.542,197.693,245.491,265.281,319.897,360.191,360.085,310.252,270.592,430.686,497.27,532.571,571.491,578.572,453.7,411.609,511.644,652.423,717.185,715.678,736.526,654.88,573.711,672.557,666.401,599.34,635.486,675.648,577.436,550.01,506.043,525.358,633.478,593.554,639.767,471.799,396.39,864.886,405.743,440.991,457.214,401.014,303.383,151.559,240.788,365.238,392.717,349.728,328.352,242.452,116.814,219.571,321.456,363.309,346.266,303.832,237.168,129.364,181.628,329.092,315.828],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.106,0.106,0.265,0.397,0.556,0.794,1.27,1.772,2.591,3.014,4.388,5.868,6.052,8.562,9.936,12.367,14.031,16.647,19.13,21.481,25.63,27.321,32.05,35.036,37.547,41.272,43.677,50.072,57.127,59.135,65.107,67.405,73.799,76.468,79.823,79.506,78.554,80.509,74.828,73.692,72.239,71.684,74.089,73.639,77.444,77.127,77.206,78.395,77.39,78.579,76.465,75.963,69.093,69.357,73.558,71.55,68.538,65.605,63.94,63.121,66.821,66.637,63.599,65.766,67.272,69.254,69.571,77.022,73.27,75.965,78.448,76.387,76.044,76.334,77.735,74.459,77.656,79.373,77.022,81.091,81.963,84.262,84.685,81.541,79.585,78,75.437,75.014,73.032,69.042,68.038,68.302,74.802,79.003,89.149,89.704,91.078,92.849,93.245,95.306,89.995,85.265,80.192,82.993,83.839,82.306,80.403,76.994,74.907,72.371,69.385,63.889,62.885,63.361,60.429,58.738,57.232,59.398,61.433,60.402,61.406,59.081,59.398,59.663,60.667,57.497,54.696,55.912,57.391,59.187,60.825,61.01,62.49,64.894,66.849,68.249,65.845,68.488,71.474,75.543,78.845,84.949,87.697,87.142,93.034,96.019,102.228,108.543,113.828,112.877,116.365,125.428,129.074,134.729,139.855,144.769,143.871,145.746,145.112,146.037,150.556,153.356,152.352,145.773,145.006,144.425,149.287,150.661,153.091,154.888,149.867,148.652,153.091,156.579,160.595,161.229,157.425,150.318,148.231,148.283,143.844,140.753,135.574,129.656,121.148,112.455,109.76,106.352,104.001,103.525,101.2,99.482,97.896,105.902,111.186,122.178,128.81,139.59,147.701,154.201,163.026,172.775,186.938,206.754,228.605,237.8,248.264,263.536,285.758,311.996,342.54,363.15,372.398,389.731,414.304,458.615,530.695,603.938,683.417,731.268,796.267,877.173,990.525,1125.173,1215.67,1344.691,1430.194,1517.494,1646.885,1778.257,1925.721,2071.917,2228.417,2284.432,2329.482,2562.475,2814.254,3081.544,3333.138,3551.519,3645.134,3746.491,3987.543,4209.28,4429.195,4612.302,4777.337,4853.645,4973.656,5234.604,5389.361,5336.278,5254.579,5214.549,5055.459,4950.589,4882.921,4735.722,4702.799,4697.013,4701.294,4497.445,4316.399,4631.275,4530.975,4446.608,4270.344,4077.804,3741.42,3421.18,3265.578,2765.93,2752.904,2661.641,2532.779,2374.217,2187.648,2255.66,2336.328,2334.399,2287.948,2242.052,2150.868,2037.78,2102.594,2212.115,2206.487],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.079,0.113,0.181,0.238,0.37,0.408,0.608,0.815,0.83,1.155,1.348,1.634,1.944,2.159,2.503,3.02,3.269,3.639,4.16,4.635,4.93,5.322,5.673,6.511,7.527,7.508,8.455,8.901,9.576,10.007,9.924,9.708,10.301,9.708,9.516,8.885,8.972,8.844,9.15,9.006,9.863,10.037,10.018,9.765,9.788,9.486,9.554,8.795,8.716,8.916,9.327,8.931,8.353,7.934,7.836,7.942,8.353,7.927,8.191,8.534,8.591,8.693,8.757,9.399,9.301,9.693,10.003,9.837,9.561,9.659,8.859,9.569,9.542,9.825,10.093,10.558,10.365,10.592,10.32,10.124,9.572,9.965,9.286,9.565,8.761,8.357,8.391,8.512,9.116,10.475,11.305,11.947,11.909,11.901,11.954,11.441,10.686,9.92,9.946,10.792,10.622,10.339,9.825,9.584,9.206,8.802,8.002,7.942,7.847,7.904,7.459,7.274,7.043,7.376,7.651,7.587,7.568,7.712,7.553,7.621,7.225,6.813,6.836,6.802,7.327,7.681,7.719,7.67,7.938,8.27,8.399,8.353,8.278,8.776,9.214,9.535,9.931,10.856,11.177,11.396,11.784,12.283,13.026,13.777,14.057,14.453,15.351,16.023,16.506,16.925,17.499,18.198,18.484,18.65,18.164,18.447,18.767,18.854,18.583,18.469,18.379,18.552,18.628,18.462,18.73,19.217,19.168,18.99,19.617,19.594,20.047,19.624,19.092,19.281,19.107,18.303,17.797,16.759,16.382,15.657,14.925,14.17,13.604,12.947,12.547,12.181,12.317,12.562,12.845,13.619,14.295,15.544,16.159,17.665,19.205,20.606,21.006,22.418,23.546,26.679,28.876,30.537,32.643,34.964,37.146,40.283,42.944,45.9,48.104,50.746,54.181,59.658,68.389,77.625,88.696,97.167,106.18,116.87,130.168,144.584,155.779,172.093,188.543,200.199,216.139,229.403,244.532,266.904,282.026,294.127,304.541,330.998,364.139,394.521,424.707,455.919,476.412,496.557,508.123,530.287,556.661,577.259,599.824,628.564,651.721,674.709,676.705,659.87,648.414,639.718,628.654,625.268,601.481,581.332,586.208,580.218,575.092,560.001,538.055,589.319,572.231,544.733,525.256,491.148,467.089,432.113,342.956,337.169,330.273,314.918,304.538,295.833,290.87,287.839,281.584,277.383,276.888,273.386,272.631,274.424,269.003,270.094,263.311]},{"iso":"PRT","continent":"Europe","population":10196707,"name":"Portugal","population_density":112.371,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,5,8,13,20,30,30,41,59,59,112,169,245,331,448,448,785,1020,1280,1600,2060,2362,2995,3544,4268,5170,5962,6408,7443,8251,9034,9886,10524,11278,11730,12442,13141,13956,15472,15987,16585,16934,17448,18091,18841,19022,19685,20206,20863,21379,21982,22353,22797,23392,23864,24027,24322,24505,25045,25351,25190,25282,25524,25702,26182,26715,27268,27406,27581,27679,27913,28132,28319,28583,28810,29036,29209,29432,29660,29912,30200,30471,30623,30788,31007,31292,31596,31946,32203,32500,32700,32895,33261,33592,33969,34351,34693,34885,35306,35600,35910,36180,36463,36690,37036,37336,37672,38089,38464,38841,39133,39392,39737,40104,40415,40866,41189,41646,41912,42141,42454,42782,43156,43569,43897,44129,44416,44859,45277,45679,46221,46512,46818,47051,47426,47765,48077,48390,48636,48771,48898,49150,49379,49692,49955,50164,50299,50410,50613,50868,51072,51310,51463,51569,51681,51848,52061,52351,52537,52668,52825,52945,53223,53548,53783,53981,54102,54234,54448,54701,54992,55211,55452,55597,55720,55912,56274,56673,57074,57448,57768,58012,58243,58633,59051,59457,59943,60258,60507,60895,61541,62126,62813,63310,63983,64596,65021,65626,66396,67176,68025,68577,69200,69663,70465,71156,72055,72939,73604,74029,74717,75542,76396,77284,78247,79151,79885,80312,81256,82534,83928,85574,86664,87913,89121,91193,93294,95902,98055,99911,101860,103736,106271,109541,112440,116109,118686,121133,124432,128392,132616,137272,141279,144341,146847,149443,156940,161350,166900,173540,179324,183420,187237,192172,198011,204664,211266,217301,225672,230124,236015,243009,249498,255970,260758,264802,268721,274011,280394,285838,290706,294799,298061,300462,303846,307618,312553,318640,322474,325071,327976,332073,335207,340287,344700,348744,350938,353576,358296,362616],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.196,0.196,0.49,0.785,1.275,1.961,2.942,2.942,4.021,5.786,5.786,10.984,16.574,24.027,32.461,43.936,43.936,76.986,100.032,125.531,156.913,202.026,231.643,293.722,347.563,418.567,507.026,584.699,628.438,729.942,809.183,885.972,969.529,1032.098,1106.043,1150.371,1220.198,1288.749,1368.677,1517.353,1567.859,1626.505,1660.732,1711.141,1774.2,1847.753,1865.504,1930.525,1981.62,2046.053,2096.657,2155.794,2192.178,2235.722,2294.074,2340.363,2356.349,2385.28,2403.227,2456.185,2486.195,2470.405,2479.428,2503.161,2520.618,2567.692,2619.963,2674.197,2687.73,2704.893,2714.504,2737.452,2758.93,2777.269,2803.16,2825.422,2847.586,2864.552,2886.422,2908.782,2933.496,2961.74,2988.318,3003.224,3019.406,3040.884,3068.834,3098.647,3132.972,3158.176,3187.304,3206.918,3226.042,3261.935,3294.397,3331.37,3368.833,3402.373,3421.203,3462.49,3491.323,3521.725,3548.204,3575.958,3598.22,3632.153,3661.574,3694.526,3735.422,3772.198,3809.171,3837.808,3863.208,3897.042,3933.034,3963.535,4007.764,4039.441,4084.26,4110.347,4132.805,4163.501,4195.668,4232.347,4272.85,4305.017,4327.77,4355.916,4399.361,4440.355,4479.78,4532.934,4561.473,4591.482,4614.333,4651.109,4684.355,4714.954,4745.65,4769.775,4783.015,4795.47,4820.184,4842.642,4873.338,4899.131,4919.627,4932.867,4943.753,4963.661,4988.669,5008.676,5032.017,5047.022,5057.417,5068.401,5084.779,5105.668,5134.108,5152.35,5165.197,5180.594,5192.363,5219.626,5251.499,5274.546,5293.964,5305.831,5318.776,5339.763,5364.575,5393.114,5414.591,5438.226,5452.447,5464.509,5483.339,5518.841,5557.971,5597.297,5633.976,5665.358,5689.288,5711.942,5750.19,5791.183,5831,5878.663,5909.555,5933.975,5972.026,6035.38,6092.751,6160.126,6208.867,6274.869,6334.986,6376.667,6435.999,6511.514,6588.009,6671.271,6725.407,6786.505,6831.912,6910.564,6978.331,7066.497,7153.192,7218.409,7260.089,7327.562,7408.47,7492.223,7579.31,7673.752,7762.408,7834.392,7876.268,7968.847,8094.182,8230.893,8392.317,8499.215,8621.705,8740.175,8943.378,9149.424,9405.193,9616.34,9798.359,9989.5,10173.481,10422.09,10742.782,11027.089,11386.911,11639.64,11879.62,12203.155,12591.516,13005.767,13462.385,13855.355,14155.648,14401.414,14656.006,15391.243,15823.736,16368.029,17019.22,17586.462,17988.16,18362.497,18846.477,19419.112,20071.578,20719.042,21310.9,22131.851,22568.463,23146.198,23832.106,24468.488,25103.202,25572.766,25969.364,26353.704,26872.499,27498.486,28032.383,28509.792,28911.197,29231.104,29466.572,29798.444,30168.367,30652.347,31249.304,31625.308,31879.998,32164.894,32566.69,32874.045,33372.245,33805.031,34201.63,34416.798,34675.508,35138.403,35562.069],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.294,0.294,0.49,0.686,0.981,0,1.079,1.765,0,5.198,5.59,7.453,8.434,11.474,0,33.05,23.047,25.498,31.383,45.113,29.617,62.079,53.841,71.003,88.46,77.672,43.74,101.503,79.241,76.789,83.556,62.569,73.945,44.328,69.826,68.552,79.928,148.675,50.507,58.646,34.227,50.408,63.06,73.553,17.751,65.021,51.095,64.433,50.605,59.137,36.384,43.543,58.352,46.289,15.986,28.931,17.947,52.958,30.01,-15.789,9.023,23.733,17.457,47.074,52.272,54.233,13.534,17.162,9.611,22.949,21.478,18.339,25.891,22.262,22.164,16.966,21.87,22.36,24.714,28.244,26.577,14.907,16.182,21.478,27.95,29.814,34.325,25.204,29.127,19.614,19.124,35.894,32.461,36.973,37.463,33.54,18.83,41.288,28.833,30.402,26.479,27.754,22.262,33.933,29.421,32.952,40.896,36.777,36.973,28.637,25.4,33.834,35.992,30.5,44.23,31.677,44.818,26.087,22.458,30.696,32.167,36.679,40.503,32.167,22.752,28.146,43.445,40.994,39.424,53.154,28.539,30.01,22.851,36.777,33.246,30.598,30.696,24.125,13.24,12.455,24.714,22.458,30.696,25.793,20.497,13.24,10.886,19.908,25.008,20.006,23.341,15.005,10.396,10.984,16.378,20.889,28.441,18.241,12.847,15.397,11.769,27.264,31.873,23.047,19.418,11.867,12.945,20.987,24.812,28.539,21.478,23.635,14.22,12.063,18.83,35.502,39.13,39.326,36.679,31.383,23.929,22.654,38.248,40.994,39.817,47.662,30.892,24.42,38.052,63.354,57.371,67.375,48.741,66.002,60.117,41.68,59.333,75.515,76.495,83.262,54.135,61.098,45.407,78.653,67.767,88.166,86.695,65.217,41.68,67.473,80.908,83.753,87.087,94.442,88.656,71.984,41.876,92.579,125.335,136.711,161.425,106.897,122.491,118.47,203.203,206.047,255.769,211.147,182.02,191.14,183.981,248.61,320.692,284.307,359.822,252.729,239.979,323.536,388.361,414.251,456.618,392.97,300.293,245.766,254.592,735.237,432.493,544.293,651.191,567.242,401.698,374.337,483.98,572.636,652.466,647.464,591.858,820.951,436.612,577.736,685.908,636.382,634.715,469.563,396.599,384.34,518.795,625.986,533.898,477.409,401.404,319.907,235.468,331.872,369.923,483.98,596.957,376.004,254.69,284.896,401.796,307.354,498.2,432.787,396.599,215.168,258.711,462.895,423.666],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.294,0.588,1.078,1.764,2.745,2.745,3.824,5.589,5.295,10.199,15.299,22.066,29.519,40.993,39.914,71.199,94.246,114.546,140.339,177.999,199.182,249.787,303.628,341.581,406.994,459.168,471.525,527.915,577.539,592.249,621.964,613.53,599.015,565.671,591.757,558.806,559.493,631.379,598.33,594.407,554.689,560.769,554.003,559.004,496.827,413.173,413.761,419.548,435.926,444.655,417.979,387.969,428.57,409.838,374.729,339.227,306.569,300.39,294.016,234.684,185.355,162.799,164.27,182.413,216.738,218.013,201.537,234.488,235.076,234.292,238.313,209.578,183.197,151.226,159.856,159.66,171.919,171.33,174.566,184.471,185.157,177.802,171.82,176.332,182.412,189.866,199.477,196.437,198.987,203.694,206.636,221.052,225.563,232.722,235.86,244.196,233.899,255.573,265.282,259.79,253.808,244.589,229.388,229.781,240.372,232.036,244.099,250.474,260.968,261.851,264.989,264.89,271.461,269.009,272.343,267.243,275.088,272.538,269.596,266.458,262.633,268.812,265.085,265.575,243.509,245.568,266.555,276.853,284.11,300.585,288.621,286.464,286.563,295.194,284.995,274.599,265.871,236.842,221.543,203.988,205.851,191.532,188.982,184.177,173.978,163.093,160.739,168.192,168.486,166.034,158.679,147.891,137.79,135.534,141.026,142.007,145.44,143.675,133.181,133.573,134.946,151.226,166.721,168.879,159.856,153.482,153.58,159.17,172.213,173.488,163.093,163.681,158.483,158.679,164.564,179.079,193.397,204.184,219.385,227.133,236.842,247.433,266.851,272.343,273.03,281.366,275.579,268.616,282.739,323.439,342.562,368.943,377.867,396.207,425.432,442.692,463.973,476.134,495.258,511.145,516.539,511.635,496.925,533.898,542.332,554.983,565.183,547.138,534.683,541.058,576.559,581.659,600.979,607.255,609.216,615.983,616.179,641.285,685.712,738.67,813.008,825.463,859.298,905.784,1067.111,1180.579,1311.013,1385.449,1406.044,1490.287,1551.777,1681.917,1799.406,1877.666,1981.719,2023.301,2081.26,2213.656,2418.036,2583.677,2719.603,2828.266,2768.737,2761.774,2776.387,3188.088,3232.22,3362.262,3556.835,3731.107,3832.512,3961.083,4190.471,4027.87,4247.843,4351.014,4291.681,4545.39,4580.304,4783.703,4985.631,5049.377,5031.626,4853.725,4658.466,4221.855,4304.038,4352.288,4200.278,4041.305,3807.994,3658.338,3497.207,3444.739,3295.867,3153.861,3216.92,3115.515,2968.801,2933.79,3100.118,3075.6,3203.877,3152.684,2952.326,2791.49,2795.511,2973.51,2995.38],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.392,0.392,0.546,0.757,0.715,1.387,2.088,3.012,4.217,5.702,5.45,10.171,12.721,15.565,18.984,24.224,26.815,35.684,38.654,45.505,54.499,61.112,60.916,71.185,73.637,76.916,78.709,75.01,74.478,74.562,70.037,68.51,68.958,78.261,76.537,74.352,72.909,70.135,69.35,68.439,49.736,51.809,50.731,55.046,55.074,54.513,49.204,52.888,51.936,51.249,44.328,41.232,35.348,37.715,35.782,25.19,19.866,20.973,19.334,23.495,23.397,26.857,31.046,32.209,30.192,30.976,27.32,22.472,18.423,19.67,20.385,21.435,21.281,21.407,22.318,22.654,23.271,22.234,22.122,22.066,22.865,23.593,24.462,24.266,26.297,26.787,26.451,27.586,27.964,28.342,30.094,30.724,30.612,33.778,32.77,32.475,30.976,29.589,27.978,30.136,28.441,29.029,30.528,31.999,33.316,34.227,33.008,33.638,34.073,32.588,33.652,32.896,35.207,35.306,33.68,32.924,33.162,32.083,33.344,31.537,31.06,31.873,33.694,34.955,35.348,37.155,36.636,37.673,36.917,35.964,34.857,33.596,30.388,29.758,27.362,25.877,24.153,22.612,22.626,21.926,21.407,21.407,21.183,20.497,20.861,19.334,18.984,18.199,17.793,17.807,17.303,16.714,17.919,17.19,16.882,17.597,17.709,19.264,20.833,20.062,20.231,20.091,19.74,21.057,20.707,20.231,20.006,20.609,20.945,20.819,20.511,22.038,23.551,26.101,27.964,30.416,32.111,32.658,33.05,33.316,33.386,34.955,34.885,34.955,37.155,40.741,43.081,47.018,47.172,52.188,57.287,57.806,57.231,59.823,61.126,66.058,64.363,64.503,65.035,67.795,66.688,68.355,68.846,70.429,67.655,70.807,71.129,73.413,73.259,74.366,77.714,82.043,78.387,80.054,85.994,93.083,102.652,105.258,112.473,123.415,139.219,150.749,167.757,174.86,185.592,195.399,204.758,211.245,227.623,231.699,252.939,263.04,270.017,289.954,309.918,323.284,347.899,352.635,359.43,360.256,350.407,399.961,402.567,415.092,451.981,490.116,512.392,529.499,493.605,513.625,529.078,528.546,532.063,591.956,600.852,614.246,630.428,628.13,626.309,608.838,548.216,540.749,532.329,523.769,509.128,486.656,476.919,465.963,444.695,417.992,381.412,374.28,391.359,387.73,378.413,385.475,395.464,386.525,388.557,365.104,368.046,362.4,358.659,367.388,384.004]},{"iso":"QAT","continent":"Asia","population":2881060,"name":"Qatar","population_density":227.322,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,3,7,8,8,8,8,15,18,24,262,262,320,337,401,439,439,452,460,470,481,494,501,526,537,549,562,590,634,693,781,835,949,1075,1325,1604,1832,2057,2210,2376,2512,2728,2979,3231,3428,3711,4103,4663,5008,5448,6015,6533,7141,7764,8525,9358,10287,11244,11921,12564,13409,14096,14872,15551,16191,17142,17972,18890,20201,21331,22520,23623,25149,26539,28272,29425,30972,32604,33969,35606,37097,38651,40481,42213,43714,45465,47207,48947,50914,52907,55262,56910,58433,60259,62160,63741,65495,67195,68790,70158,71879,73595,75071,76588,78416,79602,80876,82077,83174,84441,85462,86488,87369,88403,89579,90778,91838,92784,93663,94413,95106,96088,97003,97897,98653,99183,99799,100345,100945,101553,102110,102630,103128,103598,104016,104533,104983,105477,105898,106308,106648,107037,107430,107871,108244,108638,109036,109305,109597,109880,110153,110460,110695,110911,111107,111322,111538,111805,112092,112383,112650,112947,113262,113646,113938,114281,114532,114809,115080,115368,115661,115956,116224,116481,116765,117008,117266,117498,117742,117988,118196,118407,118575,118778,118994,119206,119420,119637,119864,120095,120348,120579,120846,121052,121287,121523,121740,121975,122214,122449,122693,122917,123146,123376,123604,123917,124175,124425,124650,124850,125084,125311,125533,125760,125959,126164,126339,126498,126692,126943,127181,127394,127600,127778,127985,128191,128405,128603,128803,128992,129227,129431,129671,129944,130210,130462,130711,130965,131170,131432,131689,131939,132150,132343,132556,132720,132917,133143,133370,133619,133811,134013,134203,134433,134663,134887,135132,135367,135570,135785,136028,136222,136441,136649,136888,137062,137229,137415,137642,137851,138066,138250,138477,138648,138833,139001,139256,139477,139643,139783,139908,140086,140203,140353,140516,140680,140827,140961,141121,141272,141417,141557],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.347,1.041,1.041,2.43,2.777,2.777,2.777,2.777,5.206,6.248,8.33,90.939,90.939,111.07,116.971,139.185,152.374,152.374,156.887,159.663,163.134,166.952,171.465,173.894,182.572,186.39,190.555,195.067,204.786,220.058,240.536,271.081,289.824,329.393,373.127,459.9,556.74,635.877,713.973,767.079,824.696,871.901,946.874,1033.994,1121.462,1189.84,1288.068,1424.129,1618.502,1738.249,1890.971,2087.773,2267.568,2478.602,2694.841,2958.98,3248.11,3570.561,3902.73,4137.713,4360.895,4654.19,4892.644,5161.989,5397.666,5619.807,5949.893,6237.982,6556.615,7011.655,7403.872,7816.568,8199.413,8729.079,9211.54,9813.055,10213.255,10750.21,11316.668,11790.452,12358.646,12876.164,13415.548,14050.731,14651.899,15172.888,15780.65,16385.289,16989.233,17671.968,18363.727,19181.135,19753.146,20281.771,20915.566,21575.392,22124.149,22732.952,23323.013,23876.629,24351.454,24948.804,25544.418,26056.729,26583.271,27217.76,27629.414,28071.613,28488.473,28869.236,29309.004,29663.388,30019.507,30325.297,30684.193,31092.376,31508.542,31876.462,32204.814,32509.91,32770.23,33010.767,33351.614,33669.205,33979.508,34241.911,34425.871,34639.681,34829.195,35037.451,35248.485,35441.817,35622.306,35795.159,35958.293,36103.379,36282.826,36439.019,36610.484,36756.61,36898.919,37016.931,37151.951,37288.359,37441.428,37570.894,37707.649,37845.793,37939.161,38040.513,38138.741,38233.497,38340.055,38421.623,38496.595,38564.626,38639.251,38714.223,38806.897,38906.514,39007.518,39100.192,39203.279,39312.614,39445.898,39547.25,39666.303,39753.424,39849.569,39943.632,40043.595,40145.294,40247.687,40340.708,40429.911,40528.486,40612.83,40702.38,40782.906,40867.597,40952.983,41025.178,41098.415,41156.727,41227.187,41302.16,41375.744,41450.022,41525.341,41604.132,41684.311,41772.126,41852.304,41944.979,42016.48,42098.047,42179.962,42255.281,42336.848,42419.804,42501.371,42586.062,42663.811,42743.296,42823.128,42902.265,43010.906,43100.456,43187.23,43265.326,43334.745,43415.965,43494.755,43571.81,43650.601,43719.673,43790.827,43851.569,43906.757,43974.093,44061.214,44143.822,44217.753,44289.255,44351.037,44422.886,44494.387,44568.666,44637.39,44706.809,44772.41,44853.977,44924.785,45008.087,45102.844,45195.171,45282.639,45369.066,45457.228,45528.382,45619.321,45708.524,45795.298,45868.534,45935.524,46009.455,46066.378,46134.756,46213.199,46291.99,46378.416,46445.058,46515.171,46581.119,46660.951,46740.783,46818.532,46903.57,46985.137,47055.598,47130.223,47214.567,47281.903,47357.917,47430.113,47513.068,47573.463,47631.427,47695.987,47774.777,47847.32,47921.945,47985.811,48064.601,48123.954,48188.167,48246.479,48334.988,48411.696,48469.313,48517.907,48561.293,48623.076,48663.686,48715.75,48772.327,48829.25,48880.273,48926.784,48982.319,49034.73,49085.059,49133.652],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.694,0,1.388,0.347,0,0,0,2.43,1.041,2.083,82.608,0,20.131,5.901,22.214,13.19,0,4.512,2.777,3.471,3.818,4.512,2.43,8.677,3.818,4.165,4.512,9.719,15.272,20.479,30.544,18.743,39.569,43.734,86.774,96.839,79.138,78.096,53.105,57.618,47.205,74.972,87.121,87.468,68.378,98.228,136.061,194.373,119.748,152.722,196.803,179.795,211.033,216.24,264.139,289.13,322.451,332.169,234.983,223.182,293.295,238.454,269.345,235.677,222.14,330.087,288.088,318.633,455.041,392.217,412.695,382.845,529.666,482.461,601.515,400.2,536.955,566.458,473.784,568.194,517.518,539.385,635.183,601.168,520.989,607.762,604.639,603.944,682.735,691.759,817.407,572.012,528.625,633.795,659.827,548.756,608.804,590.061,553.616,474.825,597.35,595.614,512.311,526.542,634.489,411.654,442.198,416.86,380.763,439.769,354.383,356.119,305.79,358.896,408.183,416.166,367.92,328.351,305.096,260.321,240.536,340.847,317.591,310.302,262.403,183.96,213.81,189.514,208.257,211.033,193.332,180.489,172.853,163.134,145.085,179.448,156.193,171.465,146.127,142.309,118.012,135.02,136.408,153.069,129.466,136.755,138.144,93.368,101.352,98.228,94.757,106.558,81.567,74.972,68.031,74.625,74.972,92.674,99.616,101.004,92.674,103.087,109.335,133.284,101.352,119.053,87.121,96.145,94.063,99.963,101.699,102.393,93.021,89.203,98.575,84.344,89.55,80.526,84.691,85.385,72.196,73.237,58.312,70.46,74.972,73.584,74.278,75.32,78.79,80.179,87.815,80.179,92.674,71.501,81.567,81.914,75.32,81.567,82.956,81.567,84.691,77.749,79.485,79.832,79.138,108.641,89.55,86.774,78.096,69.419,81.22,78.79,77.055,78.79,69.072,71.154,60.742,55.188,67.336,87.121,82.608,73.931,71.501,61.783,71.849,71.501,74.278,68.725,69.419,65.601,81.567,70.807,83.303,94.757,92.327,87.468,86.427,88.162,71.154,90.939,89.203,86.774,73.237,66.989,73.931,56.923,68.378,78.443,78.79,86.427,66.642,70.113,65.948,79.832,79.832,77.749,85.038,81.567,70.46,74.625,84.344,67.336,76.014,72.196,82.956,60.394,57.965,64.56,78.79,72.543,74.625,63.865,78.79,59.353,64.212,58.312,88.509,76.708,57.618,48.593,43.387,61.783,40.61,52.064,56.576,56.923,51.023,46.511,55.535,52.411,50.329,48.593],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.694,0.694,2.082,2.429,2.429,2.429,2.429,4.859,5.206,7.289,88.509,88.162,108.293,114.194,136.408,147.168,146.127,148.556,68.725,72.196,55.883,54.494,34.71,30.197,34.015,33.668,35.403,41.651,53.105,69.072,97.186,107.252,143.003,182.572,264.834,351.954,415.82,473.437,495.998,534.873,542.509,573.747,574.094,564.723,553.963,574.095,657.051,793.806,866.349,944.099,1053.781,1146.108,1288.763,1406.775,1534.853,1629.61,1832.313,2011.76,2049.94,2093.327,2175.589,2197.803,2203.009,2149.556,2049.245,2047.163,2100.268,2195.719,2357.465,2511.228,2654.578,2801.746,3109.272,3261.646,3575.073,3656.64,3738.554,3912.795,3973.884,4159.233,4147.085,4204.009,4237.677,4438.645,4422.679,4463.983,4594.838,4630.588,4795.805,4948.179,5130.403,5101.247,5108.883,5134.916,5190.104,5134.916,5060.985,4959.287,4695.496,4598.309,4667.034,4628.853,4481.337,4459.123,4484.808,4306.401,4194.983,4137.018,3920.431,3764.586,3606.658,3436.235,3107.536,3054.778,3020.763,3020.069,3007.226,2895.808,2846.521,2750.723,2685.469,2667.42,2576.828,2470.964,2365.447,2221.056,2129.77,2058.963,2026.684,1896.87,1772.611,1642.798,1553.248,1532.422,1463.697,1453.631,1401.567,1361.999,1314.794,1276.614,1221.773,1193.659,1184.982,1158.603,1131.876,1097.166,1089.183,1040.242,1023.582,986.79,945.139,898.628,850.729,788.946,718.833,700.09,673.71,668.156,673.015,667.461,678.568,706.683,747.987,806.646,833.026,859.405,846.91,842.051,843.44,840.316,832.68,801.789,793.458,763.608,775.062,763.261,758.748,739.311,722.303,705.295,684.47,668.504,628.241,614.357,599.779,592.837,582.424,572.359,578.953,585.895,615.398,625.117,642.819,640.736,648.025,654.619,651.149,652.537,647.678,649.066,641.083,647.331,645.249,643.167,646.985,674.059,680.653,685.86,679.265,670.935,672.67,671.628,669.545,639.694,619.216,603.596,586.242,572.011,558.127,566.458,572.011,567.152,569.581,560.21,571.317,587.63,594.572,576.176,562.987,554.657,564.723,573.747,585.201,608.457,626.506,645.249,662.257,684.818,674.405,694.537,700.437,692.454,673.364,652.885,640.389,609.15,606.374,593.878,583.465,583.118,576.523,579.647,571.664,594.573,606.027,605.333,611.581,606.721,610.539,615.051,633.447,620.951,617.133,611.58,609.498,588.325,575.83,565.765,560.211,565.418,564.029,555.698,551.532,550.491,556.738,550.49,560.209,564.374,547.367,532.095,496.692,499.122,475.52,469.272,437.339,417.554,410.959,408.877,421.025,411.653,421.372,417.901],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.347,0.347,0.595,0.744,0.843,12.595,12.595,15.47,16.313,19.14,20.875,20.578,9.421,9.818,7.438,7.14,4.611,3.074,4.314,4.215,4.413,4.562,5.405,6.942,9.52,12.644,14.776,19.834,25.437,36.445,48.097,56.477,63.27,68.179,70.758,71.254,69.568,68.179,69.369,67.981,74.427,85.633,106.657,113.054,122.425,138.044,153.961,170.076,181.53,191.497,215.694,239.941,259.28,267.164,268.899,279.907,276.238,273.411,261.015,245.297,258.883,268.155,271.775,302.716,320.269,345.557,368.515,397.026,424.794,465.206,457.371,478.048,500.014,513.006,518.51,523.518,514.642,548.211,557.384,550.889,570.028,575.235,587.581,608.06,616.142,647.034,654.323,643.017,647.182,655.166,636.026,624.175,591.697,589.069,581.383,576.177,567.004,561.797,550.046,556.392,536.112,531.451,505.667,474.974,464.611,440.017,400.25,385.126,373.226,371.986,377.044,366.78,363.061,355.772,349.276,332.368,322.748,308.666,300.435,291.014,273.709,267.064,259.775,240.834,225.611,208.901,197.199,195.613,188.373,182.026,177.911,170.076,166.952,162.044,157.68,151.234,149.796,143.648,143.201,137.201,135.863,135.268,131.747,126.937,121.483,113.153,109.88,101.996,92.972,89.352,85.534,82.212,81.914,80.923,83.699,86.228,91.236,96.195,104.525,105.765,108.541,106.558,107.054,105.765,104.426,99.914,100.062,96.344,96.641,96.988,95.6,94.112,91.088,88.559,87.468,85.038,81.418,77.7,74.972,74.179,72.592,71.006,71.452,72.245,75.369,77.848,78.592,81.319,80.923,81.815,82.261,81.567,80.675,81.071,79.485,81.369,80.823,80.476,81.121,80.774,84.443,85.584,85.881,85.931,84.493,84.691,84.641,80.129,78.592,76.063,75.072,73.832,70.113,68.477,69.915,70.46,71.154,71.204,71.353,73.733,74.328,72.493,70.51,69.865,69.022,71.849,71.7,73.386,76.311,79.683,82.261,85.236,86.179,86.228,87.319,86.526,85.732,83.699,80.923,78.89,76.857,73.634,72.096,70.956,72.84,72.791,72.245,73.534,75.171,75.369,75.22,75.022,77.154,77.204,78.443,79.088,77.303,77.055,75.22,75.419,73.981,71.601,68.774,70.411,69.915,70.262,67.535,70.163,70.361,70.311,67.386,69.667,69.964,69.072,64.758,62.477,62.13,59.601,54.395,51.519,51.42,51.767,52.213,51.32,53.006,52.758,51.618]},{"iso":"ROU","continent":"Europe","population":19237682,"name":"Romania","population_density":85.129,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,3,3,3,3,3,4,6,9,9,15,15,25,45,49,89,123,131,158,184,260,277,308,367,433,576,794,906,1029,1292,1452,1815,2109,2245,2460,2738,3183,3613,3864,4057,4417,4761,5202,5467,5990,6300,6633,6879,7216,7707,8067,8418,8746,8936,9242,9710,10096,10417,10635,11036,11339,11616,11978,12240,12567,12732,13163,13512,13837,14107,14499,14811,15131,15362,15588,15778,16002,16247,16437,16704,16871,17036,17191,17387,17585,17712,17857,18070,18283,18429,18594,18791,18982,19133,19257,19398,19517,19669,19907,20103,20290,20479,20604,20749,20945,21182,21404,21679,21999,22165,22415,22760,23080,23400,23730,24045,24291,24505,24826,25286,25697,26022,26313,26582,26970,27296,27746,28166,28582,28973,29223,29620,30175,30789,31381,32079,32535,32948,33585,34226,35003,35802,36691,37458,38139,39133,40163,41275,42394,43678,44798,45902,47053,48235,49591,50886,52111,53186,54009,55241,56550,57895,59273,60623,61768,62547,63762,65177,66631,68046,69374,70461,71194,72208,73617,74963,76355,77544,78505,79330,80390,81646,83150,84468,85833,86785,87540,88593,89891,91256,92595,93864,95014,95897,97033,98304,99684,101075,102386,103495,104187,105298,107011,108690,110217,111550,112781,113589,114648,116415,118054,119683,121235,122673,123944,125414,127572,129658,132001,134065,135900,137491,139612,142570,145700,148886,152403,155283,157352,160461,164477,168490,172516,176468,180388,182854,186254,191102,196004,201032,205793,209648,212492,217216,222559,229040,235586,241339,246663,250704,258437,267088,276802,287062,296999,303751,306991,314295,324094,334236,343725,353185,360281,365212,373474,383743,393851,403123,412808,418645,422852,430605,440344,449349,457848,465982,471536,475362,479634,484550,492211,500273,508345,513576,517236,524675,532040,539107,545567,551900,556335,559587,565758,571749,577446],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.052,0.052,0.156,0.156,0.156,0.156,0.156,0.208,0.312,0.468,0.468,0.78,0.78,1.3,2.339,2.547,4.626,6.394,6.81,8.213,9.565,13.515,14.399,16.01,19.077,22.508,29.941,41.273,47.095,53.489,67.16,75.477,94.346,109.629,116.698,127.874,142.325,165.457,187.808,200.856,210.888,229.601,247.483,270.407,284.182,311.368,327.482,344.792,357.579,375.097,400.62,419.333,437.579,454.629,464.505,480.411,504.739,524.803,541.489,552.821,573.666,589.416,603.815,622.632,636.251,653.249,661.826,684.23,702.372,719.265,733.3,753.677,769.895,786.529,798.537,810.285,820.161,831.805,844.54,854.417,868.296,876.977,885.554,893.611,903.799,914.091,920.693,928.23,939.302,950.374,957.964,966.541,976.781,986.709,994.558,1001.004,1008.334,1014.519,1022.42,1034.792,1044.98,1054.701,1064.525,1071.023,1078.56,1088.749,1101.068,1112.608,1126.903,1143.537,1152.166,1165.161,1183.095,1199.729,1216.363,1233.517,1249.891,1262.678,1273.802,1290.488,1314.4,1335.764,1352.658,1367.784,1381.767,1401.936,1418.882,1442.274,1464.106,1485.73,1506.055,1519.05,1539.687,1568.536,1600.453,1631.226,1667.509,1691.212,1712.68,1745.792,1779.112,1819.502,1861.035,1907.246,1947.116,1982.515,2034.185,2087.726,2145.529,2203.696,2270.44,2328.659,2386.046,2445.877,2507.319,2577.805,2645.121,2708.798,2764.678,2807.459,2871.5,2939.543,3009.458,3081.088,3151.263,3210.782,3251.275,3314.433,3387.986,3463.567,3537.121,3606.152,3662.655,3700.758,3753.467,3826.708,3896.675,3969.033,4030.839,4080.793,4123.678,4178.778,4244.066,4322.246,4390.758,4461.712,4511.198,4550.444,4605.181,4672.652,4743.607,4813.21,4879.174,4938.953,4984.852,5043.903,5109.971,5181.705,5254.011,5322.159,5379.806,5415.777,5473.528,5562.572,5649.849,5729.225,5798.516,5862.505,5904.506,5959.554,6051.405,6136.602,6221.28,6301.955,6376.704,6442.772,6519.185,6631.36,6739.793,6861.586,6968.875,7064.261,7146.963,7257.215,7410.976,7573.678,7739.29,7922.108,8071.814,8179.364,8340.974,8549.731,8758.332,8967.608,9173.039,9376.805,9504.991,9681.728,9933.733,10188.546,10449.908,10697.391,10897.779,11045.613,11291.173,11568.909,11905.8,12246.07,12545.118,12821.867,13031.923,13433.895,13883.585,14388.532,14921.86,15438.398,15789.376,15957.796,16337.467,16846.832,17374.027,17867.277,18359.021,18727.88,18984.2,19413.669,19947.466,20472.893,20954.863,21458.303,21761.717,21980.403,22383.414,22889.66,23357.752,23799.541,24222.357,24511.061,24709.942,24932.006,25187.546,25585.775,26004.848,26424.441,26696.356,26886.607,27273.296,27656.139,28023.491,28359.29,28688.488,28919.025,29088.068,29408.845,29720.265,30016.402],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.104,0,0,0,0,0.052,0.104,0.156,0,0.312,0,0.52,1.04,0.208,2.079,1.767,0.416,1.403,1.352,3.951,0.884,1.611,3.067,3.431,7.433,11.332,5.822,6.394,13.671,8.317,18.869,15.283,7.069,11.176,14.451,23.132,22.352,13.047,10.032,18.713,17.882,22.924,13.775,27.186,16.114,17.31,12.787,17.518,25.523,18.713,18.245,17.05,9.876,15.906,24.327,20.065,16.686,11.332,20.845,15.75,14.399,18.817,13.619,16.998,8.577,22.404,18.141,16.894,14.035,20.377,16.218,16.634,12.008,11.748,9.876,11.644,12.735,9.876,13.879,8.681,8.577,8.057,10.188,10.292,6.602,7.537,11.072,11.072,7.589,8.577,10.24,9.928,7.849,6.446,7.329,6.186,7.901,12.372,10.188,9.721,9.824,6.498,7.537,10.188,12.32,11.54,14.295,16.634,8.629,12.995,17.934,16.634,16.634,17.154,16.374,12.787,11.124,16.686,23.911,21.364,16.894,15.127,13.983,20.169,16.946,23.392,21.832,21.624,20.325,12.995,20.637,28.85,31.917,30.773,36.283,23.703,21.468,33.112,33.32,40.389,41.533,46.211,39.87,35.399,51.669,53.541,57.803,58.167,66.744,58.219,57.387,59.83,61.442,70.487,67.316,63.677,55.88,42.781,64.041,68.044,69.915,71.63,70.175,59.519,40.493,63.157,73.554,75.581,73.554,69.031,56.504,38.102,52.709,73.242,69.967,72.358,61.806,49.954,42.885,55.1,65.289,78.18,68.511,70.954,49.486,39.246,54.736,67.472,70.954,69.603,65.964,59.779,45.9,59.051,66.068,71.734,72.306,68.148,57.647,35.971,57.751,89.044,87.277,79.375,69.291,63.989,42.001,55.048,91.851,85.197,84.678,80.675,74.749,66.068,76.413,112.176,108.433,121.792,107.289,95.386,82.702,110.252,153.761,162.702,165.612,182.818,149.706,107.549,161.61,208.757,208.601,209.277,205.43,203.767,128.186,176.736,252.005,254.812,261.362,247.483,200.388,147.835,245.56,277.736,336.891,340.27,299.049,276.749,210.056,401.972,449.69,504.946,533.328,516.538,350.978,168.419,379.672,509.365,527.194,493.251,491.743,368.859,256.32,429.47,533.796,525.427,481.971,503.439,303.415,218.685,403.011,506.246,468.092,441.789,422.816,288.704,198.881,222.064,255.54,398.229,419.073,419.593,271.914,190.252,386.689,382.842,367.352,335.799,329.198,230.537,169.043,320.777,311.42,296.138],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.104,0.104,0.104,0.104,0.104,0.156,0.26,0.416,0.312,0.624,0.624,1.144,2.184,2.34,4.315,5.926,6.342,7.433,8.785,12.216,12.06,13.463,14.451,16.115,23.132,33.061,37.531,39.974,52.761,59.467,75.269,87.121,86.757,86.601,95.23,111.968,120.649,125.379,116.542,119.972,130.785,142.533,141.857,145.911,139.673,143.936,146.691,145.496,153.137,148.926,153.396,143.26,137.022,135.618,147.158,149.705,140.868,133.487,136.087,134.787,139.31,142.221,131.513,128.446,120.337,131.409,128.705,129.849,129.485,131.045,133.644,133.28,136.711,126.055,117.79,112.54,111.24,100.739,98.4,90.447,87.016,83.325,83.637,82.285,76.152,73.813,71.006,73.397,72.409,72.929,72.981,72.617,73.864,72.773,69.03,64.144,64.456,68.251,68.199,67.992,69.967,70.019,70.227,74.229,78.648,77.816,81.923,88.836,87.641,94.138,104.535,110.981,115.295,120.909,122.988,119.141,121.636,125.327,131.304,136.034,136.294,134.267,131.876,139.258,145.08,151.786,149.707,149.967,153.398,151.266,157.92,166.601,181.572,188.953,203.404,205.483,206.626,226.743,239.426,250.965,260.581,276.019,279.606,291.302,321.503,341.932,366.415,384.193,409.404,421.412,438.929,463.36,473.133,490.079,499.592,505.102,494.238,478.8,485.454,493.668,502.141,503.284,506.143,501.985,486.598,506.974,516.487,524.024,527.663,525.064,511.393,489.976,502.192,512.277,508.69,505.467,493.719,474.642,461.023,478.021,490.601,495.539,494.083,492.679,480.359,469.651,481.502,493.874,499.539,490.962,488.415,477.24,473.654,493.459,504.791,509.053,510.405,508.95,500.633,476.825,488.676,518.669,539.878,547.519,544.504,540.345,524.699,543.776,577.876,574.029,571.43,572.73,578.188,580.267,614.679,671.807,688.389,724.984,747.595,762.306,770.259,814.443,891.791,942.317,999.496,1060.522,1102.939,1115.102,1194.01,1292.515,1347.355,1393.93,1433.748,1454.697,1433.177,1502.364,1592.759,1638.814,1691.575,1729.781,1724.739,1668.807,1786.181,1887.181,1972.067,2057.525,2095.212,2124.478,2134.146,2388.283,2592.413,2819.623,3016.06,3192.328,3244.257,3135.927,3305.543,3412.936,3490.44,3478.745,3437.16,3289.481,3194.823,3455.874,3609.998,3626.06,3580.837,3591.025,3402.697,3252.523,3399.214,3475.99,3410.286,3326.648,3267.493,3052.758,2948.224,2951.603,2804.132,2696.115,2647.096,2624.9,2473.998,2375.546,2563.354,2724.132,2835.944,2773.514,2683.639,2494.583,2391.712,2522.237,2446.968,2360.264],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.015,0.022,0.037,0.045,0.045,0.089,0.089,0.163,0.304,0.319,0.594,0.847,0.861,1.062,1.181,1.597,1.693,1.626,1.812,2.243,3.104,4.53,4.797,5.584,7.307,8.057,10.263,11.384,10.775,11.54,12.691,14.042,16.047,15.216,14.466,16.129,17.087,18.297,16.961,17.651,18.089,19.129,18.283,18.231,18.602,19.307,18.03,18.164,17.102,17.547,18.52,17.74,17.451,16.463,17.005,17.844,17.629,16.842,15.921,15.966,15.572,15.795,16.136,16.493,15.81,16.775,16.664,17.815,16.33,15.416,14.414,14.072,12.98,12.075,11.681,11.206,10.753,10.493,10.285,9.936,9.468,8.562,8.904,9.26,9.193,8.963,8.956,9.431,9.475,8.815,8.28,8.079,7.983,8.287,8.324,8.592,9.074,8.956,9.149,9.475,9.468,9.661,10.315,11.287,11.592,12.372,13.478,14.094,14.822,15.231,15.193,15.787,15.52,15.342,16.382,17.057,17.02,16.842,17.013,18.305,18.342,18.268,18.335,19.01,19.753,19.612,19.679,21.379,22.597,23.874,25.968,26.451,27.661,29.444,30.082,31.293,32.83,34.248,36.558,38.548,41.199,44.088,46.575,48.952,51.885,54.506,57.647,58.813,59.942,61.754,63.061,62.623,62.288,60.202,60.803,61.746,61.665,62.281,63.209,63.729,63.402,63.276,64.063,64.873,65.147,64.984,64.553,64.212,62.719,62.675,61.873,61.702,60.67,59.734,60.417,60.759,59.623,60.796,60.246,61.553,61.486,60.967,60.915,61.227,60.194,60.35,59.637,61.108,62.058,62.675,62.474,62.586,62.972,63.284,62.979,61.561,61.375,64.657,66.878,67.888,68.051,68.957,69.818,69.432,69.833,69.536,70.294,71.92,73.457,76.895,79.947,82.851,86.17,91.472,95.274,98.222,100.599,105.433,111.374,119.126,125.386,136.176,143.936,147.486,154.823,162.679,169.236,175.474,178.704,186.427,189.375,191.536,197.715,204.316,211.757,217.765,217.282,220.089,229.921,233.597,245.322,256.595,263.961,274.87,283.759,306.103,330.668,354.676,382.256,413.326,423.93,417.982,414.796,423.321,426.499,420.774,417.232,419.786,432.343,439.457,442.948,442.695,441.084,442.755,433.405,428.029,424.249,420.313,412.123,406.382,394.865,392.763,389.934,364.085,328.269,318.289,315.044,314.583,312.185,310.952,334.47,352.656,348.245,336.349,323.435,317.524,314.494,305.078,294.875,284.702]},{"iso":"RUS","continent":"Europe","population":145934460,"name":"Russia","population_density":8.823,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,4,13,13,17,17,20,20,28,45,59,63,90,114,147,199,253,306,367,438,495,658,840,1036,1264,1534,1836,2337,2777,3548,4149,4731,5389,6343,7497,8672,10131,11917,13584,15770,18328,21102,24490,27938,32008,36793,42853,47121,52763,57999,62773,68622,74588,80949,87147,93558,99399,106498,114431,124054,134687,145268,155370,165929,177160,187859,198676,209688,221344,232243,242271,252245,262843,272043,281752,290678,299941,308705,317554,326448,335882,344481,353427,362342,370680,379051,387623,396575,405843,414328,423186,431715,440538,449256,458102,467073,476043,484630,493023,501800,510761,519458,528267,536484,544725,552549,560321,568292,576162,583879,591465,598878,606043,613148,619936,626779,633563,640246,646929,653479,660231,666941,673564,680283,686852,693215,699749,706240,712863,719449,726036,732547,738787,745197,751612,758001,764215,770311,776212,782040,787890,793720,799499,805332,811073,816680,822060,827509,832993,838461,843890,849277,854641,859762,864948,870187,875378,880563,885718,890799,895691,900745,905762,910778,915808,920719,925558,930276,935066,939833,944671,949531,954328,959016,963655,968297,972972,977730,982573,987470,992402,997072,1001965,1006923,1011987,1017131,1022228,1027334,1032354,1037526,1042836,1048257,1053663,1059024,1064438,1069873,1075485,1081152,1086955,1092915,1098958,1105048,1111157,1117487,1123976,1131088,1138509,1146273,1154299,1162428,1170799,1179634,1188928,1198663,1209039,1219796,1231277,1242258,1253603,1265572,1278245,1291687,1305093,1318783,1332824,1346380,1361317,1376020,1390824,1406667,1422775,1438219,1453923,1471000,1487260,1503652,1520800,1537142,1553028,1570446,1588433,1606267,1624648,1642665,1661096,1680579,1699695,1720063,1740172,1760420,1781997,1802762,1822345,1843678,1865395,1887836,1910149,1932711,1954912,1975629,1998966,2023025,2047563,2071858,2096749,2120836,2144229,2169424,2196691,2223500,2249890,2275936,2302062,2327105,2354934,2382012,2410462,2439163,2466961,2492713,2518551,2546113,2574319,2602048,2629699,2656601,2682866,2708940,2736727],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.014,0.014,0.014,0.014,0.014,0.014,0.014,0.014,0.014,0.014,0.014,0.014,0.014,0.014,0.014,0.014,0.014,0.014,0.014,0.014,0.014,0.014,0.014,0.014,0.014,0.014,0.014,0.014,0.014,0.014,0.014,0.021,0.021,0.021,0.027,0.089,0.089,0.116,0.116,0.137,0.137,0.192,0.308,0.404,0.432,0.617,0.781,1.007,1.364,1.734,2.097,2.515,3.001,3.392,4.509,5.756,7.099,8.661,10.512,12.581,16.014,19.029,24.312,28.431,32.419,36.928,43.465,51.372,59.424,69.422,81.66,93.083,108.062,125.591,144.599,167.815,191.442,219.331,252.12,293.646,322.892,361.553,397.432,430.145,470.225,511.106,554.694,597.165,641.096,681.121,729.766,784.126,850.067,922.928,995.433,1064.656,1137.01,1213.97,1287.283,1361.406,1436.864,1516.736,1591.42,1660.136,1728.481,1801.103,1864.145,1930.675,1991.839,2055.313,2115.367,2176.004,2236.949,2301.595,2360.519,2421.82,2482.909,2540.044,2597.406,2656.144,2717.487,2780.995,2839.138,2899.836,2958.28,3018.739,3078.478,3139.094,3200.567,3262.033,3320.874,3378.386,3438.53,3499.934,3559.529,3619.892,3676.198,3732.669,3786.282,3839.539,3894.159,3948.087,4000.967,4052.95,4103.746,4152.844,4201.53,4248.044,4294.935,4341.421,4387.216,4433.011,4477.894,4524.161,4570.141,4615.524,4661.565,4706.579,4750.18,4794.954,4839.433,4884.816,4929.946,4975.083,5019.699,5062.457,5106.381,5150.339,5194.119,5236.7,5278.472,5318.908,5358.844,5398.93,5438.88,5478.48,5518.45,5557.789,5596.211,5633.077,5670.415,5707.994,5745.463,5782.664,5819.578,5856.334,5891.426,5926.962,5962.862,5998.432,6033.962,6069.286,6104.103,6137.625,6172.257,6206.635,6241.007,6275.475,6309.127,6342.285,6374.615,6407.438,6440.103,6473.255,6506.558,6539.429,6571.553,6603.341,6635.15,6667.185,6699.788,6732.975,6766.531,6800.327,6832.327,6865.856,6899.83,6934.531,6969.779,7004.706,7039.694,7074.093,7109.534,7145.92,7183.067,7220.111,7256.847,7293.946,7331.188,7369.644,7408.476,7448.241,7489.081,7530.49,7572.221,7614.082,7657.458,7701.923,7750.657,7801.509,7854.711,7909.708,7965.411,8022.773,8083.314,8147,8213.708,8284.808,8358.519,8437.192,8512.438,8590.178,8672.194,8759.035,8851.145,8943.008,9036.817,9133.031,9225.922,9328.277,9429.027,9530.47,9639.032,9749.411,9855.239,9962.849,10079.867,10191.287,10303.612,10421.116,10533.098,10641.955,10761.31,10884.564,11006.77,11132.724,11256.183,11382.48,11515.985,11646.975,11786.544,11924.339,12063.086,12210.94,12353.23,12487.421,12633.603,12782.416,12936.191,13089.088,13243.692,13395.822,13537.783,13697.697,13862.559,14030.703,14197.181,14367.744,14532.798,14693.096,14865.742,15052.586,15236.292,15417.126,15595.604,15774.629,15946.234,16136.929,16322.478,16517.428,16714.099,16904.582,17081.044,17258.097,17446.962,17640.241,17830.251,18019.726,18204.069,18384.047,18562.716,18753.124],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.007,0,0,0.007,0.062,0,0.027,0,0.021,0,0.055,0.116,0.096,0.027,0.185,0.164,0.226,0.356,0.37,0.363,0.418,0.487,0.391,1.117,1.247,1.343,1.562,1.85,2.069,3.433,3.015,5.283,4.118,3.988,4.509,6.537,7.908,8.052,9.998,12.238,11.423,14.979,17.528,19.009,23.216,23.627,27.889,32.789,41.525,29.246,38.661,35.879,32.713,40.08,40.881,43.588,42.471,43.931,40.025,48.645,54.36,65.941,72.861,72.505,69.223,72.354,76.959,73.314,74.122,75.459,79.871,74.684,68.716,68.346,72.622,63.042,66.53,61.164,63.474,60.054,60.637,60.945,64.645,58.924,61.301,61.089,57.135,57.361,58.739,61.343,63.508,58.143,60.698,58.444,60.459,59.739,60.616,61.473,61.466,58.841,57.512,60.143,61.404,59.595,60.363,56.306,56.471,53.613,53.257,54.62,53.928,52.88,51.982,50.797,49.097,48.686,46.514,46.891,46.487,45.795,45.795,44.883,46.267,45.98,45.383,46.041,45.013,43.602,44.774,44.479,45.383,45.13,45.137,44.616,42.759,43.924,43.958,43.78,42.581,41.772,40.436,39.936,40.086,39.949,39.6,39.97,39.34,38.421,36.866,37.339,37.579,37.469,37.202,36.914,36.756,35.091,35.537,35.9,35.571,35.53,35.324,34.817,33.522,34.632,34.378,34.372,34.468,33.652,33.159,32.33,32.823,32.665,33.152,33.303,32.871,32.124,31.788,31.809,32.035,32.604,33.186,33.556,33.796,32.001,33.529,33.974,34.701,35.249,34.927,34.988,34.399,35.441,36.386,37.147,37.044,36.736,37.099,37.243,38.456,38.833,39.764,40.84,41.409,41.731,41.861,43.376,44.465,48.734,50.852,53.202,54.997,55.703,57.361,60.541,63.686,66.708,71.1,73.711,78.672,75.246,77.74,82.016,86.84,92.11,91.863,93.809,96.214,92.891,102.354,100.751,101.443,108.562,110.378,105.828,107.61,117.018,111.42,112.324,117.505,111.982,108.857,119.355,123.254,122.206,125.954,123.46,126.296,133.505,130.99,139.57,137.795,138.747,147.854,142.29,134.19,146.182,148.813,153.775,152.897,154.604,152.13,141.961,159.914,164.862,168.144,166.479,170.563,165.054,160.298,172.646,186.844,183.706,180.835,178.477,179.026,171.604,190.695,185.549,194.951,196.67,190.483,176.463,177.052,188.866,193.279,190.01,189.475,184.343,179.978,178.669,190.407],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.007,0.007,0.007,0.014,0.076,0.076,0.103,0.103,0.117,0.117,0.172,0.281,0.315,0.342,0.5,0.664,0.869,1.225,1.54,1.787,2.109,2.569,2.775,3.728,4.749,5.736,6.928,8.415,10.066,13.012,15.636,19.802,22.673,25.318,28.265,32.952,38.791,43.41,50.393,57.348,64.653,75.644,88.663,101.135,116.443,132.018,149.909,170.46,200.562,214.829,235.962,252.832,262.329,278.782,291.774,302.573,303.519,318.204,319.568,332.334,353.981,379.842,411.822,440.739,467.491,495.914,532.848,557.517,577.279,586.797,593.807,595.986,595.479,591.471,587.134,576.862,569.27,554.975,538.578,523.948,515.869,508.468,500.491,496.373,491.144,491.069,484.73,482.037,480.139,480.537,479.4,478.619,478.016,475.371,478.695,481.073,482.95,483.08,481.038,481.736,478.55,480.249,481.194,481.05,480.797,475.63,470.635,465.407,461.152,455.629,448.153,441.438,433.057,427.548,420.174,415.247,408.504,400.775,393.334,386.249,380.062,374.148,371.318,368.612,367.481,366.631,365.157,362.964,361.943,361.539,360.655,359.805,359.559,358.134,355.88,356.202,355.386,354.687,351.885,348.527,343.826,339.146,336.473,332.498,328.14,324.33,321.089,317.738,314.168,311.571,309.064,306.584,304.186,301.13,298.546,295.216,293.887,292.448,290.44,288.501,286.623,284.526,281.292,280.833,279.674,278.146,277.043,275.165,273,270.513,269.814,267.847,266.621,265.552,263.955,262.427,261.056,260.535,259.747,259.686,259.72,259.973,260.898,260.775,262.516,264.681,267.347,269.992,271.733,273.165,273.768,277.208,280.065,283.238,285.581,287.068,289.24,291.495,295.552,298.944,302.322,306.015,310.38,315.375,320.137,326.27,332.279,342.18,353.268,365.63,379.218,393.19,408.69,425.855,445.076,463.05,483.298,503.807,527.482,547.025,567.404,588.879,612.033,637.435,658.198,678.296,695.838,713.483,738.097,756.832,771.435,787.887,806.402,818.421,829.817,853.944,863.01,874.583,890.645,894.065,892.544,906.071,921.715,926.903,941.437,952.573,961.364,982.887,1005.02,1025.235,1039.776,1056.317,1078.217,1097.047,1104.941,1117.618,1135.441,1149.646,1164.748,1180.605,1184.881,1184.552,1210.276,1228.956,1248.287,1260.991,1278.657,1289.107,1297.275,1327.96,1354.89,1373.734,1386.425,1398.423,1406.886,1413.436,1443.833,1456.736,1464.843,1477.807,1487.455,1485.441,1483.467,1500.729,1503.313,1507.774,1502.298,1489.971,1479.466,1481.672,1495.027],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.001,0.001,0.001,0.002,0.011,0.011,0.015,0.014,0.017,0.017,0.023,0.031,0.045,0.045,0.071,0.092,0.124,0.167,0.204,0.242,0.298,0.341,0.373,0.5,0.627,0.766,0.938,1.142,1.369,1.803,2.074,2.651,3.047,3.394,3.774,4.412,5.051,5.771,6.444,7.604,8.666,10.162,11.732,13.318,15.484,17.432,19.667,22.72,26.512,28.186,30.993,32.802,34.1,35.842,36.998,37.293,39.182,39.935,40.527,42.803,44.843,48.423,52.605,56.895,60.509,65.127,69.172,71.88,73.048,73.419,74.472,75.252,74.732,73.502,73.403,71.82,70.544,67.872,66.27,65.033,63.932,62.264,62.493,61.406,61.426,61.085,60.668,60.2,59.885,59.413,60.068,59.617,59.561,59.748,60.19,60.333,60.23,59.939,60.414,60.148,60.015,59.97,60.208,60.062,59.904,59.166,58.828,58.271,57.287,56.318,55.508,54.439,53.822,53.011,52.366,51.713,50.555,49.55,48.636,47.752,47.038,46.436,46.09,46.014,45.798,45.735,45.623,45.31,45.294,45.039,44.954,44.917,44.788,44.731,44.611,44.49,44.415,44.186,43.822,43.341,42.744,42.341,41.793,41.22,40.623,40.25,39.902,39.615,39.176,38.784,38.445,38.14,37.745,37.398,37.161,36.907,36.65,36.41,36.139,35.9,35.673,35.396,35.171,35.042,34.825,34.654,34.502,34.263,34.026,33.856,33.597,33.353,33.178,33.012,32.9,32.752,32.675,32.53,32.44,32.362,32.345,32.443,32.682,32.712,32.958,33.235,33.535,33.829,34.025,34.195,34.538,34.811,35.156,35.505,35.762,36.02,36.322,36.728,37.159,37.508,37.882,38.424,39.092,39.754,40.413,41.116,41.921,43.202,44.633,46.317,48.212,50.19,52.188,54.484,56.62,58.886,61.442,64.116,67.397,69.952,72.409,75.028,77.904,80.905,83.498,85.661,88.656,90.821,93.726,95.713,97.046,99.432,101.799,103.173,105.275,107.37,108.894,110.449,111.726,111.955,112.388,114.066,114.957,116.498,118.445,119.295,121.34,124.861,126.524,128.854,131.081,132.909,136.394,138.679,138.777,140.947,142.267,144.55,146.572,147.536,148.942,150.052,152.013,154.306,156.359,158.299,160.579,162.425,165.045,166.864,170.004,172.227,174.278,175.408,177.404,179.02,181.598,181.413,183.02,185.282,186.997,186.631,187.409,187.148,188.252,187.546,186.518,185.641,186.143,186.374,186.595]},{"iso":"RWA","continent":"Africa","population":12952209,"name":"Rwanda","population_density":494.869,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,5,7,8,8,17,17,19,36,40,41,50,54,60,70,70,75,82,84,89,102,104,105,105,110,110,118,120,126,127,134,136,138,143,144,147,147,150,153,154,176,183,191,207,212,225,243,249,255,259,261,261,268,271,273,280,284,285,286,287,287,287,289,292,297,308,314,320,321,325,327,336,339,346,349,355,359,370,377,384,397,410,420,431,439,451,463,476,494,510,541,582,612,636,639,646,661,702,728,787,798,830,850,858,878,900,1001,1025,1042,1063,1081,1092,1105,1113,1172,1194,1210,1252,1299,1337,1378,1416,1435,1473,1485,1539,1582,1629,1655,1689,1710,1729,1752,1821,1879,1926,1963,1994,2022,2042,2062,2092,2099,2104,2111,2128,2134,2140,2152,2171,2189,2200,2293,2352,2453,2540,2577,2644,2717,2780,2889,3089,3306,3537,3625,3672,3742,3843,4020,4063,4142,4218,4255,4304,4349,4374,4409,4439,4460,4479,4534,4565,4591,4602,4624,4634,4653,4671,4689,4711,4722,4738,4779,4789,4798,4811,4820,4832,4836,4840,4843,4847,4852,4866,4867,4873,4883,4885,4890,4892,4896,4905,4908,4940,4953,4965,4971,4974,4992,4996,5012,5017,5052,5060,5066,5073,5084,5129,5131,5134,5137,5146,5155,5162,5174,5192,5208,5213,5222,5242,5262,5312,5319,5362,5394,5455,5491,5507,5543,5572,5586,5620,5665,5726,5750,5779,5851,5872,5891,5919,5934,5948,5994,6011,6043,6084,6129,6191,6237,6278,6349,6428,6528,6659,6747,6832,6954,7032],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.077,0.077,0.386,0.54,0.618,0.618,1.313,1.313,1.467,2.779,3.088,3.165,3.86,4.169,4.632,5.404,5.404,5.791,6.331,6.485,6.871,7.875,8.03,8.107,8.107,8.493,8.493,9.11,9.265,9.728,9.805,10.346,10.5,10.655,11.041,11.118,11.349,11.349,11.581,11.813,11.89,13.588,14.129,14.747,15.982,16.368,17.372,18.761,19.225,19.688,19.997,20.151,20.151,20.691,20.923,21.077,21.618,21.927,22.004,22.081,22.158,22.158,22.158,22.313,22.544,22.93,23.78,24.243,24.706,24.783,25.092,25.247,25.942,26.173,26.714,26.945,27.408,27.717,28.567,29.107,29.647,30.651,31.655,32.427,33.276,33.894,34.82,35.747,36.75,38.14,39.376,41.769,44.934,47.251,49.104,49.335,49.876,51.034,54.199,56.207,60.762,61.611,64.082,65.626,66.244,67.788,69.486,77.284,79.137,80.45,82.071,83.461,84.31,85.314,85.931,90.486,92.185,93.42,96.663,100.292,103.226,106.391,109.325,110.792,113.726,114.652,118.821,122.141,125.77,127.777,130.402,132.024,133.491,135.267,140.594,145.072,148.701,151.557,153.951,156.112,157.657,159.201,161.517,162.057,162.443,162.984,164.296,164.76,165.223,166.149,167.616,169.006,169.855,177.035,181.591,189.389,196.106,198.962,204.135,209.771,214.635,223.051,238.492,255.246,273.081,279.875,283.504,288.908,296.706,310.372,313.692,319.791,325.659,328.515,332.299,335.773,337.703,340.405,342.721,344.343,345.81,350.056,352.45,354.457,355.306,357.005,357.777,359.244,360.633,362.023,363.722,364.571,365.806,368.972,369.744,370.439,371.442,372.137,373.064,373.373,373.681,373.913,374.222,374.608,375.689,375.766,376.229,377.001,377.156,377.542,377.696,378.005,378.7,378.932,381.402,382.406,383.332,383.796,384.027,385.417,385.726,386.961,387.347,390.049,390.667,391.13,391.671,392.52,395.994,396.149,396.38,396.612,397.307,398.002,398.542,399.469,400.858,402.094,402.48,403.174,404.719,406.263,410.123,410.664,413.983,416.454,421.164,423.943,425.178,427.958,430.197,431.278,433.903,437.377,442.087,443.94,446.179,451.738,453.359,454.826,456.988,458.146,459.227,462.778,464.091,466.561,469.727,473.201,477.988,481.539,484.705,490.187,496.286,504.007,514.121,520.915,527.478,536.897,542.919],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.309,0.154,0.077,0,0.695,0,0.154,1.313,0.309,0.077,0.695,0.309,0.463,0.772,0,0.386,0.54,0.154,0.386,1.004,0.154,0.077,0,0.386,0,0.618,0.154,0.463,0.077,0.54,0.154,0.154,0.386,0.077,0.232,0,0.232,0.232,0.077,1.699,0.54,0.618,1.235,0.386,1.004,1.39,0.463,0.463,0.309,0.154,0,0.54,0.232,0.154,0.54,0.309,0.077,0.077,0.077,0,0,0.154,0.232,0.386,0.849,0.463,0.463,0.077,0.309,0.154,0.695,0.232,0.54,0.232,0.463,0.309,0.849,0.54,0.54,1.004,1.004,0.772,0.849,0.618,0.926,0.926,1.004,1.39,1.235,2.393,3.165,2.316,1.853,0.232,0.54,1.158,3.165,2.007,4.555,0.849,2.471,1.544,0.618,1.544,1.699,7.798,1.853,1.313,1.621,1.39,0.849,1.004,0.618,4.555,1.699,1.235,3.243,3.629,2.934,3.165,2.934,1.467,2.934,0.926,4.169,3.32,3.629,2.007,2.625,1.621,1.467,1.776,5.327,4.478,3.629,2.857,2.393,2.162,1.544,1.544,2.316,0.54,0.386,0.54,1.313,0.463,0.463,0.926,1.467,1.39,0.849,7.18,4.555,7.798,6.717,2.857,5.173,5.636,4.864,8.416,15.441,16.754,17.835,6.794,3.629,5.404,7.798,13.666,3.32,6.099,5.868,2.857,3.783,3.474,1.93,2.702,2.316,1.621,1.467,4.246,2.393,2.007,0.849,1.699,0.772,1.467,1.39,1.39,1.699,0.849,1.235,3.165,0.772,0.695,1.004,0.695,0.926,0.309,0.309,0.232,0.309,0.386,1.081,0.077,0.463,0.772,0.154,0.386,0.154,0.309,0.695,0.232,2.471,1.004,0.926,0.463,0.232,1.39,0.309,1.235,0.386,2.702,0.618,0.463,0.54,0.849,3.474,0.154,0.232,0.232,0.695,0.695,0.54,0.926,1.39,1.235,0.386,0.695,1.544,1.544,3.86,0.54,3.32,2.471,4.71,2.779,1.235,2.779,2.239,1.081,2.625,3.474,4.71,1.853,2.239,5.559,1.621,1.467,2.162,1.158,1.081,3.552,1.313,2.471,3.165,3.474,4.787,3.552,3.165,5.482,6.099,7.721,10.114,6.794,6.563,9.419,6.022],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.309,0.463,0.54,0.54,1.235,1.235,1.389,2.702,2.702,2.625,3.243,3.552,3.32,4.092,3.938,3.011,3.242,3.319,3.01,3.705,3.396,2.701,2.701,2.701,2.161,2.625,2.393,1.852,1.775,2.238,2.392,2.16,2.546,2.005,2.083,1.62,1.775,1.467,1.39,2.935,3.089,3.63,4.633,5.019,5.791,6.949,7.335,6.099,5.868,5.404,4.169,4.323,3.551,2.315,2.392,2.238,2.006,1.929,2.006,1.466,1.234,1.234,0.926,1.003,1.775,2.161,2.547,2.624,2.933,2.933,3.396,3.242,2.933,2.702,2.702,2.934,3.474,3.86,3.705,4.477,4.941,5.481,5.867,6.176,6.253,6.639,7.103,7.489,7.72,9.341,11.657,13.355,14.282,13.588,13.124,12.892,14.822,14.436,15.826,14.359,14.977,16.289,16.367,16.753,15.287,21.078,18.376,18.84,17.99,17.836,18.067,17.527,16.446,13.203,13.049,12.971,14.593,16.832,18.917,21.078,23.394,20.306,21.541,21.232,22.158,21.849,22.544,21.386,21.077,21.231,19.764,20.614,21.772,22.93,22.93,23.78,23.548,24.089,24.166,23.934,20.923,16.985,13.742,11.425,10.345,8.646,7.565,6.947,6.098,6.948,7.411,14.051,17.293,24.628,30.882,32.813,36.519,40.765,44.78,46.016,56.902,65.858,76.976,80.913,79.369,79.137,82.071,87.321,75.2,64.545,52.578,48.641,48.795,46.865,40.997,30.033,29.029,24.551,20.15,21.539,20.149,18.682,17.601,16.598,15.054,14.9,14.823,11.967,11.273,10.115,10.501,11.967,11.967,11.195,10.809,10.114,9.341,8.801,7.875,4.942,4.479,4.17,4.247,3.629,3.166,3.629,3.474,3.628,3.473,3.396,3.01,3.165,5.173,5.405,6.177,6.254,6.332,7.413,7.027,8.03,5.945,7.643,7.335,7.335,7.643,7.102,10.267,9.186,9.032,6.562,6.639,6.871,6.871,6.948,4.864,5.945,6.099,6.562,7.411,8.26,11.58,11.194,13.124,14.36,18.684,20.768,20.459,21.694,20.073,20.614,19.919,20.922,20.922,19.996,21,23.78,23.162,23.548,23.085,20.769,17.14,18.839,17.913,14.825,16.369,18.376,21.001,23.395,25.479,27.409,32.195,37.445,44.394,47.714,49.49,55.357,58.214],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.176,0.176,0.199,0.342,0.364,0.364,0.463,0.408,0.474,0.563,0.375,0.386,0.452,0.375,0.386,0.463,0.375,0.386,0.331,0.309,0.287,0.32,0.199,0.243,0.243,0.32,0.287,0.309,0.276,0.265,0.232,0.221,0.176,0.188,0.176,0.364,0.43,0.485,0.662,0.684,0.794,0.982,0.805,0.794,0.75,0.596,0.54,0.474,0.309,0.265,0.276,0.276,0.265,0.276,0.21,0.176,0.154,0.099,0.088,0.132,0.243,0.298,0.364,0.375,0.397,0.386,0.43,0.342,0.353,0.32,0.375,0.375,0.474,0.452,0.496,0.563,0.673,0.717,0.794,0.761,0.816,0.871,0.871,0.926,0.993,1.213,1.577,1.776,1.908,1.798,1.676,1.665,1.776,1.61,1.93,1.787,2.107,2.25,2.173,1.941,1.897,2.36,2.504,2.338,2.349,2.46,2.36,2.261,1.235,1.621,1.676,1.621,1.886,2.283,2.559,2.923,2.691,2.658,2.901,2.57,2.647,2.702,2.768,2.636,2.802,2.614,2.691,2.349,2.636,2.757,2.989,3.022,3.132,3.232,3.199,2.658,2.349,1.908,1.555,1.29,1.169,1.015,0.86,0.662,0.794,0.938,0.982,1.82,2.404,3.452,4.279,4.478,5.018,5.702,5.371,5.923,7.015,8.449,10.588,10.82,10.533,10.61,10.522,10.269,8.349,6.673,6.541,6.43,6.199,5.581,3.904,3.816,3.276,2.669,2.471,2.537,2.382,2.393,2.129,2.04,1.919,1.919,1.511,1.368,1.324,1.324,1.257,1.599,1.5,1.401,1.346,1.202,1.213,1.081,0.673,0.596,0.54,0.452,0.507,0.386,0.408,0.474,0.463,0.474,0.441,0.331,0.419,0.386,0.629,0.75,0.827,0.871,0.86,0.96,0.971,0.794,0.706,0.96,0.982,1.015,0.893,0.971,1.29,1.257,0.904,0.849,0.882,0.904,0.86,0.496,0.673,0.816,0.838,0.838,0.96,1.103,1.522,1.401,1.699,1.996,2.57,2.746,2.702,2.548,2.79,2.471,2.493,2.316,2.592,2.68,2.603,3.077,3.154,2.989,2.802,2.294,2.184,2.371,1.765,1.886,2.129,2.316,2.835,3.188,3.132,3.728,4.246,4.897,5.846,6.132,6.563,7.456,7.533]},{"iso":"KNA","continent":"North America","population":53192,"name":"Saint Kitts and Nevis","population_density":212.865,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,7,8,8,9,9,9,10,10,11,11,11,12,12,12,12,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,22,22,22,22,22,22,22,22,22,22,22,25,25,25,25,25,26,27,27,27,28,28,28,28],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37.6,37.6,37.6,37.6,37.6,131.599,150.399,150.399,169.198,169.198,169.198,187.998,187.998,206.798,206.798,206.798,225.598,225.598,225.598,225.598,263.197,263.197,263.197,263.197,263.197,263.197,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,281.997,300.797,300.797,300.797,300.797,300.797,300.797,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,319.597,357.197,357.197,357.197,357.197,357.197,357.197,357.197,357.197,357.197,357.197,357.197,357.197,357.197,357.197,357.197,357.197,357.197,357.197,357.197,357.197,357.197,357.197,357.197,357.197,357.197,357.197,357.197,357.197,357.197,357.197,357.197,357.197,357.197,357.197,357.197,357.197,357.197,357.197,357.197,357.197,357.197,357.197,357.197,357.197,357.197,357.197,357.197,357.197,357.197,357.197,357.197,357.197,357.197,357.197,357.197,357.197,357.197,357.197,357.197,357.197,357.197,357.197,375.996,375.996,413.596,413.596,413.596,413.596,413.596,413.596,413.596,413.596,413.596,413.596,413.596,469.995,469.995,469.995,469.995,469.995,488.795,507.595,507.595,507.595,526.395,526.395,526.395,526.395],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,93.999,18.8,0,18.8,0,0,18.8,0,18.8,0,0,18.8,0,0,0,37.6,0,0,0,0,0,18.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18.8,0,0,0,0,0,18.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37.6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18.8,0,37.6,0,0,0,0,0,0,0,0,0,0,56.399,0,0,0,0,18.8,18.8,0,0,18.8,0,0,0],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,93.999,112.799,112.799,131.599,131.599,131.599,150.399,150.399,75.2,56.4,56.4,56.4,56.4,56.4,37.6,75.2,56.4,56.4,56.4,37.6,37.6,56.4,56.4,18.8,18.8,18.8,18.8,18.8,18.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18.8,18.8,18.8,18.8,18.8,18.8,37.6,37.6,18.8,18.8,18.8,18.8,18.8,18.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37.6,37.6,37.6,37.6,37.6,37.6,37.6,37.6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18.8,18.8,56.4,56.4,56.4,56.4,56.4,56.4,37.6,37.6,0,0,0,56.399,56.399,56.399,56.399,56.399,75.199,93.999,93.999,37.6,56.4,56.4,56.4,56.4],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16.114,16.114,18.8,18.8,18.8,21.486,8.057,8.057,8.057,5.371,8.057,8.057,5.371,5.371,8.057,8.057,8.057,5.371,5.371,5.371,8.057,2.686,2.686,2.686,2.686,2.686,2.686,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2.686,2.686,2.686,2.686,2.686,2.686,5.371,2.686,2.686,2.686,2.686,2.686,2.686,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5.371,5.371,5.371,5.371,5.371,5.371,5.371,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2.686,2.686,8.057,8.057,8.057,8.057,8.057,5.371,5.371,0,0,0,0,8.057,8.057,8.057,8.057,8.057,10.743,13.428,5.371,5.371,8.057,8.057,8.057,5.371]},{"iso":"LCA","continent":"North America","population":183629,"name":"Saint Lucia","population_density":293.187,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,9,9,13,13,13,13,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,17,17,17,17,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28,28,29,29,29,29,31,31,32,33,33,36,36,38,42,48,52,54,63,65,67,76,78,78,84,84,97,105,106,110,123,131,141,148,148,148,156,160,162,171,178,183,203,203,204,220,223,226,235,238,246,252,257,259,259,261,262,262,265,265,270,270,270,270,274,274,275,278,278,278,279],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5.446,10.892,10.892,10.892,10.892,10.892,10.892,10.892,10.892,16.337,16.337,16.337,16.337,16.337,16.337,49.012,49.012,70.795,70.795,70.795,70.795,76.241,76.241,76.241,76.241,76.241,76.241,81.686,81.686,81.686,81.686,81.686,81.686,81.686,81.686,81.686,81.686,81.686,81.686,81.686,81.686,81.686,81.686,81.686,81.686,81.686,92.578,92.578,92.578,92.578,98.024,98.024,98.024,98.024,98.024,98.024,98.024,98.024,98.024,98.024,98.024,98.024,98.024,98.024,98.024,98.024,98.024,98.024,98.024,98.024,98.024,98.024,98.024,98.024,98.024,98.024,98.024,98.024,98.024,98.024,98.024,98.024,103.469,103.469,103.469,103.469,103.469,103.469,103.469,103.469,103.469,103.469,103.469,103.469,103.469,103.469,103.469,103.469,103.469,103.469,103.469,103.469,103.469,103.469,103.469,103.469,103.469,103.469,103.469,103.469,103.469,119.807,119.807,119.807,119.807,119.807,119.807,119.807,119.807,119.807,119.807,119.807,119.807,119.807,125.253,125.253,125.253,125.253,125.253,125.253,125.253,130.698,130.698,130.698,130.698,130.698,130.698,130.698,136.144,136.144,136.144,136.144,136.144,136.144,136.144,136.144,136.144,136.144,136.144,136.144,136.144,136.144,136.144,136.144,136.144,136.144,136.144,141.59,141.59,141.59,141.59,141.59,141.59,141.59,141.59,141.59,141.59,141.59,141.59,141.59,141.59,141.59,141.59,141.59,141.59,141.59,141.59,141.59,141.59,147.036,147.036,147.036,147.036,147.036,147.036,147.036,147.036,147.036,147.036,147.036,147.036,147.036,147.036,147.036,147.036,147.036,147.036,147.036,147.036,147.036,147.036,147.036,147.036,147.036,147.036,147.036,147.036,147.036,152.481,152.481,157.927,157.927,157.927,157.927,168.819,168.819,174.264,179.71,179.71,196.047,196.047,206.939,228.722,261.397,283.18,294.071,343.083,353.975,364.866,413.878,424.77,424.77,457.444,457.444,528.239,571.805,577.251,599.034,669.829,713.395,767.853,805.973,805.973,805.973,849.539,871.322,882.214,931.225,969.346,996.575,1105.49,1105.49,1110.936,1198.068,1214.405,1230.742,1279.754,1296.092,1339.658,1372.332,1399.561,1410.453,1410.453,1421.344,1426.79,1426.79,1443.127,1443.127,1470.356,1470.356,1470.356,1470.356,1492.139,1492.139,1497.585,1513.922,1513.922,1513.922,1519.368],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5.446,0,0,0,0,0,0,0,5.446,0,0,0,0,0,32.675,0,21.783,0,0,0,5.446,0,0,0,0,0,5.446,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10.892,0,0,0,5.446,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5.446,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16.337,0,0,0,0,0,0,0,0,0,0,0,0,5.446,0,0,0,0,0,0,5.446,0,0,0,0,0,0,5.446,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5.446,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5.446,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5.446,0,5.446,0,0,0,10.892,0,5.446,5.446,0,16.337,0,10.892,21.783,32.675,21.783,10.892,49.012,10.892,10.892,49.012,10.892,0,32.675,0,70.795,43.566,5.446,21.783,70.795,43.566,54.458,38.12,0,0,43.566,21.783,10.892,49.012,38.12,27.229,108.915,0,5.446,87.132,16.337,16.337,49.012,16.337,43.566,32.675,27.229,10.892,0,10.892,5.446,0,16.337,0,27.229,0,0,0,21.783,0,5.446,16.337,0,0,5.446],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5.446,5.446,5.446,5.446,5.446,5.446,5.446,5.446,5.446,5.446,5.446,5.446,5.446,5.446,38.121,38.121,54.458,54.458,54.458,54.458,59.904,59.904,27.229,27.229,5.446,5.446,10.892,10.892,5.446,5.446,5.446,5.446,5.446,5.446,0,0,0,0,0,0,0,0,0,0,0,10.892,10.892,10.892,10.892,16.338,16.338,16.338,16.338,5.446,5.446,5.446,5.446,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5.446,5.446,5.446,5.446,5.446,5.446,5.446,5.446,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16.337,16.337,16.337,16.337,16.337,16.337,16.337,16.337,0,0,0,0,0,5.446,5.446,5.446,5.446,5.446,5.446,5.446,10.892,5.446,5.446,5.446,5.446,5.446,5.446,10.892,5.446,5.446,5.446,5.446,5.446,5.446,5.446,0,0,0,0,0,0,0,0,0,0,0,5.446,5.446,5.446,5.446,5.446,5.446,5.446,5.446,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5.446,5.446,5.446,5.446,5.446,5.446,5.446,5.446,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5.446,5.446,10.892,10.892,10.892,10.892,21.784,21.784,21.784,27.23,21.784,38.121,38.121,49.013,59.904,92.579,108.916,114.362,163.374,157.929,168.821,206.941,196.05,163.375,174.267,163.375,185.158,217.832,212.386,185.157,245.06,288.626,310.409,348.529,277.734,234.168,272.288,272.288,212.385,217.831,201.493,190.602,299.517,299.517,261.397,326.746,332.191,299.516,310.408,299.516,234.167,266.842,288.625,212.385,196.048,190.603,147.037,130.7,103.471,70.796,70.796,59.904,59.904,49.012,65.349,65.349,54.458,70.795,43.566,43.566,49.012],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.778,0.778,0,0.778,0.778,0.778,0.778,0.778,0.778,5.446,4.668,7.78,7.78,7.78,7.78,8.558,3.89,3.89,0.778,0.778,0.778,1.556,0.778,0.778,0.778,0.778,0.778,0.778,0,0,0,0,0,0,0,0,0,0,0,0,1.556,1.556,1.556,1.556,2.334,2.334,2.334,0.778,0.778,0.778,0.778,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.778,0.778,0.778,0.778,0.778,0.778,0.778,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2.334,2.334,2.334,2.334,2.334,2.334,2.334,0,0,0,0,0,0,0.778,0.778,0.778,0.778,0.778,0.778,0.778,0.778,0.778,0.778,0.778,0.778,0.778,0.778,0.778,0.778,0.778,0.778,0.778,0.778,0.778,0,0,0,0,0,0,0,0,0,0,0,0,0.778,0.778,0.778,0.778,0.778,0.778,0.778,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.778,0.778,0.778,0.778,0.778,0.778,0.778,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.778,0.778,1.556,1.556,1.556,1.556,3.112,2.334,3.112,3.112,3.112,5.446,5.446,5.446,8.558,12.447,14.781,16.337,21.005,22.561,22.561,26.451,23.339,20.227,23.339,16.337,24.895,29.563,23.339,24.895,35.008,36.564,44.344,39.676,33.453,32.675,35.786,28.785,24.117,23.339,23.339,27.229,42.788,36.564,34.231,45.122,40.454,37.342,40.454,27.229,33.453,37.342,28.785,28.007,25.673,20.227,18.671,12.447,10.114,6.224,8.558,8.558,7.002,6.224,9.336,7.002,7.78,6.224,6.224,6.224,7.002]},{"iso":"VCT","continent":"North America","population":110947,"name":"Saint Vincent and the Grenadines","population_density":281.787,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,3,7,7,7,8,8,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,14,14,14,15,15,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,25,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,35,35,35,35,35,35,38,44,50,50,52,52,52,52,52,52,52,52,52,54,54,55,55,55,56,56,56,56,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,60,60,60,60,60,61,61,61,61,61,61,62,62,62,62,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,65,67,67,67,68,68,68,73,73,73,73,74,74,74,74,74,75,75,75,75,76,76,76,76,76,76,77,77,78,78,78,78,83,83,84,84,84,84,84,84,84,84,85,85,85,85,85,85,87,87,87,87,87,87,90,91,94,94,98,98,98,100,100],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9.013,9.013,9.013,9.013,9.013,9.013,9.013,9.013,9.013,9.013,9.013,9.013,9.013,9.013,9.013,9.013,9.013,9.013,9.013,18.027,27.04,63.093,63.093,63.093,72.107,72.107,108.16,108.16,108.16,108.16,108.16,108.16,108.16,108.16,108.16,108.16,108.16,108.16,108.16,117.173,117.173,126.186,126.186,126.186,135.2,135.2,144.213,144.213,144.213,144.213,144.213,153.226,153.226,153.226,153.226,153.226,153.226,153.226,153.226,153.226,153.226,153.226,153.226,153.226,153.226,153.226,153.226,162.24,162.24,162.24,162.24,162.24,162.24,162.24,162.24,225.333,234.346,234.346,234.346,234.346,234.346,234.346,234.346,234.346,234.346,243.359,243.359,243.359,243.359,243.359,243.359,243.359,243.359,243.359,261.386,261.386,261.386,261.386,261.386,261.386,261.386,261.386,261.386,261.386,261.386,261.386,261.386,261.386,261.386,261.386,261.386,261.386,261.386,261.386,261.386,261.386,261.386,261.386,261.386,261.386,315.466,315.466,315.466,315.466,315.466,315.466,342.506,396.586,450.666,450.666,468.692,468.692,468.692,468.692,468.692,468.692,468.692,468.692,468.692,486.719,486.719,495.732,495.732,495.732,504.746,504.746,504.746,504.746,513.759,513.759,513.759,513.759,513.759,513.759,513.759,513.759,522.772,522.772,522.772,522.772,522.772,522.772,522.772,522.772,522.772,522.772,540.799,540.799,540.799,540.799,540.799,549.812,549.812,549.812,549.812,549.812,549.812,558.825,558.825,558.825,558.825,576.852,576.852,576.852,576.852,576.852,576.852,576.852,576.852,576.852,576.852,576.852,576.852,576.852,576.852,576.852,576.852,576.852,576.852,576.852,576.852,576.852,576.852,576.852,576.852,576.852,576.852,576.852,576.852,576.852,576.852,576.852,576.852,576.852,576.852,576.852,585.865,603.892,603.892,603.892,612.905,612.905,612.905,657.972,657.972,657.972,657.972,666.985,666.985,666.985,666.985,666.985,675.998,675.998,675.998,675.998,685.012,685.012,685.012,685.012,685.012,685.012,694.025,694.025,703.038,703.038,703.038,703.038,748.105,748.105,757.118,757.118,757.118,757.118,757.118,757.118,757.118,757.118,766.132,766.132,766.132,766.132,766.132,766.132,784.158,784.158,784.158,784.158,784.158,784.158,811.198,820.211,847.251,847.251,883.305,883.305,883.305,901.331,901.331],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9.013,9.013,36.053,0,0,9.013,0,36.053,0,0,0,0,0,0,0,0,0,0,0,0,9.013,0,9.013,0,0,9.013,0,9.013,0,0,0,0,9.013,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9.013,0,0,0,0,0,0,0,63.093,9.013,0,0,0,0,0,0,0,0,9.013,0,0,0,0,0,0,0,0,18.027,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54.08,0,0,0,0,0,27.04,54.08,54.08,0,18.027,0,0,0,0,0,0,0,0,18.027,0,9.013,0,0,9.013,0,0,0,9.013,0,0,0,0,0,0,0,9.013,0,0,0,0,0,0,0,0,0,18.027,0,0,0,0,9.013,0,0,0,0,0,9.013,0,0,0,18.027,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9.013,18.027,0,0,9.013,0,0,45.067,0,0,0,9.013,0,0,0,0,9.013,0,0,0,9.013,0,0,0,0,0,9.013,0,9.013,0,0,0,45.067,0,9.013,0,0,0,0,0,0,0,9.013,0,0,0,0,0,18.027,0,0,0,0,0,27.04,9.013,27.04,0,36.053,0,0,18.027,0],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9.013,18.026,54.079,54.079,54.079,63.092,63.092,99.145,90.132,81.119,45.066,45.066,45.066,36.053,36.053,0,0,0,0,0,9.013,9.013,18.026,18.026,18.026,27.039,27.039,36.052,27.039,27.039,18.026,18.026,27.039,18.026,18.026,9.013,9.013,9.013,9.013,9.013,0,0,0,0,0,0,0,0,9.013,9.013,9.013,9.013,9.013,9.013,9.013,9.013,63.093,72.106,72.106,72.106,72.106,72.106,72.106,72.106,9.013,0,9.013,9.013,9.013,9.013,9.013,9.013,9.013,9.013,0,18.027,18.027,18.027,18.027,18.027,18.027,18.027,18.027,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54.08,54.08,54.08,54.08,54.08,54.08,81.12,135.2,135.2,135.2,153.227,153.227,153.227,153.227,126.187,72.107,18.027,18.027,0,18.027,18.027,27.04,27.04,27.04,36.053,36.053,36.053,18.026,27.039,18.026,18.026,18.026,9.013,9.013,9.013,9.013,9.013,9.013,9.013,9.013,9.013,9.013,9.013,9.013,0,0,18.027,18.027,18.027,18.027,18.027,27.04,27.04,27.04,9.013,9.013,9.013,18.026,18.026,9.013,9.013,27.04,27.04,27.04,27.04,18.027,18.027,18.027,18.027,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9.013,27.04,27.04,27.04,36.053,36.053,36.053,81.12,72.107,54.08,54.08,63.093,54.08,54.08,54.08,9.013,18.026,18.026,18.026,9.013,18.026,18.026,18.026,18.026,9.013,9.013,18.026,18.026,18.026,18.026,18.026,18.026,63.093,63.093,63.093,63.093,54.08,54.08,54.08,54.08,9.013,9.013,9.013,9.013,9.013,9.013,9.013,9.013,27.04,27.04,18.027,18.027,18.027,18.027,45.067,54.08,63.093,63.093,99.146,99.146,99.146,117.173,90.133],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.288,2.575,7.726,7.726,7.726,9.013,9.013,12.876,11.589,6.438,6.438,6.438,5.15,5.15,0,0,0,0,0,0,1.288,1.288,2.575,2.575,2.575,3.863,3.863,3.863,3.863,2.575,2.575,2.575,2.575,2.575,1.288,1.288,1.288,1.288,1.288,0,0,0,0,0,0,0,0,0,1.288,1.288,1.288,1.288,1.288,1.288,1.288,0,9.013,10.301,10.301,10.301,10.301,10.301,10.301,1.288,0,0,1.288,1.288,1.288,1.288,1.288,1.288,1.288,0,0,2.575,2.575,2.575,2.575,2.575,2.575,2.575,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7.726,7.726,7.726,7.726,7.726,7.726,11.589,11.589,19.314,19.314,21.889,21.889,21.889,18.027,10.301,2.575,2.575,0,0,2.575,2.575,3.863,3.863,3.863,5.15,5.15,2.575,2.575,2.575,2.575,2.575,1.288,1.288,1.288,1.288,0,1.288,1.288,1.288,1.288,1.288,1.288,1.288,0,0,0,2.575,2.575,2.575,2.575,2.575,3.863,3.863,1.288,1.288,1.288,1.288,2.575,1.288,1.288,1.288,3.863,3.863,3.863,2.575,2.575,2.575,2.575,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.288,3.863,3.863,3.863,5.15,5.15,5.15,10.301,7.726,7.726,7.726,7.726,7.726,7.726,1.288,1.288,2.575,2.575,1.288,1.288,2.575,2.575,2.575,1.288,1.288,1.288,2.575,1.288,2.575,2.575,2.575,2.575,9.013,7.726,9.013,7.726,7.726,7.726,7.726,1.288,1.288,0,1.288,1.288,1.288,1.288,1.288,1.288,3.863,2.575,2.575,2.575,2.575,2.575,6.438,5.15,9.013,9.013,14.164,14.164,14.164,12.876,11.589]},{"iso":"WSM","continent":"Oceania","population":198410,"name":"Samoa","population_density":69.413,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5.04,5.04,5.04,5.04,5.04,5.04,5.04,5.04,5.04,10.08,10.08,10.08,10.08,10.08,10.08,10.08,10.08,10.08,10.08,10.08,10.08,10.08,10.08,10.08,10.08,10.08,10.08,10.08,10.08,10.08],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5.04,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5.04,5.04,5.04,5.04,5.04,5.04,5.04,5.04,0,0,0,0,0,0,0,0,0,0,0,0,0],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},{"iso":"SMR","continent":"Europe","population":33938,"name":"San Marino","population_density":556.667,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,8,10,16,21,21,23,36,36,51,62,69,80,80,101,109,109,119,119,144,144,175,187,187,208,208,223,224,224,230,236,236,245,245,259,266,266,279,279,333,344,356,356,356,371,372,426,435,455,461,462,476,488,501,513,513,538,538,553,563,569,580,580,582,582,589,608,622,623,637,628,628,638,643,648,652,653,654,654,655,656,658,661,665,665,666,666,667,670,671,671,671,671,672,674,678,680,680,680,687,688,691,691,694,694,694,694,694,696,696,696,696,696,697,698,698,698,698,698,698,698,698,698,698,698,698,698,698,698,698,699,699,699,699,699,699,699,699,699,699,699,699,699,699,699,699,699,699,699,699,699,699,699,699,699,699,699,699,699,699,699,699,699,699,699,699,699,699,699,699,702,704,704,704,704,704,704,710,710,710,710,710,710,715,715,735,735,735,716,716,716,716,722,722,722,722,722,722,723,723,723,723,723,723,723,723,723,727,727,727,727,727,727,732,732,732,732,732,732,732,732,741,741,741,741,741,741,741,759,759,759,759,766,766,774,802,819,819,819,852,852,852,928,928,928,928,928,994,994,1043,1043,1043,1043,1114,1114,1190,1190,1253,1253,1253,1290,1290,1358,1358,1395,1395,1395,1428,1428,1492,1514,1554,1586,1586,1612,1650,1687,1714,1756,1789,1789,1800,1800,1834,1868,1908,1932,1932,1934,1982,2025,2049],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29.465,29.465,29.465,29.465,235.724,294.655,471.448,618.775,618.775,677.706,1060.758,1060.758,1502.74,1826.861,2033.119,2357.24,2357.24,2976.015,3211.739,3211.739,3506.394,3506.394,4243.031,4243.031,5156.462,5510.048,5510.048,6128.823,6128.823,6570.806,6600.271,6600.271,6777.064,6953.857,6953.857,7219.046,7219.046,7631.563,7837.822,7837.822,8220.873,8220.873,9812.01,10136.131,10489.717,10489.717,10489.717,10931.699,10961.164,12552.301,12817.491,13406.801,13583.594,13613.059,14025.576,14379.162,14762.213,15115.799,15115.799,15852.437,15852.437,16294.419,16589.074,16765.867,17089.988,17089.988,17148.919,17148.919,17355.177,17915.022,18327.538,18357.004,18769.521,18504.331,18504.331,18798.986,18946.314,19093.641,19211.503,19240.969,19270.434,19270.434,19299.9,19329.365,19388.296,19476.693,19594.555,19594.555,19624.02,19624.02,19653.486,19741.882,19771.348,19771.348,19771.348,19771.348,19800.813,19859.744,19977.606,20036.537,20036.537,20036.537,20242.796,20272.261,20360.658,20360.658,20449.054,20449.054,20449.054,20449.054,20449.054,20507.985,20507.985,20507.985,20507.985,20507.985,20537.451,20566.916,20566.916,20566.916,20566.916,20566.916,20566.916,20566.916,20566.916,20566.916,20566.916,20566.916,20566.916,20566.916,20566.916,20566.916,20566.916,20596.382,20596.382,20596.382,20596.382,20596.382,20596.382,20596.382,20596.382,20596.382,20596.382,20596.382,20596.382,20596.382,20596.382,20596.382,20596.382,20596.382,20596.382,20596.382,20596.382,20596.382,20596.382,20596.382,20596.382,20596.382,20596.382,20596.382,20596.382,20596.382,20596.382,20596.382,20596.382,20596.382,20596.382,20596.382,20596.382,20596.382,20596.382,20596.382,20596.382,20684.778,20743.709,20743.709,20743.709,20743.709,20743.709,20743.709,20920.502,20920.502,20920.502,20920.502,20920.502,20920.502,21067.83,21067.83,21657.139,21657.139,21657.139,21097.295,21097.295,21097.295,21097.295,21274.088,21274.088,21274.088,21274.088,21274.088,21274.088,21303.554,21303.554,21303.554,21303.554,21303.554,21303.554,21303.554,21303.554,21303.554,21421.416,21421.416,21421.416,21421.416,21421.416,21421.416,21568.743,21568.743,21568.743,21568.743,21568.743,21568.743,21568.743,21568.743,21833.932,21833.932,21833.932,21833.932,21833.932,21833.932,21833.932,22364.311,22364.311,22364.311,22364.311,22570.57,22570.57,22806.294,23631.328,24132.241,24132.241,24132.241,25104.603,25104.603,25104.603,27343.98,27343.98,27343.98,27343.98,27343.98,29288.703,29288.703,30732.512,30732.512,30732.512,30732.512,32824.562,32824.562,35063.94,35063.94,36920.266,36920.266,36920.266,38010.49,38010.49,40014.143,40014.143,41104.367,41104.367,41104.367,42076.728,42076.728,43962.52,44610.761,45789.381,46732.277,46732.277,47498.379,48618.068,49708.292,50503.86,51741.411,52713.772,52713.772,53037.893,53037.893,54039.719,55041.546,56220.166,56927.338,56927.338,56986.269,58400.613,59667.629,60374.801],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,206.258,58.931,176.793,147.327,0,58.931,383.051,0,441.982,324.12,206.258,324.12,0,618.775,235.724,0,294.655,0,736.637,0,913.43,353.586,0,618.775,0,441.982,29.465,0,176.793,176.793,0,265.189,0,412.517,206.258,0,383.051,0,1591.137,324.12,353.586,0,0,441.982,29.465,1591.137,265.189,589.31,176.793,29.465,412.517,353.586,383.051,353.586,0,736.637,0,441.982,294.655,176.793,324.12,0,58.931,0,206.258,559.844,412.517,29.465,412.517,-265.189,0,294.655,147.327,147.327,117.862,29.465,29.465,0,29.465,29.465,58.931,88.396,117.862,0,29.465,0,29.465,88.396,29.465,0,0,0,29.465,58.931,117.862,58.931,0,0,206.258,29.465,88.396,0,88.396,0,0,0,0,58.931,0,0,0,0,29.465,29.465,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29.465,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88.396,58.931,0,0,0,0,0,176.793,0,0,0,0,0,147.327,0,589.31,0,0,-559.844,0,0,0,176.793,0,0,0,0,0,29.465,0,0,0,0,0,0,0,0,117.862,0,0,0,0,0,147.327,0,0,0,0,0,0,0,265.189,0,0,0,0,0,0,530.379,0,0,0,206.258,0,235.724,825.034,500.913,0,0,972.361,0,0,2239.378,0,0,0,0,1944.723,0,1443.809,0,0,0,2092.05,0,2239.378,0,1856.326,0,0,1090.223,0,2003.654,0,1090.223,0,0,972.361,0,1885.792,648.241,1178.62,942.896,0,766.103,1119.689,1090.223,795.568,1237.551,972.361,0,324.12,0,1001.827,1001.827,1178.62,707.172,0,58.931,1414.344,1267.016,707.172],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,206.258,265.189,441.982,589.309,589.309,648.24,1031.291,1031.291,1267.015,1532.204,1561.669,1738.462,1738.462,2298.306,2150.979,2150.979,2003.652,1679.532,2209.911,1885.791,2799.221,2534.032,2298.308,2917.083,2622.428,3064.41,2357.238,2357.238,1620.601,1443.808,1443.808,1090.222,1090.222,1060.757,1237.55,1237.55,1443.808,1267.015,2858.152,2917.083,3270.669,2858.152,2651.894,3093.876,2740.29,4331.427,3005.479,3270.669,3093.876,3123.341,3535.858,3447.462,3801.048,2563.497,2298.308,2445.635,2268.842,2681.359,2563.497,2386.704,2327.773,1974.187,2033.118,1296.481,1502.739,1620.601,1738.463,1591.135,1679.532,1414.343,1355.412,1650.067,1591.136,1178.619,883.964,883.964,500.912,766.101,795.566,530.376,441.98,383.049,383.049,353.584,353.584,353.584,353.584,412.515,383.049,294.653,176.791,176.791,176.791,235.722,324.119,294.654,265.189,265.189,471.447,500.912,559.843,500.912,471.446,412.515,412.515,412.515,206.257,235.723,147.327,147.327,58.931,58.931,88.396,117.861,117.861,58.93,58.93,58.93,58.93,58.93,29.465,0,0,0,0,0,0,0,0,29.465,29.465,29.465,29.465,29.465,29.465,29.465,29.465,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88.396,147.327,147.327,147.327,147.327,147.327,147.327,324.12,235.724,176.793,176.793,176.793,176.793,324.12,324.12,736.637,736.637,736.637,176.793,176.793,176.793,29.466,206.259,-383.051,-383.051,-383.051,176.793,176.793,206.258,206.258,29.465,29.465,29.465,29.465,29.465,29.465,0,117.862,117.862,117.862,117.862,117.862,117.862,265.189,265.189,147.327,147.327,147.327,147.327,147.327,147.327,265.189,265.189,265.189,265.189,265.189,265.189,265.189,795.568,530.379,530.379,530.379,736.637,736.637,972.361,1797.395,1767.929,1767.929,1767.929,2740.29,2534.032,2534.032,4537.686,3712.652,3211.739,3211.739,3211.739,4184.101,4184.101,5627.91,3388.532,3388.532,3388.532,5480.582,5480.582,5775.237,5775.237,6187.754,6187.754,6187.754,7277.977,5185.927,7189.581,4950.203,6040.426,4184.1,4184.1,5156.461,4066.238,5952.03,4596.617,5775.237,5627.91,5627.91,6394.013,6541.341,7631.564,6541.34,7130.65,6924.391,5981.495,6305.615,5539.512,5421.65,5333.254,5716.306,5185.927,4213.566,4272.497,5362.721,6629.737,6335.082],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63.14,84.187,84.187,92.606,147.327,117.862,172.584,193.63,202.049,248.352,239.933,273.608,307.283,244.143,239.933,210.468,269.399,269.399,311.492,328.33,328.33,374.633,374.633,332.539,336.749,206.258,181.002,206.258,117.862,155.746,92.606,147.327,176.793,151.537,181.002,181.002,370.423,416.726,408.308,378.842,378.842,387.261,391.47,391.47,383.051,416.726,441.982,446.192,441.982,488.285,315.702,328.33,244.143,324.12,319.911,324.12,315.702,286.236,282.027,282.027,185.212,185.212,151.537,189.421,223.096,181.002,239.933,193.63,193.63,206.258,147.327,109.443,122.071,67.35,109.443,109.443,71.559,54.722,42.094,37.884,50.512,46.303,50.512,46.303,46.303,50.512,42.094,25.256,25.256,21.047,25.256,29.465,33.675,37.884,37.884,37.884,67.35,67.35,71.559,54.722,58.931,58.931,58.931,29.465,25.256,21.047,21.047,8.419,8.419,8.419,12.628,16.837,8.419,8.419,8.419,8.419,8.419,4.209,0,0,0,0,0,0,0,0,0,4.209,4.209,4.209,4.209,4.209,4.209,4.209,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12.628,21.047,21.047,21.047,21.047,21.047,21.047,33.675,25.256,25.256,25.256,25.256,25.256,46.303,21.047,105.234,105.234,105.234,25.256,25.256,4.209,4.209,-54.722,-54.722,-54.722,25.256,25.256,25.256,29.465,4.209,4.209,4.209,4.209,4.209,4.209,0,0,16.837,16.837,16.837,16.837,16.837,16.837,37.884,21.047,21.047,21.047,21.047,21.047,21.047,0,37.884,37.884,37.884,37.884,37.884,37.884,37.884,75.768,75.768,75.768,75.768,105.234,105.234,138.909,181.002,252.561,252.561,252.561,362.005,362.005,328.33,530.379,458.82,458.82,458.82,319.911,597.729,597.729,484.076,484.076,484.076,484.076,782.94,505.123,825.034,618.775,883.965,883.965,883.965,740.847,740.847,707.172,707.172,597.729,597.729,597.729,580.891,580.891,564.054,656.66,669.288,803.987,803.987,774.522,934.477,820.825,841.871,850.29,854.499,854.499,791.359,631.403,618.775,648.241,639.822,601.938,601.938,564.054,766.103,803.987,761.894]},{"iso":"STP","continent":"Africa","population":219161,"name":"Sao Tome and Principe","population_density":212.841,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,8,8,14,16,16,16,23,174,174,187,208,208,208,208,208,220,235,235,235,235,246,251,251,251,251,251,251,299,441,443,458,463,479,483,484,484,484,485,499,499,513,513,514,611,632,639,659,661,662,671,683,688,693,698,698,702,707,710,711,712,713,713,713,714,715,717,719,719,720,721,724,724,726,727,727,729,732,732,737,740,741,743,746,746,746,747,749,860,862,863,865,867,868,870,871,874,874,874,875,878,878,878,878,878,878,881,882,883,885,885,885,885,885,885,888,891,892,892,892,892,892,894,895,895,896,896,896,896,897,897,898,898,898,898,898,901,906,906,906,906,907,907,907,908,908,908,908,908,908,910,911,911,911,911,911,911,911,911,913,913,913,914,914,921,922,922,929,929,929,929,929,932,932,933,933,933,935,935,938,940,940,941,941,943,944,945,945,949,949,954,958,958,960,962,962,962,962,962,963,963,964,965,965,967,967,974,974,979,979,981,981,982,985,985,989,989,991,996,997,997,999,999,999,1002,1005,1005,1009,1009,1009,1009,1010,1010,1010,1011],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18.251,18.251,18.251,18.251,18.251,18.251,18.251,18.251,18.251,18.251,18.251,18.251,18.251,18.251,18.251,18.251,18.251,18.251,18.251,18.251,18.251,18.251,36.503,36.503,63.88,73.006,73.006,73.006,104.946,793.937,793.937,853.254,949.074,949.074,949.074,949.074,949.074,1003.828,1072.271,1072.271,1072.271,1072.271,1122.462,1145.277,1145.277,1145.277,1145.277,1145.277,1145.277,1364.294,2012.219,2021.345,2089.788,2112.602,2185.608,2203.859,2208.422,2208.422,2208.422,2212.985,2276.865,2276.865,2340.745,2340.745,2345.308,2787.905,2883.725,2915.665,3006.922,3016.048,3020.61,3061.676,3116.43,3139.245,3162.059,3184.873,3184.873,3203.125,3225.939,3239.627,3244.19,3248.753,3253.316,3253.316,3253.316,3257.879,3262.442,3271.567,3280.693,3280.693,3285.256,3289.819,3303.507,3303.507,3312.633,3317.196,3317.196,3326.322,3340.01,3340.01,3362.825,3376.513,3381.076,3390.202,3403.89,3403.89,3403.89,3408.453,3417.579,3924.056,3933.182,3937.744,3946.87,3955.996,3960.559,3969.684,3974.247,3987.936,3987.936,3987.936,3992.499,4006.187,4006.187,4006.187,4006.187,4006.187,4006.187,4019.876,4024.439,4029.002,4038.127,4038.127,4038.127,4038.127,4038.127,4038.127,4051.816,4065.504,4070.067,4070.067,4070.067,4070.067,4070.067,4079.193,4083.756,4083.756,4088.319,4088.319,4088.319,4088.319,4092.881,4092.881,4097.444,4097.444,4097.444,4097.444,4097.444,4111.133,4133.947,4133.947,4133.947,4133.947,4138.51,4138.51,4138.51,4143.073,4143.073,4143.073,4143.073,4143.073,4143.073,4152.199,4156.761,4156.761,4156.761,4156.761,4156.761,4156.761,4156.761,4156.761,4165.887,4165.887,4165.887,4170.45,4170.45,4202.39,4206.953,4206.953,4238.893,4238.893,4238.893,4238.893,4238.893,4252.581,4252.581,4257.144,4257.144,4257.144,4266.27,4266.27,4279.959,4289.084,4289.084,4293.647,4293.647,4302.773,4307.336,4311.899,4311.899,4330.15,4330.15,4352.964,4371.216,4371.216,4380.341,4389.467,4389.467,4389.467,4389.467,4389.467,4394.03,4394.03,4398.593,4403.156,4403.156,4412.281,4412.281,4444.221,4444.221,4467.036,4467.036,4476.161,4476.161,4480.724,4494.413,4494.413,4512.664,4512.664,4521.79,4544.604,4549.167,4549.167,4558.293,4558.293,4558.293,4571.981,4585.67,4585.67,4603.921,4603.921,4603.921,4603.921,4608.484,4608.484,4608.484,4613.047],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18.251,0,27.377,9.126,0,0,31.94,688.991,0,59.317,95.82,0,0,0,0,54.754,68.443,0,0,0,50.191,22.814,0,0,0,0,0,219.017,647.925,9.126,68.443,22.814,73.006,18.251,4.563,0,0,4.563,63.88,0,63.88,0,4.563,442.597,95.82,31.94,91.257,9.126,4.563,41.066,54.754,22.814,22.814,22.814,0,18.251,22.814,13.689,4.563,4.563,4.563,0,0,4.563,4.563,9.126,9.126,0,4.563,4.563,13.689,0,9.126,4.563,0,9.126,13.689,0,22.814,13.689,4.563,9.126,13.689,0,0,4.563,9.126,506.477,9.126,4.563,9.126,9.126,4.563,9.126,4.563,13.689,0,0,4.563,13.689,0,0,0,0,0,13.689,4.563,4.563,9.126,0,0,0,0,0,13.689,13.689,4.563,0,0,0,0,9.126,4.563,0,4.563,0,0,0,4.563,0,4.563,0,0,0,0,13.689,22.814,0,0,0,4.563,0,0,4.563,0,0,0,0,0,9.126,4.563,0,0,0,0,0,0,0,9.126,0,0,4.563,0,31.94,4.563,0,31.94,0,0,0,0,13.689,0,4.563,0,0,9.126,0,13.689,9.126,0,4.563,0,9.126,4.563,4.563,0,18.251,0,22.814,18.251,0,9.126,9.126,0,0,0,0,4.563,0,4.563,4.563,0,9.126,0,31.94,0,22.814,0,9.126,0,4.563,13.689,0,18.251,0,9.126,22.814,4.563,0,9.126,0,0,13.689,13.689,0,18.251,0,0,0,4.563,0,0,4.563],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18.251,18.251,45.628,54.754,54.754,54.754,86.694,775.685,757.434,816.751,885.194,876.068,876.068,876.068,844.128,209.891,278.334,219.017,123.197,123.197,173.388,196.202,196.202,141.448,73.005,73.005,73.005,292.022,889.756,876.068,944.511,967.325,1040.331,1058.582,1063.145,844.128,196.203,191.64,187.077,164.263,155.137,136.886,136.886,579.483,675.303,702.68,730.057,739.183,679.866,720.932,771.123,351.34,278.334,269.208,177.951,187.076,205.327,177.95,127.759,109.508,91.257,68.443,68.443,54.755,36.504,31.941,36.504,31.941,31.941,36.504,50.193,45.63,50.193,45.63,36.504,45.63,54.756,50.193,59.318,73.007,68.444,73.007,86.696,77.57,63.881,68.444,54.756,547.544,552.107,547.544,542.981,552.107,556.67,561.233,556.67,63.882,54.756,50.193,45.63,50.193,45.63,36.504,31.941,18.252,18.252,31.941,31.941,22.815,31.941,31.941,31.941,31.941,31.941,18.252,27.378,36.504,31.941,31.941,31.941,31.941,31.941,41.067,31.941,18.252,18.252,18.252,18.252,18.252,22.815,13.689,13.689,13.689,9.126,9.126,9.126,22.815,41.066,41.066,36.503,36.503,41.066,41.066,41.066,31.94,9.126,9.126,9.126,9.126,4.563,13.689,18.252,13.689,13.689,13.689,13.689,13.689,13.689,4.563,9.126,9.126,9.126,13.689,13.689,45.629,50.192,50.192,73.006,73.006,73.006,68.443,68.443,50.192,45.629,50.192,18.252,18.252,27.378,27.378,41.067,36.504,36.504,36.504,36.504,45.63,41.067,45.63,31.941,41.066,41.066,59.317,77.568,68.442,73.005,77.568,77.568,59.317,59.317,36.503,22.815,22.815,18.252,13.689,13.689,22.815,22.815,54.755,50.192,73.006,68.443,73.006,73.006,68.443,82.132,50.192,68.443,45.629,54.755,68.443,73.006,68.443,63.88,63.88,45.629,59.318,63.881,41.067,54.755,54.755,45.629,45.629,50.192,36.503,22.814,27.377],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2.607,2.607,6.518,7.822,7.822,7.822,12.385,108.205,108.205,112.768,125.153,125.153,125.153,120.59,22.162,29.984,31.288,17.6,17.6,17.6,24.77,28.029,20.207,10.429,10.429,10.429,10.429,34.547,123.849,125.153,134.93,138.189,148.619,151.226,120.59,28.029,26.725,17.6,23.466,13.037,19.555,18.903,19.555,82.783,95.82,91.257,104.294,96.472,97.124,102.338,46.932,36.503,35.199,25.422,24.118,26.073,23.466,17.6,14.992,12.385,9.778,9.778,7.17,4.563,3.259,3.911,4.563,3.911,4.563,5.215,6.518,5.867,5.867,5.215,5.215,5.867,7.17,5.215,8.474,9.126,9.126,10.429,11.081,9.126,9.126,6.518,5.867,77.569,77.569,76.265,77.569,78.872,78.872,78.872,7.17,7.822,7.17,5.867,5.215,6.518,5.215,4.563,2.607,2.607,2.607,3.911,2.607,3.259,4.563,4.563,4.563,4.563,2.607,1.956,3.259,3.911,4.563,4.563,4.563,4.563,4.563,3.911,2.607,1.956,2.607,2.607,2.607,2.607,1.956,1.304,1.956,1.304,1.304,1.304,1.304,2.607,5.867,5.215,5.215,5.215,5.867,5.867,3.911,1.304,1.304,1.304,1.304,0.652,0.652,1.956,1.956,1.956,1.956,1.956,1.956,1.956,0.652,0,1.304,1.304,1.304,1.956,1.956,6.518,7.17,5.867,10.429,10.429,9.778,9.778,5.215,6.518,6.518,2.607,2.607,2.607,3.911,3.911,3.911,5.215,4.563,5.215,5.215,5.215,5.867,4.563,3.259,5.867,5.215,8.474,9.778,9.126,9.778,11.081,8.474,8.474,5.215,2.607,3.259,1.956,1.304,1.956,1.956,3.259,3.259,7.17,7.17,9.778,9.126,10.429,9.126,9.778,7.17,7.17,6.518,6.518,6.518,9.778,9.778,7.822,9.126,6.518,6.518,7.17,5.867,5.215,7.822,6.518,6.518,6.518,5.215,3.259,3.259,1.304]},{"iso":"SAU","continent":"Asia","population":34813867,"name":"Saudi Arabia","population_density":15.322,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,5,5,5,11,15,20,21,45,86,103,103,118,171,171,274,344,392,511,562,767,900,1012,1104,1203,1299,1453,1563,1720,1885,2039,2179,2402,2605,2795,2932,3287,3651,4033,4462,4934,5369,5862,6380,7142,8274,9362,10484,11631,12772,13930,15102,16299,17522,18811,20077,21402,22753,24097,25459,27011,28656,30251,31938,33731,35432,37136,39048,41014,42925,44830,46869,49176,52016,54752,57345,59854,62545,65077,67719,70161,72560,74795,76726,78541,80185,81766,83384,85261,87142,89011,91182,93157,95748,98869,101914,105283,108571,112288,116021,119942,123308,127541,132048,136315,141234,145991,150292,154233,157612,161005,164144,167267,170639,174577,178504,182493,186436,190823,194225,197608,201801,205929,209509,213716,217108,220144,223327,226486,229480,232259,235111,237803,240474,243238,245851,248416,250920,253349,255825,258156,260394,262772,264973,266941,268934,270831,272590,274219,275905,277478,278835,280093,281456,282824,284226,285793,287262,288690,289947,291468,293037,294519,295902,297315,298542,299914,301323,302686,303973,305186,306370,307479,308654,309768,310836,311855,312924,313911,314821,315772,316670,317486,318319,319141,319932,320688,321456,322237,323012,323720,324407,325050,325651,326258,326930,327551,328144,328720,329271,329754,330246,330798,331359,331857,332329,332790,333193,333648,334187,334605,335097,335578,335997,336387,336766,337243,337711,338132,338539,338944,339267,339615,340089,340590,341062,341495,341854,342202,342583,342968,343373,343774,344157,344552,344875,345232,345631,346047,346482,346880,347282,347656,348037,348510,348936,349386,349822,350229,350592,350984,351455,351849,352160,352601,352950,353255,353556,353918,354208,354527,354813,355034,355258,355489,355741,356067,356389,356691,356911,357128,357360,357623,357872,358102,358336,358526,358713,358922,359115,359274,359415,359583,359749,359888,360013,360155,360335,360516],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.029,0.029,0.029,0.144,0.144,0.144,0.316,0.431,0.574,0.603,1.293,2.47,2.959,2.959,3.389,4.912,4.912,7.87,9.881,11.26,14.678,16.143,22.031,25.852,29.069,31.712,34.555,37.313,41.736,44.896,49.406,54.145,58.569,62.59,68.995,74.827,80.284,84.219,94.416,104.872,115.845,128.167,141.725,154.22,168.381,183.26,205.148,237.664,268.916,301.144,334.091,366.865,400.128,433.793,468.176,503.305,540.331,576.695,614.755,653.561,692.167,731.289,775.869,823.12,868.935,917.393,968.896,1017.755,1066.701,1121.622,1178.094,1232.986,1287.705,1346.274,1412.541,1494.117,1572.707,1647.188,1719.257,1796.554,1869.284,1945.173,2015.318,2084.227,2148.426,2203.892,2256.026,2303.249,2348.662,2395.138,2449.053,2503.083,2556.769,2619.129,2675.859,2750.283,2839.932,2927.397,3024.169,3118.614,3225.381,3332.609,3445.236,3541.922,3663.511,3792.971,3915.537,4056.832,4193.473,4317.015,4430.217,4527.276,4624.738,4714.903,4804.608,4901.466,5014.582,5127.382,5241.963,5355.222,5481.235,5578.955,5676.129,5796.57,5915.143,6017.976,6138.818,6236.251,6323.457,6414.886,6505.626,6591.626,6671.451,6753.372,6830.698,6907.42,6986.814,7061.87,7135.547,7207.473,7277.244,7348.365,7415.321,7479.606,7547.912,7611.134,7667.663,7724.91,7779.4,7829.926,7876.718,7925.147,7970.33,8009.308,8045.444,8084.595,8123.889,8164.161,8209.171,8251.367,8292.385,8328.492,8372.181,8417.249,8459.819,8499.544,8540.131,8575.376,8614.786,8655.258,8694.409,8731.377,8766.22,8800.229,8832.084,8865.835,8897.834,8928.511,8957.781,8988.487,9016.838,9042.977,9070.294,9096.088,9119.527,9143.454,9167.066,9189.786,9211.502,9233.562,9255.996,9278.257,9298.594,9318.327,9336.797,9354.06,9371.496,9390.798,9408.636,9425.669,9442.215,9458.042,9471.915,9486.048,9501.903,9518.018,9532.322,9545.88,9559.122,9570.698,9583.767,9599.25,9611.256,9625.389,9639.205,9651.24,9662.443,9673.329,9687.031,9700.474,9712.567,9724.257,9735.891,9745.168,9755.165,9768.78,9783.171,9796.728,9809.166,9819.478,9829.474,9840.418,9851.477,9863.11,9874.628,9885.63,9896.976,9906.254,9916.508,9927.969,9939.918,9952.414,9963.846,9975.393,9986.136,9997.08,10010.666,10022.903,10035.829,10048.352,10060.043,10070.47,10081.73,10095.259,10106.576,10115.509,10128.177,10138.202,10146.962,10155.608,10166.007,10174.337,10183.5,10191.715,10198.063,10204.497,10211.132,10218.371,10227.735,10236.984,10245.659,10251.978,10258.211,10264.875,10272.43,10279.582,10286.189,10292.91,10298.368,10303.739,10309.742,10315.286,10319.853,10323.903,10328.729,10333.497,10337.49,10341.08,10345.159,10350.33,10355.529],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.115,0,0,0.172,0.115,0.144,0.029,0.689,1.178,0.488,0,0.431,1.522,0,2.959,2.011,1.379,3.418,1.465,5.888,3.82,3.217,2.643,2.844,2.758,4.424,3.16,4.51,4.739,4.424,4.021,6.405,5.831,5.458,3.935,10.197,10.456,10.973,12.323,13.558,12.495,14.161,14.879,21.888,32.516,31.252,32.229,32.947,32.774,33.263,33.665,34.383,35.13,37.025,36.365,38.06,38.806,38.605,39.122,44.58,47.251,45.815,48.458,51.502,48.86,48.946,54.921,56.472,54.892,54.72,58.569,66.267,81.577,78.589,74.482,72.069,77.297,72.73,75.889,70.144,68.909,64.199,55.466,52.134,47.223,45.413,46.476,53.915,54.03,53.686,62.36,56.73,74.424,89.648,87.465,96.772,94.445,106.768,107.227,112.628,96.686,121.589,129.46,122.566,141.294,136.641,123.543,113.202,97.059,97.461,90.165,89.706,96.858,113.116,112.8,114.581,113.259,126.013,97.72,97.174,120.441,118.573,102.833,120.843,97.432,87.207,91.429,90.74,86,79.825,81.921,77.326,76.722,79.394,75.056,73.678,71.925,69.771,71.121,66.956,64.285,68.306,63.222,56.529,57.247,54.49,50.526,46.792,48.429,45.183,38.979,36.135,39.151,39.295,40.271,45.011,42.196,41.018,36.106,43.689,45.068,42.569,39.726,40.587,35.245,39.41,40.472,39.151,36.968,34.842,34.009,31.855,33.751,31.999,30.677,29.27,30.706,28.351,26.139,27.317,25.794,23.439,23.927,23.611,22.721,21.715,22.06,22.434,22.261,20.337,19.734,18.47,17.263,17.436,19.303,17.838,17.033,16.545,15.827,13.874,14.132,15.856,16.114,14.305,13.558,13.242,11.576,13.07,15.482,12.007,14.132,13.816,12.035,11.202,10.886,13.701,13.443,12.093,11.691,11.633,9.278,9.996,13.615,14.391,13.558,12.438,10.312,9.996,10.944,11.059,11.633,11.518,11.001,11.346,9.278,10.255,11.461,11.949,12.495,11.432,11.547,10.743,10.944,13.587,12.237,12.926,12.524,11.691,10.427,11.26,13.529,11.317,8.933,12.667,10.025,8.761,8.646,10.398,8.33,9.163,8.215,6.348,6.434,6.635,7.238,9.364,9.249,8.675,6.319,6.233,6.664,7.554,7.152,6.607,6.721,5.458,5.371,6.003,5.544,4.567,4.05,4.826,4.768,3.993,3.591,4.079,5.17,5.199],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.115,0.115,0.115,0.287,0.402,0.546,0.575,1.264,2.327,2.815,2.815,3.074,4.481,4.337,7.267,8.589,8.79,11.72,13.185,18.642,20.94,24.157,23.841,24.674,26.053,27.059,28.754,27.376,28.295,29.502,30.88,34.441,37.514,38.548,39.323,45.01,50.727,57.276,65.578,72.731,79.395,88.098,99.042,110.733,132.793,153.072,172.978,192.367,212.646,231.748,250.534,263.029,265.643,271.416,275.552,280.665,286.697,292.039,297.496,307.693,319.814,328.604,340.697,354.139,364.193,374.534,390.333,402.225,409.866,418.771,428.882,443.647,476.364,506.007,525.568,541.165,563.57,581.58,598.9,602.777,590.109,575.719,556.703,536.768,506.694,479.377,449.964,433.735,418.856,408.343,415.237,419.833,447.034,491.269,532.258,575.115,615.53,668.612,713.479,769.377,791.639,823.58,865.575,891.369,938.218,968.091,984.407,984.981,985.354,961.226,921.931,889.071,844.635,821.11,810.367,811.746,827.946,856.498,864.053,871.521,895.104,900.561,890.594,896.856,881.029,842.223,835.932,829.498,795.057,756.309,735.397,691.88,671.17,663.357,646.984,629.922,615.847,605.793,594.993,584.623,572.186,561.098,549.264,532.115,517.437,502.156,481.561,461.397,445.541,422.418,398.175,377.781,359.685,344.49,334.235,332.454,326.221,322.056,319.183,326.737,332.654,335.928,335.383,330.959,324.008,322.4,326.766,322.228,314.128,306.401,300.684,291.952,290.458,283.047,273.252,263.371,257.109,250.618,242.748,238.21,230.253,221.693,214.943,209.284,201.299,194.663,190.584,185.701,182.168,179.066,174.873,169.732,164.274,159.995,157.238,152.642,147.414,143.622,139.715,135.119,131.988,130.408,127.219,123.686,120.211,116.908,112.657,111.853,113.203,109.354,107.372,106.883,105.36,103.32,102.63,103.261,101.222,101.308,98.867,96.684,93.927,92.721,95.45,96.14,96.255,96.6,95.221,93.584,95.25,96.313,94.331,91.458,88.901,87.809,86.775,87.034,87.551,88.441,89.303,89.217,89.763,89.16,90.826,94.158,94.934,95.911,95.94,96.199,95.079,95.596,98.181,95.911,92.607,92.348,89.849,86.919,85.138,84.276,79.077,76.923,76.205,69.886,66.295,64.169,62.761,61.727,62.646,62.158,60.262,60.147,60.377,61.296,61.21,58.453,55.925,52.708,51.76,51.53,50.41,47.423,44.321,42.54,40.587,39.122,37.342,35.418,35.044,35.676],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.041,0.057,0.078,0.082,0.164,0.332,0.402,0.378,0.423,0.62,0.616,0.94,1.059,1.186,1.674,1.822,2.446,2.991,3.028,3.119,3.328,3.234,3.656,3.266,3.365,3.582,3.837,4.005,4.526,4.727,5.055,4.973,5.753,6.615,7.608,8.453,9.557,10.562,12.023,12.692,14.325,17.403,20.107,22.774,25.696,28.355,30.981,32.664,32.93,33.484,34.169,34.658,35.413,36.205,36.911,37.588,38.938,40.399,41.749,43.234,45.048,46.513,47.916,49.393,50.71,52.007,52.902,53.911,56.398,61.059,64.441,67.014,69.467,72.693,74.716,76.09,74.457,73.074,71.605,69.233,65.639,61.995,57.641,54.26,52.118,50.665,50.411,51.872,53.23,57.375,63.542,68.335,74.441,80.264,86.608,93.821,99.279,100.284,105.159,109.829,113.846,118.779,122.981,124.54,126.899,123.395,118.824,114.195,106.825,101.142,99.652,99.595,102.098,104.355,109.476,110.621,110.666,111.712,112.537,110.859,111.942,107.859,106.357,105.537,101.294,96.64,93.354,87.793,84.921,83.423,81.704,79.463,77.703,76.575,74.839,73.952,72.557,70.399,69.435,67.941,65.741,63.952,61.576,59.229,56.73,53.891,51.314,48.806,45.79,43.599,41.995,41.063,40.575,40.148,40.44,40.435,41.084,41.909,42.237,41.482,41.252,40.427,40.899,40.44,39.594,38.794,38.096,37.157,36.673,35.864,34.654,33.443,32.343,31.753,30.944,30.128,29.208,28.322,27.288,26.525,25.511,24.707,24.075,23.324,22.844,22.676,22.163,21.609,21.001,20.365,19.705,19.258,18.626,18.154,17.698,17.321,16.836,16.365,15.872,15.626,15.236,14.809,14.44,14.112,13.96,13.907,13.32,13.295,13.332,13.16,13.106,12.795,12.54,12.745,12.454,12.15,12.093,11.818,11.691,11.678,11.814,12.023,12.13,11.941,12.044,12.179,11.814,11.42,11.129,10.923,11.071,10.969,10.87,10.928,10.973,11.112,11.174,11.202,11.412,11.51,11.814,11.855,11.916,12.072,12.093,12.048,12.093,12.085,11.953,11.383,11.404,11.166,10.928,10.554,10.107,9.68,9.713,9.077,8.552,8.219,7.932,7.481,7.628,7.641,7.706,7.702,7.673,7.678,7.723,7.407,7.029,6.75,6.627,6.504,6.41,6.122,5.753,5.388,5.117,5.019,4.822,4.477,4.268,4.354,4.518]},{"iso":"SEN","continent":"Africa","population":16743930,"name":"Senegal","population_density":82.328,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,4,4,4,4,4,4,4,4,4,10,10,24,24,26,31,31,38,47,67,79,86,99,105,119,130,142,162,175,190,195,207,219,222,226,237,244,250,265,278,280,291,299,314,335,342,350,367,377,412,442,479,545,614,671,736,823,882,933,1024,1115,1182,1271,1329,1433,1492,1551,1634,1709,1886,1995,2105,2189,2310,2429,2480,2544,2617,2714,2812,2909,2976,3047,3130,3161,3253,3348,3429,3535,3645,3739,3836,3932,4021,4155,4249,4328,4427,4516,4640,4759,4851,4996,5090,5173,5247,5369,5475,5639,5783,5888,5970,6034,6129,6233,6354,6459,6586,6698,6793,6925,7054,7164,7272,7400,7478,7547,7657,7784,7882,8014,8135,8198,8243,8369,8481,8544,8669,8810,8948,8985,9121,9266,9422,9552,9681,9764,9805,9961,10106,10232,10284,10344,10386,10432,10538,10715,10887,11003,11175,11312,11380,11587,11740,11872,12032,12162,12237,12305,12446,12559,12689,12850,12949,13013,13056,13186,13294,13384,13456,13556,13611,13655,13743,13826,13881,13948,13987,14014,14044,14102,14150,14193,14237,14280,14306,14529,14568,14618,14645,14688,14714,14738,14759,14795,14816,14839,14869,14909,14919,14945,14982,15019,15051,15068,15094,15122,15141,15174,15190,15213,15244,15268,15292,15307,15331,15348,15368,15392,15418,15432,15459,15484,15508,15525,15543,15551,15565,15571,15582,15593,15605,15616,15630,15637,15640,15650,15668,15676,15693,15708,15711,15720,15735,15744,15755,15779,15793,15801,15806,15823,15835,15848,15865,15882,15897,15908,15927,15960,15981,16027,16075,16089,16107,16173,16217,16297,16397,16477,16553,16596,16665,16766,16893,17061,17075,17146,17216,17336,17451],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.06,0.119,0.239,0.239,0.239,0.239,0.239,0.239,0.239,0.239,0.239,0.597,0.597,1.433,1.433,1.553,1.851,1.851,2.269,2.807,4.001,4.718,5.136,5.913,6.271,7.107,7.764,8.481,9.675,10.452,11.347,11.646,12.363,13.079,13.259,13.497,14.154,14.572,14.931,15.827,16.603,16.722,17.379,17.857,18.753,20.007,20.425,20.903,21.918,22.516,24.606,26.398,28.607,32.549,36.67,40.074,43.956,49.152,52.676,55.722,61.156,66.591,70.593,75.908,79.372,85.583,89.107,92.631,97.588,102.067,112.638,119.148,125.717,130.734,137.96,145.067,148.113,151.936,156.295,162.089,167.941,173.735,177.736,181.976,186.933,188.785,194.279,199.953,204.791,211.121,217.691,223.305,229.098,234.831,240.147,248.15,253.764,258.482,264.394,269.71,277.115,284.222,289.717,298.377,303.991,308.948,313.367,320.654,326.984,336.779,345.379,351.65,356.547,360.369,366.043,372.254,379.481,385.752,393.337,400.026,405.699,413.583,421.287,427.857,434.307,441.951,446.61,450.731,457.3,464.885,470.738,478.621,485.848,489.61,492.298,499.823,506.512,510.274,517.74,526.161,534.403,536.612,544.735,553.395,562.711,570.475,578.18,583.137,585.585,594.902,603.562,611.087,614.193,617.776,620.284,623.032,629.362,639.933,650.206,657.134,667.406,675.588,679.649,692.012,701.15,709.033,718.589,726.353,730.832,734.893,743.314,750.063,757.827,767.442,773.355,777.177,779.745,787.509,793.959,799.334,803.635,809.607,812.892,815.519,820.775,825.732,829.017,833.018,835.347,836.96,838.752,842.216,845.082,847.65,850.278,852.846,854.399,867.717,870.047,873.033,874.645,877.213,878.766,880.2,881.454,883.604,884.858,886.232,888.023,890.412,891.009,892.562,894.772,896.982,898.893,899.908,901.461,903.133,904.268,906.239,907.194,908.568,910.419,911.853,913.286,914.182,915.615,916.631,917.825,919.259,920.811,921.647,923.26,924.753,926.186,927.202,928.277,928.754,929.591,929.949,930.606,931.263,931.98,932.636,933.473,933.891,934.07,934.667,935.742,936.22,937.235,938.131,938.31,938.848,939.744,940.281,940.938,942.371,943.207,943.685,943.984,944.999,945.716,946.492,947.508,948.523,949.419,950.076,951.21,953.181,954.435,957.183,960.049,960.886,961.961,965.902,968.53,973.308,979.28,984.058,988.597,991.165,995.286,1001.318,1008.903,1018.936,1019.773,1024.013,1028.194,1035.36,1042.228],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.06,0.119,0,0,0,0,0,0,0,0,0.358,0,0.836,0,0.119,0.299,0,0.418,0.538,1.194,0.717,0.418,0.776,0.358,0.836,0.657,0.717,1.194,0.776,0.896,0.299,0.717,0.717,0.179,0.239,0.657,0.418,0.358,0.896,0.776,0.119,0.657,0.478,0.896,1.254,0.418,0.478,1.015,0.597,2.09,1.792,2.21,3.942,4.121,3.404,3.882,5.196,3.524,3.046,5.435,5.435,4.001,5.315,3.464,6.211,3.524,3.524,4.957,4.479,10.571,6.51,6.57,5.017,7.226,7.107,3.046,3.822,4.36,5.793,5.853,5.793,4.001,4.24,4.957,1.851,5.495,5.674,4.838,6.331,6.57,5.614,5.793,5.733,5.315,8.003,5.614,4.718,5.913,5.315,7.406,7.107,5.495,8.66,5.614,4.957,4.42,7.286,6.331,9.795,8.6,6.271,4.897,3.822,5.674,6.211,7.226,6.271,7.585,6.689,5.674,7.883,7.704,6.57,6.45,7.645,4.658,4.121,6.57,7.585,5.853,7.883,7.226,3.763,2.688,7.525,6.689,3.763,7.465,8.421,8.242,2.21,8.122,8.66,9.317,7.764,7.704,4.957,2.449,9.317,8.66,7.525,3.106,3.583,2.508,2.747,6.331,10.571,10.272,6.928,10.272,8.182,4.061,12.363,9.138,7.883,9.556,7.764,4.479,4.061,8.421,6.749,7.764,9.615,5.913,3.822,2.568,7.764,6.45,5.375,4.3,5.972,3.285,2.628,5.256,4.957,3.285,4.001,2.329,1.613,1.792,3.464,2.867,2.568,2.628,2.568,1.553,13.318,2.329,2.986,1.613,2.568,1.553,1.433,1.254,2.15,1.254,1.374,1.792,2.389,0.597,1.553,2.21,2.21,1.911,1.015,1.553,1.672,1.135,1.971,0.956,1.374,1.851,1.433,1.433,0.896,1.433,1.015,1.194,1.433,1.553,0.836,1.613,1.493,1.433,1.015,1.075,0.478,0.836,0.358,0.657,0.657,0.717,0.657,0.836,0.418,0.179,0.597,1.075,0.478,1.015,0.896,0.179,0.538,0.896,0.538,0.657,1.433,0.836,0.478,0.299,1.015,0.717,0.776,1.015,1.015,0.896,0.657,1.135,1.971,1.254,2.747,2.867,0.836,1.075,3.942,2.628,4.778,5.972,4.778,4.539,2.568,4.121,6.032,7.585,10.033,0.836,4.24,4.181,7.167,6.868],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.06,0.179,0.179,0.179,0.179,0.179,0.179,0.179,0.119,0,0.358,0.358,1.194,1.194,1.313,1.612,1.612,2.03,2.21,3.404,3.285,3.703,4.36,4.419,5.255,5.494,5.673,5.673,5.732,6.21,5.733,6.092,5.973,5.495,5.017,4.48,4.122,3.584,4.181,4.24,3.642,4.12,4.359,4.598,5.434,5.494,5.076,5.315,5.793,7.226,8.54,9.854,12.542,16.245,19.171,22.038,26.637,28.071,29.325,32.55,34.043,33.923,35.834,35.416,36.431,36.431,36.909,36.431,35.475,42.045,43.24,46.346,45.152,48.854,52.437,50.526,49.869,43.658,42.941,42.224,43,39.775,36.908,38.819,36.848,37.983,37.864,36.849,37.387,39.956,41.33,42.166,46.048,45.868,48.197,48.973,47.36,46.703,46.404,48.017,49.391,49.571,50.228,50.228,50.467,48.974,50.945,49.87,52.558,55.663,53.274,52.557,51.422,52.676,51.601,52.496,48.972,47.957,48.375,49.152,53.213,55.243,55.602,54.826,56.2,53.273,50.705,51.601,51.303,49.452,50.765,51.541,47.659,45.689,49.093,49.212,45.39,47.002,47.54,48.556,47.003,52.437,53.572,56.2,60.201,60.44,56.976,51.183,58.29,58.828,57.693,51.482,47.301,42.105,39.895,43.777,45.031,46.643,46.046,53.212,57.811,59.364,68.98,71.787,69.099,68.383,69.219,63.426,59.305,63.665,58.051,56.677,58.409,54.766,50.824,48.913,52.616,50.645,49.271,45.807,42.164,39.536,38.342,41.03,38.223,35.058,33.684,31.713,27.354,25.861,26.697,24.308,21.919,21.262,19.829,19.053,30.758,31.295,30.817,29.563,29.563,28.488,27.353,27.054,15.886,14.811,13.199,13.378,13.199,12.243,12.363,13.319,13.379,14.036,13.677,13.438,12.721,13.259,13.677,12.423,11.587,11.527,11.945,11.825,11.049,11.347,10.391,10.629,10.688,10.39,9.793,9.973,10.57,10.57,10.57,10.451,9.496,8.779,8.301,7.345,6.509,5.793,5.435,5.196,5.136,4.479,4.718,5.136,4.957,5.255,5.494,4.837,4.957,5.674,5.615,5.197,6.152,5.973,5.555,5.675,6.152,5.973,6.211,6.569,6.151,6.211,6.39,7.226,8.182,8.719,10.69,12.542,12.363,12.542,15.827,17.32,20.127,24.845,26.876,28.548,30.28,33.326,35.416,40.373,45.628,40.492,39.954,39.596,44.195,46.942],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.026,0.026,0.017,0,0,0.051,0.051,0.171,0.171,0.188,0.23,0.23,0.239,0.316,0.367,0.469,0.512,0.58,0.631,0.691,0.708,0.64,0.708,0.759,0.776,0.768,0.751,0.759,0.683,0.546,0.529,0.461,0.469,0.495,0.503,0.495,0.555,0.529,0.597,0.725,0.657,0.614,0.742,0.734,0.964,1.092,1.229,1.732,2.252,2.594,3.063,3.507,3.754,3.873,4.087,4.274,4.36,4.565,4.317,4.701,4.769,4.496,4.428,4.496,5.247,5.682,5.733,5.947,6.476,6.783,6.578,5.614,5.307,5.196,5.315,5.111,4.667,4.838,5,4.641,4.599,4.573,4.437,4.769,5.102,5.196,5.759,5.793,5.742,6.194,6.092,5.827,5.87,5.802,6.041,6.297,5.938,6.373,6.501,6.365,6.237,6.22,6.109,6.723,6.715,6.808,6.8,6.715,6.484,6.467,6.1,5.768,5.955,6.211,6.476,6.791,7.005,6.911,6.936,6.945,6.655,6.433,6.245,6.228,6.126,6.331,6.271,6.143,5.938,6.075,5.947,5.648,5.588,5.759,6.399,6.331,6.416,6.698,7.491,7.534,7.431,6.962,6.996,7.167,7.167,6.911,6.245,5.657,5.307,5.349,4.923,5.196,5.588,6.134,7.09,7.901,8.088,8.95,8.745,8.404,8.779,8.421,7.892,7.892,7.329,6.988,6.971,6.979,6.715,6.621,6.407,6.314,6.271,5.93,5.17,5.179,5.102,5.111,4.752,4.539,4.24,4.198,3.677,3.438,3.319,3.063,2.764,2.662,2.466,2.5,2.491,4.138,3.976,3.993,3.856,3.848,3.703,3.686,1.962,1.937,1.689,1.655,1.544,1.664,1.544,1.587,1.595,1.732,1.809,1.698,1.578,1.732,1.672,1.638,1.459,1.382,1.502,1.485,1.45,1.416,1.34,1.348,1.322,1.263,1.28,1.194,1.297,1.305,1.365,1.34,1.288,1.135,1.135,0.956,0.836,0.725,0.683,0.623,0.674,0.614,0.589,0.58,0.64,0.606,0.657,0.665,0.631,0.683,0.725,0.648,0.674,0.734,0.725,0.768,0.734,0.751,0.776,0.793,0.734,0.759,0.819,0.87,0.887,1.066,1.135,1.382,1.647,1.638,1.698,2.099,2.193,2.696,3.157,3.43,3.959,4.172,4.198,4.684,5.085,5.665,5.102,5.059,5.29,5.725,5.844]},{"iso":"SRB","continent":"Europe","population":6804596,"name":"Serbia","population_density":80.291,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,5,12,19,35,46,48,55,65,83,103,135,171,222,249,303,384,384,457,659,741,785,900,1060,1171,1476,1624,1908,2200,2447,2666,2867,3105,3380,3630,4054,4465,4873,5318,5690,5994,6318,6630,6890,7144,7276,7483,7779,8042,8275,8497,8724,9009,9009,9362,9464,9557,9677,9791,9848,9943,10032,10032,10176,10243,10295,10374,10438,10496,10610,10699,10733,10833,10919,11024,11092,11159,11193,11227,11275,11300,11354,11381,11412,11430,11454,11523,11571,11667,11741,11823,11896,11965,12031,12102,12175,12251,12310,12367,12426,12522,12616,12709,12803,12894,12990,13092,13235,13372,13565,13792,14046,14288,14564,14836,15195,15504,15829,16131,16420,16719,17076,17342,17728,18073,18360,18639,18983,19334,19717,20109,20498,20894,21253,21605,22031,22443,22852,22852,23730,24141,24520,24892,25213,25552,25882,26193,26451,26738,27033,27332,27608,27863,28099,28262,28497,28751,28998,29233,29471,29682,29782,29890,30048,30209,30378,30548,30657,30714,30820,30974,31099,31207,31282,31365,31406,31482,31581,31676,31772,31849,31905,31941,31994,32078,32136,32228,32300,32408,32437,32511,32613,32695,32757,32840,32908,32938,32999,33080,33163,33238,33312,33384,33414,33479,33551,33662,33735,33842,33901,33952,34072,34193,34344,34517,34685,34787,34854,35006,35251,35454,35719,35946,36160,36282,36608,37120,37536,38115,38872,39486,39827,40880,42208,43592,45137,46954,48403,49205,51083,53495,55676,57958,60635,62747,64065,66888,70424,73765,77264,81086,84568,87381,92375,97988,104097,110351,116125,121120,126187,133029,140608,148214,155994,163035,169214,175438,183437,191356,199158,206940,213843,219652,226209,234027,241831,249224,255758,261437,266432,271364,277248,282601,287730],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.147,0.147,0.147,0.147,0.735,1.764,2.792,5.144,6.76,7.054,8.083,9.552,12.198,15.137,19.84,25.13,32.625,36.593,44.529,56.432,56.432,67.16,96.846,108.897,115.363,132.264,155.777,172.09,216.912,238.662,280.399,323.311,359.61,391.794,421.333,456.309,496.723,533.463,595.774,656.174,716.134,781.531,836.2,880.875,928.49,974.341,1012.551,1049.879,1069.277,1099.698,1143.198,1181.848,1216.09,1248.715,1282.075,1323.958,1323.958,1375.835,1390.825,1404.492,1422.127,1438.88,1447.257,1461.218,1474.298,1474.298,1495.46,1505.306,1512.948,1524.558,1533.963,1542.487,1559.24,1572.32,1577.316,1592.012,1604.651,1620.081,1630.075,1639.921,1644.918,1649.914,1656.968,1660.642,1668.578,1672.546,1677.102,1679.747,1683.274,1693.414,1700.468,1714.576,1725.451,1737.502,1748.23,1758.37,1768.07,1778.504,1789.232,1800.401,1809.071,1817.448,1826.119,1840.227,1854.041,1867.708,1881.522,1894.896,1909.004,1923.994,1945.009,1965.142,1993.506,2026.865,2064.193,2099.757,2140.318,2180.291,2233.05,2278.46,2326.222,2370.604,2413.075,2457.016,2509.48,2548.572,2605.298,2655.999,2698.176,2739.178,2789.732,2841.315,2897.6,2955.209,3012.376,3070.572,3123.33,3175.06,3237.665,3298.212,3358.318,3358.318,3487.349,3547.749,3603.447,3658.116,3705.29,3755.109,3803.606,3849.31,3887.226,3929.403,3972.756,4016.697,4057.258,4094.732,4129.415,4153.369,4187.905,4225.232,4261.531,4296.067,4331.043,4362.052,4376.748,4392.619,4415.839,4439.499,4464.336,4489.319,4505.337,4513.714,4529.292,4551.923,4570.293,4586.165,4597.187,4609.385,4615.41,4626.579,4641.128,4655.089,4669.197,4680.513,4688.743,4694.033,4701.822,4714.167,4722.69,4736.211,4746.792,4762.663,4766.925,4777.8,4792.79,4804.841,4813.952,4826.15,4836.143,4840.552,4849.516,4861.42,4873.618,4884.64,4895.515,4906.096,4910.505,4920.057,4930.638,4946.951,4957.679,4973.403,4982.074,4989.569,5007.204,5024.986,5047.177,5072.601,5097.29,5112.28,5122.126,5144.464,5180.469,5210.302,5249.246,5282.606,5314.055,5331.984,5379.893,5455.136,5516.272,5601.361,5712.61,5802.843,5852.956,6007.704,6202.866,6406.258,6633.311,6900.336,7113.28,7231.142,7507.132,7861.598,8182.117,8517.478,8910.889,9221.268,9414.96,9829.827,10349.476,10840.467,11354.679,11916.358,12428.071,12841.468,13575.383,14400.267,15298.043,16217.127,17065.671,17799.734,18544.378,19549.875,20663.681,21781.455,22924.8,23959.541,24867.604,25782.28,26957.809,28121.581,29268.159,30411.798,31426.26,32279.947,33243.561,34392.49,35539.362,36625.833,37586.067,38420.65,39154.712,39879.517,40744.226,41530.901,42284.656],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.588,1.029,1.029,2.351,1.617,0.294,1.029,1.47,2.645,2.939,4.703,5.291,7.495,3.968,7.936,11.904,0,10.728,29.686,12.051,6.466,16.9,23.514,16.313,44.823,21.75,41.736,42.912,36.299,32.184,29.539,34.976,40.414,36.74,62.311,60.4,59.959,65.397,54.669,44.676,47.615,45.851,38.209,37.328,19.399,30.421,43.5,38.65,34.242,32.625,33.36,41.883,0,51.877,14.99,13.667,17.635,16.753,8.377,13.961,13.079,0,21.162,9.846,7.642,11.61,9.405,8.524,16.753,13.079,4.997,14.696,12.639,15.431,9.993,9.846,4.997,4.997,7.054,3.674,7.936,3.968,4.556,2.645,3.527,10.14,7.054,14.108,10.875,12.051,10.728,10.14,9.699,10.434,10.728,11.169,8.671,8.377,8.671,14.108,13.814,13.667,13.814,13.373,14.108,14.99,21.015,20.133,28.363,33.36,37.328,35.564,40.561,39.973,52.758,45.41,47.762,44.382,42.471,43.941,52.465,39.091,56.726,50.701,42.177,41.002,50.554,51.583,56.285,57.608,57.167,58.196,52.758,51.73,62.605,60.547,60.106,0,129.03,60.4,55.698,54.669,47.174,49.819,48.497,45.704,37.916,42.177,43.353,43.941,40.561,37.475,34.682,23.954,34.535,37.328,36.299,34.535,34.976,31.008,14.696,15.872,23.22,23.66,24.836,24.983,16.019,8.377,15.578,22.632,18.37,15.872,11.022,12.198,6.025,11.169,14.549,13.961,14.108,11.316,8.23,5.291,7.789,12.345,8.524,13.52,10.581,15.872,4.262,10.875,14.99,12.051,9.111,12.198,9.993,4.409,8.965,11.904,12.198,11.022,10.875,10.581,4.409,9.552,10.581,16.313,10.728,15.725,8.671,7.495,17.635,17.782,22.191,25.424,24.689,14.99,9.846,22.338,36.005,29.833,38.944,33.36,31.449,17.929,47.909,75.243,61.135,85.09,111.248,90.233,50.113,154.748,195.162,203.392,227.052,267.025,212.944,117.862,275.99,354.466,320.519,335.362,393.411,310.378,193.693,414.867,519.649,490.992,514.211,561.679,511.713,413.397,733.916,824.884,897.776,919.085,848.544,734.063,744.644,1005.497,1113.806,1117.774,1143.345,1034.742,908.063,914.676,1175.529,1163.772,1146.578,1143.639,1014.461,853.688,963.613,1148.929,1146.872,1086.472,960.233,834.583,734.063,724.804,864.71,786.674,753.755],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.588,1.617,2.646,4.997,6.614,6.908,7.937,9.407,11.464,13.374,17.048,19.988,25.866,29.54,36.447,46.881,44.236,52.025,77.008,83.768,82.739,95.671,111.249,115.658,160.481,171.503,183.553,214.414,244.247,259.531,265.556,284.219,279.81,294.8,315.375,332.863,356.523,389.736,414.866,424.566,431.767,440.878,416.776,393.704,353.144,318.168,306.999,300.973,287.6,274.374,269.525,274.08,254.681,276.137,247.627,222.644,206.037,190.165,165.182,137.26,150.339,98.462,104.634,100.813,90.82,85.677,86.705,81.268,84.942,98.021,81.856,86.706,91.703,95.524,96.112,97.434,85.678,77.596,79.653,68.631,63.928,52.465,47.028,39.827,38.357,43.5,43.5,53.934,56.873,64.956,71.128,78.623,84.795,85.089,88.763,85.824,83.62,79.946,77.889,81.857,85.972,89.205,92.291,94.495,99.932,106.545,118.889,124.914,139.463,159.156,182.67,204.861,231.314,256.297,288.04,313.317,332.716,343.738,348.881,357.258,369.162,368.28,372.248,377.539,371.954,368.574,376.657,384.299,388.119,406.636,407.077,414.572,425.153,435.881,447.932,456.896,460.717,403.109,474.972,477.176,480.116,483.055,467.624,456.896,445.287,490.991,399.877,381.654,369.309,358.581,351.968,339.624,325.809,304.059,300.678,295.829,288.775,279.369,273.784,267.317,247.331,239.249,227.934,214.266,202.803,193.251,174.294,151.663,152.545,159.305,154.455,146.667,132.853,120.068,110.074,112.866,111.837,103.166,98.904,94.348,91.556,84.649,86.413,87.589,81.564,81.123,77.596,82.152,78.184,83.768,90.969,90.675,91.262,89.94,89.352,77.889,82.592,83.621,80.829,79.8,81.564,79.947,74.363,79.506,81.122,85.531,84.061,88.764,86.56,83.474,96.7,104.93,116.54,125.651,139.612,138.877,140.052,154.895,173.265,185.316,202.069,210.005,216.765,219.704,257.767,310.672,335.802,391.059,463.363,520.236,538.9,675.719,822.972,951.121,1117.038,1298.973,1400.669,1428.298,1654.175,1853.893,1979.25,2111.22,2277.579,2320.932,2301.681,2598.686,2842.345,2978.871,3172.563,3398.88,3517.182,3620.201,4160.424,4570.441,4948.568,5376.661,5710.994,5883.378,6116.309,6708.409,7088.299,7381.189,7626.758,7742.415,7801.934,7982.547,8413.432,8571.707,8604.479,8630.344,8501.46,8320.406,8375.956,8610.209,8581.552,8504.252,8317.907,8008.851,7728.453,7599.569,7500.666,7138.411,6745.294],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.378,0.714,0.945,0.987,1.134,1.26,1.491,1.764,2.099,2.624,3.653,4.073,4.997,6.319,5.899,6.76,10.245,10.896,11.253,12.534,14.192,16.522,21.393,20.259,24.5,29.707,32.478,33.717,35.606,34.2,36.866,36.152,38.923,42.366,46.334,51.457,54.27,54.879,56.432,54.081,50.911,47.678,41.107,37.643,37.475,36.194,34.535,33.738,33.171,36.383,32.037,33.234,29.854,26.915,24.773,22.401,17.614,19.609,14.066,11.925,12.995,11.883,10.581,11.043,10.392,9.741,12.135,10.98,10.287,11.295,11.442,12.303,12.513,11.526,10.371,10.371,9.279,7.999,6.928,6.067,5.312,4.976,4.766,5.207,5.689,6.571,7.558,8.629,9.783,10.728,10.665,11.148,10.665,10.707,10.224,9.888,9.678,10.308,10.791,11.211,11.589,12.261,13.079,13.982,14.969,15.872,17.971,20.763,24.185,27.25,30.903,33.612,38.272,40.708,42.765,43.773,44.76,45.243,47.027,45.075,46.691,47.111,46.796,46.586,47.531,47.405,49.861,49.987,50.911,53.199,54.879,55.047,56.621,57.23,57.587,49.42,59.54,60.631,61.198,60.064,58.154,56.684,63.612,51.709,48.497,46.565,44.949,44.487,43.164,41.59,40.015,38.021,36.929,36.068,34.976,34.116,33.759,33.234,31.911,29.245,27.229,25.424,24.038,22.611,20.469,19.567,19.525,19.441,18.685,17.404,15.41,14.864,14.528,13.898,12.743,12.114,11.862,11.904,11.337,11.232,10.749,10.434,9.657,9.573,9.468,10.56,10.413,10.854,11.232,11.736,11.106,11.337,10.497,10.518,10.245,9.804,9.825,10.098,9.909,9.993,9.993,10.077,9.888,10.476,10.434,11.127,10.854,11.295,12.45,13.478,14.318,16.417,17.698,18.601,18.937,19.609,22.212,23.304,25.235,26.474,28.825,29.98,33.633,39.238,43.71,50.302,61.429,69.827,74.424,89.687,106.819,127.141,147.421,169.675,187.205,196.884,214.204,236.962,253.694,269.167,287.222,301.141,311.974,331.814,355.411,379.764,405.314,429.353,458.115,489.501,535.08,578.685,636.796,694.636,735.616,767.381,814.701,853.499,894.773,926.202,958.239,984.839,1009.696,1033.986,1058.276,1065.414,1069.529,1069.571,1066.674,1058.906,1065.897,1062.097,1059.683,1051.096,1024.896,999.199,982.109,947.994,907.391,855.934,808.403]},{"iso":"SYC","continent":"Africa","population":98340,"name":"Seychelles","population_density":208.354,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,3,4,4,6,7,7,7,7,7,7,7,7,8,8,8,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,20,70,77,81,81,81,81,81,81,81,81,91,94,100,100,100,100,100,100,108,108,108,108,108,108,108,108,108,114,114,114,114,114,114,114,114,114,114,114,126,126,126,126,126,126,127,127,127,127,127,127,127,127,132,132,132,132,132,132,136,136,136,136,136,136,136,136,136,136,136,136,136,137,137,137,137,138,139,139,140,140,140,141,141,141,141,143,143,143,143,143,143,143,143,143,144,144,145,146,146,146,148,148,148,148,148,148,148,148,148,148,149,149,149,149,149,151,151,153,153,153,153,153,153,153,153,153,153,153,157,157,157,158,158,158,158,158,158,160,160,160,160,160,160,160,163,163,163,163,166,166,166,166,173,173,173,183,183,183,183,184,184,184,184,184,184,184,187,187,187,187,202,202,202],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20.338,20.338,30.506,40.675,40.675,61.013,71.182,71.182,71.182,71.182,71.182,71.182,71.182,71.182,81.35,81.35,81.35,101.688,101.688,101.688,101.688,101.688,101.688,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,111.857,203.376,711.816,782.998,823.673,823.673,823.673,823.673,823.673,823.673,823.673,823.673,925.361,955.867,1016.88,1016.88,1016.88,1016.88,1016.88,1016.88,1098.231,1098.231,1098.231,1098.231,1098.231,1098.231,1098.231,1098.231,1098.231,1159.243,1159.243,1159.243,1159.243,1159.243,1159.243,1159.243,1159.243,1159.243,1159.243,1159.243,1281.269,1281.269,1281.269,1281.269,1281.269,1281.269,1291.438,1291.438,1291.438,1291.438,1291.438,1291.438,1291.438,1291.438,1342.282,1342.282,1342.282,1342.282,1342.282,1342.282,1382.957,1382.957,1382.957,1382.957,1382.957,1382.957,1382.957,1382.957,1382.957,1382.957,1382.957,1382.957,1382.957,1393.126,1393.126,1393.126,1393.126,1403.295,1413.463,1413.463,1423.632,1423.632,1423.632,1433.801,1433.801,1433.801,1433.801,1454.139,1454.139,1454.139,1454.139,1454.139,1454.139,1454.139,1454.139,1454.139,1464.308,1464.308,1474.476,1484.645,1484.645,1484.645,1504.983,1504.983,1504.983,1504.983,1504.983,1504.983,1504.983,1504.983,1504.983,1504.983,1515.152,1515.152,1515.152,1515.152,1515.152,1535.489,1535.489,1555.827,1555.827,1555.827,1555.827,1555.827,1555.827,1555.827,1555.827,1555.827,1555.827,1555.827,1596.502,1596.502,1596.502,1606.671,1606.671,1606.671,1606.671,1606.671,1606.671,1627.008,1627.008,1627.008,1627.008,1627.008,1627.008,1627.008,1657.515,1657.515,1657.515,1657.515,1688.021,1688.021,1688.021,1688.021,1759.203,1759.203,1759.203,1860.891,1860.891,1860.891,1860.891,1871.06,1871.06,1871.06,1871.06,1871.06,1871.06,1871.06,1901.566,1901.566,1901.566,1901.566,2054.098,2054.098,2054.098],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10.169,10.169,0,20.338,10.169,0,0,0,0,0,0,0,10.169,0,0,20.338,0,0,0,0,0,10.169,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,91.519,508.44,71.182,40.675,0,0,0,0,0,0,0,101.688,30.506,61.013,0,0,0,0,0,81.35,0,0,0,0,0,0,0,0,61.013,0,0,0,0,0,0,0,0,0,0,122.026,0,0,0,0,0,10.169,0,0,0,0,0,0,0,50.844,0,0,0,0,0,40.675,0,0,0,0,0,0,0,0,0,0,0,0,10.169,0,0,0,10.169,10.169,0,10.169,0,0,10.169,0,0,0,20.338,0,0,0,0,0,0,0,0,10.169,0,10.169,10.169,0,0,20.338,0,0,0,0,0,0,0,0,0,10.169,0,0,0,0,20.338,0,20.338,0,0,0,0,0,0,0,0,0,0,40.675,0,0,10.169,0,0,0,0,0,20.338,0,0,0,0,0,0,30.506,0,0,0,30.506,0,0,0,71.182,0,0,101.688,0,0,0,10.169,0,0,0,0,0,0,30.506,0,0,0,152.532,0,0],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10.169,20.338,20.338,40.676,50.845,50.845,50.845,50.845,40.676,30.507,30.507,10.169,10.169,10.169,10.169,30.507,30.507,30.507,30.507,30.507,20.338,30.507,30.507,10.169,10.169,10.169,10.169,10.169,10.169,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,91.519,599.959,671.141,711.816,711.816,711.816,711.816,711.816,620.297,111.857,40.675,101.688,132.194,193.207,193.207,193.207,193.207,193.207,193.207,172.869,142.363,81.35,81.35,81.35,81.35,81.35,81.35,0,61.013,61.013,61.013,61.013,61.013,61.013,61.013,61.013,0,0,0,122.026,122.026,122.026,122.026,122.026,122.026,132.195,132.195,10.169,10.169,10.169,10.169,10.169,10.169,50.844,50.844,50.844,50.844,50.844,50.844,91.519,91.519,40.675,40.675,40.675,40.675,40.675,40.675,0,0,0,0,0,10.169,10.169,10.169,10.169,20.338,30.507,30.507,40.676,30.507,30.507,40.676,40.676,30.507,20.338,40.676,30.507,30.507,30.507,20.338,20.338,20.338,20.338,0,10.169,10.169,20.338,30.507,30.507,30.507,50.845,50.845,40.676,40.676,30.507,20.338,20.338,20.338,0,0,10.169,10.169,10.169,10.169,10.169,30.507,30.507,50.845,40.676,40.676,40.676,40.676,40.676,20.338,20.338,0,0,0,40.675,40.675,40.675,50.844,50.844,50.844,50.844,50.844,10.169,30.507,30.507,20.338,20.338,20.338,20.338,20.338,50.844,30.506,30.506,30.506,61.012,61.012,61.012,61.012,101.688,101.688,101.688,203.376,172.87,172.87,172.87,183.039,111.857,111.857,111.857,10.169,10.169,10.169,40.675,30.506,30.506,30.506,183.038,183.038,183.038],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7.263,7.263,7.263,5.811,4.358,4.358,1.453,0,1.453,1.453,1.453,4.358,4.358,4.358,4.358,2.905,2.905,4.358,1.453,1.453,1.453,1.453,1.453,1.453,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13.074,85.708,95.877,101.688,101.688,101.688,101.688,88.614,15.98,5.811,0,14.527,18.885,27.601,27.601,27.601,27.601,27.601,13.074,20.338,11.621,11.621,11.621,11.621,11.621,11.621,0,0,8.716,8.716,8.716,8.716,8.716,8.716,8.716,0,0,0,0,17.432,17.432,17.432,17.432,17.432,17.432,18.885,1.453,1.453,1.453,1.453,1.453,1.453,0,7.263,7.263,7.263,7.263,7.263,7.263,13.074,5.811,5.811,5.811,5.811,5.811,5.811,0,0,0,0,0,0,1.453,1.453,1.453,1.453,2.905,4.358,4.358,4.358,4.358,4.358,5.811,4.358,2.905,2.905,4.358,4.358,4.358,2.905,2.905,2.905,2.905,0,0,1.453,1.453,2.905,4.358,4.358,4.358,7.263,5.811,5.811,4.358,2.905,2.905,2.905,0,0,0,1.453,1.453,1.453,1.453,1.453,4.358,4.358,5.811,5.811,5.811,5.811,5.811,2.905,2.905,0,0,0,0,5.811,5.811,5.811,7.263,7.263,7.263,7.263,1.453,1.453,4.358,2.905,2.905,2.905,2.905,2.905,2.905,4.358,4.358,4.358,4.358,8.716,8.716,8.716,4.358,14.527,14.527,14.527,24.696,24.696,24.696,24.696,15.98,15.98,15.98,1.453,1.453,1.453,1.453,4.358,4.358,4.358,4.358,26.148,26.148,26.148]},{"iso":"SLE","continent":"Africa","population":7976985,"name":"Sierra Leone","population_density":104.7,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,2,4,6,6,6,7,7,8,8,10,10,11,13,15,26,30,35,43,50,61,64,82,82,93,93,104,104,124,136,155,166,178,199,225,231,257,291,307,338,338,387,408,447,462,505,519,534,570,585,606,621,707,735,754,782,812,829,852,861,865,896,909,914,929,946,969,1001,1025,1062,1085,1103,1132,1169,1176,1225,1249,1272,1298,1309,1327,1340,1347,1354,1354,1394,1410,1427,1450,1462,1498,1518,1524,1533,1542,1547,1572,1584,1598,1613,1618,1635,1642,1651,1668,1678,1688,1701,1711,1711,1727,1731,1752,1765,1768,1783,1783,1786,1803,1818,1823,1823,1843,1848,1855,1860,1877,1887,1895,1916,1917,1932,1937,1940,1947,1954,1956,1956,1959,1961,1969,1972,1980,1992,1997,2001,2003,2013,2013,2019,2022,2022,2028,2029,2035,2041,2041,2054,2055,2064,2067,2069,2087,2096,2109,2111,2126,2133,2133,2153,2159,2168,2168,2174,2183,2188,2199,2208,2215,2215,2222,2231,2238,2252,2259,2269,2269,2277,2287,2293,2295,2300,2306,2306,2309,2315,2323,2325,2327,2330,2331,2336,2337,2340,2343,2345,2346,2346,2350,2354,2362,2365,2366,2366,2366,2368,2369,2371,2373,2381,2381,2385,2386,2386,2387,2389,2391,2391,2391,2392,2397,2397,2399,2405,2405,2406,2406,2408,2409,2410,2410,2411,2412,2413,2416,2416,2420,2420,2426,2428,2428,2434,2435,2438,2440,2440,2445,2451,2460,2464],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.125,0.251,0.251,0.251,0.501,0.752,0.752,0.752,0.878,0.878,1.003,1.003,1.254,1.254,1.379,1.63,1.88,3.259,3.761,4.388,5.391,6.268,7.647,8.023,10.28,10.28,11.659,11.659,13.038,13.038,15.545,17.049,19.431,20.81,22.314,24.947,28.206,28.958,32.218,36.48,38.486,42.372,42.372,48.515,51.147,56.036,57.917,63.307,65.062,66.943,71.456,73.336,75.969,77.849,88.63,92.14,94.522,98.032,101.793,103.924,106.807,107.936,108.437,112.323,113.953,114.58,116.46,118.591,121.474,125.486,128.495,133.133,136.016,138.273,141.908,146.547,147.424,153.567,156.575,159.459,162.718,164.097,166.354,167.983,168.861,169.738,169.738,174.753,176.759,178.89,181.773,183.277,187.79,190.297,191.05,192.178,193.306,193.933,197.067,198.571,200.326,202.207,202.834,204.965,205.842,206.97,209.102,210.355,211.609,213.238,214.492,214.492,216.498,216.999,219.632,221.262,221.638,223.518,223.518,223.894,226.025,227.906,228.532,228.532,231.04,231.666,232.544,233.171,235.302,236.556,237.558,240.191,240.316,242.197,242.824,243.2,244.077,244.955,245.205,245.205,245.582,245.832,246.835,247.211,248.214,249.718,250.345,250.847,251.097,252.351,252.351,253.103,253.479,253.479,254.231,254.357,255.109,255.861,255.861,257.491,257.616,258.744,259.12,259.371,261.628,262.756,264.386,264.636,266.517,267.394,267.394,269.901,270.654,271.782,271.782,272.534,273.662,274.289,275.668,276.796,277.674,277.674,278.551,279.68,280.557,282.312,283.19,284.443,284.443,285.446,286.7,287.452,287.703,288.329,289.082,289.082,289.458,290.21,291.213,291.464,291.714,292.09,292.216,292.842,292.968,293.344,293.72,293.971,294.096,294.096,294.598,295.099,296.102,296.478,296.603,296.603,296.603,296.854,296.979,297.23,297.481,298.484,298.484,298.985,299.111,299.111,299.236,299.487,299.737,299.737,299.737,299.863,300.489,300.489,300.74,301.492,301.492,301.618,301.618,301.868,301.994,302.119,302.119,302.245,302.37,302.495,302.871,302.871,303.373,303.373,304.125,304.376,304.376,305.128,305.253,305.629,305.88,305.88,306.507,307.259,308.387,308.889],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.125,0,0,0.251,0.251,0,0,0.125,0,0.125,0,0.251,0,0.125,0.251,0.251,1.379,0.501,0.627,1.003,0.878,1.379,0.376,2.256,0,1.379,0,1.379,0,2.507,1.504,2.382,1.379,1.504,2.633,3.259,0.752,3.259,4.262,2.006,3.886,0,6.143,2.633,4.889,1.88,5.391,1.755,1.88,4.513,1.88,2.633,1.88,10.781,3.51,2.382,3.51,3.761,2.131,2.883,1.128,0.501,3.886,1.63,0.627,1.88,2.131,2.883,4.012,3.009,4.638,2.883,2.256,3.635,4.638,0.878,6.143,3.009,2.883,3.259,1.379,2.256,1.63,0.878,0.878,0,5.014,2.006,2.131,2.883,1.504,4.513,2.507,0.752,1.128,1.128,0.627,3.134,1.504,1.755,1.88,0.627,2.131,0.878,1.128,2.131,1.254,1.254,1.63,1.254,0,2.006,0.501,2.633,1.63,0.376,1.88,0,0.376,2.131,1.88,0.627,0,2.507,0.627,0.878,0.627,2.131,1.254,1.003,2.633,0.125,1.88,0.627,0.376,0.878,0.878,0.251,0,0.376,0.251,1.003,0.376,1.003,1.504,0.627,0.501,0.251,1.254,0,0.752,0.376,0,0.752,0.125,0.752,0.752,0,1.63,0.125,1.128,0.376,0.251,2.256,1.128,1.63,0.251,1.88,0.878,0,2.507,0.752,1.128,0,0.752,1.128,0.627,1.379,1.128,0.878,0,0.878,1.128,0.878,1.755,0.878,1.254,0,1.003,1.254,0.752,0.251,0.627,0.752,0,0.376,0.752,1.003,0.251,0.251,0.376,0.125,0.627,0.125,0.376,0.376,0.251,0.125,0,0.501,0.501,1.003,0.376,0.125,0,0,0.251,0.125,0.251,0.251,1.003,0,0.501,0.125,0,0.125,0.251,0.251,0,0,0.125,0.627,0,0.251,0.752,0,0.125,0,0.251,0.125,0.125,0,0.125,0.125,0.125,0.376,0,0.501,0,0.752,0.251,0,0.752,0.125,0.376,0.251,0,0.627,0.752,1.128,0.501],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.125,0.125,0.125,0.376,0.627,0.627,0.627,0.752,0.627,0.752,0.752,0.752,0.501,0.626,0.877,1.003,2.382,2.758,3.385,4.137,5.015,6.269,6.394,8.399,7.02,7.898,7.271,7.647,6.769,7.897,9.025,9.151,10.53,10.655,13.288,15.168,15.92,16.672,19.43,19.054,21.561,20.057,23.567,22.941,27.078,25.699,26.828,26.577,24.571,29.084,24.821,24.821,21.812,30.713,28.832,29.459,31.089,30.337,30.588,30.838,30.086,19.806,20.182,19.43,16.547,14.666,14.666,14.666,17.55,20.058,20.81,22.063,23.692,25.447,27.954,25.949,28.08,28.08,26.325,26.701,25.824,24.445,21.437,21.437,16.172,13.163,15.294,14.041,14.793,15.42,15.294,18.929,20.558,21.31,17.424,16.546,15.042,15.293,15.293,12.535,11.908,11.783,12.786,12.536,13.037,12.034,11.784,11.283,11.033,11.66,9.529,10.657,10.03,10.532,10.908,10.03,10.28,9.026,9.402,9.527,10.906,8.9,7.27,9.401,8.148,9.026,9.277,9.277,8.651,9.027,11.66,9.278,10.531,10.28,10.029,8.776,8.4,7.648,5.015,5.266,3.637,4.013,4.013,4.138,4.764,5.14,5.641,5.516,6.519,5.516,5.892,5.265,3.761,3.886,3.51,4.011,3.509,3.509,4.387,4.136,5.264,4.888,5.014,6.518,6.894,8.524,7.145,8.9,8.65,8.274,10.53,9.026,9.026,7.396,7.897,7.145,6.894,8.273,6.894,7.02,5.892,6.77,7.146,6.896,8.024,7.523,7.649,6.771,7.774,8.15,7.774,7.147,6.019,5.893,4.639,5.015,4.764,4.513,4.012,4.012,3.761,3.134,3.761,3.51,3.134,2.507,2.507,2.381,2.005,2.381,2.255,3.133,3.133,2.882,2.631,2.506,2.757,2.381,2.131,1.379,2.006,1.881,2.382,2.507,2.256,2.256,2.256,2.256,1.253,1.253,0.877,1.379,1.379,1.505,2.006,1.755,1.88,1.88,2.006,1.504,1.629,1.378,0.751,0.876,0.876,1.252,1.001,1.377,1.252,2.004,2.13,2.005,2.632,2.381,2.757,2.507,2.507,2.382,2.883,4.011,3.76],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.09,0.09,0.09,0.09,0.107,0.072,0.072,0.072,0.09,0.107,0.143,0.322,0.394,0.448,0.591,0.698,0.86,0.878,1.003,0.931,1.039,0.895,0.967,0.77,1.075,0.967,1.307,1.307,1.522,1.701,2.167,1.916,2.167,2.436,2.525,2.865,2.489,2.901,3.17,3.403,3.062,3.546,3.241,3.51,3.277,3.17,2.847,2.847,3.618,3.868,3.94,3.797,4.065,3.994,4.137,2.758,2.328,2.543,2.274,1.827,1.791,1.683,1.934,2.436,2.31,2.74,3.062,3.116,3.331,3.582,3.134,3.582,3.349,3.349,3.492,3.17,2.83,2.937,2.185,1.88,1.469,1.719,1.809,1.791,1.97,2.059,2.579,2.937,2.328,2.203,2.059,1.737,1.97,1.54,1.433,1.594,1.522,1.666,1.701,1.415,1.504,1.433,1.343,1.486,1.361,1.236,1.361,1.128,1.325,1.379,1.2,1.289,1.289,1.057,1.289,1.182,1.039,0.985,1.075,1.164,1.236,1.021,1.057,1.146,1.289,1.307,1.236,1.379,1.379,1.128,1.075,1.057,0.716,0.698,0.484,0.43,0.519,0.448,0.466,0.645,0.734,0.752,0.752,0.788,0.734,0.698,0.537,0.448,0.484,0.466,0.394,0.501,0.394,0.573,0.591,0.645,0.681,0.609,0.824,0.985,0.985,1.003,1.11,1.182,1.146,1.182,1.128,1.057,1.021,0.86,0.895,0.985,0.824,0.878,0.842,0.842,0.86,0.86,0.895,0.949,0.913,0.967,0.967,0.985,1.003,0.985,0.77,0.734,0.663,0.663,0.573,0.501,0.537,0.537,0.484,0.43,0.448,0.484,0.394,0.304,0.322,0.322,0.287,0.269,0.251,0.304,0.394,0.394,0.376,0.358,0.358,0.322,0.269,0.161,0.143,0.269,0.269,0.34,0.322,0.304,0.287,0.287,0.179,0.179,0.107,0.107,0.197,0.179,0.179,0.251,0.251,0.269,0.251,0.197,0.215,0.197,0.09,0.107,0.107,0.125,0.143,0.125,0.179,0.179,0.269,0.287,0.269,0.322,0.34,0.322,0.358,0.251,0.304,0.412,0.466,0.519]},{"iso":"SGP","continent":"Asia","population":5850343,"name":"Singapore","population_density":7915.731,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,3,4,5,7,7,10,13,16,18,18,24,28,28,30,33,40,45,47,50,58,67,72,75,77,81,84,84,85,85,89,89,91,93,93,93,102,106,108,110,110,117,130,138,150,150,160,178,178,200,212,226,243,266,313,345,385,432,455,509,558,631,683,732,802,844,879,926,1000,1049,1114,1189,1309,1375,1481,1623,1910,2108,2299,2532,2918,3252,3699,4427,5050,5992,6588,8014,9125,10141,11178,12075,12693,13624,14423,14951,15641,16169,17101,17548,18205,18778,19410,20198,20939,21707,22460,23336,23822,24671,25346,26098,26891,27356,28038,28343,28794,29364,29812,30426,31068,31616,31960,32343,32876,33249,33860,34366,34884,35292,35836,36405,36922,37183,37527,37910,38296,38514,38965,39387,39850,40197,40604,40818,40969,41216,41473,41615,41833,42095,42313,42432,42623,42736,42955,43246,43459,43661,43907,44122,44310,44479,44664,44800,44983,45140,45298,45423,45614,45783,45961,46283,46630,46878,47126,47453,47655,47912,48035,48434,48744,49098,49375,49888,50369,50838,51197,51531,51809,52205,52512,52825,53051,53346,54254,54555,54797,54929,55104,55292,55353,55395,55497,55580,55661,55747,55838,55938,56031,56099,56216,56266,56353,56404,56435,56495,56572,56666,56717,56771,56812,56852,56860,56908,56948,56982,57022,57044,57091,57166,57229,57315,57357,57406,57454,57488,57514,57532,57543,57558,57576,57606,57627,57639,57654,57665,57685,57700,57715,57742,57765,57784,57794,57800,57812,57819,57830,57840,57849,57859,57866,57876,57880,57884,57889,57892,57901,57904,57911,57915,57921,57933,57941,57951,57965,57970,57973,57980,57987,57994,58003,58015,58019,58020,58029,58036,58043,58047,58054,58056,58064,58073,58091,58102,58114,58116,58119,58124,58130,58135,58139,58143,58148,58160,58165,58183,58190,58195,58199,58205,58213,58218,58228,58230,58239,58242,58255,58260,58273,58285,58291,58297,58305,58313,58320,58325,58341,58353,58377],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.171,0.513,0.513,0.684,0.855,1.197,1.197,1.709,2.222,2.735,3.077,3.077,4.102,4.786,4.786,5.128,5.641,6.837,7.692,8.034,8.547,9.914,11.452,12.307,12.82,13.162,13.845,14.358,14.358,14.529,14.529,15.213,15.213,15.555,15.897,15.897,15.897,17.435,18.119,18.46,18.802,18.802,19.999,22.221,23.588,25.64,25.64,27.349,30.426,30.426,34.186,36.237,38.63,41.536,45.467,53.501,58.971,65.808,73.842,77.773,87.003,95.379,107.857,116.745,125.121,137.086,144.265,150.248,158.281,170.93,179.306,190.416,203.236,223.748,235.029,253.148,277.42,326.477,360.321,392.968,432.795,498.774,555.865,632.271,756.708,863.197,1024.213,1126.088,1369.834,1559.738,1733.403,1910.657,2063.982,2169.616,2328.752,2465.326,2555.577,2673.518,2763.77,2923.076,2999.482,3111.783,3209.726,3317.754,3452.447,3579.106,3710.381,3839.091,3988.826,4071.898,4217.018,4332.396,4460.935,4596.483,4675.965,4792.54,4844.673,4921.763,5019.193,5095.77,5200.721,5310.458,5404.128,5462.928,5528.394,5619.5,5683.257,5787.695,5874.185,5962.727,6032.467,6125.453,6222.712,6311.083,6355.696,6414.496,6479.962,6545.941,6583.204,6660.293,6732.426,6811.566,6870.879,6940.448,6977.027,7002.837,7045.057,7088.986,7113.258,7150.521,7195.305,7232.567,7252.908,7285.556,7304.871,7342.305,7392.045,7428.453,7462.981,7505.03,7541.78,7573.915,7602.802,7634.424,7657.671,7688.951,7715.787,7742.794,7764.16,7796.808,7825.695,7856.121,7911.16,7970.473,8012.864,8055.254,8111.148,8145.676,8189.605,8210.63,8278.831,8331.819,8392.328,8439.676,8527.363,8609.581,8689.747,8751.111,8808.202,8855.72,8923.408,8975.884,9029.385,9068.015,9118.44,9273.644,9325.094,9366.459,9389.022,9418.935,9451.07,9461.497,9468.676,9486.11,9500.298,9514.143,9528.843,9544.398,9561.491,9577.387,9589.01,9609.009,9617.556,9632.427,9641.144,9646.443,9656.699,9669.86,9685.928,9694.645,9703.875,9710.884,9717.721,9719.088,9727.293,9734.13,9739.942,9746.779,9750.539,9758.573,9771.393,9782.161,9796.861,9804.041,9812.416,9820.621,9826.432,9830.877,9833.953,9835.834,9838.398,9841.474,9846.602,9850.192,9852.243,9854.807,9856.687,9860.106,9862.67,9865.234,9869.849,9873.78,9877.028,9878.737,9879.763,9881.814,9883.01,9884.891,9886.6,9888.138,9889.847,9891.044,9892.753,9893.437,9894.121,9894.975,9895.488,9897.027,9897.539,9898.736,9899.42,9900.445,9902.496,9903.864,9905.573,9907.966,9908.821,9909.334,9910.53,9911.727,9912.923,9914.461,9916.513,9917.196,9917.367,9918.906,9920.102,9921.299,9921.982,9923.179,9923.521,9924.888,9926.427,9929.503,9931.384,9933.435,9933.777,9934.289,9935.144,9936.17,9937.024,9937.708,9938.392,9939.246,9941.297,9942.152,9945.229,9946.425,9947.28,9947.964,9948.989,9950.357,9951.211,9952.921,9953.263,9954.801,9955.314,9957.536,9958.39,9960.613,9962.664,9963.689,9964.715,9966.082,9967.45,9968.646,9969.501,9972.236,9974.287,9978.389],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.342,0,0.171,0.171,0.342,0,0.513,0.513,0.513,0.342,0,1.026,0.684,0,0.342,0.513,1.197,0.855,0.342,0.513,1.367,1.538,0.855,0.513,0.342,0.684,0.513,0,0.171,0,0.684,0,0.342,0.342,0,0,1.538,0.684,0.342,0.342,0,1.197,2.222,1.367,2.051,0,1.709,3.077,0,3.76,2.051,2.393,2.906,3.931,8.034,5.47,6.837,8.034,3.931,9.23,8.376,12.478,8.888,8.376,11.965,7.179,5.983,8.034,12.649,8.376,11.11,12.82,20.512,11.281,18.119,24.272,49.057,33.844,32.648,39.827,65.979,57.091,76.406,124.437,106.489,161.016,101.874,243.746,189.903,173.665,177.255,153.324,105.635,159.136,136.573,90.251,117.942,90.251,159.307,76.406,112.301,97.943,108.028,134.693,126.659,131.274,128.71,149.735,83.072,145.12,115.378,128.539,135.548,79.483,116.574,52.134,77.089,97.43,76.577,104.951,109.737,93.67,58.8,65.466,91.106,63.757,104.438,86.491,88.542,69.74,92.986,97.259,88.371,44.613,58.8,65.466,65.979,37.263,77.089,72.133,79.141,59.313,69.569,36.579,25.81,42.22,43.929,24.272,37.263,44.784,37.263,20.341,32.648,19.315,37.434,49.741,36.408,34.528,42.049,36.75,32.135,28.887,31.622,23.247,31.28,26.836,27.007,21.366,32.648,28.887,30.426,55.04,59.313,42.391,42.391,55.894,34.528,43.929,21.024,68.201,52.988,60.509,47.348,87.687,82.217,80.166,61.364,57.091,47.519,67.688,52.476,53.501,38.63,50.424,155.205,51.45,41.365,22.563,29.913,32.135,10.427,7.179,17.435,14.187,13.845,14.7,15.555,17.093,15.897,11.623,19.999,8.547,14.871,8.717,5.299,10.256,13.162,16.067,8.717,9.23,7.008,6.837,1.367,8.205,6.837,5.812,6.837,3.76,8.034,12.82,10.769,14.7,7.179,8.376,8.205,5.812,4.444,3.077,1.88,2.564,3.077,5.128,3.59,2.051,2.564,1.88,3.419,2.564,2.564,4.615,3.931,3.248,1.709,1.026,2.051,1.197,1.88,1.709,1.538,1.709,1.197,1.709,0.684,0.684,0.855,0.513,1.538,0.513,1.197,0.684,1.026,2.051,1.367,1.709,2.393,0.855,0.513,1.197,1.197,1.197,1.538,2.051,0.684,0.171,1.538,1.197,1.197,0.684,1.197,0.342,1.367,1.538,3.077,1.88,2.051,0.342,0.513,0.855,1.026,0.855,0.684,0.684,0.855,2.051,0.855,3.077,1.197,0.855,0.684,1.026,1.367,0.855,1.709,0.342,1.538,0.513,2.222,0.855,2.222,2.051,1.026,1.026,1.367,1.367,1.197,0.855,2.735,2.051,4.102],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.342,0.342,0.513,0.684,1.026,1.026,1.539,2.052,2.223,2.565,2.394,3.249,3.591,3.591,3.42,3.42,4.104,4.617,4.959,4.446,5.129,6.667,7.18,7.18,6.325,6.154,6.325,5.812,4.616,3.078,2.907,2.394,2.394,2.052,1.539,1.539,2.906,3.59,3.248,3.59,3.248,4.103,6.325,7.692,8.205,7.521,8.888,11.623,11.623,14.186,14.015,15.041,15.896,19.827,26.152,28.545,35.382,39.656,41.536,48.373,53.843,62.39,63.244,66.15,71.278,70.423,72.475,71.279,75.552,71.45,73.672,78.116,86.663,90.765,102.901,119.139,155.547,181.015,202.553,229.56,275.027,320.837,379.124,479.289,536.721,663.893,733.119,937.038,1060.962,1177.536,1278.385,1307.272,1306.418,1304.538,1339.237,1185.742,1113.781,1030.367,1012.419,935.501,942.167,880.974,852.429,896.871,905.588,946.611,916.014,989.343,960.114,1007.291,1014.641,1008.487,1017.376,965.585,953.449,855.848,849.865,802.175,763.374,739.786,713.975,728.162,670.388,683.72,697.737,664.064,691.925,673.465,652.27,628.34,662.526,694.319,691.584,672.44,626.802,605.777,583.214,550.737,534.84,509.714,500.484,515.184,525.953,497.066,456.897,461.854,428.694,380.833,338.955,324.426,292.12,275.882,282.72,259.815,253.32,278.789,277.934,267.678,272.464,288.873,288.36,297.932,292.12,265.626,260.498,252.806,237.764,222.38,222.893,222.893,221.697,253.49,281.523,297.078,312.462,346.99,348.87,363.912,354.51,367.671,361.346,379.464,384.421,416.214,463.903,500.14,540.48,529.37,523.901,531.08,536.208,502.022,458.435,428.693,522.534,516.893,510.739,465.614,443.051,421.685,393.482,350.237,212.467,175.204,147.684,139.821,125.463,110.421,115.891,120.335,122.899,117.259,118.285,112.302,102.046,95.209,92.474,96.918,85.636,86.319,78.456,76.576,72.644,70.593,64.268,54.013,52.133,46.663,47.689,53.672,63.074,69.569,69.911,72.475,73.843,75.895,72.305,62.562,53.673,41.537,37.435,34.187,29.572,25.811,23.931,22.734,24.273,24.273,23.76,23.247,23.588,24.785,23.93,23.076,21.708,20.341,19.657,16.751,14.358,12.819,12.307,12.99,11.623,11.11,10.085,8.889,8.889,7.693,7.693,6.668,7.01,8.377,8.889,10.085,10.94,11.282,10.598,11.111,11.282,10.428,10.599,10.941,9.232,8.548,9.573,9.573,9.573,9.06,8.719,7.01,7.693,9.06,10.599,11.282,12.136,11.794,11.11,11.623,11.282,10.599,8.206,7.01,5.814,7.523,7.865,10.087,10.258,10.258,10.258,10.6,11.112,9.916,10.77,8.035,8.376,8.034,9.572,9.401,10.256,11.452,10.769,11.453,11.282,12.136,11.111,11.111,11.624,11.624,14.7],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.147,0.22,0.244,0.317,0.342,0.317,0.415,0.513,0.44,0.415,0.415,0.537,0.659,0.562,0.537,0.733,0.903,0.952,0.855,0.781,0.83,0.83,0.635,0.44,0.317,0.342,0.293,0.244,0.22,0.22,0.195,0.415,0.415,0.464,0.464,0.415,0.586,0.903,0.879,1.074,1.026,1.221,1.66,1.49,1.709,1.807,1.856,2.271,2.588,3.297,4.078,4.517,5.372,5.592,6.495,7.13,7.765,8.253,8.473,9.035,9.499,9.035,8.986,9.01,8.937,9.328,9.45,11.355,12.112,13.552,15.213,21.024,24.272,27.105,29.864,37.678,43.245,50.693,61.462,71.839,90.178,99.042,124.437,143.41,157.305,164.85,171.541,163.629,171.809,156.499,142.263,134.302,121.873,122.728,118.552,111.862,106.343,108.883,111.276,116.477,112.472,119.944,125.292,123.167,128.466,125.707,125.976,126.586,119.553,114.816,110.396,100.678,98.114,90.691,86.32,90.642,87.37,88.322,86.662,85.758,83.927,83.853,80.533,79.8,81.363,85.294,86.173,89.689,81.143,77.187,73.891,73.353,65.393,62.512,60.192,65.124,65.198,65.784,61.584,59.948,54.966,50.937,43.099,39.949,36.408,36.506,35.724,34.357,30.841,32.721,34.503,33.307,32.916,36.017,36.603,38.435,37.214,34.626,32.745,32.281,30.108,28.716,27.178,27.715,27.324,28.35,31.744,36.384,38.581,41.585,44.906,45.712,47.641,42.781,44.051,45.565,48.153,46.933,54.527,59.996,68.445,67.469,68.055,66.199,69.105,64.074,59.972,54.038,52.476,66.492,67.053,63.293,59.02,55.65,54.722,49.008,27.862,23.002,19.12,17.874,15.701,13.333,14.285,15.53,14.7,15.53,14.773,14.798,13.821,12.136,11.33,11.55,10.988,11.013,10.207,9.963,10.183,8.913,8.205,6.886,6.471,6.129,5.665,5.836,7.472,7.838,8.962,9.157,9.377,10.012,9.694,8.498,7.399,5.567,4.908,4.151,3.712,3.394,3.052,2.979,2.979,3.101,3.028,2.662,2.808,3.077,3.174,3.15,2.808,2.735,2.54,2.149,1.831,1.587,1.587,1.612,1.563,1.49,1.319,1.197,1.05,1.026,0.928,0.855,0.855,0.903,1.074,1.197,1.221,1.49,1.441,1.416,1.441,1.319,1.294,1.27,1.221,1.197,1.148,1.197,1.197,1.197,1.074,0.952,0.903,1.074,1.074,1.343,1.441,1.636,1.514,1.538,1.465,1.392,1.074,0.903,0.708,0.781,1.001,1.001,1.294,1.343,1.367,1.367,1.392,1.294,1.294,1.099,0.977,1.074,1.05,1.221,1.148,1.343,1.392,1.49,1.416,1.538,1.416,1.465,1.27,1.367,1.514,1.953]},{"iso":"SVK","continent":"Europe","population":5459643,"name":"Slovakia","population_density":113.128,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,3,3,7,10,16,32,44,54,63,72,105,123,137,178,185,186,204,216,226,269,292,314,336,363,400,426,450,471,485,534,581,682,701,715,728,742,769,835,863,977,1049,1089,1161,1173,1199,1244,1325,1360,1373,1379,1381,1384,1391,1396,1403,1407,1408,1413,1421,1429,1445,1455,1455,1457,1457,1465,1469,1477,1480,1493,1494,1495,1495,1496,1502,1503,1504,1509,1511,1513,1515,1520,1520,1521,1521,1522,1522,1525,1526,1526,1528,1528,1530,1531,1533,1541,1542,1545,1548,1552,1552,1561,1562,1576,1586,1587,1588,1589,1607,1630,1643,1657,1664,1665,1667,1687,1700,1720,1749,1764,1765,1767,1798,1851,1870,1893,1901,1902,1908,1927,1951,1965,1976,1979,1980,2021,2058,2089,2118,2141,2179,2181,2204,2245,2265,2292,2337,2344,2354,2368,2417,2480,2523,2566,2596,2599,2615,2690,2739,2801,2855,2902,2907,2922,3022,3102,3225,3316,3356,3424,3452,3536,3626,3728,3842,3876,3917,3989,4042,4163,4300,4526,4614,4636,4727,4888,5066,5252,5453,5532,5580,5768,5860,6021,6256,6546,6677,6756,6931,7269,7629,8048,8600,9078,9343,9574,10141,10938,11617,12321,13139,13492,13812,14689,15726,16910,18797,19851,20355,20886,22296,24225,26300,28268,29835,30695,31400,33602,35330,37911,40801,43843,45155,46056,48943,51728,55091,57664,59946,61829,63556,66772,68734,71088,73667,75495,76072,77123,79181,81772,83796,85567,86767,87276,88602,89913,91578,93396,95257,96241,96472,97493,99304,101257,103106,104632,105733,105929,107183,109226,111208,113392,115462,116731,117283,119232,121796,124921,127087,130794,132984,133489,135523,139088,142133],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.183,0.183,0.549,0.549,1.282,1.832,2.931,5.861,8.059,9.891,11.539,13.188,19.232,22.529,25.093,32.603,33.885,34.068,37.365,39.563,41.395,49.271,53.483,57.513,61.542,66.488,73.265,78.027,82.423,86.269,88.834,97.809,106.417,124.917,128.397,130.961,133.342,135.906,140.852,152.94,158.069,178.949,192.137,199.464,212.651,214.849,219.611,227.854,242.69,249.101,251.482,252.581,252.947,253.496,254.779,255.694,256.977,257.709,257.892,258.808,260.273,261.739,264.669,266.501,266.501,266.867,266.867,268.333,269.065,270.531,271.08,273.461,273.644,273.827,273.827,274.011,275.11,275.293,275.476,276.392,276.758,277.124,277.491,278.406,278.406,278.59,278.59,278.773,278.773,279.322,279.505,279.505,279.872,279.872,280.238,280.421,280.788,282.253,282.436,282.986,283.535,284.268,284.268,285.916,286.099,288.664,290.495,290.678,290.862,291.045,294.342,298.554,300.935,303.5,304.782,304.965,305.331,308.995,311.376,315.039,320.351,323.098,323.281,323.648,329.326,339.033,342.513,346.726,348.191,348.374,349.473,352.953,357.349,359.914,361.928,362.478,362.661,370.171,376.948,382.626,387.937,392.15,399.11,399.477,403.689,411.199,414.862,419.808,428.05,429.332,431.164,433.728,442.703,454.242,462.118,469.994,475.489,476.038,478.969,492.706,501.681,513.037,522.928,531.537,532.452,535.2,553.516,568.169,590.698,607.366,614.692,627.147,632.276,647.661,664.146,682.829,703.709,709.937,717.446,730.634,740.341,762.504,787.597,828.992,845.11,849.14,865.808,895.297,927.899,961.968,998.783,1013.253,1022.045,1056.479,1073.33,1102.819,1145.862,1198.979,1222.974,1237.444,1269.497,1331.406,1397.344,1474.089,1575.195,1662.746,1711.284,1753.595,1857.447,2003.428,2127.795,2256.741,2406.568,2471.224,2529.836,2690.469,2880.408,3097.272,3442.899,3635.952,3728.266,3825.525,4083.784,4437.103,4817.165,5177.628,5464.643,5622.162,5751.292,6154.615,6471.119,6943.861,7473.199,8030.379,8270.687,8435.716,8964.506,9474.612,10090.587,10561.863,10979.839,11324.733,11641.054,12230.104,12589.468,13020.632,13493.007,13827.827,13933.512,14126.015,14502.963,14977.536,15348.256,15672.636,15892.431,15985.661,16228.534,16468.659,16773.624,17106.613,17447.478,17627.709,17670.02,17857.028,18188.735,18546.451,18885.118,19164.623,19366.285,19402.184,19631.87,20006.07,20369.097,20769.124,21148.269,21380.702,21481.808,21838.791,22308.418,22880.8,23277.529,23956.511,24357.637,24450.133,24822.685,25475.658,26033.387],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.366,0,0.733,0.549,1.099,2.931,2.198,1.832,1.648,1.648,6.044,3.297,2.564,7.51,1.282,0.183,3.297,2.198,1.832,7.876,4.213,4.03,4.03,4.945,6.777,4.762,4.396,3.846,2.564,8.975,8.609,18.499,3.48,2.564,2.381,2.564,4.945,12.089,5.129,20.88,13.188,7.326,13.188,2.198,4.762,8.242,14.836,6.411,2.381,1.099,0.366,0.549,1.282,0.916,1.282,0.733,0.183,0.916,1.465,1.465,2.931,1.832,0,0.366,0,1.465,0.733,1.465,0.549,2.381,0.183,0.183,0,0.183,1.099,0.183,0.183,0.916,0.366,0.366,0.366,0.916,0,0.183,0,0.183,0,0.549,0.183,0,0.366,0,0.366,0.183,0.366,1.465,0.183,0.549,0.549,0.733,0,1.648,0.183,2.564,1.832,0.183,0.183,0.183,3.297,4.213,2.381,2.564,1.282,0.183,0.366,3.663,2.381,3.663,5.312,2.747,0.183,0.366,5.678,9.708,3.48,4.213,1.465,0.183,1.099,3.48,4.396,2.564,2.015,0.549,0.183,7.51,6.777,5.678,5.312,4.213,6.96,0.366,4.213,7.51,3.663,4.945,8.242,1.282,1.832,2.564,8.975,11.539,7.876,7.876,5.495,0.549,2.931,13.737,8.975,11.356,9.891,8.609,0.916,2.747,18.316,14.653,22.529,16.668,7.326,12.455,5.129,15.386,16.485,18.683,20.88,6.228,7.51,13.188,9.708,22.163,25.093,41.395,16.118,4.03,16.668,29.489,32.603,34.068,36.816,14.47,8.792,34.434,16.851,29.489,43.043,53.117,23.994,14.47,32.053,61.909,65.938,76.745,101.106,87.552,48.538,42.31,103.853,145.98,124.367,128.946,149.827,64.656,58.612,160.633,189.939,216.864,345.627,193.053,92.314,97.259,258.259,353.32,380.061,360.463,287.015,157.519,129.129,403.323,316.504,472.742,529.339,557.179,240.309,165.029,528.789,510.107,615.974,471.276,417.976,344.894,316.321,589.05,359.364,431.164,472.375,334.82,105.685,192.503,376.948,474.573,370.72,324.38,219.795,93.23,242.873,240.126,304.965,332.989,340.865,180.232,42.31,187.009,331.707,357.716,338.667,279.505,201.662,35.9,229.685,374.2,363.027,400.026,379.146,232.433,101.106,356.983,469.628,572.382,396.729,678.982,401.125,92.497,372.552,652.973,557.729],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.366,0.366,1.099,1.648,2.747,5.678,7.876,9.708,10.99,12.638,17.949,20.697,22.162,26.741,25.825,24.176,25.825,26.375,22.163,26.742,28.391,24.911,27.659,32.421,35.901,38.465,41.029,36.999,35.35,40.295,44.874,58.428,55.131,52.933,50.918,49.636,52.017,55.131,51.651,54.032,63.74,68.502,79.309,78.943,78.76,74.913,84.62,70.151,59.344,53.117,40.295,38.646,35.166,27.84,14.286,8.608,6.41,6.227,7.326,8.242,9.891,10.807,9.525,9.158,8.975,9.524,8.792,8.792,6.41,6.959,7.142,6.959,6.959,5.677,6.043,4.761,4.395,2.93,3.113,3.296,3.662,4.395,3.296,3.296,3.113,2.38,2.014,2.197,2.014,1.098,1.464,1.281,1.647,1.647,2.013,2.929,2.929,3.478,3.661,4.394,4.028,5.493,5.31,6.409,8.058,7.692,7.326,6.776,10.073,12.638,14.836,14.836,14.286,14.286,14.469,17.949,17.033,16.483,19.414,19.597,18.498,18.681,23.993,30.038,31.137,31.687,27.84,25.276,26.192,29.306,28.024,20.88,19.415,15.751,14.469,21.796,27.474,29.672,30.588,32.237,37.182,36.999,41.029,41.029,37.915,37.182,40.112,37.181,32.053,34.251,39.013,43.042,47.255,50.186,47.439,46.706,47.805,58.978,58.978,58.795,60.81,61.543,56.964,59.162,74.547,75.463,89.017,94.329,91.764,95.61,99.823,112.462,110.631,114.661,113.012,102.572,102.756,103.489,108.068,114.845,123.453,146.165,141.403,139.205,148.363,164.664,187.559,199.464,211.187,184.262,176.936,207.34,207.523,207.523,217.963,237.012,224.19,224.19,247.451,274.926,324.013,371.269,429.332,463.767,488.311,516.151,587.951,672.022,730.451,782.652,831.373,808.477,818.551,936.874,1022.96,1093.844,1315.104,1379.211,1321.698,1354.301,1553.948,1746.635,1936.757,2080.356,2021.744,1986.21,2023.025,2329.089,2387.334,2506.756,2656.034,2852.75,2806.044,2813.554,3213.214,3319.998,3619.468,3618.002,3506.639,3294.354,3370.366,3794.387,3624.962,3546.019,3402.42,3265.964,2953.673,2801.282,2861.909,2747.432,2758.788,2652.004,2399.424,2157.834,2295.022,2342.645,2270.662,2129.078,2099.223,1955.075,1777.59,1871.369,1960.203,2077.793,2111.495,2058.011,1918.808,1774.476,1961.851,2149.042,2180.362,2222.672,2263.151,2216.079,2115.523,2436.606,2676.549,2874.731,2908.433,3187.389,3209.368,3069.432,3340.878,3636.868,3724.969],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.392,0.811,1.125,1.334,1.57,1.701,2.486,2.8,2.747,3.506,3.428,3.218,3.454,2.904,2.695,3.454,2.983,3.375,3.925,4.16,4.815,5.233,4.736,4.684,4.474,5.181,5.704,7.379,7.196,6.934,6.725,6.725,6.149,6.646,4.736,7.222,8.739,9.446,10.964,10.571,9.524,9.969,9.106,8.138,7.431,5.704,5.443,4.841,3.846,1.858,1.125,0.89,0.759,0.837,0.968,0.994,1.282,1.361,1.256,1.282,1.151,1.151,1.047,0.837,0.654,0.994,0.968,0.994,0.785,0.706,0.654,0.602,0.288,0.392,0.419,0.471,0.497,0.471,0.445,0.445,0.314,0.288,0.235,0.262,0.157,0.157,0.183,0.183,0.209,0.235,0.209,0.392,0.419,0.445,0.523,0.576,0.549,0.733,0.549,0.89,1.073,1.02,0.942,0.968,1.204,1.779,1.753,1.858,2.015,2.015,2.041,2.093,1.832,2.015,2.407,2.617,2.617,2.617,2.904,3.951,3.925,3.768,3.585,3.585,3.689,3.375,2.617,2.486,2.172,2.041,2.041,2.957,3.428,3.611,4.003,4.317,5.233,5.259,4.788,4.893,4.605,4.553,5.129,4.317,4.527,4.291,4.501,5.626,6.044,5.992,6.594,6.411,6.463,7.143,6.777,7.274,7.562,8.007,8.059,8.033,8.687,9.498,11.094,12.063,11.879,13.528,13.868,13.449,13.711,13.162,13.763,13.606,12.9,14.051,13.24,14.051,14.967,17.898,19.311,18.813,19.311,22.136,23.628,24.91,24.256,24.02,24.701,27.239,25.433,24.989,26.271,28.599,29.96,30.771,30.431,36.868,42.075,46.89,53.745,62.825,67.692,69.157,75.149,86.583,93.387,97.364,106.26,108.563,110.892,119.003,125.283,138.497,169.451,175.626,179.577,185.098,199.045,222.385,245.699,247.818,261.242,270.557,275.11,295.833,290.574,303.814,327.939,366.534,378.361,383.489,401.413,429.07,449.532,441.238,421.351,436.292,457.905,466.514,444.979,418.578,418.735,406.855,372.683,354.994,324.694,341.153,332.518,311.376,294.943,293.164,300.36,280.814,256.584,251.194,253.549,247.897,240.623,232.642,245.725,253.261,254.072,245.306,248.368,247.452,253.549,259.619,260.378,269.144,283.378,287.774,297.089,315.274,328.907,358.815,358.344,401.177,425.276,424.047,426.271,452.463,450.37]},{"iso":"SVN","continent":"Europe","population":2078932,"name":"Slovenia","population_density":102.619,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,7,7,16,16,31,57,89,141,181,219,253,275,275,286,341,383,414,442,480,528,562,632,684,730,756,802,841,897,934,977,997,1021,1059,1091,1124,1160,1188,1205,1212,1220,1248,1268,1304,1317,1330,1335,1344,1353,1366,1373,1388,1396,1402,1408,1418,1429,1434,1439,1439,1439,1445,1448,1449,1450,1454,1457,1460,1461,1463,1464,1465,1465,1466,1466,1467,1468,1468,1468,1468,1468,1469,1469,1471,1473,1473,1473,1473,1473,1475,1477,1477,1479,1484,1485,1485,1486,1488,1488,1490,1492,1495,1496,1499,1503,1511,1513,1519,1520,1521,1534,1541,1547,1558,1572,1581,1585,1600,1613,1634,1650,1679,1700,1716,1739,1763,1776,1793,1827,1841,1849,1859,1878,1897,1916,1940,1946,1953,1977,2006,2033,2052,2066,2082,2087,2101,2115,2139,2156,2171,2180,2181,2190,2208,2223,2233,2247,2249,2255,2272,2303,2332,2369,2401,2416,2429,2456,2493,2536,2574,2617,2651,2665,2686,2722,2755,2797,2834,2865,2883,2924,2979,3032,3079,3122,3165,3190,3232,3312,3389,3497,3603,3702,3749,3831,3954,4058,4195,4309,4420,4470,4558,4694,4816,5007,5191,5350,5388,5487,5690,5865,6103,6330,6498,6673,6764,7120,7507,7872,8252,8663,8832,9231,9938,10683,11517,12416,13142,13679,14473,15982,17646,19307,21274,22950,24080,25603,28215,30705,32503,34307,35649,36206,37382,39408,41094,42658,44270,45161,45625,46717,48939,50870,52385,54122,55042,55544,56937,58964,61034,62580,64284,65308,65778,67080,69306,71073,72674,74257,75381,75814,77135,79566,81349,83133,84775,85805,86288,87936,90075,91922,93737,95481,96314,96745,98281,100401,102043],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.962,3.367,3.367,7.696,7.696,14.912,27.418,42.81,67.823,87.064,105.343,121.697,132.279,132.279,137.571,164.027,184.229,199.141,212.609,230.888,253.977,270.331,304.002,329.015,351.142,363.648,385.775,404.535,431.472,449.269,469.953,479.573,491.118,509.396,524.789,540.662,557.979,571.447,579.625,582.992,586.84,600.308,609.929,627.245,633.498,639.752,642.157,646.486,650.815,657.068,660.435,667.651,671.499,674.385,677.271,682.081,687.372,689.777,692.182,692.182,692.182,695.068,696.511,696.992,697.474,699.398,700.841,702.284,702.765,703.727,704.208,704.689,704.689,705.17,705.17,705.651,706.132,706.132,706.132,706.132,706.132,706.613,706.613,707.575,708.537,708.537,708.537,708.537,708.537,709.499,710.461,710.461,711.423,713.828,714.309,714.309,714.79,715.752,715.752,716.714,717.676,719.119,719.6,721.043,722.967,726.815,727.778,730.664,731.145,731.626,737.879,741.246,744.132,749.423,756.157,760.487,762.411,769.626,775.879,785.98,793.677,807.626,817.728,825.424,836.487,848.032,854.285,862.462,878.817,885.551,889.399,894.209,903.348,912.488,921.627,933.171,936.058,939.425,950.969,964.919,977.906,987.045,993.779,1001.476,1003.881,1010.615,1017.349,1028.894,1037.071,1044.286,1048.615,1049.096,1053.426,1062.084,1069.299,1074.109,1080.843,1081.805,1084.692,1092.869,1107.78,1121.73,1139.527,1154.92,1162.135,1168.388,1181.376,1199.173,1219.857,1238.136,1258.819,1275.174,1281.908,1292.01,1309.326,1325.2,1345.402,1363.2,1378.111,1386.77,1406.491,1432.947,1458.441,1481.049,1501.733,1522.416,1534.442,1554.644,1593.126,1630.164,1682.114,1733.101,1780.722,1803.33,1842.773,1901.938,1951.964,2017.863,2072.699,2126.092,2150.142,2192.472,2257.89,2316.574,2408.448,2496.955,2573.437,2591.715,2639.336,2736.982,2821.16,2935.642,3044.833,3125.643,3209.821,3253.594,3424.835,3610.989,3786.56,3969.346,4167.043,4248.335,4440.261,4780.339,5138.696,5539.864,5972.297,6321.515,6579.821,6961.748,7687.601,8488.012,9286.98,10233.139,11039.322,11582.87,12315.458,13571.872,14769.603,15634.47,16502.223,17147.747,17415.673,17981.348,18955.887,19766.88,20519.19,21294.588,21723.173,21946.365,22471.634,23540.453,24469.295,25198.034,26033.56,26476.094,26717.565,27387.62,28362.64,29358.344,30101.995,30921.646,31414.207,31640.285,32266.568,33337.31,34187.265,34957.372,35718.821,36259.483,36467.763,37103.186,38272.536,39130.188,39988.321,40778.15,41273.596,41505.927,42298.642,43327.535,44215.972,45089.017,45927.909,46328.596,46535.914,47274.755,48294.509,49084.338],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2.405,0,4.329,0,7.215,12.506,15.393,25.013,19.241,18.279,16.355,10.582,0,5.291,26.456,20.203,14.912,13.468,18.279,23.089,16.355,33.671,25.013,22.127,12.506,22.127,18.76,26.937,17.798,20.684,9.62,11.544,18.279,15.393,15.874,17.317,13.468,8.177,3.367,3.848,13.468,9.62,17.317,6.253,6.253,2.405,4.329,4.329,6.253,3.367,7.215,3.848,2.886,2.886,4.81,5.291,2.405,2.405,0,0,2.886,1.443,0.481,0.481,1.924,1.443,1.443,0.481,0.962,0.481,0.481,0,0.481,0,0.481,0.481,0,0,0,0,0.481,0,0.962,0.962,0,0,0,0,0.962,0.962,0,0.962,2.405,0.481,0,0.481,0.962,0,0.962,0.962,1.443,0.481,1.443,1.924,3.848,0.962,2.886,0.481,0.481,6.253,3.367,2.886,5.291,6.734,4.329,1.924,7.215,6.253,10.101,7.696,13.949,10.101,7.696,11.063,11.544,6.253,8.177,16.355,6.734,3.848,4.81,9.139,9.139,9.139,11.544,2.886,3.367,11.544,13.949,12.987,9.139,6.734,7.696,2.405,6.734,6.734,11.544,8.177,7.215,4.329,0.481,4.329,8.658,7.215,4.81,6.734,0.962,2.886,8.177,14.912,13.949,17.798,15.393,7.215,6.253,12.987,17.798,20.684,18.279,20.684,16.355,6.734,10.101,17.317,15.874,20.203,17.798,14.912,8.658,19.722,26.456,25.494,22.608,20.684,20.684,12.025,20.203,38.481,37.038,51.95,50.988,47.621,22.608,39.443,59.165,50.026,65.899,54.836,53.393,24.051,42.329,65.418,58.684,91.874,88.507,76.482,18.279,47.621,97.646,84.178,114.482,109.191,80.811,84.178,43.772,171.242,186.153,175.571,182.786,197.698,81.292,191.925,340.078,358.357,401.168,432.434,349.218,258.306,381.927,725.853,800.411,798.968,946.159,806.183,543.548,732.588,1256.414,1197.73,864.867,867.753,645.524,267.926,565.675,974.539,810.993,752.309,775.398,428.585,223.192,525.27,1068.818,928.842,728.74,835.525,442.535,241.47,670.056,975.02,995.704,743.651,819.652,492.561,226.078,626.283,1070.742,849.956,770.107,761.449,540.662,208.28,635.422,1169.35,857.652,858.133,789.829,495.447,232.331,792.715,1028.894,888.437,873.044,838.892,400.687,207.318,738.841,1019.754,789.829],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2.405,2.405,6.734,6.734,13.949,26.455,41.848,66.861,83.697,101.976,114.002,124.584,117.369,110.154,121.217,116.407,112.078,107.267,109.191,121.698,138.053,166.433,164.99,166.914,164.508,173.167,173.648,177.496,178.939,165.952,150.559,139.976,145.749,139.015,136.129,126.509,122.179,109.672,103.419,95.723,90.912,85.139,86.582,75.518,68.303,62.531,63.493,63.974,56.759,50.506,40.404,37.999,34.632,35.113,35.594,36.556,32.708,31.746,24.531,20.683,20.683,19.24,14.911,10.101,9.62,8.658,10.101,10.582,8.658,7.696,7.696,7.215,5.772,4.329,3.367,3.367,2.405,1.924,1.443,1.443,1.443,1.443,1.924,2.405,2.405,2.405,2.405,2.405,2.886,3.848,2.886,2.886,5.291,5.772,5.772,6.253,6.253,5.291,6.253,6.253,5.291,5.291,6.734,8.177,11.063,12.025,13.949,13.468,12.506,18.278,20.202,21.164,22.607,28.379,29.822,31.265,37.999,37.999,44.733,49.543,58.201,61.568,64.935,74.074,78.403,78.403,76.479,85.138,77.923,71.67,68.784,66.86,64.455,67.341,70.708,57.239,53.872,61.568,70.707,74.555,74.555,72.15,68.302,67.821,71.188,66.378,63.973,59.163,57.239,54.834,47.619,49.543,51.467,51.948,45.214,43.771,37.518,36.075,43.771,54.354,59.645,70.228,80.811,81.292,86.583,96.684,106.305,112.077,116.407,119.293,120.255,119.774,123.622,127.952,126.028,125.547,125.066,119.294,111.597,124.585,140.94,149.117,155.851,156.332,159.218,156.331,167.876,186.635,197.217,223.673,252.053,278.99,280.914,308.332,347.294,358.839,387.7,390.586,392.991,369.421,389.142,415.117,414.636,456.484,479.092,500.738,465.624,489.194,544.511,563.271,619.069,636.386,628.69,636.386,661.879,785.5,874.007,965.4,1033.704,1122.211,1122.692,1230.439,1526.745,1713.86,1928.875,2185.738,2352.17,2412.778,2713.413,3247.341,3707.674,4148.285,4693.276,5067.025,5261.355,5735.637,6610.124,7082.001,7146.457,7215.242,6914.607,6376.35,6398.477,6640.428,6195.007,5749.586,5660.117,5220.949,4798.617,5055.961,5559.104,5513.407,5431.154,5514.37,5181.507,4994.392,5441.256,5891.006,5817.892,5632.701,5723.613,5380.649,5164.192,5549.005,5949.691,5824.627,5599.03,5616.828,5337.838,5053.557,5462.901,6005.968,5792.878,5801.055,5820.777,5554.775,5246.444,5830.879,6224.351,5943.438,5958.83,5939.589,5550.447,5262.318,5768.828,5995.867,5756.802],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.779,5.978,9.208,11.957,13.949,16.286,16.767,14.98,13.537,13.743,13.881,13.4,12.987,14.087,17.385,18.966,19.997,20.684,21.714,21.577,22.127,21.508,23.02,20.752,20.134,18.347,18.21,17.66,17.179,15.599,15.53,14.499,14.293,13.125,11.063,10.789,9.895,9.895,8.864,8.59,8.452,8.521,7.215,6.734,4.741,4.879,4.535,4.604,4.398,4.467,4.329,4.192,3.505,2.955,2.543,2.543,2.061,1.374,1.099,1.031,1.237,1.443,1.099,1.031,1.031,1.031,0.756,0.618,0.412,0.412,0.344,0.275,0.206,0.206,0.137,0.206,0.137,0.206,0.344,0.344,0.344,0.344,0.275,0.412,0.412,0.275,0.412,0.756,0.825,0.825,0.756,0.756,0.756,0.756,0.55,0.687,0.756,0.893,1.031,1.58,1.58,1.855,1.718,1.718,2.405,2.611,2.474,3.092,3.642,4.192,4.398,4.535,4.948,5.978,6.322,7.353,8.177,9.002,9.552,10.307,9.758,9.826,10.17,9.689,9.139,8.246,7.902,8.315,8.452,7.765,7.215,7.147,8.109,8.796,9.345,9.345,8.658,9.345,9.208,8.521,7.49,7.284,7.147,7.215,6.734,6.459,6.116,6.391,5.772,5.291,5.222,4.741,5.085,5.635,6.528,7.49,9.345,10.582,11.476,11.957,12.644,13.056,14.018,14.087,14.843,16.148,16.217,15.805,15.736,15.049,15.324,14.912,14.705,14.98,16.355,17.66,19.034,19.378,19.79,20.615,21.096,21.165,22.883,24.532,28.724,33.053,36.901,38.413,41.161,44.116,45.971,47.964,48.514,49.339,49.545,49.957,50.85,52.087,55.798,60.608,63.906,63.082,63.838,68.442,72.084,75.313,78.268,78.887,88.301,87.751,98.265,112.833,121.56,132.073,148.771,148.359,169.524,193.643,218.244,250.472,286.136,307.782,333.069,360.212,415.323,478.474,535.302,608.692,673.972,714.721,764.816,840.61,897.37,906.784,895.583,872.632,833.258,809.413,769.145,713.897,697.817,684.624,653.632,647.242,641.469,654.938,671.774,668.406,676.996,678.989,681.6,702.284,688.884,698.436,700.566,698.298,705.445,703.246,696.992,710.667,689.846,693.625,685.311,692.182,689.64,690.945,705.032,706.132,718.707,722.761,716.302,719.738,742.208,722.143,726.541,728.671,735.68,722.143,718.57,710.873,709.568,695.481]},{"iso":"SLB","continent":"Oceania","population":686878,"name":"Solomon Islands","population_density":21.841,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,8,8,8,8,8,8,13,13,13,13,13,13,13,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2.912,2.912,2.912,4.368,4.368,4.368,4.368,4.368,4.368,4.368,5.823,5.823,5.823,5.823,5.823,11.647,11.647,11.647,11.647,11.647,11.647,18.926,18.926,18.926,18.926,18.926,18.926,18.926,23.294,23.294,23.294,23.294,23.294,23.294,23.294,23.294,23.294,23.294,23.294,23.294,23.294,23.294,23.294,24.75,24.75,24.75,24.75,24.75,24.75,24.75,24.75,24.75,24.75,24.75,24.75,24.75,24.75,24.75,24.75,24.75,24.75,24.75,24.75,24.75,24.75,24.75,24.75],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.456,0,0,0,0,0,0,1.456,0,0,0,0,5.823,0,0,0,0,0,7.279,0,0,0,0,0,0,4.368,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.456,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.456,1.456,1.456,1.456,1.456,1.456,1.456,2.912,1.456,1.456,1.456,1.456,7.279,7.279,7.279,5.823,5.823,5.823,13.102,13.102,7.279,7.279,7.279,7.279,7.279,11.647,4.368,4.368,4.368,4.368,4.368,4.368,4.368,0,0,0,0,0,0,0,1.456,1.456,1.456,1.456,1.456,1.456,1.456,1.456,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.208,0.208,0.208,0.208,0.208,0.208,0.208,0.208,0.208,1.04,1.04,0.832,0.832,0.832,0.832,1.872,1.04,1.04,1.04,1.04,1.04,1.04,0.624,0.624,0.624,0.624,0.624,0.624,0.624,0,0,0,0,0,0,0,0,0.208,0.208,0.208,0.208,0.208,0.208,0.208,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},{"iso":"SOM","continent":"Africa","population":15893219,"name":"Somalia","population_density":23.5,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,2,3,3,3,3,5,5,5,7,7,7,7,8,12,12,21,21,25,60,60,80,80,116,135,164,237,286,286,328,328,390,436,480,528,582,601,601,671,722,756,835,873,928,928,997,1054,1089,1170,1219,1284,1284,1357,1421,1455,1502,1573,1594,1594,1594,1594,1689,1711,1731,1828,1828,1916,1976,2023,2089,2146,2204,2204,2289,2334,2368,2416,2452,2513,2513,2579,2618,2642,2658,2696,2719,2719,2755,2779,2812,2812,2835,2878,2878,2878,2894,2904,2924,2924,2944,2944,2961,2997,3006,3015,3028,3038,3038,3051,3059,3072,3076,3083,3106,3106,3111,3119,3130,3135,3161,3171,3171,3178,3178,3196,3212,3212,3212,3212,3212,3220,3220,3220,3227,3227,3227,3227,3227,3227,3227,3227,3227,3250,3250,3256,3257,3257,3265,3265,3265,3269,3269,3269,3275,3275,3275,3275,3310,3310,3310,3310,3310,3310,3332,3332,3362,3362,3371,3371,3371,3376,3376,3389,3389,3390,3390,3390,3390,3401,3442,3465,3465,3465,3465,3465,3588,3588,3588,3588,3588,3593,3593,3593,3745,3745,3745,3745,3745,3745,3847,3864,3864,3864,3864,3864,3864,3864,3864,3890,3890,3890,3897,3897,3897,3941,3941,3941,3941,3941,3941,3941,3941,3941,4229,4229,4229,4229,4229,4229,4301,4301,4301,4301,4301,4301,4301,4301,4382,4382,4382,4382,4382,4445,4445,4445,4445,4451,4451,4451,4451,4451,4451,4525,4525,4525,4525,4525,4579,4579,4579,4579,4579,4579,4579,4579,4579,4579,4662],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.063,0.063,0.063,0.063,0.063,0.063,0.063,0.063,0.063,0.063,0.126,0.189,0.189,0.189,0.189,0.315,0.315,0.315,0.44,0.44,0.44,0.44,0.503,0.755,0.755,1.321,1.321,1.573,3.775,3.775,5.034,5.034,7.299,8.494,10.319,14.912,17.995,17.995,20.638,20.638,24.539,27.433,30.202,33.222,36.619,37.815,37.815,42.219,45.428,47.567,52.538,54.929,58.39,58.39,62.731,66.318,68.52,73.616,76.699,80.789,80.789,85.382,89.409,91.548,94.506,98.973,100.294,100.294,100.294,100.294,106.272,107.656,108.914,115.018,115.018,120.555,124.33,127.287,131.44,135.026,138.675,138.675,144.024,146.855,148.994,152.015,154.28,158.118,158.118,162.27,164.724,166.234,167.241,169.632,171.079,171.079,173.344,174.854,176.931,176.931,178.378,181.084,181.084,181.084,182.09,182.719,183.978,183.978,185.236,185.236,186.306,188.571,189.137,189.704,190.522,191.151,191.151,191.969,192.472,193.29,193.542,193.982,195.429,195.429,195.744,196.247,196.939,197.254,198.89,199.519,199.519,199.959,199.959,201.092,202.099,202.099,202.099,202.099,202.099,202.602,202.602,202.602,203.043,203.043,203.043,203.043,203.043,203.043,203.043,203.043,203.043,204.49,204.49,204.867,204.93,204.93,205.434,205.434,205.434,205.685,205.685,205.685,206.063,206.063,206.063,206.063,208.265,208.265,208.265,208.265,208.265,208.265,209.649,209.649,211.537,211.537,212.103,212.103,212.103,212.418,212.418,213.236,213.236,213.299,213.299,213.299,213.299,213.991,216.57,218.018,218.018,218.018,218.018,218.018,225.757,225.757,225.757,225.757,225.757,226.071,226.071,226.071,235.635,235.635,235.635,235.635,235.635,235.635,242.053,243.123,243.123,243.123,243.123,243.123,243.123,243.123,243.123,244.758,244.758,244.758,245.199,245.199,245.199,247.967,247.967,247.967,247.967,247.967,247.967,247.967,247.967,247.967,266.088,266.088,266.088,266.088,266.088,266.088,270.619,270.619,270.619,270.619,270.619,270.619,270.619,270.619,275.715,275.715,275.715,275.715,275.715,279.679,279.679,279.679,279.679,280.057,280.057,280.057,280.057,280.057,280.057,284.713,284.713,284.713,284.713,284.713,288.11,288.11,288.11,288.11,288.11,288.11,288.11,288.11,288.11,288.11,293.333],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.063,0.063,0,0,0,0.126,0,0,0.126,0,0,0,0.063,0.252,0,0.566,0,0.252,2.202,0,1.258,0,2.265,1.195,1.825,4.593,3.083,0,2.643,0,3.901,2.894,2.768,3.02,3.398,1.195,0,4.404,3.209,2.139,4.971,2.391,3.461,0,4.341,3.586,2.202,5.097,3.083,4.09,0,4.593,4.027,2.139,2.957,4.467,1.321,0,0,0,5.977,1.384,1.258,6.103,0,5.537,3.775,2.957,4.153,3.586,3.649,0,5.348,2.831,2.139,3.02,2.265,3.838,0,4.153,2.454,1.51,1.007,2.391,1.447,0,2.265,1.51,2.076,0,1.447,2.706,0,0,1.007,0.629,1.258,0,1.258,0,1.07,2.265,0.566,0.566,0.818,0.629,0,0.818,0.503,0.818,0.252,0.44,1.447,0,0.315,0.503,0.692,0.315,1.636,0.629,0,0.44,0,1.133,1.007,0,0,0,0,0.503,0,0,0.44,0,0,0,0,0,0,0,0,1.447,0,0.378,0.063,0,0.503,0,0,0.252,0,0,0.378,0,0,0,2.202,0,0,0,0,0,1.384,0,1.888,0,0.566,0,0,0.315,0,0.818,0,0.063,0,0,0,0.692,2.58,1.447,0,0,0,0,7.739,0,0,0,0,0.315,0,0,9.564,0,0,0,0,0,6.418,1.07,0,0,0,0,0,0,0,1.636,0,0,0.44,0,0,2.768,0,0,0,0,0,0,0,0,18.121,0,0,0,0,0,4.53,0,0,0,0,0,0,0,5.097,0,0,0,0,3.964,0,0,0,0.378,0,0,0,0,0,4.656,0,0,0,0,3.398,0,0,0,0,0,0,0,0,0,5.222],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.063,0.126,0.126,0.126,0.126,0.252,0.252,0.252,0.315,0.252,0.252,0.252,0.315,0.441,0.441,1.007,0.881,1.133,3.335,3.335,4.53,4.278,6.543,7.172,8.997,13.338,14.219,14.219,15.604,15.604,17.24,18.939,19.882,18.309,18.624,19.819,17.176,21.58,20.888,20.133,22.336,21.707,21.77,20.575,24.916,24.098,23.091,26.049,24.161,25.86,22.399,26.992,26.678,25.231,25.986,25.356,23.594,19.504,19.504,14.911,16.861,16.106,14.407,16.043,14.722,20.259,24.034,26.991,25.167,27.369,29.76,23.657,29.005,26.299,24.663,24.726,22.838,23.09,19.441,23.594,20.7,19.379,18.247,17.618,16.8,12.962,15.227,12.584,12.206,10.696,11.136,11.451,10.004,10.004,8.746,7.865,7.047,7.047,6.858,4.152,5.222,7.487,7.046,6.983,6.543,7.172,5.914,6.732,6.165,4.718,4.404,4.278,4.907,4.278,4.593,4.278,4.467,3.964,5.348,5.537,4.09,4.53,4.215,4.845,5.16,4.845,3.209,2.58,2.58,2.643,2.643,1.51,0.943,0.943,0.943,0.943,0.943,0.44,0.44,0.44,0,1.447,1.447,1.825,1.888,1.888,2.391,2.391,2.391,1.196,1.196,0.818,1.133,1.133,0.63,0.63,2.832,2.58,2.58,2.58,2.202,2.202,3.586,3.586,3.272,3.272,3.838,3.838,3.838,4.153,2.769,3.587,1.699,1.762,1.196,1.196,1.196,1.573,4.153,4.782,4.782,4.719,4.719,4.719,12.458,11.766,9.186,7.739,7.739,8.054,8.054,8.054,9.879,9.879,9.879,9.879,9.879,9.564,15.982,17.052,7.488,7.488,7.488,7.488,7.488,7.488,1.07,1.636,1.636,1.636,2.076,2.076,2.076,4.844,4.844,3.208,3.208,3.208,2.768,2.768,2.768,0,18.121,18.121,18.121,18.121,18.121,18.121,22.651,22.651,4.53,4.53,4.53,4.53,4.53,4.53,5.097,5.097,5.097,5.097,5.097,9.061,9.061,9.061,3.964,4.342,4.342,4.342,4.342,0.378,0.378,5.034,5.034,4.656,4.656,4.656,8.054,8.054,8.054,3.398,3.398,3.398,3.398,3.398,0,0,5.222],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.009,0.018,0.018,0.018,0.018,0.036,0.036,0.027,0.036,0.036,0.036,0.036,0.027,0.063,0.063,0.126,0.126,0.162,0.476,0.467,0.611,0.611,0.854,1.025,1.249,1.591,2.031,1.852,2.229,1.906,2.292,2.445,2.184,2.175,2.661,2.454,2.454,2.526,2.571,2.481,2.759,2.616,2.939,2.939,2.93,2.984,2.993,3.011,3.11,3.2,3.2,3.236,3.299,3.29,2.984,3.182,2.786,2.786,2.13,1.555,2.103,1.879,1.42,2.103,2.103,2.894,3.434,3.002,3.398,3.73,3.38,3.38,3.353,3.218,3.101,2.939,2.75,2.777,2.777,2.607,2.553,2.463,2.175,2.193,1.852,1.852,1.582,1.447,1.528,1.384,1.249,1.429,1.429,1.106,1.034,0.827,1.007,0.8,0.593,0.593,0.746,0.926,0.917,0.818,0.935,0.845,0.845,0.809,0.557,0.593,0.548,0.494,0.611,0.611,0.539,0.539,0.521,0.53,0.701,0.584,0.584,0.602,0.53,0.593,0.692,0.458,0.369,0.369,0.306,0.378,0.216,0.072,0.135,0.135,0.135,0.135,0.063,0.063,0.063,0,0,0.207,0.207,0.261,0.27,0.27,0.342,0.342,0.135,0.171,0.117,0.108,0.162,0.09,0.09,0.09,0.369,0.369,0.369,0.315,0.315,0.315,0.512,0.198,0.467,0.467,0.548,0.548,0.548,0.395,0.395,0.243,0.243,0.171,0.171,0.171,0.126,0.225,0.476,0.683,0.674,0.674,0.674,0.674,1.681,1.312,1.106,1.106,1.106,1.151,1.151,0.045,1.411,1.411,1.411,1.411,1.366,1.366,2.283,1.07,1.07,1.07,1.07,1.07,1.07,0.153,0,0.234,0.234,0.234,0.297,0.297,0.297,0.692,0.458,0.458,0.458,0.395,0.395,0.395,0,0,2.589,2.589,2.589,2.589,2.589,2.589,3.236,0.647,0.647,0.647,0.647,0.647,0.647,0,0.728,0.728,0.728,0.728,0.728,1.294,1.294,0.566,0.566,0.62,0.62,0.62,0.054,0.054,0.054,0.719,0.665,0.665,0.665,0.665,1.151,1.151,0.485,0.485,0.485,0.485,0.485,0,0,0,0.746]},{"iso":"ZAF","continent":"Africa","population":59308690,"name":"South Africa","population_density":46.754,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,3,3,7,13,17,24,38,51,62,62,116,150,202,240,274,402,554,709,927,1170,1187,1280,1326,1353,1380,1462,1505,1585,1655,1686,1749,1845,1934,2003,2028,2173,2272,2415,2506,2605,2783,3034,3158,3300,3465,3635,3953,4220,4361,4546,4793,4996,5350,5647,5951,6336,6783,7220,7572,7808,8232,8895,9420,10015,10652,11350,12074,12739,13524,14355,15515,16433,17200,18003,19137,20125,21343,22583,23615,24264,25937,27403,29240,30967,32683,34357,35812,37525,40792,43434,45973,48285,50879,52991,55421,58568,61927,65736,70038,73533,76334,80412,83890,87715,92681,97302,101590,106108,111796,118375,124590,131800,138134,144264,151209,159333,168061,177124,187977,196750,205721,215855,224665,238339,250687,264184,276242,287796,298292,311049,324221,337594,350879,364328,373628,381798,394948,408052,421996,434200,445433,452529,459761,471123,482169,493183,503290,511485,516862,521318,529877,538184,545476,553188,559859,563598,566109,568919,572865,579140,583653,587345,589886,592144,596060,599940,603338,607045,609773,611450,613017,615701,618286,620132,622551,625056,627041,628259,630595,633015,635078,636884,638517,639362,640441,642431,644438,646398,648214,649793,650749,651521,653444,655572,657627,659656,661211,661936,663282,665188,667049,668529,669498,670766,671669,672572,674339,676084,677833,679716,681289,682215,683242,685155,686891,688352,690896,692471,693359,694537,696414,698184,700203,702131,703793,705254,706304,708359,710515,712412,714246,715868,716759,717851,719714,721770,723682,725452,726823,727595,728836,730548,732414,734175,735906,737278,738525,740254,742394,744732,746945,749182,751024,752269,754256,757144,759658,762763,765409,767679,769759,772252,775502,778571,781941,785139,787702,790004,792299,796472,800872,805804,810449,814565,817878,821889,828598,836764,845083,852965,860964,866127,873679,883687,892813],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.017,0.017,0.017,0.051,0.051,0.118,0.219,0.287,0.405,0.641,0.86,1.045,1.045,1.956,2.529,3.406,4.047,4.62,6.778,9.341,11.954,15.63,19.727,20.014,21.582,22.358,22.813,23.268,24.651,25.376,26.725,27.905,28.428,29.49,31.108,32.609,33.772,34.194,36.639,38.308,40.719,42.254,43.923,46.924,51.156,53.247,55.641,58.423,61.29,66.651,71.153,73.531,76.65,80.814,84.237,90.206,95.214,100.339,106.831,114.368,121.736,127.671,131.65,138.799,149.978,158.83,168.862,179.603,191.372,203.579,214.791,228.027,242.039,261.597,277.076,290.008,303.547,322.668,339.326,359.863,380.771,398.171,409.114,437.322,462.04,493.014,522.133,551.066,579.291,603.824,632.707,687.791,732.338,775.148,814.13,857.868,893.478,934.45,987.511,1044.147,1108.37,1180.906,1239.835,1287.063,1355.822,1414.464,1478.957,1562.688,1640.603,1712.902,1789.08,1884.985,1995.913,2100.704,2222.271,2329.068,2432.426,2549.525,2686.503,2833.666,2986.476,3169.468,3317.389,3468.649,3639.517,3788.062,4018.619,4226.817,4454.389,4657.699,4852.51,5029.482,5244.577,5466.669,5692.151,5916.148,6142.911,6299.718,6437.471,6659.193,6880.138,7115.247,7321.018,7510.417,7630.062,7752.001,7943.575,8129.82,8315.527,8485.94,8624.116,8714.777,8789.909,8934.222,9074.286,9197.236,9327.267,9439.747,9502.79,9545.127,9592.507,9659.04,9764.842,9840.936,9903.186,9946.03,9984.102,10050.129,10115.55,10172.843,10235.347,10281.343,10309.619,10336.04,10381.295,10424.88,10456.006,10496.792,10539.029,10572.498,10593.035,10632.422,10673.225,10708.009,10738.46,10765.994,10780.241,10798.434,10831.988,10865.828,10898.875,10929.494,10956.118,10972.237,10985.254,11017.677,11053.557,11088.206,11122.417,11148.636,11160.86,11183.555,11215.692,11247.07,11272.024,11288.363,11309.742,11324.968,11340.193,11369.986,11399.409,11428.899,11460.648,11487.17,11502.783,11520.099,11552.354,11581.625,11606.259,11649.153,11675.709,11690.681,11710.544,11742.192,11772.035,11806.078,11838.586,11866.608,11891.242,11908.946,11943.595,11979.948,12011.933,12042.856,12070.204,12085.227,12103.639,12135.051,12169.717,12201.956,12231.799,12254.916,12267.932,12288.857,12317.723,12349.185,12378.877,12408.064,12431.197,12452.222,12481.375,12517.457,12556.878,12594.192,12631.909,12662.967,12683.959,12717.462,12766.156,12808.545,12860.898,12905.512,12943.786,12978.857,13020.891,13075.689,13127.435,13184.257,13238.178,13281.393,13320.207,13358.902,13429.263,13503.451,13586.609,13664.928,13734.328,13790.188,13857.817,13970.937,14108.624,14248.89,14381.788,14516.659,14603.712,14731.045,14899.79,15053.662],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.034,0,0.067,0.101,0.067,0.118,0.236,0.219,0.185,0,0.91,0.573,0.877,0.641,0.573,2.158,2.563,2.613,3.676,4.097,0.287,1.568,0.776,0.455,0.455,1.383,0.725,1.349,1.18,0.523,1.062,1.619,1.501,1.163,0.422,2.445,1.669,2.411,1.534,1.669,3.001,4.232,2.091,2.394,2.782,2.866,5.362,4.502,2.377,3.119,4.165,3.423,5.969,5.008,5.126,6.491,7.537,7.368,5.935,3.979,7.149,11.179,8.852,10.032,10.74,11.769,12.207,11.213,13.236,14.011,19.559,15.478,12.932,13.539,19.12,16.659,20.537,20.908,17.4,10.943,28.208,24.718,30.974,29.119,28.933,28.225,24.533,28.883,55.085,44.547,42.81,38.982,43.737,35.61,40.972,53.061,56.636,64.223,72.536,58.929,47.227,68.759,58.642,64.493,83.731,77.914,72.3,76.178,95.905,110.928,104.791,121.567,106.797,103.358,117.099,136.978,147.162,152.811,182.992,147.921,151.259,170.869,148.545,230.556,208.199,227.572,203.309,194.811,176.972,215.095,222.092,225.481,223.998,226.763,156.807,137.754,221.721,220.946,235.109,205.771,189.399,119.645,121.938,191.574,186.246,185.706,170.413,138.175,90.661,75.132,144.313,140.064,122.95,130.032,112.479,63.043,42.338,47.379,66.533,105.802,76.093,62.251,42.844,38.072,66.027,65.42,57.293,62.503,45.997,28.276,26.421,45.255,43.586,31.125,40.787,42.237,33.469,20.537,39.387,40.803,34.784,30.451,27.534,14.247,18.193,33.553,33.84,33.047,30.619,26.623,16.119,13.017,32.424,35.88,34.649,34.211,26.219,12.224,22.695,32.137,31.378,24.954,16.338,21.38,15.225,15.225,29.793,29.422,29.49,31.749,26.522,15.613,17.316,32.255,29.271,24.634,42.894,26.556,14.973,19.862,31.648,29.844,34.042,32.508,28.023,24.634,17.704,34.649,36.352,31.985,30.923,27.348,15.023,18.412,31.412,34.666,32.238,29.844,23.116,13.017,20.924,28.866,31.463,29.692,29.186,23.133,21.026,29.153,36.082,39.421,37.313,37.718,31.058,20.992,33.503,48.694,42.388,52.353,44.614,38.274,35.071,42.034,54.798,51.746,56.821,53.921,43.215,38.814,38.696,70.361,74.188,83.158,78.319,69.4,55.86,67.629,113.12,137.686,140.266,132.898,134.871,87.053,127.334,168.744,153.873],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.034,0.034,0.101,0.202,0.269,0.387,0.623,0.842,0.993,0.993,1.836,2.308,3.118,3.641,3.978,5.917,8.295,10.908,13.674,17.198,16.608,17.535,17.738,16.035,13.927,12.697,9.746,6.998,7.891,6.846,7.132,8.296,9.342,9.122,8.819,9.915,10.404,12.292,12.764,12.814,14.314,17.383,19.052,19.001,20.114,20.569,24.397,27.23,26.606,25.493,27.567,28.596,31.783,33.925,33.689,35.678,40.838,45.087,46.857,47.413,48.593,54.764,58.49,62.031,65.234,69.635,75.907,83.141,89.228,92.06,102.767,108.213,110.405,112.175,119.088,124.534,131.835,138.732,136.573,132.038,147.314,158.493,170.347,182.807,191.203,198.52,205.653,223.593,250.47,270.299,282.135,291.998,306.802,314.187,330.626,354.804,356.355,376.031,405.757,425.704,429.194,462.343,480.013,491.445,518.54,532.231,531.995,549.244,597.922,640.091,686.24,743.314,766.38,791.824,836.623,897.423,948.68,990.563,1068.764,1095.118,1139.58,1207.091,1238.537,1332.115,1393.152,1467.913,1488.23,1535.12,1560.833,1605.059,1678.606,1673.531,1689.33,1688.521,1642.019,1584.962,1629.711,1635.562,1648.579,1628.869,1594.27,1487.152,1452.283,1506.103,1470.628,1435.388,1370.692,1303.096,1204.358,1159.845,1182.22,1130.71,1067.414,1011.74,953.806,878.674,830.351,802.598,724.818,690.556,643.699,575.918,506.283,481.312,505.001,523.042,513.802,470.503,440.407,406.432,390.009,397.192,374.751,340.456,323.95,303.684,291.156,283.417,296.383,291.931,283.129,282.455,269.202,241.212,225.936,238.952,233.405,225.649,221.484,217.656,206.241,205.011,219.242,221.569,222.378,223.542,219.142,204.743,211.319,230.439,229.393,218.467,200.156,187.325,176.331,179.332,186.43,183.715,181.827,188.622,198.806,193.039,195.13,212.16,211.638,206.85,220.254,215.061,203.512,207.761,222.093,219.682,224.453,232.327,217.456,215.534,218.265,233.052,237.756,239.897,236.778,231.618,218.618,212.396,226.104,226.121,222.007,219.866,212.059,197.728,203.629,214.083,214.134,209.16,206.108,199.397,197.307,213.443,228.601,239.156,245.006,253.032,254.904,252.763,265.24,284.781,291.087,304.019,311.32,311.876,315.889,336.931,358.226,361.278,375.711,377.279,375.88,376.42,380.045,408.372,427.762,459.174,480.672,496.151,508.796,537.611,612.035,679.36,745.438,795.178,851.73,869.383,940.857,1041.972,1082.725],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.029,0.039,0.055,0.089,0.116,0.142,0.132,0.248,0.32,0.429,0.487,0.537,0.819,1.185,1.428,1.872,2.332,2.281,2.423,2.226,1.925,1.616,1.289,0.807,0.959,0.903,0.867,0.954,1.12,1.137,1.2,1.067,1.248,1.412,1.604,1.592,1.616,1.879,2.423,2.373,2.476,2.529,2.719,3.247,3.461,3.196,3.343,3.596,3.688,4.131,4.08,4.169,4.757,5.388,5.846,6.205,5.921,6.227,7.091,7.428,7.785,8.267,9.1,10.276,10.856,11.15,11.887,13.248,13.925,14.091,14.281,15.411,15.9,16.832,17.025,17.299,17.015,19.111,19.91,21.955,23.181,24.328,25.874,27.816,27.912,32.25,34.189,36.145,37.581,39.797,41.379,43.106,42.817,44.544,47.603,52.397,54.567,56.226,60.196,60.993,62.116,64.903,65.671,67.581,71.717,75.595,83.064,88.821,94.226,98.352,102.789,108.635,114.503,119.679,126.539,135.314,141.189,148.032,155.713,157.366,169.279,177.192,183.56,191.473,197.694,198.566,208.074,206.864,209.333,208.823,212.173,206.744,201.141,202.088,201.924,203.3,200.696,195.358,190.049,187.79,183.483,178.526,171.468,166.417,159.1,154.959,148.273,141.521,134.924,125.958,120.19,116.519,112.573,107.888,94.041,83.536,81.087,73.381,66.206,63.32,62.711,65.375,65.216,58.286,56.344,54.022,51.941,50.277,47.309,44.19,40.452,37.349,36.812,37.554,36.713,35.875,35.478,36.001,34.524,32.424,29.678,29.343,28.509,27.515,27.267,27.291,27.161,27.428,26.688,26.527,26.819,27.047,27.56,27.503,26.946,28.329,28.288,27.645,26.26,23.706,23.015,23.444,22.377,22.042,21.763,22.411,24.612,25.347,25.402,25.701,26.053,26.031,25.337,26.929,26.934,26.843,27.206,27.12,27.202,28.546,27.062,27.271,28.652,28.343,28.772,29.702,29.408,29.181,29.085,27.712,27.813,27.351,27.11,27.146,26.992,26.387,26.101,26.46,26.096,25.638,25.275,25.181,25.183,26.327,27.503,28.534,29.67,30.759,31.978,33.11,33.105,33.727,35.528,35.952,38.101,39.086,40.117,42.128,43.347,44.219,45.556,46.194,47.524,48.23,48.764,48.287,50.511,53.717,57.479,60.964,64.705,67.14,71.274,77.382,86.453,94.612,102.409,111.762,116.218,124.747,132.693,135.006]},{"iso":"KOR","continent":"Asia","population":51269183,"name":"South Korea","population_density":527.967,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,2,3,4,4,4,4,11,12,15,15,16,19,23,24,24,25,27,28,28,28,28,28,29,30,31,31,104,204,433,602,833,977,1261,1766,2337,3150,3736,4335,5186,5621,6088,6593,7041,7314,7478,7513,7755,7869,7979,8086,8162,8236,8320,8413,8565,8652,8799,8961,8961,9037,9137,9241,9332,9478,9583,9661,9786,9887,9976,10062,10156,10237,10284,10331,10384,10423,10450,10480,10512,10537,10564,10591,10613,10635,10653,10661,10674,10683,10694,10708,10718,10728,10738,10752,10761,10765,10774,10780,10793,10801,10804,10806,10810,10822,10840,10874,10909,10936,10962,10991,11018,11037,11050,11065,11078,11110,11122,11142,11165,11190,11206,11225,11265,11344,11402,11441,11468,11503,11541,11590,11629,11668,11719,11776,11814,11852,11902,11947,12003,12051,12085,12121,12155,12198,12257,12306,12373,12421,12438,12484,12535,12563,12602,12653,12715,12757,12800,12850,12904,12967,13030,13091,13137,13181,13244,13293,13338,13373,13417,13479,13512,13551,13612,13672,13711,13745,13771,13816,13879,13938,13979,14092,14150,14175,14203,14251,14269,14305,14336,14366,14389,14423,14456,14499,14519,14562,14598,14626,14660,14714,14770,14873,15039,15318,15515,15761,16058,16346,16670,17002,17399,17665,17945,18265,18706,19077,19400,19699,19947,20182,20449,20644,20842,21010,21177,21296,21432,21588,21743,21919,22055,22176,22285,22391,22504,22657,22783,22893,22975,23045,23106,23216,23341,23455,23516,23611,23661,23699,23812,23889,23952,24027,24091,24164,24239,24353,24422,24476,24548,24606,24703,24805,24889,24988,25035,25108,25199,25275,25333,25424,25543,25698,25775,25836,25955,26043,26146,26271,26385,26511,26635,26732,26807,26925,27050,27195,27284,27427,27553,27653,27799,27942,28133,28338,28546,28769,28998,29311,29654,30017,30403,30733,31004,31353,31735,32318,32887,33375,33824,34201,34652,35163,35703,36332,36915,37546,38161,38755,39432,40098,40786,41736,42766,43484,44364,45442,46453,47515],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.02,0.02,0.039,0.039,0.059,0.078,0.078,0.078,0.078,0.215,0.234,0.293,0.293,0.312,0.371,0.449,0.468,0.468,0.488,0.527,0.546,0.546,0.546,0.546,0.546,0.566,0.585,0.605,0.605,2.029,3.979,8.446,11.742,16.248,19.056,24.596,34.446,45.583,61.44,72.87,84.554,101.152,109.637,118.746,128.596,137.334,142.659,145.858,146.54,151.26,153.484,155.63,157.717,159.199,160.642,162.281,164.095,167.059,168.756,171.624,174.783,174.783,176.266,178.216,180.245,182.02,184.867,186.915,188.437,190.875,192.845,194.581,196.258,198.092,199.672,200.588,201.505,202.539,203.3,203.826,204.411,205.035,205.523,206.05,206.576,207.005,207.435,207.786,207.942,208.195,208.371,208.585,208.858,209.053,209.249,209.444,209.717,209.892,209.97,210.146,210.263,210.516,210.672,210.731,210.77,210.848,211.082,211.433,212.096,212.779,213.306,213.813,214.378,214.905,215.276,215.529,215.822,216.075,216.699,216.933,217.324,217.772,218.26,218.572,218.942,219.723,221.264,222.395,223.155,223.682,224.365,225.106,226.062,226.822,227.583,228.578,229.69,230.431,231.172,232.147,233.025,234.117,235.053,235.717,236.419,237.082,237.921,239.071,240.027,241.334,242.27,242.602,243.499,244.494,245.04,245.801,246.795,248.005,248.824,249.663,250.638,251.691,252.92,254.149,255.339,256.236,257.094,258.323,259.279,260.156,260.839,261.697,262.906,263.55,264.311,265.501,266.671,267.432,268.095,268.602,269.48,270.708,271.859,272.659,274.863,275.994,276.482,277.028,277.964,278.315,279.018,279.622,280.207,280.656,281.319,281.963,282.801,283.192,284.03,284.732,285.279,285.942,286.995,288.087,290.096,293.334,298.776,302.618,307.417,313.21,318.827,325.147,331.622,339.366,344.554,350.015,356.257,364.859,372.095,378.395,384.227,389.064,393.648,398.856,402.659,406.521,409.798,413.055,415.376,418.029,421.072,424.095,427.528,430.18,432.541,434.667,436.734,438.938,441.922,444.38,446.526,448.125,449.49,450.68,452.826,455.264,457.487,458.677,460.53,461.505,462.246,464.451,465.952,467.181,468.644,469.892,471.316,472.779,475.003,476.349,477.402,478.806,479.937,481.829,483.819,485.457,487.388,488.305,489.729,491.504,492.986,494.117,495.892,498.214,501.237,502.739,503.928,506.25,507.966,509.975,512.413,514.637,517.094,519.513,521.405,522.868,525.169,527.607,530.436,532.172,534.961,537.418,539.369,542.217,545.006,548.731,552.73,556.787,561.136,565.603,571.708,578.398,585.478,593.007,599.444,604.73,611.537,618.988,630.359,641.457,650.976,659.734,667.087,675.884,685.851,696.383,708.652,720.023,732.331,744.326,755.912,769.117,782.107,795.527,814.056,834.146,848.151,865.315,886.341,906.061,926.775],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.02,0,0.02,0.02,0,0,0,0.137,0.02,0.059,0,0.02,0.059,0.078,0.02,0,0.02,0.039,0.02,0,0,0,0,0.02,0.02,0.02,0,1.424,1.95,4.467,3.296,4.506,2.809,5.539,9.85,11.137,15.857,11.43,11.683,16.599,8.485,9.109,9.85,8.738,5.325,3.199,0.683,4.72,2.224,2.146,2.087,1.482,1.443,1.638,1.814,2.965,1.697,2.867,3.16,0,1.482,1.95,2.029,1.775,2.848,2.048,1.521,2.438,1.97,1.736,1.677,1.833,1.58,0.917,0.917,1.034,0.761,0.527,0.585,0.624,0.488,0.527,0.527,0.429,0.429,0.351,0.156,0.254,0.176,0.215,0.273,0.195,0.195,0.195,0.273,0.176,0.078,0.176,0.117,0.254,0.156,0.059,0.039,0.078,0.234,0.351,0.663,0.683,0.527,0.507,0.566,0.527,0.371,0.254,0.293,0.254,0.624,0.234,0.39,0.449,0.488,0.312,0.371,0.78,1.541,1.131,0.761,0.527,0.683,0.741,0.956,0.761,0.761,0.995,1.112,0.741,0.741,0.975,0.878,1.092,0.936,0.663,0.702,0.663,0.839,1.151,0.956,1.307,0.936,0.332,0.897,0.995,0.546,0.761,0.995,1.209,0.819,0.839,0.975,1.053,1.229,1.229,1.19,0.897,0.858,1.229,0.956,0.878,0.683,0.858,1.209,0.644,0.761,1.19,1.17,0.761,0.663,0.507,0.878,1.229,1.151,0.8,2.204,1.131,0.488,0.546,0.936,0.351,0.702,0.605,0.585,0.449,0.663,0.644,0.839,0.39,0.839,0.702,0.546,0.663,1.053,1.092,2.009,3.238,5.442,3.842,4.798,5.793,5.617,6.32,6.476,7.743,5.188,5.461,6.242,8.602,7.236,6.3,5.832,4.837,4.584,5.208,3.803,3.862,3.277,3.257,2.321,2.653,3.043,3.023,3.433,2.653,2.36,2.126,2.068,2.204,2.984,2.458,2.146,1.599,1.365,1.19,2.146,2.438,2.224,1.19,1.853,0.975,0.741,2.204,1.502,1.229,1.463,1.248,1.424,1.463,2.224,1.346,1.053,1.404,1.131,1.892,1.989,1.638,1.931,0.917,1.424,1.775,1.482,1.131,1.775,2.321,3.023,1.502,1.19,2.321,1.716,2.009,2.438,2.224,2.458,2.419,1.892,1.463,2.302,2.438,2.828,1.736,2.789,2.458,1.95,2.848,2.789,3.725,3.999,4.057,4.35,4.467,6.105,6.69,7.08,7.529,6.437,5.286,6.807,7.451,11.371,11.098,9.518,8.758,7.353,8.797,9.967,10.533,12.269,11.371,12.308,11.996,11.586,13.205,12.99,13.419,18.53,20.09,14.005,17.164,21.026,19.719,20.714],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.02,0.02,0.04,0.06,0.06,0.06,0.06,0.197,0.197,0.256,0.236,0.236,0.295,0.373,0.393,0.256,0.256,0.236,0.256,0.236,0.177,0.099,0.079,0.099,0.099,0.08,0.06,1.484,3.434,7.901,11.197,15.683,18.472,23.991,33.841,43.554,57.461,64.424,72.811,84.904,90.58,94.15,94.15,91.751,81.219,72.988,61.988,50.109,43.848,36.885,29.122,21.866,17.984,16.423,17.554,15.799,15.272,15.993,17.066,15.584,15.623,15.935,16.15,14.96,16.111,15.292,13.653,16.091,16.579,16.365,16.013,16.071,14.803,13.672,13.068,11.664,10.455,9.246,8.154,6.945,5.853,5.463,5.073,4.468,4.136,3.96,3.531,3.161,2.849,2.537,2.283,2.049,1.815,1.659,1.776,1.698,1.6,1.561,1.405,1.464,1.425,1.289,1.055,0.957,1.113,1.288,1.834,2.263,2.634,3.082,3.609,4.058,4.195,4.098,3.728,3.299,3.396,3.123,2.947,2.869,2.986,3.044,3.122,3.648,4.565,5.462,5.833,5.911,6.106,6.535,7.12,7.101,6.321,6.185,6.536,6.75,6.808,7.042,6.964,7.295,7.47,7.138,6.728,6.65,6.748,6.924,7.002,7.217,7.217,6.886,7.081,7.413,7.12,6.73,6.769,6.671,6.554,7.061,7.139,7.197,7.88,8.348,8.543,8.231,8.27,8.66,8.641,8.466,7.92,7.549,7.568,7.315,7.218,7.179,7.393,7.276,7.256,6.905,6.574,7.159,7.549,7.159,8.193,8.563,8.388,8.427,8.485,7.607,7.158,6.963,5.344,4.662,4.837,4.935,4.838,4.877,5.014,5.111,5.072,5.286,5.676,6.124,7.294,10.142,14.745,17.885,22.137,27.267,31.831,37.059,41.526,46.031,45.777,47.396,48.84,51.649,53.268,53.248,52.604,49.698,49.094,48.841,46.402,41.662,37.703,34.66,31.149,28.965,27.424,25.239,24.869,23.66,22.743,21.612,21.359,20.91,20.851,20.286,18.999,17.945,16.95,16.014,16.092,16.326,15.566,14.298,14.005,13.381,12.757,13.771,13.127,11.918,11.157,11.215,10.786,11.274,12.757,11.899,11.45,11.625,11.293,11.937,12.502,12.677,12.384,11.955,12.326,12.697,13.048,12.287,12.073,12.756,13.848,14.433,14.199,14.745,14.979,15.857,16.52,16.423,15.858,16.775,17.477,16.619,17.205,17.634,18.024,17.536,17.867,17.906,17.964,19.349,19.836,21.123,22.294,24.615,26.176,28.185,32.34,36.182,40.473,44.277,46.715,47.944,50.401,53.385,58.651,63.059,65.497,66.726,67.642,71.153,74.313,77.395,78.293,78.566,81.356,84.594,88.827,93.235,96.258,99.144,105.405,114.124,115.821,120.989,130.429,136.943,144.667],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.008,0.008,0.008,0.025,0.028,0.033,0.031,0.033,0.042,0.053,0.036,0.033,0.028,0.033,0.033,0.025,0.014,0.011,0.011,0.011,0.008,0.008,0.008,0.212,0.49,1.128,1.597,2.237,2.636,3.427,4.631,5.943,7.571,8.733,9.758,11.728,12.149,12.043,11.859,10.842,9.97,8.758,6.484,5.946,4.963,3.862,2.912,2.363,2.112,2.249,1.833,1.939,1.875,1.987,2.226,2.02,1.998,2.017,1.884,1.895,1.892,1.733,1.95,2.087,2.09,2.048,2.034,1.889,1.822,1.736,1.519,1.385,1.246,1.081,0.903,0.766,0.705,0.649,0.577,0.529,0.515,0.482,0.415,0.382,0.332,0.287,0.265,0.231,0.209,0.215,0.217,0.217,0.198,0.184,0.173,0.181,0.176,0.145,0.125,0.125,0.134,0.167,0.226,0.301,0.368,0.435,0.504,0.546,0.549,0.49,0.435,0.396,0.412,0.365,0.346,0.357,0.39,0.393,0.41,0.432,0.619,0.724,0.769,0.775,0.828,0.881,0.906,0.794,0.741,0.775,0.858,0.867,0.867,0.869,0.886,0.933,0.925,0.861,0.855,0.844,0.825,0.864,0.844,0.897,0.936,0.883,0.917,0.939,0.853,0.825,0.78,0.819,0.889,0.881,0.878,0.95,1.017,1.05,1.048,1.059,1.062,1.098,1.084,1.034,0.956,0.908,0.953,0.922,0.855,0.889,0.931,0.942,0.914,0.814,0.847,0.914,0.908,0.855,1.062,1.128,1.126,1.078,1.037,0.922,0.908,0.68,0.602,0.596,0.613,0.571,0.641,0.596,0.63,0.646,0.66,0.66,0.719,0.755,0.986,1.329,2.006,2.477,3.068,3.745,4.391,5.007,5.47,5.799,5.991,6.086,6.15,6.576,6.707,6.682,6.409,6.359,6.233,6.086,5.4,4.918,4.486,4.118,3.759,3.483,3.174,3.062,3.001,2.912,2.784,2.756,2.672,2.552,2.547,2.407,2.335,2.226,2.118,1.992,1.984,1.906,1.872,1.736,1.772,1.716,1.652,1.661,1.527,1.385,1.424,1.337,1.402,1.505,1.507,1.485,1.46,1.452,1.435,1.502,1.577,1.494,1.577,1.558,1.56,1.652,1.594,1.471,1.491,1.546,1.847,1.859,1.775,1.895,1.978,2.012,2.029,1.914,2.051,2.226,2.165,2.129,2.171,2.171,2.257,2.154,2.207,2.288,2.357,2.435,2.485,2.614,2.937,3.118,3.388,3.748,4.213,4.77,5.25,5.754,6.094,6.228,6.562,6.754,7.423,7.997,8.281,8.613,8.908,9.192,9.552,9.432,9.599,9.864,10.371,11.034,11.433,11.895,12.246,12.411,13.433,14.545,14.832,15.629,16.746,17.708,18.75]},{"iso":"SSD","continent":"Africa","population":11193729,"name":"South Sudan","population_density":null,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,2,3,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,6,6,34,34,35,45,45,46,46,52,58,74,120,120,120,156,194,203,203,236,236,290,290,290,290,481,563,655,655,806,806,994,994,994,994,994,994,994,994,994,994,994,1317,1604,1604,1604,1670,1670,1693,1693,1693,1776,1813,1830,1864,1882,1892,1916,1930,1942,1942,1942,1942,1989,1989,2007,2021,2021,2021,2021,2021,2021,2021,2021,2021,2021,2021,2021,2148,2148,2153,2171,2191,2191,2200,2211,2211,2211,2239,2258,2258,2262,2305,2305,2322,2322,2322,2352,2429,2429,2437,2437,2450,2450,2463,2470,2470,2472,2477,2478,2482,2488,2489,2490,2490,2494,2494,2497,2497,2499,2504,2507,2510,2514,2518,2519,2519,2527,2527,2532,2533,2536,2544,2544,2545,2552,2555,2555,2568,2578,2578,2587,2592,2594,2599,2609,2642,2642,2649,2660,2664,2669,2676,2676,2686,2692,2700,2704,2704,2715,2715,2726,2726,2734,2748,2749,2761,2761,2777,2787,2798,2798,2807,2817,2817,2842,2847,2847,2870,2872,2876,2878,2883,2883,2890,2890,2903,2903,2905,2926,2926,2940,2943,2943,2943,2943,2943,2960,2960,2960,2960,2980,3003,3003,3012,3016,3016,3016,3016,3047,3047,3047,3047,3073,3092,3104,3104,3109,3109,3111,3118,3154,3154,3166,3181,3181,3181,3181,3181,3181,3206,3206,3206,3222,3222,3222],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.089,0.089,0.179,0.179,0.268,0.357,0.357,0.357,0.357,0.357,0.357,0.357,0.357,0.357,0.357,0.357,0.357,0.357,0.447,0.447,0.447,0.536,0.536,3.037,3.037,3.127,4.02,4.02,4.109,4.109,4.645,5.181,6.611,10.72,10.72,10.72,13.936,17.331,18.135,18.135,21.083,21.083,25.907,25.907,25.907,25.907,42.97,50.296,58.515,58.515,72.005,72.005,88.8,88.8,88.8,88.8,88.8,88.8,88.8,88.8,88.8,88.8,88.8,117.655,143.295,143.295,143.295,149.191,149.191,151.245,151.245,151.245,158.66,161.966,163.484,166.522,168.13,169.023,171.167,172.418,173.49,173.49,173.49,173.49,177.689,177.689,179.297,180.548,180.548,180.548,180.548,180.548,180.548,180.548,180.548,180.548,180.548,180.548,180.548,191.893,191.893,192.34,193.948,195.735,195.735,196.539,197.521,197.521,197.521,200.023,201.72,201.72,202.077,205.919,205.919,207.438,207.438,207.438,210.118,216.996,216.996,217.711,217.711,218.873,218.873,220.034,220.659,220.659,220.838,221.285,221.374,221.731,222.267,222.357,222.446,222.446,222.803,222.803,223.071,223.071,223.25,223.697,223.965,224.233,224.59,224.947,225.037,225.037,225.751,225.751,226.198,226.287,226.555,227.27,227.27,227.359,227.985,228.253,228.253,229.414,230.308,230.308,231.112,231.558,231.737,232.184,233.077,236.025,236.025,236.65,237.633,237.99,238.437,239.062,239.062,239.956,240.492,241.206,241.564,241.564,242.547,242.547,243.529,243.529,244.244,245.495,245.584,246.656,246.656,248.085,248.979,249.961,249.961,250.765,251.659,251.659,253.892,254.339,254.339,256.394,256.572,256.93,257.108,257.555,257.555,258.18,258.18,259.342,259.342,259.52,261.396,261.396,262.647,262.915,262.915,262.915,262.915,262.915,264.434,264.434,264.434,264.434,266.22,268.275,268.275,269.079,269.437,269.437,269.437,269.437,272.206,272.206,272.206,272.206,274.529,276.226,277.298,277.298,277.745,277.745,277.923,278.549,281.765,281.765,282.837,284.177,284.177,284.177,284.177,284.177,284.177,286.41,286.41,286.41,287.84,287.84,287.84],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.089,0,0.089,0.089,0,0,0,0,0,0,0,0,0,0,0,0,0.089,0,0,0.089,0,2.501,0,0.089,0.893,0,0.089,0,0.536,0.536,1.429,4.109,0,0,3.216,3.395,0.804,0,2.948,0,4.824,0,0,0,17.063,7.326,8.219,0,13.49,0,16.795,0,0,0,0,0,0,0,0,0,0,28.855,25.639,0,0,5.896,0,2.055,0,0,7.415,3.305,1.519,3.037,1.608,0.893,2.144,1.251,1.072,0,0,0,4.199,0,1.608,1.251,0,0,0,0,0,0,0,0,0,0,0,11.346,0,0.447,1.608,1.787,0,0.804,0.983,0,0,2.501,1.697,0,0.357,3.841,0,1.519,0,0,2.68,6.879,0,0.715,0,1.161,0,1.161,0.625,0,0.179,0.447,0.089,0.357,0.536,0.089,0.089,0,0.357,0,0.268,0,0.179,0.447,0.268,0.268,0.357,0.357,0.089,0,0.715,0,0.447,0.089,0.268,0.715,0,0.089,0.625,0.268,0,1.161,0.893,0,0.804,0.447,0.179,0.447,0.893,2.948,0,0.625,0.983,0.357,0.447,0.625,0,0.893,0.536,0.715,0.357,0,0.983,0,0.983,0,0.715,1.251,0.089,1.072,0,1.429,0.893,0.983,0,0.804,0.893,0,2.233,0.447,0,2.055,0.179,0.357,0.179,0.447,0,0.625,0,1.161,0,0.179,1.876,0,1.251,0.268,0,0,0,0,1.519,0,0,0,1.787,2.055,0,0.804,0.357,0,0,0,2.769,0,0,0,2.323,1.697,1.072,0,0.447,0,0.179,0.625,3.216,0,1.072,1.34,0,0,0,0,0,2.233,0,0,1.429,0,0],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.089,0.089,0.178,0.267,0.267,0.267,0.267,0.267,0.178,0.178,0.089,0,0,0,0,0,0.089,0.089,0.089,0.178,0.178,2.679,2.679,2.768,3.572,3.572,3.661,3.572,4.108,2.143,3.572,7.592,6.699,6.699,9.826,13.221,13.489,12.953,14.472,10.363,15.187,15.187,11.971,8.576,24.835,32.161,37.432,37.432,46.098,46.098,62.893,62.893,45.83,38.504,30.285,30.285,16.795,16.795,0,0,0,28.855,54.494,54.494,54.494,60.39,60.39,62.445,62.445,33.59,15.366,18.671,20.19,17.331,18.939,17.777,19.921,21.172,14.829,11.524,10.005,6.968,9.559,8.666,8.13,8.13,7.058,7.058,7.058,7.058,2.859,2.859,1.251,0,0,0,0,11.346,11.346,11.793,13.401,15.188,15.188,15.992,16.975,5.629,5.629,7.683,7.772,5.985,6.342,9.379,8.396,9.915,9.915,7.414,8.397,15.276,14.919,11.793,11.793,11.435,11.435,12.596,10.541,3.662,3.841,3.573,3.662,2.858,3.394,2.322,1.786,1.786,1.964,1.517,1.696,1.339,0.982,1.34,1.519,1.787,1.787,2.144,1.965,1.965,2.501,2.054,2.233,2.054,1.965,2.323,2.234,2.323,2.233,2.501,2.054,3.126,3.751,3.036,3.84,4.198,3.752,3.931,4.824,6.611,5.718,6.343,6.522,6.432,6.7,6.878,5.985,3.93,4.466,4.556,3.93,3.573,4.109,3.484,4.467,3.574,3.753,4.289,4.021,5.093,4.11,5.539,5.449,6.432,5.717,5.27,6.074,5.002,7.235,6.253,5.36,6.432,6.611,6.164,5.45,5.897,3.664,3.842,3.842,2.948,2.769,2.591,4.288,3.841,5.092,4.735,4.735,3.574,3.574,3.395,3.038,3.038,1.787,1.519,3.306,5.361,5.361,6.165,5.003,5.003,5.003,5.003,5.985,3.93,3.93,3.126,5.092,6.789,7.861,7.861,5.539,5.539,5.718,6.343,7.236,5.539,5.539,6.879,6.432,6.432,6.253,5.628,2.412,4.645,3.573,2.233,3.662,3.662,3.662],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.038,0.038,0.038,0.026,0.026,0.013,0,0,0,0,0,0,0.013,0.013,0.013,0.026,0.026,0.383,0.383,0.383,0.51,0.51,0.51,0.51,0.23,0.306,0.498,0.957,0.957,0.944,1.404,1.812,1.851,1.646,1.48,1.48,2.17,1.71,1.225,1.11,3.548,4.173,5.347,4.658,6.585,6.585,8.985,6.547,5.501,4.326,4.326,2.399,2.399,0,0,0,0,4.122,7.785,7.785,7.785,8.627,8.627,8.921,4.799,1.136,2.195,2.667,2.042,2.476,2.412,2.54,2.846,1.965,1.646,1.429,0.995,0.766,1.238,0.932,0.983,1.008,1.008,1.008,1.008,0.408,0.408,0.179,0,0,0,0,0,1.621,1.621,1.685,1.914,2.17,2.17,2.284,0.804,0.804,0.74,0.868,0.855,0.855,0.791,1.2,1.2,1.417,1.059,0.817,1.2,2.131,1.583,1.685,1.468,1.634,1.634,1.417,0.523,0.523,0.447,0.51,0.357,0.408,0.319,0.242,0.255,0.23,0.217,0.204,0.191,0.115,0.128,0.179,0.217,0.204,0.255,0.268,0.281,0.255,0.294,0.255,0.281,0.242,0.23,0.319,0.319,0.23,0.319,0.294,0.281,0.408,0.434,0.434,0.536,0.51,0.498,0.562,0.523,0.817,0.817,0.791,0.868,0.893,0.893,0.855,0.434,0.562,0.549,0.51,0.51,0.447,0.498,0.498,0.51,0.434,0.434,0.562,0.574,0.587,0.587,0.651,0.778,0.817,0.638,0.74,0.715,0.715,0.83,0.766,0.625,0.919,0.83,0.753,0.778,0.523,0.459,0.549,0.255,0.396,0.345,0.345,0.549,0.549,0.638,0.676,0.51,0.51,0.485,0.217,0.434,0.255,0.217,0.217,0.472,0.766,0.766,0.664,0.715,0.715,0.715,0.459,0.562,0.562,0.447,0.396,0.727,0.97,1.123,0.727,0.791,0.791,0.817,0.574,0.791,0.638,0.791,0.919,0.919,0.893,0.804,0.345,0.345,0.51,0.319,0.319,0.523,0.523,0.523]},{"iso":"ESP","continent":"Europe","population":46754783,"name":"Spain","population_density":93.105,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,6,13,15,32,45,84,120,165,222,259,400,500,673,1073,1695,2277,2277,5232,6391,7798,9942,11748,13910,17963,20410,25374,28768,35136,39885,49515,57786,65719,73235,80110,87956,95923,104118,112065,119199,126168,131646,136675,141942,148220,153222,158273,163027,166831,170099,172541,177644,184948,190839,191726,198674,200210,204178,208389,213024,202990,205905,207634,209465,210773,212917,213435,215216,216582,217466,218011,219329,220325,221447,222857,223578,224350,227436,228030,228691,229540,230183,230698,230698,231606,232037,232555,233037,234824,235290,235772,235400,236259,236259,237906,238564,239228,239479,239638,239932,240326,240660,240978,241310,241550,241717,241966,242280,242707,243209,243605,243928,244109,244328,244683,245268,245575,245938,246272,246504,246752,247086,247486,247905,248469,248770,248970,249271,249659,250103,250545,250545,250545,251789,252130,252513,253056,253908,253908,253908,255953,256619,257494,258855,260255,260255,260255,264836,266194,267551,270166,272421,272421,272421,278782,280610,282641,285430,288522,288522,288522,297054,302814,305767,309855,314362,314362,314362,322980,326612,329784,337334,342813,342813,342813,359082,364196,370867,377906,386054,386054,386054,405436,412553,419849,429507,439286,439286,439286,462858,470973,479554,488513,498989,498989,498989,525549,534513,543379,554143,566326,566326,566326,593730,603167,614360,625651,640040,640040,640040,671468,682267,693556,704209,716481,716481,716481,748266,748266,769188,778607,789932,789932,789932,813412,825410,835901,848324,861112,861112,861112,888968,896086,908056,921374,936560,936560,936560,974449,988322,1005295,1026281,1046132,1046132,1046132,1098320,1116738,1136503,1160083,1185678,1185678,1185678,1240697,1259366,1284408,1306316,1328832,1328832,1328832,1381218,1381218,1417709,1437220,1458591,1458591,1458591,1496864,1510023,1525341,1541574,1556730,1556730,1556730,1582616,1594844,1605066,1617355,1628208,1628208,1628208,1648187,1656444,1665775,1675902,1684647,1684647,1684647,1702328,1702328,1712101,1720056,1730575,1730575,1730575,1751884,1762212,1773290,1785421],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.021,0.021,0.021,0.021,0.021,0.021,0.021,0.021,0.043,0.043,0.043,0.043,0.043,0.043,0.043,0.043,0.043,0.043,0.043,0.043,0.043,0.043,0.043,0.043,0.128,0.278,0.321,0.684,0.962,1.797,2.567,3.529,4.748,5.54,8.555,10.694,14.394,22.95,36.253,48.701,48.701,111.903,136.692,166.785,212.641,251.268,297.51,384.196,436.533,542.704,615.295,751.495,853.068,1059.036,1235.938,1405.61,1566.364,1713.408,1881.219,2051.619,2226.895,2396.867,2549.45,2698.505,2815.669,2923.23,3035.882,3170.157,3277.141,3385.172,3486.852,3568.212,3638.109,3690.339,3799.483,3955.702,4081.7,4100.671,4249.276,4282.129,4366.997,4457.063,4556.197,4341.588,4403.934,4440.915,4480.076,4508.052,4553.908,4564.988,4603.08,4632.296,4651.203,4662.86,4691.049,4712.352,4736.35,4766.507,4781.928,4798.44,4864.443,4877.148,4891.286,4909.444,4923.197,4934.212,4934.212,4953.632,4962.851,4973.93,4984.239,5022.459,5032.426,5042.735,5034.779,5053.151,5053.151,5088.378,5102.451,5116.653,5122.021,5125.422,5131.71,5140.137,5147.281,5154.082,5161.183,5166.316,5169.888,5175.214,5181.93,5191.062,5201.799,5210.269,5217.177,5221.049,5225.733,5233.326,5245.838,5252.404,5260.168,5267.311,5272.273,5277.578,5284.721,5293.277,5302.238,5314.301,5320.739,5325.017,5331.455,5339.753,5349.25,5358.703,5358.703,5358.703,5385.31,5392.603,5400.795,5412.409,5430.632,5430.632,5430.632,5474.37,5488.615,5507.33,5536.439,5566.382,5566.382,5566.382,5664.362,5693.407,5722.431,5778.361,5826.591,5826.591,5826.591,5962.641,6001.739,6045.178,6104.83,6170.962,6170.962,6170.962,6353.446,6476.642,6539.802,6627.236,6723.633,6723.633,6723.633,6907.956,6985.638,7053.482,7214.962,7332.148,7332.148,7332.148,7680.113,7789.492,7932.172,8082.724,8256.995,8256.995,8256.995,8671.541,8823.76,8979.809,9186.376,9395.531,9395.531,9395.531,9899.693,10073.258,10256.79,10448.407,10672.47,10672.47,10672.47,11240.54,11432.264,11621.891,11852.114,12112.686,12112.686,12112.686,12698.808,12900.648,13140.046,13381.54,13689.295,13689.295,13689.295,14361.483,14592.454,14833.905,15061.753,15324.229,15324.229,15324.229,16004.052,16004.052,16451.536,16652.991,16895.213,16895.213,16895.213,17397.407,17654.023,17878.406,18144.112,18417.624,18417.624,18417.624,19013.413,19165.654,19421.671,19706.519,20031.32,20031.32,20031.32,20841.697,21138.415,21501.437,21950.289,22374.866,22374.866,22374.866,23491.073,23885,24307.738,24812.071,25359.502,25359.502,25359.502,26536.258,26935.554,27471.157,27939.73,28421.306,28421.306,28421.306,29541.748,29541.748,30322.224,30739.529,31196.616,31196.616,31196.616,32015.206,32296.653,32624.277,32971.472,33295.631,33295.631,33295.631,33849.286,34110.82,34329.45,34592.29,34824.416,34824.416,34824.416,35251.73,35428.333,35627.906,35844.504,36031.544,36031.544,36031.544,36409.708,36409.708,36618.735,36788.878,37013.86,37013.86,37013.86,37469.621,37690.518,37927.457,38186.917],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.021,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.086,0.15,0.043,0.364,0.278,0.834,0.77,0.962,1.219,0.791,3.016,2.139,3.7,8.555,13.303,12.448,0,63.202,24.789,30.093,45.856,38.627,46.241,86.686,52.337,106.171,72.592,136.2,101.572,205.968,176.902,169.672,160.754,147.044,167.812,170.4,175.276,169.972,152.583,149.054,117.164,107.561,112.652,134.275,106.984,108.032,101.679,81.361,69.897,52.23,109.144,156.219,125.998,18.971,148.605,32.852,84.868,90.066,99.134,-214.609,62.347,36.98,39.162,27.976,45.856,11.079,38.092,29.216,18.907,11.657,28.19,21.303,23.998,30.157,15.421,16.512,66.004,12.705,14.138,18.159,13.753,11.015,0,19.42,9.218,11.079,10.309,38.221,9.967,10.309,-7.956,18.372,0,35.226,14.073,14.202,5.368,3.401,6.288,8.427,7.144,6.801,7.101,5.133,3.572,5.326,6.716,9.133,10.737,8.47,6.908,3.871,4.684,7.593,12.512,6.566,7.764,7.144,4.962,5.304,7.144,8.555,8.962,12.063,6.438,4.278,6.438,8.299,9.496,9.454,0,0,26.607,7.293,8.192,11.614,18.223,0,0,43.739,14.245,18.715,29.109,29.943,0,0,97.979,29.045,29.024,55.93,48.23,0,0,136.05,39.098,43.439,59.652,66.132,0,0,182.484,123.196,63.159,87.435,96.397,0,0,184.323,77.682,67.843,161.481,117.186,0,0,347.964,109.379,142.681,150.551,174.271,0,0,414.546,152.22,156.048,206.567,209.155,0,0,504.162,173.565,183.532,191.617,224.063,0,0,568.07,191.724,189.628,230.222,260.572,0,0,586.122,201.84,239.398,241.494,307.755,0,0,672.188,230.971,241.451,227.848,262.476,0,0,679.823,0,447.484,201.455,242.221,0,0,502.195,256.615,224.383,265.705,273.512,0,0,595.789,152.241,256.017,284.848,324.801,0,0,810.377,296.718,363.022,448.852,424.577,0,0,1116.207,393.928,422.737,504.333,547.431,0,0,1176.757,399.296,535.603,468.572,481.576,0,0,1120.442,0,780.476,417.305,457.087,0,0,818.59,281.447,327.624,347.194,324.159,0,0,553.655,261.535,218.63,262.839,232.126,0,0,427.315,176.602,199.573,216.598,187.04,0,0,378.165,0,209.027,170.143,224.982,0,0,455.761,220.897,236.938,259.46],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.021,0.021,0.021,0.021,0.021,0.021,0.021,0.021,0,0,0,0,0,0,0,0,0.086,0.236,0.279,0.643,0.921,1.755,2.525,3.487,4.62,5.261,8.234,10.009,13.431,21.152,33.685,45.171,43.952,106.363,128.136,156.09,198.246,228.318,261.256,335.494,387.831,430.8,478.603,584.71,640.426,807.767,938.428,1021.414,1129.831,1170.704,1265.924,1300.124,1373.828,1337.832,1313.513,1292.895,1249.305,1209.822,1154.662,1118.537,1050.245,988.305,937.401,869.708,822.441,767.11,763.602,785.546,804.56,715.499,762.425,713.916,728.887,766.723,756.713,385.885,322.234,340.243,230.8,225.924,186.912,107.925,46.883,290.708,247.268,221.945,210.973,204.3,182.442,201.52,178.849,166.145,213.242,214.29,200.238,197.094,186.849,167.707,152.286,155.194,98.408,96.782,92.953,113.015,109.229,108.523,100.567,99.519,90.301,114.448,118.212,94.193,89.594,82.686,96.93,86.985,94.129,65.704,58.732,49.663,47.867,49.792,50.22,50.926,54.519,56.188,55.995,54.733,55.845,58.112,63.908,61.341,58.368,57.042,55.096,56.529,58.989,59.951,56.401,61.898,60.572,57.706,59.182,62.177,64.529,65.428,56.466,44.403,64.572,67.587,69.341,72.656,81.383,71.929,71.929,115.668,103.306,114.728,135.645,153.974,135.751,135.751,233.73,219.036,233.815,271.03,290.151,260.208,260.208,396.258,337.377,351.771,382.399,392.601,344.371,344.371,526.855,514.001,538.062,582.058,618.803,552.671,552.671,736.994,632.192,576.839,675.161,704.912,608.515,608.515,956.479,881.535,946.534,1029.242,1042.032,924.846,924.846,1339.392,1143.648,1190.317,1254.203,1312.807,1138.536,1138.536,1642.698,1401.717,1433.029,1468.598,1486.094,1276.939,1276.939,1845.009,1532.571,1548.634,1595.324,1664.279,1440.216,1440.216,2026.338,1660.108,1707.782,1759.648,1837.181,1576.609,1576.609,2248.797,1893.646,1933.257,1921.707,1942.689,1634.934,1634.934,2314.757,1642.569,1859.082,1819.086,1833.459,1570.983,1570.983,2073.178,1649.97,1874.353,1692.574,1764.631,1522.41,1522.41,2118.199,1768.245,1767.647,1828.112,1887.208,1613.696,1613.696,2424.073,2125.002,2335.783,2528.618,2668.347,2343.546,2343.546,3459.753,3043.304,3169.323,3310.634,3409.213,2984.636,2984.636,4161.393,3444.482,3586.157,3631.992,3609.235,3061.804,3061.804,4182.246,3005.489,3386.669,3268.371,3256.886,2775.31,2775.31,3593.9,2754.905,3082.529,2649.247,2556.101,2099.014,2099.014,2652.669,2095.614,2032.797,1968.012,1852.944,1528.785,1528.785,1956.1,1579.047,1517.085,1515.053,1439.254,1207.128,1207.128,1585.293,1157.978,1190.403,1160.973,1169.357,982.317,982.317,1438.078,1280.81,1517.748,1568.181],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.003,0.003,0.003,0.003,0.003,0.003,0.003,0,0,0,0,0,0,0,0,0,0.012,0.034,0.04,0.092,0.131,0.251,0.361,0.486,0.639,0.746,1.124,1.39,1.8,2.912,4.675,6.279,6.166,14.764,18,21.77,27.099,30.716,35.544,47.928,46.376,58.002,64.073,76.979,85.971,108.789,121.677,138.44,146.237,156.873,161.389,171.222,166.837,165.847,163.406,161.734,157.466,148.859,140.609,134.752,125.753,119.389,112.621,107.506,102.126,93.494,89.904,96.937,99.504,87.689,97.295,92.003,96.665,93.94,85.785,37.127,43.323,27.377,28.278,20.151,13.835,1.256,37.356,32.623,30.041,26.112,26.142,22.635,24.48,23.347,21.376,21.034,28.798,26.586,25.562,24.728,22.384,21.755,19.396,12.741,12.243,11.806,10.685,14.18,14.031,15.503,11.592,12.9,11.317,14.877,11.427,12.032,11.327,12.949,11.223,12.427,8.415,7.376,6.361,6.328,6.352,6.215,5.97,6.255,6.817,7.012,7.266,7.309,7.217,7.342,7.825,7.229,7.128,7.162,7.318,7.406,7.342,6.777,7.119,7.733,7.633,7.535,7.697,7.862,7.996,8.066,6.343,5.423,8.613,8.736,8.72,9.023,10.275,10.275,10.275,12.723,13.716,15.219,17.719,19.393,19.393,19.393,27.142,29.256,30.729,34.56,37.173,37.173,37.173,42.611,44.047,46.107,46.638,49.196,49.196,49.196,55.829,67.843,70.66,74.629,78.953,78.953,78.953,79.216,72.714,73.383,83.961,86.931,86.931,86.931,110.308,114.836,125.527,123.966,132.121,132.121,132.121,141.633,147.753,149.662,157.665,162.648,162.648,162.648,175.45,178.5,182.426,180.29,182.42,182.42,182.42,191.55,194.144,195.014,200.53,205.745,205.745,205.745,208.324,209.769,216.879,218.489,225.23,225.23,225.23,237.525,241.687,241.98,240.03,233.562,233.562,233.562,234.653,201.657,231.09,227.32,224.426,224.426,224.426,199.051,235.71,203.839,213.017,217.487,217.487,217.487,230.858,215.947,220.466,223.201,230.528,230.528,230.528,261.183,281.823,297.109,320.539,334.792,334.792,334.792,378.482,392.369,400.9,408.826,426.377,426.377,426.377,435.027,435.793,451.917,446.808,437.401,437.401,437.401,429.356,372.313,407.295,399.971,396.473,396.473,396.473,353.351,393.558,328.865,318.849,299.859,299.859,299.859,262.011,259.167,243.596,231.545,218.398,218.398,218.398,200.349,188.216,185.494,178.888,172.447,172.447,172.447,165.425,140.197,141.547,134.911,140.331,140.331,140.331,151.416,182.973,186.96,199.72]},{"iso":"LKA","continent":"Asia","population":21413250,"name":"Sri Lanka","population_density":341.955,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,6,10,18,28,44,51,60,73,77,82,97,102,102,106,106,113,117,122,143,146,151,159,166,176,178,185,189,190,190,198,210,217,233,238,238,244,254,271,304,310,330,368,420,460,523,588,619,649,663,690,705,718,751,771,797,824,835,847,863,869,889,915,925,935,960,981,992,1027,1028,1055,1068,1089,1141,1182,1319,1469,1530,1558,1620,1633,1643,1683,1749,1797,1801,1814,1835,1857,1859,1869,1877,1880,1884,1889,1905,1915,1924,1947,1950,1950,1950,1951,1991,2001,2010,2014,2033,2037,2039,2047,2054,2066,2069,2074,2076,2077,2081,2094,2154,2454,2511,2617,2646,2665,2671,2687,2697,2703,2724,2730,2730,2752,2753,2764,2770,2782,2805,2810,2810,2814,2815,2815,2823,2828,2834,2839,2839,2839,2841,2844,2871,2880,2881,2882,2886,2890,2893,2900,2902,2902,2918,2941,2947,2953,2959,2971,2984,2986,2989,2995,3012,3049,3092,3101,3111,3115,3121,3123,3123,3140,3147,3155,3169,3195,3234,3262,3271,3271,3276,3281,3283,3287,3299,3313,3324,3333,3345,3349,3360,3363,3374,3380,3382,3388,3395,3402,3513,4252,4459,4488,4523,4628,4752,4844,5038,5170,5244,5354,5475,5538,5625,5811,5978,6287,7153,7521,7872,8413,8870,9205,9791,10424,10663,11060,11335,11744,12187,12570,12970,13419,13929,14285,14715,15350,15723,16191,16583,17287,17674,18075,18402,18841,19280,19771,20171,20508,20967,21469,22028,22501,22988,23484,23987,24532,25410,26038,26559,27228,27877,28580,29378,30072,30613,31375,32135,32790,33478,34121,34737,35387],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.047,0.047,0.047,0.047,0.047,0.047,0.047,0.047,0.047,0.047,0.047,0.047,0.047,0.047,0.047,0.047,0.047,0.047,0.047,0.047,0.047,0.047,0.047,0.047,0.047,0.047,0.047,0.047,0.047,0.047,0.047,0.047,0.047,0.047,0.047,0.047,0.047,0.047,0.047,0.047,0.047,0.047,0.047,0.047,0.093,0.093,0.28,0.467,0.841,1.308,2.055,2.382,2.802,3.409,3.596,3.829,4.53,4.763,4.763,4.95,4.95,5.277,5.464,5.697,6.678,6.818,7.052,7.425,7.752,8.219,8.313,8.64,8.826,8.873,8.873,9.247,9.807,10.134,10.881,11.115,11.115,11.395,11.862,12.656,14.197,14.477,15.411,17.186,19.614,21.482,24.424,27.46,28.907,30.308,30.962,32.223,32.924,33.531,35.072,36.006,37.22,38.481,38.995,39.555,40.302,40.582,41.516,42.731,43.198,43.665,44.832,45.813,46.326,47.961,48.008,49.269,49.876,50.856,53.285,55.199,61.597,68.602,71.451,72.759,75.654,76.261,76.728,78.596,81.678,83.92,84.107,84.714,85.695,86.722,86.815,87.282,87.656,87.796,87.983,88.216,88.964,89.431,89.851,90.925,91.065,91.065,91.065,91.112,92.98,93.447,93.867,94.054,94.941,95.128,95.221,95.595,95.922,96.482,96.622,96.856,96.949,96.996,97.183,97.79,100.592,114.602,117.264,122.214,123.568,124.456,124.736,125.483,125.95,126.23,127.211,127.491,127.491,128.519,128.565,129.079,129.359,129.92,130.994,131.227,131.227,131.414,131.461,131.461,131.834,132.068,132.348,132.581,132.581,132.581,132.675,132.815,134.076,134.496,134.543,134.59,134.776,134.963,135.103,135.43,135.524,135.524,136.271,137.345,137.625,137.905,138.185,138.746,139.353,139.446,139.586,139.867,140.661,142.388,144.397,144.817,145.284,145.471,145.751,145.844,145.844,146.638,146.965,147.339,147.992,149.207,151.028,152.336,152.756,152.756,152.989,153.223,153.316,153.503,154.063,154.717,155.231,155.651,156.212,156.398,156.912,157.052,157.566,157.846,157.94,158.22,158.547,158.874,164.057,198.569,208.236,209.59,211.224,216.128,221.919,226.215,235.275,241.439,244.895,250.032,255.683,258.625,262.688,271.374,279.173,293.603,334.046,351.231,367.623,392.888,414.23,429.874,457.24,486.801,497.963,516.503,529.345,548.445,569.134,587.02,605.7,626.668,650.485,667.11,687.191,716.846,734.265,756.121,774.427,807.304,825.377,844.104,859.374,879.876,900.377,923.307,941.987,957.725,979.16,1002.604,1028.709,1050.798,1073.541,1096.704,1120.194,1145.646,1186.648,1215.976,1240.307,1271.549,1301.857,1334.688,1371.954,1404.364,1429.629,1465.214,1500.706,1531.295,1563.425,1593.453,1622.22,1652.575],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.047,0,0.187,0.187,0.374,0.467,0.747,0.327,0.42,0.607,0.187,0.234,0.701,0.234,0,0.187,0,0.327,0.187,0.234,0.981,0.14,0.234,0.374,0.327,0.467,0.093,0.327,0.187,0.047,0,0.374,0.56,0.327,0.747,0.234,0,0.28,0.467,0.794,1.541,0.28,0.934,1.775,2.428,1.868,2.942,3.036,1.448,1.401,0.654,1.261,0.701,0.607,1.541,0.934,1.214,1.261,0.514,0.56,0.747,0.28,0.934,1.214,0.467,0.467,1.168,0.981,0.514,1.635,0.047,1.261,0.607,0.981,2.428,1.915,6.398,7.005,2.849,1.308,2.895,0.607,0.467,1.868,3.082,2.242,0.187,0.607,0.981,1.027,0.093,0.467,0.374,0.14,0.187,0.234,0.747,0.467,0.42,1.074,0.14,0,0,0.047,1.868,0.467,0.42,0.187,0.887,0.187,0.093,0.374,0.327,0.56,0.14,0.234,0.093,0.047,0.187,0.607,2.802,14.01,2.662,4.95,1.354,0.887,0.28,0.747,0.467,0.28,0.981,0.28,0,1.027,0.047,0.514,0.28,0.56,1.074,0.234,0,0.187,0.047,0,0.374,0.234,0.28,0.234,0,0,0.093,0.14,1.261,0.42,0.047,0.047,0.187,0.187,0.14,0.327,0.093,0,0.747,1.074,0.28,0.28,0.28,0.56,0.607,0.093,0.14,0.28,0.794,1.728,2.008,0.42,0.467,0.187,0.28,0.093,0,0.794,0.327,0.374,0.654,1.214,1.821,1.308,0.42,0,0.234,0.234,0.093,0.187,0.56,0.654,0.514,0.42,0.56,0.187,0.514,0.14,0.514,0.28,0.093,0.28,0.327,0.327,5.184,34.511,9.667,1.354,1.635,4.904,5.791,4.296,9.06,6.164,3.456,5.137,5.651,2.942,4.063,8.686,7.799,14.43,40.442,17.186,16.392,25.265,21.342,15.645,27.366,29.561,11.161,18.54,12.843,19.1,20.688,17.886,18.68,20.968,23.817,16.625,20.081,29.655,17.419,21.856,18.306,32.877,18.073,18.727,15.271,20.501,20.501,22.93,18.68,15.738,21.435,23.443,26.105,22.089,22.743,23.163,23.49,25.452,41.003,29.328,24.331,31.242,30.308,32.83,37.267,32.41,25.265,35.585,35.492,30.589,32.13,30.028,28.767,30.355],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.047,0.047,0.234,0.421,0.795,1.262,2.009,2.336,2.709,3.316,3.316,3.363,3.69,3.457,2.71,2.57,2.15,1.87,1.87,1.87,2.15,2.056,2.29,2.477,2.804,2.944,2.85,2.943,2.149,2.056,1.822,1.822,2.055,1.915,2.569,2.476,2.289,2.522,2.989,3.409,4.39,4.343,4.53,6.071,8.499,10.087,12.562,14.804,14.711,15.832,15.552,15.038,13.311,12.05,10.649,8.547,8.313,8.173,8.033,7.332,7.378,7.051,6.444,6.724,5.977,5.183,5.837,6.258,6.025,7.38,6.493,6.54,6.68,7.194,8.454,9.388,15.272,20.642,23.444,23.491,25.779,25.405,23.444,23.397,20.081,15.318,12.656,11.955,10.041,10.461,10.087,8.686,5.978,3.876,3.876,3.503,3.269,2.709,3.036,3.643,3.409,3.269,3.082,2.895,4.016,4.016,4.016,3.129,3.876,4.063,4.156,4.483,2.942,3.035,2.755,2.802,2.008,1.868,1.962,2.195,4.67,18.12,20.642,25.358,26.619,27.459,27.552,27.692,25.357,11.627,9.946,5.276,3.922,4.062,3.829,3.596,3.409,3.689,3.782,3.736,3.736,2.896,2.896,2.382,2.476,2.15,1.356,1.356,1.356,1.169,1.215,1.355,2.242,2.428,2.195,2.008,2.195,2.382,2.429,2.616,1.448,1.028,1.728,2.755,2.848,2.941,3.081,3.314,3.828,3.921,3.314,2.52,3.034,4.482,6.21,6.07,5.93,6.024,6.164,5.977,5.183,4.249,2.568,2.522,2.709,3.736,5.277,6.492,6.912,6.118,6.025,5.885,5.324,4.297,3.036,2.382,2.476,2.896,3.222,3.175,3.596,3.549,3.503,3.129,2.708,2.568,2.335,2.475,7.145,41.516,50.669,51.743,53.285,57.909,63.373,67.342,71.218,42.871,36.66,40.443,44.459,42.497,40.769,45.159,43.898,52.164,89.15,101.199,111.94,134.263,151.542,158.501,178.068,193.199,163.918,165.272,161.723,155.558,154.904,157.145,148.459,139.866,152.522,150.607,157.845,168.4,165.131,169.101,168.727,180.636,174.892,176.994,172.184,163.03,166.112,167.186,167.56,150.421,153.783,158.499,169.333,170.921,173.163,173.396,178.206,187.92,207.488,213.373,211.599,220.752,228.317,237.984,251.761,258.719,242.981,249.238,260.399,259.746,261.568,258.766,250.266,248.211],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.007,0.007,0.033,0.06,0.113,0.18,0.287,0.327,0.387,0.447,0.447,0.427,0.46,0.387,0.34,0.307,0.22,0.24,0.234,0.167,0.274,0.294,0.3,0.354,0.354,0.394,0.374,0.28,0.287,0.26,0.207,0.213,0.227,0.26,0.32,0.327,0.32,0.36,0.374,0.407,0.58,0.514,0.614,0.867,1.174,1.374,1.681,1.895,2.061,2.128,1.968,1.801,1.635,1.301,1.087,1.014,0.987,1.074,0.967,0.947,0.967,0.787,0.787,0.787,0.674,0.667,0.754,0.787,0.821,0.921,0.754,0.867,0.887,0.861,1.067,1.268,1.948,2.942,3.169,3.269,3.543,3.282,3.076,2.428,1.868,1.781,1.621,1.294,1.348,1.428,1.174,0.801,0.534,0.527,0.467,0.36,0.32,0.374,0.367,0.467,0.467,0.44,0.407,0.307,0.507,0.514,0.42,0.427,0.554,0.58,0.587,0.374,0.354,0.374,0.367,0.274,0.26,0.254,0.227,0.267,0.587,2.569,2.915,3.609,3.796,3.896,3.849,3.556,1.621,1.281,0.714,0.56,0.434,0.54,0.44,0.447,0.447,0.387,0.5,0.534,0.387,0.407,0.34,0.3,0.274,0.153,0.16,0.193,0.167,0.16,0.173,0.14,0.287,0.307,0.28,0.287,0.314,0.327,0.327,0.193,0.147,0.14,0.24,0.367,0.38,0.4,0.394,0.46,0.547,0.454,0.32,0.32,0.394,0.6,0.807,0.781,0.834,0.841,0.841,0.741,0.494,0.32,0.307,0.294,0.36,0.494,0.741,0.927,0.874,0.827,0.807,0.747,0.587,0.354,0.247,0.28,0.354,0.38,0.427,0.44,0.487,0.427,0.407,0.374,0.327,0.287,0.307,0.28,1.001,5.858,7.198,7.379,7.572,8.226,9.006,8.88,5.244,4.743,5.044,5.544,5.651,5.244,5.21,5.157,5.391,6.958,12.002,13.65,15.571,18.6,20.408,21.529,23.377,21.822,20.962,21.269,19.494,19.174,19.894,18.54,16.985,18.386,19.14,19.681,19.821,21.102,21.035,21.489,21.108,22.403,22.609,22.416,20.361,20.802,20.608,21.269,19.24,18.907,19.294,20.461,21.262,21.489,21.462,22.102,23.21,23.784,26.292,26.752,27.073,28.287,29.308,30.642,32.33,31.102,30.522,32.13,32.737,32.777,32.677,31.643,31.122,31.849]},{"iso":"SDN","continent":"Africa","population":43849269,"name":"Sudan","population_density":23.258,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,5,6,6,7,7,8,10,10,12,12,14,14,15,17,19,19,29,32,32,32,33,66,66,107,107,140,174,174,213,237,275,318,375,442,533,592,592,678,778,852,930,1111,1164,1365,1526,1661,1818,1818,1964,2289,2289,2591,2728,2728,3138,3378,3628,3820,3976,3976,4346,4346,4521,4800,5026,5173,5310,5499,5714,5865,6081,6081,6242,6427,6582,6730,6879,7007,7220,7435,7740,8020,8020,8316,8580,8580,8698,8889,8889,8984,9257,9257,9257,9257,9257,9573,9573,9663,9767,9767,9894,9997,10084,10158,10204,10250,10250,10316,10417,10527,10527,10527,10682,10992,10992,10992,11237,11237,11302,11385,11385,11424,11496,11496,11496,11644,11738,11738,11738,11780,11780,11780,11894,11894,11956,11956,12033,12033,12115,12162,12211,12314,12410,12485,12546,12582,12623,12682,12836,12903,12974,12974,13045,13082,13189,13189,13189,13189,13189,13189,13189,13407,13437,13437,13437,13437,13437,13470,13470,13516,13535,13535,13535,13535,13535,13535,13555,13555,13578,13578,13592,13592,13606,13606,13606,13640,13640,13653,13653,13653,13653,13653,13653,13668,13670,13670,13670,13673,13691,13691,13691,13691,13691,13691,13697,13724,13724,13724,13724,13724,13742,13742,13747,13747,13765,13772,13804,13804,13819,13866,13905,13943,13943,13943,13943,14090,14155,14155,14346,14401,14401,14401,14626,14728,15047,15047,15299,15530,15839,16052,16052,16431,16649,16864,16864,17404,17404,17810,18045,18254,18535,18535,19196,19468,19747,19747,20084,20468,20844,21147,21386,21591,21864,22082,22265],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.023,0.023,0.023,0.023,0.023,0.046,0.046,0.046,0.046,0.046,0.046,0.068,0.068,0.068,0.068,0.114,0.137,0.137,0.16,0.16,0.182,0.228,0.228,0.274,0.274,0.319,0.319,0.342,0.388,0.433,0.433,0.661,0.73,0.73,0.73,0.753,1.505,1.505,2.44,2.44,3.193,3.968,3.968,4.858,5.405,6.271,7.252,8.552,10.08,12.155,13.501,13.501,15.462,17.743,19.43,21.209,25.337,26.545,31.129,34.801,37.88,41.46,41.46,44.79,52.202,52.202,59.089,62.213,62.213,71.563,77.037,82.738,87.117,90.674,90.674,99.112,99.112,103.103,109.466,114.62,117.972,121.097,125.407,130.31,133.754,138.68,138.68,142.351,146.57,150.105,153.48,156.878,159.797,164.655,169.558,176.514,182.899,182.899,189.65,195.67,195.67,198.361,202.717,202.717,204.884,211.11,211.11,211.11,211.11,211.11,218.316,218.316,220.369,222.74,222.74,225.637,227.986,229.97,231.657,232.706,233.755,233.755,235.26,237.564,240.072,240.072,240.072,243.607,250.677,250.677,250.677,256.264,256.264,257.747,259.639,259.639,260.529,262.171,262.171,262.171,265.546,267.69,267.69,267.69,268.648,268.648,268.648,271.247,271.247,272.661,272.661,274.417,274.417,276.287,277.359,278.477,280.826,283.015,284.725,286.117,286.938,287.873,289.218,292.73,294.258,295.877,295.877,297.496,298.34,300.78,300.78,300.78,300.78,300.78,300.78,300.78,305.752,306.436,306.436,306.436,306.436,306.436,307.189,307.189,308.238,308.671,308.671,308.671,308.671,308.671,308.671,309.127,309.127,309.652,309.652,309.971,309.971,310.29,310.29,310.29,311.066,311.066,311.362,311.362,311.362,311.362,311.362,311.362,311.704,311.75,311.75,311.75,311.818,312.229,312.229,312.229,312.229,312.229,312.229,312.366,312.981,312.981,312.981,312.981,312.981,313.392,313.392,313.506,313.506,313.916,314.076,314.806,314.806,315.148,316.22,317.109,317.976,317.976,317.976,317.976,321.328,322.81,322.81,327.166,328.421,328.421,328.421,333.552,335.878,343.153,343.153,348.9,354.168,361.215,366.072,366.072,374.715,379.687,384.59,384.59,396.905,396.905,406.164,411.523,416.29,422.698,422.698,437.772,443.975,450.338,450.338,458.024,466.781,475.356,482.266,487.716,492.391,498.617,503.589,507.762],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.023,0,0,0,0,0,0.023,0,0,0,0.046,0.023,0,0.023,0,0.023,0.046,0,0.046,0,0.046,0,0.023,0.046,0.046,0,0.228,0.068,0,0,0.023,0.753,0,0.935,0,0.753,0.775,0,0.889,0.547,0.867,0.981,1.3,1.528,2.075,1.346,0,1.961,2.281,1.688,1.779,4.128,1.209,4.584,3.672,3.079,3.58,0,3.33,7.412,0,6.887,3.124,0,9.35,5.473,5.701,4.379,3.558,0,8.438,0,3.991,6.363,5.154,3.352,3.124,4.31,4.903,3.444,4.926,0,3.672,4.219,3.535,3.375,3.398,2.919,4.858,4.903,6.956,6.386,0,6.75,6.021,0,2.691,4.356,0,2.167,6.226,0,0,0,0,7.207,0,2.052,2.372,0,2.896,2.349,1.984,1.688,1.049,1.049,0,1.505,2.303,2.509,0,0,3.535,7.07,0,0,5.587,0,1.482,1.893,0,0.889,1.642,0,0,3.375,2.144,0,0,0.958,0,0,2.6,0,1.414,0,1.756,0,1.87,1.072,1.117,2.349,2.189,1.71,1.391,0.821,0.935,1.346,3.512,1.528,1.619,0,1.619,0.844,2.44,0,0,0,0,0,0,4.972,0.684,0,0,0,0,0.753,0,1.049,0.433,0,0,0,0,0,0.456,0,0.525,0,0.319,0,0.319,0,0,0.775,0,0.296,0,0,0,0,0,0.342,0.046,0,0,0.068,0.41,0,0,0,0,0,0.137,0.616,0,0,0,0,0.41,0,0.114,0,0.41,0.16,0.73,0,0.342,1.072,0.889,0.867,0,0,0,3.352,1.482,0,4.356,1.254,0,0,5.131,2.326,7.275,0,5.747,5.268,7.047,4.858,0,8.643,4.972,4.903,0,12.315,0,9.259,5.359,4.766,6.408,0,15.074,6.203,6.363,0,7.685,8.757,8.575,6.91,5.45,4.675,6.226,4.972,4.173],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.023,0.023,0.023,0.023,0.023,0.023,0.046,0.046,0.023,0.023,0.069,0.092,0.092,0.115,0.092,0.115,0.161,0.161,0.161,0.138,0.184,0.161,0.184,0.207,0.207,0.207,0.389,0.457,0.411,0.411,0.411,1.118,1.072,2.007,1.779,2.464,3.239,3.239,4.105,3.899,4.766,4.812,6.112,6.887,8.187,9.533,8.644,10.058,11.472,12.179,12.658,15.258,14.392,17.63,21.302,22.42,23.719,22.031,23.582,26.866,25.657,27.96,27.412,24.333,30.103,35.576,37.947,34.914,38.472,31.585,36.899,36.899,31.54,32.43,31.883,30.856,30.422,34.732,31.197,34.641,35.576,29.213,27.731,28.598,29.009,28.074,26.569,26.044,25.976,30.879,34.163,36.33,32.795,36.17,38.793,35.874,33.707,33.16,26.204,21.985,28.211,21.461,15.44,15.44,12.749,15.6,15.6,15.485,11.631,11.631,14.527,16.876,18.86,13.341,14.39,13.387,11.015,12.52,11.927,12.087,10.103,8.415,10.901,16.922,16.922,15.417,18.701,16.192,17.674,19.567,16.032,9.851,11.493,11.493,5.906,9.281,9.943,8.05,8.05,8.119,6.477,6.477,9.077,5.702,4.972,4.972,6.728,5.77,7.64,8.712,7.229,9.578,10.353,12.063,11.698,12.519,11.584,11.858,14.253,13.432,12.862,11.152,11.38,11.403,12.908,11.562,8.05,6.522,4.903,4.903,3.284,7.412,5.656,5.656,5.656,5.656,5.656,6.409,6.409,2.486,2.235,2.235,2.235,2.235,2.235,1.482,1.938,0.889,0.981,0.981,1.3,1.3,1.619,1.619,1.163,1.938,1.413,1.709,1.39,1.39,1.071,1.071,1.071,0.638,0.684,0.388,0.388,0.456,0.866,0.866,0.866,0.524,0.478,0.478,0.615,1.163,0.753,0.753,0.753,0.753,1.163,1.163,1.14,0.524,0.934,1.094,1.824,1.824,1.756,2.828,3.603,4.47,4.06,3.9,3.17,6.522,7.662,6.59,10.057,10.444,10.444,10.444,15.575,14.549,20.342,20.342,21.733,25.747,32.794,37.652,32.521,38.838,36.535,41.438,35.691,42.738,35.691,40.092,45.451,41.574,43.01,38.107,53.181,47.069,53.432,44.173,46.499,50.49,52.657,59.567,49.943,48.415,48.278,53.25,49.738],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.003,0.003,0.003,0.003,0.003,0.007,0.003,0.003,0.003,0.01,0.013,0.013,0.013,0.013,0.016,0.023,0.016,0.02,0.02,0.023,0.023,0.023,0.023,0.029,0.023,0.055,0.059,0.059,0.055,0.052,0.153,0.153,0.254,0.244,0.352,0.463,0.459,0.479,0.557,0.547,0.687,0.766,0.873,1.17,1.235,1.157,1.313,1.499,1.554,1.59,1.883,1.864,2.518,2.763,2.877,3.147,2.893,2.779,3.665,3.01,3.47,3.476,2.965,4.3,4.607,4.362,4.988,4.512,4.066,5.271,3.936,3.724,3.818,3.929,3.9,4.346,3.756,4.457,4.379,4.173,3.437,3.483,3.639,3.528,3.31,3.304,3.017,3.711,3.887,4.278,4.685,4.203,4.682,5.125,4.431,4.115,3.743,2.831,3.141,3.066,2.206,2.206,1.821,1.199,2.228,1.919,1.323,1.662,1.662,2.075,2.411,1.665,1.906,1.763,1.574,1.574,1.375,1.368,1.443,1.202,1.052,1.407,2.417,2.202,1.873,2.313,2.313,2.525,2.29,1.28,1.407,1.642,0.844,0.844,1.114,1.15,1.15,1.023,0.925,0.925,0.925,0.814,0.508,0.71,0.71,0.824,0.824,1.091,0.873,1.033,1.166,1.479,1.473,1.671,1.521,1.502,1.534,1.701,1.606,1.593,1.394,1.508,1.495,1.652,1.15,0.932,0.7,0.7,0.469,0.349,0.71,0.808,0.808,0.808,0.808,0.808,0.915,0.205,0.257,0.319,0.319,0.319,0.319,0.212,0.212,0.127,0.065,0.14,0.14,0.186,0.186,0.231,0.166,0.166,0.202,0.202,0.199,0.199,0.153,0.153,0.153,0.042,0.091,0.055,0.055,0.055,0.065,0.124,0.124,0.075,0.068,0.068,0.068,0.078,0.108,0.108,0.108,0.108,0.108,0.166,0.147,0.075,0.075,0.134,0.156,0.261,0.202,0.251,0.388,0.515,0.58,0.557,0.453,0.453,0.883,0.942,0.814,1.313,1.492,1.492,1.492,1.746,1.867,2.906,2.284,2.926,3.678,4.685,4.646,4.313,4.509,5.219,5.099,4.346,5.099,4.405,5.727,5.258,5.229,5.444,5.444,5.838,6.724,6.311,5.545,5.962,6.298,7.523,6.356,6.249,6.008,6.897,6.509,5.854]},{"iso":"SUR","continent":"South America","population":586634,"name":"Suriname","population_density":3.612,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,4,4,5,5,7,8,8,8,8,8,8,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,12,12,12,14,23,44,54,74,82,90,100,122,128,137,144,168,187,196,208,229,236,261,277,293,303,314,319,319,357,373,389,467,490,501,515,535,547,561,565,594,614,634,665,694,726,741,741,780,801,837,904,943,1001,1029,1079,1131,1176,1234,1305,1381,1439,1483,1510,1607,1607,1650,1760,1849,1893,1981,2050,2096,2203,2306,2391,2489,2559,2653,2761,2838,2961,3016,3077,3216,3295,3366,3460,3569,3607,3632,3698,3724,3793,3848,3954,4009,4034,4089,4149,4215,4252,4320,4346,4360,4419,4447,4477,4529,4579,4582,4611,4625,4645,4671,4691,4709,4723,4740,4759,4779,4789,4817,4831,4835,4836,4863,4877,4891,4899,4924,4941,4954,4965,4979,5004,5018,5035,5051,5058,5072,5083,5094,5113,5123,5130,5133,5144,5150,5154,5155,5166,5170,5180,5187,5192,5197,5201,5203,5210,5212,5218,5220,5225,5227,5234,5239,5241,5245,5254,5261,5268,5274,5274,5275,5278,5282,5284,5289,5295,5296,5297,5300,5305,5307,5311,5312,5312,5312,5319,5320,5322,5322,5324,5324,5325,5326,5333,5337,5339,5340,5353,5359,5381,5401,5428],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.705,1.705,1.705,1.705,1.705,1.705,6.819,6.819,8.523,8.523,11.932,13.637,13.637,13.637,13.637,13.637,13.637,15.342,17.046,17.046,17.046,17.046,17.046,17.046,17.046,17.046,17.046,17.046,17.046,17.046,17.046,17.046,17.046,17.046,17.046,17.046,17.046,17.046,17.046,17.046,17.046,17.046,17.046,17.046,17.046,17.046,17.046,17.046,17.046,17.046,17.046,17.046,17.046,17.046,17.046,17.046,17.046,17.046,17.046,17.046,17.046,17.046,17.046,17.046,17.046,18.751,18.751,18.751,18.751,18.751,18.751,18.751,18.751,18.751,20.456,20.456,20.456,23.865,39.207,75.004,92.051,126.143,139.781,153.418,170.464,207.966,218.194,233.536,245.468,286.38,318.768,334.11,354.565,390.363,402.295,444.911,472.185,499.46,516.506,535.257,543.78,543.78,608.557,635.831,663.105,796.067,835.274,854.025,877.89,911.983,932.438,956.303,963.122,1012.556,1046.649,1080.742,1133.586,1183.02,1237.569,1263.139,1263.139,1329.619,1365.417,1426.784,1540.995,1607.476,1706.345,1754.075,1839.307,1927.948,2004.657,2103.526,2224.556,2354.108,2452.977,2527.982,2574.007,2739.357,2739.357,2812.657,3000.167,3151.88,3226.884,3376.893,3494.513,3572.926,3755.323,3930.901,4075.795,4242.85,4362.175,4522.411,4706.512,4837.769,5047.44,5141.195,5245.178,5482.123,5616.79,5737.819,5898.056,6083.861,6148.638,6191.254,6303.76,6348.081,6465.701,6559.456,6740.148,6833.903,6876.519,6970.274,7072.553,7185.059,7248.131,7364.046,7408.367,7432.232,7532.806,7580.536,7631.675,7720.316,7805.548,7810.662,7860.097,7883.962,7918.055,7962.375,7996.468,8027.152,8051.016,8079.995,8112.384,8146.476,8163.523,8211.253,8235.118,8241.936,8243.641,8289.666,8313.531,8337.396,8351.033,8393.649,8422.628,8444.788,8463.539,8487.404,8530.02,8553.885,8582.864,8610.139,8622.071,8645.936,8664.687,8683.438,8715.826,8732.873,8744.805,8749.919,8768.67,8778.898,8785.716,8787.421,8806.172,8812.991,8830.037,8841.97,8850.493,8859.016,8865.835,8869.244,8881.176,8884.586,8894.813,8898.223,8906.746,8910.155,8922.088,8930.611,8934.02,8940.839,8956.181,8968.113,8980.045,8990.273,8990.273,8991.978,8997.092,9003.91,9007.32,9015.843,9026.071,9027.775,9029.48,9034.594,9043.117,9046.526,9053.345,9055.05,9055.05,9055.05,9066.982,9068.687,9072.096,9072.096,9075.505,9075.505,9077.21,9078.915,9090.847,9097.666,9101.075,9102.78,9124.94,9135.168,9172.67,9206.763,9252.788],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5.114,0,1.705,0,3.409,1.705,0,0,0,0,0,1.705,1.705,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.705,0,0,0,0,0,0,0,0,1.705,0,0,3.409,15.342,35.797,17.046,34.093,13.637,13.637,17.046,37.502,10.228,15.342,11.932,40.911,32.388,15.342,20.456,35.797,11.932,42.616,27.274,27.274,17.046,18.751,8.523,0,64.776,27.274,27.274,132.962,39.207,18.751,23.865,34.093,20.456,23.865,6.819,49.435,34.093,34.093,52.844,49.435,54.548,25.57,0,66.481,35.797,61.367,114.211,66.481,98.869,47.73,85.232,88.641,76.709,98.869,121.029,129.553,98.869,75.004,46.025,165.35,0,73.3,187.51,151.713,75.004,150.008,117.62,78.413,182.397,175.578,144.894,167.055,119.325,160.236,184.101,131.257,209.671,93.755,103.983,236.945,134.667,121.029,160.236,185.806,64.776,42.616,112.506,44.321,117.62,93.755,180.692,93.755,42.616,93.755,102.278,112.506,63.072,115.916,44.321,23.865,100.574,47.73,51.139,88.641,85.232,5.114,49.435,23.865,34.093,44.321,34.093,30.684,23.865,28.979,32.388,34.093,17.046,47.73,23.865,6.819,1.705,46.025,23.865,23.865,13.637,42.616,28.979,22.16,18.751,23.865,42.616,23.865,28.979,27.274,11.932,23.865,18.751,18.751,32.388,17.046,11.932,5.114,18.751,10.228,6.819,1.705,18.751,6.819,17.046,11.932,8.523,8.523,6.819,3.409,11.932,3.409,10.228,3.409,8.523,3.409,11.932,8.523,3.409,6.819,15.342,11.932,11.932,10.228,0,1.705,5.114,6.819,3.409,8.523,10.228,1.705,1.705,5.114,8.523,3.409,6.819,1.705,0,0,11.932,1.705,3.409,0,3.409,0,1.705,1.705,11.932,6.819,3.409,1.705,22.16,10.228,37.502,34.093,46.025],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5.114,5.114,6.819,6.819,10.228,11.933,11.933,11.933,6.819,6.819,5.114,6.819,5.115,3.41,3.41,3.41,3.41,3.41,3.41,1.705,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.705,1.705,1.705,1.705,1.705,1.705,1.705,1.705,0,1.705,1.705,1.705,5.114,20.456,56.253,73.299,107.392,119.324,132.961,150.007,184.1,178.986,158.531,153.417,160.235,178.986,180.691,184.101,182.396,184.1,211.374,226.716,213.079,197.737,201.146,189.213,153.416,206.26,190.918,190.918,296.606,318.767,318.767,334.109,368.202,323.882,320.473,300.018,216.491,211.377,226.719,255.698,271.04,305.132,306.837,300.018,317.064,318.768,346.042,407.409,424.455,468.776,490.936,576.168,598.328,639.24,676.742,683.56,746.632,746.632,773.906,734.699,811.408,734.699,709.13,775.611,797.771,773.906,848.91,920.505,833.568,1015.965,1118.243,1075.627,1090.969,1135.29,1145.518,1211.999,1264.843,1292.117,1210.294,1169.383,1239.273,1254.615,1215.408,1191.543,1246.092,1101.197,1050.058,1058.581,865.957,848.91,821.636,842.092,750.041,727.881,779.02,768.792,836.977,782.429,804.59,668.219,598.329,656.287,610.262,559.123,535.258,557.418,446.616,451.73,451.73,385.249,381.84,364.794,306.837,245.47,269.335,252.288,262.516,245.469,248.878,238.65,214.785,192.625,209.671,201.148,190.92,187.511,182.397,187.511,202.852,219.898,197.738,216.489,216.489,231.831,216.489,199.442,201.147,201.147,196.033,185.805,178.986,161.939,139.779,146.598,132.961,121.029,103.983,90.346,80.119,85.233,92.051,81.823,80.118,80.118,81.822,75.003,71.593,64.775,56.252,56.252,51.138,56.251,61.365,52.842,56.252,61.366,69.889,73.298,80.117,68.185,61.367,63.072,63.072,51.139,47.73,46.026,37.503,39.208,42.617,46.026,42.616,46.026,39.208,28.98,27.275,37.502,34.093,28.979,25.57,22.16,20.455,22.16,23.865,23.865,28.979,28.979,30.684,49.435,59.663,95.46,127.848,161.941],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.731,0.731,0.974,0.974,1.461,1.705,1.705,0.974,0.974,0.731,0.731,0.487,0.487,0.487,0.487,0.487,0.487,0.487,0.244,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.244,0.244,0.244,0.244,0.244,0.244,0.244,0,0,0.244,0.244,0.244,0.731,2.922,8.036,10.471,15.098,17.046,18.995,20.943,24.108,20.456,20.212,17.046,20.943,23.621,23.378,20.943,24.596,24.108,28.492,26.544,25.813,26.057,25.813,21.917,20.212,23.378,23.378,23.378,39.937,42.86,44.321,47.73,43.347,42.372,41.885,23.865,25.326,27.518,28.979,31.658,35.797,40.181,42.86,35.797,40.424,40.668,41.885,51.139,52.844,63.315,70.134,72.812,80.362,82.553,80.362,88.154,92.538,99.843,98.382,92.294,104.957,90.833,84.014,92.294,99.843,99.843,114.698,107.879,119.081,134.667,132.962,131.988,145.138,140.755,146.843,161.941,154.635,159.506,152.2,143.19,159.993,156.34,147.33,151.469,148.06,143.92,135.154,117.377,104.47,103.983,94.486,93.755,97.895,97.895,95.216,103.496,102.765,98.382,89.128,82.066,79.388,80.362,72.569,63.802,67.455,63.072,57.471,61.124,50.165,48.217,47.243,39.45,31.658,34.336,31.414,32.632,32.632,28.735,30.684,29.709,27.274,23.378,25.326,23.865,24.839,19.969,22.647,25.813,28.735,24.839,24.839,27.518,28.979,27.031,26.787,25.326,26.057,25.326,21.917,23.134,21.43,19.238,18.264,17.533,16.316,14.611,10.228,10.471,9.741,11.445,10.471,10.228,10.471,11.202,9.01,9.741,7.793,7.549,6.819,6.819,6.332,7.549,7.062,7.062,6.575,8.28,8.767,9.984,9.741,8.523,8.28,8.036,6.819,5.601,5.114,5.114,5.357,5.357,5.357,5.601,5.601,5.357,4.14,3.896,3.653,4.627,3.653,3.653,2.679,2.922,2.922,3.166,1.705,3.166,3.653,4.14,3.896,7.062,8.28,13.394,16.559,22.16]},{"iso":"SWE","continent":"Europe","population":10099270,"name":"Sweden","population_density":24.718,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,3,11,14,14,19,32,62,87,146,179,225,326,424,620,771,923,994,1063,1146,1265,1410,1553,1733,1868,1986,2168,2398,2712,2998,3363,3663,3943,4359,4834,5320,5874,6475,6832,7172,7561,8299,8954,9599,10053,10448,10912,11349,11828,12432,13055,13743,14275,14663,15124,15831,16553,17311,18090,18563,18863,19426,20168,20966,21601,22133,22432,22693,23169,23826,24572,25359,26059,26568,26846,27301,28055,28755,29415,30103,30461,30720,31151,31818,32626,33236,33768,34171,34381,34871,35617,36417,37191,37964,38396,38661,39309,40210,41256,42295,43441,44224,44686,45363,46299,47736,49030,50367,51409,51827,52511,53729,55186,56682,57895,58597,58918,59718,61030,62728,64009,65212,65972,66392,67119,67924,68608,69297,69996,70366,70681,70932,71210,71747,72082,72459,72773,72879,73049,73364,73663,73936,74235,74435,74545,74676,74902,75199,75419,75681,75819,75861,75932,76215,76516,76818,77076,77379,77417,77582,77916,78341,78719,79099,79359,79432,79628,80045,80489,80851,81195,81421,81484,81658,81972,82323,82656,82954,83114,83171,83353,83578,83824,83958,83958,83958,83958,84379,84521,84532,84729,84985,84985,84985,85558,85707,85880,86194,86505,86505,86505,86505,87345,87575,87885,88237,88237,88237,88237,89436,89756,90289,90923,90923,90923,90923,92466,92863,93615,94283,94283,94283,94283,96145,96677,97532,98451,98451,98451,98451,100654,101332,102407,103200,103200,103200,103200,106380,107355,108969,110594,110594,110594,110594,115785,117913,121167,124355,124355,124355,124355,134532,137730,141764,146461,146461,146461,146461,162240,166707,171365,177355,177355,177355,177355,192439,196446,201055,208295,208295,208295,208295,225560,230514,236355,243129,243129,243129,243129,260758,266158,272643,278912,278912,278912,278912,297732,304793,312728,320098,320098,320098,320098,341029,348585,357466],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.099,0.099,0.099,0.099,0.099,0.099,0.099,0.099,0.099,0.099,0.099,0.099,0.099,0.099,0.099,0.099,0.099,0.099,0.099,0.099,0.099,0.099,0.099,0.099,0.099,0.198,0.297,1.089,1.386,1.386,1.881,3.169,6.139,8.614,14.456,17.724,22.279,32.28,41.983,61.391,76.342,91.393,98.423,105.255,113.474,125.257,139.614,153.773,171.597,184.964,196.648,214.669,237.443,268.534,296.853,332.994,362.699,390.424,431.615,478.648,526.771,581.626,641.135,676.485,710.15,748.668,821.743,886.599,950.465,995.418,1034.53,1080.474,1123.745,1171.174,1230.98,1292.668,1360.791,1413.468,1451.887,1497.534,1567.539,1639.029,1714.084,1791.219,1838.054,1867.759,1923.505,1996.976,2075.992,2138.867,2191.545,2221.151,2246.994,2294.126,2359.18,2433.047,2510.974,2580.286,2630.685,2658.212,2703.265,2777.924,2847.235,2912.587,2980.71,3016.159,3041.804,3084.48,3150.525,3230.531,3290.931,3343.608,3383.512,3404.305,3452.824,3526.691,3605.904,3682.543,3759.084,3801.859,3828.098,3892.262,3981.476,4085.048,4187.926,4301.4,4378.93,4424.676,4491.711,4584.391,4726.678,4854.806,4987.192,5090.368,5131.757,5199.485,5320.087,5464.355,5612.485,5732.593,5802.103,5833.887,5913.101,6043.011,6211.142,6337.983,6457.1,6532.353,6573.94,6645.926,6725.635,6793.362,6861.585,6930.798,6967.434,6998.625,7023.478,7051.005,7104.177,7137.348,7174.677,7205.768,7216.264,7233.097,7264.287,7293.894,7320.925,7350.531,7370.335,7381.227,7394.198,7416.576,7445.984,7467.767,7493.71,7507.374,7511.533,7518.563,7546.585,7576.389,7606.292,7631.839,7661.841,7665.604,7681.941,7715.013,7757.095,7794.524,7832.15,7857.895,7865.123,7884.53,7925.82,7969.784,8005.628,8039.69,8062.068,8068.306,8085.535,8116.626,8151.381,8184.354,8213.861,8229.704,8235.348,8253.369,8275.648,8300.006,8313.274,8313.274,8313.274,8313.274,8354.96,8369.021,8370.11,8389.616,8414.965,8414.965,8414.965,8471.701,8486.455,8503.585,8534.676,8565.471,8565.471,8565.471,8565.471,8648.645,8671.419,8702.114,8736.968,8736.968,8736.968,8736.968,8855.69,8887.375,8940.151,9002.928,9002.928,9002.928,9002.928,9155.711,9195.021,9269.482,9335.625,9335.625,9335.625,9335.625,9519.995,9572.672,9657.332,9748.328,9748.328,9748.328,9748.328,9966.463,10033.596,10140.04,10218.56,10218.56,10218.56,10218.56,10533.435,10629.976,10789.79,10950.692,10950.692,10950.692,10950.692,11464.69,11675.398,11997.6,12313.266,12313.266,12313.266,12313.266,13320.963,13637.619,14037.054,14502.137,14502.137,14502.137,14502.137,16064.527,16506.837,16968.058,17561.17,17561.17,17561.17,17561.17,19054.744,19451.505,19907.875,20624.758,20624.758,20624.758,20624.758,22334.288,22824.818,23403.177,24073.918,24073.918,24073.918,24073.918,25819.49,26354.182,26996.308,27617.046,27617.046,27617.046,27617.046,29480.547,30179.706,30965.406,31695.162,31695.162,31695.162,31695.162,33767.688,34515.861,35395.232],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.099,0.099,0.792,0.297,0,0.495,1.287,2.971,2.475,5.842,3.268,4.555,10.001,9.704,19.407,14.952,15.051,7.03,6.832,8.218,11.783,14.357,14.159,17.823,13.367,11.684,18.021,22.774,31.091,28.319,36.141,29.705,27.725,41.191,47.033,48.122,54.855,59.509,35.349,33.666,38.518,73.075,64.856,63.866,44.954,39.112,45.944,43.27,47.429,59.806,61.688,68.124,52.677,38.419,45.647,70.005,71.49,75.055,77.134,46.835,29.705,55.747,73.471,79.016,62.876,52.677,29.606,25.843,47.132,65.054,73.867,77.926,69.312,50.4,27.527,45.053,74.659,69.312,65.351,68.124,35.448,25.645,42.676,66.044,80.006,60.4,52.677,39.904,20.794,48.518,73.867,79.214,76.639,76.54,42.775,26.24,64.163,89.214,103.572,102.879,113.474,77.53,45.746,67.035,92.68,142.288,128.128,132.386,103.176,41.389,67.728,120.603,144.268,148.13,120.108,69.51,31.784,79.214,129.91,168.131,126.841,119.118,75.253,41.587,71.985,79.709,67.728,68.223,69.213,36.636,31.19,24.853,27.527,53.172,33.171,37.329,31.091,10.496,16.833,31.19,29.606,27.032,29.606,19.803,10.892,12.971,22.378,29.408,21.784,25.942,13.664,4.159,7.03,28.022,29.804,29.903,25.546,30.002,3.763,16.338,33.072,42.082,37.428,37.626,25.744,7.228,19.407,41.29,43.964,35.844,34.062,22.378,6.238,17.229,31.091,34.755,32.973,29.507,15.843,5.644,18.021,22.279,24.358,13.268,0,0,0,41.686,14.06,1.089,19.506,25.348,0,0,56.737,14.754,17.13,31.091,30.794,0,0,0,83.174,22.774,30.695,34.854,0,0,0,118.721,31.685,52.776,62.777,0,0,0,152.783,39.31,74.461,66.143,0,0,0,184.37,52.677,84.66,90.997,0,0,0,218.135,67.134,106.443,78.521,0,0,0,314.874,96.542,159.814,160.903,0,0,0,513.998,210.708,322.202,315.666,0,0,0,1007.697,316.657,399.435,465.083,0,0,0,1562.39,442.309,461.221,593.112,0,0,0,1493.573,396.761,456.37,716.883,0,0,0,1709.53,490.531,578.359,670.742,0,0,0,1745.572,534.692,642.126,620.738,0,0,0,1863.501,699.159,785.7,729.756,0,0,0,2072.526,748.173,879.37],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.099,0.198,0.99,1.287,1.287,1.782,3.069,6.04,8.416,14.159,16.635,20.893,30.894,40.103,58.223,70.204,82.78,83.968,87.532,91.195,92.977,97.63,92.382,95.253,93.569,98.223,109.412,123.968,143.276,157.238,179.22,191.102,205.46,234.967,263.979,289.327,313.091,344.281,343.489,347.45,358.243,390.127,407.95,423.694,413.793,393.396,403.991,413.595,422.506,409.237,406.069,410.327,418.05,417.357,417.06,443.795,467.856,483.105,498.551,477.262,454.29,471.618,499.442,508.453,499.839,477.461,429.933,408.941,426.368,435.675,436.071,434.981,441.417,439.14,437.061,456.271,483.798,488.056,479.54,469.738,435.874,411.119,426.268,447.259,452.606,443.694,431.02,402.8,388.146,411.019,442.21,455.38,452.013,468.153,458.251,444.587,487.956,528.652,558.357,582.022,618.857,619.847,622.818,663.613,692.13,745.204,769.76,799.267,788.969,752.828,774.81,828.378,879.966,885.808,877.788,814.912,743.52,781.345,843.527,891.055,873.628,844.616,799.761,771.838,812.039,812.534,750.352,650.444,592.816,510.334,466.271,449.537,405.079,378.542,343.985,313.091,274.969,248.829,234.472,240.809,242.888,216.748,213.183,195.657,175.458,177.933,183.478,181.696,173.874,172.784,156.842,141.198,137.336,152.387,159.813,160.308,164.07,168.13,158.229,170.408,196.45,210.51,218.134,225.857,226.055,203.281,218.925,243.877,254.769,248.531,245.165,229.917,210.411,220.412,232.096,225.561,214.57,208.233,190.014,173.28,185.063,190.113,183.38,161.893,128.92,99.413,83.57,119.612,115.651,94.461,89.609,101.689,101.689,101.689,158.426,131.494,134.564,164.566,175.854,150.506,150.506,150.506,176.943,184.963,198.528,202.291,171.497,171.497,171.497,290.218,238.729,268.731,300.813,265.959,265.959,265.959,418.742,339.331,382.107,395.474,332.697,332.697,332.697,517.067,416.961,462.311,478.847,412.704,412.704,412.704,630.839,513.603,567.369,561.23,470.233,470.233,470.233,785.107,663.514,756.194,810.654,732.133,732.133,732.133,1246.131,1141.965,1367.625,1523.477,1362.574,1362.574,1362.574,2370.271,2172.93,2361.657,2504.538,2188.872,2188.872,2188.872,3751.262,3185.874,3330.438,3524.115,3059.032,3059.032,3059.032,4552.605,3386.976,3401.037,3656.699,3063.587,3063.587,3063.587,4773.117,3770.075,3951.673,4166.045,3449.162,3449.162,3449.162,5194.734,4019.896,4171.491,4213.87,3543.128,3543.128,3543.128,5406.629,4360.216,4611.224,4698.854,4078.116,4078.116,4078.116,6150.642,5035.314,5215.525],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.014,0.028,0.141,0.184,0.184,0.255,0.439,0.849,1.188,1.91,2.334,2.985,4.343,5.545,7.893,9.675,10.991,11.528,11.854,11.599,11.896,11.175,11.062,11.458,12.363,13.056,14.456,16.027,18.417,20.44,23.057,25.391,27.682,30.992,34.458,36.891,40.682,44.02,44.826,45.675,45.293,49.013,51.404,52.691,50.612,51.149,52.903,53.582,49.919,49.197,48.886,52.196,54.134,53.059,53.398,56.624,58.293,60.202,61.49,60.655,59.41,60.853,61.348,62.423,60.683,57.189,54.728,54.176,52.946,51.743,51.008,53.158,55.534,58.505,58.745,58.448,59.82,59.17,57.373,57.204,55.068,54.799,54.459,53.229,54.756,54.049,51.843,52.479,51.786,52.62,53.738,53.625,55.945,59.354,59.764,60.542,62.777,64.969,68.449,72.198,77.474,82.439,85.225,85.636,86.131,91.662,95.269,97.97,101.634,101.012,101.111,105.1,105.382,108.24,106.486,101.676,100.304,101.945,103.275,106.684,103.643,103.501,104.322,105.722,104.689,97.518,83.174,74.8,67.671,62.154,60.669,53.936,46.481,44.402,39.395,34.84,34.048,31.091,29.946,30.469,27.102,26.225,25.122,23.509,23.566,23.014,21.755,21.727,20.977,20.454,19.577,18.615,17.766,18.573,18.629,19.789,19.733,22.067,22.01,23.34,24.061,25.815,26.89,28.616,28.008,28.503,28.941,30.115,30.384,30.158,29.649,29.168,29.026,28.715,27.258,25.942,25.532,24.882,23.948,23.863,23.976,22.717,21.232,18.417,14.202,11.939,11.132,14.513,13.339,10.015,10.906,14.527,14.527,14.527,16.677,16.776,19.068,20.723,21.501,21.501,21.501,13.396,23.17,23.976,23.92,24.5,24.5,24.5,24.5,29.578,30.851,34.005,37.994,37.994,37.994,37.994,42.86,43.949,47.047,47.528,47.528,47.528,47.528,52.041,53.95,55.407,58.958,58.958,58.958,58.958,63.781,65.846,68.958,67.176,67.176,67.176,67.176,80.996,85.197,92.821,104.59,104.59,104.59,104.59,133.036,149.346,172.544,194.653,194.653,194.653,194.653,265.182,280.317,291.351,312.696,312.696,312.696,312.696,391.938,409.888,418.715,437.005,437.005,437.005,437.005,427.174,420.667,419.974,437.655,437.655,437.655,437.655,468.506,481.902,499.329,492.737,492.737,492.737,492.737,497.886,504.195,513.304,506.161,506.161,506.161,506.161,523.008,546.503,567.014,582.588,582.588,582.588,582.588,612.449,619.451,632.832]},{"iso":"CHE","continent":"Europe","population":8654618,"name":"Switzerland","population_density":214.243,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,8,8,18,27,42,56,90,114,214,268,337,374,491,652,652,1139,1359,2200,2200,2700,3028,4075,5294,6575,7474,8795,9877,10897,11811,12928,14076,14829,15922,16605,17768,18827,19606,20505,21100,21657,22253,23280,24051,24551,25107,25415,25688,25936,26336,26732,27078,27404,27740,27944,28063,28268,28496,28677,28894,29061,29164,29264,29407,29586,29705,29817,29905,29981,30009,30060,30126,30207,30251,30305,30344,30380,30413,30463,30514,30572,30587,30597,30618,30658,30694,30707,30725,30736,30746,30761,30776,30796,30828,30845,30862,30871,30874,30893,30913,30936,30956,30965,30972,30988,31011,31044,31063,31094,31117,31131,31154,31187,31200,31235,31243,31292,31310,31332,31376,31428,31486,31555,31617,31652,31714,31851,31967,32101,32198,32268,32315,32369,32498,32586,32690,32817,32883,32946,33016,33148,33290,33382,33492,33591,33634,33742,33883,34000,34154,34302,34412,34477,34609,34802,35022,35232,35412,35550,35616,35746,35927,36108,36269,36451,36603,36708,36895,37169,37403,37671,37924,38124,38252,38449,38760,39026,39332,39627,39903,40060,40262,40645,41006,41346,41722,42014,42177,42393,42763,43127,43532,43957,44401,44592,44837,45306,45711,46239,46704,47179,47436,47751,48265,48795,49283,49283,49283,50378,50664,51101,51492,51864,51864,51864,52646,52871,53282,53832,54384,54384,54384,55932,56632,57709,58881,60368,60368,60368,64436,65881,68704,71317,74422,74422,74422,83159,86167,91763,97019,103653,103653,103653,121093,127042,135658,145044,154251,154251,154251,176177,182303,192376,202504,211913,211913,211913,229222,235202,243472,250396,257135,257135,257135,269974,274534,280648,285655,290601,290601,290601,300352,304593,309469,313978,318290,318290,318290,327072,330874,335660,340115,344497,344497,344497,354306,358568,363654,368695,373831,373831,373831,384557,388828,394453,399511],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.116,0.116,0.924,0.924,2.08,3.12,4.853,6.471,10.399,13.172,24.727,30.966,38.939,43.214,56.733,75.336,75.336,131.606,157.026,254.2,254.2,311.972,349.871,470.847,611.697,759.71,863.585,1016.22,1141.24,1259.097,1364.705,1493.769,1626.415,1713.421,1839.711,1918.629,2053.008,2175.37,2265.38,2369.255,2438.005,2502.363,2571.228,2689.893,2778.979,2836.751,2900.995,2936.583,2968.126,2996.782,3043,3088.756,3128.734,3166.402,3205.225,3228.796,3242.546,3266.233,3292.577,3313.491,3338.564,3357.861,3369.762,3381.316,3397.839,3418.522,3432.272,3445.213,3455.381,3464.162,3467.397,3473.29,3480.916,3490.275,3495.359,3501.599,3506.105,3510.265,3514.078,3519.855,3525.748,3532.449,3534.183,3535.338,3537.764,3542.386,3546.546,3548.048,3550.128,3551.399,3552.554,3554.287,3556.021,3558.332,3562.029,3563.993,3565.958,3566.997,3567.344,3569.539,3571.85,3574.508,3576.819,3577.859,3578.667,3580.516,3583.174,3586.987,3589.182,3592.764,3595.422,3597.039,3599.697,3603.51,3605.012,3609.056,3609.98,3615.642,3617.722,3620.264,3625.348,3631.356,3638.058,3646.03,3653.194,3657.238,3664.402,3680.232,3693.635,3709.118,3720.326,3728.414,3733.845,3740.084,3754.99,3765.158,3777.174,3791.848,3799.474,3806.754,3814.842,3830.094,3846.501,3857.132,3869.842,3881.28,3886.249,3898.728,3915.02,3928.538,3946.332,3963.433,3976.143,3983.654,3998.906,4021.206,4046.626,4070.89,4091.688,4107.634,4115.26,4130.281,4151.194,4172.108,4190.711,4211.74,4229.303,4241.435,4263.042,4294.701,4321.739,4352.705,4381.938,4405.047,4419.837,4442.599,4478.534,4509.269,4544.626,4578.712,4610.602,4628.743,4652.083,4696.337,4738.049,4777.334,4820.779,4854.518,4873.352,4898.31,4941.062,4983.12,5029.916,5079.023,5130.325,5152.394,5180.702,5234.893,5281.689,5342.697,5396.425,5451.309,5481.004,5517.401,5576.791,5638.03,5694.417,5694.417,5694.417,5820.939,5853.985,5904.478,5949.656,5992.639,5992.639,5992.639,6082.995,6108.993,6156.482,6220.032,6283.813,6283.813,6283.813,6462.677,6543.559,6668.001,6803.42,6975.236,6975.236,6975.236,7445.274,7612.237,7938.421,8240.341,8599.109,8599.109,8599.109,9608.627,9956.188,10602.779,11210.085,11976.612,11976.612,11976.612,13991.721,14679.1,15674.638,16759.145,17822.97,17822.97,17822.97,20356.415,21064.246,22228.133,23398.375,24485.541,24485.541,24485.541,26485.513,27176.474,28132.033,28932.068,29710.728,29710.728,29710.728,31194.213,31721.1,32427.543,33006.078,33577.565,33577.565,33577.565,34704.247,35194.274,35757.673,36278.666,36776.898,36776.898,36776.898,37791.616,38230.919,38783.919,39298.673,39804.992,39804.992,39804.992,40938.375,41430.829,42018.492,42600.956,43194.396,43194.396,43194.396,44433.735,44927.228,45577.17,46161.598],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.809,0,1.155,1.04,1.733,1.618,3.929,2.773,11.555,6.239,7.973,4.275,13.519,18.603,0,56.271,25.42,97.174,0,57.773,37.899,120.976,140.85,148.013,103.875,152.635,125.02,117.856,105.608,129.064,132.646,87.006,126.291,78.917,134.379,122.362,90.01,103.875,68.749,64.359,68.865,118.665,89.085,57.773,64.243,35.588,31.544,28.655,46.218,45.756,39.979,37.668,38.823,23.571,13.75,23.687,26.344,20.914,25.073,19.296,11.901,11.555,16.523,20.683,13.75,12.941,10.168,8.781,3.235,5.893,7.626,9.359,5.084,6.239,4.506,4.16,3.813,5.777,5.893,6.702,1.733,1.155,2.426,4.622,4.16,1.502,2.08,1.271,1.155,1.733,1.733,2.311,3.697,1.964,1.964,1.04,0.347,2.195,2.311,2.658,2.311,1.04,0.809,1.849,2.658,3.813,2.195,3.582,2.658,1.618,2.658,3.813,1.502,4.044,0.924,5.662,2.08,2.542,5.084,6.008,6.702,7.973,7.164,4.044,7.164,15.83,13.403,15.483,11.208,8.088,5.431,6.239,14.905,10.168,12.017,14.674,7.626,7.279,8.088,15.252,16.407,10.63,12.71,11.439,4.968,12.479,16.292,13.519,17.794,17.101,12.71,7.51,15.252,22.3,25.42,24.265,20.798,15.945,7.626,15.021,20.914,20.914,18.603,21.029,17.563,12.132,21.607,31.659,27.038,30.966,29.233,23.109,14.79,22.762,35.935,30.735,35.357,34.086,31.89,18.141,23.34,44.254,41.712,39.285,43.445,33.739,18.834,24.958,42.752,42.058,46.796,49.107,51.302,22.069,28.309,54.191,46.796,61.008,53.729,54.884,29.695,36.397,59.39,61.239,56.386,0,0,126.522,33.046,50.493,45.178,42.983,0,0,90.356,25.998,47.489,63.55,63.781,0,0,178.864,80.882,124.442,135.419,171.816,0,0,470.038,166.963,326.184,301.92,358.768,0,0,1009.519,347.56,646.591,607.306,766.527,0,0,2015.109,687.379,995.538,1084.508,1063.825,0,0,2533.445,707.83,1163.887,1170.242,1087.165,0,0,1999.973,690.961,955.559,800.035,778.659,0,0,1483.485,526.886,706.444,578.535,571.487,0,0,1126.682,490.027,563.399,520.994,498.231,0,0,1014.718,439.303,553,514.754,506.319,0,0,1133.383,492.454,587.663,582.464,593.44,0,0,1239.338,493.494,649.942,584.428],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.809,0.809,1.964,3.004,4.737,6.355,10.284,13.057,23.803,30.042,36.86,40.095,51.881,68.866,64.937,118.435,132.3,223.235,215.262,268.76,293.14,395.513,536.363,628.105,706.56,762.021,887.041,947.124,1014.833,1022.921,1014.717,953.71,976.126,902.408,911.767,916.273,900.675,875.486,811.589,788.942,731.516,771.264,725.97,661.381,635.614,567.327,530.122,494.418,471.771,398.862,349.756,329.651,304.231,292.214,274.42,269.452,249.578,224.736,209.83,191.458,164.536,152.52,155.293,152.289,139.695,131.722,116.817,106.302,97.636,91.974,83.077,71.753,63.087,56.385,50.723,46.102,46.68,46.564,44.831,42.174,38.823,33.739,31.659,32.121,32.468,28.193,24.38,18.949,18.371,18.949,18.256,15.945,15.482,15.944,15.828,15.597,14.789,15.251,15.829,16.176,14.79,13.866,12.711,13.52,15.831,17.449,17.333,18.257,18.604,19.182,21.031,22.995,21.839,22.07,20.799,22.879,22.301,23.225,25.651,27.846,33.046,36.975,43.215,41.597,46.681,59.969,68.288,77.763,82.269,82.384,80.651,82.846,90.587,84.925,83.539,82.73,79.148,78.339,80.996,90.009,91.511,91.973,92.666,89.431,86.773,91.973,100.177,98.444,99.831,106.302,106.302,102.373,112.657,122.478,131.606,142.352,145.356,144.2,139.116,146.627,152.289,150.903,144.086,140.85,137.615,133.802,147.783,164.421,170.545,180.597,191.227,193.307,190.534,201.164,215.492,214.568,222.887,226.007,228.664,223.696,232.246,253.738,259.515,268.065,276.153,275.806,262.75,269.567,288.979,286.783,291.867,301.689,309.546,297.876,307.351,336.584,340.628,359.578,366.511,372.288,350.681,365.009,396.09,403.138,412.728,351.72,297.991,369.629,372.98,387.076,372.864,354.608,298.222,298.222,388.578,288.054,302.497,315.554,334.157,291.174,291.174,470.038,460.564,559.008,646.938,755.204,691.423,691.423,1161.461,1149.56,1394.862,1572.34,1795.689,1623.873,1623.873,2633.392,2510.914,2990.542,3271.664,3736.271,3377.503,3377.503,5392.612,5070.472,5718.45,6156.367,6612.886,5846.359,5846.359,8379.804,7072.525,7549.033,7723.737,7726.394,6662.569,6662.569,8662.542,6820.058,7067.787,6703.935,6312.352,5225.187,5225.187,6708.672,5235.585,5251.068,4874.044,4645.496,3866.837,3866.837,4993.519,4000.061,4036.574,3851.124,3770.82,3199.333,3199.333,4214.051,3526.672,3589.645,3541,3526.325,3028.094,3028.094,4161.477,3639.213,3787.573,3817.037,3895.723,3389.404,3389.404,4628.742,3988.853,4146.341,4143.106],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.677,0.908,1.469,1.75,3.4,4.127,5.117,5.48,7.18,9.277,8.88,15.268,18.009,30.752,30.141,36.463,39.219,56.502,68.584,86.098,87.055,108.86,118.467,129.889,127.694,126.01,123.815,121.405,117.642,111.055,113.416,115.809,110.23,106.12,103.512,94.665,93.229,90.984,86.23,81.624,75.963,71.225,66.538,60.793,50.444,44.254,41.712,37.915,38.378,37.239,35.109,31.89,29.117,26.394,24.595,21.805,20.138,19.824,18.801,17.992,16.969,15.235,13.931,13.486,12.297,10.779,8.913,8.286,7.164,6.603,5.992,6.124,5.827,5.563,5.067,5.299,4.655,4.176,3.929,4.044,3.813,3.186,2.525,2.459,2.459,2.36,1.948,1.684,1.997,1.981,2.08,2.063,1.865,1.931,1.931,1.783,1.832,1.7,1.667,1.882,1.948,2.162,2.096,2.278,2.509,2.625,2.74,2.905,2.575,2.839,2.459,2.889,2.955,2.938,3.12,3.763,4.143,5.15,5.365,5.645,6.305,7.841,8.897,10.151,10.614,10.746,10.944,10.812,10.68,10.218,9.722,10.218,10.151,10.416,10.68,10.729,11.621,11.422,11.142,11.687,11.356,11.984,12.132,11.72,12.743,13.37,13.552,13.915,14.311,15.169,16.87,17.794,18.322,18.784,18.801,18.768,18.57,17.926,17.117,17.15,17.381,18.025,18.966,20.501,21.376,23.142,24.314,25.106,25.486,25.651,26.262,26.79,27.417,28.111,29.365,29.844,29.926,31.115,32.683,33.244,34.581,34.845,34.944,35.175,34.961,35.01,36.083,36.892,39.401,39.863,40.342,41.976,42.653,44.683,45.343,45.855,46.944,48.1,48.843,50.906,50.246,42.57,34.73,48.562,48.083,46.812,44.518,42.603,42.603,42.603,37.437,36.43,36.001,38.625,41.596,41.596,41.596,54.24,62.081,73.074,83.341,98.775,98.775,98.775,140.371,152.668,181.489,205.274,231.982,231.982,231.982,309.051,334.85,380.623,424.249,482.5,482.5,482.5,626.156,674.702,724.551,792.723,835.194,835.194,835.194,909.242,912.164,936.214,948.461,951.796,951.796,951.796,875.585,873.175,843.414,790.528,746.455,746.455,746.455,672.671,649.232,613.644,582.001,552.405,552.405,552.405,501.433,496.168,475.733,467.513,457.047,457.047,457.047,441.053,433.806,432.321,431.429,432.585,432.585,432.585,449.537,457.13,462.082,471.755,484.201,484.201,484.201,499.337,499.486,508.383,508.663]},{"iso":"SYR","continent":"Asia","population":17500657,"name":"Syria","population_density":null,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,5,5,5,5,9,10,10,10,16,16,16,19,19,19,19,19,19,25,25,25,29,33,33,38,38,39,39,42,42,42,42,42,43,43,43,43,43,44,44,44,44,44,45,45,47,47,47,47,47,48,48,50,51,58,58,58,58,58,59,70,86,106,121,121,122,122,122,122,123,123,123,124,124,125,141,144,146,152,164,164,170,177,177,177,178,187,187,198,204,219,231,231,242,255,256,256,269,279,293,312,328,338,358,372,372,372,372,394,394,394,417,439,458,477,496,496,496,522,540,561,584,608,627,650,674,694,717,738,757,780,809,847,892,944,999,1060,1125,1188,1255,1327,1327,1432,1515,1593,1677,1764,1844,1927,2008,2073,2143,2217,2293,2365,2440,2504,2563,2628,2703,2765,2830,2898,2973,3041,3104,3171,3229,3289,3351,3416,3476,3506,3540,3576,3614,3654,3691,3731,3765,3800,3833,3877,3924,3966,4001,4038,4072,4102,4148,4200,4247,4289,4329,4366,4411,4457,4504,4566,4616,4673,4718,4774,4826,4883,4931,4987,5033,5077,5134,5180,5224,5267,5319,5359,5408,5461,5528,5580,5633,5683,5728,5789,5843,5888,5964,6040,6102,6147,6215,6284,6352,6421,6486,6552,6613,6684,6759,6836,6919,6991,7079,7154,7225,7295,7369,7459,7542,7635,7715,7797,7887,7973,8059,8147,8233,8320,8403,8490,8580,8675,8787,8911,9041,9166,9302,9452,9603,9759],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.057,0.057,0.057,0.286,0.286,0.286,0.286,0.514,0.571,0.571,0.571,0.914,0.914,0.914,1.086,1.086,1.086,1.086,1.086,1.086,1.429,1.429,1.429,1.657,1.886,1.886,2.171,2.171,2.228,2.228,2.4,2.4,2.4,2.4,2.4,2.457,2.457,2.457,2.457,2.457,2.514,2.514,2.514,2.514,2.514,2.571,2.571,2.686,2.686,2.686,2.686,2.686,2.743,2.743,2.857,2.914,3.314,3.314,3.314,3.314,3.314,3.371,4,4.914,6.057,6.914,6.914,6.971,6.971,6.971,6.971,7.028,7.028,7.028,7.085,7.085,7.143,8.057,8.228,8.343,8.685,9.371,9.371,9.714,10.114,10.114,10.114,10.171,10.685,10.685,11.314,11.657,12.514,13.2,13.2,13.828,14.571,14.628,14.628,15.371,15.942,16.742,17.828,18.742,19.314,20.456,21.256,21.256,21.256,21.256,22.513,22.513,22.513,23.828,25.085,26.17,27.256,28.342,28.342,28.342,29.827,30.856,32.056,33.37,34.742,35.827,37.141,38.513,39.656,40.97,42.17,43.256,44.57,46.227,48.398,50.97,53.941,57.084,60.569,64.283,67.883,71.712,75.826,75.826,81.825,86.568,91.025,95.825,100.796,105.367,110.11,114.739,118.453,122.453,126.681,131.024,135.138,139.423,143.08,146.452,150.166,154.451,157.994,161.708,165.594,169.879,173.765,177.365,181.193,184.507,187.936,191.479,195.193,198.621,200.335,202.278,204.335,206.507,208.792,210.906,213.192,215.135,217.135,219.02,221.535,224.22,226.62,228.62,230.734,232.677,234.391,237.02,239.991,242.677,245.077,247.362,249.476,252.048,254.676,257.362,260.904,263.762,267.019,269.59,272.79,275.761,279.018,281.761,284.961,287.589,290.103,293.36,295.989,298.503,300.96,303.931,306.217,309.017,312.045,315.874,318.845,321.874,324.731,327.302,330.788,333.873,336.445,340.787,345.13,348.673,351.244,355.13,359.072,362.958,366.901,370.615,374.386,377.872,381.929,386.214,390.614,395.357,399.471,404.499,408.785,412.842,416.841,421.07,426.213,430.955,436.269,440.841,445.526,450.669,455.583,460.497,465.525,470.439,475.411,480.153,485.125,490.267,495.696,502.095,509.181,516.609,523.752,531.523,540.094,548.722,557.636],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.229,0,0,0,0.229,0.057,0,0,0.343,0,0,0.171,0,0,0,0,0,0.343,0,0,0.229,0.229,0,0.286,0,0.057,0,0.171,0,0,0,0,0.057,0,0,0,0,0.057,0,0,0,0,0.057,0,0.114,0,0,0,0,0.057,0,0.114,0.057,0.4,0,0,0,0,0.057,0.629,0.914,1.143,0.857,0,0.057,0,0,0,0.057,0,0,0.057,0,0.057,0.914,0.171,0.114,0.343,0.686,0,0.343,0.4,0,0,0.057,0.514,0,0.629,0.343,0.857,0.686,0,0.629,0.743,0.057,0,0.743,0.571,0.8,1.086,0.914,0.571,1.143,0.8,0,0,0,1.257,0,0,1.314,1.257,1.086,1.086,1.086,0,0,1.486,1.029,1.2,1.314,1.371,1.086,1.314,1.371,1.143,1.314,1.2,1.086,1.314,1.657,2.171,2.571,2.971,3.143,3.486,3.714,3.6,3.828,4.114,0,6,4.743,4.457,4.8,4.971,4.571,4.743,4.628,3.714,4,4.228,4.343,4.114,4.286,3.657,3.371,3.714,4.286,3.543,3.714,3.886,4.286,3.886,3.6,3.828,3.314,3.428,3.543,3.714,3.428,1.714,1.943,2.057,2.171,2.286,2.114,2.286,1.943,2,1.886,2.514,2.686,2.4,2,2.114,1.943,1.714,2.628,2.971,2.686,2.4,2.286,2.114,2.571,2.628,2.686,3.543,2.857,3.257,2.571,3.2,2.971,3.257,2.743,3.2,2.628,2.514,3.257,2.628,2.514,2.457,2.971,2.286,2.8,3.028,3.828,2.971,3.028,2.857,2.571,3.486,3.086,2.571,4.343,4.343,3.543,2.571,3.886,3.943,3.886,3.943,3.714,3.771,3.486,4.057,4.286,4.4,4.743,4.114,5.028,4.286,4.057,4,4.228,5.143,4.743,5.314,4.571,4.686,5.143,4.914,4.914,5.028,4.914,4.971,4.743,4.971,5.143,5.428,6.4,7.085,7.428,7.143,7.771,8.571,8.628,8.914],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.229,0.229,0.229,0.229,0.458,0.515,0.515,0.515,0.629,0.629,0.629,0.8,0.571,0.514,0.514,0.514,0.171,0.514,0.514,0.343,0.572,0.801,0.801,1.087,1.087,0.801,0.801,0.972,0.743,0.514,0.514,0.228,0.285,0.228,0.228,0.057,0.057,0.114,0.114,0.114,0.057,0.057,0.114,0.114,0.228,0.171,0.171,0.171,0.171,0.228,0.171,0.285,0.228,0.628,0.628,0.628,0.628,0.571,0.628,1.143,2,2.743,3.6,3.6,3.657,3.657,3.6,2.971,2.114,0.971,0.114,0.171,0.114,0.171,1.085,1.256,1.313,1.656,2.342,2.285,2.628,2.971,2.057,1.886,1.829,2,1.314,1.943,1.943,2.4,3.086,3.086,3.658,3.887,3.944,3.315,3.715,3.429,3.543,4.629,4.914,4.742,5.828,6.628,5.885,5.314,4.514,4.685,3.771,3.2,3.371,3.828,4.914,6,7.086,5.829,5.829,7.315,7.03,6.973,7.201,7.486,7.486,8.8,10.171,9.828,10.113,10.113,9.885,9.828,10.399,11.256,12.456,14.284,16.113,18.399,21.027,23.313,25.484,27.427,24.856,27.885,29.485,30.456,31.542,32.913,33.656,34.285,38.913,36.627,35.884,35.655,35.198,34.341,34.056,32.97,31.713,31.713,31.999,31.314,30.685,30.457,30.457,30.686,30.915,31.029,30.057,29.942,29.771,29.599,28.741,26.569,24.912,23.141,21.998,20.856,19.427,17.999,16.514,16.8,16.743,17.2,17.715,17.829,17.715,17.543,17.543,17.257,17.999,18.456,18.456,18.456,18.742,18.742,19.37,20.284,20.342,20.914,21.085,21.942,22.227,23.313,23.713,24.342,24.399,24.056,23.827,23.084,23.77,23.198,22.741,21.941,22.169,21.255,21.427,21.941,22.512,22.855,23.369,23.769,23.369,24.569,24.855,24.398,24.913,26.285,26.8,26.514,27.829,28.286,29.086,30.458,29.829,29.257,29.2,30.686,31.086,31.543,32.4,32.571,33.885,34.4,34.971,34.914,34.856,35.599,35.599,36.799,36.342,36.742,37.828,38.742,39.428,39.313,39.484,39.141,39.313,39.598,39.598,40.112,41.598,43.655,46.169,48.341,51.369,54.969,58.454,61.94],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.033,0.065,0.073,0.073,0.041,0.09,0.09,0.09,0.082,0.073,0.073,0.073,0.024,0.024,0.073,0.049,0.049,0.082,0.114,0.114,0.155,0.106,0.114,0.114,0.106,0.073,0.073,0.033,0.033,0.033,0.033,0.008,0.008,0.008,0.016,0.016,0.008,0.008,0.008,0.016,0.016,0.024,0.024,0.024,0.024,0.024,0.024,0.024,0.024,0.033,0.09,0.09,0.09,0.082,0.082,0.073,0.155,0.229,0.392,0.514,0.514,0.522,0.514,0.424,0.294,0.139,0.016,0.016,0.016,0.016,0.024,0.155,0.171,0.188,0.237,0.327,0.327,0.367,0.294,0.269,0.253,0.212,0.188,0.188,0.229,0.22,0.343,0.441,0.433,0.449,0.555,0.473,0.424,0.408,0.392,0.506,0.571,0.596,0.669,0.833,0.841,0.759,0.645,0.49,0.539,0.457,0.294,0.367,0.547,0.702,0.857,0.833,0.833,0.833,0.857,0.824,0.841,0.873,0.914,1.069,1.257,1.241,1.257,1.273,1.257,1.216,1.249,1.298,1.412,1.616,1.853,2.131,2.473,2.816,3.094,3.33,3.551,3.126,3.535,3.714,3.82,3.992,4.155,4.22,4.898,4.702,4.555,4.49,4.408,4.318,4.253,4.188,4.049,4,3.959,3.967,3.853,3.796,3.739,3.828,3.902,3.886,3.82,3.788,3.747,3.698,3.616,3.551,3.282,3.012,2.833,2.653,2.473,2.245,2.082,2.114,2.122,2.098,2.147,2.204,2.245,2.204,2.228,2.22,2.196,2.212,2.253,2.294,2.351,2.375,2.4,2.522,2.522,2.482,2.604,2.669,2.808,2.873,2.963,3.012,3.094,2.979,3.028,2.939,2.931,2.939,2.89,2.784,2.743,2.71,2.661,2.702,2.669,2.841,2.906,2.988,2.971,3.012,3.11,3.118,2.939,3.135,3.322,3.42,3.42,3.477,3.6,3.788,3.73,3.641,3.673,3.804,3.828,3.877,3.951,4.065,4.122,4.302,4.416,4.416,4.375,4.351,4.408,4.498,4.539,4.579,4.669,4.832,4.93,4.898,4.939,4.881,4.939,4.947,4.922,4.955,5.028,5.224,5.534,5.885,6.228,6.628,7.118,7.575,7.934]},{"iso":"TWN","continent":"Asia","population":23816775,"name":"Taiwan","population_density":null,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,3,3,4,5,8,8,9,10,10,10,10,11,11,16,16,17,18,18,18,18,18,18,18,20,22,22,23,24,26,26,28,30,31,32,32,34,39,40,41,42,42,44,45,45,45,45,47,48,49,50,53,59,67,77,100,108,135,153,169,195,215,235,252,267,283,298,306,322,329,339,348,355,363,373,376,379,380,382,385,388,393,393,395,395,395,398,420,422,425,426,427,428,429,429,429,429,429,429,429,432,436,438,438,439,440,440,440,440,440,440,440,440,440,440,440,440,440,440,440,441,441,441,441,441,441,441,442,442,442,443,443,443,443,443,443,443,443,443,443,443,443,443,443,445,445,445,446,446,446,446,446,446,446,447,447,447,447,447,447,447,448,449,449,449,449,449,449,449,449,451,451,451,451,451,451,451,451,451,451,451,455,455,458,458,458,462,467,467,467,467,474,475,474,476,476,477,477,479,477,477,480,481,481,481,482,484,485,486,486,486,487,487,487,487,487,487,487,487,488,488,488,488,489,489,490,492,493,494,495,495,496,498,498,498,499,499,500,503,503,506,507,509,509,509,509,510,510,510,513,513,514,515,517,517,517,518,521,523,524,527,527,527,529,530,530,531,535,535,535,540,543,544,548,548,550,550,550,550,550,553,554,555,558,563,567,568,569,573,573,577,578,580,584,589,597,600,602,603,605,607,609,611,611,617,618,618,623,625,639,648,651,675,679,685,686,690,694,716,716,718,720,724,725,733,736,740,742,749,757],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.042,0.042,0.126,0.126,0.168,0.21,0.336,0.336,0.378,0.42,0.42,0.42,0.42,0.462,0.462,0.672,0.672,0.714,0.756,0.756,0.756,0.756,0.756,0.756,0.756,0.84,0.924,0.924,0.966,1.008,1.092,1.092,1.176,1.26,1.302,1.344,1.344,1.428,1.638,1.679,1.721,1.763,1.763,1.847,1.889,1.889,1.889,1.889,1.973,2.015,2.057,2.099,2.225,2.477,2.813,3.233,4.199,4.535,5.668,6.424,7.096,8.188,9.027,9.867,10.581,11.211,11.882,12.512,12.848,13.52,13.814,14.234,14.612,14.905,15.241,15.661,15.787,15.913,15.955,16.039,16.165,16.291,16.501,16.501,16.585,16.585,16.585,16.711,17.635,17.719,17.845,17.887,17.929,17.971,18.013,18.013,18.013,18.013,18.013,18.013,18.013,18.138,18.306,18.39,18.39,18.432,18.474,18.474,18.474,18.474,18.474,18.474,18.474,18.474,18.474,18.474,18.474,18.474,18.474,18.474,18.474,18.516,18.516,18.516,18.516,18.516,18.516,18.516,18.558,18.558,18.558,18.6,18.6,18.6,18.6,18.6,18.6,18.6,18.6,18.6,18.6,18.6,18.6,18.6,18.6,18.684,18.684,18.684,18.726,18.726,18.726,18.726,18.726,18.726,18.726,18.768,18.768,18.768,18.768,18.768,18.768,18.768,18.81,18.852,18.852,18.852,18.852,18.852,18.852,18.852,18.852,18.936,18.936,18.936,18.936,18.936,18.936,18.936,18.936,18.936,18.936,18.936,19.104,19.104,19.23,19.23,19.23,19.398,19.608,19.608,19.608,19.608,19.902,19.944,19.902,19.986,19.986,20.028,20.028,20.112,20.028,20.028,20.154,20.196,20.196,20.196,20.238,20.322,20.364,20.406,20.406,20.406,20.448,20.448,20.448,20.448,20.448,20.448,20.448,20.448,20.49,20.49,20.49,20.49,20.532,20.532,20.574,20.658,20.7,20.742,20.784,20.784,20.826,20.91,20.91,20.91,20.952,20.952,20.994,21.12,21.12,21.246,21.288,21.371,21.371,21.371,21.371,21.413,21.413,21.413,21.539,21.539,21.581,21.623,21.707,21.707,21.707,21.749,21.875,21.959,22.001,22.127,22.127,22.127,22.211,22.253,22.253,22.295,22.463,22.463,22.463,22.673,22.799,22.841,23.009,23.009,23.093,23.093,23.093,23.093,23.093,23.219,23.261,23.303,23.429,23.639,23.807,23.849,23.891,24.059,24.059,24.227,24.269,24.353,24.521,24.73,25.066,25.192,25.276,25.318,25.402,25.486,25.57,25.654,25.654,25.906,25.948,25.948,26.158,26.242,26.83,27.208,27.334,28.341,28.509,28.761,28.803,28.971,29.139,30.063,30.063,30.147,30.231,30.399,30.441,30.777,30.903,31.071,31.155,31.448,31.784],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.084,0,0.042,0.042,0.126,0,0.042,0.042,0,0,0,0.042,0,0.21,0,0.042,0.042,0,0,0,0,0,0,0.084,0.084,0,0.042,0.042,0.084,0,0.084,0.084,0.042,0.042,0,0.084,0.21,0.042,0.042,0.042,0,0.084,0.042,0,0,0,0.084,0.042,0.042,0.042,0.126,0.252,0.336,0.42,0.966,0.336,1.134,0.756,0.672,1.092,0.84,0.84,0.714,0.63,0.672,0.63,0.336,0.672,0.294,0.42,0.378,0.294,0.336,0.42,0.126,0.126,0.042,0.084,0.126,0.126,0.21,0,0.084,0,0,0.126,0.924,0.084,0.126,0.042,0.042,0.042,0.042,0,0,0,0,0,0,0.126,0.168,0.084,0,0.042,0.042,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.042,0,0,0,0,0,0,0.042,0,0,0.042,0,0,0,0,0,0,0,0,0,0,0,0,0,0.084,0,0,0.042,0,0,0,0,0,0,0.042,0,0,0,0,0,0,0.042,0.042,0,0,0,0,0,0,0,0.084,0,0,0,0,0,0,0,0,0,0,0.168,0,0.126,0,0,0.168,0.21,0,0,0,0.294,0.042,-0.042,0.084,0,0.042,0,0.084,-0.084,0,0.126,0.042,0,0,0.042,0.084,0.042,0.042,0,0,0.042,0,0,0,0,0,0,0,0.042,0,0,0,0.042,0,0.042,0.084,0.042,0.042,0.042,0,0.042,0.084,0,0,0.042,0,0.042,0.126,0,0.126,0.042,0.084,0,0,0,0.042,0,0,0.126,0,0.042,0.042,0.084,0,0,0.042,0.126,0.084,0.042,0.126,0,0,0.084,0.042,0,0.042,0.168,0,0,0.21,0.126,0.042,0.168,0,0.084,0,0,0,0,0.126,0.042,0.042,0.126,0.21,0.168,0.042,0.042,0.168,0,0.168,0.042,0.084,0.168,0.21,0.336,0.126,0.084,0.042,0.084,0.084,0.084,0.084,0,0.252,0.042,0,0.21,0.084,0.588,0.378,0.126,1.008,0.168,0.252,0.042,0.168,0.168,0.924,0,0.084,0.084,0.168,0.042,0.336,0.126,0.168,0.084,0.294,0.336],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.084,0.084,0.126,0.168,0.294,0.294,0.336,0.378,0.294,0.294,0.252,0.252,0.126,0.336,0.294,0.294,0.336,0.336,0.336,0.294,0.294,0.084,0.084,0.126,0.168,0.168,0.21,0.252,0.336,0.336,0.42,0.42,0.378,0.42,0.378,0.42,0.546,0.588,0.546,0.504,0.462,0.504,0.546,0.462,0.252,0.21,0.252,0.252,0.294,0.252,0.336,0.588,0.924,1.344,2.226,2.52,3.612,4.326,4.872,5.712,6.216,6.636,6.384,6.678,6.216,6.09,5.754,5.334,4.788,4.368,4.032,3.696,3.36,3.15,2.94,2.394,2.142,1.806,1.554,1.386,1.26,0.84,0.798,0.672,0.63,0.672,1.47,1.428,1.344,1.386,1.344,1.386,1.428,1.302,0.378,0.294,0.168,0.126,0.084,0.168,0.294,0.378,0.378,0.42,0.462,0.462,0.462,0.336,0.168,0.084,0.084,0.042,0,0,0,0,0,0,0,0.042,0.042,0.042,0.042,0.042,0.042,0.042,0.084,0.042,0.042,0.084,0.084,0.084,0.084,0.084,0.042,0.042,0.042,0,0,0,0,0,0,0.084,0.084,0.084,0.126,0.126,0.126,0.126,0.126,0.042,0.042,0.084,0.042,0.042,0.042,0.042,0.042,0.042,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.042,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0.084,0,0,0,0.168,0.168,0.294,0.294,0.294,0.462,0.672,0.672,0.504,0.504,0.672,0.714,0.672,0.588,0.378,0.42,0.42,0.504,0.126,0.084,0.252,0.21,0.21,0.168,0.21,0.21,0.336,0.378,0.252,0.21,0.252,0.252,0.21,0.126,0.084,0.042,0.042,0.042,0.042,0.042,0.042,0.042,0.084,0.084,0.126,0.21,0.21,0.252,0.294,0.294,0.294,0.378,0.336,0.252,0.252,0.21,0.21,0.336,0.294,0.336,0.378,0.462,0.42,0.42,0.378,0.294,0.294,0.168,0.252,0.168,0.21,0.252,0.336,0.294,0.294,0.336,0.336,0.42,0.42,0.504,0.42,0.42,0.504,0.504,0.378,0.336,0.462,0.336,0.336,0.546,0.588,0.588,0.756,0.714,0.63,0.63,0.63,0.42,0.294,0.378,0.252,0.294,0.336,0.546,0.714,0.756,0.798,0.84,0.798,0.924,0.84,0.714,0.714,0.882,1.176,1.134,1.218,1.092,1.134,1.134,1.05,0.924,0.588,0.714,0.672,0.63,0.756,0.756,1.26,1.554,1.68,2.436,2.562,2.814,2.646,2.73,2.31,2.856,2.73,1.806,1.722,1.638,1.638,1.806,1.764,1.008,1.092,1.302,1.554],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.042,0.042,0.048,0.042,0.042,0.036,0.03,0.018,0.018,0.042,0.036,0.042,0.048,0.048,0.042,0.042,0.012,0.012,0.006,0.012,0.024,0.024,0.03,0.036,0.048,0.048,0.048,0.048,0.054,0.054,0.048,0.048,0.078,0.072,0.066,0.066,0.06,0.072,0.066,0.036,0.03,0.024,0.03,0.036,0.03,0.03,0.048,0.084,0.132,0.18,0.312,0.354,0.51,0.6,0.66,0.768,0.828,0.81,0.864,0.792,0.78,0.774,0.666,0.642,0.564,0.522,0.486,0.432,0.39,0.402,0.324,0.3,0.246,0.204,0.18,0.15,0.12,0.102,0.096,0.09,0.078,0.078,0.192,0.174,0.192,0.186,0.192,0.198,0.186,0.054,0.042,0.024,0.018,0.012,0.006,0.018,0.042,0.054,0.054,0.06,0.066,0.066,0.048,0.024,0.012,0.012,0.006,0,0,0,0,0,0,0,0,0.006,0.006,0.006,0.006,0.006,0.006,0.006,0.006,0.006,0.006,0.012,0.012,0.012,0.012,0.006,0.006,0.006,0,0,0,0,0,0,0,0.012,0.012,0.012,0.018,0.018,0.018,0.018,0.006,0.006,0.006,0.006,0.006,0.006,0.006,0.006,0.006,0.006,0.006,0.012,0.012,0.012,0.012,0.012,0.012,0.006,0,0.012,0.012,0.012,0.012,0.012,0.012,0.012,0,0,0,0,0.024,0.024,0.042,0.042,0.042,0.066,0.096,0.072,0.072,0.054,0.096,0.102,0.072,0.054,0.054,0.06,0.06,0.03,0.012,0.018,0.024,0.03,0.024,0.024,0.018,0.042,0.048,0.036,0.03,0.03,0.036,0.03,0.018,0.012,0.006,0.006,0.006,0,0.006,0.006,0.006,0.006,0.012,0.012,0.018,0.024,0.03,0.036,0.042,0.036,0.042,0.048,0.036,0.03,0.03,0.024,0.03,0.042,0.03,0.048,0.054,0.06,0.06,0.054,0.036,0.042,0.024,0.018,0.024,0.024,0.03,0.036,0.042,0.042,0.042,0.03,0.048,0.054,0.054,0.06,0.06,0.06,0.066,0.054,0.042,0.042,0.048,0.048,0.048,0.066,0.078,0.084,0.102,0.078,0.09,0.09,0.06,0.042,0.036,0.03,0.036,0.03,0.048,0.078,0.102,0.108,0.096,0.114,0.108,0.114,0.09,0.078,0.096,0.12,0.144,0.162,0.15,0.15,0.15,0.138,0.12,0.084,0.066,0.09,0.09,0.078,0.096,0.096,0.168,0.222,0.204,0.342,0.366,0.372,0.366,0.306,0.276,0.39,0.246,0.234,0.21,0.228,0.21,0.234,0.12,0.144,0.144,0.174,0.198]},{"iso":"TJK","continent":"Asia","population":9537642,"name":"Tajikistan","population_density":64.281,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,76,128,230,293,379,461,522,612,612,661,729,801,907,1118,1322,1524,1729,1936,2140,2350,2551,2738,2929,3100,3266,3424,3563,3686,3807,3930,4013,4100,4191,4289,4370,4453,4529,4609,4690,4763,4834,4902,4971,5035,5097,5160,5221,5279,5338,5399,5457,5513,5567,5630,5691,5747,5799,5849,5900,5900,6005,6058,6058,6159,6213,6262,6315,6364,6410,6457,6506,6552,6596,6643,6695,6741,6786,6834,6878,6921,6967,7015,7060,7104,7150,7192,7235,7276,7320,7366,7409,7451,7495,7538,7583,7625,7665,7706,7706,7745,7827,7871,7912,7950,7989,8029,8065,8099,8131,8166,8203,8241,8277,8311,8346,8379,8413,8449,8481,8516,8516,8583,8619,8654,8690,8724,8757,8792,8824,8860,8899,8939,8977,9014,9049,9088,9129,9171,9214,9259,9303,9346,9388,9432,9475,9520,9562,9605,9646,9685,9726,9769,9811,9852,9895,9935,9974,10014,10055,10097,10137,10180,10222,10260,10297,10336,10374,10414,10455,10493,10533,10574,10613,10653,10695,10736,10776,10819,10860,10900,10939,10977,11017,11054,11096,11139,11180,11219,11256,11294,11336,11376,11417,11456,11496,11534,11573,11610,11649,11689,11731,11772,11815,11854,11894,11932,11971,12008,12044,12082,12118,12155,12194,12231,12269,12308,12349,12389,12428,12469,12511,12551,12588,12588,12624,12704,12741,12777,12815,12852],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.573,1.573,7.968,13.421,24.115,30.72,39.737,48.335,54.731,64.167,64.167,69.304,76.434,83.983,95.097,117.22,138.609,159.788,181.282,202.985,224.374,246.392,267.467,287.073,307.099,325.028,342.433,358.999,373.572,386.469,399.155,412.052,420.754,429.876,439.417,449.692,458.185,466.887,474.855,483.243,491.736,499.39,506.834,513.964,521.198,527.908,534.409,541.014,547.41,553.491,559.677,566.073,572.154,578.025,583.687,590.293,596.688,602.56,608.012,613.254,618.602,618.602,629.611,635.167,635.167,645.757,651.419,656.556,662.113,667.251,672.074,677.002,682.139,686.962,691.576,696.503,701.955,706.778,711.497,716.529,721.143,725.651,730.474,735.507,740.225,744.838,749.661,754.065,758.573,762.872,767.485,772.308,776.817,781.22,785.834,790.342,795.06,799.464,803.658,807.957,807.957,812.046,820.643,825.256,829.555,833.539,837.628,841.822,845.597,849.162,852.517,856.186,860.066,864.05,867.825,871.389,875.059,878.519,882.084,885.858,889.213,892.883,892.883,899.908,903.682,907.352,911.127,914.691,918.151,921.821,925.176,928.951,933.04,937.234,941.218,945.097,948.767,952.856,957.155,961.558,966.067,970.785,975.398,979.907,984.31,988.924,993.432,998.15,1002.554,1007.062,1011.361,1015.45,1019.749,1024.257,1028.661,1032.96,1037.468,1041.662,1045.751,1049.945,1054.244,1058.647,1062.841,1067.35,1071.753,1075.738,1079.617,1083.706,1087.69,1091.884,1096.183,1100.167,1104.361,1108.66,1112.749,1116.943,1121.346,1125.645,1129.839,1134.347,1138.646,1142.84,1146.929,1150.913,1155.107,1158.987,1163.39,1167.899,1172.197,1176.287,1180.166,1184.15,1188.554,1192.748,1197.046,1201.135,1205.329,1209.314,1213.403,1217.282,1221.371,1225.565,1229.969,1234.267,1238.776,1242.865,1247.059,1251.043,1255.132,1259.011,1262.786,1266.77,1270.545,1274.424,1278.513,1282.392,1286.377,1290.466,1294.764,1298.958,1303.047,1307.346,1311.75,1315.944,1319.823,1319.823,1323.598,1331.985,1335.865,1339.639,1343.624,1347.503],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6.396,5.452,10.694,6.605,9.017,8.598,6.396,9.436,0,5.138,7.13,7.549,11.114,22.123,21.389,21.179,21.494,21.703,21.389,22.018,21.074,19.607,20.026,17.929,17.405,16.566,14.574,12.896,12.687,12.896,8.702,9.122,9.541,10.275,8.493,8.702,7.968,8.388,8.493,7.654,7.444,7.13,7.234,6.71,6.501,6.605,6.396,6.081,6.186,6.396,6.081,5.871,5.662,6.605,6.396,5.871,5.452,5.242,5.347,0,11.009,5.557,0,10.59,5.662,5.138,5.557,5.138,4.823,4.928,5.138,4.823,4.613,4.928,5.452,4.823,4.718,5.033,4.613,4.508,4.823,5.033,4.718,4.613,4.823,4.404,4.508,4.299,4.613,4.823,4.508,4.404,4.613,4.508,4.718,4.404,4.194,4.299,0,4.089,8.598,4.613,4.299,3.984,4.089,4.194,3.775,3.565,3.355,3.67,3.879,3.984,3.775,3.565,3.67,3.46,3.565,3.775,3.355,3.67,0,7.025,3.775,3.67,3.775,3.565,3.46,3.67,3.355,3.775,4.089,4.194,3.984,3.879,3.67,4.089,4.299,4.404,4.508,4.718,4.613,4.508,4.404,4.613,4.508,4.718,4.404,4.508,4.299,4.089,4.299,4.508,4.404,4.299,4.508,4.194,4.089,4.194,4.299,4.404,4.194,4.508,4.404,3.984,3.879,4.089,3.984,4.194,4.299,3.984,4.194,4.299,4.089,4.194,4.404,4.299,4.194,4.508,4.299,4.194,4.089,3.984,4.194,3.879,4.404,4.508,4.299,4.089,3.879,3.984,4.404,4.194,4.299,4.089,4.194,3.984,4.089,3.879,4.089,4.194,4.404,4.299,4.508,4.089,4.194,3.984,4.089,3.879,3.775,3.984,3.775,3.879,4.089,3.879,3.984,4.089,4.299,4.194,4.089,4.299,4.404,4.194,3.879,0,3.775,8.388,3.879,3.775,3.984,3.879],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6.396,11.848,22.542,29.147,38.164,46.762,53.158,62.594,56.198,55.884,52.32,53.264,55.361,68.886,83.879,95.622,117.116,133.681,147.94,162.409,172.369,169.853,168.49,165.24,161.151,156.014,149.199,140.077,131.69,124.979,113.655,104.848,96.984,90.693,84.612,80.418,75.699,71.191,70.982,69.514,67.417,64.272,63.013,61.021,59.554,57.771,55.674,54.101,52.843,52.109,50.956,50.117,49.278,49.278,49.278,49.068,48.334,47.18,46.446,40.575,45.922,44.874,38.478,43.197,43.407,43.303,43.513,48.651,42.465,41.836,46.974,41.207,40.158,39.948,39.843,39.528,39.423,39.528,39.003,38.688,38.898,39.003,38.269,38.059,38.164,37.535,37.43,37.221,37.011,36.801,36.591,36.382,36.172,36.276,36.486,36.591,36.172,35.648,31.14,30.825,34.81,34.915,34.496,34.076,33.971,33.866,37.641,37.117,31.874,30.931,30.511,30.511,30.197,29.568,29.463,29.358,29.568,29.673,29.149,28.835,25.06,28.52,28.625,28.835,29.045,28.835,28.94,28.94,32.295,29.045,29.359,29.883,30.092,30.406,30.616,31.035,31.979,32.608,33.027,33.551,34.18,34.809,35.543,36.067,36.276,36.59,36.486,36.276,35.962,35.543,35.438,35.333,35.229,34.81,34.914,34.6,34.39,34.495,34.495,34.391,34.181,34.39,34.286,34.076,33.866,33.761,33.446,33.236,33.341,32.817,32.607,32.922,33.132,33.237,33.657,33.762,33.657,34.181,34.286,34.181,34.181,33.971,33.761,33.341,33.551,33.551,33.551,33.446,33.236,33.236,33.446,33.761,33.656,33.237,33.132,33.027,33.237,33.132,32.817,32.817,32.922,33.132,33.446,33.551,33.656,33.761,33.761,33.446,32.817,32.502,31.769,31.559,31.454,31.349,31.244,31.454,31.978,32.188,32.502,32.922,33.237,33.552,33.447,29.358,28.834,33.028,32.818,32.294,31.874,31.559],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5.452,6.68,7.594,8.028,7.249,6.456,6.531,6.321,6.68,8.927,10.635,13.66,15.997,18.079,20.056,21.614,21.464,21.209,21.044,20.535,19.921,19.232,18.169,17,16.012,14.993,13.675,12.492,11.488,10.874,10.245,9.676,8.972,8.927,8.837,8.568,8.163,7.968,7.759,7.579,7.309,7.04,6.86,6.665,6.531,6.411,6.321,6.231,6.096,6.126,6.171,6.126,5.991,5.871,5.797,4.988,5.617,5.497,4.658,5.392,5.452,5.422,6.216,5.377,5.272,5.976,5.197,5.078,5.003,4.913,4.958,4.958,4.928,4.913,4.883,4.868,4.853,4.793,4.778,4.763,4.733,4.703,4.703,4.628,4.568,4.583,4.568,4.508,4.538,4.538,4.598,4.568,4.478,4.449,3.819,3.745,4.329,4.314,4.299,4.269,4.239,4.838,4.793,4.074,3.894,3.804,3.789,3.775,3.715,3.685,3.7,3.715,3.7,3.685,3.595,3.58,3.071,3.55,3.595,3.61,3.61,3.64,3.61,4.134,3.61,3.61,3.67,3.73,3.789,3.849,3.849,3.954,4.029,4.074,4.119,4.224,4.329,4.449,4.493,4.538,4.553,4.583,4.538,4.523,4.493,4.449,4.404,4.404,4.359,4.344,4.344,4.329,4.329,4.314,4.284,4.284,4.269,4.269,4.299,4.284,4.239,4.209,4.149,4.149,4.119,4.059,4.089,4.149,4.149,4.179,4.209,4.209,4.239,4.284,4.284,4.299,4.284,4.224,4.209,4.164,4.149,4.179,4.194,4.194,4.179,4.149,4.224,4.194,4.164,4.134,4.149,4.164,4.179,4.104,4.089,4.074,4.119,4.134,4.209,4.209,4.254,4.239,4.224,4.149,4.074,3.999,3.954,3.909,3.924,3.894,3.909,3.954,3.999,4.059,4.089,4.119,4.194,4.224,4.194,3.58,3.52,4.134,4.074,3.984,3.954,3.954]},{"iso":"TZA","continent":"Africa","population":59734213,"name":"Tanzania","population_density":64.699,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,3,6,6,6,12,12,12,12,13,13,14,14,19,19,20,20,20,20,22,24,24,25,25,32,32,32,49,53,88,94,147,147,170,254,254,284,284,299,299,299,299,299,480,480,480,480,480,480,480,480,480,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.017,0.017,0.05,0.1,0.1,0.1,0.201,0.201,0.201,0.201,0.218,0.218,0.234,0.234,0.318,0.318,0.335,0.335,0.335,0.335,0.368,0.402,0.402,0.419,0.419,0.536,0.536,0.536,0.82,0.887,1.473,1.574,2.461,2.461,2.846,4.252,4.252,4.754,4.754,5.006,5.006,5.006,5.006,5.006,8.036,8.036,8.036,8.036,8.036,8.036,8.036,8.036,8.036,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521,8.521],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.033,0.05,0,0,0.1,0,0,0,0.017,0,0.017,0,0.084,0,0.017,0,0,0,0.033,0.033,0,0.017,0,0.117,0,0,0.285,0.067,0.586,0.1,0.887,0,0.385,1.406,0,0.502,0,0.251,0,0,0,0,3.03,0,0,0,0,0,0,0,0,0.485,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.033,0.083,0.083,0.083,0.183,0.183,0.183,0.183,0.167,0.117,0.134,0.134,0.118,0.118,0.135,0.135,0.118,0.118,0.134,0.167,0.083,0.1,0.083,0.2,0.2,0.2,0.452,0.486,1.072,1.155,2.042,1.925,2.31,3.716,3.431,3.866,3.28,3.431,2.544,2.544,2.159,0.753,3.783,3.281,3.281,3.03,3.03,3.03,3.03,3.03,0,0.485,0.485,0.485,0.485,0.485,0.485,0.485,0.485,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.026,0.026,0.026,0.022,0.017,0.017,0.019,0.005,0.017,0.017,0.019,0.017,0.017,0.014,0.019,0.012,0.012,0.012,0.012,0.029,0.029,0.024,0.06,0.069,0.151,0.165,0.275,0.275,0.33,0.49,0.481,0.469,0.454,0.364,0.364,0.309,0.108,0.108,0.469,0.469,0.433,0.433,0.433,0.433,0.433,0,0,0.069,0.069,0.069,0.069,0.069,0.069,0.069,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},{"iso":"THA","continent":"Asia","population":69799978,"name":"Thailand","population_density":135.132,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,5,7,8,8,14,14,14,19,19,19,19,25,25,25,25,32,32,32,33,33,33,33,33,34,35,35,35,35,35,35,35,35,37,40,40,41,42,42,43,43,43,47,48,50,50,50,53,59,70,75,82,114,147,177,212,272,322,411,599,721,827,934,1045,1136,1245,1388,1524,1651,1771,1875,1978,2067,2169,2220,2258,2369,2423,2473,2518,2551,2579,2613,2643,2672,2700,2733,2765,2792,2811,2826,2839,2907,2907,2922,2931,2938,2947,2954,2960,2966,2969,2987,2988,2989,2992,3000,3004,3009,3015,3017,3017,3018,3025,3025,3028,3031,3033,3034,3037,3037,3040,3040,3042,3045,3054,3065,3076,3077,3081,3082,3083,3084,3101,3102,3104,3112,3119,3121,3125,3125,3129,3134,3135,3135,3135,3135,3141,3146,3147,3148,3151,3156,3158,3158,3162,3162,3162,3169,3171,3173,3179,3180,3185,3190,3195,3197,3197,3202,3202,3216,3217,3220,3227,3232,3236,3239,3246,3250,3250,3255,3261,3279,3279,3282,3291,3297,3297,3298,3304,3310,3312,3317,3320,3321,3328,3330,3345,3348,3351,3351,3351,3356,3359,3376,3376,3378,3378,3382,3382,3389,3390,3390,3395,3402,3402,3404,3410,3411,3411,3411,3417,3425,3427,3431,3431,3444,3445,3446,3447,3454,3461,3461,3473,3475,3475,3490,3490,3497,3497,3506,3506,3511,3514,3516,3519,3522,3523,3523,3559,3564,3569,3575,3583,3585,3590,3600,3615,3622,3628,3634,3636,3641,3643,3652,3652,3669,3679,3686,3691,3700,3709,3719,3727,3731,3736,3736,3746,3759,3763,3775,3780,3784,3787,3797,3804,3810,3818,3830,3837,3840,3844,3847,3852,3861,3866,3874,3875,3878,3880,3888,3892,3902,3913,3920,3922,3926,3942,3961,3966,3977,3998,4008,4026,4026,4053,4072,4086,4107,4126,4151,4169,4180,4192,4209,4237,4246,4261,4281,4297],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.029,0.043,0.072,0.1,0.115,0.115,0.201,0.201,0.201,0.272,0.272,0.272,0.272,0.358,0.358,0.358,0.358,0.458,0.458,0.458,0.473,0.473,0.473,0.473,0.473,0.487,0.501,0.501,0.501,0.501,0.501,0.501,0.501,0.501,0.53,0.573,0.573,0.587,0.602,0.602,0.616,0.616,0.616,0.673,0.688,0.716,0.716,0.716,0.759,0.845,1.003,1.074,1.175,1.633,2.106,2.536,3.037,3.897,4.613,5.888,8.582,10.33,11.848,13.381,14.971,16.275,17.837,19.885,21.834,23.653,25.373,26.862,28.338,29.613,31.075,31.805,32.35,33.94,34.713,35.43,36.075,36.547,36.948,37.436,37.865,38.281,38.682,39.155,39.613,40,40.272,40.487,40.673,41.648,41.648,41.862,41.991,42.092,42.221,42.321,42.407,42.493,42.536,42.794,42.808,42.822,42.865,42.98,43.037,43.109,43.195,43.224,43.224,43.238,43.338,43.338,43.381,43.424,43.453,43.467,43.51,43.51,43.553,43.553,43.582,43.625,43.754,43.911,44.069,44.083,44.14,44.155,44.169,44.183,44.427,44.441,44.47,44.585,44.685,44.713,44.771,44.771,44.828,44.9,44.914,44.914,44.914,44.914,45,45.072,45.086,45.1,45.143,45.215,45.244,45.244,45.301,45.301,45.301,45.401,45.43,45.458,45.544,45.559,45.63,45.702,45.774,45.802,45.802,45.874,45.874,46.075,46.089,46.132,46.232,46.304,46.361,46.404,46.504,46.562,46.562,46.633,46.719,46.977,46.977,47.02,47.149,47.235,47.235,47.249,47.335,47.421,47.45,47.522,47.564,47.579,47.679,47.708,47.923,47.966,48.009,48.009,48.009,48.08,48.123,48.367,48.367,48.395,48.395,48.453,48.453,48.553,48.567,48.567,48.639,48.739,48.739,48.768,48.854,48.868,48.868,48.868,48.954,49.069,49.097,49.155,49.155,49.341,49.355,49.37,49.384,49.484,49.585,49.585,49.756,49.785,49.785,50,50,50.1,50.1,50.229,50.229,50.301,50.344,50.373,50.415,50.458,50.473,50.473,50.989,51.06,51.132,51.218,51.332,51.361,51.433,51.576,51.791,51.891,51.977,52.063,52.092,52.163,52.192,52.321,52.321,52.564,52.708,52.808,52.88,53.009,53.138,53.281,53.395,53.453,53.524,53.524,53.668,53.854,53.911,54.083,54.155,54.212,54.255,54.398,54.499,54.585,54.699,54.871,54.971,55.014,55.072,55.115,55.186,55.315,55.387,55.501,55.516,55.559,55.587,55.702,55.759,55.903,56.06,56.16,56.189,56.246,56.476,56.748,56.82,56.977,57.278,57.421,57.679,57.679,58.066,58.338,58.539,58.84,59.112,59.47,59.728,59.885,60.057,60.301,60.702,60.831,61.046,61.332,61.562],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.014,0.029,0.029,0.014,0,0.086,0,0,0.072,0,0,0,0.086,0,0,0,0.1,0,0,0.014,0,0,0,0,0.014,0.014,0,0,0,0,0,0,0,0.029,0.043,0,0.014,0.014,0,0.014,0,0,0.057,0.014,0.029,0,0,0.043,0.086,0.158,0.072,0.1,0.458,0.473,0.43,0.501,0.86,0.716,1.275,2.693,1.748,1.519,1.533,1.59,1.304,1.562,2.049,1.948,1.819,1.719,1.49,1.476,1.275,1.461,0.731,0.544,1.59,0.774,0.716,0.645,0.473,0.401,0.487,0.43,0.415,0.401,0.473,0.458,0.387,0.272,0.215,0.186,0.974,0,0.215,0.129,0.1,0.129,0.1,0.086,0.086,0.043,0.258,0.014,0.014,0.043,0.115,0.057,0.072,0.086,0.029,0,0.014,0.1,0,0.043,0.043,0.029,0.014,0.043,0,0.043,0,0.029,0.043,0.129,0.158,0.158,0.014,0.057,0.014,0.014,0.014,0.244,0.014,0.029,0.115,0.1,0.029,0.057,0,0.057,0.072,0.014,0,0,0,0.086,0.072,0.014,0.014,0.043,0.072,0.029,0,0.057,0,0,0.1,0.029,0.029,0.086,0.014,0.072,0.072,0.072,0.029,0,0.072,0,0.201,0.014,0.043,0.1,0.072,0.057,0.043,0.1,0.057,0,0.072,0.086,0.258,0,0.043,0.129,0.086,0,0.014,0.086,0.086,0.029,0.072,0.043,0.014,0.1,0.029,0.215,0.043,0.043,0,0,0.072,0.043,0.244,0,0.029,0,0.057,0,0.1,0.014,0,0.072,0.1,0,0.029,0.086,0.014,0,0,0.086,0.115,0.029,0.057,0,0.186,0.014,0.014,0.014,0.1,0.1,0,0.172,0.029,0,0.215,0,0.1,0,0.129,0,0.072,0.043,0.029,0.043,0.043,0.014,0,0.516,0.072,0.072,0.086,0.115,0.029,0.072,0.143,0.215,0.1,0.086,0.086,0.029,0.072,0.029,0.129,0,0.244,0.143,0.1,0.072,0.129,0.129,0.143,0.115,0.057,0.072,0,0.143,0.186,0.057,0.172,0.072,0.057,0.043,0.143,0.1,0.086,0.115,0.172,0.1,0.043,0.057,0.043,0.072,0.129,0.072,0.115,0.014,0.043,0.029,0.115,0.057,0.143,0.158,0.1,0.029,0.057,0.229,0.272,0.072,0.158,0.301,0.143,0.258,0,0.387,0.272,0.201,0.301,0.272,0.358,0.258,0.158,0.172,0.244,0.401,0.129,0.215,0.287,0.229],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.014,0.043,0.072,0.086,0.086,0.172,0.172,0.172,0.23,0.201,0.172,0.158,0.244,0.158,0.158,0.158,0.186,0.186,0.186,0.2,0.114,0.114,0.114,0.114,0.028,0.042,0.042,0.028,0.028,0.028,0.028,0.028,0.014,0.029,0.072,0.072,0.086,0.1,0.1,0.114,0.114,0.085,0.099,0.113,0.128,0.114,0.114,0.143,0.229,0.387,0.402,0.488,0.917,1.39,1.82,2.278,3.052,3.61,4.813,7.406,8.696,9.742,10.845,11.934,12.378,13.224,13.998,13.253,13.324,13.524,13.481,13.367,13.338,13.237,11.919,10.515,10.286,9.341,8.567,7.736,6.934,5.874,5.63,5.516,4.341,3.968,3.725,3.538,3.452,3.323,3.051,2.807,3.366,2.965,2.707,2.378,2.091,1.948,1.833,1.733,0.845,0.888,0.931,0.816,0.73,0.644,0.659,0.63,0.616,0.659,0.43,0.416,0.416,0.473,0.358,0.344,0.315,0.258,0.243,0.286,0.272,0.215,0.215,0.201,0.201,0.301,0.445,0.56,0.574,0.588,0.602,0.587,0.558,0.673,0.529,0.4,0.501,0.544,0.559,0.602,0.588,0.401,0.459,0.444,0.329,0.229,0.2,0.229,0.301,0.258,0.2,0.229,0.301,0.33,0.33,0.301,0.229,0.215,0.301,0.287,0.244,0.301,0.315,0.33,0.402,0.474,0.403,0.374,0.417,0.331,0.518,0.46,0.431,0.459,0.502,0.559,0.53,0.63,0.486,0.472,0.501,0.487,0.673,0.616,0.616,0.645,0.674,0.674,0.616,0.616,0.444,0.473,0.502,0.416,0.344,0.444,0.459,0.588,0.545,0.559,0.487,0.444,0.502,0.445,0.66,0.445,0.431,0.388,0.445,0.445,0.473,0.444,0.2,0.272,0.343,0.343,0.315,0.401,0.315,0.301,0.301,0.315,0.33,0.359,0.387,0.301,0.473,0.487,0.501,0.429,0.414,0.485,0.428,0.6,0.443,0.429,0.63,0.616,0.616,0.516,0.645,0.473,0.516,0.559,0.373,0.416,0.359,0.373,0.244,0.76,0.76,0.789,0.846,0.918,0.904,0.962,1.105,0.804,0.832,0.846,0.846,0.76,0.803,0.76,0.746,0.531,0.675,0.732,0.746,0.789,0.846,0.946,0.96,1.075,0.888,0.817,0.717,0.788,0.845,0.773,0.802,0.759,0.759,0.73,0.873,0.83,0.73,0.788,0.788,0.816,0.802,0.816,0.716,0.688,0.731,0.688,0.631,0.545,0.545,0.517,0.589,0.574,0.588,0.674,0.659,0.674,0.688,0.888,1.045,1.06,1.075,1.218,1.261,1.49,1.433,1.591,1.591,1.72,1.863,1.834,2.049,2.049,2.207,1.992,1.964,2.164,1.992,1.935,1.864,1.835],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.025,0.025,0.023,0.029,0.025,0.023,0.023,0.023,0.023,0.023,0.012,0.027,0.027,0.027,0.016,0.016,0.016,0.016,0.002,0.004,0.006,0.004,0.004,0.004,0.004,0.004,0.002,0,0.004,0.01,0.01,0.012,0.014,0.014,0.016,0.012,0.006,0.014,0.014,0.016,0.016,0.014,0.02,0.033,0.047,0.055,0.065,0.131,0.199,0.254,0.313,0.413,0.506,0.673,0.993,1.175,1.33,1.478,1.582,1.666,1.707,1.615,1.643,1.686,1.713,1.699,1.723,1.682,1.598,1.424,1.242,1.224,1.122,1.013,0.923,0.782,0.735,0.727,0.561,0.51,0.465,0.44,0.438,0.436,0.405,0.375,0.342,0.424,0.356,0.321,0.284,0.26,0.248,0.235,0.108,0.121,0.096,0.115,0.102,0.086,0.078,0.082,0.078,0.082,0.057,0.059,0.057,0.053,0.051,0.043,0.039,0.033,0.033,0.035,0.039,0.025,0.031,0.025,0.023,0.025,0.041,0.057,0.08,0.076,0.084,0.082,0.078,0.061,0.074,0.053,0.055,0.063,0.076,0.078,0.084,0.049,0.055,0.061,0.047,0.033,0.029,0.02,0.033,0.035,0.027,0.027,0.033,0.043,0.047,0.035,0.033,0.031,0.029,0.037,0.031,0.031,0.043,0.037,0.047,0.057,0.053,0.053,0.049,0.047,0.045,0.063,0.055,0.051,0.061,0.072,0.07,0.076,0.061,0.068,0.061,0.057,0.059,0.088,0.082,0.074,0.084,0.096,0.086,0.076,0.051,0.063,0.061,0.053,0.047,0.049,0.061,0.053,0.072,0.074,0.07,0.063,0.061,0.057,0.059,0.063,0.057,0.055,0.055,0.063,0.053,0.061,0.029,0.029,0.035,0.049,0.041,0.045,0.043,0.043,0.043,0.033,0.031,0.047,0.047,0.043,0.041,0.068,0.07,0.059,0.045,0.055,0.061,0.061,0.059,0.061,0.059,0.088,0.074,0.074,0.074,0.068,0.063,0.074,0.049,0.053,0.045,0.051,0.035,0.035,0.098,0.102,0.108,0.115,0.125,0.127,0.137,0.084,0.104,0.108,0.108,0.104,0.104,0.104,0.088,0.076,0.061,0.084,0.092,0.102,0.102,0.117,0.117,0.137,0.119,0.106,0.102,0.092,0.094,0.102,0.09,0.098,0.1,0.098,0.104,0.104,0.092,0.096,0.088,0.102,0.108,0.108,0.096,0.088,0.086,0.088,0.074,0.076,0.072,0.07,0.068,0.074,0.063,0.074,0.08,0.092,0.09,0.094,0.111,0.141,0.131,0.131,0.16,0.176,0.205,0.172,0.188,0.217,0.223,0.223,0.242,0.256,0.293,0.26,0.246,0.252,0.266,0.246,0.225,0.229,0.239]},{"iso":"TLS","continent":"Asia","population":1318442,"name":"Timor","population_density":87.176,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,4,6,8,18,18,18,19,22,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.758,0.758,0.758,0.758,0.758,0.758,0.758,0.758,0.758,0.758,0.758,0.758,0.758,0.758,0.758,0.758,0.758,0.758,0.758,1.517,1.517,1.517,3.034,4.551,6.068,13.652,13.652,13.652,14.411,16.686,17.445,17.445,17.445,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.203,18.962,18.962,18.962,18.962,18.962,18.962,18.962,18.962,18.962,18.962,18.962,18.962,18.962,18.962,18.962,18.962,18.962,18.962,19.72,19.72,19.72,19.72,19.72,20.479,20.479,20.479,20.479,20.479,20.479,20.479,20.479,20.479,20.479,20.479,20.479,20.479,20.479,20.479,20.479,20.479,20.479,20.479,20.479,20.479,20.479,20.479,20.479,20.479,20.479,20.479,20.479,20.479,20.479,20.479,20.479,20.479,21.237,21.237,21.237,21.237,21.237,21.237,21.237,21.237,21.237,21.237,21.237,21.237,21.237,21.996,21.996,21.996,21.996,21.996,21.996,21.996,21.996,21.996,21.996,21.996,21.996,21.996,21.996,22.754,22.754,22.754,22.754,22.754,22.754,22.754,22.754,22.754,22.754,22.754,22.754,22.754,22.754,22.754,22.754,22.754,22.754,22.754,22.754,22.754,22.754,22.754,22.754,22.754,22.754,22.754,22.754,22.754,22.754,22.754,22.754,22.754,22.754,22.754,22.754,22.754,23.513,23.513,23.513,23.513,23.513,23.513,23.513,23.513,23.513,23.513,23.513,23.513,23.513,23.513,23.513,23.513],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.758,0,0,1.517,1.517,1.517,7.585,0,0,0.758,2.275,0.758,0,0,0.758,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.758,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.758,0,0,0,0,0.758,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.758,0,0,0,0,0,0,0,0,0,0,0,0,0.758,0,0,0,0,0,0,0,0,0,0,0,0,0,0.758,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.758,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.758,0.758,0.758,2.275,3.792,5.309,12.894,12.894,12.136,12.894,15.169,14.41,12.893,11.376,4.549,4.549,4.549,3.791,1.516,0.758,0.758,0.758,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.758,0.758,0.758,0.758,0.758,0.758,0.758,0.758,0,0,0,0,0,0,0,0,0,0,0.758,0.758,0.758,0.758,0.758,1.516,1.516,1.516,0.758,0.758,0.758,0.758,0.758,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.758,0.758,0.758,0.758,0.758,0.758,0.758,0.758,0,0,0,0,0,0.758,0.758,0.758,0.758,0.758,0.758,0.758,0.758,0,0,0,0,0,0,0.758,0.758,0.758,0.758,0.758,0.758,0.758,0.758,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.758,0.758,0.758,0.758,0.758,0.758,0.758,0.758,0,0,0,0,0,0,0,0],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.108,0.108,0.108,0.325,0.542,0.758,1.842,1.734,1.734,1.842,1.95,1.842,1.625,0.542,0.65,0.65,0.542,0.217,0.108,0.108,0.108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.108,0.108,0.108,0.108,0.108,0.108,0.108,0,0,0,0,0,0,0,0,0,0,0,0.108,0.108,0.108,0.108,0.108,0.217,0.217,0.108,0.108,0.108,0.108,0.108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.108,0.108,0.108,0.108,0.108,0.108,0.108,0,0,0,0,0,0,0.108,0.108,0.108,0.108,0.108,0.108,0.108,0,0,0,0,0,0,0,0.108,0.108,0.108,0.108,0.108,0.108,0.108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.108,0.108,0.108,0.108,0.108,0.108,0.108,0,0,0,0,0,0,0,0,0]},{"iso":"TGO","continent":"Africa","population":8278737,"name":"Togo","population_density":143.366,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,9,16,16,18,20,23,23,25,25,25,30,34,36,39,40,41,44,58,65,70,73,76,76,76,77,77,81,81,83,84,84,84,86,88,88,90,96,98,98,99,109,116,123,123,124,126,128,128,135,145,153,174,181,199,219,238,263,298,301,330,338,340,354,363,373,381,386,391,395,422,428,433,442,443,445,452,465,485,487,495,497,501,522,524,525,530,530,531,537,544,547,555,561,569,569,576,583,588,591,615,642,643,650,661,667,671,676,680,680,689,695,704,710,710,720,721,731,740,749,766,774,778,783,790,806,828,839,853,868,874,896,896,908,941,958,961,976,988,1001,1012,1028,1046,1060,1067,1070,1092,1104,1124,1130,1147,1154,1173,1190,1212,1239,1275,1277,1295,1309,1326,1326,1365,1390,1396,1400,1416,1434,1443,1457,1477,1488,1493,1513,1528,1537,1548,1555,1572,1578,1595,1608,1618,1640,1659,1666,1669,1683,1701,1707,1722,1736,1743,1749,1759,1784,1809,1818,1840,1854,1864,1881,1898,1907,1921,1935,1940,1949,1972,1983,1996,2027,2049,2057,2071,2104,2120,2139,2162,2187,2200,2204,2229,2238,2296,2312,2331,2357,2364,2381,2406,2442,2460,2483,2516,2523,2558,2593,2605,2627,2651,2675,2693,2722,2752,2771,2796,2829,2843,2854,2872,2889,2904,2926,2946,2962,2974,2997,3014,3039,3051,3051,3095,3111,3132,3151,3182,3202,3221,3251,3266,3295,3315,3330],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.121,0.121,0.121,0.121,0.121,0.121,0.121,0.121,0.121,0.121,0.121,0.121,0.121,0.121,1.087,1.933,1.933,2.174,2.416,2.778,2.778,3.02,3.02,3.02,3.624,4.107,4.348,4.711,4.832,4.952,5.315,7.006,7.851,8.455,8.818,9.18,9.18,9.18,9.301,9.301,9.784,9.784,10.026,10.146,10.146,10.146,10.388,10.63,10.63,10.871,11.596,11.838,11.838,11.958,13.166,14.012,14.857,14.857,14.978,15.22,15.461,15.461,16.307,17.515,18.481,21.018,21.863,24.037,26.453,28.748,31.768,35.996,36.358,39.861,40.827,41.069,42.76,43.847,45.055,46.022,46.625,47.229,47.713,50.974,51.699,52.303,53.39,53.511,53.752,54.598,56.168,58.584,58.825,59.792,60.033,60.516,63.053,63.295,63.415,64.019,64.019,64.14,64.865,65.711,66.073,67.039,67.764,68.73,68.73,69.576,70.421,71.025,71.388,74.287,77.548,77.669,78.514,79.843,80.568,81.051,81.655,82.138,82.138,83.225,83.95,85.037,85.762,85.762,86.97,87.091,88.298,89.386,90.473,92.526,93.493,93.976,94.58,95.425,97.358,100.015,101.344,103.035,104.847,105.572,108.229,108.229,109.679,113.665,115.718,116.081,117.892,119.342,120.912,122.241,124.174,126.348,128.039,128.884,129.247,131.904,133.354,135.77,136.494,138.548,139.393,141.688,143.742,146.399,149.661,154.009,154.251,156.425,158.116,160.169,160.169,164.88,167.9,168.625,169.108,171.041,173.215,174.302,175.993,178.409,179.738,180.342,182.757,184.569,185.656,186.985,187.831,189.884,190.609,192.662,194.233,195.44,198.098,200.393,201.238,201.601,203.292,205.466,206.191,208.003,209.694,210.539,211.264,212.472,215.492,218.512,219.599,222.256,223.947,225.155,227.209,229.262,230.349,232.04,233.731,234.335,235.422,238.201,239.529,241.1,244.844,247.502,248.468,250.159,254.145,256.078,258.373,261.151,264.171,265.741,266.224,269.244,270.331,277.337,279.27,281.565,284.705,285.551,287.604,290.624,294.973,297.147,299.925,303.911,304.757,308.984,313.212,314.662,317.319,320.218,323.117,325.291,328.794,332.418,334.713,337.733,341.719,343.41,344.739,346.913,348.966,350.778,353.436,355.851,357.784,359.234,362.012,364.065,367.085,368.534,368.534,373.849,375.782,378.319,380.614,384.358,386.774,389.069,392.693,394.505,398.008,400.423,402.235],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.966,0.846,0,0.242,0.242,0.362,0,0.242,0,0,0.604,0.483,0.242,0.362,0.121,0.121,0.362,1.691,0.846,0.604,0.362,0.362,0,0,0.121,0,0.483,0,0.242,0.121,0,0,0.242,0.242,0,0.242,0.725,0.242,0,0.121,1.208,0.846,0.846,0,0.121,0.242,0.242,0,0.846,1.208,0.966,2.537,0.846,2.174,2.416,2.295,3.02,4.228,0.362,3.503,0.966,0.242,1.691,1.087,1.208,0.966,0.604,0.604,0.483,3.261,0.725,0.604,1.087,0.121,0.242,0.846,1.57,2.416,0.242,0.966,0.242,0.483,2.537,0.242,0.121,0.604,0,0.121,0.725,0.846,0.362,0.966,0.725,0.966,0,0.846,0.846,0.604,0.362,2.899,3.261,0.121,0.846,1.329,0.725,0.483,0.604,0.483,0,1.087,0.725,1.087,0.725,0,1.208,0.121,1.208,1.087,1.087,2.053,0.966,0.483,0.604,0.846,1.933,2.657,1.329,1.691,1.812,0.725,2.657,0,1.449,3.986,2.053,0.362,1.812,1.449,1.57,1.329,1.933,2.174,1.691,0.846,0.362,2.657,1.449,2.416,0.725,2.053,0.846,2.295,2.053,2.657,3.261,4.348,0.242,2.174,1.691,2.053,0,4.711,3.02,0.725,0.483,1.933,2.174,1.087,1.691,2.416,1.329,0.604,2.416,1.812,1.087,1.329,0.846,2.053,0.725,2.053,1.57,1.208,2.657,2.295,0.846,0.362,1.691,2.174,0.725,1.812,1.691,0.846,0.725,1.208,3.02,3.02,1.087,2.657,1.691,1.208,2.053,2.053,1.087,1.691,1.691,0.604,1.087,2.778,1.329,1.57,3.745,2.657,0.966,1.691,3.986,1.933,2.295,2.778,3.02,1.57,0.483,3.02,1.087,7.006,1.933,2.295,3.141,0.846,2.053,3.02,4.348,2.174,2.778,3.986,0.846,4.228,4.228,1.449,2.657,2.899,2.899,2.174,3.503,3.624,2.295,3.02,3.986,1.691,1.329,2.174,2.053,1.812,2.657,2.416,1.933,1.449,2.778,2.053,3.02,1.449,0,5.315,1.933,2.537,2.295,3.745,2.416,2.295,3.624,1.812,3.503,2.416,1.812],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.966,1.812,1.812,2.054,2.296,2.658,2.658,2.9,1.934,1.088,1.692,1.933,1.933,1.933,2.054,1.933,2.295,3.986,4.228,4.349,4.469,4.469,4.348,4.227,3.986,2.295,1.932,1.328,1.208,0.967,0.967,0.967,1.088,1.33,0.847,1.089,1.572,1.693,1.693,1.814,2.78,3.384,4.23,3.988,3.384,3.384,3.626,3.505,3.143,3.505,3.625,6.162,6.887,8.819,10.993,13.288,15.462,18.482,17.878,18.844,18.964,17.032,16.307,15.099,13.287,10.025,10.267,7.368,6.885,9.904,8.938,8.455,8.334,7.489,7.127,7.369,8.456,7.611,7.128,7.49,6.645,7.007,9.302,8.698,7.249,5.437,5.195,4.35,4.833,5.196,3.021,3.745,4.349,4.711,4.711,5.436,5.557,5.315,5.315,7.248,9.784,8.939,9.785,10.268,10.147,10.026,10.268,7.852,4.591,5.557,5.436,5.194,5.194,4.711,5.315,4.953,6.161,6.161,6.523,7.489,7.73,8.213,7.609,8.334,9.059,10.629,10.871,10.509,11.355,11.597,13.65,12.804,12.32,13.649,14.373,13.044,13.044,13.768,12.681,14.01,14.494,12.682,12.32,12.804,11.354,12.562,12.441,13.528,12.32,12.199,11.354,12.803,14.494,14.494,16.306,18.238,17.755,17.876,18.721,18.479,16.426,18.48,18.239,14.616,14.857,14.616,15.099,14.133,15.824,13.529,11.838,11.717,13.65,13.529,12.442,12.684,11.839,11.476,10.872,12.321,11.475,10.871,12.441,13.407,13.407,11.716,12.682,12.803,11.958,12.562,11.596,10.147,10.026,10.872,12.201,13.047,13.409,14.254,14.254,14.616,15.944,16.789,14.856,13.527,14.131,12.078,11.474,13.044,12.32,11.837,14.495,15.461,14.736,15.823,18.722,17.877,18.843,20.051,19.326,18.239,17.756,19.085,16.186,21.259,20.897,20.414,20.535,19.811,21.381,21.381,24.642,19.81,20.655,22.346,20.051,23.433,25.608,24.037,22.346,23.071,23.192,21.38,24.037,23.433,21.5,23.071,24.4,23.192,21.622,21.622,20.172,18.36,18.722,18.118,16.065,15.823,17.272,17.151,18.118,17.755,15.098,17.997,17.997,19.085,18.602,20.294,19.69,20.536,24.16,20.657,22.227,22.106,21.623],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.138,0.259,0.259,0.293,0.328,0.38,0.38,0.276,0.155,0.155,0.207,0.242,0.224,0.276,0.259,0.276,0.328,0.483,0.535,0.587,0.587,0.621,0.604,0.552,0.328,0.207,0.19,0.138,0.121,0.138,0.138,0.121,0.155,0.121,0.121,0.121,0.207,0.242,0.242,0.224,0.362,0.483,0.569,0.466,0.449,0.483,0.5,0.328,0.328,0.38,0.518,0.863,0.949,1.225,1.57,1.777,2.036,2.502,2.192,2.571,2.399,2.088,2.002,1.726,1.294,1.38,0.966,0.915,0.949,1.173,1.122,1.035,1.053,0.984,0.932,0.984,0.742,0.984,0.932,0.915,0.932,0.966,1.208,1.018,0.69,0.742,0.604,0.587,0.621,0.38,0.397,0.518,0.535,0.673,0.656,0.673,0.673,0.707,0.621,0.932,1.26,1.277,1.277,1.346,1.363,1.38,1.053,0.656,0.638,0.673,0.587,0.638,0.673,0.587,0.69,0.707,0.725,0.777,0.777,0.966,1.104,1.001,1.07,1.018,1.139,1.363,1.26,1.363,1.553,1.57,1.829,1.553,1.38,1.76,1.812,1.605,1.76,1.588,1.812,1.795,1.501,1.519,1.708,1.57,1.415,1.57,1.588,1.657,1.449,1.501,1.501,1.777,1.691,1.864,1.984,2.502,2.243,2.433,2.347,2.347,1.967,2.174,1.984,2.053,1.812,1.846,1.864,2.019,1.588,1.501,1.588,1.605,1.674,1.622,1.622,1.57,1.346,1.449,1.467,1.415,1.38,1.398,1.588,1.795,1.622,1.57,1.519,1.605,1.536,1.415,1.329,1.329,1.38,1.311,1.432,1.76,1.657,1.795,1.915,1.984,2.105,1.967,1.691,1.777,1.639,1.484,1.467,1.57,1.467,1.536,1.829,1.967,2.019,2.105,2.278,2.364,2.468,2.33,2.381,2.468,2.295,2.157,2.036,2.709,2.588,2.485,2.709,2.761,2.623,2.899,2.519,2.554,2.623,2.744,2.744,3.054,3.227,2.813,2.882,2.899,2.744,2.934,2.83,2.744,2.864,2.916,3.072,2.899,2.778,2.588,2.364,2.295,2.243,2.019,2.053,2.071,2.157,2.157,2.33,2.157,1.812,2.295,2.364,2.33,2.364,2.468,2.606,2.934,2.692,2.675,2.813,2.83,2.554]},{"iso":"TTO","continent":"North America","population":1399491,"name":"Trinidad and Tobago","population_density":266.886,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,4,5,7,9,9,49,50,51,57,60,65,66,74,78,82,87,90,94,98,103,104,105,107,107,109,109,112,113,113,113,114,114,114,114,114,114,115,115,115,115,115,115,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,123,123,123,123,123,123,123,123,123,123,123,123,124,126,126,126,130,130,130,130,130,133,133,133,133,133,133,133,133,133,133,133,133,136,137,137,137,139,141,141,142,147,147,148,153,156,164,169,173,182,182,194,199,210,225,275,279,281,300,326,404,426,497,552,588,629,686,767,864,930,1007,1099,1252,1411,1429,1554,1645,1683,1759,1797,1920,1984,2040,2230,2250,2277,2391,2588,2698,2825,2993,3042,3141,3223,3327,3434,3651,3853,3901,3945,4026,4136,4235,4277,4312,4362,4386,4463,4531,4570,4629,4715,4763,4767,4846,4887,4963,5021,5043,5043,5116,5127,5154,5194,5241,5281,5297,5298,5333,5392,5446,5487,5503,5511,5535,5568,5594,5636,5668,5692,5704,5704,5754,5764,5774,5798,5838,5849,5849,5880,5904,5930,5980,6077,6080,6096,6135,6180,6233,6261,6324,6450,6475,6488,6503,6570,6586,6630,6660,6669,6685,6704,6725,6735,6751,6767,6775,6782,6808,6833,6852,6864,6879,6885,6900,6917,6940],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.429,1.429,2.858,3.573,5.002,6.431,6.431,35.013,35.727,36.442,40.729,42.873,46.445,47.16,52.876,55.735,58.593,62.165,64.309,67.167,70.025,73.598,74.313,75.027,76.456,76.456,77.885,77.885,80.029,80.744,80.744,80.744,81.458,81.458,81.458,81.458,81.458,81.458,82.173,82.173,82.173,82.173,82.173,82.173,82.887,82.887,82.887,82.887,82.887,82.887,82.887,82.887,82.887,82.887,82.887,82.887,82.887,82.887,82.887,82.887,82.887,82.887,82.887,82.887,82.887,82.887,82.887,82.887,82.887,82.887,82.887,82.887,82.887,82.887,82.887,82.887,82.887,83.602,83.602,83.602,83.602,83.602,83.602,83.602,83.602,83.602,83.602,83.602,83.602,83.602,83.602,83.602,87.889,87.889,87.889,87.889,87.889,87.889,87.889,87.889,87.889,87.889,87.889,87.889,88.604,90.033,90.033,90.033,92.891,92.891,92.891,92.891,92.891,95.035,95.035,95.035,95.035,95.035,95.035,95.035,95.035,95.035,95.035,95.035,95.035,97.178,97.893,97.893,97.893,99.322,100.751,100.751,101.465,105.038,105.038,105.753,109.325,111.469,117.185,120.758,123.616,130.047,130.047,138.622,142.195,150.055,160.773,196.5,199.358,200.787,214.364,232.942,288.676,304.396,355.129,394.429,420.153,449.449,490.178,548.056,617.367,664.527,719.547,785.286,894.611,1008.224,1021.086,1110.404,1175.427,1202.58,1256.886,1284.038,1371.927,1417.658,1457.673,1593.436,1607.727,1627.02,1708.478,1849.244,1927.844,2018.591,2138.635,2173.647,2244.387,2302.98,2377.293,2453.749,2608.806,2753.144,2787.442,2818.882,2876.76,2955.36,3026.1,3056.111,3081.12,3116.847,3133.997,3189.017,3237.606,3265.473,3307.631,3369.082,3403.38,3406.238,3462.688,3491.984,3546.289,3587.733,3603.453,3603.453,3655.615,3663.475,3682.768,3711.349,3744.933,3773.515,3784.948,3785.662,3810.671,3852.829,3891.415,3920.711,3932.144,3937.86,3955.009,3978.589,3997.168,4027.178,4050.044,4067.193,4075.768,4075.768,4111.495,4118.64,4125.786,4142.935,4171.517,4179.377,4179.377,4201.528,4218.677,4237.255,4272.982,4342.293,4344.437,4355.869,4383.737,4415.891,4453.762,4473.769,4518.786,4608.818,4626.682,4635.971,4646.689,4694.564,4705.997,4737.437,4758.873,4765.304,4776.737,4790.313,4805.319,4812.464,4823.897,4835.329,4841.046,4846.048,4864.626,4882.489,4896.066,4904.64,4915.359,4919.646,4930.364,4942.511,4958.946],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.429,0.715,1.429,1.429,0,28.582,0.715,0.715,4.287,2.144,3.573,0.715,5.716,2.858,2.858,3.573,2.144,2.858,2.858,3.573,0.715,0.715,1.429,0,1.429,0,2.144,0.715,0,0,0.715,0,0,0,0,0,0.715,0,0,0,0,0,0.715,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.715,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4.287,0,0,0,0,0,0,0,0,0,0,0,0.715,1.429,0,0,2.858,0,0,0,0,2.144,0,0,0,0,0,0,0,0,0,0,0,2.144,0.715,0,0,1.429,1.429,0,0.715,3.573,0,0.715,3.573,2.144,5.716,3.573,2.858,6.431,0,8.575,3.573,7.86,10.718,35.727,2.858,1.429,13.576,18.578,55.735,15.72,50.733,39.3,25.724,29.296,40.729,57.878,69.311,47.16,55.02,65.738,109.325,113.613,12.862,89.318,65.024,27.153,54.305,27.153,87.889,45.731,40.015,135.764,14.291,19.293,81.458,140.765,78.6,90.747,120.044,35.013,70.74,58.593,74.313,76.456,155.056,144.338,34.298,31.44,57.878,78.6,70.74,30.011,25.009,35.727,17.149,55.02,48.589,27.867,42.158,61.451,34.298,2.858,56.449,29.296,54.305,41.444,15.72,0,52.162,7.86,19.293,28.582,33.584,28.582,11.433,0.715,25.009,42.158,38.585,29.296,11.433,5.716,17.149,23.58,18.578,30.011,22.865,17.149,8.575,0,35.727,7.145,7.145,17.149,28.582,7.86,0,22.151,17.149,18.578,35.727,69.311,2.144,11.433,27.867,32.155,37.871,20.007,45.016,90.033,17.864,9.289,10.718,47.875,11.433,31.44,21.436,6.431,11.433,13.576,15.005,7.145,11.433,11.433,5.716,5.002,18.578,17.864,13.576,8.575,10.718,4.287,10.718,12.147,16.435],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.429,2.144,3.573,5.002,5.002,33.584,34.299,35.014,37.872,39.301,41.445,40.731,46.447,20.723,22.866,25.724,23.581,24.295,23.58,26.438,21.437,19.294,17.865,14.292,13.577,10.719,10.005,7.147,6.432,5.717,5.003,5.003,3.574,3.574,1.43,0.715,1.43,1.43,0.715,0.715,0.715,0.715,1.43,1.43,0.715,0.715,0.715,0.715,0.715,0.715,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.715,0.715,0.715,0.715,0.715,0.715,0.715,0.715,0,0,0,0,0,0,0,4.287,4.287,4.287,4.287,4.287,4.287,4.287,4.287,0,0,0,0,0.715,2.144,2.144,2.144,5.002,5.002,5.002,5.002,4.287,5.002,5.002,5.002,2.144,2.144,2.144,2.144,2.144,0,0,0,0,2.144,2.859,2.859,2.859,4.288,5.717,5.717,6.432,7.861,7.146,7.861,11.434,12.149,16.436,20.009,22.152,25.01,25.01,32.87,32.87,38.586,43.588,75.742,75.742,70.74,84.316,94.319,146.481,154.341,194.356,197.929,220.795,248.662,275.815,315.115,328.691,360.131,364.418,390.856,474.457,558.774,530.907,562.347,558.06,538.053,537.338,498.753,477.317,409.435,436.588,483.034,432.301,424.441,451.594,565.206,555.917,600.933,680.962,580.211,636.66,675.96,668.815,604.506,680.962,734.553,648.807,645.234,632.372,652.379,648.806,602.361,472.314,363.703,346.554,370.134,360.845,310.112,281.53,312.97,322.259,289.39,328.69,302.966,308.682,322.259,295.821,234.37,252.234,257.236,220.08,219.366,198.645,185.783,181.496,182.211,155.058,189.356,208.648,209.362,187.211,164.345,170.061,192.926,186.495,174.348,158.628,146.481,143.623,137.907,156.485,140.05,128.617,115.755,121.472,112.183,103.608,125.759,107.181,118.614,147.196,199.358,172.92,176.493,204.36,214.364,235.086,236.515,245.804,266.526,282.246,280.102,262.953,278.673,252.235,263.668,240.088,156.486,150.055,154.342,158.629,117.899,117.899,97.892,82.172,80.743,87.888,92.176,90.747,92.177,91.462,84.316,89.318,96.463,94.32],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.715,4.798,4.9,4.798,5.308,5.41,5.716,5.818,2.552,2.858,3.164,3.062,3.062,2.96,3.266,2.96,2.654,2.348,2.042,1.735,1.531,1.123,0.919,0.919,0.817,0.612,0.715,0.51,0.51,0.204,0.102,0.102,0.204,0.102,0.102,0.102,0.102,0.102,0.204,0.102,0.102,0.102,0.102,0.102,0.102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.102,0.102,0.102,0.102,0.102,0.102,0.102,0,0,0,0,0,0,0,0,0.612,0.612,0.612,0.612,0.612,0.612,0.612,0,0,0,0,0,0.102,0.306,0.306,0.306,0.715,0.715,0.715,0.612,0.408,0.715,0.715,0.306,0.306,0.306,0.306,0.306,0,0,0,0,0,0.306,0.408,0.408,0.408,0.612,0.817,0.817,0.612,1.021,1.021,1.123,1.429,1.531,2.348,2.756,2.654,3.573,3.471,4.185,4.389,4.696,5.716,10.412,9.902,10.106,10.82,12.964,19.803,20.518,22.661,27.867,31.338,33.584,36.748,37.054,44.71,44.2,46.445,52.162,63.595,74.006,67.576,70.434,72.986,69.005,67.371,55.632,51.958,56.653,49.61,59.716,57.878,52.876,60.634,68.188,72.884,80.131,77.885,80.846,88.195,84.929,75.436,75.129,84.316,87.787,87.685,82.071,81.969,82.581,81.764,63.901,46.854,47.058,45.016,44.608,40.321,34.196,35.931,41.137,40.933,38.892,39.096,36.34,40.117,40.015,33.482,28.582,35.625,28.684,27.255,23.58,22.457,24.295,25.928,18.578,21.028,24.295,25.724,25.111,22.661,21.845,24.192,23.988,20.62,19.395,18.476,19.293,19.701,17.251,18.986,17.353,14.087,13.27,14.903,14.801,14.801,12.862,14.291,15.924,18.578,24.397,23.58,25.213,26.03,28.174,30.93,28.684,25.213,37.769,38.688,36.034,32.971,34.4,33.175,31.236,21.436,19.803,20.109,20.518,15.822,15.21,12.351,10.922,10.82,9.902,10.616,11.024,11.943,11.535,11.433,11.229,12.045,11.126,10.922]},{"iso":"TUN","continent":"Africa","population":11818618,"name":"Tunisia","population_density":74.228,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,5,7,7,16,18,18,20,24,29,39,54,60,75,89,114,173,197,227,278,312,312,394,423,455,495,553,574,596,623,628,643,671,685,707,726,747,780,822,864,864,879,884,884,909,918,922,939,949,967,975,980,994,998,1009,1013,1018,1022,1025,1026,1030,1032,1032,1032,1032,1032,1032,1035,1037,1037,1043,1044,1045,1046,1048,1048,1051,1051,1051,1051,1068,1071,1076,1077,1084,1086,1087,1087,1087,1087,1087,1087,1087,1087,1087,1093,1094,1096,1110,1125,1128,1132,1146,1156,1157,1159,1159,1160,1162,1164,1168,1169,1172,1174,1175,1178,1181,1186,1188,1199,1205,1221,1231,1240,1245,1263,1302,1306,1319,1327,1336,1348,1374,1381,1389,1394,1406,1425,1443,1452,1455,1468,1488,1514,1535,1552,1561,1565,1584,1601,1642,1656,1678,1697,1717,1738,1780,1847,1903,2023,2107,2185,2314,2427,2543,2607,2738,2818,2893,3069,3206,3323,3461,3572,3685,3803,3963,4196,4394,4542,4776,5041,5124,5417,5417,5882,6259,6635,6635,7382,7623,8100,8570,8570,9110,10732,11260,11260,12479,13305,14392,14392,16114,16114,17405,18413,18413,19721,20944,22230,22230,22230,24542,26899,26899,31259,32556,32556,32556,34790,34790,34790,40542,40542,42727,44450,45892,45892,47214,48799,48799,52399,52399,54278,54278,58029,59813,61115,61906,63126,64363,66334,66334,69543,71119,71569,72993,74522,76106,77668,79339,80404,81003,81723,83772,83772,86265,87471,88711,89196,90213,91307,92475,93770,94980,96251,96769,96769,99280,99280,101900,102991,104002,104329,105445,106856,107814,109104,110393,111361,111361,113241,114547,115966],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.085,0.085,0.085,0.085,0.169,0.169,0.423,0.592,0.592,1.354,1.523,1.523,1.692,2.031,2.454,3.3,4.569,5.077,6.346,7.53,9.646,14.638,16.669,19.207,23.522,26.399,26.399,33.337,35.791,38.499,41.883,46.791,48.567,50.429,52.713,53.137,54.406,56.775,57.959,59.821,61.429,63.205,65.998,69.551,73.105,73.105,74.374,74.797,74.797,76.913,77.674,78.013,79.451,80.297,81.82,82.497,82.92,84.105,84.443,85.374,85.712,86.135,86.474,86.728,86.812,87.151,87.32,87.32,87.32,87.32,87.32,87.32,87.574,87.743,87.743,88.251,88.335,88.42,88.504,88.674,88.674,88.927,88.927,88.927,88.927,90.366,90.62,91.043,91.127,91.72,91.889,91.974,91.974,91.974,91.974,91.974,91.974,91.974,91.974,91.974,92.481,92.566,92.735,93.92,95.189,95.443,95.781,96.966,97.812,97.896,98.066,98.066,98.15,98.319,98.489,98.827,98.912,99.166,99.335,99.419,99.673,99.927,100.35,100.519,101.45,101.958,103.312,104.158,104.919,105.342,106.865,110.165,110.504,111.604,112.28,113.042,114.057,116.257,116.85,117.526,117.949,118.965,120.572,122.095,122.857,123.111,124.211,125.903,128.103,129.88,131.318,132.08,132.418,134.026,135.464,138.933,140.118,141.979,143.587,145.279,147.056,150.61,156.279,161.017,171.171,178.278,184.878,195.793,205.354,215.169,220.584,231.668,238.437,244.783,259.675,271.267,281.167,292.843,302.235,311.796,321.78,335.318,355.033,371.786,384.309,404.108,426.53,433.553,458.345,458.345,497.689,529.588,561.402,561.402,624.608,644.999,685.359,725.127,725.127,770.818,908.059,952.734,952.734,1055.876,1125.766,1217.74,1217.74,1363.442,1363.442,1472.676,1557.966,1557.966,1668.638,1772.119,1880.931,1880.931,1880.931,2076.554,2275.985,2275.985,2644.895,2754.637,2754.637,2754.637,2943.661,2943.661,2943.661,3430.35,3430.35,3615.228,3761.015,3883.026,3883.026,3994.883,4128.994,4128.994,4433.598,4433.598,4592.584,4592.584,4909.965,5060.913,5171.078,5238.007,5341.234,5445.899,5612.67,5612.67,5884.191,6017.539,6055.615,6176.103,6305.475,6439.501,6571.665,6713.052,6803.164,6853.847,6914.768,7088.138,7088.138,7299.077,7401.119,7506.038,7547.075,7633.126,7725.692,7824.519,7934.092,8036.473,8144.015,8187.844,8187.844,8400.305,8400.305,8621.989,8714.301,8799.844,8827.513,8921.94,9041.328,9122.386,9231.536,9340.601,9422.506,9422.506,9581.577,9692.081,9812.146],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.085,0,0.254,0.169,0,0.762,0.169,0,0.169,0.338,0.423,0.846,1.269,0.508,1.269,1.185,2.115,4.992,2.031,2.538,4.315,2.877,0,6.938,2.454,2.708,3.384,4.908,1.777,1.861,2.285,0.423,1.269,2.369,1.185,1.861,1.608,1.777,2.792,3.554,3.554,0,1.269,0.423,0,2.115,0.762,0.338,1.438,0.846,1.523,0.677,0.423,1.185,0.338,0.931,0.338,0.423,0.338,0.254,0.085,0.338,0.169,0,0,0,0,0,0.254,0.169,0,0.508,0.085,0.085,0.085,0.169,0,0.254,0,0,0,1.438,0.254,0.423,0.085,0.592,0.169,0.085,0,0,0,0,0,0,0,0,0.508,0.085,0.169,1.185,1.269,0.254,0.338,1.185,0.846,0.085,0.169,0,0.085,0.169,0.169,0.338,0.085,0.254,0.169,0.085,0.254,0.254,0.423,0.169,0.931,0.508,1.354,0.846,0.762,0.423,1.523,3.3,0.338,1.1,0.677,0.762,1.015,2.2,0.592,0.677,0.423,1.015,1.608,1.523,0.762,0.254,1.1,1.692,2.2,1.777,1.438,0.762,0.338,1.608,1.438,3.469,1.185,1.861,1.608,1.692,1.777,3.554,5.669,4.738,10.153,7.107,6.6,10.915,9.561,9.815,5.415,11.084,6.769,6.346,14.892,11.592,9.9,11.676,9.392,9.561,9.984,13.538,19.715,16.753,12.523,19.799,22.422,7.023,24.791,0,39.345,31.899,31.814,0,63.205,20.392,40.36,39.768,0,45.691,137.241,44.675,0,103.142,69.89,91.974,0,145.702,0,109.234,85.289,0,110.673,103.481,108.811,0,0,195.624,199.431,0,368.909,109.742,0,0,189.024,0,0,486.69,0,184.878,145.787,122.011,0,111.857,134.11,0,304.604,0,158.986,0,317.381,150.948,110.165,66.928,103.227,104.665,166.771,0,271.521,133.349,38.076,120.488,129.372,134.026,132.164,141.387,90.112,50.683,60.921,173.371,0,210.938,102.042,104.919,41.037,86.051,92.566,98.827,109.573,102.381,107.542,43.829,0,212.461,0,221.684,92.312,85.543,27.668,94.427,119.388,81.059,109.15,109.065,81.905,0,159.071,110.504,120.065],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.085,0.085,0.339,0.508,0.508,1.27,1.439,1.439,1.523,1.861,2.03,2.707,3.976,3.722,4.822,6.007,7.953,12.607,14.215,15.907,18.953,21.322,20.053,25.806,26.145,23.861,25.214,27.584,25.046,24.03,26.315,19.8,18.615,18.276,16.077,13.03,12.861,12.777,13.284,16.415,18.7,16.331,16.415,14.977,13.369,13.707,11.677,8.461,6.345,7.191,7.445,7.699,8.122,7.192,6.768,7.361,6.261,5.838,4.653,4.23,3.892,3.045,2.876,1.945,1.607,1.184,0.846,0.592,0.761,0.592,0.423,0.931,1.016,1.101,1.186,1.355,1.101,1.186,1.186,0.678,0.593,1.946,2.115,2.369,2.454,2.792,2.961,3.046,3.046,1.608,1.354,0.931,0.846,0.254,0.085,0,0.508,0.593,0.762,1.947,3.216,3.47,3.808,4.993,5.331,5.331,5.331,4.146,2.962,2.877,2.708,1.861,1.1,1.269,1.269,1.354,1.523,1.608,1.862,1.693,2.539,2.793,3.978,4.739,5.247,5.416,6.516,9.647,9.054,9.646,8.969,8.885,9.138,10.915,9.984,7.361,7.446,7.361,8.292,9.053,8.8,6.854,7.362,8.377,10.154,10.916,10.746,9.985,9.561,10.915,11.253,13.03,12.015,12.099,12.269,13.199,14.638,16.584,20.815,22.084,31.052,36.298,41.29,50.513,58.297,64.558,64.304,70.65,67.266,66.505,74.797,75.474,75.813,77.674,81.651,80.128,83.343,90.535,95.358,100.519,103.142,111.265,124.295,121.757,136.564,123.026,142.656,157.802,177.093,157.294,198.077,211.446,227.015,266.783,227.438,241.23,346.657,391.332,328.127,410.877,440.407,492.613,492.613,592.624,455.383,519.942,605.231,502.089,542.872,554.379,663.19,517.488,517.488,603.878,718.02,718.02,976.256,982.517,873.706,873.706,1062.73,867.106,667.675,1154.365,785.456,860.592,1006.379,1128.39,939.366,1051.223,1185.333,698.643,1003.247,818.369,831.568,709.557,1026.938,1066.029,1042.084,1109.012,907.635,1012.3,1020.085,1020.085,974.225,956.626,884.537,938.097,964.242,993.603,958.996,1100.383,918.974,836.308,859.153,912.036,782.664,859.576,829.454,792.986,743.911,779.279,810.924,736.38,845.953,737.396,742.896,681.806,640.769,767.179,674.613,797.47,780.209,763.371,683.497,734.095,853.483,722.081,831.231,718.612,708.205,622.662,754.065,770.142,770.819],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.048,0.073,0.073,0.181,0.205,0.193,0.218,0.23,0.266,0.387,0.459,0.508,0.689,0.834,1.088,1.741,1.91,2.091,2.635,2.865,2.696,3.384,3.022,3.119,3.239,3.324,3.167,3.433,2.768,2.478,2.272,2.127,1.596,1.608,1.571,1.499,1.837,2.164,2.333,2.164,2.079,1.91,1.656,1.559,1.16,0.701,0.907,0.846,1.003,1.1,0.858,0.919,0.919,0.846,0.774,0.616,0.568,0.544,0.387,0.387,0.278,0.23,0.169,0.121,0.085,0.073,0.06,0.06,0.06,0.133,0.145,0.157,0.169,0.157,0.133,0.169,0.097,0.085,0.073,0.266,0.278,0.338,0.314,0.399,0.423,0.435,0.23,0.193,0.133,0.121,0.036,0.012,0,0,0.073,0.085,0.109,0.278,0.459,0.496,0.544,0.641,0.749,0.737,0.592,0.411,0.387,0.363,0.218,0.145,0.145,0.157,0.181,0.181,0.193,0.205,0.218,0.23,0.326,0.375,0.556,0.641,0.713,0.713,0.907,1.245,1.221,1.185,1.16,1.16,1.245,1.342,0.955,1.003,0.907,0.955,1.076,1.148,0.943,0.894,0.955,1.136,1.305,1.33,1.318,1.318,1.33,1.402,1.366,1.547,1.463,1.523,1.644,1.837,1.861,2.164,2.478,2.986,4.17,4.956,5.657,6.962,7.821,8.413,8.51,8.643,8.594,8.558,9.126,9.416,9.428,10.323,10.081,10.48,11,10.806,11.967,12.946,13.067,14.553,16.391,15.968,17.575,14.759,17.986,20.754,22.471,19.267,27.293,26.665,32.431,32.491,27.934,29.916,49.522,46.875,43.962,52.931,57.234,70.373,63.846,65.055,58.673,74.277,71.727,61.743,64.414,79.197,73.927,73.927,58.322,74.084,102.574,86.764,124.682,124.815,124.815,124.815,123.872,95.382,95.382,112.208,96.531,122.942,143.768,134.195,134.195,150.175,99.806,99.806,116.91,96.083,101.365,101.365,130.726,133.131,148.869,114.916,129.662,121.902,145.726,100.386,117.611,120.923,116.801,119.267,122.797,118.119,136.999,118.409,112.232,114.033,105.524,111.809,92.663,103.916,98.295,100.411,99.033,102.623,91.079,105.197,90.716,90.765,91.139,91.538,79.245,96.373,82.255,98.271,96.833,93.69,91.381,104.871,91.575,103.154,87.078,89.471,88.952,84.999,94.234,92.965,98.537]},{"iso":"TUR","continent":"Asia","population":84339067,"name":"Turkey","population_density":104.914,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,5,5,6,18,47,98,192,359,670,1236,1529,1872,2433,3629,5698,7402,9217,10827,13531,15679,18135,20921,23934,27069,30217,34109,38226,42282,47029,52167,56956,61049,65111,69392,74193,78546,82329,86306,90980,95591,98674,101790,104912,107773,110130,112261,114653,117589,120204,122392,124375,126045,127659,129491,131744,133721,135569,137115,138657,139771,141475,143114,144749,146457,148067,149435,150593,151615,152587,153548,154500,155686,156827,157814,158762,159797,160979,162120,163103,163942,164769,165555,166422,167410,168340,169218,170132,171121,172114,173036,174023,175218,176677,178239,179831,181298,182727,184031,185245,186493,187685,188897,190165,191657,193115,194511,195883,197239,198613,199906,201098,202284,203456,204610,205758,206844,207897,208938,209962,210965,211981,212993,214001,214993,215940,216873,217799,218717,219641,220572,221500,222402,223315,224252,225173,226100,227019,227982,228924,229891,230873,231869,232856,233851,234934,236112,237265,238450,239622,240804,241997,243180,244392,245635,246861,248117,249309,250542,251805,253108,254520,255723,257032,258249,259692,261194,262507,263998,265515,267064,268546,270133,271705,273301,274943,276555,278228,279806,281509,283270,284943,286455,288126,289635,291162,292878,294620,296391,298039,299810,301348,302867,304610,306302,308069,309790,311455,312966,314433,315845,317272,318663,320070,321512,323014,324443,326046,327557,329138,330753,332382,334031,335533,337147,338779,340450,342143,343955,345678,347493,349519,351413,353426,355528,357693,359784,361801,363999,366208,368513,370832,373154,375367,377473,379775,382118,384509,386820,389256,391739,394255,396831,399360,402053,404894,407939,411055,414278,417594,421413,425628,430170,435273,440805,446822,453535,460916,467730,503738,548244,578347,607628,638847,668957,700880,733261,765997,797893,828295,860432,893630,925342,1748567,1780673,1809809,1836728,1866345,1898447,1928165,1955680],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.012,0.012,0.059,0.059,0.071,0.213,0.557,1.162,2.277,4.257,7.944,14.655,18.129,22.196,28.848,43.029,67.561,87.765,109.285,128.375,160.436,185.904,215.025,248.058,283.783,320.954,358.28,404.427,453.242,501.334,557.618,618.539,675.322,723.852,772.015,822.774,879.699,931.312,976.167,1023.322,1078.741,1133.413,1169.968,1206.914,1243.931,1277.854,1305.801,1331.068,1359.429,1394.241,1425.247,1451.19,1474.702,1494.503,1513.64,1535.362,1562.076,1585.517,1607.428,1625.759,1644.042,1657.251,1677.455,1696.889,1716.275,1736.526,1755.616,1771.836,1785.566,1797.684,1809.209,1820.603,1831.891,1845.954,1859.482,1871.185,1882.425,1894.697,1908.712,1922.241,1933.896,1943.844,1953.65,1962.969,1973.249,1984.964,1995.991,2006.401,2017.238,2028.965,2040.739,2051.671,2063.374,2077.543,2094.842,2113.362,2132.238,2149.633,2166.576,2182.037,2196.432,2211.229,2225.363,2239.733,2254.768,2272.458,2289.746,2306.298,2322.565,2338.643,2354.935,2370.266,2384.399,2398.461,2412.358,2426.041,2439.652,2452.529,2465.014,2477.357,2489.499,2501.391,2513.438,2525.437,2537.389,2549.151,2560.379,2571.442,2582.421,2593.306,2604.262,2615.3,2626.304,2636.999,2647.824,2658.934,2669.854,2680.845,2691.742,2703.16,2714.329,2725.795,2737.438,2749.248,2760.951,2772.748,2785.589,2799.557,2813.228,2827.278,2841.174,2855.189,2869.335,2883.361,2897.732,2912.47,2927.007,2941.899,2956.032,2970.652,2985.627,3001.077,3017.819,3032.082,3047.603,3062.033,3079.142,3096.951,3112.52,3130.198,3148.185,3166.552,3184.123,3202.94,3221.579,3240.503,3259.972,3279.085,3298.922,3317.632,3337.824,3358.704,3378.541,3396.469,3416.282,3434.174,3452.279,3472.626,3493.28,3514.279,3533.819,3554.818,3573.054,3591.064,3611.731,3631.793,3652.744,3673.149,3692.891,3710.807,3728.201,3744.943,3761.863,3778.356,3795.038,3812.136,3829.945,3846.889,3865.895,3883.811,3902.557,3921.706,3941.021,3960.573,3978.382,3997.519,4016.869,4036.682,4056.756,4078.241,4098.67,4120.19,4144.212,4166.669,4190.537,4215.46,4241.131,4265.923,4289.839,4315.9,4342.092,4369.422,4396.918,4424.45,4450.69,4475.66,4502.955,4530.735,4559.085,4586.487,4615.37,4644.811,4674.643,4705.186,4735.172,4767.103,4800.788,4836.892,4873.839,4912.053,4951.371,4996.652,5046.629,5100.483,5160.989,5226.581,5297.924,5377.52,5465.036,5545.828,5972.772,6500.475,6857.403,7204.585,7574.746,7931.757,8310.265,8694.203,9082.351,9460.539,9821.012,10202.057,10595.683,10971.689,20732.586,21113.264,21458.727,21777.903,22129.069,22509.699,22862.062,23188.305],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.047,0,0.012,0.142,0.344,0.605,1.115,1.98,3.687,6.711,3.474,4.067,6.652,14.181,24.532,20.204,21.52,19.09,32.061,25.469,29.121,33.033,35.725,37.171,37.326,46.147,48.815,48.092,56.285,60.921,56.783,48.53,48.163,50.759,56.925,51.613,44.855,47.155,55.419,54.672,36.555,36.946,37.017,33.923,27.947,25.267,28.362,34.812,31.006,25.943,23.512,19.801,19.137,21.722,26.714,23.441,21.912,18.331,18.283,13.209,20.204,19.433,19.386,20.252,19.09,16.22,13.73,12.118,11.525,11.394,11.288,14.062,13.529,11.703,11.24,12.272,14.015,13.529,11.655,9.948,9.806,9.32,10.28,11.715,11.027,10.41,10.837,11.726,11.774,10.932,11.703,14.169,17.299,18.52,18.876,17.394,16.944,15.461,14.394,14.797,14.133,14.371,15.035,17.69,17.287,16.552,16.268,16.078,16.291,15.331,14.133,14.062,13.896,13.683,13.612,12.877,12.485,12.343,12.141,11.892,12.047,11.999,11.952,11.762,11.228,11.062,10.979,10.885,10.956,11.039,11.003,10.695,10.825,11.11,10.92,10.991,10.896,11.418,11.169,11.466,11.643,11.809,11.703,11.798,12.841,13.967,13.671,14.05,13.896,14.015,14.145,14.027,14.371,14.738,14.537,14.892,14.133,14.62,14.975,15.45,16.742,14.264,15.521,14.43,17.11,17.809,15.568,17.679,17.987,18.366,17.572,18.817,18.639,18.924,19.469,19.113,19.837,18.71,20.192,20.88,19.837,17.928,19.813,17.892,18.105,20.346,20.655,20.999,19.54,20.999,18.236,18.011,20.667,20.062,20.951,20.406,19.742,17.916,17.394,16.742,16.92,16.493,16.683,17.098,17.809,16.944,19.007,17.916,18.746,19.149,19.315,19.552,17.809,19.137,19.35,19.813,20.074,21.485,20.429,21.52,24.022,22.457,23.868,24.923,25.67,24.793,23.915,26.061,26.192,27.33,27.496,27.532,26.239,24.971,27.295,27.781,28.35,27.401,28.883,29.441,29.832,30.543,29.986,31.931,33.685,36.104,36.946,38.215,39.317,45.282,49.977,53.854,60.506,65.592,71.343,79.595,87.516,80.793,426.943,527.703,356.928,347.182,370.161,357.011,378.508,383.938,388.148,378.188,360.474,381.045,393.625,376.006,9760.898,380.678,345.463,319.176,351.166,380.63,352.363,326.243],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.047,0.047,0.059,0.201,0.545,1.15,2.265,4.245,7.885,14.596,18.058,21.983,28.291,41.867,65.284,83.508,101.341,113.72,142.307,163.709,186.178,205.03,216.223,233.19,248.996,276.053,292.807,315.43,342.594,370.482,391.54,402.899,413.736,418.348,426.458,429.979,418.549,404.783,403.419,409.561,397.953,384.14,364.232,346.542,329.634,307.746,280.689,260.829,255.28,244.277,230.772,216.65,207.84,204.295,202.647,191.276,182.182,174.57,169.341,162.749,163.816,161.527,154.199,151.01,148.188,146.077,141.524,140.433,131.754,123.715,115.617,109.427,103.866,99.349,96.859,97.013,99.503,101.638,102.005,97.891,94.168,91.785,90.825,90.268,87.28,84.161,83.343,85.121,87.089,88.701,90.124,92.578,98.85,106.96,114.999,120.667,125.837,130.366,133.057,133.685,130.519,126.37,122.529,122.825,123.168,124.259,126.133,127.414,129.572,130.532,129.63,126.002,122.611,119.742,117.086,113.885,110.079,107.091,105.099,102.929,101.08,99.396,97.736,96.621,95.364,94.083,92.921,91.914,90.823,89.863,88.914,87.847,87.444,87.492,87.433,87.539,87.479,87.858,88.024,88.795,89.613,90.312,91.095,91.902,93.847,96.396,98.898,101.482,103.735,105.941,108.383,110.612,112.142,112.913,113.779,114.621,114.858,115.463,116.293,117.716,120.087,119.613,120.597,120.135,123.112,126.301,126.894,129.123,130.368,134.47,136.521,140.908,142.437,143.552,147.453,148.887,150.737,151.081,153.701,155.764,156.962,155.966,156.31,155.089,153.357,154.993,155.456,155.575,155.278,158.349,156.772,156.891,159.453,159.169,159.465,158.872,159.074,155.991,155.149,153.88,150.133,146.564,142.296,138.988,137.055,136.083,137.696,138.87,140.696,143.352,145.984,148.438,148.438,150.631,150.974,152.871,154.199,156.535,157.649,159.617,165.83,169.15,173.668,178.778,184.374,187.682,191.168,195.709,197.879,202.752,206.38,208.989,209.558,209.736,213.116,214.836,216.994,217.065,218.452,220.361,223.954,229.526,232.217,236.367,241.702,250.405,258.468,267.242,276.727,291.466,311.457,333.38,360.201,389.689,424.086,465.466,513.665,549.176,926.142,1399.991,1696.413,1978.003,2276.821,2554.237,2845.229,3148.374,3109.579,2960.064,2963.61,2997.473,3020.937,3039.932,12422.322,12419.062,12376.377,12317.365,12308.057,12307.642,12266.38,12216.617],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.078,0.164,0.324,0.6,1.126,2.083,2.559,3.091,3.955,5.822,9.043,11.403,13.519,15.749,19.749,22.437,24.571,25.785,28.003,30.238,32.844,34.856,38.191,40.901,44.223,47.822,50.624,52.225,52.513,52.79,54.052,53.385,51.09,49.714,50.698,51.628,49.599,46.745,44.66,43.098,40.354,36.047,32.288,32.039,31.19,29.608,28.121,26.958,26.082,25.133,23.976,22.896,22.32,21.58,21.363,20.516,20.299,19.259,18.68,18.443,18.551,18.256,18.331,17.176,16.046,14.904,13.624,12.905,12.521,12.231,12.106,12.213,12.587,12.907,12.563,12.052,11.781,11.506,11.222,10.893,10.536,10.358,10.485,10.759,11.11,11.203,11.201,11.65,12.634,13.732,14.753,15.556,16.415,16.952,16.984,16.627,16,15.356,15.019,15.126,15.387,15.695,15.905,16.183,16.457,16.5,15.992,15.531,15.151,14.782,14.43,13.942,13.535,13.28,13.005,12.719,12.485,12.255,12.123,12.02,11.86,11.706,11.576,11.41,11.261,11.13,11.022,10.946,10.912,10.93,10.935,10.941,10.92,10.979,11.047,11.139,11.215,11.342,11.444,11.572,11.776,12.175,12.49,12.834,13.132,13.463,13.798,13.967,14.025,14.177,14.247,14.389,14.406,14.474,14.609,14.764,15.05,15.011,15.101,15.143,15.499,15.903,15.92,16.054,16.586,16.993,17.442,17.685,17.804,18.283,18.539,18.7,18.91,19.073,19.269,19.589,19.72,19.5,19.599,19.322,19.235,19.257,19.225,19.391,19.621,19.791,19.84,19.826,19.872,19.787,19.781,19.904,19.725,19.679,19.591,19.03,18.581,17.945,17.413,17.035,17.02,16.955,17.279,17.421,17.743,18.095,18.412,18.661,18.785,18.803,19.008,19.161,19.293,19.603,19.728,20.258,20.956,21.4,21.979,22.672,23.27,23.893,24.236,24.527,25.06,25.555,25.923,26.189,26.395,26.546,26.722,26.949,27.095,27.081,27.274,27.732,28.426,28.89,29.205,29.717,30.615,31.646,32.718,33.916,35.169,37.354,39.932,42.814,46.3,50.392,55.124,60.878,66.912,71.314,124.613,191.355,232.975,272.38,313.889,352.389,394.92,388.776,368.839,371.876,373.775,375.33,380.561,380.203,1719.769,1718.702,1714.027,1708.127,1703.859,1702.002,1698.625,350.817]},{"iso":"UGA","continent":"Africa","population":45741000,"name":"Uganda","population_density":213.759,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,9,9,14,14,23,30,33,33,44,44,45,48,48,52,52,52,53,53,53,53,54,54,55,55,55,56,55,55,56,61,63,74,75,75,79,79,79,81,83,85,88,89,97,98,100,101,101,116,121,121,129,139,160,203,227,227,248,260,264,160,175,198,198,222,253,281,317,329,413,417,457,489,507,522,557,593,616,646,657,665,679,686,694,696,705,724,732,741,755,763,770,774,797,805,821,833,848,859,870,889,893,902,911,927,939,953,971,977,1000,1006,1013,1025,1029,1040,1043,1051,1056,1062,1065,1069,1072,1075,1079,1089,1103,1115,1128,1135,1140,1147,1154,1176,1182,1195,1203,1213,1223,1254,1267,1283,1297,1313,1332,1353,1385,1434,1500,1560,1603,1656,1750,1848,2166,2263,2362,2426,2524,2679,2756,2847,2928,2972,3037,3112,3288,3353,3539,3667,3776,3900,4101,4291,4377,4703,4799,4978,5123,5266,5380,5594,6017,6287,6468,6712,6879,7064,7218,7364,7530,7777,8017,8129,8287,8491,8662,8808,8965,9082,9260,9442,9538,9701,9801,9864,9945,10069,10117,10334,10455,10590,10691,10788,10933,11041,11163,11297,11443,11557,11621,11767,12201,12410,12495,12743,12971,13099,13351,13568,13852,14066,14403,14574,14704,14993,15217,15402,15789,16020,16257,16563,16905,17148,17431,17667,17968,18165,18406,18890,19115,19588,19944,20145,20459,21035,21409,21612,21898,22188,22499,23200,23200,25059,25730,26369,27071,27532,27766,28168,28733,29361],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.022,0.022,0.197,0.197,0.306,0.306,0.503,0.656,0.721,0.721,0.962,0.962,0.984,1.049,1.049,1.137,1.137,1.137,1.159,1.159,1.159,1.159,1.181,1.181,1.202,1.202,1.202,1.224,1.202,1.202,1.224,1.334,1.377,1.618,1.64,1.64,1.727,1.727,1.727,1.771,1.815,1.858,1.924,1.946,2.121,2.142,2.186,2.208,2.208,2.536,2.645,2.645,2.82,3.039,3.498,4.438,4.963,4.963,5.422,5.684,5.772,3.498,3.826,4.329,4.329,4.853,5.531,6.143,6.93,7.193,9.029,9.117,9.991,10.691,11.084,11.412,12.177,12.964,13.467,14.123,14.363,14.538,14.844,14.997,15.172,15.216,15.413,15.828,16.003,16.2,16.506,16.681,16.834,16.921,17.424,17.599,17.949,18.211,18.539,18.78,19.02,19.436,19.523,19.72,19.916,20.266,20.529,20.835,21.228,21.359,21.862,21.993,22.146,22.409,22.496,22.737,22.802,22.977,23.087,23.218,23.283,23.371,23.436,23.502,23.589,23.808,24.114,24.376,24.661,24.814,24.923,25.076,25.229,25.71,25.841,26.125,26.3,26.519,26.738,27.415,27.699,28.049,28.355,28.705,29.12,29.58,30.279,31.35,32.793,34.105,35.045,36.204,38.259,40.401,47.354,49.474,51.639,53.038,55.18,58.569,60.252,62.242,64.013,64.975,66.396,68.035,71.883,73.304,77.37,80.169,82.552,85.263,89.657,93.811,95.691,102.818,104.917,108.83,112,115.126,117.619,122.297,131.545,137.448,141.405,146.739,150.39,154.435,157.802,160.993,164.623,170.023,175.269,177.718,181.172,185.632,189.371,192.562,195.995,198.553,202.444,206.423,208.522,212.085,214.272,215.649,217.42,220.131,221.18,225.924,228.57,231.521,233.729,235.85,239.02,241.381,244.048,246.978,250.169,252.662,254.061,257.253,266.741,271.31,273.168,278.59,283.575,286.373,291.883,296.627,302.836,307.514,314.882,318.62,321.462,327.78,332.677,336.722,345.183,350.233,355.414,362.104,369.581,374.893,381.08,386.24,392.82,397.127,402.396,412.977,417.896,428.237,436.02,440.415,447.279,459.872,468.048,472.486,478.739,485.079,491.878,507.204,507.204,547.845,562.515,576.485,591.832,601.911,607.027,615.815,628.167,641.897],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.175,0,0.109,0,0.197,0.153,0.066,0,0.24,0,0.022,0.066,0,0.087,0,0,0.022,0,0,0,0.022,0,0.022,0,0,0.022,-0.022,0,0.022,0.109,0.044,0.24,0.022,0,0.087,0,0,0.044,0.044,0.044,0.066,0.022,0.175,0.022,0.044,0.022,0,0.328,0.109,0,0.175,0.219,0.459,0.94,0.525,0,0.459,0.262,0.087,-2.274,0.328,0.503,0,0.525,0.678,0.612,0.787,0.262,1.836,0.087,0.874,0.7,0.394,0.328,0.765,0.787,0.503,0.656,0.24,0.175,0.306,0.153,0.175,0.044,0.197,0.415,0.175,0.197,0.306,0.175,0.153,0.087,0.503,0.175,0.35,0.262,0.328,0.24,0.24,0.415,0.087,0.197,0.197,0.35,0.262,0.306,0.394,0.131,0.503,0.131,0.153,0.262,0.087,0.24,0.066,0.175,0.109,0.131,0.066,0.087,0.066,0.066,0.087,0.219,0.306,0.262,0.284,0.153,0.109,0.153,0.153,0.481,0.131,0.284,0.175,0.219,0.219,0.678,0.284,0.35,0.306,0.35,0.415,0.459,0.7,1.071,1.443,1.312,0.94,1.159,2.055,2.142,6.952,2.121,2.164,1.399,2.142,3.389,1.683,1.989,1.771,0.962,1.421,1.64,3.848,1.421,4.066,2.798,2.383,2.711,4.394,4.154,1.88,7.127,2.099,3.913,3.17,3.126,2.492,4.679,9.248,5.903,3.957,5.334,3.651,4.045,3.367,3.192,3.629,5.4,5.247,2.449,3.454,4.46,3.738,3.192,3.432,2.558,3.891,3.979,2.099,3.564,2.186,1.377,1.771,2.711,1.049,4.744,2.645,2.951,2.208,2.121,3.17,2.361,2.667,2.93,3.192,2.492,1.399,3.192,9.488,4.569,1.858,5.422,4.985,2.798,5.509,4.744,6.209,4.679,7.368,3.738,2.842,6.318,4.897,4.045,8.461,5.05,5.181,6.69,7.477,5.313,6.187,5.159,6.581,4.307,5.269,10.581,4.919,10.341,7.783,4.394,6.865,12.593,8.176,4.438,6.253,6.34,6.799,15.325,0,40.642,14.67,13.97,15.347,10.078,5.116,8.789,12.352,13.729],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.175,0.175,0.284,0.284,0.481,0.634,0.7,0.7,0.765,0.765,0.678,0.744,0.547,0.481,0.415,0.415,0.197,0.197,0.175,0.109,0.131,0.044,0.066,0.066,0.044,0.066,0.044,0.044,0.044,0.153,0.175,0.415,0.437,0.415,0.524,0.524,0.502,0.437,0.437,0.241,0.285,0.307,0.395,0.417,0.461,0.439,0.395,0.679,0.722,0.7,0.7,0.897,1.312,2.23,2.755,2.427,2.777,3.039,2.951,0.458,0.327,-0.11,-0.635,-0.11,0.109,0.459,1.159,3.695,5.203,4.787,5.661,5.836,5.552,5.268,5.246,5.771,4.438,5.007,4.373,3.848,3.76,3.585,2.995,2.252,1.946,1.705,1.64,1.662,1.662,1.684,1.662,1.705,2.011,1.771,1.946,2.011,2.033,2.098,2.185,2.513,2.097,2.119,1.966,2.054,1.988,2.054,2.208,1.924,2.34,2.274,2.23,2.142,1.967,1.901,1.573,1.617,1.223,1.223,1.136,0.961,0.94,0.766,0.787,0.831,1.028,1.159,1.377,1.443,1.486,1.573,1.639,1.901,1.726,1.748,1.639,1.705,1.815,2.34,2.471,2.34,2.515,2.581,2.821,3.061,3.542,3.935,5.094,6.056,6.69,7.499,9.139,10.822,17.074,18.124,18.845,18.932,20.134,22.364,21.992,21.839,16.658,15.499,14.756,14.997,16.703,14.735,17.118,17.927,18.539,20.288,23.261,25.775,23.807,29.513,27.546,28.661,29.448,29.863,27.961,28.486,35.854,34.63,36.488,37.909,38.39,39.309,40.184,38.697,33.078,32.575,33.865,30.98,30.783,31.198,31.569,31.569,31.372,28.53,27.174,28.704,27.349,26.453,24.901,23.086,21.425,21.578,18.736,19.501,20.047,19.434,19.456,20.2,21.599,21.249,22.867,21.053,21.6,21.141,20.332,21.403,27.721,29.929,29.12,31.612,33.405,33.711,37.821,39.373,36.094,36.204,41.714,40.03,37.887,41.407,40.795,40.096,42.348,42.719,40.532,43.484,48.119,47.114,48.404,49.518,47.638,46.895,46.983,50.874,48.316,53.344,54.94,54.175,54.459,62.745,65.652,59.509,60.843,56.842,55.858,66.789,59.924,87.973,94.467,103.999,113.093,116.831,115.148,108.612,120.964,94.051],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.069,0.091,0.1,0.075,0.109,0.094,0.097,0.078,0.056,0.059,0.059,0.025,0.028,0.025,0.016,0.016,0.006,0.006,0.009,0.006,0.006,0.009,0.006,0.003,0.006,0.019,0.025,0.059,0.059,0.062,0.075,0.072,0.056,0.056,0.028,0.031,0.041,0.031,0.056,0.059,0.059,0.056,0.05,0.087,0.1,0.075,0.097,0.122,0.184,0.319,0.347,0.331,0.397,0.409,0.39,0,-0.087,-0.091,-0.091,-0.081,-0.022,0.053,0.49,0.481,0.671,0.684,0.734,0.737,0.706,0.64,0.712,0.562,0.622,0.59,0.525,0.493,0.49,0.403,0.315,0.25,0.184,0.209,0.209,0.194,0.215,0.215,0.231,0.215,0.228,0.228,0.25,0.244,0.265,0.278,0.3,0.287,0.275,0.253,0.244,0.247,0.25,0.259,0.256,0.262,0.306,0.297,0.269,0.269,0.237,0.215,0.206,0.159,0.156,0.153,0.125,0.125,0.1,0.1,0.087,0.103,0.128,0.156,0.184,0.197,0.203,0.212,0.203,0.228,0.209,0.209,0.212,0.228,0.237,0.312,0.284,0.315,0.319,0.344,0.372,0.406,0.409,0.522,0.678,0.821,0.906,1.012,1.24,1.446,2.286,2.383,2.505,2.57,2.711,2.901,2.836,2.127,2.077,1.905,1.908,1.836,1.902,1.865,2.161,2.308,2.511,2.695,3.089,3.133,3.198,3.635,3.535,3.754,3.82,3.638,3.401,3.801,4.104,4.647,4.654,4.963,5.038,5.259,5.072,4.207,3.882,4.088,4.076,3.904,3.82,3.976,4.054,3.991,3.71,3.326,3.532,3.607,3.27,3.245,3.101,2.808,2.695,2.527,2.108,2.486,2.355,2.464,2.583,2.633,2.698,2.886,2.589,2.63,2.664,2.705,2.602,2.605,3.623,3.895,3.742,4.06,4.416,4.616,4.947,4.269,4.504,4.907,5.184,5.006,5.013,5.128,5.15,4.841,5.381,5.05,5.256,5.806,5.972,6.031,6.337,5.865,6.084,5.959,5.756,6.2,6.143,6.737,7.111,6.799,7.165,8.211,7.867,7.799,7.215,7.008,7.352,8.561,6.762,11.4,12.861,13.964,15.25,15.719,14.26,15.516,11.475,11.34]},{"iso":"UKR","continent":"Europe","population":43733759,"name":"Ukraine","population_density":77.39,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,3,3,3,7,14,14,16,29,47,73,73,97,145,196,310,356,475,548,645,794,897,1072,1225,1308,1319,1462,1668,1892,2203,2511,2777,3102,3372,3764,4161,4662,5106,5449,5710,6125,6592,7170,7647,8125,8617,9009,9410,9866,10406,10861,11411,11913,12331,12697,13184,13691,14195,14710,15232,15648,16023,16425,16847,17330,17858,18291,18616,18876,19230,19706,20148,20580,20986,21245,21584,21905,22382,22811,23204,23672,24562,24895,25385,25981,26542,27101,27599,28077,28479,29015,29706,30415,31177,31851,32536,33209,33986,34833,35755,36615,37361,38056,38901,39852,40854,41975,42932,43856,44538,45254,45924,46821,47705,48628,49468,50053,50622,51457,52285,53116,53941,54647,55285,55931,56779,57640,58466,59333,60077,60767,61454,62295,63169,64173,65317,66261,67096,68030,69078,70300,71404,72609,73761,74781,75880,77169,78515,80018,81534,82767,83812,85023,86504,88136,89917,91795,93490,95007,96653,98658,100810,102948,105337,107379,109234,110949,112653,114663,117172,119751,121930,124132,126279,128833,131300,134069,136966,139171,141424,143914,146511,149146,152373,155558,158122,160679,163678,166694,170373,173703,177048,180119,182900,185890,189488,192966,196631,200566,203799,206579,210309,214446,218625,223376,228161,232424,236329,240811,245698,251243,257204,263105,268065,272671,277982,283762,289022,295227,301856,307301,312287,317967,324942,332262,340042,347317,353723,359348,366233,374023,381664,390272,399330,407573,414567,423683,433492,443630,453565,464598,474245,483153,493544,504423,515755,527808,540593,551533,561581,573758,586522,600152,614986,629850,642215,653442,665968,680132,695755,712249,728834,742105,752343,765117,778560,793372,808828,822985,834913,843898,855054,867991,881727,895620,908839,918444,925321,934161,945218,957692],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.023,0.023,0.023,0.023,0.023,0.023,0.023,0.023,0.023,0.023,0.069,0.069,0.069,0.16,0.32,0.32,0.366,0.663,1.075,1.669,1.669,2.218,3.316,4.482,7.088,8.14,10.861,12.53,14.748,18.155,20.51,24.512,28.01,29.908,30.16,33.43,38.14,43.262,50.373,57.416,63.498,70.929,77.103,86.066,95.144,106.6,116.752,124.595,130.563,140.052,150.73,163.947,174.853,185.783,197.033,205.996,215.166,225.592,237.94,248.344,260.92,272.398,281.956,290.325,301.46,313.053,324.578,336.353,348.289,357.801,366.376,375.568,385.217,396.261,408.334,418.235,425.667,431.612,439.706,450.59,460.697,470.575,479.858,485.78,493.532,500.872,511.779,521.588,530.574,541.275,561.626,569.24,580.444,594.072,606.9,619.681,631.069,641.998,651.19,663.446,679.246,695.458,712.882,728.293,743.956,759.345,777.111,796.479,817.561,837.225,854.283,870.174,889.496,911.241,934.152,959.785,981.667,1002.795,1018.389,1034.761,1050.081,1070.592,1090.805,1111.91,1131.117,1144.493,1157.504,1176.597,1195.53,1214.531,1233.395,1249.538,1264.126,1278.898,1298.288,1317.975,1336.862,1356.686,1373.699,1389.476,1405.184,1424.414,1444.399,1467.356,1493.514,1515.1,1534.192,1555.549,1579.512,1607.454,1632.698,1660.251,1686.592,1709.915,1735.044,1764.518,1795.295,1829.662,1864.326,1892.52,1916.414,1944.105,1977.969,2015.285,2056.009,2098.951,2137.708,2172.395,2210.032,2255.877,2305.084,2353.971,2408.597,2455.289,2497.704,2536.919,2575.882,2621.842,2679.212,2738.182,2788.006,2838.357,2887.449,2945.848,3002.257,3065.572,3131.814,3182.233,3233.749,3290.684,3350.066,3410.317,3484.105,3556.932,3615.559,3674.027,3742.601,3811.564,3895.686,3971.829,4048.314,4118.535,4182.124,4250.492,4332.763,4412.289,4496.092,4586.068,4659.993,4723.559,4808.848,4903.443,4998.999,5107.633,5217.045,5314.521,5403.812,5506.295,5618.04,5744.83,5881.132,6016.062,6129.475,6234.794,6356.234,6488.397,6608.67,6750.552,6902.128,7026.631,7140.639,7270.516,7430.004,7597.38,7775.275,7941.622,8088.1,8216.719,8374.149,8552.272,8726.988,8923.816,9130.932,9319.414,9479.336,9687.779,9912.068,10143.88,10371.05,10623.326,10843.911,11047.598,11285.195,11533.95,11793.064,12068.663,12361,12611.15,12840.904,13119.339,13411.196,13722.854,14062.043,14401.918,14684.651,14941.364,15227.779,15551.647,15908.877,16286.023,16665.249,16968.699,17202.798,17494.883,17802.266,18140.951,18494.363,18818.071,19090.813,19296.26,19551.349,19847.162,20161.244,20478.917,20781.177,21000.802,21158.049,21360.181,21613.006,21898.232],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.046,0,0,0.091,0.16,0,0.046,0.297,0.412,0.595,0,0.549,1.098,1.166,2.607,1.052,2.721,1.669,2.218,3.407,2.355,4.001,3.498,1.898,0.252,3.27,4.71,5.122,7.111,7.043,6.082,7.431,6.174,8.963,9.078,11.456,10.152,7.843,5.968,9.489,10.678,13.216,10.907,10.93,11.25,8.963,9.169,10.427,12.347,10.404,12.576,11.479,9.558,8.369,11.136,11.593,11.524,11.776,11.936,9.512,8.575,9.192,9.649,11.044,12.073,9.901,7.431,5.945,8.094,10.884,10.107,9.878,9.283,5.922,7.751,7.34,10.907,9.809,8.986,10.701,20.35,7.614,11.204,13.628,12.828,12.782,11.387,10.93,9.192,12.256,15.8,16.212,17.424,15.411,15.663,15.389,17.767,19.367,21.082,19.664,17.058,15.892,19.321,21.745,22.911,25.632,21.882,21.128,15.594,16.372,15.32,20.51,20.213,21.105,19.207,13.376,13.011,19.093,18.933,19.001,18.864,16.143,14.588,14.771,19.39,19.687,18.887,19.825,17.012,15.777,15.709,19.23,19.985,22.957,26.158,21.585,19.093,21.356,23.963,27.942,25.244,27.553,26.341,23.323,25.129,29.474,30.777,34.367,34.664,28.193,23.895,27.69,33.864,37.317,40.724,42.942,38.757,34.687,37.637,45.846,49.207,48.887,54.626,46.692,42.416,39.215,38.963,45.96,57.37,58.97,49.824,50.35,49.093,58.399,56.41,63.315,66.242,50.419,51.516,56.935,59.382,60.251,73.787,72.827,58.627,58.467,68.574,68.963,84.123,76.143,76.486,70.22,63.589,68.368,82.271,79.527,83.803,89.976,73.925,63.566,85.289,94.595,95.555,108.635,109.412,97.476,89.29,102.484,111.744,126.79,136.302,134.93,113.414,105.319,121.439,132.163,120.273,141.881,151.576,124.503,114.008,129.877,159.488,167.376,177.895,166.347,146.477,128.619,157.43,178.123,174.716,196.827,207.117,188.481,159.922,208.443,224.289,231.812,227.17,252.277,220.585,203.687,237.597,248.755,259.113,275.599,292.337,250.15,229.754,278.435,291.857,311.659,339.189,339.875,282.734,256.712,286.415,323.869,357.23,377.146,379.226,303.45,234.098,292.086,307.383,338.686,353.411,323.709,272.741,205.448,255.089,295.813,314.082,317.672,302.261,219.624,157.247,202.132,252.825,285.226],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.046,0.046,0.046,0.137,0.297,0.297,0.343,0.64,1.006,1.601,1.601,2.059,2.997,4.163,6.724,7.479,9.788,10.862,13.08,15.938,17.195,20.03,20.921,21.767,19.298,20.899,23.391,25.106,29.862,32.904,35.488,41.021,46.943,52.636,57.004,63.338,66.379,67.179,67.065,69.123,73.627,77.88,79.709,79.183,80.281,81.401,84.602,85.54,87.209,84.397,86.066,86.615,84.923,84.329,86.296,87.462,86.639,88.011,87.371,85.404,84.421,85.244,83.757,83.208,83.757,81.882,77.377,73.81,73.329,75.021,75.479,74.313,71.523,67.544,67.864,69.259,72.072,70.997,69.876,70.699,81.766,83.458,86.911,93.199,95.12,98.093,100.494,100.723,89.565,94.207,98.803,101.387,105.983,108.612,112.888,117.347,125.922,133.033,138.315,141.767,141.401,141.882,145.54,151.896,157.04,163.305,164.105,165.569,164.105,164.585,160.584,159.349,156.651,152.124,149.449,141.697,139.114,141.835,145.448,143.939,142.59,137.628,133.009,134.404,140.783,141.377,141.331,142.155,140.303,139.937,141.058,145.517,146.112,149.382,156.653,158.413,160.494,166.073,174.327,183.039,188.298,192.894,193.077,194.815,200.851,208.969,215.783,222.208,231.628,232.268,229.822,234.189,242.924,250.767,260.714,269.289,273.382,279.876,293.618,311.774,327.117,338.687,352.589,356.339,359.998,364.526,365.852,365.966,374.129,384.212,379.41,383.068,389.745,408.929,426.376,443.731,452.603,444.052,445.744,452.329,462.618,464.47,481.847,491.359,483.744,491.792,508.85,520.878,545.619,561.511,564.21,561.603,566.565,576.466,590.163,600.727,600.407,614.24,611.679,605.025,626.725,652.952,666.236,695.344,720.953,728.453,743.818,782.736,809.191,841.386,882.133,908.428,912.43,920.273,952.422,982.101,990.63,1005.721,1020.995,1010.568,1011.162,1035.72,1073.769,1108.982,1166.604,1191.07,1185.971,1190.087,1233.509,1281.755,1296.983,1326.434,1355.656,1377.79,1391.235,1471.059,1537.918,1591.607,1644.061,1699.511,1712.979,1728.185,1805.86,1846.172,1880.996,1924.783,1989.95,1987.823,1996.992,2071.74,2126,2188.904,2268.98,2333.256,2323.653,2330.215,2386.876,2432.31,2497.683,2563.17,2603.207,2566.782,2518.146,2553.52,2574.488,2589.305,2585.486,2532.049,2425.564,2327.562,2348.553,2352.28,2358.979,2337.965,2286.815,2182.73,2067.236,2063.92,2061.656,2051.069],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.007,0.007,0.007,0.02,0.042,0.042,0.049,0.085,0.144,0.229,0.216,0.271,0.428,0.588,0.918,1.009,1.313,1.552,1.79,2.12,2.29,2.489,2.839,2.721,2.518,2.669,2.855,3.25,3.694,4.201,4.799,5.824,6.239,6.847,7.412,8.032,8.477,8.728,8.519,8.993,9.238,9.829,9.751,9.862,10.348,10.776,10.731,10.695,10.57,10.499,10.734,10.766,10.851,10.737,10.838,10.731,10.891,10.776,10.842,10.835,10.864,10.587,10.309,10.241,10.283,9.992,9.695,9.319,9.163,9.339,9.205,8.891,8.803,8.588,8.846,8.738,8.741,8.699,8.571,8.774,10.835,10.815,11.367,11.756,12.187,12.73,12.828,11.482,11.707,11.857,12.168,12.651,13.314,13.889,14.565,15.451,16.238,16.747,17.443,17.763,17.999,18.031,18.593,19.161,19.668,20.318,20.635,21.216,21.174,20.752,19.834,19.491,18.717,18.606,18.332,18.015,17.535,18.074,17.848,17.675,17.355,16.917,17.09,17.342,17.384,17.492,17.476,17.613,17.737,17.907,18.041,18.018,18.061,18.642,19.547,20.2,20.674,21.481,22.157,23.294,23.62,23.819,24.499,25.103,25.642,26.429,26.834,28.138,29.154,29.418,29.5,29.866,30.493,31.427,32.335,33.518,35.027,36.569,37.99,39.701,41.4,42.566,44.235,45.369,46.473,46.698,45.715,45.251,46.463,47.084,47.531,48.665,50.076,52.852,54.345,55.194,56.233,56.318,56.485,57.605,57.746,58.294,59.79,60.731,61.904,62.897,64.559,65.928,69.338,69.675,70.197,71.854,72.585,72.556,74.457,73.8,74.895,76.822,77.351,77.348,79.765,81.526,83.816,87.363,90.14,93.504,97.179,99.635,102.085,106.547,110.5,114.145,116.422,118.712,121.42,124.337,123.406,124.203,126.581,128.165,129.406,130.612,134.515,141.244,146.389,148.499,151.638,153.726,157.662,160.324,161.373,164.077,169.901,175.902,180.374,187.662,194.257,202.413,206.748,213.199,217.785,224.037,228.202,231.697,235.598,242.516,248.239,252.463,256.187,262.021,268.178,275.684,284.769,291.56,296.214,300.066,301.206,305.779,312.289,317.711,323.333,326.293,323.062,323.872,321.517,318.868,315.477,307.546,303.159,299.066,293.781,292.128,288.613,283.508,280.444,272.856,265.97,258.404,252.263,248.141]},{"iso":"ARE","continent":"Asia","population":9890400,"name":"United Arab Emirates","population_density":112.442,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,5,5,5,5,5,5,7,7,8,8,8,8,8,8,9,9,9,9,9,9,13,13,13,13,13,13,19,21,21,21,27,27,29,29,45,45,45,74,74,85,85,85,98,98,98,113,140,140,153,153,198,248,333,333,405,468,570,611,664,814,1024,1264,1505,1799,2076,2359,2659,2990,3360,3736,4123,4521,4933,5365,5825,6302,6302,6781,7265,7755,8238,8756,9281,9813,10349,10839,11380,11929,12481,13038,13599,14163,14730,15192,15738,16240,16793,17417,18198,18878,19661,20386,21084,21831,22627,23358,24190,25063,26004,26898,27892,28704,29485,30307,31086,31969,32532,33170,33896,34557,35192,35788,36359,37018,37642,38268,38808,39376,39904,40507,40986,41499,41990,42294,42636,42982,43364,43752,44145,44533,44925,45303,45683,46133,46563,46973,47360,47797,48246,48667,49069,49469,50141,50857,51540,52068,52600,53045,53577,54050,54453,54854,55198,55573,55848,56129,56422,56711,56922,57193,57498,57734,57988,58249,58562,58913,59177,59546,59921,60223,60506,60760,60999,61163,61352,61606,61845,62061,62300,62525,62704,62966,63212,63489,63819,64102,64312,64541,64906,65341,65802,66193,66617,67007,67282,67621,68020,68511,68901,69328,69690,70231,70805,71540,72154,72766,73471,73984,74454,75098,75981,76911,77842,78849,79489,80266,80940,81782,82568,83433,84242,84916,85595,86447,87530,88532,89540,90618,91469,92095,93090,94190,95348,96529,97760,98801,99733,100794,101840,102929,104004,105133,106229,107293,108608,110039,111437,112849,114387,115602,116517,117594,119132,120710,122273,123764,125123,126234,127624,129024,130336,131508,132629,133907,135141,136149,137310,138599,139891,141032,142143,143289,144385,145599,146735,147961,149135,150345,151554,152809,154101,155254,156523,157785,158990,160055,161365,162662,163967,165250,166502,167753,168860,170149,171434,172751,174062,175276,176429,177577,178837,180150,181405,182601,183755,184949,186041,187267,188545,189866],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.404,0.404,0.404,0.404,0.506,0.506,0.506,0.506,0.506,0.506,0.708,0.708,0.809,0.809,0.809,0.809,0.809,0.809,0.91,0.91,0.91,0.91,0.91,0.91,1.314,1.314,1.314,1.314,1.314,1.314,1.921,2.123,2.123,2.123,2.73,2.73,2.932,2.932,4.55,4.55,4.55,7.482,7.482,8.594,8.594,8.594,9.909,9.909,9.909,11.425,14.155,14.155,15.47,15.47,20.019,25.075,33.669,33.669,40.949,47.319,57.632,61.777,67.136,82.302,103.535,127.801,152.168,181.894,209.901,238.514,268.847,302.313,339.723,377.74,416.869,457.11,498.766,542.445,588.955,637.184,637.184,685.614,734.551,784.094,832.929,885.303,938.385,992.174,1046.368,1095.911,1150.611,1206.119,1261.931,1318.248,1374.97,1431.995,1489.323,1536.035,1591.24,1641.996,1697.909,1761.001,1839.966,1908.72,1987.887,2061.191,2131.764,2207.292,2287.774,2361.684,2445.806,2534.073,2629.216,2719.607,2820.108,2902.208,2981.174,3064.285,3143.048,3232.326,3289.25,3353.757,3427.162,3493.994,3558.198,3618.458,3676.191,3742.821,3805.913,3869.207,3923.805,3981.234,4034.619,4095.588,4144.018,4195.887,4245.531,4276.268,4310.847,4345.83,4384.454,4423.684,4463.419,4502.649,4542.283,4580.502,4618.923,4664.422,4707.899,4749.353,4788.482,4832.666,4878.064,4920.63,4961.276,5001.719,5069.664,5142.057,5211.114,5264.499,5318.288,5363.282,5417.071,5464.895,5505.642,5546.186,5580.967,5618.883,5646.688,5675.099,5704.724,5733.944,5755.278,5782.678,5813.516,5837.378,5863.059,5889.448,5921.095,5956.584,5983.277,6020.586,6058.501,6089.036,6117.649,6143.331,6167.496,6184.077,6203.187,6228.868,6253.033,6274.873,6299.037,6321.787,6339.885,6366.375,6391.248,6419.255,6452.621,6481.234,6502.467,6525.621,6562.525,6606.507,6653.118,6692.651,6735.521,6774.953,6802.758,6837.034,6877.376,6927.02,6966.452,7009.625,7046.227,7100.926,7158.962,7233.277,7295.357,7357.235,7428.517,7480.385,7527.906,7593.019,7682.298,7776.329,7870.46,7972.276,8036.985,8115.546,8183.693,8268.826,8348.297,8435.756,8517.552,8585.699,8654.352,8740.496,8849.996,8951.306,9053.223,9162.218,9248.261,9311.555,9412.157,9523.376,9640.459,9759.868,9884.332,9989.586,10083.819,10191.094,10296.854,10406.96,10515.652,10629.803,10740.617,10848.196,10981.153,11125.839,11267.188,11409.953,11565.457,11688.304,11780.818,11889.711,12045.216,12204.764,12362.796,12513.548,12650.954,12763.286,12903.826,13045.377,13178.031,13296.53,13409.872,13539.088,13663.856,13765.773,13883.159,14013.488,14144.12,14259.484,14371.815,14487.685,14598.5,14721.245,14836.104,14960.062,15078.763,15201.104,15323.344,15450.235,15580.866,15697.444,15825.75,15953.349,16075.184,16182.864,16315.316,16446.453,16578.399,16708.121,16834.708,16961.195,17073.121,17203.45,17333.374,17466.533,17599.086,17721.831,17838.409,17954.481,18081.877,18214.632,18341.523,18462.448,18579.127,18699.85,18810.26,18934.219,19063.435,19196.999],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.101,0,0,0,0,0,0.202,0,0.101,0,0,0,0,0,0.101,0,0,0,0,0,0.404,0,0,0,0,0,0.607,0.202,0,0,0.607,0,0.202,0,1.618,0,0,2.932,0,1.112,0,0,1.314,0,0,1.517,2.73,0,1.314,0,4.55,5.055,8.594,0,7.28,6.37,10.313,4.145,5.359,15.166,21.233,24.266,24.367,29.726,28.007,28.614,30.332,33.467,37.41,38.017,39.129,40.241,41.657,43.679,46.51,48.229,0,48.431,48.936,49.543,48.835,52.374,53.082,53.79,54.194,49.543,54.7,55.508,55.812,56.317,56.722,57.025,57.328,46.712,55.205,50.756,55.913,63.091,78.965,68.754,79.168,73.303,70.573,75.528,80.482,73.91,84.122,88.267,95.143,90.391,100.501,82.1,78.965,83.111,78.763,89.278,56.924,64.507,73.405,66.832,64.204,60.26,57.733,66.63,63.091,63.294,54.598,57.429,53.385,60.968,48.431,51.868,49.644,30.737,34.579,34.983,38.623,39.23,39.736,39.23,39.634,38.219,38.421,45.499,43.477,41.454,39.129,44.184,45.398,42.567,40.645,40.443,67.945,72.393,69.057,53.385,53.79,44.993,53.79,47.824,40.747,40.544,34.781,37.916,27.805,28.411,29.625,29.22,21.334,27.4,30.838,23.862,25.681,26.389,31.647,35.489,26.693,37.309,37.916,30.535,28.614,25.681,24.165,16.582,19.109,25.681,24.165,21.839,24.165,22.749,18.098,26.49,24.873,28.007,33.366,28.614,21.233,23.154,36.904,43.982,46.611,39.533,42.87,39.432,27.805,34.276,40.342,49.644,39.432,43.173,36.601,54.7,58.036,74.314,62.08,61.878,71.281,51.868,47.521,65.114,89.278,94.031,94.132,101.816,64.709,78.561,68.147,85.133,79.471,87.459,81.796,68.147,68.652,86.144,109.5,101.31,101.917,108.995,86.043,63.294,100.603,111.219,117.083,119.409,124.464,105.254,94.233,107.276,105.759,110.107,108.691,114.151,110.815,107.579,132.957,144.686,141.349,142.765,155.504,122.846,92.514,108.893,155.504,159.549,158.032,150.752,137.406,112.331,140.54,141.551,132.654,118.499,113.342,129.216,124.767,101.917,117.387,130.328,130.632,115.364,112.331,115.87,110.815,122.745,114.859,123.959,118.701,122.341,122.24,126.891,130.632,116.578,128.306,127.598,121.835,107.68,132.452,131.137,131.946,129.722,126.587,126.486,111.927,130.328,129.924,133.159,132.553,122.745,116.578,116.072,127.396,132.755,126.891,120.925,116.679,120.723,110.41,123.959,129.216,133.564],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.101,0.101,0.101,0.101,0.101,0.101,0.303,0.303,0.303,0.303,0.303,0.303,0.303,0.303,0.202,0.202,0.101,0.101,0.101,0.101,0.505,0.505,0.404,0.404,0.404,0.404,1.011,1.213,0.809,0.809,1.416,1.416,1.618,1.618,2.629,2.427,2.427,5.359,4.752,5.864,5.662,5.662,5.358,5.358,5.358,3.943,6.673,5.561,6.875,6.875,10.111,15.166,23.76,22.243,26.793,33.163,42.162,46.307,47.116,57.227,69.866,94.132,111.219,134.575,152.269,176.738,201.711,220.012,236.189,249.94,264.702,275.217,288.867,303.932,320.11,334.872,297.462,307.876,317.683,326.985,334.163,342.858,349.43,354.991,409.185,410.297,416.061,422.026,429.003,432.946,436.586,439.821,442.955,440.124,440.629,435.877,435.978,442.752,464.995,476.724,498.564,525.155,540.523,565.295,589.864,600.683,605.84,625.353,641.328,658.416,688.344,694.916,693.399,702.6,697.241,698.252,660.033,634.149,607.053,591.785,577.024,554.173,533.143,510.495,516.662,515.449,496.642,487.239,476.42,477.128,467.826,453.064,439.617,407.06,387.041,364.595,349.833,328.095,319.4,306.762,296.752,304.234,308.076,318.592,323.446,325.67,325.063,330.017,335.781,340.129,342.353,337.297,361.765,392.704,422.632,431.833,440.225,442.651,455.796,463.177,435.979,404.13,369.854,354.385,328.4,311.818,287.653,269.049,249.636,236.492,232.549,218.495,216.371,214.349,216.371,222.64,227.999,237.908,244.986,251.659,254.592,253.884,246.402,227.495,219.911,208.283,194.532,185.836,181.387,178.455,172.388,182.296,188.06,190.386,199.587,206.362,203.43,203.835,222.641,240.133,261.871,273.397,282.901,293.719,300.291,311.413,314.851,320.513,313.334,316.974,310.705,325.973,356.204,396.242,417.98,430.214,462.063,470.758,481.678,492.092,523.334,543.051,575.103,615.041,608.469,635.162,655.788,675.807,666,659.428,647.092,613.423,617.366,624.949,666.302,682.479,704.925,726.461,730.708,725.855,757.806,782.881,790.464,808.563,831.11,827.369,835.559,879.541,884.697,883.585,875.193,869.935,856.286,858.611,897.335,934.745,970.335,1002.993,1049.806,1058.501,1040.2,1041.514,1064.061,1078.924,1095.607,1103.594,1085.496,1074.981,1123.007,1155.665,1132.815,1091.765,1047.075,1025.539,1012.9,1002.486,979.333,968.11,966.088,962.953,961.942,948.596,934.644,955.472,952.944,946.575,934.644,941.621,951.53,962.551,982.368,976.201,989.648,993.287,996.421,981.76,991.972,996.218,997.532,1010.676,1008.957,1007.845,997.937,1020.585,1018.057,1020.079,1020.686,1013.709,1003.7,993.286,1008.755,1011.182,1008.149,995.915,980.041,978.019,971.851,979.738,981.558,982.367],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.014,0.014,0.014,0.014,0.043,0.029,0.043,0.043,0.043,0.043,0.043,0.014,0.029,0.014,0.014,0.014,0.014,0.014,0.072,0.058,0.058,0.058,0.058,0.058,0.144,0.116,0.116,0.116,0.202,0.202,0.231,0.144,0.347,0.347,0.347,0.679,0.679,0.809,0.809,0.578,0.766,0.766,0.347,0.563,0.794,0.794,0.982,0.794,1.444,2.167,3.178,2.788,3.828,4.55,6.023,5.965,6.009,6.948,9.981,12.407,14.978,17.752,21.16,24.483,26.649,28.397,30.275,32.225,33.568,35.316,37.179,39.086,40.949,42.494,37.063,38.392,39.634,40.761,41.498,42.335,43.029,50.713,51.536,51.623,52.36,53.313,53.804,54.266,54.685,55.089,56.202,55.061,55.017,54.295,54.237,55.147,58.282,59.914,64.55,67.136,69.967,72.769,75.253,74.531,76.727,78.027,81.147,83.978,87.545,87.776,88.499,88.354,86.996,86.159,81.378,76.236,74.993,73.26,70.559,67.916,63.409,64.796,64.594,63.149,61.402,60.434,59.452,59.914,57.314,55.711,53.761,50.352,47.088,44.459,41.267,39.952,38.219,36.731,38.002,38.522,39.013,39.995,40.602,40.848,40.833,41.483,42.509,43.101,42.408,41.974,45.759,50.511,54.064,55.205,56.808,57.429,59.336,56.462,51.941,47.867,45.21,42.942,40.487,36.861,34.261,32.615,29.87,28.816,27.805,27.241,26.851,26.389,26.736,28.758,28.657,29.581,31.589,32.282,32.6,31.748,30.13,28.686,26.086,24.338,23.428,22.46,22.244,22.042,22.258,23.313,23.197,23.746,25.393,26.028,25.811,26.534,28.021,30.751,33.409,34.29,36.327,38.927,39.591,39.216,38.696,39.129,39.114,39.158,38.753,42.595,45.99,50.843,52.62,55.826,59.842,62.023,60.997,62.008,64.146,68.71,73.318,77.68,79.514,83.949,84.382,83.79,81.71,80.757,77.897,78.388,76.972,79.543,83.024,86.144,88.21,92.095,94.652,93.886,95.952,96.197,98.45,100.949,103.159,105.904,110.323,111.277,110.497,109.5,107.969,106.496,107.29,109.197,112.866,118.427,122.89,127.757,133.665,135.384,133.232,129.794,131.339,133.939,136.12,135.442,137.522,140.353,144.874,142.88,139.038,133.391,128.046,126.876,128.653,123.135,119.683,119.351,121.084,121.373,118.961,117.69,118.961,119.726,117.517,116.563,117.04,118.47,119.38,121.676,122.803,123.049,123.67,124.941,124.869,122.789,123.583,123.655,125.851,126.053,125.909,126.573,127.18,126.876,126.703,126.876,127.281,126.732,125.316,125.909,125.49,125.894,124.999,123.337,122.471,123.063,122.254,121.763,121.258,122.211]},{"iso":"GBR","continent":"Europe","population":67886004,"name":"United Kingdom","population_density":272.898,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,8,8,9,9,9,13,14,14,15,16,17,18,18,18,19,19,20,22,23,23,28,30,34,37,44,56,61,94,134,189,246,295,374,429,483,630,889,1301,1790,2270,2634,3077,3692,4462,5467,6533,7791,9006,10395,12744,15126,17843,20970,24219,27062,29954,34281,38815,43789,48718,53699,57772,61422,66738,72224,77387,82293,86660,90273,93812,98017,102365,107465,112808,117798,122534,126394,131260,136035,141540,146708,151689,155453,158926,163630,168357,173807,178771,183501,186731,189708,193091,196780,200616,204387,207439,209589,211911,215500,218895,222195,224813,227334,229406,231232,233809,236867,239579,242133,244174,245682,247037,248650,250309,252118,253854,255362,256469,257539,258983,260453,261802,263040,264150,264944,265662,266756,267915,269101,270108,271162,272050,272857,273888,274971,275970,276990,277974,278640,279264,280156,281038,281815,282512,283151,283785,284192,284812,285216,285279,285285,285787,286412,286931,287290,287874,288511,289154,289678,290504,291154,291691,292931,293469,294116,294803,295632,296358,296944,297389,297952,298731,299500,300270,301020,301708,302261,303063,303910,304793,305562,306309,307251,307926,308832,309796,310696,311461,312574,313392,314542,315581,316729,318190,319232,320343,321064,322177,323008,324203,325263,326595,327643,328620,329821,330967,332509,333806,334916,336668,338083,339415,340929,342708,344686,346513,349500,352451,354932,357613,360544,364088,367592,370930,373555,376670,380677,384087,388416,392845,396744,401122,406058,412245,418889,425767,431817,437517,441573,448729,455846,462775,469769,482654,505619,518222,532779,546952,564502,578390,593565,606447,620458,637708,657459,676455,692112,708298,725292,744122,765487,792194,813451,834010,857043,876840,897740,920664,945378,968456,992874,1014793,1038054,1057021,1077099,1102305,1126469,1149791,1174770,1195350,1216747,1237198,1260198,1293715,1321031,1347907,1372884,1394299,1414359,1434004,1456940,1477214,1497135,1515802,1531267,1542611,1560872,1578429,1593250,1609141,1621305,1633733,1647230,1663467,1678418,1694800,1710379,1727751,1742525,1754911,1771545,1792611,1814395,1835949,1854490,1874867,1893436,1918736,1954268],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.029,0.029,0.029,0.118,0.118,0.133,0.133,0.133,0.191,0.206,0.206,0.221,0.236,0.25,0.265,0.265,0.265,0.28,0.28,0.295,0.324,0.339,0.339,0.412,0.442,0.501,0.545,0.648,0.825,0.899,1.385,1.974,2.784,3.624,4.346,5.509,6.319,7.115,9.28,13.095,19.164,26.368,33.438,38.8,45.326,54.385,65.728,80.532,96.235,114.766,132.664,153.124,187.726,222.815,262.838,308.9,356.76,398.639,441.24,504.979,571.767,645.037,717.644,791.017,851.015,904.781,983.089,1063.901,1139.955,1212.223,1276.552,1329.773,1381.905,1443.847,1507.896,1583.021,1661.727,1735.232,1804.997,1861.857,1933.536,2003.874,2084.966,2161.093,2234.466,2289.912,2341.072,2410.364,2479.996,2560.277,2633.4,2703.076,2750.655,2794.508,2844.342,2898.683,2955.189,3010.738,3055.696,3087.367,3121.571,3174.439,3224.45,3273.061,3311.625,3348.761,3379.283,3406.181,3444.141,3489.188,3529.137,3566.759,3596.824,3619.038,3638.998,3662.758,3687.196,3713.844,3739.416,3761.63,3777.936,3793.698,3814.969,3836.623,3856.494,3874.731,3891.082,3902.778,3913.355,3929.47,3946.543,3964.013,3978.847,3994.373,4007.453,4019.341,4034.528,4050.481,4065.197,4080.222,4094.717,4104.528,4113.72,4126.859,4139.852,4151.298,4161.565,4170.978,4180.317,4186.312,4195.445,4201.396,4202.324,4202.413,4209.807,4219.014,4226.659,4231.947,4240.55,4249.933,4259.405,4267.124,4279.292,4288.866,4296.777,4315.043,4322.968,4332.498,4342.618,4354.83,4365.524,4374.156,4380.712,4389.005,4400.48,4411.808,4423.15,4434.198,4444.333,4452.479,4464.293,4476.77,4489.777,4501.105,4512.108,4525.984,4535.928,4549.274,4563.474,4576.731,4588,4604.395,4616.445,4633.385,4648.69,4665.601,4687.122,4702.472,4718.837,4729.458,4745.853,4758.094,4775.697,4791.312,4810.933,4826.37,4840.762,4858.454,4875.335,4898.049,4917.155,4933.506,4959.314,4980.158,4999.779,5022.081,5048.287,5077.424,5104.336,5148.337,5191.807,5228.353,5267.846,5311.021,5363.226,5414.842,5464.013,5502.681,5548.566,5607.592,5657.823,5721.592,5786.833,5844.268,5908.758,5981.469,6072.607,6170.477,6271.794,6360.914,6444.878,6504.625,6610.037,6714.875,6816.943,6919.968,7109.772,7448.06,7633.709,7848.142,8056.918,8315.44,8520.018,8743.555,8933.314,9139.704,9393.807,9684.75,9964.572,10195.209,10433.638,10683.97,10961.346,11276.065,11669.475,11982.602,12285.448,12624.738,12916.359,13224.228,13561.912,13925.963,14265.916,14625.607,14948.486,15291.134,15570.529,15866.29,16237.589,16593.538,16937.085,17305.04,17608.195,17923.385,18224.64,18563.444,19057.168,19459.549,19855.448,20223.373,20538.829,20834.324,21123.706,21461.567,21760.214,22053.662,22328.638,22556.446,22723.55,22992.545,23251.17,23469.492,23703.575,23882.758,24065.83,24264.648,24503.829,24724.065,24965.382,25194.869,25450.769,25668.398,25850.851,26095.88,26406.194,26727.085,27044.588,27317.707,27617.872,27891.405,28264.088,28787.495],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.088,0,0.015,0,0,0.059,0.015,0,0.015,0.015,0.015,0.015,0,0,0.015,0,0.015,0.029,0.015,0,0.074,0.029,0.059,0.044,0.103,0.177,0.074,0.486,0.589,0.81,0.84,0.722,1.164,0.81,0.795,2.165,3.815,6.069,7.203,7.071,5.362,6.526,9.059,11.343,14.804,15.703,18.531,17.898,20.461,34.602,35.088,40.023,46.063,47.86,41.879,42.601,63.739,66.788,73.27,72.607,73.373,59.998,53.767,78.308,80.812,76.054,72.268,64.328,53.222,52.132,61.942,64.049,75.126,78.705,73.506,69.764,56.86,71.679,70.339,81.092,76.128,73.373,55.446,51.159,69.293,69.631,80.282,73.123,69.676,47.58,43.853,49.834,54.341,56.506,55.549,44.958,31.671,34.204,52.868,50.01,48.611,38.565,37.136,30.522,26.898,37.961,45.046,39.949,37.622,30.065,22.214,19.96,23.76,24.438,26.648,25.572,22.214,16.307,15.762,21.271,21.654,19.872,18.236,16.351,11.696,10.577,16.115,17.073,17.47,14.834,15.526,13.081,11.888,15.187,15.953,14.716,15.025,14.495,9.811,9.192,13.14,12.992,11.446,10.267,9.413,9.339,5.995,9.133,5.951,0.928,0.088,7.395,9.207,7.645,5.288,8.603,9.383,9.472,7.719,12.167,9.575,7.91,18.266,7.925,9.531,10.12,12.212,10.694,8.632,6.555,8.293,11.475,11.328,11.343,11.048,10.135,8.146,11.814,12.477,13.007,11.328,11.004,13.876,9.943,13.346,14.2,13.258,11.269,16.395,12.05,16.94,15.305,16.911,21.521,15.349,16.366,10.621,16.395,12.241,17.603,15.614,19.621,15.438,14.392,17.691,16.881,22.715,19.106,16.351,25.808,20.844,19.621,22.302,26.206,29.137,26.913,44,43.47,36.547,39.493,43.175,52.205,51.616,49.171,38.668,45.886,59.025,50.231,63.769,65.242,57.435,64.49,72.71,91.138,97.87,101.317,89.12,83.964,59.747,105.412,104.838,102.068,103.026,189.803,338.288,185.649,214.433,208.776,258.522,204.578,223.537,189.759,206.39,254.102,290.944,279.822,230.637,238.429,250.331,277.377,314.719,393.41,313.128,302.846,339.289,291.621,307.869,337.684,364.051,339.952,359.691,322.88,342.648,279.395,295.761,371.299,355.95,343.547,367.955,303.155,315.19,301.255,338.803,493.725,402.38,395.899,367.926,315.455,295.495,289.382,337.861,298.648,293.448,274.976,227.808,167.104,268.995,258.625,218.322,234.084,179.183,183.072,198.819,239.18,220.237,241.316,229.488,255.9,217.63,182.453,245.028,310.314,320.891,317.503,273.12,300.165,273.532,372.684,523.407],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.088,0.088,0.103,0.103,0.103,0.162,0.177,0.177,0.104,0.119,0.119,0.134,0.134,0.075,0.075,0.075,0.075,0.089,0.089,0.074,0.148,0.177,0.221,0.265,0.353,0.501,0.56,1.046,1.561,2.342,3.123,3.801,4.862,5.495,6.216,7.895,11.121,16.38,22.743,29.092,33.29,39.006,47.27,56.448,67.437,77.071,88.399,99.226,114.325,142.401,168.43,197.11,228.369,260.526,283.874,308.577,351.855,384.041,422.223,454.807,482.117,494.255,506.143,541.85,558.923,568.189,567.187,558.908,538.757,530.891,539.066,524.807,519.121,521.772,523.01,528.446,532.084,551.631,560.028,577.071,578.073,572.741,554.681,536.076,548.509,546.461,556.404,548.435,541.983,516.19,504.597,503.272,488.32,475.195,450.462,422.297,384.292,370.916,379.931,380.107,374.377,356.436,338.023,323.587,318.814,322.571,314.749,304.688,293.699,285.199,270.277,259.715,256.577,243.054,224.656,210.279,194.871,181.113,174.661,175.972,173.866,169.3,160.888,151.667,141.149,135.419,135.772,131.574,127.39,122.352,119.642,116.372,116.564,121.174,121.012,118.655,116.21,115.871,110.156,106.267,107.519,105.324,100.817,96.368,90.756,85.6,81.784,81.725,74.536,62.472,51.114,48.242,48.036,46.342,45.635,45.105,48.537,57.081,64.712,69.484,69.852,70.117,83.095,82.417,82.565,83.213,87.706,86.233,85.29,83.935,73.962,77.512,79.309,80.532,79.368,78.809,78.323,83.582,87.766,89.298,89.298,88.959,91.787,91.595,96.795,99.181,99.962,98.224,103.291,104.337,107.401,112.763,116.328,123.649,125.74,130.837,125.063,129.408,124.709,127.007,125.71,123.81,123.899,121.925,128.995,129.481,139.955,141.458,142.195,148.382,153.788,159.017,163.628,172.953,179.375,187.182,214.831,232.493,248.196,268.068,288.941,314.94,337.419,359.677,354.345,356.761,379.239,389.977,410.571,423.608,429.427,444.746,478.788,524.04,562.885,613.971,639.322,658.044,660.356,701.278,733.406,744.336,749.492,837.978,1087.146,1188.831,1343.517,1446.881,1600.565,1703.075,1823.586,1823.542,1691.644,1760.097,1836.608,1907.654,1879.769,1913.62,1940.414,2028.032,2136.361,2275.669,2297.853,2320.877,2429.529,2482.721,2540.259,2600.566,2649.898,2596.44,2643.003,2663.037,2666.396,2654.17,2642.062,2675.677,2667.576,2671.171,2679.435,2659.71,2632.252,2654.112,2697.154,2819.58,2866.01,2918.362,2918.333,2930.633,2910.938,2899.065,2898.123,2703.046,2594.114,2473.191,2333.073,2184.722,2158.222,2127.465,2007.926,1943.362,1829.097,1737.193,1708.204,1780.28,1731.522,1714.213,1725.379,1747.195,1785.642,1785.023,1831.232,1902.366,2003.02,2079.207,2122.839,2167.104,2223.006,2413.237,2691.616],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.015,0.015,0.023,0.025,0.013,0.015,0.015,0.017,0.019,0.011,0.008,0.011,0.008,0.008,0.011,0.011,0.011,0.021,0.023,0.032,0.036,0.046,0.069,0.08,0.139,0.219,0.326,0.44,0.528,0.669,0.774,0.819,1.044,1.473,2.22,3.146,3.99,4.64,5.459,6.444,7.519,8.767,9.981,11.618,13.409,15.4,19.049,22.441,26.044,30.381,34.571,37.996,41.159,45.322,49.85,54.6,58.392,62.037,64.625,66.22,68.301,70.305,70.703,70.654,69.362,68.394,68.16,65.823,63.428,63.295,64.215,65.526,67.889,68.565,69.956,70.854,71.706,71.338,71.319,69.274,68.459,68.118,68.017,67.902,67.472,66.944,65.82,64.777,61.997,59.812,56.416,53.905,50.374,48.102,46.723,47.157,46.538,45.41,42.984,41.866,41.702,40.658,38.529,37.82,36.582,36.448,35.438,34.251,33.26,31.231,28.287,26.387,24.665,23.544,22.7,22.1,21.744,21.347,20.379,19.331,18.493,17.835,17.094,16.357,15.703,15.36,14.874,14.756,14.954,15.141,15.008,14.848,14.455,14.482,14.335,13.868,13.483,13.19,12.767,12.3,11.62,10.894,10.827,10.37,9.798,8.792,7.29,5.835,5.547,5.528,5.764,5.215,5.593,6.801,8.142,8.188,8.611,8.887,9.261,10.642,10.433,10.442,10.785,10.791,10.951,11.054,9.381,9.434,9.712,9.884,9.76,9.811,10.025,10.252,10.755,10.899,11.138,11.136,11.13,11.665,11.921,12.14,12.386,12.422,12.414,13.184,12.923,13.922,14.202,14.59,15.77,16.353,16.349,16.145,16.067,15.629,15.728,14.884,15.494,15.362,15.901,16.086,16.749,17.479,17.978,17.51,18.992,19.914,20.189,20.964,21.462,22.896,24.404,27.003,30.236,32.653,35.109,37.534,40.829,44.358,45.097,44.411,45.745,48.535,49.543,51.195,53.142,54.322,58.011,61.843,66.431,73.236,78.6,82.011,85.801,85.124,89.795,91.753,92.352,92.596,106.98,143.312,161.298,176.872,191.721,214.071,228.579,233.398,212.179,215.142,220.809,232.547,235.59,239.313,241.44,250.094,260.235,268.894,283.532,288.29,298.606,313.014,318.913,323.269,326.55,322.356,326.188,334.308,331.964,339.254,335.186,329.197,330.232,332.518,330.211,336.65,331.009,336.122,336.907,332.265,351.947,360.352,364.344,373.597,373.635,372.812,365.752,343.485,328.667,314.031,300.752,288.231,269.889,266.977,255.658,244.182,235.702,222.017,215.626,220.157,215.898,210.414,213.699,213.042,224.002,228.938,226.6,227.436,240.304,251.672,264.246,266.706,278.496,291.508,309.744,340.186]},{"iso":"USA","continent":"North America","population":331002647,"name":"United States","population_density":35.608,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,2,5,5,5,6,6,8,8,8,11,11,11,12,12,12,12,12,13,13,14,14,14,14,14,14,14,14,16,16,16,16,16,16,17,17,25,32,55,74,107,184,237,403,519,594,782,1147,1586,2219,2978,3212,4679,6512,9169,13663,20030,26025,34855,46086,56698,68773,86613,105293,124900,143779,165861,192177,218060,248447,280417,313432,341629,371802,403212,435407,469989,503474,532782,559709,585518,614082,644247,675648,708317,736244,761933,790353,816413,845727,878911,912662,944234,971078,994265,1018926,1046737,1076224,1110464,1138228,1162685,1186067,1210577,1235666,1263402,1290151,1315099,1333970,1353397,1376122,1397085,1424243,1449498,1473514,1491829,1513816,1534871,1557933,1583798,1607109,1628212,1648158,1666505,1685956,1704489,1727357,1751612,1775428,1794465,1819587,1841073,1861000,1882383,1907927,1929167,1946853,1964333,1982633,2003846,2026747,2051635,2076819,2095875,2115379,2138956,2165608,2193482,2224671,2256415,2282126,2313132,2349304,2383745,2424097,2469518,2510672,2551234,2591354,2637371,2688961,2744590,2796155,2841877,2891863,2935372,2996215,3056081,3118647,3178541,3239445,3298169,3356407,3424029,3492184,3568772,3640660,3703105,3763696,3825215,3889282,3961257,4029856,4103287,4168436,4223184,4279307,4344986,4416810,4484576,4553337,4610068,4656256,4700961,4758265,4812824,4872195,4930744,4984863,5031263,5079912,5126858,5183757,5235677,5300376,5347012,5387890,5424646,5469674,5517381,5561286,5609976,5653277,5687713,5724133,5764251,5809898,5855060,5902010,5947311,5981967,6017097,6058945,6100018,6143817,6193992,6237103,6268531,6291963,6319097,6353027,6389235,6436624,6477526,6511799,6545665,6585107,6623637,6668590,6717565,6759863,6798261,6849919,6889482,6928137,6974336,7022042,7066289,7103508,7135817,7178637,7219993,7265472,7319889,7368376,7404432,7443292,7488142,7538997,7597310,7653210,7707657,7753980,7795110,7846968,7906419,7970877,8039443,8096194,8145485,8212380,8273792,8336799,8412298,8493414,8576057,8637806,8704274,8780512,8859310,8949782,9048263,9137194,9241521,9324616,9450988,9554518,9682196,9809038,9937298,10047724,10169076,10308385,10454619,10616251,10795270,10963295,11099318,11258134,11419139,11591694,11780990,11977440,12157737,12304199,12472178,12646575,12830170,12944048,13148135,13303242,13442656,13599496,13783773,13985434,14205041,14434647,14650139,14830883,15020042,15239976,15463239,15689923,15924026,16143219,16334361,16527207,16725973,16973376,17206647],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.003,0.003,0.006,0.006,0.015,0.015,0.015,0.018,0.018,0.024,0.024,0.024,0.033,0.033,0.033,0.036,0.036,0.036,0.036,0.036,0.039,0.039,0.042,0.042,0.042,0.042,0.042,0.042,0.042,0.042,0.048,0.048,0.048,0.048,0.048,0.048,0.051,0.051,0.076,0.097,0.166,0.224,0.323,0.556,0.716,1.218,1.568,1.795,2.363,3.465,4.792,6.704,8.997,9.704,14.136,19.674,27.701,41.278,60.513,78.625,105.301,139.232,171.292,207.772,261.669,318.103,377.338,434.374,501.087,580.591,658.786,750.589,847.174,946.917,1032.104,1123.26,1218.153,1315.418,1419.895,1521.057,1609.6,1690.95,1768.922,1855.218,1946.35,2041.216,2139.913,2224.284,2301.894,2387.754,2466.485,2555.046,2655.299,2757.265,2852.648,2933.747,3003.798,3078.302,3162.322,3251.406,3354.849,3438.728,3512.615,3583.255,3657.303,3733.1,3816.894,3897.706,3973.077,4030.089,4088.78,4157.435,4220.767,4302.815,4379.113,4451.668,4507,4573.426,4637.035,4706.709,4784.85,4855.275,4919.03,4979.289,5034.718,5093.482,5149.472,5218.559,5291.837,5363.788,5421.301,5497.198,5562.11,5622.312,5686.912,5764.084,5828.252,5881.684,5934.493,5989.78,6053.867,6123.054,6198.243,6274.327,6331.898,6390.822,6462.051,6542.57,6626.781,6721.007,6816.909,6894.585,6988.258,7097.538,7201.589,7323.497,7460.72,7585.051,7707.594,7828.801,7967.824,8123.684,8291.746,8447.531,8585.662,8736.676,8868.122,9051.937,9232.799,9421.819,9602.766,9786.765,9964.177,10140.121,10344.416,10550.32,10781.702,10998.885,11187.539,11370.592,11556.448,11750.003,11967.448,12174.694,12396.538,12593.362,12758.762,12928.317,13126.741,13343.73,13548.46,13756.195,13927.587,14067.126,14202.186,14375.308,14540.137,14719.505,14896.388,15059.889,15200.069,15347.043,15488.873,15660.772,15817.629,16013.092,16153.986,16277.483,16388.528,16524.563,16668.691,16801.334,16948.432,17079.25,17183.286,17293.315,17414.516,17552.422,17688.862,17830.703,17967.563,18072.263,18178.395,18304.823,18428.91,18561.232,18712.817,18843.061,18938.009,19008.8,19090.775,19193.282,19302.67,19445.838,19569.408,19672.951,19775.265,19894.424,20010.828,20146.636,20294.596,20422.384,20538.389,20694.454,20813.979,20930.76,21070.333,21214.459,21348.134,21460.578,21558.187,21687.552,21812.493,21949.891,22114.291,22260.777,22369.706,22487.107,22622.605,22776.244,22952.415,23121.295,23285.787,23425.734,23549.993,23706.662,23886.271,24081.007,24288.153,24459.605,24608.519,24810.617,24996.151,25186.503,25414.594,25659.656,25909.331,26095.882,26296.69,26527.014,26765.073,27038.4,27335.923,27604.595,27919.78,28170.82,28552.606,28865.382,29251.114,29634.319,30021.808,30355.419,30722.038,31142.908,31584.699,32073.009,32613.848,33121.472,33532.415,34012.217,34498.633,35019.944,35591.83,36185.33,36730.03,37172.509,37679.995,38206.87,38761.533,39105.572,39722.145,40190.742,40611.929,41085.762,41642.486,42251.729,42915.189,43608.857,44259.885,44805.935,45377.408,46041.855,46716.361,47401.201,48108.455,48770.664,49348.128,49930.74,50531.236,51278.671,51983.412],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.003,0,0.009,0,0,0.003,0,0.006,0,0,0.009,0,0,0.003,0,0,0,0,0.003,0,0.003,0,0,0,0,0,0,0,0.006,0,0,0,0,0,0.003,0,0.024,0.021,0.069,0.057,0.1,0.233,0.16,0.502,0.35,0.227,0.568,1.103,1.326,1.912,2.293,0.707,4.432,5.538,8.027,13.577,19.235,18.112,26.677,33.93,32.06,36.48,53.897,56.435,59.235,57.036,66.712,79.504,78.196,91.803,96.585,99.742,85.187,91.156,94.894,97.265,104.477,101.162,88.543,81.35,77.972,86.295,91.132,94.866,98.697,84.371,77.61,85.86,78.73,88.561,100.253,101.966,95.383,81.099,70.051,74.504,84.02,89.084,103.443,83.878,73.888,70.64,74.048,75.797,83.794,80.812,75.371,57.012,58.691,68.655,63.332,82.048,76.298,72.555,55.332,66.425,63.61,69.673,78.141,70.425,63.755,60.259,55.429,58.764,55.99,69.087,73.277,71.951,57.513,75.897,64.912,60.202,64.601,77.172,64.169,53.432,52.809,55.287,64.087,69.187,75.19,76.084,57.571,58.924,71.229,80.519,84.211,94.226,95.903,77.676,93.673,109.28,104.051,121.908,137.222,124.331,122.543,121.207,139.023,155.86,168.062,155.784,138.132,151.014,131.446,183.814,180.863,189.02,180.947,183.999,177.412,175.944,204.294,205.905,231.382,217.183,188.654,183.053,185.857,193.554,217.445,207.246,221.844,196.823,165.4,169.555,198.424,216.989,204.729,207.735,171.391,139.54,135.059,173.122,164.829,179.367,176.884,163.5,140.18,146.975,141.83,171.899,156.857,195.464,140.893,123.498,111.044,136.035,144.129,132.642,147.099,130.818,104.035,110.029,121.201,137.905,136.44,141.842,136.86,104.7,106.132,126.428,124.087,132.322,151.585,130.244,94.948,70.791,81.975,102.507,109.389,143.168,123.57,103.543,102.313,119.159,116.404,135.809,147.96,127.787,116.005,156.065,119.525,116.782,139.573,144.126,133.676,112.443,97.609,129.365,124.942,137.398,164.4,146.485,108.93,117.401,135.497,153.639,176.171,168.881,164.491,139.948,124.259,156.669,179.609,194.736,207.146,171.452,148.914,202.098,185.533,190.352,228.092,245.061,249.675,186.551,200.808,230.324,238.059,273.327,297.523,268.672,315.185,251.04,381.785,312.777,385.731,383.205,387.489,333.611,366.619,420.87,441.791,488.31,540.839,507.624,410.942,479.803,486.416,521.31,571.887,593.5,544.7,442.48,507.485,526.875,554.663,344.04,616.572,468.597,421.187,473.833,556.724,609.243,663.46,693.668,651.028,546.05,571.473,664.448,674.505,684.84,707.254,662.209,577.464,582.612,600.497,747.435,704.741],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.003,0.003,0.012,0.012,0.012,0.015,0.015,0.021,0.018,0.018,0.018,0.018,0.018,0.018,0.018,0.012,0.012,0.012,0.006,0.006,0.009,0.006,0.006,0.006,0.006,0.006,0.003,0.003,0.006,0.006,0.006,0.006,0.006,0.006,0.009,0.009,0.027,0.048,0.117,0.174,0.274,0.507,0.664,1.166,1.492,1.698,2.197,3.243,4.469,6.148,8.281,8.486,12.568,17.879,25.338,37.812,55.721,71.921,96.305,129.528,157.156,188.098,233.968,276.826,316.826,355.75,395.785,441.359,487.495,542.818,585.506,628.813,654.765,688.885,717.067,734.828,761.109,770.468,762.426,744.034,736.819,731.958,728.196,725.797,720.017,703.226,692.293,696.803,697.561,699.827,708.948,716.048,712.734,709.462,701.903,690.547,695.837,696.36,699.55,681.462,659.967,649.508,653.505,654.798,654.572,646.3,618.228,591.362,576.165,574.18,563.464,569.715,562.219,553.962,533.923,543.336,548.255,549.273,564.082,552.459,539.916,527.62,527.717,520.056,512.436,511.85,506.986,508.512,502.27,517.908,527.391,528.829,537.44,545.525,536.417,517.898,513.194,492.584,491.759,500.744,511.333,510.245,503.647,509.139,527.559,552.791,572.915,597.954,618.667,620.259,656.361,706.717,739.539,780.928,833.939,864.044,890.684,934.215,979.565,1026.145,1090.156,1124.032,1124.942,1151.625,1160.528,1223.135,1264.975,1298.135,1311.02,1339.235,1378.515,1403.445,1476.293,1498.384,1548.903,1577.066,1584.773,1583.827,1592.272,1609.882,1623.033,1624.374,1614.836,1594.476,1571.222,1557.724,1570.291,1593.726,1581.01,1581.499,1531.046,1473.763,1443.422,1446.989,1413.394,1375.772,1347.927,1303.692,1272.481,1279.916,1286.687,1285.464,1277.492,1293.589,1257.598,1217.596,1188.46,1177.52,1179.819,1140.562,1130.804,1066.158,1029.3,1015.831,1025.988,1027.858,1020.169,1029.369,1019.13,993.012,995.109,1011.508,1014.394,1008.811,1023.956,1012.358,970.446,936.537,912.38,888.459,873.761,884.607,856.592,829.891,837.256,885.624,920.053,953.355,991.926,976.545,968.98,1021.502,1038.714,1036.337,1059.506,1067.823,1053.539,1038.195,1019.799,993.099,998.516,1019.132,1043.959,1046.318,1021.572,1026.53,1064.418,1088.692,1139.921,1171.404,1171.495,1164.958,1180.287,1219.555,1263.667,1304.764,1335.739,1338.31,1322.733,1384.883,1446.157,1479.84,1528.323,1578.648,1621.177,1636.276,1688.17,1716.396,1768.922,1851.897,1921.328,1944.939,2010.449,2074.938,2255.915,2338.368,2486.04,2595.918,2685.884,2750.823,2802.257,2972.087,3032.093,3207.626,3362.734,3487.153,3510.606,3656.798,3776.595,3877.035,4007.131,4112.321,4116.182,4051.038,4147.581,4194.653,4262.9,4085.63,4130.315,4005.412,3881.899,3913.252,3962.491,4044.859,4153.656,4503.284,4537.74,4615.193,4765.479,4956.094,5073.875,5149.472,5193.266,5161.807,5088.243,5124.805,5153.829,5236.816,5267.052],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.002,0.002,0.002,0.003,0.003,0.001,0.003,0.003,0.002,0.003,0.002,0.002,0.002,0,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0,0,0,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0,0.004,0.007,0.017,0.025,0.039,0.072,0.095,0.163,0.21,0.233,0.306,0.449,0.605,0.855,1.111,1.162,1.763,2.473,3.462,5.212,7.687,9.947,13.657,17.871,21.66,25.724,31.484,36.799,42.673,47.01,51.694,58.471,64.431,69.846,75.582,81.368,85.39,88.882,91.08,93.805,95.615,96.269,94.669,94.121,92.238,91.009,90.133,88.76,88.408,87.812,87.278,88.405,87.324,86.957,87.726,88.193,89.766,90.265,88.006,87.402,86.754,85.158,85.369,83.726,82.695,82.78,82.714,81.54,80.784,77.551,76.336,73.925,72.218,71.447,69.667,69.417,68.772,68.37,68.13,69.235,68.514,69.42,68.862,68.023,66.766,67.47,65.899,65.207,63.252,61.959,62.366,63.537,63.145,66.069,66.947,67.548,66.908,67.464,66.352,65.769,62.471,61.096,61.651,62.306,62.023,63.725,64.316,65.19,67.467,69.815,71.961,74.68,77.512,80.384,85.348,90.784,94.146,99.531,105.673,109.735,116.144,120.078,124.327,131.728,138.321,140.973,142.944,147.012,148.474,154.873,158.445,161.439,165.034,171.586,175.357,181.714,184.64,188.217,194.269,199.446,200.111,200.916,202.332,200.798,202.447,198.999,199.665,200.832,198.31,195.981,196.677,196.612,196.252,194.237,190.604,186.909,181.981,178.367,170.915,167.292,162.885,161.757,161.849,163.551,159.081,160.091,156.875,159.529,156.3,153.916,148.783,147.956,143.988,140.529,133.62,132.181,129.4,129.255,127.136,126.247,126.79,126.039,126.902,126.997,126.44,127.187,125.213,124.624,126.016,125.071,123.678,118.629,112.279,109.196,105.92,104.717,103.764,104.992,109.495,114.807,116.792,120.567,121.251,121.854,123.634,131.313,131.365,131.419,131.957,131.409,132.25,131.741,123.39,124.796,125.962,125.651,128.548,130.377,129.876,132.703,133.579,137.679,143.218,143.858,146.43,150.861,151.841,154.865,158.575,161.227,166.694,167.688,168.969,180.089,184.213,185.747,190.513,195.929,207.104,212.48,212.296,218.695,225.51,231.972,239.467,242.181,260.557,267.733,289.37,300.044,316.102,328.342,345.316,347.948,364.46,370.043,388.474,403.128,425.647,442.809,453.857,470.026,479.389,490.749,502.689,510.212,515.508,520.014,523.968,529.748,534.513,501.963,505.259,494.388,491.346,486.538,490.802,498.599,544.231,555.245,581.306,599.144,613.092,628.481,637.805,640.859,642.8,644.397,648.885,650.476,641.34,651.759,654.602]},{"iso":"URY","continent":"South America","population":3473727,"name":"Uruguay","population_density":19.751,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,6,8,29,50,79,94,110,135,158,162,189,217,238,274,303,309,320,338,350,369,386,400,406,415,424,456,473,494,501,480,483,492,493,502,508,517,528,535,543,549,557,563,596,606,620,625,630,643,648,652,655,657,670,673,684,694,702,707,711,717,719,724,732,733,734,737,738,746,749,753,764,769,787,789,803,811,816,821,823,825,826,828,832,834,845,845,845,846,847,847,847,847,848,848,849,849,850,853,859,876,882,885,902,907,919,924,929,932,936,943,947,952,955,956,960,965,974,977,985,986,987,989,997,1009,1026,1037,1044,1054,1064,1096,1117,1141,1166,1174,1192,1202,1218,1237,1243,1264,1278,1286,1291,1300,1309,1318,1325,1335,1353,1364,1385,1393,1409,1421,1434,1440,1457,1485,1493,1506,1516,1521,1527,1533,1536,1543,1551,1556,1570,1585,1595,1611,1626,1636,1653,1669,1679,1693,1712,1741,1759,1773,1780,1808,1812,1827,1856,1876,1890,1904,1917,1927,1934,1946,1959,1967,1998,2008,2010,2033,2046,2061,2097,2122,2145,2155,2177,2206,2226,2251,2268,2294,2313,2337,2388,2417,2450,2501,2531,2560,2623,2663,2701,2759,2807,2851,2872,2916,2981,3044,3082,3124,3149,3165,3196,3245,3309,3370,3441,3514,3560,3620,3700,3795,3883,3957,4030,4104,4208,4296,4377,4477,4564,4699,4763,4870,4988,5117,5303,5511,5716,5857,6024,6225,6455,6731,6965,7303,7505,7806,8104,8487,8849,9180,9708,10029,10418,10893,11436],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.152,1.727,2.303,8.348,14.394,22.742,27.06,31.666,38.863,45.484,46.636,54.408,62.469,68.514,78.878,87.226,88.953,92.12,97.302,100.756,106.226,111.12,115.15,116.877,119.468,122.059,131.271,136.165,142.21,144.225,138.18,139.044,141.635,141.922,144.513,146.241,148.831,151.998,154.013,156.316,158.044,160.347,162.074,171.574,174.452,178.483,179.922,181.361,185.104,186.543,187.695,188.558,189.134,192.876,193.74,196.907,199.785,202.088,203.528,204.679,206.407,206.982,208.422,210.725,211.013,211.3,212.164,212.452,214.755,215.619,216.77,219.937,221.376,226.558,227.134,231.164,233.467,234.906,236.346,236.921,237.497,237.785,238.361,239.512,240.088,243.255,243.255,243.255,243.542,243.83,243.83,243.83,243.83,244.118,244.118,244.406,244.406,244.694,245.558,247.285,252.179,253.906,254.77,259.663,261.103,264.557,265.997,267.436,268.3,269.451,271.466,272.618,274.057,274.921,275.209,276.36,277.8,280.39,281.254,283.557,283.845,284.133,284.709,287.012,290.466,295.36,298.527,300.542,303.421,306.299,315.511,321.557,328.466,335.663,337.966,343.147,346.026,350.632,356.102,357.829,363.874,367.905,370.208,371.647,374.238,376.829,379.42,381.435,384.313,389.495,392.662,398.707,401.01,405.616,409.071,412.813,414.54,419.434,427.495,429.798,433.54,436.419,437.858,439.585,441.313,442.176,444.191,446.494,447.934,451.964,456.282,459.161,463.767,468.085,470.964,475.858,480.464,483.343,487.373,492.842,501.191,506.373,510.403,512.418,520.478,521.63,525.948,534.296,540.054,544.084,548.114,551.857,554.736,556.751,560.205,563.948,566.251,575.175,578.053,578.629,585.25,588.993,593.311,603.674,610.871,617.492,620.371,626.704,635.053,640.81,648.007,652.901,660.386,665.855,672.764,687.446,695.794,705.294,719.976,728.612,736.961,755.097,766.612,777.551,794.248,808.066,820.732,826.778,839.444,858.156,876.292,887.231,899.322,906.519,911.125,920.049,934.155,952.579,970.14,990.579,1011.594,1024.836,1042.108,1065.138,1092.487,1117.82,1139.122,1160.137,1181.44,1211.379,1236.712,1260.03,1288.817,1313.863,1352.726,1371.15,1401.952,1435.922,1473.058,1526.602,1586.48,1645.495,1686.085,1734.16,1792.023,1858.235,1937.688,2005.051,2102.353,2160.504,2247.154,2332.941,2443.197,2547.408,2642.695,2794.693,2887.101,2999.084,3135.825,3292.141],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.576,0.576,6.045,6.045,8.348,4.318,4.606,7.197,6.621,1.152,7.773,8.061,6.045,10.364,8.348,1.727,3.167,5.182,3.455,5.47,4.894,4.03,1.727,2.591,2.591,9.212,4.894,6.045,2.015,-6.045,0.864,2.591,0.288,2.591,1.727,2.591,3.167,2.015,2.303,1.727,2.303,1.727,9.5,2.879,4.03,1.439,1.439,3.742,1.439,1.152,0.864,0.576,3.742,0.864,3.167,2.879,2.303,1.439,1.152,1.727,0.576,1.439,2.303,0.288,0.288,0.864,0.288,2.303,0.864,1.152,3.167,1.439,5.182,0.576,4.03,2.303,1.439,1.439,0.576,0.576,0.288,0.576,1.152,0.576,3.167,0,0,0.288,0.288,0,0,0,0.288,0,0.288,0,0.288,0.864,1.727,4.894,1.727,0.864,4.894,1.439,3.455,1.439,1.439,0.864,1.152,2.015,1.152,1.439,0.864,0.288,1.152,1.439,2.591,0.864,2.303,0.288,0.288,0.576,2.303,3.455,4.894,3.167,2.015,2.879,2.879,9.212,6.045,6.909,7.197,2.303,5.182,2.879,4.606,5.47,1.727,6.045,4.03,2.303,1.439,2.591,2.591,2.591,2.015,2.879,5.182,3.167,6.045,2.303,4.606,3.455,3.742,1.727,4.894,8.061,2.303,3.742,2.879,1.439,1.727,1.727,0.864,2.015,2.303,1.439,4.03,4.318,2.879,4.606,4.318,2.879,4.894,4.606,2.879,4.03,5.47,8.348,5.182,4.03,2.015,8.061,1.152,4.318,8.348,5.758,4.03,4.03,3.742,2.879,2.015,3.455,3.742,2.303,8.924,2.879,0.576,6.621,3.742,4.318,10.364,7.197,6.621,2.879,6.333,8.348,5.758,7.197,4.894,7.485,5.47,6.909,14.682,8.348,9.5,14.682,8.636,8.348,18.136,11.515,10.939,16.697,13.818,12.667,6.045,12.667,18.712,18.136,10.939,12.091,7.197,4.606,8.924,14.106,18.424,17.56,20.439,21.015,13.242,17.273,23.03,27.348,25.333,21.303,21.015,21.303,29.939,25.333,23.318,28.788,25.045,38.863,18.424,30.803,33.969,37.136,53.545,59.878,59.014,40.59,48.075,57.863,66.211,79.454,67.363,97.302,58.151,86.65,85.787,110.256,104.211,95.287,151.998,92.408,111.983,136.741,156.316],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.576,1.152,7.197,13.242,21.59,25.908,30.514,37.711,43.756,44.332,46.06,48.076,45.773,51.819,55.561,50.091,46.637,50.667,46.349,43.758,42.607,36.273,29.652,30.516,29.94,33.97,35.409,35.984,33.105,23.03,22.167,22.167,19.864,13.243,10.076,6.622,7.774,15.834,17.273,16.409,18.424,17.56,25.333,25.621,26.484,25.908,25.044,27.059,26.195,25.62,16.984,14.681,14.393,13.818,15.546,14.683,15.547,15.834,16.122,17.273,14.107,14.682,13.818,11.227,9.212,8.637,7.773,8.349,8.637,8.35,9.214,10.365,15.259,14.971,18.713,18.713,19.288,19.575,16.984,16.121,11.227,11.227,8.349,6.622,8.35,6.911,6.335,6.047,6.047,5.471,4.319,3.743,0.864,0.864,1.152,0.864,0.864,1.728,3.455,8.349,9.788,10.652,15.258,16.697,19.864,20.439,20.151,16.121,15.546,16.697,12.955,12.955,10.364,9.213,8.926,9.501,10.94,9.789,10.94,9.789,9.213,9.501,10.652,12.668,14.971,17.274,16.986,19.577,22.168,30.804,34.546,38,40.303,39.439,42.606,42.606,44.333,40.591,36.273,35.409,32.242,32.242,28.499,28.211,26.196,23.317,23.605,20.439,21.591,22.455,27.061,26.773,28.788,29.652,31.379,30.227,29.939,34.833,31.091,32.53,30.803,28.787,26.772,26.772,22.742,16.696,16.696,14.393,15.544,18.423,19.575,22.454,25.908,26.772,29.363,32.53,31.379,31.091,33.682,37.424,38.288,39.439,36.56,40.015,38.288,38.576,41.454,38.864,37.712,37.712,39.439,34.257,35.12,34.257,29.651,26.196,31.09,29.939,26.773,30.515,32.242,33.105,39.727,44.621,42.318,42.318,48.075,49.802,51.818,54.697,49.227,49.515,48.364,52.394,60.743,60.743,64.485,71.97,75.712,76.575,89.241,93.847,90.104,98.453,102.771,100.756,98.165,102.484,103.06,109.681,109.681,105.075,98.454,90.393,93.272,94.711,94.423,93.847,103.347,112.271,118.316,130.983,145.089,158.331,165.24,168.983,169.559,169.847,186.544,194.604,194.892,196.332,196.044,213.604,211.013,220.513,224.543,236.346,266.573,297.663,331.632,333.359,363.01,390.07,422.312,464.63,478.448,515.872,515.009,561.069,598.781,651.174,689.174,705.007,789.642,784.748,838.58,888.671,959.2],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.701,4.359,5.305,6.169,5.47,5.716,5.675,5.922,6.745,6.909,6.21,6.498,6.128,5.47,5.387,4.606,3.989,3.989,3.907,3.537,4.359,4.277,4.442,4.154,3.043,2.797,2.797,1.522,1.193,0.576,0.658,1.974,2.139,2.097,2.303,2.262,2.262,3.249,3.208,3.496,3.372,3.331,3.537,3.496,2.303,2.015,1.522,1.851,1.768,1.686,1.892,2.056,2.139,2.221,1.933,1.892,1.645,1.563,1.275,1.11,1.069,0.864,1.11,1.028,0.864,1.275,1.439,2.056,2.097,2.344,2.55,2.591,2.344,2.221,1.563,1.522,1.028,0.864,0.74,0.987,0.905,0.823,0.823,0.781,0.617,0.535,0.082,0.123,0.123,0.123,0.082,0.123,0.247,0.494,1.152,1.398,1.481,2.18,2.344,2.714,2.673,2.18,2.056,2.097,1.686,1.645,1.357,1.275,1.11,1.152,1.193,1.275,1.234,1.357,1.275,1.275,1.193,1.316,1.439,2.015,2.139,2.385,2.755,3.084,4.071,4.442,4.729,5.305,5.346,5.675,5.675,5.017,4.935,4.195,4.03,4.277,3.866,3.66,3.372,2.961,3.084,2.509,2.344,2.755,3.002,3.496,3.455,3.742,3.948,4.071,3.578,3.825,4.113,4.113,3.989,3.907,3.578,3.578,3.126,2.097,2.056,1.851,1.645,2.015,2.385,2.55,3.084,3.413,3.496,3.989,4.071,3.866,4.03,4.154,4.729,5.058,4.935,4.565,5.305,4.894,4.729,4.729,4.812,4.812,5.1,4.483,4.729,4.4,3.701,3.413,3.167,3.866,3.742,3.413,4.071,4.113,4.195,5.346,5.1,5.634,5.963,5.922,6.58,6.786,6.333,6.004,6.128,6.498,6.58,7.485,7.855,8.184,9.582,9.747,10.158,11.762,11.309,11.68,12.708,12.584,13.16,12.831,12.05,13.078,14.106,13.283,13.037,12.255,12.05,11.515,10.857,10.898,11.844,13.037,15.011,16.244,17.437,18.712,19.987,21.097,21.221,21.221,22.372,24.182,24.511,23.935,24.428,24.963,27.513,27.101,27.225,28.459,30.433,33.969,38.945,41.824,44.991,47.458,50.872,55.025,58.727,59.796,65.265,67.774,73.285,77.274,83.566,87.103,91.092,98.906,103.8,107.419,114.698,121.278]},{"iso":"UZB","continent":"Asia","population":33469199,"name":"Uzbekistan","population_density":76.134,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,6,10,15,23,33,43,43,46,50,60,75,88,104,144,149,172,181,205,227,266,342,457,520,545,582,624,767,865,998,1165,1302,1349,1405,1490,1565,1627,1678,1716,1758,1804,1862,1869,1904,1939,2002,2039,2086,2118,2149,2189,2207,2233,2298,2325,2349,2418,2486,2519,2612,2645,2686,2738,2753,2791,2855,2939,2964,3028,3115,3164,3189,3290,3369,3444,3468,3546,3623,3702,3760,3843,3939,4007,4094,4331,4440,4520,4623,4741,4869,4966,5080,5263,5493,5682,5767,5946,6153,6315,6461,6662,6990,7177,7427,7682,7948,8222,8503,8781,9078,9396,9708,10020,10362,10838,11092,11564,12027,12513,12997,13591,14085,14581,15066,15607,16186,16752,17149,17881,18379,18986,19360,19952,20531,21209,21699,22585,23271,24009,24783,25336,26066,27047,27793,28315,29057,29652,30609,31304,31747,32654,33323,33821,34528,35329,35702,36352,37112,37547,38074,38532,38946,39348,39641,39964,40447,40720,41067,41424,41893,42127,42437,42688,42998,43293,43587,43893,44281,44930,45473,46160,46721,47287,47836,48429,49015,49627,50253,50992,51640,52070,52685,53275,53834,54392,54819,55320,55776,56354,56717,57190,57454,58238,58612,58946,59343,59579,60026,60342,60776,61098,61319,61642,61950,62278,62588,62809,63124,63523,63831,64010,64439,64724,64923,65307,65667,65881,66141,66392,66628,66932,67156,67254,67553,67779,68009,68139,68367,68730,69027,69027,69397,69560,69754,69987,70243,70381,70648,70858,70921,71208,71431,71617,71774,71985,72227,72409,72513,72718,72870,73094,73276,73335,73431,73751,73751,74053,74053,74206,74352,74498,74811,74811,74956,75094,75241,75538,75538],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.03,0.179,0.299,0.448,0.687,0.986,1.285,1.285,1.374,1.494,1.793,2.241,2.629,3.107,4.302,4.452,5.139,5.408,6.125,6.782,7.948,10.218,13.654,15.537,16.284,17.389,18.644,22.917,25.845,29.818,34.808,38.901,40.306,41.979,44.519,46.759,48.612,50.136,51.271,52.526,53.9,55.633,55.842,56.888,57.934,59.816,60.922,62.326,63.282,64.208,65.403,65.941,66.718,68.66,69.467,70.184,72.246,74.277,75.263,78.042,79.028,80.253,81.807,82.255,83.39,85.302,87.812,88.559,90.471,93.071,94.535,95.282,98.299,100.66,102.901,103.618,105.948,108.249,110.609,112.342,114.822,117.69,119.722,122.321,129.403,132.659,135.05,138.127,141.653,145.477,148.375,151.781,157.249,164.121,169.768,172.308,177.656,183.841,188.681,193.043,199.049,208.849,214.436,221.906,229.524,237.472,245.659,254.054,262.361,271.234,280.736,290.058,299.38,309.598,323.82,331.409,345.512,359.345,373.866,388.327,406.075,420.835,435.654,450.145,466.309,483.609,500.52,512.382,534.252,549.132,567.268,578.442,596.13,613.43,633.687,648.327,674.8,695.296,717.346,740.472,756.995,778.806,808.116,830.405,846.002,868.171,885.949,914.542,935.308,948.544,975.643,995.632,1010.511,1031.635,1055.568,1066.712,1086.133,1108.84,1121.837,1137.583,1151.267,1163.637,1175.648,1184.402,1194.053,1208.484,1216.641,1227.009,1237.675,1251.688,1258.68,1267.942,1275.441,1284.704,1293.518,1302.302,1311.445,1323.037,1342.428,1358.652,1379.179,1395.94,1412.851,1429.254,1446.972,1464.481,1482.766,1501.47,1523.55,1542.911,1555.759,1574.134,1591.762,1608.464,1625.136,1637.894,1652.863,1666.487,1683.757,1694.603,1708.735,1716.623,1740.048,1751.222,1761.201,1773.063,1780.114,1793.47,1802.911,1815.879,1825.499,1832.102,1841.753,1850.956,1860.756,1870.018,1876.621,1886.033,1897.954,1907.156,1912.505,1925.322,1933.838,1939.784,1951.257,1962.013,1968.407,1976.175,1983.675,1990.726,1999.809,2006.502,2009.43,2018.363,2025.116,2031.988,2035.872,2042.684,2053.53,2062.404,2062.404,2073.459,2078.329,2084.125,2091.087,2098.736,2102.859,2110.836,2117.111,2118.993,2127.568,2134.231,2139.788,2144.479,2150.783,2158.014,2163.452,2166.559,2172.684,2177.226,2183.918,2189.356,2191.119,2193.987,2203.548,2203.548,2212.572,2212.572,2217.143,2221.505,2225.867,2235.219,2235.219,2239.552,2243.675,2248.067,2256.941,2256.941],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.149,0.12,0.149,0.239,0.299,0.299,0,0.09,0.12,0.299,0.448,0.388,0.478,1.195,0.149,0.687,0.269,0.717,0.657,1.165,2.271,3.436,1.882,0.747,1.105,1.255,4.273,2.928,3.974,4.99,4.093,1.404,1.673,2.54,2.241,1.852,1.524,1.135,1.255,1.374,1.733,0.209,1.046,1.046,1.882,1.105,1.404,0.956,0.926,1.195,0.538,0.777,1.942,0.807,0.717,2.062,2.032,0.986,2.779,0.986,1.225,1.554,0.448,1.135,1.912,2.51,0.747,1.912,2.599,1.464,0.747,3.018,2.36,2.241,0.717,2.331,2.301,2.36,1.733,2.48,2.868,2.032,2.599,7.081,3.257,2.39,3.077,3.526,3.824,2.898,3.406,5.468,6.872,5.647,2.54,5.348,6.185,4.84,4.362,6.006,9.8,5.587,7.47,7.619,7.948,8.187,8.396,8.306,8.874,9.501,9.322,9.322,10.218,14.222,7.589,14.103,13.834,14.521,14.461,17.748,14.76,14.82,14.491,16.164,17.299,16.911,11.862,21.871,14.879,18.136,11.174,17.688,17.299,20.257,14.64,26.472,20.496,22.05,23.126,16.523,21.811,29.311,22.289,15.596,22.17,17.778,28.593,20.765,13.236,27.1,19.989,14.879,21.124,23.932,11.145,19.421,22.707,12.997,15.746,13.684,12.37,12.011,8.754,9.651,14.431,8.157,10.368,10.667,14.013,6.992,9.262,7.499,9.262,8.814,8.784,9.143,11.593,19.391,16.224,20.526,16.762,16.911,16.403,17.718,17.509,18.285,18.704,22.08,19.361,12.848,18.375,17.628,16.702,16.672,12.758,14.969,13.624,17.27,10.846,14.132,7.888,23.425,11.174,9.979,11.862,7.051,13.356,9.442,12.967,9.621,6.603,9.651,9.202,9.8,9.262,6.603,9.412,11.921,9.202,5.348,12.818,8.515,5.946,11.473,10.756,6.394,7.768,7.499,7.051,9.083,6.693,2.928,8.934,6.752,6.872,3.884,6.812,10.846,8.874,0,11.055,4.87,5.796,6.962,7.649,4.123,7.977,6.274,1.882,8.575,6.663,5.557,4.691,6.304,7.231,5.438,3.107,6.125,4.541,6.693,5.438,1.763,2.868,9.561,0,9.023,0,4.571,4.362,4.362,9.352,0,4.332,4.123,4.392,8.874,0],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.149,0.269,0.418,0.657,0.956,1.255,1.255,1.345,1.316,1.495,1.794,1.943,2.122,3.018,3.167,3.764,3.913,4.331,4.54,5.317,7.11,9.351,11.084,11.144,11.98,12.518,16.134,17.897,19.6,21.154,23.365,24.022,24.59,25.875,23.843,22.767,20.317,16.462,13.624,13.594,13.654,11.323,10.128,9.322,9.68,9.65,9.799,9.381,8.574,9.56,9.052,8.783,8.843,8.545,7.858,8.964,10.07,9.861,12.102,12.311,11.594,12.341,12.072,11.145,11.025,12.549,10.517,11.443,12.817,12.727,13.026,14.909,15.357,15.088,15.058,15.477,15.179,16.075,17.061,16.523,17.031,16.822,18.704,23.454,24.41,24.44,25.784,26.83,27.786,28.652,29.459,27.846,31.461,34.718,34.181,36.003,38.364,40.306,41.262,41.8,44.728,44.668,49.598,51.869,53.632,56.979,61.013,63.313,62.387,66.301,68.153,69.856,72.126,78.161,77.354,83.151,88.111,93.131,98.27,106.696,111.238,111.836,118.738,120.799,124.264,126.654,124.055,128.178,128.297,131.613,128.296,129.82,129.82,133.166,135.944,140.545,146.162,150.076,162.028,160.863,165.375,174.429,182.078,171.202,172.876,168.604,174.071,178.313,169.738,167.527,165.227,164.51,163.464,169.618,152.17,150.826,160.297,146.194,141.951,140.756,132.002,120.081,117.69,107.92,99.644,94.804,89.426,86.409,88.052,83.033,83.541,81.389,76.22,76.877,75.293,73.769,71.349,83.748,90.71,103.737,111.237,119.334,126.953,135.528,141.444,140.338,142.818,144.372,146.971,142.908,144.88,144.79,143.983,142.37,136.424,129.313,123.576,127.998,120.469,116.973,108.159,114.912,113.328,108.338,106.576,96.357,98.867,94.177,99.256,85.452,80.881,80.553,77.893,80.642,76.548,73.709,70.154,72.454,75.053,70.75,74.366,73.081,69.765,74.635,75.979,70.452,69.018,71.169,65.402,65.97,66.717,58.172,56.35,56.708,55.812,52.197,51.958,53.721,55.902,52.974,55.095,53.213,52.137,55.215,56.052,49.329,48.432,54.706,45.533,49.238,50.105,48.7,45.742,47.923,47.177,46.341,47.566,45.116,42.994,44.13,44.877,40.336,35.973,40.096,36.989,39.887,35.346,33.224,32.148,34.747,41.231,31.67,36.002,31.102,35.494,39.797,35.435],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.179,0.179,0.171,0.171,0.192,0.222,0.235,0.26,0.431,0.44,0.521,0.516,0.555,0.593,0.691,0.845,1.315,1.485,1.554,1.609,1.695,2.138,2.232,2.309,2.753,3.231,3.274,3.334,3.086,2.988,2.685,2.19,1.767,1.746,1.703,1.588,1.298,1.182,1.114,1.221,1.199,1.204,1.093,1.195,1.216,1.144,0.986,1.105,1.02,0.986,1.148,1.268,1.332,1.618,1.481,1.541,1.66,1.43,1.302,1.434,1.396,1.362,1.46,1.609,1.754,1.699,1.857,1.835,2.049,1.878,1.84,1.959,2.19,2.006,2.023,2.113,2.301,2.339,3.022,3.15,3.244,3.329,3.423,3.679,3.722,3.197,3.513,4.153,4.52,4.379,4.597,5.066,5.271,5.113,4.99,5.583,6.018,6.321,6.526,6.97,7.517,7.858,7.645,8.114,8.404,8.648,8.844,9.134,9.967,9.864,10.611,11.23,11.973,12.707,13.782,13.859,14.892,14.948,15.281,15.678,16.028,15.187,16.203,16.211,16.732,16.019,16.074,16.13,17.329,16.296,17.953,18.29,19.843,20.62,20.509,20.731,22.827,22.229,21.529,21.546,20.782,22.507,22.357,20.061,20.748,21.376,20.334,20.812,20.146,18.772,19.656,19.028,18.029,18.153,17.09,15.439,15.562,14.038,12.173,12.378,11.294,10.82,10.577,10.863,10.611,10.556,9.565,9.723,9.501,9.232,8.537,9.194,10.641,11.887,13.496,14.632,15.793,16.83,17.705,17.436,17.731,17.47,18.23,18.58,18.072,18.166,18.183,17.957,17.667,16.335,15.707,15.818,15.66,14.692,14.324,13.07,14.593,14.051,13.531,12.758,12.216,12.105,12.327,10.833,10.611,10.129,9.813,10.12,9.612,9.587,8.677,8.648,9.407,9.343,8.793,9.224,9.117,9.023,9.318,9.151,8.75,9.096,8.336,8.127,8.575,7.892,6.774,7.137,6.992,6.902,6.449,6.125,6.718,7.568,6.291,6.906,6.62,6.893,6.915,6.458,5.779,6.919,6.236,5.809,6.206,6.163,5.865,5.946,5.707,5.843,6.351,5.57,5.493,5.348,5.634,5.51,4.729,4.362,5.284,4.409,5.049,4.093,3.97,4.341,4.554,4.524,4.524,3.854,4.443,4.418,5.062,4.439]},{"iso":"VUT","continent":"Oceania","population":307150,"name":"Vanuatu","population_density":22.662,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.256,3.256,3.256,3.256,3.256,3.256,3.256,3.256,3.256,3.256,3.256,3.256,3.256,3.256,3.256,3.256,3.256,3.256,3.256,3.256,3.256,3.256,3.256,3.256,3.256,3.256,3.256,3.256,3.256,3.256,3.256,3.256,3.256,3.256,3.256,3.256,3.256,3.256],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},{"iso":"VAT","continent":"Europe","population":809,"name":"Vatican","population_density":null,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,4,6,6,6,6,6,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,10,10,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,19,19,19,26,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1236.094,1236.094,1236.094,1236.094,1236.094,1236.094,1236.094,1236.094,1236.094,1236.094,1236.094,1236.094,1236.094,1236.094,1236.094,1236.094,1236.094,1236.094,4944.376,4944.376,4944.376,4944.376,7416.564,7416.564,7416.564,7416.564,7416.564,8652.658,8652.658,8652.658,8652.658,8652.658,8652.658,9888.752,9888.752,9888.752,9888.752,9888.752,9888.752,9888.752,9888.752,9888.752,9888.752,9888.752,9888.752,11124.845,11124.845,11124.845,11124.845,11124.845,11124.845,11124.845,11124.845,12360.939,12360.939,13597.033,13597.033,13597.033,13597.033,13597.033,13597.033,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,14833.127,23485.785,23485.785,23485.785,32138.443,32138.443,33374.536,33374.536,33374.536,33374.536,33374.536,33374.536,33374.536,33374.536,33374.536,33374.536,33374.536,33374.536,33374.536,33374.536,33374.536,33374.536,33374.536,33374.536,33374.536,33374.536,33374.536,33374.536,33374.536,33374.536,33374.536,33374.536,33374.536,33374.536,33374.536,33374.536,33374.536,33374.536,33374.536,33374.536,33374.536,33374.536,33374.536,33374.536,33374.536,33374.536,33374.536,33374.536,33374.536,33374.536,33374.536,33374.536,33374.536,33374.536,33374.536,33374.536,33374.536,33374.536,33374.536,33374.536,33374.536,33374.536,33374.536,33374.536,33374.536,33374.536,33374.536,33374.536],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3708.282,0,0,0,2472.188,0,0,0,0,1236.094,0,0,0,0,0,1236.094,0,0,0,0,0,0,0,0,0,0,0,1236.094,0,0,0,0,0,0,0,1236.094,0,1236.094,0,0,0,0,0,1236.094,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8652.658,0,0,8652.658,0,1236.094,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3708.282,3708.282,3708.282,3708.282,6180.47,6180.47,6180.47,6180.47,2472.188,3708.282,3708.282,3708.282,1236.094,1236.094,1236.094,2472.188,2472.188,1236.094,1236.094,1236.094,1236.094,1236.094,1236.094,0,0,0,0,1236.094,1236.094,1236.094,1236.094,1236.094,1236.094,1236.094,1236.094,1236.094,1236.094,2472.188,2472.188,2472.188,2472.188,2472.188,2472.188,2472.188,2472.188,1236.094,1236.094,1236.094,1236.094,1236.094,1236.094,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8652.658,8652.658,8652.658,17305.316,17305.316,18541.41,18541.41,18541.41,9888.752,9888.752,9888.752,1236.094,1236.094,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,529.755,529.755,529.755,529.755,882.924,882.924,882.924,353.17,353.17,529.755,529.755,176.585,176.585,176.585,176.585,353.17,176.585,176.585,176.585,176.585,176.585,176.585,0,0,0,0,0,176.585,176.585,176.585,176.585,176.585,176.585,176.585,0,176.585,176.585,353.17,353.17,353.17,353.17,353.17,176.585,353.17,176.585,176.585,176.585,176.585,176.585,176.585,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1236.094,1236.094,1236.094,2472.188,2472.188,2648.773,2648.773,1412.679,1412.679,1412.679,176.585,176.585,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},{"iso":"VEN","continent":"South America","population":28435943,"name":"Venezuela","population_density":36.253,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,10,17,33,36,42,42,70,70,77,84,91,107,107,119,119,135,135,143,146,153,155,159,165,165,167,171,171,175,181,189,189,197,204,204,227,256,256,285,288,311,318,323,325,329,329,331,333,335,345,357,357,361,379,381,388,402,414,422,423,423,455,459,504,541,618,749,824,882,944,1010,1121,1177,1211,1245,1325,1370,1459,1510,1662,1819,1952,2087,2145,2316,2377,2473,2632,2738,2814,2879,2904,2978,3062,3150,3386,3483,3591,3789,3917,4048,4187,4366,4563,4779,5130,5297,5530,5832,6062,6273,6537,6750,7169,7411,7693,8008,8372,8803,9178,9465,9707,10010,10428,10854,11191,11483,11891,12334,12774,13164,13613,14263,14929,15463,15988,16571,17158,17859,18574,19443,20206,20754,21438,22299,23280,24166,24961,25805,26800,27938,29088,30369,31381,32607,33755,34802,35697,36868,37567,38219,38957,39564,40338,41158,41965,42898,43879,44946,45868,46728,47756,48883,49877,50973,52165,53289,54350,55563,56751,57823,58663,59630,60540,61569,62655,63416,64284,65174,65949,66656,67443,68453,69439,70406,71273,71940,72691,73528,74363,75122,76029,76820,77646,78434,79117,79796,80404,81019,81696,82453,83137,83756,84391,85005,85469,85758,86289,86636,86636,87644,88035,88416,88718,89142,89565,90047,90400,90876,91280,91589,92013,92325,92705,93100,93480,93921,94305,94698,94883,95149,95445,95750,96140,96441,96933,97352,97739,98050,98350,98665,99017,99435,99835,100143,100498,100817,101215,101524,101760,102040,102394,102621,103067,103548,103877,104177,104442,104904,105384,105852,106280,106715,107177,107786,108125,108480,108717,109081],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.07,0.352,0.598,1.161,1.266,1.477,1.477,2.462,2.462,2.708,2.954,3.2,3.763,3.763,4.185,4.185,4.748,4.748,5.029,5.134,5.381,5.451,5.592,5.803,5.803,5.873,6.014,6.014,6.154,6.365,6.647,6.647,6.928,7.174,7.174,7.983,9.003,9.003,10.023,10.128,10.937,11.183,11.359,11.429,11.57,11.57,11.64,11.711,11.781,12.133,12.555,12.555,12.695,13.328,13.399,13.645,14.137,14.559,14.84,14.876,14.876,16.001,16.142,17.724,19.025,21.733,26.34,28.977,31.017,33.197,35.518,39.422,41.391,42.587,43.783,46.596,48.178,51.308,53.102,58.447,63.968,68.646,73.393,75.433,81.446,83.591,86.967,92.559,96.287,98.959,101.245,102.124,104.727,107.681,110.775,119.075,122.486,126.284,133.247,137.748,142.355,147.243,153.538,160.466,168.062,180.405,186.278,194.472,205.093,213.181,220.601,229.885,237.376,252.111,260.621,270.538,281.615,294.416,309.573,322.761,332.853,341.364,352.019,366.719,381.7,393.551,403.82,418.168,433.747,449.22,462.935,478.725,501.584,525.005,543.784,562.246,582.748,603.391,628.043,653.187,683.747,710.58,729.851,753.905,784.184,818.682,849.84,877.798,907.478,942.469,982.489,1022.931,1067.979,1103.568,1146.683,1187.054,1223.874,1255.348,1296.528,1321.11,1344.038,1369.991,1391.338,1418.557,1447.394,1475.773,1508.584,1543.082,1580.605,1613.029,1643.272,1679.424,1719.057,1754.013,1792.555,1834.474,1874.002,1911.313,1953.971,1995.749,2033.448,2062.988,2096.994,2128.996,2165.182,2203.373,2230.135,2260.66,2291.958,2319.213,2344.076,2371.752,2407.27,2441.945,2475.951,2506.441,2529.897,2556.307,2585.742,2615.106,2641.797,2673.694,2701.511,2730.558,2758.27,2782.289,2806.167,2827.548,2849.176,2872.984,2899.605,2923.659,2945.427,2967.758,2989.35,3005.668,3015.831,3034.505,3046.707,3046.707,3082.156,3095.906,3109.304,3119.925,3134.835,3149.711,3166.661,3179.075,3195.815,3210.022,3220.888,3235.799,3246.771,3260.135,3274.025,3287.389,3302.897,3316.401,3330.222,3336.728,3346.082,3356.491,3367.217,3380.932,3391.518,3408.82,3423.554,3437.164,3448.101,3458.651,3469.728,3482.107,3496.807,3510.874,3521.705,3534.189,3545.407,3559.404,3570.27,3578.57,3588.416,3600.865,3608.848,3624.533,3641.448,3653.018,3663.568,3672.887,3689.134,3706.014,3722.472,3737.523,3752.821,3769.068,3790.484,3802.406,3814.89,3823.225,3836.025],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.281,0.246,0.563,0.106,0.211,0,0.985,0,0.246,0.246,0.246,0.563,0,0.422,0,0.563,0,0.281,0.106,0.246,0.07,0.141,0.211,0,0.07,0.141,0,0.141,0.211,0.281,0,0.281,0.246,0,0.809,1.02,0,1.02,0.106,0.809,0.246,0.176,0.07,0.141,0,0.07,0.07,0.07,0.352,0.422,0,0.141,0.633,0.07,0.246,0.492,0.422,0.281,0.035,0,1.125,0.141,1.583,1.301,2.708,4.607,2.638,2.04,2.18,2.321,3.904,1.969,1.196,1.196,2.813,1.583,3.13,1.794,5.345,5.521,4.677,4.748,2.04,6.014,2.145,3.376,5.592,3.728,2.673,2.286,0.879,2.602,2.954,3.095,8.299,3.411,3.798,6.963,4.501,4.607,4.888,6.295,6.928,7.596,12.344,5.873,8.194,10.62,8.088,7.42,9.284,7.491,14.735,8.51,9.917,11.078,12.801,15.157,13.188,10.093,8.51,10.656,14.7,14.981,11.851,10.269,14.348,15.579,15.473,13.715,15.79,22.858,23.421,18.779,18.463,20.502,20.643,24.652,25.144,30.56,26.832,19.271,24.054,30.279,34.499,31.158,27.958,29.681,34.991,40.02,40.442,45.049,35.589,43.114,40.371,36.82,31.474,41.18,24.582,22.929,25.953,21.346,27.219,28.837,28.38,32.811,34.499,37.523,32.424,30.243,36.151,39.633,34.956,38.543,41.919,39.527,37.312,42.657,41.778,37.699,29.54,34.006,32.002,36.187,38.191,26.762,30.525,31.298,27.254,24.863,27.676,35.518,34.674,34.006,30.49,23.456,26.41,29.435,29.364,26.692,31.896,27.817,29.048,27.711,24.019,23.878,21.381,21.628,23.808,26.621,24.054,21.768,22.331,21.592,16.317,10.163,18.674,12.203,0,35.448,13.75,13.399,10.62,14.911,14.876,16.95,12.414,16.739,14.207,10.867,14.911,10.972,13.363,13.891,13.363,15.509,13.504,13.821,6.506,9.354,10.409,10.726,13.715,10.585,17.302,14.735,13.61,10.937,10.55,11.078,12.379,14.7,14.067,10.831,12.484,11.218,13.996,10.867,8.299,9.847,12.449,7.983,15.684,16.915,11.57,10.55,9.319,16.247,16.88,16.458,15.051,15.298,16.247,21.417,11.922,12.484,8.335,12.801],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.281,0.527,1.09,1.196,1.407,1.407,2.392,2.392,2.357,2.357,2.04,2.497,2.286,2.708,1.723,2.286,2.04,2.075,1.935,1.618,1.688,1.407,1.618,1.055,1.125,0.985,0.879,0.774,0.915,1.055,0.844,1.125,1.301,1.16,1.969,2.848,2.637,3.376,3.482,4.01,4.01,4.186,3.447,2.568,2.568,1.618,1.582,0.843,0.949,1.195,1.125,1.125,1.758,1.758,1.934,2.356,2.426,2.285,2.32,2.179,2.671,2.742,4.079,4.888,7.174,11.5,14.103,16.143,17.198,19.378,21.699,22.367,20.855,17.444,17.619,17.162,18.112,17.585,19.026,22.578,26.059,29.611,28.838,33.269,32.284,33.866,34.113,32.32,30.316,27.854,26.693,23.281,24.09,23.809,26.516,26.199,27.324,32.001,35.623,37.628,39.562,42.762,41.391,45.576,54.122,53.032,56.725,62.738,65.938,67.063,69.419,69.314,71.705,74.342,76.065,76.523,81.236,88.973,92.877,95.479,89.254,91.4,96.183,100.086,99.136,94.248,95.408,100.894,107.857,110.916,112.006,119.883,131.453,139.963,144.078,149.001,154.171,165.108,174.462,182.164,185.575,186.067,191.658,201.435,215.291,221.797,224.611,223.732,231.891,252.64,269.028,283.798,284.888,296.844,309.257,316.396,312.879,314.039,298.179,276.059,266.423,244.655,231.503,223.52,220.426,212.057,221.974,236.568,243.039,251.936,260.868,271.664,278.24,283.972,291.392,293.396,298.284,310.698,316.325,314.391,308.975,304.438,294.521,291.181,292.06,276.165,264.912,258.511,256.225,247.082,242.756,242.087,238.57,245.814,245.779,237.937,237.093,241.665,243.353,234.527,231.749,225.56,224.118,228.373,225.982,220.425,212.442,207.378,199.29,198.094,193.1,187.157,185.469,183.183,178.119,166.654,161.52,147.102,123.048,136.728,128.147,119.954,114.257,119.005,115.207,119.954,132.368,113.659,114.116,111.584,115.875,111.936,110.423,107.364,108.313,107.083,106.38,109.334,100.929,99.311,96.357,93.192,93.544,88.62,92.418,93.332,100.436,102.019,102.16,102.512,101.176,105.291,102.056,98.152,97.026,97.307,100.753,100.542,96.462,91.609,89.991,87.143,90.343,96.04,93.614,93.297,94.317,100.717,105.148,113.623,112.99,111.373,116.05,126.917,129.52,125.757,117.212,113.555],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.201,0.342,0.301,0.301,0.256,0.276,0.327,0.327,0.246,0.246,0.291,0.256,0.261,0.196,0.231,0.181,0.201,0.151,0.151,0.121,0.126,0.09,0.1,0.111,0.121,0.121,0.151,0.166,0.166,0.261,0.377,0.337,0.482,0.457,0.538,0.573,0.482,0.347,0.367,0.221,0.216,0.111,0.085,0.111,0.161,0.141,0.161,0.241,0.241,0.266,0.286,0.286,0.327,0.311,0.221,0.372,0.357,0.512,0.638,0.985,1.638,2.015,2.145,2.437,2.542,2.914,2.808,2.321,2.115,2.226,2.14,2.256,1.954,2.437,3.054,3.552,3.828,3.893,4.305,4.356,4.074,4.084,3.949,3.652,3.687,2.954,3.019,2.959,2.602,3.255,3.361,3.577,4.446,4.717,4.953,5.21,4.923,5.426,5.968,6.737,6.933,7.445,8.264,8.52,8.591,8.832,8.139,9.405,9.45,9.349,9.776,10.545,11.384,12.198,11.535,11.535,11.64,12.158,12.469,11.997,11.58,12.188,13.198,13.886,13.745,13.861,15.433,17.312,17.945,18.357,19.075,20.065,21.331,21.658,22.678,23.828,23.944,24.451,25.827,27.234,28.093,27.721,28.128,30.374,32.655,34.107,35.614,36.247,38.412,39.939,40.201,38.98,39.085,36.161,34.353,31.901,29.183,27.812,27.435,25.606,26.782,28.435,30.088,31.67,32.102,33.147,34.755,35.061,35.639,36.267,37.282,38.292,39.221,39.527,39.919,38.633,37.503,36.428,36.267,35.629,33.484,32.459,32.71,31.746,30.726,29.51,29.128,30.258,30.756,30.64,30.098,30.319,30.57,29.691,28.55,28.249,27.867,28.666,28.852,28.078,27.294,26.536,25.069,24.496,24.15,23.627,23.306,23.084,23.115,22.356,20.407,19.271,17.578,14.469,16.342,15.222,14.805,14.871,14.333,14.715,17.136,13.846,14.273,14.388,14.423,14.423,13.866,13.353,13.564,13.082,13.268,13.645,13.489,12.851,12.278,11.781,11.404,11.148,10.731,11.228,12.404,13.012,13.087,13.062,12.685,12.941,12.57,12.474,12.077,12.298,12.394,12.811,12.595,11.68,11.078,11.309,10.666,11.304,11.721,11.821,12.143,12.067,12.61,13.881,13.991,13.725,14.258,15.071,16.8,16.182,15.554,14.393,14.072]},{"iso":"VNM","continent":"Asia","population":97338583,"name":"Vietnam","population_density":308.127,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,6,6,8,8,8,10,10,13,13,14,15,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,18,30,30,31,38,39,47,53,56,61,66,75,85,91,94,113,123,134,141,153,163,174,188,203,212,218,233,237,240,241,245,249,251,255,257,258,262,265,266,267,268,268,268,268,268,268,268,268,270,270,270,270,270,270,270,270,270,271,271,271,271,288,288,288,288,288,288,288,312,314,318,320,324,324,324,324,324,325,325,326,327,327,327,328,328,328,328,328,328,328,328,329,331,332,332,332,332,333,334,334,334,334,335,342,349,349,349,349,349,352,352,353,355,355,355,355,355,355,355,355,355,369,369,369,369,370,370,372,373,373,381,381,382,382,383,384,401,408,412,415,417,420,431,446,459,509,558,590,621,652,672,717,750,789,812,841,847,866,883,911,930,951,964,983,989,994,1007,1009,1014,1016,1022,1029,1034,1036,1038,1040,1040,1044,1044,1046,1046,1049,1049,1049,1049,1054,1059,1059,1060,1060,1063,1063,1063,1063,1066,1068,1068,1068,1068,1068,1069,1069,1069,1069,1074,1077,1094,1094,1095,1096,1096,1096,1097,1098,1099,1100,1105,1107,1109,1110,1113,1122,1124,1124,1126,1134,1140,1141,1144,1148,1148,1160,1168,1169,1172,1173,1177,1177,1180,1180,1192,1202,1203,1207,1212,1213,1213,1215,1226,1252,1253,1256,1265,1281,1283,1288,1300,1304,1305,1306,1307,1312,1316,1321,1331,1339,1341,1343,1347,1351,1358,1361,1361,1365,1366,1367,1377,1381,1385,1391,1395,1397,1402,1405,1405,1407],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.021,0.021,0.021,0.021,0.021,0.021,0.021,0.021,0.021,0.062,0.062,0.082,0.082,0.082,0.103,0.103,0.134,0.134,0.144,0.154,0.154,0.164,0.164,0.164,0.164,0.164,0.164,0.164,0.164,0.164,0.164,0.164,0.164,0.164,0.164,0.164,0.164,0.164,0.164,0.164,0.164,0.164,0.164,0.164,0.185,0.308,0.308,0.318,0.39,0.401,0.483,0.544,0.575,0.627,0.678,0.771,0.873,0.935,0.966,1.161,1.264,1.377,1.449,1.572,1.675,1.788,1.931,2.086,2.178,2.24,2.394,2.435,2.466,2.476,2.517,2.558,2.579,2.62,2.64,2.651,2.692,2.722,2.733,2.743,2.753,2.753,2.753,2.753,2.753,2.753,2.753,2.753,2.774,2.774,2.774,2.774,2.774,2.774,2.774,2.774,2.774,2.784,2.784,2.784,2.784,2.959,2.959,2.959,2.959,2.959,2.959,2.959,3.205,3.226,3.267,3.287,3.329,3.329,3.329,3.329,3.329,3.339,3.339,3.349,3.359,3.359,3.359,3.37,3.37,3.37,3.37,3.37,3.37,3.37,3.37,3.38,3.401,3.411,3.411,3.411,3.411,3.421,3.431,3.431,3.431,3.431,3.442,3.514,3.585,3.585,3.585,3.585,3.585,3.616,3.616,3.627,3.647,3.647,3.647,3.647,3.647,3.647,3.647,3.647,3.647,3.791,3.791,3.791,3.791,3.801,3.801,3.822,3.832,3.832,3.914,3.914,3.924,3.924,3.935,3.945,4.12,4.192,4.233,4.263,4.284,4.315,4.428,4.582,4.715,5.229,5.733,6.061,6.38,6.698,6.904,7.366,7.705,8.106,8.342,8.64,8.702,8.897,9.071,9.359,9.554,9.77,9.904,10.099,10.16,10.212,10.345,10.366,10.417,10.438,10.499,10.571,10.623,10.643,10.664,10.684,10.684,10.725,10.725,10.746,10.746,10.777,10.777,10.777,10.777,10.828,10.88,10.88,10.89,10.89,10.921,10.921,10.921,10.921,10.951,10.972,10.972,10.972,10.972,10.972,10.982,10.982,10.982,10.982,11.034,11.064,11.239,11.239,11.249,11.26,11.26,11.26,11.27,11.28,11.29,11.301,11.352,11.373,11.393,11.403,11.434,11.527,11.547,11.547,11.568,11.65,11.712,11.722,11.753,11.794,11.794,11.917,11.999,12.01,12.04,12.051,12.092,12.092,12.123,12.123,12.246,12.349,12.359,12.4,12.451,12.462,12.462,12.482,12.595,12.862,12.873,12.903,12.996,13.16,13.181,13.232,13.355,13.397,13.407,13.417,13.427,13.479,13.52,13.571,13.674,13.756,13.777,13.797,13.838,13.879,13.951,13.982,13.982,14.023,14.033,14.044,14.146,14.188,14.229,14.29,14.331,14.352,14.403,14.434,14.434,14.455],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.041,0,0.021,0,0,0.021,0,0.031,0,0.01,0.01,0,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.021,0.123,0,0.01,0.072,0.01,0.082,0.062,0.031,0.051,0.051,0.092,0.103,0.062,0.031,0.195,0.103,0.113,0.072,0.123,0.103,0.113,0.144,0.154,0.092,0.062,0.154,0.041,0.031,0.01,0.041,0.041,0.021,0.041,0.021,0.01,0.041,0.031,0.01,0.01,0.01,0,0,0,0,0,0,0,0.021,0,0,0,0,0,0,0,0,0.01,0,0,0,0.175,0,0,0,0,0,0,0.247,0.021,0.041,0.021,0.041,0,0,0,0,0.01,0,0.01,0.01,0,0,0.01,0,0,0,0,0,0,0,0.01,0.021,0.01,0,0,0,0.01,0.01,0,0,0,0.01,0.072,0.072,0,0,0,0,0.031,0,0.01,0.021,0,0,0,0,0,0,0,0,0.144,0,0,0,0.01,0,0.021,0.01,0,0.082,0,0.01,0,0.01,0.01,0.175,0.072,0.041,0.031,0.021,0.031,0.113,0.154,0.134,0.514,0.503,0.329,0.318,0.318,0.205,0.462,0.339,0.401,0.236,0.298,0.062,0.195,0.175,0.288,0.195,0.216,0.134,0.195,0.062,0.051,0.134,0.021,0.051,0.021,0.062,0.072,0.051,0.021,0.021,0.021,0,0.041,0,0.021,0,0.031,0,0,0,0.051,0.051,0,0.01,0,0.031,0,0,0,0.031,0.021,0,0,0,0,0.01,0,0,0,0.051,0.031,0.175,0,0.01,0.01,0,0,0.01,0.01,0.01,0.01,0.051,0.021,0.021,0.01,0.031,0.092,0.021,0,0.021,0.082,0.062,0.01,0.031,0.041,0,0.123,0.082,0.01,0.031,0.01,0.041,0,0.031,0,0.123,0.103,0.01,0.041,0.051,0.01,0,0.021,0.113,0.267,0.01,0.031,0.092,0.164,0.021,0.051,0.123,0.041,0.01,0.01,0.01,0.051,0.041,0.051,0.103,0.082,0.021,0.021,0.041,0.041,0.072,0.031,0,0.041,0.01,0.01,0.103,0.041,0.041,0.062,0.041,0.021,0.051,0.031,0,0.021],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.041,0.041,0.062,0.062,0.062,0.083,0.083,0.114,0.073,0.083,0.072,0.072,0.082,0.061,0.061,0.03,0.03,0.02,0.01,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.021,0.144,0.144,0.154,0.226,0.236,0.318,0.38,0.39,0.318,0.369,0.451,0.482,0.534,0.483,0.616,0.688,0.75,0.771,0.802,0.802,0.853,0.966,0.925,0.914,0.863,0.945,0.863,0.791,0.688,0.585,0.472,0.401,0.38,0.247,0.216,0.226,0.247,0.216,0.185,0.174,0.133,0.112,0.102,0.061,0.03,0.02,0.01,0.021,0.021,0.021,0.021,0.021,0.021,0.021,0.021,0,0.01,0.01,0.01,0.01,0.185,0.185,0.185,0.185,0.175,0.175,0.175,0.422,0.268,0.309,0.33,0.371,0.371,0.371,0.371,0.124,0.113,0.072,0.061,0.03,0.03,0.03,0.04,0.04,0.03,0.03,0.02,0.01,0.01,0.01,0.01,0.031,0.041,0.041,0.041,0.041,0.051,0.061,0.051,0.03,0.02,0.03,0.102,0.174,0.164,0.154,0.154,0.154,0.185,0.175,0.113,0.062,0.062,0.062,0.062,0.062,0.031,0.031,0.021,0,0.144,0.144,0.144,0.144,0.154,0.154,0.175,0.185,0.041,0.123,0.123,0.133,0.123,0.133,0.122,0.287,0.359,0.318,0.349,0.36,0.391,0.494,0.638,0.597,1.039,1.501,1.799,2.096,2.383,2.475,2.783,2.988,2.875,2.608,2.577,2.321,2.198,2.168,1.994,1.85,1.665,1.563,1.46,1.46,1.316,1.275,1.008,0.864,0.669,0.597,0.474,0.463,0.433,0.32,0.32,0.269,0.289,0.227,0.176,0.125,0.135,0.114,0.093,0.093,0.103,0.154,0.133,0.143,0.112,0.143,0.143,0.143,0.092,0.072,0.093,0.083,0.083,0.052,0.052,0.062,0.062,0.031,0.01,0.061,0.092,0.267,0.267,0.267,0.277,0.277,0.277,0.236,0.215,0.05,0.06,0.101,0.112,0.133,0.143,0.164,0.246,0.257,0.247,0.217,0.278,0.319,0.319,0.319,0.268,0.247,0.37,0.431,0.359,0.328,0.328,0.338,0.297,0.328,0.205,0.246,0.339,0.318,0.349,0.359,0.369,0.338,0.359,0.349,0.513,0.513,0.503,0.544,0.698,0.719,0.749,0.759,0.533,0.533,0.512,0.43,0.317,0.337,0.337,0.317,0.358,0.369,0.38,0.411,0.401,0.432,0.412,0.309,0.268,0.257,0.246,0.308,0.308,0.277,0.308,0.349,0.329,0.37,0.391,0.288,0.268],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.006,0.006,0.009,0.009,0.009,0.012,0.012,0.01,0.01,0.009,0.01,0.01,0.009,0.009,0.004,0.004,0.003,0.001,0.001,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.003,0.021,0.021,0.022,0.032,0.034,0.045,0.051,0.038,0.045,0.051,0.054,0.068,0.065,0.06,0.084,0.091,0.1,0.097,0.1,0.106,0.117,0.11,0.117,0.114,0.113,0.117,0.109,0.097,0.078,0.062,0.054,0.048,0.032,0.029,0.026,0.031,0.029,0.025,0.023,0.019,0.016,0.015,0.009,0.004,0.003,0.001,0,0.003,0.003,0.003,0.003,0.003,0.003,0.003,0,0,0.001,0.001,0.001,0.001,0.026,0.026,0.026,0.025,0.025,0.025,0.025,0.035,0.038,0.044,0.047,0.053,0.053,0.053,0.018,0.015,0.01,0.007,0.003,0.004,0.004,0.004,0.006,0.004,0.004,0.003,0.001,0.001,0.001,0,0.001,0.004,0.006,0.006,0.006,0.006,0.007,0.007,0.004,0.003,0.003,0.004,0.015,0.023,0.022,0.022,0.022,0.022,0.025,0.015,0.006,0.009,0.009,0.009,0.009,0.004,0.004,0.003,0,0,0.021,0.021,0.021,0.021,0.022,0.022,0.025,0.006,0.006,0.018,0.018,0.018,0.018,0.016,0.016,0.041,0.04,0.045,0.048,0.051,0.054,0.069,0.066,0.075,0.142,0.21,0.254,0.295,0.324,0.332,0.379,0.354,0.339,0.326,0.323,0.286,0.285,0.244,0.236,0.207,0.204,0.181,0.2,0.181,0.163,0.141,0.116,0.092,0.076,0.057,0.059,0.059,0.043,0.043,0.038,0.035,0.032,0.022,0.018,0.015,0.016,0.013,0.013,0.007,0.015,0.019,0.019,0.016,0.016,0.021,0.021,0.013,0.006,0.01,0.012,0.012,0.007,0.007,0.007,0.009,0.004,0.001,0.001,0.009,0.013,0.038,0.037,0.038,0.04,0.04,0.032,0.029,0.006,0.007,0.007,0.013,0.016,0.019,0.019,0.022,0.034,0.035,0.028,0.028,0.037,0.044,0.041,0.032,0.035,0.035,0.05,0.05,0.043,0.045,0.043,0.043,0.043,0.029,0.018,0.034,0.044,0.044,0.044,0.051,0.048,0.048,0.034,0.035,0.072,0.068,0.065,0.076,0.1,0.1,0.091,0.07,0.075,0.072,0.06,0.038,0.043,0.041,0.031,0.04,0.05,0.051,0.053,0.051,0.051,0.054,0.044,0.032,0.035,0.034,0.029,0.038,0.034,0.035,0.044,0.044,0.045,0.051,0.041,0.035,0.032]},{"iso":"OWID_WRL","continent":"","population":7794798729,"name":"World","population_density":58.045,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,555,654,941,1434,2118,2927,5578,6167,8235,9927,12038,16787,19887,23898,27643,30803,34396,37130,40160,42769,44811,45229,60382,66909,69051,71235,73270,75152,75652,76212,76841,78602,78982,79546,80399,81376,82736,84123,86013,88394,90377,92971,95279,98090,102003,106098,110047,114219,119041,126702,132492,146879,157952,169222,184032,199976,219535,246584,277361,309363,344194,387045,428205,479223,542053,607114,674360,733612,798890,875739,952172,1033388,1116618,1175629,1246549,1318482,1388956,1473309,1558977,1643587,1718073,1837439,1907058,1990793,2072667,2169593,2257225,2334507,2410704,2485347,2561192,2642885,2726775,2812325,2895703,2967633,3037310,3112818,3191303,3275136,3362854,3442433,3518905,3595904,3676385,3766928,3855986,3946360,4031230,4106395,4183162,4267380,4352926,4449365,4545629,4640255,4717963,4806756,4903625,5005715,5112537,5218869,5323651,5417600,5503997,5597738,5700726,5820243,5941222,6078182,6184705,6288127,6409805,6524356,6654920,6786228,6920405,7032301,7134857,7259720,7394828,7532630,7661284,7796607,7929084,8048481,8190524,8333842,8474095,8653856,8810515,8938552,9076804,9242782,9413951,9592467,9783743,9961349,10124816,10279150,10453144,10670689,10879580,11081207,11275164,11458217,11622711,11834268,12048172,12274995,12499511,12716887,12909403,13100182,13321954,13553556,13805553,14047878,14284153,14497750,14703987,14937252,15218679,15501567,15782781,16037160,16250041,16475833,16727820,17019450,17299862,17590801,17839725,18071254,18276904,18533341,18810016,19095179,19376744,19635237,19860571,20087537,20344121,20621615,20911416,21214512,21461874,21678065,21885879,22144138,22424104,22696538,22957556,23221983,23428421,23653584,23897383,24181595,24465330,24748965,25015437,25236699,25499317,25764220,26047805,26328824,26642643,26912605,27143348,27361075,27602981,27887688,28187730,28508666,28795068,29037765,29300957,29586377,29890419,30205112,30530715,30822979,31075065,31350821,31635042,31910493,32262651,32592948,32880906,33132305,33386140,33668179,33996322,34314446,34611681,34943763,35205506,35505922,35832039,36182846,36543890,36904287,37260796,37548224,37839129,38158142,38540161,38946718,39357905,39730605,40047114,40433331,40821933,41266493,41738433,42234397,42691087,43051170,43536814,44006276,44517379,45067541,45637658,46113465,46575736,47136486,47689293,48199622,48794945,49438618,50036298,50515513,51017685,51575582,52223757,52870794,53521418,54116492,54590191,55120479,55728841,56355318,57006705,57673512,58262037,58749938,59268403,59857850,60494209,61078085,61749078,62346903,62834341,63339265,63947958,64596103,65288306,65968507,66610808,67149510,67663843,68302251,68973078,70466211,71164680,71787629,72335630,72859287,73485176,74219546,74952221],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.071,0.084,0.121,0.184,0.272,0.376,0.716,0.791,1.056,1.274,1.544,2.154,2.551,3.066,3.546,3.952,4.413,4.763,5.152,5.487,5.749,5.802,7.746,8.584,8.859,9.139,9.4,9.641,9.705,9.777,9.858,10.084,10.133,10.205,10.314,10.44,10.614,10.792,11.035,11.34,11.595,11.927,12.223,12.584,13.086,13.611,14.118,14.653,15.272,16.255,16.997,18.843,20.264,21.71,23.61,25.655,28.164,31.634,35.583,39.688,44.157,49.654,54.935,61.48,69.54,77.887,86.514,94.116,102.49,112.349,122.155,132.574,143.252,150.822,159.921,169.149,178.19,189.012,200.002,210.857,220.413,235.726,244.658,255.4,265.904,278.339,289.581,299.495,309.271,318.847,328.577,339.058,349.82,360.795,371.492,380.72,389.659,399.346,409.414,420.169,431.423,441.632,451.443,461.321,471.646,483.262,494.687,506.281,517.169,526.812,536.661,547.465,558.44,570.812,583.162,595.301,605.271,616.662,629.089,642.187,655.891,669.532,682.975,695.028,706.111,718.138,731.35,746.683,762.203,779.774,793.44,806.708,822.318,837.014,853.764,870.61,887.823,902.179,915.336,931.354,948.687,966.366,982.871,1000.232,1017.228,1032.545,1050.768,1069.154,1087.147,1110.209,1130.307,1146.733,1164.469,1185.763,1207.722,1230.624,1255.163,1277.948,1298.919,1318.719,1341.041,1368.95,1395.749,1421.616,1446.498,1469.982,1491.085,1518.226,1545.668,1574.767,1603.571,1631.458,1656.156,1680.631,1709.082,1738.795,1771.124,1802.212,1832.524,1859.926,1886.384,1916.31,1952.415,1988.707,2024.784,2057.418,2084.729,2113.696,2146.023,2183.437,2219.411,2256.736,2288.67,2318.373,2344.756,2377.655,2413.15,2449.733,2485.856,2519.018,2547.926,2577.044,2609.961,2645.561,2682.74,2721.624,2753.358,2781.094,2807.754,2840.886,2876.803,2911.754,2945.24,2979.164,3005.648,3034.534,3065.811,3102.273,3138.674,3175.061,3209.247,3237.633,3271.325,3305.309,3341.691,3377.743,3418.003,3452.636,3482.238,3510.171,3541.205,3577.73,3616.223,3657.396,3694.139,3725.275,3759.04,3795.656,3834.662,3875.034,3916.806,3954.301,3986.641,4022.018,4058.481,4093.819,4138.997,4181.371,4218.314,4250.566,4283.13,4319.313,4361.411,4402.223,4440.356,4482.959,4516.538,4555.079,4596.917,4641.922,4688.24,4734.476,4780.213,4817.087,4854.407,4895.334,4944.343,4996.501,5049.252,5097.066,5137.671,5187.219,5237.073,5294.106,5354.652,5418.279,5476.868,5523.064,5585.367,5645.595,5711.165,5781.745,5854.886,5915.928,5975.233,6047.172,6118.092,6183.562,6259.936,6342.514,6419.191,6480.669,6545.093,6616.666,6699.821,6782.83,6866.299,6942.641,7003.413,7071.444,7149.491,7229.862,7313.429,7398.974,7474.476,7537.069,7603.583,7679.204,7760.843,7835.749,7921.831,7998.526,8061.06,8125.837,8203.927,8287.078,8375.881,8463.144,8545.546,8614.656,8680.64,8762.542,8848.603,9040.158,9129.765,9209.683,9279.987,9347.167,9427.463,9521.676,9615.671],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.012,0.037,0.063,0.087,0.103,0.34,0.075,0.265,0.216,0.271,0.609,0.398,0.514,0.48,0.405,0.453,0.351,0.389,0.335,0.262,0.054,1.944,0.837,0.275,0.28,0.261,0.241,0.064,0.072,0.08,0.226,0.048,0.072,0.109,0.125,0.174,0.177,0.242,0.304,0.253,0.332,0.295,0.359,0.501,0.525,0.505,0.535,0.618,0.982,0.742,1.844,1.418,1.445,1.899,2.045,2.508,3.47,3.947,4.105,4.468,5.497,5.28,6.544,8.061,8.346,8.627,7.601,8.374,9.859,9.806,10.419,10.678,7.571,9.098,9.228,9.041,10.822,10.99,10.855,9.556,15.314,8.931,10.742,10.504,12.435,11.242,9.915,9.775,9.576,9.73,10.48,10.762,10.975,10.697,9.228,8.939,9.687,10.069,10.753,11.253,10.209,9.811,9.878,10.325,11.616,11.425,11.594,10.888,9.643,9.848,10.804,10.975,12.372,12.35,12.14,9.969,11.391,12.427,13.097,13.704,13.641,13.443,12.053,11.084,12.026,13.212,15.333,15.52,17.571,13.666,13.268,15.61,14.696,16.75,16.846,17.214,14.355,13.157,16.019,17.333,17.679,16.505,17.361,16.996,15.318,18.223,18.386,17.993,23.062,20.098,16.426,17.736,21.293,21.959,22.902,24.539,22.785,20.971,19.8,22.322,27.909,26.799,25.867,24.883,23.484,21.103,27.141,27.442,29.099,28.803,27.887,24.698,24.475,28.451,29.712,32.329,31.088,30.312,27.403,26.458,29.926,36.104,36.292,36.077,32.634,27.311,28.967,32.328,37.413,35.974,37.325,31.935,29.703,26.383,32.898,35.495,36.584,36.122,33.162,28.908,29.118,32.917,35.6,37.179,38.884,31.734,27.735,26.661,33.132,35.917,34.951,33.486,33.924,26.484,28.886,31.277,36.462,36.401,36.388,34.186,28.386,33.691,33.985,36.381,36.052,40.26,34.634,29.602,27.932,31.034,36.525,38.493,41.173,36.743,31.136,33.765,36.617,39.006,40.372,41.772,37.495,32.34,35.377,36.463,35.338,45.179,42.374,36.942,32.252,32.565,36.183,42.098,40.812,38.132,42.603,33.579,38.541,41.838,45.005,46.319,46.236,45.737,36.874,37.32,40.926,49.009,52.157,52.751,47.814,40.605,49.548,49.854,57.033,60.546,63.628,58.589,46.195,62.304,60.228,65.569,70.581,73.141,61.042,59.305,71.939,70.92,65.47,76.374,82.577,76.677,61.479,64.424,71.573,83.155,83.009,83.469,76.342,60.771,68.031,78.047,80.371,83.567,85.545,75.502,62.593,66.514,75.621,81.639,74.906,86.082,76.695,62.534,64.777,78.09,83.151,88.803,87.263,82.401,69.11,65.984,81.902,86.061,191.555,89.607,79.919,70.303,67.18,80.296,94.213,93.995],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.012,0.049,0.112,0.199,0.302,0.642,0.717,0.982,1.186,1.42,1.966,2.277,2.688,2.828,3.158,3.346,3.481,3.599,3.325,3.189,2.729,4.193,4.625,4.447,4.376,4.248,4.154,3.956,3.974,2.11,1.499,1.272,1.064,0.912,0.796,0.906,1.011,1.173,1.251,1.456,1.716,1.902,2.136,2.463,2.811,3.074,3.305,3.67,4.32,4.767,6.252,7.169,8.089,9.483,10.993,12.883,15.371,18.576,20.837,23.887,27.939,31.32,35.819,41.372,46.248,50.928,54.424,58.33,62.692,67.218,71.093,73.71,72.935,73.406,75.033,75.7,76.663,77.847,78.283,77.161,84.904,84.737,86.251,87.714,89.327,89.579,88.639,88.858,83.12,83.919,83.657,83.915,82.455,81.91,81.223,80.387,80.498,80.837,81.11,81.601,80.835,79.949,80.599,81.985,83.914,85.27,86.111,85.746,85.18,85.217,86.143,86.793,87.549,88.474,89.02,88.101,89.849,92.428,94.721,97.45,98.719,99.812,99.725,100.84,101.475,102.26,104.496,106.312,110.242,110.465,111.68,116.206,118.876,122.414,123.927,125.621,122.405,121.896,124.647,126.37,129.353,129.108,129.623,129.405,130.368,135.434,137.801,138.461,143.844,147.437,146.502,147.242,153.217,156.953,161.469,168.015,167.738,168.611,171.985,176.571,183.187,188.027,190.992,191.336,192.035,192.167,199.508,204.628,205.818,207.822,209.842,209.657,210.648,217.996,220.567,225.454,227.443,228.952,228.468,230.228,235.679,243.332,249.912,253.66,255.206,252.205,253.769,259.639,267.126,266.996,268.029,263.887,260.956,260.028,263.959,267.126,266.297,266.445,262.282,259.255,258.67,265.204,267.906,269.59,271.89,267.502,262.075,259.828,263.842,266.842,266.193,262.5,257.54,252.29,253.441,258.057,261.387,261.871,263.308,264.008,258.47,265.677,270.776,275.88,275.47,279.329,277.575,272.991,272.537,269.88,272.42,274.532,279.653,276.136,272.638,276.801,285.486,293.458,297.305,300.584,296.906,292.503,296.744,299.442,298.163,304.336,306.338,301.508,296.265,296.49,297.296,302.931,308.405,301.358,301.587,298.224,304.513,313.786,322.608,326.829,332.253,339.858,334.129,337.87,340.255,347.426,354.578,361.01,362.588,357.456,370.13,382.664,398.771,410.308,421.779,427.617,425.998,447.697,458.377,474.092,487.64,500.235,497.649,498.365,524.109,532.725,537.967,548.772,560.768,564.304,564.741,569.86,569.494,581.729,599.268,606.363,600.128,584.222,590.774,604.397,613.195,613.607,616.143,608.176,594.427,600.17,607.76,611.352,605.887,608.402,599.552,586.584,588.768,600.344,607.874,615.038,627.395,623.714,616.129,619.579,636.704,644.675,753.079,753.883,746.539,734.441,732.511,746.823,759.134,767.068],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.092,0.102,0.139,0.164,0.194,0.269,0.311,0.335,0.393,0.413,0.447,0.459,0.427,0.418,0.382,0.321,0.541,0.596,0.585,0.57,0.559,0.556,0.558,0.29,0.182,0.175,0.142,0.115,0.096,0.104,0.119,0.133,0.135,0.172,0.198,0.23,0.254,0.28,0.327,0.367,0.396,0.436,0.477,0.575,0.63,0.822,0.949,1.083,1.278,1.482,1.7,2.09,2.39,2.774,3.206,3.72,4.182,4.759,5.415,6.043,6.689,7.137,7.548,8.202,8.668,9.005,9.338,9.187,9.401,9.522,9.406,9.551,9.633,9.658,9.941,10.829,10.787,11.03,10.985,11.191,11.246,11.298,10.506,10.598,10.454,10.451,10.212,10.173,10.285,10.207,10.116,10.11,10.051,10.05,10.089,10.02,10.103,10.237,10.328,10.549,10.645,10.694,10.791,10.767,10.763,10.831,10.74,10.875,10.983,11.162,11.208,11.429,11.661,11.964,12.154,12.339,12.525,12.822,12.779,12.721,12.738,12.97,13.239,13.828,14.059,14.371,14.883,15.095,15.297,15.487,15.436,15.534,15.518,15.577,15.953,16.086,16.037,16.058,16.436,16.744,17.059,17.21,17.254,18.191,18.582,18.501,18.846,19.285,19.795,20.497,20.708,21.092,21.741,22.036,22.183,23.033,23.589,23.779,24.079,24.438,24.624,25.312,25.245,25.574,25.994,26.423,26.596,27.078,27.265,27.59,28.051,28.377,28.724,29.11,29.393,29.604,30.517,31.083,31.796,32.128,32.115,32.473,32.816,33.003,32.958,33.136,33.036,33.378,33.009,33.09,32.816,32.903,32.731,32.907,32.793,33.184,33.187,33.202,33.287,33.681,33.477,33.31,32.959,32.989,33.035,32.716,31.945,32.258,32.079,32.397,32.132,32.21,32.417,32.832,32.869,33.141,33.827,34.214,34.202,34.153,34.706,34.77,34.944,34.121,33.699,33.72,34.069,34.199,34.5,34.719,35.553,36.35,36.705,36.973,37.059,37.166,37.338,37.568,37.546,37.022,37.709,37.795,37.716,37.704,37.302,37.262,38.227,37.604,36.998,37.806,37.996,38.85,39.658,40.073,40.86,42.017,42.465,42.936,42.761,42.631,43.203,44.037,44.968,45.265,45.798,47.545,48.82,49.966,51.164,52.718,54.257,55.056,56.878,58.36,59.58,61.013,62.372,62.723,64.596,65.972,67.499,67.485,68.313,69.661,71.895,72.205,71.132,71.225,73.751,74.699,74.826,74.779,74.678,75.193,76.118,75.72,75.8,76.096,75.976,76.237,76.02,75.673,75.854,74.617,74.694,74.864,74.856,74.608,74.96,75.176,77.162,77.33,78.146,79.085,79.258,79.802,80.218,94.897,95.232,94.877,95.047,95.218,94.989,96.153,82.216]},{"iso":"YEM","continent":"Asia","population":29825968,"name":"Yemen","population_density":53.508,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6,6,7,10,10,12,22,25,25,34,34,51,56,65,70,85,106,122,128,130,167,184,197,209,212,222,233,249,256,278,283,310,323,354,399,419,453,469,482,484,496,524,560,591,632,705,728,844,885,902,909,919,922,941,967,992,1015,1076,1089,1103,1118,1128,1158,1190,1221,1240,1248,1265,1284,1297,1318,1356,1380,1389,1465,1498,1516,1526,1552,1576,1581,1606,1619,1629,1640,1654,1674,1674,1681,1691,1703,1711,1726,1728,1730,1734,1734,1760,1763,1768,1796,1797,1804,1832,1831,1841,1847,1858,1858,1869,1882,1889,1892,1899,1906,1907,1911,1916,1924,1930,1933,1943,1946,1953,1958,1962,1976,1979,1983,1983,1987,1989,1994,1999,2003,2007,2009,2011,2013,2016,2019,2022,2024,2026,2026,2028,2028,2029,2029,2029,2030,2030,2031,2031,2034,2039,2040,2041,2041,2041,2047,2049,2050,2051,2051,2052,2052,2053,2053,2053,2055,2055,2056,2056,2057,2057,2057,2060,2060,2060,2060,2060,2061,2062,2062,2063,2063,2063,2063,2063,2063,2067,2070,2070,2071,2071,2071,2071,2072,2072,2072,2078,2081,2083,2086,2090,2093,2099,2107,2114,2124,2137,2148,2160,2177,2191,2197,2217,2239,2267,2304,2337,2383,2078,2079,2081,2082,2083,2083,2084,2085,2085,2087],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.034,0.201,0.201,0.235,0.335,0.335,0.402,0.738,0.838,0.838,1.14,1.14,1.71,1.878,2.179,2.347,2.85,3.554,4.09,4.292,4.359,5.599,6.169,6.605,7.007,7.108,7.443,7.812,8.348,8.583,9.321,9.488,10.394,10.829,11.869,13.378,14.048,15.188,15.725,16.16,16.227,16.63,17.569,18.776,19.815,21.19,23.637,24.408,28.297,29.672,30.242,30.477,30.812,30.913,31.55,32.421,33.26,34.031,36.076,36.512,36.981,37.484,37.819,38.825,39.898,40.937,41.575,41.843,42.413,43.05,43.486,44.19,45.464,46.268,46.57,49.118,50.225,50.828,51.163,52.035,52.84,53.008,53.846,54.282,54.617,54.986,55.455,56.126,56.126,56.36,56.696,57.098,57.366,57.869,57.936,58.003,58.137,58.137,59.009,59.11,59.277,60.216,60.25,60.484,61.423,61.389,61.725,61.926,62.295,62.295,62.664,63.099,63.334,63.435,63.669,63.904,63.938,64.072,64.239,64.508,64.709,64.809,65.145,65.245,65.48,65.647,65.782,66.251,66.352,66.486,66.486,66.62,66.687,66.854,67.022,67.156,67.29,67.357,67.424,67.492,67.592,67.693,67.793,67.86,67.927,67.927,67.994,67.994,68.028,68.028,68.028,68.061,68.061,68.095,68.095,68.196,68.363,68.397,68.43,68.43,68.43,68.631,68.699,68.732,68.766,68.766,68.799,68.799,68.833,68.833,68.833,68.9,68.9,68.933,68.933,68.967,68.967,68.967,69.067,69.067,69.067,69.067,69.067,69.101,69.134,69.134,69.168,69.168,69.168,69.168,69.168,69.168,69.302,69.403,69.403,69.436,69.436,69.436,69.436,69.47,69.47,69.47,69.671,69.771,69.838,69.939,70.073,70.174,70.375,70.643,70.878,71.213,71.649,72.018,72.42,72.99,73.459,73.661,74.331,75.069,76.008,77.248,78.355,79.897,69.671,69.704,69.771,69.805,69.838,69.838,69.872,69.906,69.906,69.973],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.168,0,0.034,0.101,0,0.067,0.335,0.101,0,0.302,0,0.57,0.168,0.302,0.168,0.503,0.704,0.536,0.201,0.067,1.241,0.57,0.436,0.402,0.101,0.335,0.369,0.536,0.235,0.738,0.168,0.905,0.436,1.039,1.509,0.671,1.14,0.536,0.436,0.067,0.402,0.939,1.207,1.039,1.375,2.448,0.771,3.889,1.375,0.57,0.235,0.335,0.101,0.637,0.872,0.838,0.771,2.045,0.436,0.469,0.503,0.335,1.006,1.073,1.039,0.637,0.268,0.57,0.637,0.436,0.704,1.274,0.805,0.302,2.548,1.106,0.604,0.335,0.872,0.805,0.168,0.838,0.436,0.335,0.369,0.469,0.671,0,0.235,0.335,0.402,0.268,0.503,0.067,0.067,0.134,0,0.872,0.101,0.168,0.939,0.034,0.235,0.939,-0.034,0.335,0.201,0.369,0,0.369,0.436,0.235,0.101,0.235,0.235,0.034,0.134,0.168,0.268,0.201,0.101,0.335,0.101,0.235,0.168,0.134,0.469,0.101,0.134,0,0.134,0.067,0.168,0.168,0.134,0.134,0.067,0.067,0.067,0.101,0.101,0.101,0.067,0.067,0,0.067,0,0.034,0,0,0.034,0,0.034,0,0.101,0.168,0.034,0.034,0,0,0.201,0.067,0.034,0.034,0,0.034,0,0.034,0,0,0.067,0,0.034,0,0.034,0,0,0.101,0,0,0,0,0.034,0.034,0,0.034,0,0,0,0,0,0.134,0.101,0,0.034,0,0,0,0.034,0,0,0.201,0.101,0.067,0.101,0.134,0.101,0.201,0.268,0.235,0.335,0.436,0.369,0.402,0.57,0.469,0.201,0.671,0.738,0.939,1.241,1.106,1.542,-10.226,0.034,0.067,0.034,0.034,0,0.034,0.034,0,0.067],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.168,0.168,0.202,0.303,0.303,0.37,0.705,0.806,0.638,0.94,0.906,1.375,1.543,1.778,1.611,2.013,2.717,2.951,3.152,2.649,3.722,3.99,4.258,4.157,3.554,3.353,3.521,3.99,2.984,3.152,2.884,3.387,3.722,4.426,5.566,5.701,6.606,6.404,6.672,5.834,5.8,5.7,5.398,5.766,6.001,7.913,8.248,12.07,13.043,12.674,11.702,10.998,9.724,7.913,8.014,4.963,4.359,5.834,6.035,6.169,6.571,6.269,6.403,6.638,6.906,5.498,5.33,5.431,5.565,5.666,5.364,5.565,5.331,4.996,7.276,7.812,7.779,7.678,7.846,7.377,6.74,7.276,5.164,4.393,4.158,4.292,4.091,3.286,3.353,2.85,2.816,2.749,2.883,2.481,1.877,2.011,1.776,2.313,2.012,1.912,2.348,2.315,2.483,3.288,3.254,2.717,2.817,3.018,2.079,2.414,2.615,1.911,2.046,1.946,1.98,1.645,1.779,1.578,1.41,1.376,1.376,1.476,1.342,1.543,1.577,1.543,1.744,1.644,1.677,1.342,1.375,1.207,1.207,1.241,0.906,0.939,0.872,0.939,0.872,0.906,0.839,0.772,0.705,0.638,0.571,0.571,0.504,0.437,0.336,0.235,0.202,0.135,0.169,0.102,0.203,0.337,0.371,0.405,0.371,0.371,0.538,0.605,0.538,0.404,0.37,0.37,0.37,0.404,0.203,0.136,0.169,0.135,0.169,0.135,0.169,0.135,0.135,0.236,0.169,0.169,0.135,0.135,0.135,0.169,0.169,0.102,0.102,0.102,0.102,0.102,0.068,0.168,0.269,0.235,0.269,0.269,0.269,0.269,0.303,0.169,0.068,0.269,0.336,0.403,0.504,0.638,0.705,0.906,1.174,1.208,1.442,1.811,2.079,2.347,2.816,3.084,3.017,3.453,3.856,4.359,5.231,5.935,6.907,-3.788,-3.955,-4.559,-5.263,-6.168,-7.409,-8.481,-9.989,0.237,0.27],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.024,0.024,0.029,0.043,0.043,0.053,0.101,0.091,0.091,0.129,0.115,0.196,0.211,0.206,0.216,0.287,0.345,0.421,0.369,0.354,0.489,0.546,0.536,0.493,0.431,0.45,0.493,0.393,0.345,0.388,0.354,0.469,0.484,0.58,0.718,0.781,0.838,0.891,0.824,0.771,0.68,0.599,0.675,0.661,0.781,1.068,1.169,1.667,1.729,1.638,1.523,1.375,1.039,1.02,0.589,0.512,0.541,0.8,0.814,0.867,0.848,0.771,0.795,0.838,0.695,0.723,0.695,0.704,0.747,0.666,0.613,0.647,0.671,0.675,0.958,1.025,1.049,0.996,0.939,0.939,0.92,0.675,0.58,0.541,0.546,0.489,0.469,0.445,0.359,0.345,0.354,0.34,0.345,0.259,0.268,0.254,0.206,0.273,0.249,0.201,0.326,0.321,0.335,0.469,0.34,0.374,0.378,0.297,0.292,0.311,0.239,0.278,0.244,0.249,0.23,0.235,0.201,0.163,0.168,0.182,0.163,0.177,0.187,0.201,0.201,0.182,0.22,0.22,0.192,0.177,0.163,0.148,0.153,0.11,0.115,0.115,0.125,0.115,0.115,0.105,0.096,0.091,0.081,0.081,0.072,0.072,0.057,0.048,0.034,0.024,0.019,0.019,0.014,0.014,0.024,0.048,0.053,0.053,0.053,0.048,0.077,0.072,0.053,0.053,0.048,0.053,0.053,0.029,0.019,0.014,0.019,0.019,0.019,0.019,0.019,0.019,0.019,0.024,0.024,0.019,0.019,0.014,0.019,0.024,0.01,0.014,0.014,0.014,0.014,0.01,0.005,0.024,0.034,0.034,0.038,0.038,0.038,0.038,0.024,0.01,0.01,0.034,0.048,0.057,0.072,0.086,0.101,0.129,0.139,0.158,0.196,0.244,0.278,0.321,0.374,0.402,0.398,0.445,0.489,0.57,0.69,0.766,0.92,-0.57,-0.661,-0.757,-0.886,-1.059,-1.217,-1.432,0.034,0.029,0.029]},{"iso":"ZMB","continent":"Africa","population":18383956,"name":"Zambia","population_density":22.995,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,3,3,3,12,16,22,28,29,35,35,36,39,39,39,39,39,39,39,39,40,40,43,45,45,48,48,52,57,61,65,70,74,76,84,84,88,88,95,97,106,109,119,124,137,138,146,153,167,252,267,267,441,446,654,654,679,753,761,772,832,866,920,920,920,920,920,1057,1057,1057,1057,1057,1089,1089,1089,1089,1089,1089,1089,1200,1200,1200,1200,1321,1357,1358,1382,1405,1412,1416,1430,1430,1430,1430,1477,1489,1497,1531,1531,1557,1568,1594,1632,1632,1632,1632,1632,1632,1895,1895,1895,1895,1895,1895,1895,1895,1895,1895,2810,2980,2980,3326,3386,3583,3789,3856,4328,4481,4552,5002,5249,5555,5963,6228,6347,6580,6793,7022,7164,7486,7903,8085,8210,8275,8501,8663,9021,9186,9343,9839,9981,10218,10372,10627,10831,11082,11148,11285,11376,11601,11779,11902,12025,12097,12381,12415,12523,12639,12709,12776,12836,12952,13112,13214,13323,13466,13539,13720,13819,13887,13928,14022,14070,14131,14175,14389,14443,14491,14515,14612,14641,14660,14715,14759,14802,14830,14974,15052,15089,15170,15224,15301,15339,15415,15458,15549,15587,15616,15659,15659,15789,15853,15897,15982,16000,16035,16095,16117,16117,16200,16243,16285,16325,16415,16432,16480,16543,16661,16698,16770,16819,16908,16954,16971,16997,17036,17056,17093,17097,17123,17187,17243,17280,17350,17373,17394,17424,17454,17466,17535,17553,17569,17589,17608,17647,17665,17700,17730,17857,17898,17916,17931,17963,18062,18091,18161,18217,18274,18322,18428,18456,18504],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.109,0.109,0.109,0.109,0.163,0.163,0.163,0.653,0.87,1.197,1.523,1.577,1.904,1.904,1.958,2.121,2.121,2.121,2.121,2.121,2.121,2.121,2.121,2.176,2.176,2.339,2.448,2.448,2.611,2.611,2.829,3.101,3.318,3.536,3.808,4.025,4.134,4.569,4.569,4.787,4.787,5.168,5.276,5.766,5.929,6.473,6.745,7.452,7.507,7.942,8.322,9.084,13.708,14.524,14.524,23.988,24.26,35.574,35.574,36.934,40.96,41.395,41.993,45.257,47.106,50.044,50.044,50.044,50.044,50.044,57.496,57.496,57.496,57.496,57.496,59.236,59.236,59.236,59.236,59.236,59.236,59.236,65.274,65.274,65.274,65.274,71.856,73.814,73.869,75.174,76.425,76.806,77.024,77.785,77.785,77.785,77.785,80.342,80.995,81.43,83.279,83.279,84.693,85.292,86.706,88.773,88.773,88.773,88.773,88.773,88.773,103.079,103.079,103.079,103.079,103.079,103.079,103.079,103.079,103.079,103.079,152.851,162.098,162.098,180.919,184.182,194.898,206.104,209.748,235.423,243.745,247.607,272.085,285.521,302.166,324.359,338.774,345.247,357.921,369.507,381.963,389.688,407.203,429.886,439.786,446.585,450.121,462.414,471.226,490.7,499.675,508.215,535.195,542.919,555.811,564.188,578.058,589.155,602.808,606.398,613.85,618.8,631.039,640.722,647.412,654.103,658.019,673.468,675.317,681.192,687.502,691.309,694.954,698.218,704.527,713.231,718.779,724.708,732.487,736.457,746.303,751.688,755.387,757.617,762.73,765.341,768.659,771.053,782.693,785.631,788.242,789.547,794.823,796.401,797.434,800.426,802.82,805.159,806.682,814.515,818.757,820.77,825.176,828.113,832.302,834.369,838.503,840.842,845.792,847.859,849.436,851.775,851.775,858.847,862.328,864.721,869.345,870.324,872.228,875.492,876.688,876.688,881.203,883.542,885.827,888.003,892.898,893.823,896.434,899.861,906.279,908.292,912.208,914.874,919.715,922.217,923.142,924.556,926.678,927.765,929.778,929.996,931.41,934.891,937.937,939.95,943.758,945.009,946.151,947.783,949.415,950.068,953.821,954.8,955.67,956.758,957.792,959.913,960.892,962.796,964.428,971.336,973.566,974.545,975.361,977.102,982.487,984.065,987.872,990.918,994.019,996.63,1002.396,1003.919,1006.53],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.054,0,0,0.49,0.218,0.326,0.326,0.054,0.326,0,0.054,0.163,0,0,0,0,0,0,0,0.054,0,0.163,0.109,0,0.163,0,0.218,0.272,0.218,0.218,0.272,0.218,0.109,0.435,0,0.218,0,0.381,0.109,0.49,0.163,0.544,0.272,0.707,0.054,0.435,0.381,0.762,4.624,0.816,0,9.465,0.272,11.314,0,1.36,4.025,0.435,0.598,3.264,1.849,2.937,0,0,0,0,7.452,0,0,0,0,1.741,0,0,0,0,0,0,6.038,0,0,0,6.582,1.958,0.054,1.305,1.251,0.381,0.218,0.762,0,0,0,2.557,0.653,0.435,1.849,0,1.414,0.598,1.414,2.067,0,0,0,0,0,14.306,0,0,0,0,0,0,0,0,0,49.772,9.247,0,18.821,3.264,10.716,11.205,3.644,25.675,8.322,3.862,24.478,13.436,16.645,22.193,14.415,6.473,12.674,11.586,12.457,7.724,17.515,22.683,9.9,6.799,3.536,12.293,8.812,19.474,8.975,8.54,26.98,7.724,12.892,8.377,13.871,11.097,13.653,3.59,7.452,4.95,12.239,9.682,6.691,6.691,3.916,15.448,1.849,5.875,6.31,3.808,3.644,3.264,6.31,8.703,5.548,5.929,7.779,3.971,9.846,5.385,3.699,2.23,5.113,2.611,3.318,2.393,11.641,2.937,2.611,1.305,5.276,1.577,1.034,2.992,2.393,2.339,1.523,7.833,4.243,2.013,4.406,2.937,4.188,2.067,4.134,2.339,4.95,2.067,1.577,2.339,0,7.071,3.481,2.393,4.624,0.979,1.904,3.264,1.197,0,4.515,2.339,2.285,2.176,4.896,0.925,2.611,3.427,6.419,2.013,3.916,2.665,4.841,2.502,0.925,1.414,2.121,1.088,2.013,0.218,1.414,3.481,3.046,2.013,3.808,1.251,1.142,1.632,1.632,0.653,3.753,0.979,0.87,1.088,1.034,2.121,0.979,1.904,1.632,6.908,2.23,0.979,0.816,1.741,5.385,1.577,3.808,3.046,3.101,2.611,5.766,1.523,2.611],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.054,0.054,0.054,0.544,0.762,1.088,1.414,1.468,1.74,1.74,1.794,1.467,1.249,0.923,0.597,0.543,0.217,0.217,0.163,0.054,0.054,0.217,0.326,0.326,0.489,0.489,0.707,0.925,1.143,1.198,1.361,1.579,1.525,1.96,1.742,1.688,1.47,1.633,1.47,1.742,1.796,1.905,2.177,2.666,2.72,2.774,3.046,3.318,7.779,8.051,7.779,16.537,16.755,27.634,27.253,27.851,27.252,26.871,27.469,21.268,22.845,14.468,14.468,13.108,9.083,8.648,15.502,12.238,10.389,7.452,7.452,9.193,9.193,9.193,1.741,1.741,1.741,1.741,7.779,6.038,6.038,6.038,12.62,14.578,14.632,15.937,11.15,11.531,11.749,12.511,5.929,3.971,3.917,5.169,4.571,4.625,6.256,5.494,6.908,7.506,8.92,8.43,7.777,7.342,5.493,5.493,4.079,17.787,16.373,14.306,14.306,14.306,14.306,14.306,14.306,0,0,49.772,59.019,59.019,77.84,81.104,91.82,103.025,106.669,82.572,81.647,85.509,91.166,101.338,107.267,118.255,129.026,109.824,114.176,121.9,109.879,104.167,105.037,105.527,101.012,101.338,92.2,92.907,89.262,101.012,92.472,78.329,95.409,96.334,105.69,101.774,106.833,98.456,103.134,98.184,78.656,75.882,75.229,76.534,69.354,64.948,55.211,67.069,61.466,62.391,56.462,50.588,47.541,44.114,46.508,39.763,43.462,43.516,44.985,45.148,51.35,53.471,50.86,44.387,43.952,40.634,36.173,34.595,36.39,33.942,32.854,31.929,32.092,31.058,28.774,29.373,20.125,19.527,18.439,24.967,23.934,24.37,27.742,27.687,29.482,29.21,31.821,26.327,27.034,27.088,24.259,23.661,19.473,24.477,23.824,23.878,23.552,22.464,22.791,23.716,24.913,17.842,18.876,18.822,16.483,17.68,20.672,18.333,19.747,23.174,25.078,24.752,26.383,26.872,26.817,28.394,26.708,24.695,20.397,19.472,17.569,15.122,11.695,12.674,14.795,15.394,17.081,17.244,16.373,17.787,18.005,15.177,15.884,14.85,11.912,11.749,11.641,12.13,11.477,12.728,10.607,16.536,17.896,17.787,17.569,17.189,21.595,21.268,23.444,19.582,20.453,22.085,27.035,26.817,24.043],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.008,0.078,0.109,0.155,0.202,0.202,0.249,0.249,0.186,0.179,0.132,0.085,0.078,0.031,0.031,0.023,0,0.008,0.008,0.031,0.047,0.047,0.07,0.07,0.093,0.132,0.14,0.155,0.194,0.202,0.218,0.249,0.21,0.21,0.179,0.194,0.179,0.233,0.194,0.272,0.28,0.381,0.334,0.381,0.365,0.451,1.034,1.111,1.01,2.355,2.331,3.893,3.784,3.318,3.777,3.839,2.572,3,1.647,2.067,1.873,1.298,1.236,1.15,1.748,1.484,1.065,1.065,1.065,1.313,1.313,0.249,0.249,0.249,0.249,0.249,0.863,0.863,0.863,0.863,1.803,2.083,2.09,1.414,1.593,1.647,1.678,0.847,0.567,0.559,0.373,0.559,0.598,0.629,0.785,0.785,0.987,1.072,0.909,1.111,1.049,0.785,0.785,0.583,0.497,2.339,2.044,2.044,2.044,2.044,2.044,2.044,0,0,0,7.11,8.431,8.431,11.12,11.586,13.117,14.718,8.128,10.475,11.664,9.527,12.558,12.946,13.723,16.373,14.764,14.5,15.759,13.917,13.778,12.503,11.835,13.016,13.506,12.666,11.516,11.493,11.648,11.928,9.97,9.776,12.659,13.257,13.342,13.28,12.48,12.783,13.513,10.172,10.133,8.999,9.55,8.952,8.322,7.328,7.374,8.517,8.074,7.165,6.683,6.271,5.836,5.743,4.437,5.416,5.37,5.315,5.882,5.929,6.869,6.737,6.022,5.548,5.432,4.694,4.6,3.536,4.429,4.321,4.375,3.831,4.212,3.963,3.769,2.533,2.456,2.417,2.448,2.813,3.194,3.334,3.536,3.613,3.878,3.955,3.427,3.155,3.575,3.24,3.046,2.782,2.487,2.906,3.069,2.704,3.069,2.984,2.922,3.388,2.549,2.051,2.355,2.028,2.215,2.254,2.487,2.448,2.821,2.665,3.248,3.209,3.458,3.139,3.699,3.683,3.326,2.611,2.627,2.222,2.129,1.469,1.313,1.678,1.912,1.896,2.285,2.176,2.308,2.339,2.075,1.733,1.982,1.577,1.523,1.515,1.43,1.5,1.546,1.282,1.375,2.238,2.401,2.393,2.207,2.316,2.813,2.805,2.362,2.479,2.782,3.038,3.613,3.062,3.209]},{"iso":"ZWE","continent":"Africa","population":14862927,"name":"Zimbabwe","population_density":42.729,"total_cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,3,3,3,3,3,5,7,7,7,8,8,9,9,9,9,10,11,11,11,13,14,14,17,17,23,23,24,25,25,25,28,28,28,29,31,31,32,32,32,40,40,34,34,34,34,34,34,34,35,36,36,36,37,37,42,42,44,46,46,48,51,51,56,56,56,56,132,149,149,174,178,203,206,222,237,265,279,282,287,314,320,332,343,356,383,387,391,401,463,479,479,489,512,525,530,551,561,567,567,574,591,605,617,625,698,716,734,787,885,885,942,982,985,1034,1064,1089,1362,1420,1478,1611,1713,1820,2034,2124,2296,2434,2512,2704,2817,2879,3092,3169,3659,3921,4075,4221,4221,4339,4451,4575,4649,4748,4818,4893,4990,5072,5176,5261,5308,5378,5643,5745,5815,5893,5930,6070,6196,6251,6292,6388,6406,6412,6497,6559,6638,6678,6837,6837,6837,7298,7388,7429,7453,7479,7508,7526,7531,7576,7598,7633,7647,7672,7683,7683,7711,7725,7752,7787,7803,7812,7816,7837,7838,7850,7858,7885,7888,7898,7915,7919,7951,7994,8010,8011,8021,8036,8055,8075,8099,8110,8147,8159,8187,8215,8242,8257,8269,8276,8303,8315,8320,8349,8362,8367,8374,8389,8410,8427,8444,8471,8498,8531,8561,8610,8667,8696,8765,8786,8829,8897,8945,8981,9046,9120,9172,9220,9308,9398,9508,9623,9714,9822,9822,9950,10129,10129,10424,10547,10617,10718,10839,10912,11007,11081,11162,11219,11246,11358,11522,11749,11866],"total_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.067,0.202,0.202,0.202,0.202,0.202,0.202,0.336,0.471,0.471,0.471,0.538,0.538,0.606,0.606,0.606,0.606,0.673,0.74,0.74,0.74,0.875,0.942,0.942,1.144,1.144,1.547,1.547,1.615,1.682,1.682,1.682,1.884,1.884,1.884,1.951,2.086,2.086,2.153,2.153,2.153,2.691,2.691,2.288,2.288,2.288,2.288,2.288,2.288,2.288,2.355,2.422,2.422,2.422,2.489,2.489,2.826,2.826,2.96,3.095,3.095,3.23,3.431,3.431,3.768,3.768,3.768,3.768,8.881,10.025,10.025,11.707,11.976,13.658,13.86,14.936,15.946,17.83,18.772,18.973,19.31,21.126,21.53,22.337,23.078,23.952,25.769,26.038,26.307,26.98,31.151,32.228,32.228,32.901,34.448,35.323,35.659,37.072,37.745,38.149,38.149,38.62,39.763,40.705,41.513,42.051,46.962,48.174,49.385,52.951,59.544,59.544,63.379,66.07,66.272,69.569,71.588,73.27,91.637,95.54,99.442,108.39,115.253,122.452,136.851,142.906,154.478,163.763,169.011,181.929,189.532,193.703,208.034,213.215,246.183,263.811,274.172,283.995,283.995,291.934,299.47,307.813,312.792,319.453,324.162,329.208,335.735,341.252,348.249,353.968,357.13,361.84,379.669,386.532,391.242,396.49,398.979,408.399,416.876,420.577,423.335,429.794,431.005,431.409,437.128,441.299,446.615,449.306,460.004,460.004,460.004,491.02,497.076,499.834,501.449,503.198,505.149,506.361,506.697,509.725,511.205,513.56,514.502,516.184,516.924,516.924,518.808,519.75,521.566,523.921,524.998,525.603,525.872,527.285,527.352,528.16,528.698,530.515,530.716,531.389,532.533,532.802,534.955,537.848,538.925,538.992,539.665,540.674,541.952,543.298,544.913,545.653,548.142,548.95,550.834,552.718,554.534,555.543,556.351,556.822,558.638,559.446,559.782,561.733,562.608,562.944,563.415,564.424,565.837,566.981,568.125,569.942,571.758,573.978,575.997,579.294,583.129,585.08,589.722,591.135,594.028,598.603,601.833,604.255,608.628,613.607,617.106,620.335,626.256,632.312,639.712,647.45,653.572,660.839,660.839,669.451,681.494,681.494,701.342,709.618,714.328,721.123,729.264,734.176,740.567,745.546,750.996,754.831,756.648,764.183,775.217,790.49,798.362],"new_cases_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.135,0,0,0,0,0,0.135,0.135,0,0,0.067,0,0.067,0,0,0,0.067,0.067,0,0,0.135,0.067,0,0.202,0,0.404,0,0.067,0.067,0,0,0.202,0,0,0.067,0.135,0,0.067,0,0,0.538,0,-0.404,0,0,0,0,0,0,0.067,0.067,0,0,0.067,0,0.336,0,0.135,0.135,0,0.135,0.202,0,0.336,0,0,0,5.113,1.144,0,1.682,0.269,1.682,0.202,1.077,1.009,1.884,0.942,0.202,0.336,1.817,0.404,0.807,0.74,0.875,1.817,0.269,0.269,0.673,4.171,1.077,0,0.673,1.547,0.875,0.336,1.413,0.673,0.404,0,0.471,1.144,0.942,0.807,0.538,4.912,1.211,1.211,3.566,6.594,0,3.835,2.691,0.202,3.297,2.018,1.682,18.368,3.902,3.902,8.948,6.863,7.199,14.398,6.055,11.572,9.285,5.248,12.918,7.603,4.171,14.331,5.181,32.968,17.628,10.361,9.823,0,7.939,7.536,8.343,4.979,6.661,4.71,5.046,6.526,5.517,6.997,5.719,3.162,4.71,17.83,6.863,4.71,5.248,2.489,9.419,8.477,3.7,2.759,6.459,1.211,0.404,5.719,4.171,5.315,2.691,10.698,0,0,31.017,6.055,2.759,1.615,1.749,1.951,1.211,0.336,3.028,1.48,2.355,0.942,1.682,0.74,0,1.884,0.942,1.817,2.355,1.077,0.606,0.269,1.413,0.067,0.807,0.538,1.817,0.202,0.673,1.144,0.269,2.153,2.893,1.077,0.067,0.673,1.009,1.278,1.346,1.615,0.74,2.489,0.807,1.884,1.884,1.817,1.009,0.807,0.471,1.817,0.807,0.336,1.951,0.875,0.336,0.471,1.009,1.413,1.144,1.144,1.817,1.817,2.22,2.018,3.297,3.835,1.951,4.642,1.413,2.893,4.575,3.23,2.422,4.373,4.979,3.499,3.23,5.921,6.055,7.401,7.737,6.123,7.266,0,8.612,12.043,0,19.848,8.276,4.71,6.795,8.141,4.912,6.392,4.979,5.45,3.835,1.817,7.536,11.034,15.273,7.872],"7_day_incidence_per_million":[null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.135,0.135,0.135,0.135,0.135,0.135,0.27,0.405,0.27,0.27,0.337,0.337,0.404,0.404,0.269,0.134,0.201,0.268,0.201,0.201,0.269,0.336,0.336,0.538,0.471,0.808,0.808,0.875,0.807,0.74,0.74,0.74,0.74,0.336,0.403,0.471,0.404,0.471,0.471,0.269,0.807,0.807,0.336,0.201,0.201,0.134,0.134,0.134,-0.404,-0.337,0.134,0.134,0.134,0.201,0.201,0.537,0.537,0.605,0.673,0.673,0.808,0.943,0.943,0.943,0.943,0.808,0.673,5.786,6.795,6.593,8.275,8.208,9.89,10.092,11.169,7.065,7.805,8.747,7.267,7.334,7.469,7.671,7.401,7.132,6.123,6.998,7.065,6.998,5.854,9.621,9.891,9.151,8.949,8.679,9.285,9.352,10.092,6.594,5.921,5.921,5.719,5.316,5.383,5.854,4.979,9.218,10.025,11.236,14.331,19.781,18.839,21.867,24.02,19.31,21.396,22.203,20.319,32.093,35.995,36.062,42.319,48.98,52.882,65.262,69.635,62.839,68.222,69.568,73.538,74.278,71.25,71.183,70.309,91.705,100.048,105.161,102.066,94.463,98.231,91.436,94.598,66.609,55.642,49.991,45.214,51.74,49.318,48.779,46.155,44.338,42.387,55.507,57.324,55.508,55.239,50.731,54.431,59.746,58.736,43.665,43.261,39.762,34.918,38.148,32.9,29.738,28.729,36.668,30.209,28.998,59.611,59.947,58.535,54.835,53.893,45.146,46.357,46.693,18.704,14.129,13.725,13.052,12.985,11.774,10.563,12.111,10.025,10.362,10.362,10.497,9.421,8.95,10.363,8.546,8.411,7.132,6.594,5.719,5.786,6.661,5.517,7.603,9.689,10.228,8.478,8.949,9.285,9.419,10.496,9.958,7.805,9.217,9.957,11.168,12.043,12.582,12.245,11.437,11.168,10.496,10.496,8.948,9.015,8.073,7.4,7.064,7.602,7.198,7.535,8.343,8.209,9.151,11.035,12.582,14.87,17.292,18.099,21.597,21.193,22.269,24.624,25.836,24.961,25.499,28.527,27.384,29.201,32.229,33.709,37.88,43.195,44.945,47.232,43.733,49.115,55.237,49.182,61.629,62.168,60.755,60.284,68.425,64.725,59.074,64.053,49.655,45.214,42.321,43.062,45.955,56.316,57.796],"new_cases_smoothed_per_million":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.019,0.038,0.038,0.038,0.038,0.048,0.048,0.058,0.038,0.019,0.019,0.029,0.029,0.029,0.019,0.038,0.048,0.048,0.067,0.058,0.115,0.115,0.106,0.106,0.106,0.077,0.106,0.048,0.048,0.048,0.058,0.058,0.067,0.038,0.038,0.115,0.106,0.029,0.029,0.019,0.019,0.019,-0.058,-0.058,0.01,0.019,0.019,0.019,0.029,0.029,0.077,0.067,0.077,0.096,0.096,0.106,0.135,0.087,0.135,0.115,0.096,0.096,0.807,0.942,0.942,1.134,1.173,1.413,1.442,0.865,0.846,1.115,1.009,1,0.807,1.038,0.942,0.913,0.75,0.74,0.971,0.961,0.74,0.779,1.259,1.307,1.182,1.019,1.201,1.288,1.24,0.846,0.788,0.846,0.75,0.596,0.634,0.721,0.634,0.615,1.259,1.432,1.538,1.884,2.691,2.576,3.047,2.73,2.586,2.883,2.662,1.961,4.585,4.594,4.767,6.017,6.526,7.266,9.083,7.324,8.42,9.189,8.66,9.525,9.583,8.122,9.304,8.391,11.774,13.543,13.178,13.495,12.899,11.986,12.322,8.804,6.997,6.469,5.738,6.459,6.257,5.969,5.777,5.882,5.383,5.383,7.209,7.257,7.141,6.892,6.43,7.324,7.862,5.844,5.258,5.507,4.931,4.633,4.104,3.489,3.72,3.71,4.316,4.143,4.085,7.699,7.968,7.603,7.449,6.171,6.449,6.622,2.24,1.807,1.624,1.73,1.615,1.576,1.509,1.461,1.298,1.221,1.144,1.346,1.259,1.24,1.278,1.211,1.086,0.942,0.682,0.788,0.73,0.788,0.75,0.779,0.971,1.307,1.201,1.182,1.182,1.163,1.307,1.192,1.009,0.961,1.307,1.326,1.451,1.538,1.605,1.519,1.528,1.24,1.384,1.23,1.009,1.028,1.009,0.942,0.942,0.827,0.913,1.028,0.913,1.048,1.259,1.509,1.653,1.922,2.307,2.422,2.826,2.768,2.864,3.23,3.22,3.018,3.364,3.412,3.71,3.758,3.95,4.354,5.065,5.546,5.709,6.248,5.786,6.171,7.026,5.969,7.699,8.006,7.641,8.612,8.545,7.526,8.439,6.315,5.911,5.786,5.075,4.988,5.863,7.132,7.545]}]}
},{}],12:[function(require,module,exports){
const html = require('choo/html')
const devtools = require('choo-devtools')
const choo = require('choo')
const dataStore = require('./app/data-store.js')
const layoutStore = require('./app/layout-store.js')

//const Scatterplot = require('./scatter-plot.js')
const Scatterplot = require('./app/scatter-plot.js')
const tooltip = require('./app/tooltip.js')
const Canvas = require('./app/canvas-renderer.js')
const controls = require('./app/control-panel.js')

const app = choo()
app.use(devtools())
app.use(dataStore)
app.use(layoutStore)
app.route('/', mainView)
app.mount('body')


const panel = (state, emit) => state.layout.panel.isOpen ? html`<div class="flex flex-column pa4 bl" style="width:${state.layout.panel.width}px;border-color:gray">
  ${controls(state.plotSettings, emit)}
</div>` : ''



//  ${state.cache(Scatterplot, 'scatterplot').render(state)}
function mainView (state, emit) {
  const graph = state.layout.graph
  const width = graph.width + graph.margin.left + graph.margin.right
  const height = graph.height + graph.margin.top + graph.margin.bottom

  const graphContainer = (contents) => html`<div class="absolute top-0 left-0" style="left:${graph.margin.left}px;top:${graph.margin.top}px;cursor:crosshair">
    ${contents}
  </div>`

  return html`
  <body class="w-100 h-100 mw-100 avenir bg-dark-gray near-white">
    <div class="flex flex-row h-100">


      <div class="flex-auto relative">

        <div class="relative" style="width:${width}px;height:${height}px">
          ${graphContainer(state.cache(Canvas, 'canvas-base').render(state))}
          ${graphContainer(state.cache(Scatterplot, 'scatterplot').render({
            dimensions: graph, dateIndex: state.dateIndex, plot: state.plot, plotSettings: state.plotSettings }))}
            <i class="fas fa-cogs dim absolute top-0 right-0 pointer pa2" title="show settings" onclick=${()=>emit('togglePanel')}></i>

          <div class="absolute bottom-0 w-100 pa4 ml2" style="height:${graph.margin.bottom}px">
            <div class=" pt4 flex items-center">
              <div class="mr2 tc w3 pointer ba dim pa2" onclick=${() => emit('togglePlay')}>${state.isPlaying ? 'Pause': 'Play'}</div>
              <input class="flex-auto" oninput=${(e)=>emit('setDate', parseFloat(e.target.value))} type="range" id="date" name="date" min="0" max=${state.data.dates.length-1} value=${state.dateIndex}>
              <div class="mr2 pa2">${state.data.dates[state.dateIndex]}</div>
            </div>
            <div class="f4 mv2 pt3"> COVID-19 cases by country</div>
            <div class="f6 absolute bottom-0 pb2 gray">*Data from <a class="gray dim" href="https://github.com/owid/covid-19-data/tree/master/public/data">Our World In Data </a>, last updated ${state.data.dates[state.data.dates.length-1]} </div>
          </div>
        </div>
        ${tooltip(state, emit)}
      </div>
      ${panel(state, emit)}
    </div>
  </body>
  `
    }

    const insertCss = require('insert-css')

    //const data = require('./data-processing/covid-cases-processed.json')
    // const graph = require('./animated-graph.js')({
    //   data: data,
    //   margin: margin,
    //   width: 1000,
    //   height: 800
    // })

    const style = insertCss(`
      /*html, body {
        background: #242323;
        color: white;
        display: flex;
        justify-content: center;
        height: 100%;
        align-items: center;
      }*/

      html {
        height: 100%;
      }

      svg {
      /*  overflow: visible; */
      }

      text {
        stroke: none;
      /*  font-family: monospace;*/
      }
      `)

      // document.body.appendChild(graph.node)

},{"./app/canvas-renderer.js":2,"./app/control-panel.js":3,"./app/data-store.js":4,"./app/layout-store.js":5,"./app/scatter-plot.js":8,"./app/tooltip.js":9,"choo":34,"choo-devtools":21,"choo/html":33,"insert-css":76}],13:[function(require,module,exports){
(function (global){
'use strict';

var objectAssign = require('object-assign');

// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
// original notice:

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
function compare(a, b) {
  if (a === b) {
    return 0;
  }

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) {
    return -1;
  }
  if (y < x) {
    return 1;
  }
  return 0;
}
function isBuffer(b) {
  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
    return global.Buffer.isBuffer(b);
  }
  return !!(b != null && b._isBuffer);
}

// based on node assert, original notice:
// NB: The URL to the CommonJS spec is kept just for tradition.
//     node-assert has evolved a lot since then, both in API and behavior.

// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
//
// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
//
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

var util = require('util/');
var hasOwn = Object.prototype.hasOwnProperty;
var pSlice = Array.prototype.slice;
var functionsHaveNames = (function () {
  return function foo() {}.name === 'foo';
}());
function pToString (obj) {
  return Object.prototype.toString.call(obj);
}
function isView(arrbuf) {
  if (isBuffer(arrbuf)) {
    return false;
  }
  if (typeof global.ArrayBuffer !== 'function') {
    return false;
  }
  if (typeof ArrayBuffer.isView === 'function') {
    return ArrayBuffer.isView(arrbuf);
  }
  if (!arrbuf) {
    return false;
  }
  if (arrbuf instanceof DataView) {
    return true;
  }
  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
    return true;
  }
  return false;
}
// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;

// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

var regex = /\s*function\s+([^\(\s]*)\s*/;
// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
function getName(func) {
  if (!util.isFunction(func)) {
    return;
  }
  if (functionsHaveNames) {
    return func.name;
  }
  var str = func.toString();
  var match = str.match(regex);
  return match && match[1];
}
assert.AssertionError = function AssertionError(options) {
  this.name = 'AssertionError';
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;
  if (options.message) {
    this.message = options.message;
    this.generatedMessage = false;
  } else {
    this.message = getMessage(this);
    this.generatedMessage = true;
  }
  var stackStartFunction = options.stackStartFunction || fail;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, stackStartFunction);
  } else {
    // non v8 browsers so we can have a stacktrace
    var err = new Error();
    if (err.stack) {
      var out = err.stack;

      // try to strip useless frames
      var fn_name = getName(stackStartFunction);
      var idx = out.indexOf('\n' + fn_name);
      if (idx >= 0) {
        // once we have located the function frame
        // we need to strip out everything before it (and its line)
        var next_line = out.indexOf('\n', idx + 1);
        out = out.substring(next_line + 1);
      }

      this.stack = out;
    }
  }
};

// assert.AssertionError instanceof Error
util.inherits(assert.AssertionError, Error);

function truncate(s, n) {
  if (typeof s === 'string') {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}
function inspect(something) {
  if (functionsHaveNames || !util.isFunction(something)) {
    return util.inspect(something);
  }
  var rawname = getName(something);
  var name = rawname ? ': ' + rawname : '';
  return '[Function' +  name + ']';
}
function getMessage(self) {
  return truncate(inspect(self.actual), 128) + ' ' +
         self.operator + ' ' +
         truncate(inspect(self.expected), 128);
}

// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.

// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function fail(actual, expected, message, operator, stackStartFunction) {
  throw new assert.AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
}

// EXTENSION! allows for well behaved errors defined elsewhere.
assert.fail = fail;

// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

function ok(value, message) {
  if (!value) fail(value, true, message, '==', assert.ok);
}
assert.ok = ok;

// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);

assert.equal = function equal(actual, expected, message) {
  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
};

// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);

assert.notEqual = function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, '!=', assert.notEqual);
  }
};

// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);

assert.deepEqual = function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
  }
};

assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
  }
};

function _deepEqual(actual, expected, strict, memos) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;
  } else if (isBuffer(actual) && isBuffer(expected)) {
    return compare(actual, expected) === 0;

  // 7.2. If the expected value is a Date object, the actual value is
  // equivalent if it is also a Date object that refers to the same time.
  } else if (util.isDate(actual) && util.isDate(expected)) {
    return actual.getTime() === expected.getTime();

  // 7.3 If the expected value is a RegExp object, the actual value is
  // equivalent if it is also a RegExp object with the same source and
  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
    return actual.source === expected.source &&
           actual.global === expected.global &&
           actual.multiline === expected.multiline &&
           actual.lastIndex === expected.lastIndex &&
           actual.ignoreCase === expected.ignoreCase;

  // 7.4. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if ((actual === null || typeof actual !== 'object') &&
             (expected === null || typeof expected !== 'object')) {
    return strict ? actual === expected : actual == expected;

  // If both values are instances of typed arrays, wrap their underlying
  // ArrayBuffers in a Buffer each to increase performance
  // This optimization requires the arrays to have the same type as checked by
  // Object.prototype.toString (aka pToString). Never perform binary
  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
  // bit patterns are not identical.
  } else if (isView(actual) && isView(expected) &&
             pToString(actual) === pToString(expected) &&
             !(actual instanceof Float32Array ||
               actual instanceof Float64Array)) {
    return compare(new Uint8Array(actual.buffer),
                   new Uint8Array(expected.buffer)) === 0;

  // 7.5 For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else if (isBuffer(actual) !== isBuffer(expected)) {
    return false;
  } else {
    memos = memos || {actual: [], expected: []};

    var actualIndex = memos.actual.indexOf(actual);
    if (actualIndex !== -1) {
      if (actualIndex === memos.expected.indexOf(expected)) {
        return true;
      }
    }

    memos.actual.push(actual);
    memos.expected.push(expected);

    return objEquiv(actual, expected, strict, memos);
  }
}

function isArguments(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}

function objEquiv(a, b, strict, actualVisitedObjects) {
  if (a === null || a === undefined || b === null || b === undefined)
    return false;
  // if one is a primitive, the other must be same
  if (util.isPrimitive(a) || util.isPrimitive(b))
    return a === b;
  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
    return false;
  var aIsArgs = isArguments(a);
  var bIsArgs = isArguments(b);
  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
    return false;
  if (aIsArgs) {
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b, strict);
  }
  var ka = objectKeys(a);
  var kb = objectKeys(b);
  var key, i;
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length !== kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] !== kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
      return false;
  }
  return true;
}

// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);

assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
  }
};

assert.notDeepStrictEqual = notDeepStrictEqual;
function notDeepStrictEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
  }
}


// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, '===', assert.strictEqual);
  }
};

// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, '!==', assert.notStrictEqual);
  }
};

function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }

  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
    return expected.test(actual);
  }

  try {
    if (actual instanceof expected) {
      return true;
    }
  } catch (e) {
    // Ignore.  The instanceof check doesn't work for arrow functions.
  }

  if (Error.isPrototypeOf(expected)) {
    return false;
  }

  return expected.call({}, actual) === true;
}

function _tryBlock(block) {
  var error;
  try {
    block();
  } catch (e) {
    error = e;
  }
  return error;
}

function _throws(shouldThrow, block, expected, message) {
  var actual;

  if (typeof block !== 'function') {
    throw new TypeError('"block" argument must be a function');
  }

  if (typeof expected === 'string') {
    message = expected;
    expected = null;
  }

  actual = _tryBlock(block);

  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
            (message ? ' ' + message : '.');

  if (shouldThrow && !actual) {
    fail(actual, expected, 'Missing expected exception' + message);
  }

  var userProvidedMessage = typeof message === 'string';
  var isUnwantedException = !shouldThrow && util.isError(actual);
  var isUnexpectedException = !shouldThrow && actual && !expected;

  if ((isUnwantedException &&
      userProvidedMessage &&
      expectedException(actual, expected)) ||
      isUnexpectedException) {
    fail(actual, expected, 'Got unwanted exception' + message);
  }

  if ((shouldThrow && actual && expected &&
      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
    throw actual;
  }
}

// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);

assert.throws = function(block, /*optional*/error, /*optional*/message) {
  _throws(true, block, error, message);
};

// EXTENSION! This is annoying to write outside this module.
assert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {
  _throws(false, block, error, message);
};

assert.ifError = function(err) { if (err) throw err; };

// Expose a strict only variant of assert
function strict(value, message) {
  if (!value) fail(value, true, message, '==', strict);
}
assert.strict = objectAssign(strict, assert, {
  equal: assert.strictEqual,
  deepEqual: assert.deepStrictEqual,
  notEqual: assert.notStrictEqual,
  notDeepEqual: assert.notDeepStrictEqual
});
assert.strict.strict = assert.strict;

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    if (hasOwn.call(obj, key)) keys.push(key);
  }
  return keys;
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"object-assign":97,"util/":16}],14:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],15:[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],16:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./support/isBuffer":15,"_process":103,"inherits":14}],17:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],18:[function(require,module,exports){

},{}],19:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var objectCreate = Object.create || objectCreatePolyfill
var objectKeys = Object.keys || objectKeysPolyfill
var bind = Function.prototype.bind || functionBindPolyfill

function EventEmitter() {
  if (!this._events || !Object.prototype.hasOwnProperty.call(this, '_events')) {
    this._events = objectCreate(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

var hasDefineProperty;
try {
  var o = {};
  if (Object.defineProperty) Object.defineProperty(o, 'x', { value: 0 });
  hasDefineProperty = o.x === 0;
} catch (err) { hasDefineProperty = false }
if (hasDefineProperty) {
  Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
    enumerable: true,
    get: function() {
      return defaultMaxListeners;
    },
    set: function(arg) {
      // check whether the input is a positive number (whose value is zero or
      // greater and not a NaN).
      if (typeof arg !== 'number' || arg < 0 || arg !== arg)
        throw new TypeError('"defaultMaxListeners" must be a positive number');
      defaultMaxListeners = arg;
    }
  });
} else {
  EventEmitter.defaultMaxListeners = defaultMaxListeners;
}

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || isNaN(n))
    throw new TypeError('"n" argument must be a positive number');
  this._maxListeners = n;
  return this;
};

function $getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return $getMaxListeners(this);
};

// These standalone emit* functions are used to optimize calling of event
// handlers for fast cases because emit() itself often has a variable number of
// arguments and can be deoptimized because of that. These functions always have
// the same number of arguments and thus do not get deoptimized, so the code
// inside them can execute faster.
function emitNone(handler, isFn, self) {
  if (isFn)
    handler.call(self);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self);
  }
}
function emitOne(handler, isFn, self, arg1) {
  if (isFn)
    handler.call(self, arg1);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1);
  }
}
function emitTwo(handler, isFn, self, arg1, arg2) {
  if (isFn)
    handler.call(self, arg1, arg2);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1, arg2);
  }
}
function emitThree(handler, isFn, self, arg1, arg2, arg3) {
  if (isFn)
    handler.call(self, arg1, arg2, arg3);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1, arg2, arg3);
  }
}

function emitMany(handler, isFn, self, args) {
  if (isFn)
    handler.apply(self, args);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].apply(self, args);
  }
}

EventEmitter.prototype.emit = function emit(type) {
  var er, handler, len, args, i, events;
  var doError = (type === 'error');

  events = this._events;
  if (events)
    doError = (doError && events.error == null);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    if (arguments.length > 1)
      er = arguments[1];
    if (er instanceof Error) {
      throw er; // Unhandled 'error' event
    } else {
      // At least give some kind of context to the user
      var err = new Error('Unhandled "error" event. (' + er + ')');
      err.context = er;
      throw err;
    }
    return false;
  }

  handler = events[type];

  if (!handler)
    return false;

  var isFn = typeof handler === 'function';
  len = arguments.length;
  switch (len) {
      // fast cases
    case 1:
      emitNone(handler, isFn, this);
      break;
    case 2:
      emitOne(handler, isFn, this, arguments[1]);
      break;
    case 3:
      emitTwo(handler, isFn, this, arguments[1], arguments[2]);
      break;
    case 4:
      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
      break;
      // slower
    default:
      args = new Array(len - 1);
      for (i = 1; i < len; i++)
        args[i - 1] = arguments[i];
      emitMany(handler, isFn, this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  if (typeof listener !== 'function')
    throw new TypeError('"listener" argument must be a function');

  events = target._events;
  if (!events) {
    events = target._events = objectCreate(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener) {
      target.emit('newListener', type,
          listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (!existing) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
          prepend ? [listener, existing] : [existing, listener];
    } else {
      // If we've already got an array, just append.
      if (prepend) {
        existing.unshift(listener);
      } else {
        existing.push(listener);
      }
    }

    // Check for listener leak
    if (!existing.warned) {
      m = $getMaxListeners(target);
      if (m && m > 0 && existing.length > m) {
        existing.warned = true;
        var w = new Error('Possible EventEmitter memory leak detected. ' +
            existing.length + ' "' + String(type) + '" listeners ' +
            'added. Use emitter.setMaxListeners() to ' +
            'increase limit.');
        w.name = 'MaxListenersExceededWarning';
        w.emitter = target;
        w.type = type;
        w.count = existing.length;
        if (typeof console === 'object' && console.warn) {
          console.warn('%s: %s', w.name, w.message);
        }
      }
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    switch (arguments.length) {
      case 0:
        return this.listener.call(this.target);
      case 1:
        return this.listener.call(this.target, arguments[0]);
      case 2:
        return this.listener.call(this.target, arguments[0], arguments[1]);
      case 3:
        return this.listener.call(this.target, arguments[0], arguments[1],
            arguments[2]);
      default:
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; ++i)
          args[i] = arguments[i];
        this.listener.apply(this.target, args);
    }
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = bind.call(onceWrapper, state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  if (typeof listener !== 'function')
    throw new TypeError('"listener" argument must be a function');
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');

      events = this._events;
      if (!events)
        return this;

      list = events[type];
      if (!list)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = objectCreate(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else
          spliceOne(list, position);

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (!events)
        return this;

      // not listening for removeListener, no need to emit
      if (!events.removeListener) {
        if (arguments.length === 0) {
          this._events = objectCreate(null);
          this._eventsCount = 0;
        } else if (events[type]) {
          if (--this._eventsCount === 0)
            this._events = objectCreate(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = objectKeys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = objectCreate(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (!events)
    return [];

  var evlistener = events[type];
  if (!evlistener)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
};

// About 1.5x faster than the two-arg version of Array#splice().
function spliceOne(list, index) {
  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
    list[i] = list[k];
  list.pop();
}

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function objectCreatePolyfill(proto) {
  var F = function() {};
  F.prototype = proto;
  return new F;
}
function objectKeysPolyfill(obj) {
  var keys = [];
  for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k)) {
    keys.push(k);
  }
  return k;
}
function functionBindPolyfill(context) {
  var fn = this;
  return function () {
    return fn.apply(context, arguments);
  };
}

},{}],20:[function(require,module,exports){
(function (Buffer){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species != null &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayLike(value)
  }

  if (value == null) {
    throw TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  var valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  var b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(
      value[Symbol.toPrimitive]('string'), encodingOrOffset, length
    )
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      buf = Buffer.from(buf)
    }
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  var len = string.length
  var mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  var strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
          : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

}).call(this,require("buffer").Buffer)
},{"base64-js":17,"buffer":20,"ieee754":75}],21:[function(require,module,exports){
var EventEmitter = require('events').EventEmitter

var storage = require('./lib/storage')
var logger = require('./lib/logger')
var debug = require('./lib/debug')
var copy = require('./lib/copy')
var help = require('./lib/help')
var perf = require('./lib/perf')
var log = require('./lib/log')
var getAllRoutes = require('wayfarer/get-all-routes')

module.exports = expose

function expose (opts) {
  opts = opts || {}
  store.storeName = 'choo-devtools'
  return store
  function store (state, emitter, app) {
    var localEmitter = new EventEmitter()

    if (typeof window !== 'undefined') {
      logger(state, emitter, opts)
    }

    emitter.on('DOMContentLoaded', function () {
      if (typeof window === 'undefined') return
      window.choo = {}

      window.choo.state = state
      window.choo.emit = function () {
        emitter.emit.apply(emitter, arguments)
      }
      window.choo.on = function (eventName, listener) {
        emitter.on(eventName, listener)
      }

      debug(state, emitter, app, localEmitter)

      log(state, emitter, app, localEmitter)
      perf(state, emitter, app, localEmitter)
      window.choo.copy = copy
      if (app.router && app.router.router) {
        window.choo.routes = Object.keys(getAllRoutes(app.router.router))
      }

      storage()
      help()
    })
  }
}

},{"./lib/copy":22,"./lib/debug":23,"./lib/help":24,"./lib/log":25,"./lib/logger":26,"./lib/perf":27,"./lib/storage":28,"events":19,"wayfarer/get-all-routes":107}],22:[function(require,module,exports){
var stateCopy = require('state-copy')
var pluck = require('plucker')

module.exports = copy

function copy (state) {
  var isStateString = state && typeof state === 'string'
  var isChooPath = isStateString && arguments.length === 1 && state.indexOf('state.') === 0

  if (!state || typeof state === 'function') state = window.choo.state
  if (isChooPath) [].push.call(arguments, { state: window.choo.state })

  stateCopy(isStateString ? pluck.apply(this, arguments) : state)
}

},{"plucker":101,"state-copy":106}],23:[function(require,module,exports){
/* eslint-disable node/no-deprecated-api */
var onChange = require('object-change-callsite')
var nanologger = require('nanologger')
var assert = require('assert')

var enabledMessage = 'Debugging enabled. To disable run: `choo.debug = false`'
var disabledMessage = 'Debugging disabled. We hope it was helpful! 🙌'

module.exports = debug

function debug (state, emitter, app, localEmitter) {
  var log = nanologger('choo-devtools')
  var enabled = window.localStorage.logLevel === 'debug'
  if (enabled) log.info(enabledMessage)

  state = onChange(state, function (attr, value, callsite) {
    if (!enabled) return
    callsite = callsite.split('\n')[1].replace(/^ +/, '')
    log.info('state.' + attr, value, '\n' + callsite)
  })

  app.state = state

  Object.defineProperty(window.choo, 'debug', {
    get: function () {
      window.localStorage.logLevel = 'debug'
      localEmitter.emit('debug', true)
      enabled = true
      return enabledMessage
    },
    set: function (bool) {
      assert.equal(typeof bool, 'boolean', 'choo-devtools.debug: bool should be type boolean')
      window.localStorage.logLevel = bool ? 'debug' : 'info'
      enabled = bool
      localEmitter.emit('debug', enabled)
      if (enabled) log.info(enabledMessage)
      else log.info(disabledMessage)
    }
  })
}

},{"assert":13,"nanologger":87,"object-change-callsite":98}],24:[function(require,module,exports){
module.exports = help

function help () {
  Object.defineProperty(window.choo, 'help', {
    get: get,
    set: noop
  })

  function get () {
    setTimeout(function () {
      print('copy', 'Serialize the current state to the clipboard.')
      print('debug', 'Enable Choo debug mode.')
      print('emit', 'Emit an event in the Choo emitter.')
      print('help', 'Print usage information.')
      print('log', 'Print the last 150 events emitted.')
      print('on', 'Listen for an event in the Choo emitter.')
      print('once', 'Listen for an event once in the Choo emitter.')
      print('perf', 'Print out performance metrics')
      print('state', 'Print the Choo state object.')
      print('storage', 'Print browser storage information.')
    }, 0)
    return 'Choo command overview'
  }
}

function print (cmd, desc) {
  var color = '#cc99cc'
  console.log('  %cchoo.' + cmd, 'color: ' + color, '— ' + desc)
}

function noop () {}

},{}],25:[function(require,module,exports){
var removeItems = require('remove-array-items')
var scheduler = require('nanoscheduler')()
var nanologger = require('nanologger')
var _log = nanologger('choo')
var clone = require('clone')

var MAX_HISTORY_LENGTH = 150 // How many items we should keep around

module.exports = log

function log (state, emitter, app, localEmitter) {
  var shouldDebug = window.localStorage.logLevel === 'debug'
  var history = []
  var i = 0
  var shouldWarn = true

  localEmitter.on('debug', function (bool) {
    shouldDebug = bool
  })

  window.choo._history = history
  window.choo.history = showHistory

  Object.defineProperty(window.choo, 'log', { get: showHistory, set: noop })
  Object.defineProperty(window.choo, 'history', { get: showHistory, set: noop })

  emitter.on('*', function (name, data) {
    i += 1
    var entry = new Event(name, data, state)
    history.push(entry)
    scheduler.push(function () {
      var length = history.length
      if (length > MAX_HISTORY_LENGTH) {
        removeItems(history, 0, length - MAX_HISTORY_LENGTH)
      }
    })
  })

  function showHistory () {
    setTimeout(function () {
      console.table(history)
    }, 0)
    var events = i === 1 ? 'event' : 'events'
    var msg = i + ' ' + events + ' recorded, showing the last ' + MAX_HISTORY_LENGTH + '.'
    if (shouldDebug === false) {
      msg += ' Enable state capture by calling `choo.debug`.'
    } else {
      msg += ' Disable state capture by calling `choo.debug = false`.'
    }
    return msg
  }

  function Event (name, data, state) {
    this.name = name
    this.data = data === undefined ? '<no data>' : data
    this.state = shouldDebug
      ? tryClone(state)
      : '<disabled>'
  }

  function tryClone (state) {
    try {
      var _state = clone(state)
      if (!shouldWarn) shouldWarn = true
      return _state
    } catch (ex) {
      if (shouldWarn) {
        _log.warn('Could not clone your app state. Make sure to have a serializable state so it can be cloned')
        shouldWarn = false
      }
      return '<unserializable>'
    }
  }
}

function noop () {}

},{"clone":36,"nanologger":87,"nanoscheduler":95,"remove-array-items":29}],26:[function(require,module,exports){
var scheduler = require('nanoscheduler')()
var nanologger = require('nanologger')
var Hooks = require('choo-hooks')

module.exports = logger

function logger (state, emitter, opts) {
  var initialRender = true
  var hooks = Hooks(emitter)
  var log = nanologger('choo')

  hooks.on('log:debug', logger('debug'))
  hooks.on('log:info', logger('info'))
  hooks.on('log:warn', logger('warn'))
  hooks.on('log:error', logger('error'))
  hooks.on('log:fatal', logger('fatal'))

  hooks.on('event', function (eventName, data, timing) {
    if (opts.filter && !opts.filter(eventName, data, timing)) return

    if (timing) {
      var duration = timing.duration.toFixed()
      var level = duration < 50 ? 'info' : 'warn'
      if (data !== undefined) logger(level)(eventName, data, duration + 'ms')
      else logger(level)(eventName, duration + 'ms')
    } else {
      if (data !== undefined) logger('info')(eventName, data)
      else logger('info')(eventName)
    }
  })

  hooks.on('unhandled', function (eventName, data) {
    logger('error')('No listeners for ' + eventName)
  })

  hooks.on('DOMContentLoaded', function (timing) {
    if (!timing) return logger('info')('DOMContentLoaded')
    var level = timing.interactive < 1000 ? 'info' : 'warn'
    logger(level)('DOMContentLoaded', timing.interactive + 'ms to interactive')
  })

  hooks.on('render', function (timings) {
    if (!timings || !timings.render) return logger('info')('render')
    var duration = timings.render.duration.toFixed()
    var msg = 'render'

    if (initialRender) {
      initialRender = false
      msg = 'initial ' + msg
    }

    // each frame has 10ms available for userland stuff
    var fps = Math.min((600 / duration).toFixed(), 60)

    if (fps === 60) {
      logger('info')(msg, fps + 'fps', duration + 'ms')
    } else {
      var times = {
        render: timings.render.duration.toFixed() + 'ms'
      }
      if (timings.morph) times.morph = timings.morph.duration.toFixed() + 'ms'
      logger('warn')(msg, fps + 'fps', duration + 'ms', times)
    }
  })

  hooks.on('resource-timing-buffer-full', function () {
    logger('error')("The browser's Resource Resource timing buffer is full. Cannot store any more timing information")
  })

  hooks.start()

  function logger (level) {
    return function () {
      var args = []
      for (var i = 0, len = arguments.length; i < len; i++) {
        args.push(arguments[i])
      }
      scheduler.push(function () {
        log[level].apply(log, args)
      })
    }
  }
}

},{"choo-hooks":30,"nanologger":87,"nanoscheduler":95}],27:[function(require,module,exports){
var onPerformance = require('on-performance')

var BAR = '█'

module.exports = perf

function perf (state, emitter, app, localEmitter) {
  var stats = {}

  window.choo.perf = {}

  // Print all events
  var all = new Perf(stats, 'all')
  Object.defineProperty(window.choo.perf, 'all', {
    get: all.get.bind(all),
    set: noop
  })

  // Print only Choo core events
  var core = new Perf(stats, 'core', function (name) {
    return /^choo/.test(name)
  })
  Object.defineProperty(window.choo.perf, 'core', {
    get: core.get.bind(core),
    set: noop
  })

  // Print component data
  var components = new Perf(stats, 'components', function (name) {
    return !/^choo/.test(name) && !/^bankai/.test(name)
  })
  Object.defineProperty(window.choo.perf, 'components', {
    get: components.get.bind(components),
    set: noop
  })

  // Print choo userland events (event emitter)
  var events = new Perf(stats, 'events', function (name) {
    return /^choo\.emit/.test(name)
  }, function (name) {
    return name.replace(/^choo\.emit\('/, '').replace(/'\)$/, '')
  })
  Object.defineProperty(window.choo.perf, 'events', {
    get: events.get.bind(events),
    set: noop
  })

  onPerformance(function (entry) {
    if (entry.entryType !== 'measure') return
    var name = entry.name.replace(/ .*$/, '')

    if (!stats[name]) {
      stats[name] = {
        name: name,
        count: 0,
        entries: []
      }
    }

    var stat = stats[name]
    stat.count += 1
    stat.entries.push(entry.duration)
  })
}

// Create a new Perf instance by passing it a filter
function Perf (stats, name, filter, rename) {
  this.stats = stats
  this.name = name
  this.filter = filter || function () { return true }
  this.rename = rename || function (name) { return name }
}

// Compute a table of performance entries based on a filter
Perf.prototype.get = function () {
  var filtered = Object.keys(this.stats).filter(this.filter)
  var self = this

  var maxTime = 0
  var maxMedian = 0
  var fmt = filtered.map(function (key) {
    var stat = self.stats[key]
    var totalTime = Number(stat.entries.reduce(function (time, entry) {
      return time + entry
    }, 0).toFixed(2))
    if (totalTime > maxTime) maxTime = totalTime

    var median = getMedian(stat.entries)
    if (median > maxMedian) maxMedian = median

    var name = self.rename(stat.name)
    return new PerfEntry(name, totalTime, median, stat.count)
  })

  var barLength = 10
  fmt.forEach(function (entry) {
    var totalTime = entry['Total Time (ms)']
    var median = entry['Median (ms)']
    entry[' '] = createBar(totalTime / maxTime * 100 / barLength)
    entry['  '] = createBar(median / maxMedian * 100 / barLength)
  })

  function createBar (len) {
    var str = ''
    for (var i = 0, max = Math.round(len); i < max; i++) {
      str += BAR
    }
    return str
  }

  var res = fmt.sort(function (a, b) {
    return b['Total Time (ms)'] - a['Total Time (ms)']
  })
  console.table(res)
  return "Showing performance events for '" + this.name + "'"
}

// An entry for the performance timeline.
function PerfEntry (name, totalTime, median, count) {
  this.Name = name
  this['Total Time (ms)'] = totalTime
  this[' '] = 0
  this['Median (ms)'] = median
  this['  '] = 0
  this['Total Count'] = count
}

// Get the median from an array of numbers.
function getMedian (args) {
  if (!args.length) return 0
  var numbers = args.slice(0).sort(function (a, b) { return a - b })
  var middle = Math.floor(numbers.length / 2)
  var isEven = numbers.length % 2 === 0
  var res = isEven ? (numbers[middle] + numbers[middle - 1]) / 2 : numbers[middle]
  return Number(res.toFixed(2))
}

// Do nothing.
function noop () {}

},{"on-performance":100}],28:[function(require,module,exports){
var pretty = require('prettier-bytes')

module.exports = storage

function storage () {
  Object.defineProperty(window.choo, 'storage', {
    get: get,
    set: noop
  })

  function get () {
    if (navigator.storage) {
      navigator.storage.estimate().then(function (estimate) {
        var value = (estimate.usage / estimate.quota).toFixed()
        clr('Max storage:', fmt(estimate.quota))
        clr('Storage used:', fmt(estimate.usage) + ' (' + value + '%)')
        navigator.storage.persisted().then(function (bool) {
          var val = bool ? 'enabled' : 'disabled'
          clr('Persistent storage:', val)
        })
      })
      return 'Calculating storage quota…'
    } else {
      var protocol = window.location.protocol
      return (/https/.test(protocol))
        ? "The Storage API is unavailable in this browser. We're sorry!"
        : 'The Storage API is unavailable. Serving this site over HTTPS might help enable it!'
    }
  }
}

function clr (msg, arg) {
  var color = '#cc99cc'
  console.log('%c' + msg, 'color: ' + color, arg)
}

function fmt (num) {
  return pretty(num).replace(' ', '')
}

function noop () {}

},{"prettier-bytes":102}],29:[function(require,module,exports){
'use strict';

/**
 * Remove a range of items from an array
 *
 * @function removeItems
 * @param {Array<*>} arr The target array
 * @param {number} startIdx The index to begin removing from (inclusive)
 * @param {number} removeCount How many items to remove
 */
function removeItems (arr, startIdx, removeCount) {
  var i, length = arr.length;

  if (startIdx >= length || removeCount <= 0 || startIdx < 0) {
    return
  }

  removeCount = (startIdx + removeCount > length ? length - startIdx : removeCount);

  var len = length - removeCount;

  for (i = startIdx; i < len; ++i) {
    arr[i] = arr[i + removeCount];
  }

  arr.length = len;
}

module.exports = removeItems;

},{}],30:[function(require,module,exports){
var onPerformance = require('on-performance')
var scheduler = require('nanoscheduler')()
var assert = require('assert')

module.exports = ChooHooks

function ChooHooks (emitter) {
  if (!(this instanceof ChooHooks)) return new ChooHooks(emitter)

  assert.equal(typeof emitter, 'object')

  this.hasWindow = typeof window !== 'undefined'
  this.hasIdleCallback = this.hasWindow && window.requestIdleCallback
  this.hasPerformance = this.hasWindow &&
    window.performance &&
    window.performance.getEntriesByName

  this.emitter = emitter
  this.listeners = {}
  this.buffer = {
    render: {},
    events: {}
  }
}

ChooHooks.prototype.on = function (name, handler) {
  this.listeners[name] = handler
}

ChooHooks.prototype.start = function () {
  var self = this
  if (this.hasPerformance) {
    window.performance.onresourcetimingbufferfull = function () {
      var listener = self.listeners['resource-timing-buffer-full']
      if (listener) listener()
    }
  }

  // TODO also handle log events
  onPerformance(function (timing) {
    if (!timing) return
    if (timing.entryType !== 'measure') return

    var eventName = timing.name
    if (/choo\.morph/.test(eventName)) {
      self.buffer.render.morph = timing
    } else if (/choo\.route/.test(eventName)) {
      self.buffer.render.route = timing
    } else if (/choo\.render/.test(eventName)) {
      self.buffer.render.render = timing
    } else if (/choo\.emit/.test(eventName) && !/log:/.test(eventName)) {
      var eventListener = self.listeners['event']
      if (eventListener) {
        var timingName = eventName.match(/choo\.emit\('(.*)'\)/)[1]
        if (timingName === 'render' || timingName === 'DOMContentLoaded') return

        var traceId = eventName.match(/\[(\d+)\]/)[1]
        var data = self.buffer.events[traceId]

        self.buffer.events[traceId] = null
        eventListener(timingName, data, timing)
      }
    }

    var rBuf = self.buffer.render
    if (rBuf.render && rBuf.route && rBuf.morph) {
      var renderListener = self.listeners['render']
      if (!renderListener) return
      var timings = {}
      while (self.buffer.render.length) {
        var _timing = self.buffer.render.pop()
        var name = _timing.name
        if (/choo\.render/.test(name)) timings.render = _timing
        else if (/choo\.morph/.test(name)) timings.morph = _timing
        else timings.route = _timing
      }
      rBuf.render = rBuf.route = rBuf.morph = void 0
      renderListener(timings)
    }
  })

  // Check if there's timings without any listeners
  // and trigger the DOMContentLoaded event.
  // If the timing API is not available, we handle all events here
  this.emitter.on('*', function (eventName, data, uuid) {
    var logLevel = /^log:(\w{4,5})/.exec(eventName)

    if (!self.hasPerformance && eventName === 'render') {
      // Render
      var renderListener = self.listeners['render']
      if (renderListener) renderListener()
    } else if (eventName === 'DOMContentLoaded') {
      // DOMContentLoaded
      self._emitLoaded()
    } else if (logLevel) {
      logLevel = logLevel[1]
      // Log:*
      var logListener = self.listeners['log:' + logLevel]
      if (logListener) {
        logListener.apply(null, Array.prototype.slice.call(arguments, 0, arguments.length - 1))
      }
    } else if (!self.emitter.listeners(eventName).length) {
      // Unhandled
      var unhandledListener = self.listeners['unhandled']
      if (unhandledListener) unhandledListener(eventName, data)
    } else if (eventName !== 'render') {
      // *
      if (self.hasPerformance) self.buffer.events[uuid] = data
    }
  })
}

// compute and log time till interactive when DOMContentLoaded event fires
ChooHooks.prototype._emitLoaded = function () {
  var self = this
  scheduler.push(function clear () {
    var listener = self.listeners['DOMContentLoaded']
    var timing = self.hasWindow && window.performance && window.performance.timing

    if (listener && timing) {
      listener({
        interactive: timing.domInteractive - timing.navigationStart,
        loaded: timing.domContentLoadedEventEnd - timing.navigationStart
      })
    }
  })
}

},{"assert":13,"nanoscheduler":95,"on-performance":100}],31:[function(require,module,exports){
var assert = require('assert')
var LRU = require('nanolru')

module.exports = ChooComponentCache

function ChooComponentCache (state, emit, lru) {
  assert.ok(this instanceof ChooComponentCache, 'ChooComponentCache should be created with `new`')

  assert.equal(typeof state, 'object', 'ChooComponentCache: state should be type object')
  assert.equal(typeof emit, 'function', 'ChooComponentCache: emit should be type function')

  if (typeof lru === 'number') this.cache = new LRU(lru)
  else this.cache = lru || new LRU(100)
  this.state = state
  this.emit = emit
}

// Get & create component instances.
ChooComponentCache.prototype.render = function (Component, id) {
  assert.equal(typeof Component, 'function', 'ChooComponentCache.render: Component should be type function')
  assert.ok(typeof id === 'string' || typeof id === 'number', 'ChooComponentCache.render: id should be type string or type number')

  var el = this.cache.get(id)
  if (!el) {
    var args = []
    for (var i = 2, len = arguments.length; i < len; i++) {
      args.push(arguments[i])
    }
    args.unshift(Component, id, this.state, this.emit)
    el = newCall.apply(newCall, args)
    this.cache.set(id, el)
  }

  return el
}

// Because you can't call `new` and `.apply()` at the same time. This is a mad
// hack, but hey it works so we gonna go for it. Whoop.
function newCall (Cls) {
  return new (Cls.bind.apply(Cls, arguments)) // eslint-disable-line
}

},{"assert":77,"nanolru":88}],32:[function(require,module,exports){
module.exports = require('nanocomponent')

},{"nanocomponent":79}],33:[function(require,module,exports){
module.exports = require('nanohtml')

},{"nanohtml":83}],34:[function(require,module,exports){
var scrollToAnchor = require('scroll-to-anchor')
var documentReady = require('document-ready')
var nanotiming = require('nanotiming')
var nanorouter = require('nanorouter')
var nanomorph = require('nanomorph')
var nanoquery = require('nanoquery')
var nanohref = require('nanohref')
var nanoraf = require('nanoraf')
var nanobus = require('nanobus')
var assert = require('assert')

var Cache = require('./component/cache')

module.exports = Choo

var HISTORY_OBJECT = {}

function Choo (opts) {
  var timing = nanotiming('choo.constructor')
  if (!(this instanceof Choo)) return new Choo(opts)
  opts = opts || {}

  assert.equal(typeof opts, 'object', 'choo: opts should be type object')

  var self = this

  // define events used by choo
  this._events = {
    DOMCONTENTLOADED: 'DOMContentLoaded',
    DOMTITLECHANGE: 'DOMTitleChange',
    REPLACESTATE: 'replaceState',
    PUSHSTATE: 'pushState',
    NAVIGATE: 'navigate',
    POPSTATE: 'popState',
    RENDER: 'render'
  }

  // properties for internal use only
  this._historyEnabled = opts.history === undefined ? true : opts.history
  this._hrefEnabled = opts.href === undefined ? true : opts.href
  this._hashEnabled = opts.hash === undefined ? false : opts.hash
  this._hasWindow = typeof window !== 'undefined'
  this._cache = opts.cache
  this._loaded = false
  this._stores = [ondomtitlechange]
  this._tree = null

  // state
  var _state = {
    events: this._events,
    components: {}
  }
  if (this._hasWindow) {
    this.state = window.initialState
      ? Object.assign({}, window.initialState, _state)
      : _state
    delete window.initialState
  } else {
    this.state = _state
  }

  // properties that are part of the API
  this.router = nanorouter({ curry: true })
  this.emitter = nanobus('choo.emit')
  this.emit = this.emitter.emit.bind(this.emitter)

  // listen for title changes; available even when calling .toString()
  if (this._hasWindow) this.state.title = document.title
  function ondomtitlechange (state) {
    self.emitter.prependListener(self._events.DOMTITLECHANGE, function (title) {
      assert.equal(typeof title, 'string', 'events.DOMTitleChange: title should be type string')
      state.title = title
      if (self._hasWindow) document.title = title
    })
  }
  timing()
}

Choo.prototype.route = function (route, handler) {
  var routeTiming = nanotiming("choo.route('" + route + "')")
  assert.equal(typeof route, 'string', 'choo.route: route should be type string')
  assert.equal(typeof handler, 'function', 'choo.handler: route should be type function')
  this.router.on(route, handler)
  routeTiming()
}

Choo.prototype.use = function (cb) {
  assert.equal(typeof cb, 'function', 'choo.use: cb should be type function')
  var self = this
  this._stores.push(function (state) {
    var msg = 'choo.use'
    msg = cb.storeName ? msg + '(' + cb.storeName + ')' : msg
    var endTiming = nanotiming(msg)
    cb(state, self.emitter, self)
    endTiming()
  })
}

Choo.prototype.start = function () {
  assert.equal(typeof window, 'object', 'choo.start: window was not found. .start() must be called in a browser, use .toString() if running in Node')
  var startTiming = nanotiming('choo.start')

  var self = this
  if (this._historyEnabled) {
    this.emitter.prependListener(this._events.NAVIGATE, function () {
      self._matchRoute(self.state)
      if (self._loaded) {
        self.emitter.emit(self._events.RENDER)
        setTimeout(scrollToAnchor.bind(null, window.location.hash), 0)
      }
    })

    this.emitter.prependListener(this._events.POPSTATE, function () {
      self.emitter.emit(self._events.NAVIGATE)
    })

    this.emitter.prependListener(this._events.PUSHSTATE, function (href) {
      assert.equal(typeof href, 'string', 'events.pushState: href should be type string')
      window.history.pushState(HISTORY_OBJECT, null, href)
      self.emitter.emit(self._events.NAVIGATE)
    })

    this.emitter.prependListener(this._events.REPLACESTATE, function (href) {
      assert.equal(typeof href, 'string', 'events.replaceState: href should be type string')
      window.history.replaceState(HISTORY_OBJECT, null, href)
      self.emitter.emit(self._events.NAVIGATE)
    })

    window.onpopstate = function () {
      self.emitter.emit(self._events.POPSTATE)
    }

    if (self._hrefEnabled) {
      nanohref(function (location) {
        var href = location.href
        var hash = location.hash
        if (href === window.location.href) {
          if (!self._hashEnabled && hash) scrollToAnchor(hash)
          return
        }
        self.emitter.emit(self._events.PUSHSTATE, href)
      })
    }
  }

  this._setCache(this.state)
  this._matchRoute(this.state)
  this._stores.forEach(function (initStore) {
    initStore(self.state)
  })

  this._tree = this._prerender(this.state)
  assert.ok(this._tree, 'choo.start: no valid DOM node returned for location ' + this.state.href)

  this.emitter.prependListener(self._events.RENDER, nanoraf(function () {
    var renderTiming = nanotiming('choo.render')
    var newTree = self._prerender(self.state)
    assert.ok(newTree, 'choo.render: no valid DOM node returned for location ' + self.state.href)

    assert.equal(self._tree.nodeName, newTree.nodeName, 'choo.render: The target node <' +
      self._tree.nodeName.toLowerCase() + '> is not the same type as the new node <' +
      newTree.nodeName.toLowerCase() + '>.')

    var morphTiming = nanotiming('choo.morph')
    nanomorph(self._tree, newTree)
    morphTiming()

    renderTiming()
  }))

  documentReady(function () {
    self.emitter.emit(self._events.DOMCONTENTLOADED)
    self._loaded = true
  })

  startTiming()
  return this._tree
}

Choo.prototype.mount = function mount (selector) {
  var mountTiming = nanotiming("choo.mount('" + selector + "')")
  if (typeof window !== 'object') {
    assert.ok(typeof selector === 'string', 'choo.mount: selector should be type String')
    this.selector = selector
    mountTiming()
    return this
  }

  assert.ok(typeof selector === 'string' || typeof selector === 'object', 'choo.mount: selector should be type String or HTMLElement')

  var self = this

  documentReady(function () {
    var renderTiming = nanotiming('choo.render')
    var newTree = self.start()
    if (typeof selector === 'string') {
      self._tree = document.querySelector(selector)
    } else {
      self._tree = selector
    }

    assert.ok(self._tree, 'choo.mount: could not query selector: ' + selector)
    assert.equal(self._tree.nodeName, newTree.nodeName, 'choo.mount: The target node <' +
      self._tree.nodeName.toLowerCase() + '> is not the same type as the new node <' +
      newTree.nodeName.toLowerCase() + '>.')

    var morphTiming = nanotiming('choo.morph')
    nanomorph(self._tree, newTree)
    morphTiming()

    renderTiming()
  })
  mountTiming()
}

Choo.prototype.toString = function (location, state) {
  state = state || {}
  state.components = state.components || {}
  state.events = Object.assign({}, state.events, this._events)

  assert.notEqual(typeof window, 'object', 'choo.mount: window was found. .toString() must be called in Node, use .start() or .mount() if running in the browser')
  assert.equal(typeof location, 'string', 'choo.toString: location should be type string')
  assert.equal(typeof state, 'object', 'choo.toString: state should be type object')

  this._setCache(state)
  this._matchRoute(state, location)
  this.emitter.removeAllListeners()
  this._stores.forEach(function (initStore) {
    initStore(state)
  })

  var html = this._prerender(state)
  assert.ok(html, 'choo.toString: no valid value returned for the route ' + location)
  assert(!Array.isArray(html), 'choo.toString: return value was an array for the route ' + location)
  return typeof html.outerHTML === 'string' ? html.outerHTML : html.toString()
}

Choo.prototype._matchRoute = function (state, locationOverride) {
  var location, queryString
  if (locationOverride) {
    location = locationOverride.replace(/\?.+$/, '').replace(/\/$/, '')
    if (!this._hashEnabled) location = location.replace(/#.+$/, '')
    queryString = locationOverride
  } else {
    location = window.location.pathname.replace(/\/$/, '')
    if (this._hashEnabled) location += window.location.hash.replace(/^#/, '/')
    queryString = window.location.search
  }
  var matched = this.router.match(location)
  this._handler = matched.cb
  state.href = location
  state.query = nanoquery(queryString)
  state.route = matched.route
  state.params = matched.params
}

Choo.prototype._prerender = function (state) {
  var routeTiming = nanotiming("choo.prerender('" + state.route + "')")
  var res = this._handler(state, this.emit)
  routeTiming()
  return res
}

Choo.prototype._setCache = function (state) {
  var cache = new Cache(state, this.emitter.emit.bind(this.emitter), this._cache)
  state.cache = renderComponent

  function renderComponent (Component, id) {
    assert.equal(typeof Component, 'function', 'choo.state.cache: Component should be type function')
    var args = []
    for (var i = 0, len = arguments.length; i < len; i++) {
      args.push(arguments[i])
    }
    return cache.render.apply(cache, args)
  }

  // When the state gets stringified, make sure `state.cache` isn't
  // stringified too.
  renderComponent.toJSON = function () {
    return null
  }
}

},{"./component/cache":31,"assert":77,"document-ready":69,"nanobus":78,"nanohref":80,"nanomorph":89,"nanoquery":92,"nanoraf":93,"nanorouter":94,"nanotiming":96,"scroll-to-anchor":105}],35:[function(require,module,exports){
/* global DOMException */

module.exports = clipboardCopy

function clipboardCopy (text) {
  // Use the Async Clipboard API when available. Requires a secure browing
  // context (i.e. HTTPS)
  if (navigator.clipboard) {
    return navigator.clipboard.writeText(text).catch(function (err) {
      throw (err !== undefined ? err : new DOMException('The request is not allowed', 'NotAllowedError'))
    })
  }

  // ...Otherwise, use document.execCommand() fallback

  // Put the text to copy into a <span>
  var span = document.createElement('span')
  span.textContent = text

  // Preserve consecutive spaces and newlines
  span.style.whiteSpace = 'pre'

  // Add the <span> to the page
  document.body.appendChild(span)

  // Make a selection object representing the range of text selected by the user
  var selection = window.getSelection()
  var range = window.document.createRange()
  selection.removeAllRanges()
  range.selectNode(span)
  selection.addRange(range)

  // Copy text to the clipboard
  var success = false
  try {
    success = window.document.execCommand('copy')
  } catch (err) {
    console.log('error', err)
  }

  // Cleanup
  selection.removeAllRanges()
  window.document.body.removeChild(span)

  return success
    ? Promise.resolve()
    : Promise.reject(new DOMException('The request is not allowed', 'NotAllowedError'))
}

},{}],36:[function(require,module,exports){
(function (Buffer){
var clone = (function() {
'use strict';

function _instanceof(obj, type) {
  return type != null && obj instanceof type;
}

var nativeMap;
try {
  nativeMap = Map;
} catch(_) {
  // maybe a reference error because no `Map`. Give it a dummy value that no
  // value will ever be an instanceof.
  nativeMap = function() {};
}

var nativeSet;
try {
  nativeSet = Set;
} catch(_) {
  nativeSet = function() {};
}

var nativePromise;
try {
  nativePromise = Promise;
} catch(_) {
  nativePromise = function() {};
}

/**
 * Clones (copies) an Object using deep copying.
 *
 * This function supports circular references by default, but if you are certain
 * there are no circular references in your object, you can save some CPU time
 * by calling clone(obj, false).
 *
 * Caution: if `circular` is false and `parent` contains circular references,
 * your program may enter an infinite loop and crash.
 *
 * @param `parent` - the object to be cloned
 * @param `circular` - set to true if the object to be cloned may contain
 *    circular references. (optional - true by default)
 * @param `depth` - set to a number if the object is only to be cloned to
 *    a particular depth. (optional - defaults to Infinity)
 * @param `prototype` - sets the prototype to be used when cloning an object.
 *    (optional - defaults to parent prototype).
 * @param `includeNonEnumerable` - set to true if the non-enumerable properties
 *    should be cloned as well. Non-enumerable properties on the prototype
 *    chain will be ignored. (optional - false by default)
*/
function clone(parent, circular, depth, prototype, includeNonEnumerable) {
  if (typeof circular === 'object') {
    depth = circular.depth;
    prototype = circular.prototype;
    includeNonEnumerable = circular.includeNonEnumerable;
    circular = circular.circular;
  }
  // maintain two arrays for circular references, where corresponding parents
  // and children have the same index
  var allParents = [];
  var allChildren = [];

  var useBuffer = typeof Buffer != 'undefined';

  if (typeof circular == 'undefined')
    circular = true;

  if (typeof depth == 'undefined')
    depth = Infinity;

  // recurse this function so we don't reset allParents and allChildren
  function _clone(parent, depth) {
    // cloning null always returns null
    if (parent === null)
      return null;

    if (depth === 0)
      return parent;

    var child;
    var proto;
    if (typeof parent != 'object') {
      return parent;
    }

    if (_instanceof(parent, nativeMap)) {
      child = new nativeMap();
    } else if (_instanceof(parent, nativeSet)) {
      child = new nativeSet();
    } else if (_instanceof(parent, nativePromise)) {
      child = new nativePromise(function (resolve, reject) {
        parent.then(function(value) {
          resolve(_clone(value, depth - 1));
        }, function(err) {
          reject(_clone(err, depth - 1));
        });
      });
    } else if (clone.__isArray(parent)) {
      child = [];
    } else if (clone.__isRegExp(parent)) {
      child = new RegExp(parent.source, __getRegExpFlags(parent));
      if (parent.lastIndex) child.lastIndex = parent.lastIndex;
    } else if (clone.__isDate(parent)) {
      child = new Date(parent.getTime());
    } else if (useBuffer && Buffer.isBuffer(parent)) {
      if (Buffer.allocUnsafe) {
        // Node.js >= 4.5.0
        child = Buffer.allocUnsafe(parent.length);
      } else {
        // Older Node.js versions
        child = new Buffer(parent.length);
      }
      parent.copy(child);
      return child;
    } else if (_instanceof(parent, Error)) {
      child = Object.create(parent);
    } else {
      if (typeof prototype == 'undefined') {
        proto = Object.getPrototypeOf(parent);
        child = Object.create(proto);
      }
      else {
        child = Object.create(prototype);
        proto = prototype;
      }
    }

    if (circular) {
      var index = allParents.indexOf(parent);

      if (index != -1) {
        return allChildren[index];
      }
      allParents.push(parent);
      allChildren.push(child);
    }

    if (_instanceof(parent, nativeMap)) {
      parent.forEach(function(value, key) {
        var keyChild = _clone(key, depth - 1);
        var valueChild = _clone(value, depth - 1);
        child.set(keyChild, valueChild);
      });
    }
    if (_instanceof(parent, nativeSet)) {
      parent.forEach(function(value) {
        var entryChild = _clone(value, depth - 1);
        child.add(entryChild);
      });
    }

    for (var i in parent) {
      var attrs;
      if (proto) {
        attrs = Object.getOwnPropertyDescriptor(proto, i);
      }

      if (attrs && attrs.set == null) {
        continue;
      }
      child[i] = _clone(parent[i], depth - 1);
    }

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(parent);
      for (var i = 0; i < symbols.length; i++) {
        // Don't need to worry about cloning a symbol because it is a primitive,
        // like a number or string.
        var symbol = symbols[i];
        var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);
        if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {
          continue;
        }
        child[symbol] = _clone(parent[symbol], depth - 1);
        if (!descriptor.enumerable) {
          Object.defineProperty(child, symbol, {
            enumerable: false
          });
        }
      }
    }

    if (includeNonEnumerable) {
      var allPropertyNames = Object.getOwnPropertyNames(parent);
      for (var i = 0; i < allPropertyNames.length; i++) {
        var propertyName = allPropertyNames[i];
        var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);
        if (descriptor && descriptor.enumerable) {
          continue;
        }
        child[propertyName] = _clone(parent[propertyName], depth - 1);
        Object.defineProperty(child, propertyName, {
          enumerable: false
        });
      }
    }

    return child;
  }

  return _clone(parent, depth);
}

/**
 * Simple flat clone using prototype, accepts only objects, usefull for property
 * override on FLAT configuration object (no nested props).
 *
 * USE WITH CAUTION! This may not behave as you wish if you do not know how this
 * works.
 */
clone.clonePrototype = function clonePrototype(parent) {
  if (parent === null)
    return null;

  var c = function () {};
  c.prototype = parent;
  return new c();
};

// private utility functions

function __objToStr(o) {
  return Object.prototype.toString.call(o);
}
clone.__objToStr = __objToStr;

function __isDate(o) {
  return typeof o === 'object' && __objToStr(o) === '[object Date]';
}
clone.__isDate = __isDate;

function __isArray(o) {
  return typeof o === 'object' && __objToStr(o) === '[object Array]';
}
clone.__isArray = __isArray;

function __isRegExp(o) {
  return typeof o === 'object' && __objToStr(o) === '[object RegExp]';
}
clone.__isRegExp = __isRegExp;

function __getRegExpFlags(re) {
  var flags = '';
  if (re.global) flags += 'g';
  if (re.ignoreCase) flags += 'i';
  if (re.multiline) flags += 'm';
  return flags;
}
clone.__getRegExpFlags = __getRegExpFlags;

return clone;
})();

if (typeof module === 'object' && module.exports) {
  module.exports = clone;
}

}).call(this,require("buffer").Buffer)
},{"buffer":20}],37:[function(require,module,exports){
// https://d3js.org/d3-array/ v1.2.4 Copyright 2018 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
typeof define === 'function' && define.amd ? define(['exports'], factory) :
(factory((global.d3 = global.d3 || {})));
}(this, (function (exports) { 'use strict';

function ascending(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}

function bisector(compare) {
  if (compare.length === 1) compare = ascendingComparator(compare);
  return {
    left: function(a, x, lo, hi) {
      if (lo == null) lo = 0;
      if (hi == null) hi = a.length;
      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a[mid], x) < 0) lo = mid + 1;
        else hi = mid;
      }
      return lo;
    },
    right: function(a, x, lo, hi) {
      if (lo == null) lo = 0;
      if (hi == null) hi = a.length;
      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a[mid], x) > 0) hi = mid;
        else lo = mid + 1;
      }
      return lo;
    }
  };
}

function ascendingComparator(f) {
  return function(d, x) {
    return ascending(f(d), x);
  };
}

var ascendingBisect = bisector(ascending);
var bisectRight = ascendingBisect.right;
var bisectLeft = ascendingBisect.left;

function pairs(array, f) {
  if (f == null) f = pair;
  var i = 0, n = array.length - 1, p = array[0], pairs = new Array(n < 0 ? 0 : n);
  while (i < n) pairs[i] = f(p, p = array[++i]);
  return pairs;
}

function pair(a, b) {
  return [a, b];
}

function cross(values0, values1, reduce) {
  var n0 = values0.length,
      n1 = values1.length,
      values = new Array(n0 * n1),
      i0,
      i1,
      i,
      value0;

  if (reduce == null) reduce = pair;

  for (i0 = i = 0; i0 < n0; ++i0) {
    for (value0 = values0[i0], i1 = 0; i1 < n1; ++i1, ++i) {
      values[i] = reduce(value0, values1[i1]);
    }
  }

  return values;
}

function descending(a, b) {
  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
}

function number(x) {
  return x === null ? NaN : +x;
}

function variance(values, valueof) {
  var n = values.length,
      m = 0,
      i = -1,
      mean = 0,
      value,
      delta,
      sum = 0;

  if (valueof == null) {
    while (++i < n) {
      if (!isNaN(value = number(values[i]))) {
        delta = value - mean;
        mean += delta / ++m;
        sum += delta * (value - mean);
      }
    }
  }

  else {
    while (++i < n) {
      if (!isNaN(value = number(valueof(values[i], i, values)))) {
        delta = value - mean;
        mean += delta / ++m;
        sum += delta * (value - mean);
      }
    }
  }

  if (m > 1) return sum / (m - 1);
}

function deviation(array, f) {
  var v = variance(array, f);
  return v ? Math.sqrt(v) : v;
}

function extent(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      min,
      max;

  if (valueof == null) {
    while (++i < n) { // Find the first comparable value.
      if ((value = values[i]) != null && value >= value) {
        min = max = value;
        while (++i < n) { // Compare the remaining values.
          if ((value = values[i]) != null) {
            if (min > value) min = value;
            if (max < value) max = value;
          }
        }
      }
    }
  }

  else {
    while (++i < n) { // Find the first comparable value.
      if ((value = valueof(values[i], i, values)) != null && value >= value) {
        min = max = value;
        while (++i < n) { // Compare the remaining values.
          if ((value = valueof(values[i], i, values)) != null) {
            if (min > value) min = value;
            if (max < value) max = value;
          }
        }
      }
    }
  }

  return [min, max];
}

var array = Array.prototype;

var slice = array.slice;
var map = array.map;

function constant(x) {
  return function() {
    return x;
  };
}

function identity(x) {
  return x;
}

function range(start, stop, step) {
  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;

  var i = -1,
      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
      range = new Array(n);

  while (++i < n) {
    range[i] = start + i * step;
  }

  return range;
}

var e10 = Math.sqrt(50),
    e5 = Math.sqrt(10),
    e2 = Math.sqrt(2);

function ticks(start, stop, count) {
  var reverse,
      i = -1,
      n,
      ticks,
      step;

  stop = +stop, start = +start, count = +count;
  if (start === stop && count > 0) return [start];
  if (reverse = stop < start) n = start, start = stop, stop = n;
  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];

  if (step > 0) {
    start = Math.ceil(start / step);
    stop = Math.floor(stop / step);
    ticks = new Array(n = Math.ceil(stop - start + 1));
    while (++i < n) ticks[i] = (start + i) * step;
  } else {
    start = Math.floor(start * step);
    stop = Math.ceil(stop * step);
    ticks = new Array(n = Math.ceil(start - stop + 1));
    while (++i < n) ticks[i] = (start - i) / step;
  }

  if (reverse) ticks.reverse();

  return ticks;
}

function tickIncrement(start, stop, count) {
  var step = (stop - start) / Math.max(0, count),
      power = Math.floor(Math.log(step) / Math.LN10),
      error = step / Math.pow(10, power);
  return power >= 0
      ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)
      : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
}

function tickStep(start, stop, count) {
  var step0 = Math.abs(stop - start) / Math.max(0, count),
      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
      error = step0 / step1;
  if (error >= e10) step1 *= 10;
  else if (error >= e5) step1 *= 5;
  else if (error >= e2) step1 *= 2;
  return stop < start ? -step1 : step1;
}

function sturges(values) {
  return Math.ceil(Math.log(values.length) / Math.LN2) + 1;
}

function histogram() {
  var value = identity,
      domain = extent,
      threshold = sturges;

  function histogram(data) {
    var i,
        n = data.length,
        x,
        values = new Array(n);

    for (i = 0; i < n; ++i) {
      values[i] = value(data[i], i, data);
    }

    var xz = domain(values),
        x0 = xz[0],
        x1 = xz[1],
        tz = threshold(values, x0, x1);

    // Convert number of thresholds into uniform thresholds.
    if (!Array.isArray(tz)) {
      tz = tickStep(x0, x1, tz);
      tz = range(Math.ceil(x0 / tz) * tz, x1, tz); // exclusive
    }

    // Remove any thresholds outside the domain.
    var m = tz.length;
    while (tz[0] <= x0) tz.shift(), --m;
    while (tz[m - 1] > x1) tz.pop(), --m;

    var bins = new Array(m + 1),
        bin;

    // Initialize bins.
    for (i = 0; i <= m; ++i) {
      bin = bins[i] = [];
      bin.x0 = i > 0 ? tz[i - 1] : x0;
      bin.x1 = i < m ? tz[i] : x1;
    }

    // Assign data to bins by value, ignoring any outside the domain.
    for (i = 0; i < n; ++i) {
      x = values[i];
      if (x0 <= x && x <= x1) {
        bins[bisectRight(tz, x, 0, m)].push(data[i]);
      }
    }

    return bins;
  }

  histogram.value = function(_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : constant(_), histogram) : value;
  };

  histogram.domain = function(_) {
    return arguments.length ? (domain = typeof _ === "function" ? _ : constant([_[0], _[1]]), histogram) : domain;
  };

  histogram.thresholds = function(_) {
    return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), histogram) : threshold;
  };

  return histogram;
}

function quantile(values, p, valueof) {
  if (valueof == null) valueof = number;
  if (!(n = values.length)) return;
  if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);
  if (p >= 1) return +valueof(values[n - 1], n - 1, values);
  var n,
      i = (n - 1) * p,
      i0 = Math.floor(i),
      value0 = +valueof(values[i0], i0, values),
      value1 = +valueof(values[i0 + 1], i0 + 1, values);
  return value0 + (value1 - value0) * (i - i0);
}

function freedmanDiaconis(values, min, max) {
  values = map.call(values, number).sort(ascending);
  return Math.ceil((max - min) / (2 * (quantile(values, 0.75) - quantile(values, 0.25)) * Math.pow(values.length, -1 / 3)));
}

function scott(values, min, max) {
  return Math.ceil((max - min) / (3.5 * deviation(values) * Math.pow(values.length, -1 / 3)));
}

function max(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      max;

  if (valueof == null) {
    while (++i < n) { // Find the first comparable value.
      if ((value = values[i]) != null && value >= value) {
        max = value;
        while (++i < n) { // Compare the remaining values.
          if ((value = values[i]) != null && value > max) {
            max = value;
          }
        }
      }
    }
  }

  else {
    while (++i < n) { // Find the first comparable value.
      if ((value = valueof(values[i], i, values)) != null && value >= value) {
        max = value;
        while (++i < n) { // Compare the remaining values.
          if ((value = valueof(values[i], i, values)) != null && value > max) {
            max = value;
          }
        }
      }
    }
  }

  return max;
}

function mean(values, valueof) {
  var n = values.length,
      m = n,
      i = -1,
      value,
      sum = 0;

  if (valueof == null) {
    while (++i < n) {
      if (!isNaN(value = number(values[i]))) sum += value;
      else --m;
    }
  }

  else {
    while (++i < n) {
      if (!isNaN(value = number(valueof(values[i], i, values)))) sum += value;
      else --m;
    }
  }

  if (m) return sum / m;
}

function median(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      numbers = [];

  if (valueof == null) {
    while (++i < n) {
      if (!isNaN(value = number(values[i]))) {
        numbers.push(value);
      }
    }
  }

  else {
    while (++i < n) {
      if (!isNaN(value = number(valueof(values[i], i, values)))) {
        numbers.push(value);
      }
    }
  }

  return quantile(numbers.sort(ascending), 0.5);
}

function merge(arrays) {
  var n = arrays.length,
      m,
      i = -1,
      j = 0,
      merged,
      array;

  while (++i < n) j += arrays[i].length;
  merged = new Array(j);

  while (--n >= 0) {
    array = arrays[n];
    m = array.length;
    while (--m >= 0) {
      merged[--j] = array[m];
    }
  }

  return merged;
}

function min(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      min;

  if (valueof == null) {
    while (++i < n) { // Find the first comparable value.
      if ((value = values[i]) != null && value >= value) {
        min = value;
        while (++i < n) { // Compare the remaining values.
          if ((value = values[i]) != null && min > value) {
            min = value;
          }
        }
      }
    }
  }

  else {
    while (++i < n) { // Find the first comparable value.
      if ((value = valueof(values[i], i, values)) != null && value >= value) {
        min = value;
        while (++i < n) { // Compare the remaining values.
          if ((value = valueof(values[i], i, values)) != null && min > value) {
            min = value;
          }
        }
      }
    }
  }

  return min;
}

function permute(array, indexes) {
  var i = indexes.length, permutes = new Array(i);
  while (i--) permutes[i] = array[indexes[i]];
  return permutes;
}

function scan(values, compare) {
  if (!(n = values.length)) return;
  var n,
      i = 0,
      j = 0,
      xi,
      xj = values[j];

  if (compare == null) compare = ascending;

  while (++i < n) {
    if (compare(xi = values[i], xj) < 0 || compare(xj, xj) !== 0) {
      xj = xi, j = i;
    }
  }

  if (compare(xj, xj) === 0) return j;
}

function shuffle(array, i0, i1) {
  var m = (i1 == null ? array.length : i1) - (i0 = i0 == null ? 0 : +i0),
      t,
      i;

  while (m) {
    i = Math.random() * m-- | 0;
    t = array[m + i0];
    array[m + i0] = array[i + i0];
    array[i + i0] = t;
  }

  return array;
}

function sum(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      sum = 0;

  if (valueof == null) {
    while (++i < n) {
      if (value = +values[i]) sum += value; // Note: zero and null are equivalent.
    }
  }

  else {
    while (++i < n) {
      if (value = +valueof(values[i], i, values)) sum += value;
    }
  }

  return sum;
}

function transpose(matrix) {
  if (!(n = matrix.length)) return [];
  for (var i = -1, m = min(matrix, length), transpose = new Array(m); ++i < m;) {
    for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {
      row[j] = matrix[j][i];
    }
  }
  return transpose;
}

function length(d) {
  return d.length;
}

function zip() {
  return transpose(arguments);
}

exports.bisect = bisectRight;
exports.bisectRight = bisectRight;
exports.bisectLeft = bisectLeft;
exports.ascending = ascending;
exports.bisector = bisector;
exports.cross = cross;
exports.descending = descending;
exports.deviation = deviation;
exports.extent = extent;
exports.histogram = histogram;
exports.thresholdFreedmanDiaconis = freedmanDiaconis;
exports.thresholdScott = scott;
exports.thresholdSturges = sturges;
exports.max = max;
exports.mean = mean;
exports.median = median;
exports.merge = merge;
exports.min = min;
exports.pairs = pairs;
exports.permute = permute;
exports.quantile = quantile;
exports.range = range;
exports.scan = scan;
exports.shuffle = shuffle;
exports.sum = sum;
exports.ticks = ticks;
exports.tickIncrement = tickIncrement;
exports.tickStep = tickStep;
exports.transpose = transpose;
exports.variance = variance;
exports.zip = zip;

Object.defineProperty(exports, '__esModule', { value: true });

})));

},{}],38:[function(require,module,exports){
// https://d3js.org/d3-axis/ v1.0.12 Copyright 2018 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
typeof define === 'function' && define.amd ? define(['exports'], factory) :
(factory((global.d3 = global.d3 || {})));
}(this, (function (exports) { 'use strict';

var slice = Array.prototype.slice;

function identity(x) {
  return x;
}

var top = 1,
    right = 2,
    bottom = 3,
    left = 4,
    epsilon = 1e-6;

function translateX(x) {
  return "translate(" + (x + 0.5) + ",0)";
}

function translateY(y) {
  return "translate(0," + (y + 0.5) + ")";
}

function number(scale) {
  return function(d) {
    return +scale(d);
  };
}

function center(scale) {
  var offset = Math.max(0, scale.bandwidth() - 1) / 2; // Adjust for 0.5px offset.
  if (scale.round()) offset = Math.round(offset);
  return function(d) {
    return +scale(d) + offset;
  };
}

function entering() {
  return !this.__axis;
}

function axis(orient, scale) {
  var tickArguments = [],
      tickValues = null,
      tickFormat = null,
      tickSizeInner = 6,
      tickSizeOuter = 6,
      tickPadding = 3,
      k = orient === top || orient === left ? -1 : 1,
      x = orient === left || orient === right ? "x" : "y",
      transform = orient === top || orient === bottom ? translateX : translateY;

  function axis(context) {
    var values = tickValues == null ? (scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain()) : tickValues,
        format = tickFormat == null ? (scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : identity) : tickFormat,
        spacing = Math.max(tickSizeInner, 0) + tickPadding,
        range = scale.range(),
        range0 = +range[0] + 0.5,
        range1 = +range[range.length - 1] + 0.5,
        position = (scale.bandwidth ? center : number)(scale.copy()),
        selection = context.selection ? context.selection() : context,
        path = selection.selectAll(".domain").data([null]),
        tick = selection.selectAll(".tick").data(values, scale).order(),
        tickExit = tick.exit(),
        tickEnter = tick.enter().append("g").attr("class", "tick"),
        line = tick.select("line"),
        text = tick.select("text");

    path = path.merge(path.enter().insert("path", ".tick")
        .attr("class", "domain")
        .attr("stroke", "currentColor"));

    tick = tick.merge(tickEnter);

    line = line.merge(tickEnter.append("line")
        .attr("stroke", "currentColor")
        .attr(x + "2", k * tickSizeInner));

    text = text.merge(tickEnter.append("text")
        .attr("fill", "currentColor")
        .attr(x, k * spacing)
        .attr("dy", orient === top ? "0em" : orient === bottom ? "0.71em" : "0.32em"));

    if (context !== selection) {
      path = path.transition(context);
      tick = tick.transition(context);
      line = line.transition(context);
      text = text.transition(context);

      tickExit = tickExit.transition(context)
          .attr("opacity", epsilon)
          .attr("transform", function(d) { return isFinite(d = position(d)) ? transform(d) : this.getAttribute("transform"); });

      tickEnter
          .attr("opacity", epsilon)
          .attr("transform", function(d) { var p = this.parentNode.__axis; return transform(p && isFinite(p = p(d)) ? p : position(d)); });
    }

    tickExit.remove();

    path
        .attr("d", orient === left || orient == right
            ? (tickSizeOuter ? "M" + k * tickSizeOuter + "," + range0 + "H0.5V" + range1 + "H" + k * tickSizeOuter : "M0.5," + range0 + "V" + range1)
            : (tickSizeOuter ? "M" + range0 + "," + k * tickSizeOuter + "V0.5H" + range1 + "V" + k * tickSizeOuter : "M" + range0 + ",0.5H" + range1));

    tick
        .attr("opacity", 1)
        .attr("transform", function(d) { return transform(position(d)); });

    line
        .attr(x + "2", k * tickSizeInner);

    text
        .attr(x, k * spacing)
        .text(format);

    selection.filter(entering)
        .attr("fill", "none")
        .attr("font-size", 10)
        .attr("font-family", "sans-serif")
        .attr("text-anchor", orient === right ? "start" : orient === left ? "end" : "middle");

    selection
        .each(function() { this.__axis = position; });
  }

  axis.scale = function(_) {
    return arguments.length ? (scale = _, axis) : scale;
  };

  axis.ticks = function() {
    return tickArguments = slice.call(arguments), axis;
  };

  axis.tickArguments = function(_) {
    return arguments.length ? (tickArguments = _ == null ? [] : slice.call(_), axis) : tickArguments.slice();
  };

  axis.tickValues = function(_) {
    return arguments.length ? (tickValues = _ == null ? null : slice.call(_), axis) : tickValues && tickValues.slice();
  };

  axis.tickFormat = function(_) {
    return arguments.length ? (tickFormat = _, axis) : tickFormat;
  };

  axis.tickSize = function(_) {
    return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis) : tickSizeInner;
  };

  axis.tickSizeInner = function(_) {
    return arguments.length ? (tickSizeInner = +_, axis) : tickSizeInner;
  };

  axis.tickSizeOuter = function(_) {
    return arguments.length ? (tickSizeOuter = +_, axis) : tickSizeOuter;
  };

  axis.tickPadding = function(_) {
    return arguments.length ? (tickPadding = +_, axis) : tickPadding;
  };

  return axis;
}

function axisTop(scale) {
  return axis(top, scale);
}

function axisRight(scale) {
  return axis(right, scale);
}

function axisBottom(scale) {
  return axis(bottom, scale);
}

function axisLeft(scale) {
  return axis(left, scale);
}

exports.axisTop = axisTop;
exports.axisRight = axisRight;
exports.axisBottom = axisBottom;
exports.axisLeft = axisLeft;

Object.defineProperty(exports, '__esModule', { value: true });

})));

},{}],39:[function(require,module,exports){
// https://d3js.org/d3-brush/ v1.1.5 Copyright 2019 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-dispatch'), require('d3-drag'), require('d3-interpolate'), require('d3-selection'), require('d3-transition')) :
typeof define === 'function' && define.amd ? define(['exports', 'd3-dispatch', 'd3-drag', 'd3-interpolate', 'd3-selection', 'd3-transition'], factory) :
(global = global || self, factory(global.d3 = global.d3 || {}, global.d3, global.d3, global.d3, global.d3, global.d3));
}(this, function (exports, d3Dispatch, d3Drag, d3Interpolate, d3Selection, d3Transition) { 'use strict';

function constant(x) {
  return function() {
    return x;
  };
}

function BrushEvent(target, type, selection) {
  this.target = target;
  this.type = type;
  this.selection = selection;
}

function nopropagation() {
  d3Selection.event.stopImmediatePropagation();
}

function noevent() {
  d3Selection.event.preventDefault();
  d3Selection.event.stopImmediatePropagation();
}

var MODE_DRAG = {name: "drag"},
    MODE_SPACE = {name: "space"},
    MODE_HANDLE = {name: "handle"},
    MODE_CENTER = {name: "center"};

function number1(e) {
  return [+e[0], +e[1]];
}

function number2(e) {
  return [number1(e[0]), number1(e[1])];
}

function toucher(identifier) {
  return function(target) {
    return d3Selection.touch(target, d3Selection.event.touches, identifier);
  };
}

var X = {
  name: "x",
  handles: ["w", "e"].map(type),
  input: function(x, e) { return x == null ? null : [[+x[0], e[0][1]], [+x[1], e[1][1]]]; },
  output: function(xy) { return xy && [xy[0][0], xy[1][0]]; }
};

var Y = {
  name: "y",
  handles: ["n", "s"].map(type),
  input: function(y, e) { return y == null ? null : [[e[0][0], +y[0]], [e[1][0], +y[1]]]; },
  output: function(xy) { return xy && [xy[0][1], xy[1][1]]; }
};

var XY = {
  name: "xy",
  handles: ["n", "w", "e", "s", "nw", "ne", "sw", "se"].map(type),
  input: function(xy) { return xy == null ? null : number2(xy); },
  output: function(xy) { return xy; }
};

var cursors = {
  overlay: "crosshair",
  selection: "move",
  n: "ns-resize",
  e: "ew-resize",
  s: "ns-resize",
  w: "ew-resize",
  nw: "nwse-resize",
  ne: "nesw-resize",
  se: "nwse-resize",
  sw: "nesw-resize"
};

var flipX = {
  e: "w",
  w: "e",
  nw: "ne",
  ne: "nw",
  se: "sw",
  sw: "se"
};

var flipY = {
  n: "s",
  s: "n",
  nw: "sw",
  ne: "se",
  se: "ne",
  sw: "nw"
};

var signsX = {
  overlay: +1,
  selection: +1,
  n: null,
  e: +1,
  s: null,
  w: -1,
  nw: -1,
  ne: +1,
  se: +1,
  sw: -1
};

var signsY = {
  overlay: +1,
  selection: +1,
  n: -1,
  e: null,
  s: +1,
  w: null,
  nw: -1,
  ne: -1,
  se: +1,
  sw: +1
};

function type(t) {
  return {type: t};
}

// Ignore right-click, since that should open the context menu.
function defaultFilter() {
  return !d3Selection.event.ctrlKey && !d3Selection.event.button;
}

function defaultExtent() {
  var svg = this.ownerSVGElement || this;
  if (svg.hasAttribute("viewBox")) {
    svg = svg.viewBox.baseVal;
    return [[svg.x, svg.y], [svg.x + svg.width, svg.y + svg.height]];
  }
  return [[0, 0], [svg.width.baseVal.value, svg.height.baseVal.value]];
}

function defaultTouchable() {
  return navigator.maxTouchPoints || ("ontouchstart" in this);
}

// Like d3.local, but with the name “__brush” rather than auto-generated.
function local(node) {
  while (!node.__brush) if (!(node = node.parentNode)) return;
  return node.__brush;
}

function empty(extent) {
  return extent[0][0] === extent[1][0]
      || extent[0][1] === extent[1][1];
}

function brushSelection(node) {
  var state = node.__brush;
  return state ? state.dim.output(state.selection) : null;
}

function brushX() {
  return brush$1(X);
}

function brushY() {
  return brush$1(Y);
}

function brush() {
  return brush$1(XY);
}

function brush$1(dim) {
  var extent = defaultExtent,
      filter = defaultFilter,
      touchable = defaultTouchable,
      keys = true,
      listeners = d3Dispatch.dispatch("start", "brush", "end"),
      handleSize = 6,
      touchending;

  function brush(group) {
    var overlay = group
        .property("__brush", initialize)
      .selectAll(".overlay")
      .data([type("overlay")]);

    overlay.enter().append("rect")
        .attr("class", "overlay")
        .attr("pointer-events", "all")
        .attr("cursor", cursors.overlay)
      .merge(overlay)
        .each(function() {
          var extent = local(this).extent;
          d3Selection.select(this)
              .attr("x", extent[0][0])
              .attr("y", extent[0][1])
              .attr("width", extent[1][0] - extent[0][0])
              .attr("height", extent[1][1] - extent[0][1]);
        });

    group.selectAll(".selection")
      .data([type("selection")])
      .enter().append("rect")
        .attr("class", "selection")
        .attr("cursor", cursors.selection)
        .attr("fill", "#777")
        .attr("fill-opacity", 0.3)
        .attr("stroke", "#fff")
        .attr("shape-rendering", "crispEdges");

    var handle = group.selectAll(".handle")
      .data(dim.handles, function(d) { return d.type; });

    handle.exit().remove();

    handle.enter().append("rect")
        .attr("class", function(d) { return "handle handle--" + d.type; })
        .attr("cursor", function(d) { return cursors[d.type]; });

    group
        .each(redraw)
        .attr("fill", "none")
        .attr("pointer-events", "all")
        .on("mousedown.brush", started)
      .filter(touchable)
        .on("touchstart.brush", started)
        .on("touchmove.brush", touchmoved)
        .on("touchend.brush touchcancel.brush", touchended)
        .style("touch-action", "none")
        .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
  }

  brush.move = function(group, selection) {
    if (group.selection) {
      group
          .on("start.brush", function() { emitter(this, arguments).beforestart().start(); })
          .on("interrupt.brush end.brush", function() { emitter(this, arguments).end(); })
          .tween("brush", function() {
            var that = this,
                state = that.__brush,
                emit = emitter(that, arguments),
                selection0 = state.selection,
                selection1 = dim.input(typeof selection === "function" ? selection.apply(this, arguments) : selection, state.extent),
                i = d3Interpolate.interpolate(selection0, selection1);

            function tween(t) {
              state.selection = t === 1 && selection1 === null ? null : i(t);
              redraw.call(that);
              emit.brush();
            }

            return selection0 !== null && selection1 !== null ? tween : tween(1);
          });
    } else {
      group
          .each(function() {
            var that = this,
                args = arguments,
                state = that.__brush,
                selection1 = dim.input(typeof selection === "function" ? selection.apply(that, args) : selection, state.extent),
                emit = emitter(that, args).beforestart();

            d3Transition.interrupt(that);
            state.selection = selection1 === null ? null : selection1;
            redraw.call(that);
            emit.start().brush().end();
          });
    }
  };

  brush.clear = function(group) {
    brush.move(group, null);
  };

  function redraw() {
    var group = d3Selection.select(this),
        selection = local(this).selection;

    if (selection) {
      group.selectAll(".selection")
          .style("display", null)
          .attr("x", selection[0][0])
          .attr("y", selection[0][1])
          .attr("width", selection[1][0] - selection[0][0])
          .attr("height", selection[1][1] - selection[0][1]);

      group.selectAll(".handle")
          .style("display", null)
          .attr("x", function(d) { return d.type[d.type.length - 1] === "e" ? selection[1][0] - handleSize / 2 : selection[0][0] - handleSize / 2; })
          .attr("y", function(d) { return d.type[0] === "s" ? selection[1][1] - handleSize / 2 : selection[0][1] - handleSize / 2; })
          .attr("width", function(d) { return d.type === "n" || d.type === "s" ? selection[1][0] - selection[0][0] + handleSize : handleSize; })
          .attr("height", function(d) { return d.type === "e" || d.type === "w" ? selection[1][1] - selection[0][1] + handleSize : handleSize; });
    }

    else {
      group.selectAll(".selection,.handle")
          .style("display", "none")
          .attr("x", null)
          .attr("y", null)
          .attr("width", null)
          .attr("height", null);
    }
  }

  function emitter(that, args, clean) {
    return (!clean && that.__brush.emitter) || new Emitter(that, args);
  }

  function Emitter(that, args) {
    this.that = that;
    this.args = args;
    this.state = that.__brush;
    this.active = 0;
  }

  Emitter.prototype = {
    beforestart: function() {
      if (++this.active === 1) this.state.emitter = this, this.starting = true;
      return this;
    },
    start: function() {
      if (this.starting) this.starting = false, this.emit("start");
      else this.emit("brush");
      return this;
    },
    brush: function() {
      this.emit("brush");
      return this;
    },
    end: function() {
      if (--this.active === 0) delete this.state.emitter, this.emit("end");
      return this;
    },
    emit: function(type) {
      d3Selection.customEvent(new BrushEvent(brush, type, dim.output(this.state.selection)), listeners.apply, listeners, [type, this.that, this.args]);
    }
  };

  function started() {
    if (touchending && !d3Selection.event.touches) return;
    if (!filter.apply(this, arguments)) return;

    var that = this,
        type = d3Selection.event.target.__data__.type,
        mode = (keys && d3Selection.event.metaKey ? type = "overlay" : type) === "selection" ? MODE_DRAG : (keys && d3Selection.event.altKey ? MODE_CENTER : MODE_HANDLE),
        signX = dim === Y ? null : signsX[type],
        signY = dim === X ? null : signsY[type],
        state = local(that),
        extent = state.extent,
        selection = state.selection,
        W = extent[0][0], w0, w1,
        N = extent[0][1], n0, n1,
        E = extent[1][0], e0, e1,
        S = extent[1][1], s0, s1,
        dx = 0,
        dy = 0,
        moving,
        shifting = signX && signY && keys && d3Selection.event.shiftKey,
        lockX,
        lockY,
        pointer = d3Selection.event.touches ? toucher(d3Selection.event.changedTouches[0].identifier) : d3Selection.mouse,
        point0 = pointer(that),
        point = point0,
        emit = emitter(that, arguments, true).beforestart();

    if (type === "overlay") {
      if (selection) moving = true;
      state.selection = selection = [
        [w0 = dim === Y ? W : point0[0], n0 = dim === X ? N : point0[1]],
        [e0 = dim === Y ? E : w0, s0 = dim === X ? S : n0]
      ];
    } else {
      w0 = selection[0][0];
      n0 = selection[0][1];
      e0 = selection[1][0];
      s0 = selection[1][1];
    }

    w1 = w0;
    n1 = n0;
    e1 = e0;
    s1 = s0;

    var group = d3Selection.select(that)
        .attr("pointer-events", "none");

    var overlay = group.selectAll(".overlay")
        .attr("cursor", cursors[type]);

    if (d3Selection.event.touches) {
      emit.moved = moved;
      emit.ended = ended;
    } else {
      var view = d3Selection.select(d3Selection.event.view)
          .on("mousemove.brush", moved, true)
          .on("mouseup.brush", ended, true);
      if (keys) view
          .on("keydown.brush", keydowned, true)
          .on("keyup.brush", keyupped, true);

      d3Drag.dragDisable(d3Selection.event.view);
    }

    nopropagation();
    d3Transition.interrupt(that);
    redraw.call(that);
    emit.start();

    function moved() {
      var point1 = pointer(that);
      if (shifting && !lockX && !lockY) {
        if (Math.abs(point1[0] - point[0]) > Math.abs(point1[1] - point[1])) lockY = true;
        else lockX = true;
      }
      point = point1;
      moving = true;
      noevent();
      move();
    }

    function move() {
      var t;

      dx = point[0] - point0[0];
      dy = point[1] - point0[1];

      switch (mode) {
        case MODE_SPACE:
        case MODE_DRAG: {
          if (signX) dx = Math.max(W - w0, Math.min(E - e0, dx)), w1 = w0 + dx, e1 = e0 + dx;
          if (signY) dy = Math.max(N - n0, Math.min(S - s0, dy)), n1 = n0 + dy, s1 = s0 + dy;
          break;
        }
        case MODE_HANDLE: {
          if (signX < 0) dx = Math.max(W - w0, Math.min(E - w0, dx)), w1 = w0 + dx, e1 = e0;
          else if (signX > 0) dx = Math.max(W - e0, Math.min(E - e0, dx)), w1 = w0, e1 = e0 + dx;
          if (signY < 0) dy = Math.max(N - n0, Math.min(S - n0, dy)), n1 = n0 + dy, s1 = s0;
          else if (signY > 0) dy = Math.max(N - s0, Math.min(S - s0, dy)), n1 = n0, s1 = s0 + dy;
          break;
        }
        case MODE_CENTER: {
          if (signX) w1 = Math.max(W, Math.min(E, w0 - dx * signX)), e1 = Math.max(W, Math.min(E, e0 + dx * signX));
          if (signY) n1 = Math.max(N, Math.min(S, n0 - dy * signY)), s1 = Math.max(N, Math.min(S, s0 + dy * signY));
          break;
        }
      }

      if (e1 < w1) {
        signX *= -1;
        t = w0, w0 = e0, e0 = t;
        t = w1, w1 = e1, e1 = t;
        if (type in flipX) overlay.attr("cursor", cursors[type = flipX[type]]);
      }

      if (s1 < n1) {
        signY *= -1;
        t = n0, n0 = s0, s0 = t;
        t = n1, n1 = s1, s1 = t;
        if (type in flipY) overlay.attr("cursor", cursors[type = flipY[type]]);
      }

      if (state.selection) selection = state.selection; // May be set by brush.move!
      if (lockX) w1 = selection[0][0], e1 = selection[1][0];
      if (lockY) n1 = selection[0][1], s1 = selection[1][1];

      if (selection[0][0] !== w1
          || selection[0][1] !== n1
          || selection[1][0] !== e1
          || selection[1][1] !== s1) {
        state.selection = [[w1, n1], [e1, s1]];
        redraw.call(that);
        emit.brush();
      }
    }

    function ended() {
      nopropagation();
      if (d3Selection.event.touches) {
        if (d3Selection.event.touches.length) return;
        if (touchending) clearTimeout(touchending);
        touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!
      } else {
        d3Drag.dragEnable(d3Selection.event.view, moving);
        view.on("keydown.brush keyup.brush mousemove.brush mouseup.brush", null);
      }
      group.attr("pointer-events", "all");
      overlay.attr("cursor", cursors.overlay);
      if (state.selection) selection = state.selection; // May be set by brush.move (on start)!
      if (empty(selection)) state.selection = null, redraw.call(that);
      emit.end();
    }

    function keydowned() {
      switch (d3Selection.event.keyCode) {
        case 16: { // SHIFT
          shifting = signX && signY;
          break;
        }
        case 18: { // ALT
          if (mode === MODE_HANDLE) {
            if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;
            if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;
            mode = MODE_CENTER;
            move();
          }
          break;
        }
        case 32: { // SPACE; takes priority over ALT
          if (mode === MODE_HANDLE || mode === MODE_CENTER) {
            if (signX < 0) e0 = e1 - dx; else if (signX > 0) w0 = w1 - dx;
            if (signY < 0) s0 = s1 - dy; else if (signY > 0) n0 = n1 - dy;
            mode = MODE_SPACE;
            overlay.attr("cursor", cursors.selection);
            move();
          }
          break;
        }
        default: return;
      }
      noevent();
    }

    function keyupped() {
      switch (d3Selection.event.keyCode) {
        case 16: { // SHIFT
          if (shifting) {
            lockX = lockY = shifting = false;
            move();
          }
          break;
        }
        case 18: { // ALT
          if (mode === MODE_CENTER) {
            if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;
            if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;
            mode = MODE_HANDLE;
            move();
          }
          break;
        }
        case 32: { // SPACE
          if (mode === MODE_SPACE) {
            if (d3Selection.event.altKey) {
              if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;
              if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;
              mode = MODE_CENTER;
            } else {
              if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;
              if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;
              mode = MODE_HANDLE;
            }
            overlay.attr("cursor", cursors[type]);
            move();
          }
          break;
        }
        default: return;
      }
      noevent();
    }
  }

  function touchmoved() {
    emitter(this, arguments).moved();
  }

  function touchended() {
    emitter(this, arguments).ended();
  }

  function initialize() {
    var state = this.__brush || {selection: null};
    state.extent = number2(extent.apply(this, arguments));
    state.dim = dim;
    return state;
  }

  brush.extent = function(_) {
    return arguments.length ? (extent = typeof _ === "function" ? _ : constant(number2(_)), brush) : extent;
  };

  brush.filter = function(_) {
    return arguments.length ? (filter = typeof _ === "function" ? _ : constant(!!_), brush) : filter;
  };

  brush.touchable = function(_) {
    return arguments.length ? (touchable = typeof _ === "function" ? _ : constant(!!_), brush) : touchable;
  };

  brush.handleSize = function(_) {
    return arguments.length ? (handleSize = +_, brush) : handleSize;
  };

  brush.keyModifiers = function(_) {
    return arguments.length ? (keys = !!_, brush) : keys;
  };

  brush.on = function() {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? brush : value;
  };

  return brush;
}

exports.brush = brush;
exports.brushSelection = brushSelection;
exports.brushX = brushX;
exports.brushY = brushY;

Object.defineProperty(exports, '__esModule', { value: true });

}));

},{"d3-dispatch":44,"d3-drag":45,"d3-interpolate":53,"d3-selection":60,"d3-transition":65}],40:[function(require,module,exports){
// https://d3js.org/d3-chord/ v1.0.6 Copyright 2018 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-array'), require('d3-path')) :
typeof define === 'function' && define.amd ? define(['exports', 'd3-array', 'd3-path'], factory) :
(factory((global.d3 = global.d3 || {}),global.d3,global.d3));
}(this, (function (exports,d3Array,d3Path) { 'use strict';

var cos = Math.cos;
var sin = Math.sin;
var pi = Math.PI;
var halfPi = pi / 2;
var tau = pi * 2;
var max = Math.max;

function compareValue(compare) {
  return function(a, b) {
    return compare(
      a.source.value + a.target.value,
      b.source.value + b.target.value
    );
  };
}

function chord() {
  var padAngle = 0,
      sortGroups = null,
      sortSubgroups = null,
      sortChords = null;

  function chord(matrix) {
    var n = matrix.length,
        groupSums = [],
        groupIndex = d3Array.range(n),
        subgroupIndex = [],
        chords = [],
        groups = chords.groups = new Array(n),
        subgroups = new Array(n * n),
        k,
        x,
        x0,
        dx,
        i,
        j;

    // Compute the sum.
    k = 0, i = -1; while (++i < n) {
      x = 0, j = -1; while (++j < n) {
        x += matrix[i][j];
      }
      groupSums.push(x);
      subgroupIndex.push(d3Array.range(n));
      k += x;
    }

    // Sort groups…
    if (sortGroups) groupIndex.sort(function(a, b) {
      return sortGroups(groupSums[a], groupSums[b]);
    });

    // Sort subgroups…
    if (sortSubgroups) subgroupIndex.forEach(function(d, i) {
      d.sort(function(a, b) {
        return sortSubgroups(matrix[i][a], matrix[i][b]);
      });
    });

    // Convert the sum to scaling factor for [0, 2pi].
    // TODO Allow start and end angle to be specified?
    // TODO Allow padding to be specified as percentage?
    k = max(0, tau - padAngle * n) / k;
    dx = k ? padAngle : tau / n;

    // Compute the start and end angle for each group and subgroup.
    // Note: Opera has a bug reordering object literal properties!
    x = 0, i = -1; while (++i < n) {
      x0 = x, j = -1; while (++j < n) {
        var di = groupIndex[i],
            dj = subgroupIndex[di][j],
            v = matrix[di][dj],
            a0 = x,
            a1 = x += v * k;
        subgroups[dj * n + di] = {
          index: di,
          subindex: dj,
          startAngle: a0,
          endAngle: a1,
          value: v
        };
      }
      groups[di] = {
        index: di,
        startAngle: x0,
        endAngle: x,
        value: groupSums[di]
      };
      x += dx;
    }

    // Generate chords for each (non-empty) subgroup-subgroup link.
    i = -1; while (++i < n) {
      j = i - 1; while (++j < n) {
        var source = subgroups[j * n + i],
            target = subgroups[i * n + j];
        if (source.value || target.value) {
          chords.push(source.value < target.value
              ? {source: target, target: source}
              : {source: source, target: target});
        }
      }
    }

    return sortChords ? chords.sort(sortChords) : chords;
  }

  chord.padAngle = function(_) {
    return arguments.length ? (padAngle = max(0, _), chord) : padAngle;
  };

  chord.sortGroups = function(_) {
    return arguments.length ? (sortGroups = _, chord) : sortGroups;
  };

  chord.sortSubgroups = function(_) {
    return arguments.length ? (sortSubgroups = _, chord) : sortSubgroups;
  };

  chord.sortChords = function(_) {
    return arguments.length ? (_ == null ? sortChords = null : (sortChords = compareValue(_))._ = _, chord) : sortChords && sortChords._;
  };

  return chord;
}

var slice = Array.prototype.slice;

function constant(x) {
  return function() {
    return x;
  };
}

function defaultSource(d) {
  return d.source;
}

function defaultTarget(d) {
  return d.target;
}

function defaultRadius(d) {
  return d.radius;
}

function defaultStartAngle(d) {
  return d.startAngle;
}

function defaultEndAngle(d) {
  return d.endAngle;
}

function ribbon() {
  var source = defaultSource,
      target = defaultTarget,
      radius = defaultRadius,
      startAngle = defaultStartAngle,
      endAngle = defaultEndAngle,
      context = null;

  function ribbon() {
    var buffer,
        argv = slice.call(arguments),
        s = source.apply(this, argv),
        t = target.apply(this, argv),
        sr = +radius.apply(this, (argv[0] = s, argv)),
        sa0 = startAngle.apply(this, argv) - halfPi,
        sa1 = endAngle.apply(this, argv) - halfPi,
        sx0 = sr * cos(sa0),
        sy0 = sr * sin(sa0),
        tr = +radius.apply(this, (argv[0] = t, argv)),
        ta0 = startAngle.apply(this, argv) - halfPi,
        ta1 = endAngle.apply(this, argv) - halfPi;

    if (!context) context = buffer = d3Path.path();

    context.moveTo(sx0, sy0);
    context.arc(0, 0, sr, sa0, sa1);
    if (sa0 !== ta0 || sa1 !== ta1) { // TODO sr !== tr?
      context.quadraticCurveTo(0, 0, tr * cos(ta0), tr * sin(ta0));
      context.arc(0, 0, tr, ta0, ta1);
    }
    context.quadraticCurveTo(0, 0, sx0, sy0);
    context.closePath();

    if (buffer) return context = null, buffer + "" || null;
  }

  ribbon.radius = function(_) {
    return arguments.length ? (radius = typeof _ === "function" ? _ : constant(+_), ribbon) : radius;
  };

  ribbon.startAngle = function(_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant(+_), ribbon) : startAngle;
  };

  ribbon.endAngle = function(_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant(+_), ribbon) : endAngle;
  };

  ribbon.source = function(_) {
    return arguments.length ? (source = _, ribbon) : source;
  };

  ribbon.target = function(_) {
    return arguments.length ? (target = _, ribbon) : target;
  };

  ribbon.context = function(_) {
    return arguments.length ? ((context = _ == null ? null : _), ribbon) : context;
  };

  return ribbon;
}

exports.chord = chord;
exports.ribbon = ribbon;

Object.defineProperty(exports, '__esModule', { value: true });

})));

},{"d3-array":37,"d3-path":54}],41:[function(require,module,exports){
// https://d3js.org/d3-collection/ v1.0.7 Copyright 2018 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
typeof define === 'function' && define.amd ? define(['exports'], factory) :
(factory((global.d3 = global.d3 || {})));
}(this, (function (exports) { 'use strict';

var prefix = "$";

function Map() {}

Map.prototype = map.prototype = {
  constructor: Map,
  has: function(key) {
    return (prefix + key) in this;
  },
  get: function(key) {
    return this[prefix + key];
  },
  set: function(key, value) {
    this[prefix + key] = value;
    return this;
  },
  remove: function(key) {
    var property = prefix + key;
    return property in this && delete this[property];
  },
  clear: function() {
    for (var property in this) if (property[0] === prefix) delete this[property];
  },
  keys: function() {
    var keys = [];
    for (var property in this) if (property[0] === prefix) keys.push(property.slice(1));
    return keys;
  },
  values: function() {
    var values = [];
    for (var property in this) if (property[0] === prefix) values.push(this[property]);
    return values;
  },
  entries: function() {
    var entries = [];
    for (var property in this) if (property[0] === prefix) entries.push({key: property.slice(1), value: this[property]});
    return entries;
  },
  size: function() {
    var size = 0;
    for (var property in this) if (property[0] === prefix) ++size;
    return size;
  },
  empty: function() {
    for (var property in this) if (property[0] === prefix) return false;
    return true;
  },
  each: function(f) {
    for (var property in this) if (property[0] === prefix) f(this[property], property.slice(1), this);
  }
};

function map(object, f) {
  var map = new Map;

  // Copy constructor.
  if (object instanceof Map) object.each(function(value, key) { map.set(key, value); });

  // Index array by numeric index or specified key function.
  else if (Array.isArray(object)) {
    var i = -1,
        n = object.length,
        o;

    if (f == null) while (++i < n) map.set(i, object[i]);
    else while (++i < n) map.set(f(o = object[i], i, object), o);
  }

  // Convert object to map.
  else if (object) for (var key in object) map.set(key, object[key]);

  return map;
}

function nest() {
  var keys = [],
      sortKeys = [],
      sortValues,
      rollup,
      nest;

  function apply(array, depth, createResult, setResult) {
    if (depth >= keys.length) {
      if (sortValues != null) array.sort(sortValues);
      return rollup != null ? rollup(array) : array;
    }

    var i = -1,
        n = array.length,
        key = keys[depth++],
        keyValue,
        value,
        valuesByKey = map(),
        values,
        result = createResult();

    while (++i < n) {
      if (values = valuesByKey.get(keyValue = key(value = array[i]) + "")) {
        values.push(value);
      } else {
        valuesByKey.set(keyValue, [value]);
      }
    }

    valuesByKey.each(function(values, key) {
      setResult(result, key, apply(values, depth, createResult, setResult));
    });

    return result;
  }

  function entries(map$$1, depth) {
    if (++depth > keys.length) return map$$1;
    var array, sortKey = sortKeys[depth - 1];
    if (rollup != null && depth >= keys.length) array = map$$1.entries();
    else array = [], map$$1.each(function(v, k) { array.push({key: k, values: entries(v, depth)}); });
    return sortKey != null ? array.sort(function(a, b) { return sortKey(a.key, b.key); }) : array;
  }

  return nest = {
    object: function(array) { return apply(array, 0, createObject, setObject); },
    map: function(array) { return apply(array, 0, createMap, setMap); },
    entries: function(array) { return entries(apply(array, 0, createMap, setMap), 0); },
    key: function(d) { keys.push(d); return nest; },
    sortKeys: function(order) { sortKeys[keys.length - 1] = order; return nest; },
    sortValues: function(order) { sortValues = order; return nest; },
    rollup: function(f) { rollup = f; return nest; }
  };
}

function createObject() {
  return {};
}

function setObject(object, key, value) {
  object[key] = value;
}

function createMap() {
  return map();
}

function setMap(map$$1, key, value) {
  map$$1.set(key, value);
}

function Set() {}

var proto = map.prototype;

Set.prototype = set.prototype = {
  constructor: Set,
  has: proto.has,
  add: function(value) {
    value += "";
    this[prefix + value] = value;
    return this;
  },
  remove: proto.remove,
  clear: proto.clear,
  values: proto.keys,
  size: proto.size,
  empty: proto.empty,
  each: proto.each
};

function set(object, f) {
  var set = new Set;

  // Copy constructor.
  if (object instanceof Set) object.each(function(value) { set.add(value); });

  // Otherwise, assume it’s an array.
  else if (object) {
    var i = -1, n = object.length;
    if (f == null) while (++i < n) set.add(object[i]);
    else while (++i < n) set.add(f(object[i], i, object));
  }

  return set;
}

function keys(map) {
  var keys = [];
  for (var key in map) keys.push(key);
  return keys;
}

function values(map) {
  var values = [];
  for (var key in map) values.push(map[key]);
  return values;
}

function entries(map) {
  var entries = [];
  for (var key in map) entries.push({key: key, value: map[key]});
  return entries;
}

exports.nest = nest;
exports.set = set;
exports.map = map;
exports.keys = keys;
exports.values = values;
exports.entries = entries;

Object.defineProperty(exports, '__esModule', { value: true });

})));

},{}],42:[function(require,module,exports){
// https://d3js.org/d3-color/ v1.4.1 Copyright 2020 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
typeof define === 'function' && define.amd ? define(['exports'], factory) :
(global = global || self, factory(global.d3 = global.d3 || {}));
}(this, function (exports) { 'use strict';

function define(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}

function extend(parent, definition) {
  var prototype = Object.create(parent.prototype);
  for (var key in definition) prototype[key] = definition[key];
  return prototype;
}

function Color() {}

var darker = 0.7;
var brighter = 1 / darker;

var reI = "\\s*([+-]?\\d+)\\s*",
    reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",
    reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",
    reHex = /^#([0-9a-f]{3,8})$/,
    reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$"),
    reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$"),
    reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$"),
    reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$"),
    reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$"),
    reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");

var named = {
  aliceblue: 0xf0f8ff,
  antiquewhite: 0xfaebd7,
  aqua: 0x00ffff,
  aquamarine: 0x7fffd4,
  azure: 0xf0ffff,
  beige: 0xf5f5dc,
  bisque: 0xffe4c4,
  black: 0x000000,
  blanchedalmond: 0xffebcd,
  blue: 0x0000ff,
  blueviolet: 0x8a2be2,
  brown: 0xa52a2a,
  burlywood: 0xdeb887,
  cadetblue: 0x5f9ea0,
  chartreuse: 0x7fff00,
  chocolate: 0xd2691e,
  coral: 0xff7f50,
  cornflowerblue: 0x6495ed,
  cornsilk: 0xfff8dc,
  crimson: 0xdc143c,
  cyan: 0x00ffff,
  darkblue: 0x00008b,
  darkcyan: 0x008b8b,
  darkgoldenrod: 0xb8860b,
  darkgray: 0xa9a9a9,
  darkgreen: 0x006400,
  darkgrey: 0xa9a9a9,
  darkkhaki: 0xbdb76b,
  darkmagenta: 0x8b008b,
  darkolivegreen: 0x556b2f,
  darkorange: 0xff8c00,
  darkorchid: 0x9932cc,
  darkred: 0x8b0000,
  darksalmon: 0xe9967a,
  darkseagreen: 0x8fbc8f,
  darkslateblue: 0x483d8b,
  darkslategray: 0x2f4f4f,
  darkslategrey: 0x2f4f4f,
  darkturquoise: 0x00ced1,
  darkviolet: 0x9400d3,
  deeppink: 0xff1493,
  deepskyblue: 0x00bfff,
  dimgray: 0x696969,
  dimgrey: 0x696969,
  dodgerblue: 0x1e90ff,
  firebrick: 0xb22222,
  floralwhite: 0xfffaf0,
  forestgreen: 0x228b22,
  fuchsia: 0xff00ff,
  gainsboro: 0xdcdcdc,
  ghostwhite: 0xf8f8ff,
  gold: 0xffd700,
  goldenrod: 0xdaa520,
  gray: 0x808080,
  green: 0x008000,
  greenyellow: 0xadff2f,
  grey: 0x808080,
  honeydew: 0xf0fff0,
  hotpink: 0xff69b4,
  indianred: 0xcd5c5c,
  indigo: 0x4b0082,
  ivory: 0xfffff0,
  khaki: 0xf0e68c,
  lavender: 0xe6e6fa,
  lavenderblush: 0xfff0f5,
  lawngreen: 0x7cfc00,
  lemonchiffon: 0xfffacd,
  lightblue: 0xadd8e6,
  lightcoral: 0xf08080,
  lightcyan: 0xe0ffff,
  lightgoldenrodyellow: 0xfafad2,
  lightgray: 0xd3d3d3,
  lightgreen: 0x90ee90,
  lightgrey: 0xd3d3d3,
  lightpink: 0xffb6c1,
  lightsalmon: 0xffa07a,
  lightseagreen: 0x20b2aa,
  lightskyblue: 0x87cefa,
  lightslategray: 0x778899,
  lightslategrey: 0x778899,
  lightsteelblue: 0xb0c4de,
  lightyellow: 0xffffe0,
  lime: 0x00ff00,
  limegreen: 0x32cd32,
  linen: 0xfaf0e6,
  magenta: 0xff00ff,
  maroon: 0x800000,
  mediumaquamarine: 0x66cdaa,
  mediumblue: 0x0000cd,
  mediumorchid: 0xba55d3,
  mediumpurple: 0x9370db,
  mediumseagreen: 0x3cb371,
  mediumslateblue: 0x7b68ee,
  mediumspringgreen: 0x00fa9a,
  mediumturquoise: 0x48d1cc,
  mediumvioletred: 0xc71585,
  midnightblue: 0x191970,
  mintcream: 0xf5fffa,
  mistyrose: 0xffe4e1,
  moccasin: 0xffe4b5,
  navajowhite: 0xffdead,
  navy: 0x000080,
  oldlace: 0xfdf5e6,
  olive: 0x808000,
  olivedrab: 0x6b8e23,
  orange: 0xffa500,
  orangered: 0xff4500,
  orchid: 0xda70d6,
  palegoldenrod: 0xeee8aa,
  palegreen: 0x98fb98,
  paleturquoise: 0xafeeee,
  palevioletred: 0xdb7093,
  papayawhip: 0xffefd5,
  peachpuff: 0xffdab9,
  peru: 0xcd853f,
  pink: 0xffc0cb,
  plum: 0xdda0dd,
  powderblue: 0xb0e0e6,
  purple: 0x800080,
  rebeccapurple: 0x663399,
  red: 0xff0000,
  rosybrown: 0xbc8f8f,
  royalblue: 0x4169e1,
  saddlebrown: 0x8b4513,
  salmon: 0xfa8072,
  sandybrown: 0xf4a460,
  seagreen: 0x2e8b57,
  seashell: 0xfff5ee,
  sienna: 0xa0522d,
  silver: 0xc0c0c0,
  skyblue: 0x87ceeb,
  slateblue: 0x6a5acd,
  slategray: 0x708090,
  slategrey: 0x708090,
  snow: 0xfffafa,
  springgreen: 0x00ff7f,
  steelblue: 0x4682b4,
  tan: 0xd2b48c,
  teal: 0x008080,
  thistle: 0xd8bfd8,
  tomato: 0xff6347,
  turquoise: 0x40e0d0,
  violet: 0xee82ee,
  wheat: 0xf5deb3,
  white: 0xffffff,
  whitesmoke: 0xf5f5f5,
  yellow: 0xffff00,
  yellowgreen: 0x9acd32
};

define(Color, color, {
  copy: function(channels) {
    return Object.assign(new this.constructor, this, channels);
  },
  displayable: function() {
    return this.rgb().displayable();
  },
  hex: color_formatHex, // Deprecated! Use color.formatHex.
  formatHex: color_formatHex,
  formatHsl: color_formatHsl,
  formatRgb: color_formatRgb,
  toString: color_formatRgb
});

function color_formatHex() {
  return this.rgb().formatHex();
}

function color_formatHsl() {
  return hslConvert(this).formatHsl();
}

function color_formatRgb() {
  return this.rgb().formatRgb();
}

function color(format) {
  var m, l;
  format = (format + "").trim().toLowerCase();
  return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000
      : l === 3 ? new Rgb((m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1) // #f00
      : l === 8 ? rgba(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000
      : l === 4 ? rgba((m >> 12 & 0xf) | (m >> 8 & 0xf0), (m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), (((m & 0xf) << 4) | (m & 0xf)) / 0xff) // #f000
      : null) // invalid hex
      : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
      : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
      : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
      : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
      : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
      : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
      : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins
      : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0)
      : null;
}

function rgbn(n) {
  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
}

function rgba(r, g, b, a) {
  if (a <= 0) r = g = b = NaN;
  return new Rgb(r, g, b, a);
}

function rgbConvert(o) {
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Rgb;
  o = o.rgb();
  return new Rgb(o.r, o.g, o.b, o.opacity);
}

function rgb(r, g, b, opacity) {
  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
}

function Rgb(r, g, b, opacity) {
  this.r = +r;
  this.g = +g;
  this.b = +b;
  this.opacity = +opacity;
}

define(Rgb, rgb, extend(Color, {
  brighter: function(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  darker: function(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  rgb: function() {
    return this;
  },
  displayable: function() {
    return (-0.5 <= this.r && this.r < 255.5)
        && (-0.5 <= this.g && this.g < 255.5)
        && (-0.5 <= this.b && this.b < 255.5)
        && (0 <= this.opacity && this.opacity <= 1);
  },
  hex: rgb_formatHex, // Deprecated! Use color.formatHex.
  formatHex: rgb_formatHex,
  formatRgb: rgb_formatRgb,
  toString: rgb_formatRgb
}));

function rgb_formatHex() {
  return "#" + hex(this.r) + hex(this.g) + hex(this.b);
}

function rgb_formatRgb() {
  var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
  return (a === 1 ? "rgb(" : "rgba(")
      + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", "
      + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", "
      + Math.max(0, Math.min(255, Math.round(this.b) || 0))
      + (a === 1 ? ")" : ", " + a + ")");
}

function hex(value) {
  value = Math.max(0, Math.min(255, Math.round(value) || 0));
  return (value < 16 ? "0" : "") + value.toString(16);
}

function hsla(h, s, l, a) {
  if (a <= 0) h = s = l = NaN;
  else if (l <= 0 || l >= 1) h = s = NaN;
  else if (s <= 0) h = NaN;
  return new Hsl(h, s, l, a);
}

function hslConvert(o) {
  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Hsl;
  if (o instanceof Hsl) return o;
  o = o.rgb();
  var r = o.r / 255,
      g = o.g / 255,
      b = o.b / 255,
      min = Math.min(r, g, b),
      max = Math.max(r, g, b),
      h = NaN,
      s = max - min,
      l = (max + min) / 2;
  if (s) {
    if (r === max) h = (g - b) / s + (g < b) * 6;
    else if (g === max) h = (b - r) / s + 2;
    else h = (r - g) / s + 4;
    s /= l < 0.5 ? max + min : 2 - max - min;
    h *= 60;
  } else {
    s = l > 0 && l < 1 ? 0 : h;
  }
  return new Hsl(h, s, l, o.opacity);
}

function hsl(h, s, l, opacity) {
  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
}

function Hsl(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}

define(Hsl, hsl, extend(Color, {
  brighter: function(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  darker: function(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  rgb: function() {
    var h = this.h % 360 + (this.h < 0) * 360,
        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
        l = this.l,
        m2 = l + (l < 0.5 ? l : 1 - l) * s,
        m1 = 2 * l - m2;
    return new Rgb(
      hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
      hsl2rgb(h, m1, m2),
      hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
      this.opacity
    );
  },
  displayable: function() {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s))
        && (0 <= this.l && this.l <= 1)
        && (0 <= this.opacity && this.opacity <= 1);
  },
  formatHsl: function() {
    var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
    return (a === 1 ? "hsl(" : "hsla(")
        + (this.h || 0) + ", "
        + (this.s || 0) * 100 + "%, "
        + (this.l || 0) * 100 + "%"
        + (a === 1 ? ")" : ", " + a + ")");
  }
}));

/* From FvD 13.37, CSS Color Module Level 3 */
function hsl2rgb(h, m1, m2) {
  return (h < 60 ? m1 + (m2 - m1) * h / 60
      : h < 180 ? m2
      : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60
      : m1) * 255;
}

var deg2rad = Math.PI / 180;
var rad2deg = 180 / Math.PI;

// https://observablehq.com/@mbostock/lab-and-rgb
var K = 18,
    Xn = 0.96422,
    Yn = 1,
    Zn = 0.82521,
    t0 = 4 / 29,
    t1 = 6 / 29,
    t2 = 3 * t1 * t1,
    t3 = t1 * t1 * t1;

function labConvert(o) {
  if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);
  if (o instanceof Hcl) return hcl2lab(o);
  if (!(o instanceof Rgb)) o = rgbConvert(o);
  var r = rgb2lrgb(o.r),
      g = rgb2lrgb(o.g),
      b = rgb2lrgb(o.b),
      y = xyz2lab((0.2225045 * r + 0.7168786 * g + 0.0606169 * b) / Yn), x, z;
  if (r === g && g === b) x = z = y; else {
    x = xyz2lab((0.4360747 * r + 0.3850649 * g + 0.1430804 * b) / Xn);
    z = xyz2lab((0.0139322 * r + 0.0971045 * g + 0.7141733 * b) / Zn);
  }
  return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);
}

function gray(l, opacity) {
  return new Lab(l, 0, 0, opacity == null ? 1 : opacity);
}

function lab(l, a, b, opacity) {
  return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);
}

function Lab(l, a, b, opacity) {
  this.l = +l;
  this.a = +a;
  this.b = +b;
  this.opacity = +opacity;
}

define(Lab, lab, extend(Color, {
  brighter: function(k) {
    return new Lab(this.l + K * (k == null ? 1 : k), this.a, this.b, this.opacity);
  },
  darker: function(k) {
    return new Lab(this.l - K * (k == null ? 1 : k), this.a, this.b, this.opacity);
  },
  rgb: function() {
    var y = (this.l + 16) / 116,
        x = isNaN(this.a) ? y : y + this.a / 500,
        z = isNaN(this.b) ? y : y - this.b / 200;
    x = Xn * lab2xyz(x);
    y = Yn * lab2xyz(y);
    z = Zn * lab2xyz(z);
    return new Rgb(
      lrgb2rgb( 3.1338561 * x - 1.6168667 * y - 0.4906146 * z),
      lrgb2rgb(-0.9787684 * x + 1.9161415 * y + 0.0334540 * z),
      lrgb2rgb( 0.0719453 * x - 0.2289914 * y + 1.4052427 * z),
      this.opacity
    );
  }
}));

function xyz2lab(t) {
  return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;
}

function lab2xyz(t) {
  return t > t1 ? t * t * t : t2 * (t - t0);
}

function lrgb2rgb(x) {
  return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
}

function rgb2lrgb(x) {
  return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
}

function hclConvert(o) {
  if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);
  if (!(o instanceof Lab)) o = labConvert(o);
  if (o.a === 0 && o.b === 0) return new Hcl(NaN, 0 < o.l && o.l < 100 ? 0 : NaN, o.l, o.opacity);
  var h = Math.atan2(o.b, o.a) * rad2deg;
  return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
}

function lch(l, c, h, opacity) {
  return arguments.length === 1 ? hclConvert(l) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
}

function hcl(h, c, l, opacity) {
  return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
}

function Hcl(h, c, l, opacity) {
  this.h = +h;
  this.c = +c;
  this.l = +l;
  this.opacity = +opacity;
}

function hcl2lab(o) {
  if (isNaN(o.h)) return new Lab(o.l, 0, 0, o.opacity);
  var h = o.h * deg2rad;
  return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
}

define(Hcl, hcl, extend(Color, {
  brighter: function(k) {
    return new Hcl(this.h, this.c, this.l + K * (k == null ? 1 : k), this.opacity);
  },
  darker: function(k) {
    return new Hcl(this.h, this.c, this.l - K * (k == null ? 1 : k), this.opacity);
  },
  rgb: function() {
    return hcl2lab(this).rgb();
  }
}));

var A = -0.14861,
    B = +1.78277,
    C = -0.29227,
    D = -0.90649,
    E = +1.97294,
    ED = E * D,
    EB = E * B,
    BC_DA = B * C - D * A;

function cubehelixConvert(o) {
  if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Rgb)) o = rgbConvert(o);
  var r = o.r / 255,
      g = o.g / 255,
      b = o.b / 255,
      l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),
      bl = b - l,
      k = (E * (g - l) - C * bl) / D,
      s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)), // NaN if l=0 or l=1
      h = s ? Math.atan2(k, bl) * rad2deg - 120 : NaN;
  return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);
}

function cubehelix(h, s, l, opacity) {
  return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);
}

function Cubehelix(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}

define(Cubehelix, cubehelix, extend(Color, {
  brighter: function(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
  },
  darker: function(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
  },
  rgb: function() {
    var h = isNaN(this.h) ? 0 : (this.h + 120) * deg2rad,
        l = +this.l,
        a = isNaN(this.s) ? 0 : this.s * l * (1 - l),
        cosh = Math.cos(h),
        sinh = Math.sin(h);
    return new Rgb(
      255 * (l + a * (A * cosh + B * sinh)),
      255 * (l + a * (C * cosh + D * sinh)),
      255 * (l + a * (E * cosh)),
      this.opacity
    );
  }
}));

exports.color = color;
exports.cubehelix = cubehelix;
exports.gray = gray;
exports.hcl = hcl;
exports.hsl = hsl;
exports.lab = lab;
exports.lch = lch;
exports.rgb = rgb;

Object.defineProperty(exports, '__esModule', { value: true });

}));

},{}],43:[function(require,module,exports){
// https://d3js.org/d3-contour/ v1.3.2 Copyright 2018 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-array')) :
typeof define === 'function' && define.amd ? define(['exports', 'd3-array'], factory) :
(factory((global.d3 = global.d3 || {}),global.d3));
}(this, (function (exports,d3Array) { 'use strict';

var array = Array.prototype;

var slice = array.slice;

function ascending(a, b) {
  return a - b;
}

function area(ring) {
  var i = 0, n = ring.length, area = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];
  while (++i < n) area += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1];
  return area;
}

function constant(x) {
  return function() {
    return x;
  };
}

function contains(ring, hole) {
  var i = -1, n = hole.length, c;
  while (++i < n) if (c = ringContains(ring, hole[i])) return c;
  return 0;
}

function ringContains(ring, point) {
  var x = point[0], y = point[1], contains = -1;
  for (var i = 0, n = ring.length, j = n - 1; i < n; j = i++) {
    var pi = ring[i], xi = pi[0], yi = pi[1], pj = ring[j], xj = pj[0], yj = pj[1];
    if (segmentContains(pi, pj, point)) return 0;
    if (((yi > y) !== (yj > y)) && ((x < (xj - xi) * (y - yi) / (yj - yi) + xi))) contains = -contains;
  }
  return contains;
}

function segmentContains(a, b, c) {
  var i; return collinear(a, b, c) && within(a[i = +(a[0] === b[0])], c[i], b[i]);
}

function collinear(a, b, c) {
  return (b[0] - a[0]) * (c[1] - a[1]) === (c[0] - a[0]) * (b[1] - a[1]);
}

function within(p, q, r) {
  return p <= q && q <= r || r <= q && q <= p;
}

function noop() {}

var cases = [
  [],
  [[[1.0, 1.5], [0.5, 1.0]]],
  [[[1.5, 1.0], [1.0, 1.5]]],
  [[[1.5, 1.0], [0.5, 1.0]]],
  [[[1.0, 0.5], [1.5, 1.0]]],
  [[[1.0, 1.5], [0.5, 1.0]], [[1.0, 0.5], [1.5, 1.0]]],
  [[[1.0, 0.5], [1.0, 1.5]]],
  [[[1.0, 0.5], [0.5, 1.0]]],
  [[[0.5, 1.0], [1.0, 0.5]]],
  [[[1.0, 1.5], [1.0, 0.5]]],
  [[[0.5, 1.0], [1.0, 0.5]], [[1.5, 1.0], [1.0, 1.5]]],
  [[[1.5, 1.0], [1.0, 0.5]]],
  [[[0.5, 1.0], [1.5, 1.0]]],
  [[[1.0, 1.5], [1.5, 1.0]]],
  [[[0.5, 1.0], [1.0, 1.5]]],
  []
];

function contours() {
  var dx = 1,
      dy = 1,
      threshold = d3Array.thresholdSturges,
      smooth = smoothLinear;

  function contours(values) {
    var tz = threshold(values);

    // Convert number of thresholds into uniform thresholds.
    if (!Array.isArray(tz)) {
      var domain = d3Array.extent(values), start = domain[0], stop = domain[1];
      tz = d3Array.tickStep(start, stop, tz);
      tz = d3Array.range(Math.floor(start / tz) * tz, Math.floor(stop / tz) * tz, tz);
    } else {
      tz = tz.slice().sort(ascending);
    }

    return tz.map(function(value) {
      return contour(values, value);
    });
  }

  // Accumulate, smooth contour rings, assign holes to exterior rings.
  // Based on https://github.com/mbostock/shapefile/blob/v0.6.2/shp/polygon.js
  function contour(values, value) {
    var polygons = [],
        holes = [];

    isorings(values, value, function(ring) {
      smooth(ring, values, value);
      if (area(ring) > 0) polygons.push([ring]);
      else holes.push(ring);
    });

    holes.forEach(function(hole) {
      for (var i = 0, n = polygons.length, polygon; i < n; ++i) {
        if (contains((polygon = polygons[i])[0], hole) !== -1) {
          polygon.push(hole);
          return;
        }
      }
    });

    return {
      type: "MultiPolygon",
      value: value,
      coordinates: polygons
    };
  }

  // Marching squares with isolines stitched into rings.
  // Based on https://github.com/topojson/topojson-client/blob/v3.0.0/src/stitch.js
  function isorings(values, value, callback) {
    var fragmentByStart = new Array,
        fragmentByEnd = new Array,
        x, y, t0, t1, t2, t3;

    // Special case for the first row (y = -1, t2 = t3 = 0).
    x = y = -1;
    t1 = values[0] >= value;
    cases[t1 << 1].forEach(stitch);
    while (++x < dx - 1) {
      t0 = t1, t1 = values[x + 1] >= value;
      cases[t0 | t1 << 1].forEach(stitch);
    }
    cases[t1 << 0].forEach(stitch);

    // General case for the intermediate rows.
    while (++y < dy - 1) {
      x = -1;
      t1 = values[y * dx + dx] >= value;
      t2 = values[y * dx] >= value;
      cases[t1 << 1 | t2 << 2].forEach(stitch);
      while (++x < dx - 1) {
        t0 = t1, t1 = values[y * dx + dx + x + 1] >= value;
        t3 = t2, t2 = values[y * dx + x + 1] >= value;
        cases[t0 | t1 << 1 | t2 << 2 | t3 << 3].forEach(stitch);
      }
      cases[t1 | t2 << 3].forEach(stitch);
    }

    // Special case for the last row (y = dy - 1, t0 = t1 = 0).
    x = -1;
    t2 = values[y * dx] >= value;
    cases[t2 << 2].forEach(stitch);
    while (++x < dx - 1) {
      t3 = t2, t2 = values[y * dx + x + 1] >= value;
      cases[t2 << 2 | t3 << 3].forEach(stitch);
    }
    cases[t2 << 3].forEach(stitch);

    function stitch(line) {
      var start = [line[0][0] + x, line[0][1] + y],
          end = [line[1][0] + x, line[1][1] + y],
          startIndex = index(start),
          endIndex = index(end),
          f, g;
      if (f = fragmentByEnd[startIndex]) {
        if (g = fragmentByStart[endIndex]) {
          delete fragmentByEnd[f.end];
          delete fragmentByStart[g.start];
          if (f === g) {
            f.ring.push(end);
            callback(f.ring);
          } else {
            fragmentByStart[f.start] = fragmentByEnd[g.end] = {start: f.start, end: g.end, ring: f.ring.concat(g.ring)};
          }
        } else {
          delete fragmentByEnd[f.end];
          f.ring.push(end);
          fragmentByEnd[f.end = endIndex] = f;
        }
      } else if (f = fragmentByStart[endIndex]) {
        if (g = fragmentByEnd[startIndex]) {
          delete fragmentByStart[f.start];
          delete fragmentByEnd[g.end];
          if (f === g) {
            f.ring.push(end);
            callback(f.ring);
          } else {
            fragmentByStart[g.start] = fragmentByEnd[f.end] = {start: g.start, end: f.end, ring: g.ring.concat(f.ring)};
          }
        } else {
          delete fragmentByStart[f.start];
          f.ring.unshift(start);
          fragmentByStart[f.start = startIndex] = f;
        }
      } else {
        fragmentByStart[startIndex] = fragmentByEnd[endIndex] = {start: startIndex, end: endIndex, ring: [start, end]};
      }
    }
  }

  function index(point) {
    return point[0] * 2 + point[1] * (dx + 1) * 4;
  }

  function smoothLinear(ring, values, value) {
    ring.forEach(function(point) {
      var x = point[0],
          y = point[1],
          xt = x | 0,
          yt = y | 0,
          v0,
          v1 = values[yt * dx + xt];
      if (x > 0 && x < dx && xt === x) {
        v0 = values[yt * dx + xt - 1];
        point[0] = x + (value - v0) / (v1 - v0) - 0.5;
      }
      if (y > 0 && y < dy && yt === y) {
        v0 = values[(yt - 1) * dx + xt];
        point[1] = y + (value - v0) / (v1 - v0) - 0.5;
      }
    });
  }

  contours.contour = contour;

  contours.size = function(_) {
    if (!arguments.length) return [dx, dy];
    var _0 = Math.ceil(_[0]), _1 = Math.ceil(_[1]);
    if (!(_0 > 0) || !(_1 > 0)) throw new Error("invalid size");
    return dx = _0, dy = _1, contours;
  };

  contours.thresholds = function(_) {
    return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), contours) : threshold;
  };

  contours.smooth = function(_) {
    return arguments.length ? (smooth = _ ? smoothLinear : noop, contours) : smooth === smoothLinear;
  };

  return contours;
}

// TODO Optimize edge cases.
// TODO Optimize index calculation.
// TODO Optimize arguments.
function blurX(source, target, r) {
  var n = source.width,
      m = source.height,
      w = (r << 1) + 1;
  for (var j = 0; j < m; ++j) {
    for (var i = 0, sr = 0; i < n + r; ++i) {
      if (i < n) {
        sr += source.data[i + j * n];
      }
      if (i >= r) {
        if (i >= w) {
          sr -= source.data[i - w + j * n];
        }
        target.data[i - r + j * n] = sr / Math.min(i + 1, n - 1 + w - i, w);
      }
    }
  }
}

// TODO Optimize edge cases.
// TODO Optimize index calculation.
// TODO Optimize arguments.
function blurY(source, target, r) {
  var n = source.width,
      m = source.height,
      w = (r << 1) + 1;
  for (var i = 0; i < n; ++i) {
    for (var j = 0, sr = 0; j < m + r; ++j) {
      if (j < m) {
        sr += source.data[i + j * n];
      }
      if (j >= r) {
        if (j >= w) {
          sr -= source.data[i + (j - w) * n];
        }
        target.data[i + (j - r) * n] = sr / Math.min(j + 1, m - 1 + w - j, w);
      }
    }
  }
}

function defaultX(d) {
  return d[0];
}

function defaultY(d) {
  return d[1];
}

function defaultWeight() {
  return 1;
}

function density() {
  var x = defaultX,
      y = defaultY,
      weight = defaultWeight,
      dx = 960,
      dy = 500,
      r = 20, // blur radius
      k = 2, // log2(grid cell size)
      o = r * 3, // grid offset, to pad for blur
      n = (dx + o * 2) >> k, // grid width
      m = (dy + o * 2) >> k, // grid height
      threshold = constant(20);

  function density(data) {
    var values0 = new Float32Array(n * m),
        values1 = new Float32Array(n * m);

    data.forEach(function(d, i, data) {
      var xi = (+x(d, i, data) + o) >> k,
          yi = (+y(d, i, data) + o) >> k,
          wi = +weight(d, i, data);
      if (xi >= 0 && xi < n && yi >= 0 && yi < m) {
        values0[xi + yi * n] += wi;
      }
    });

    // TODO Optimize.
    blurX({width: n, height: m, data: values0}, {width: n, height: m, data: values1}, r >> k);
    blurY({width: n, height: m, data: values1}, {width: n, height: m, data: values0}, r >> k);
    blurX({width: n, height: m, data: values0}, {width: n, height: m, data: values1}, r >> k);
    blurY({width: n, height: m, data: values1}, {width: n, height: m, data: values0}, r >> k);
    blurX({width: n, height: m, data: values0}, {width: n, height: m, data: values1}, r >> k);
    blurY({width: n, height: m, data: values1}, {width: n, height: m, data: values0}, r >> k);

    var tz = threshold(values0);

    // Convert number of thresholds into uniform thresholds.
    if (!Array.isArray(tz)) {
      var stop = d3Array.max(values0);
      tz = d3Array.tickStep(0, stop, tz);
      tz = d3Array.range(0, Math.floor(stop / tz) * tz, tz);
      tz.shift();
    }

    return contours()
        .thresholds(tz)
        .size([n, m])
      (values0)
        .map(transform);
  }

  function transform(geometry) {
    geometry.value *= Math.pow(2, -2 * k); // Density in points per square pixel.
    geometry.coordinates.forEach(transformPolygon);
    return geometry;
  }

  function transformPolygon(coordinates) {
    coordinates.forEach(transformRing);
  }

  function transformRing(coordinates) {
    coordinates.forEach(transformPoint);
  }

  // TODO Optimize.
  function transformPoint(coordinates) {
    coordinates[0] = coordinates[0] * Math.pow(2, k) - o;
    coordinates[1] = coordinates[1] * Math.pow(2, k) - o;
  }

  function resize() {
    o = r * 3;
    n = (dx + o * 2) >> k;
    m = (dy + o * 2) >> k;
    return density;
  }

  density.x = function(_) {
    return arguments.length ? (x = typeof _ === "function" ? _ : constant(+_), density) : x;
  };

  density.y = function(_) {
    return arguments.length ? (y = typeof _ === "function" ? _ : constant(+_), density) : y;
  };

  density.weight = function(_) {
    return arguments.length ? (weight = typeof _ === "function" ? _ : constant(+_), density) : weight;
  };

  density.size = function(_) {
    if (!arguments.length) return [dx, dy];
    var _0 = Math.ceil(_[0]), _1 = Math.ceil(_[1]);
    if (!(_0 >= 0) && !(_0 >= 0)) throw new Error("invalid size");
    return dx = _0, dy = _1, resize();
  };

  density.cellSize = function(_) {
    if (!arguments.length) return 1 << k;
    if (!((_ = +_) >= 1)) throw new Error("invalid cell size");
    return k = Math.floor(Math.log(_) / Math.LN2), resize();
  };

  density.thresholds = function(_) {
    return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), density) : threshold;
  };

  density.bandwidth = function(_) {
    if (!arguments.length) return Math.sqrt(r * (r + 1));
    if (!((_ = +_) >= 0)) throw new Error("invalid bandwidth");
    return r = Math.round((Math.sqrt(4 * _ * _ + 1) - 1) / 2), resize();
  };

  return density;
}

exports.contours = contours;
exports.contourDensity = density;

Object.defineProperty(exports, '__esModule', { value: true });

})));

},{"d3-array":37}],44:[function(require,module,exports){
// https://d3js.org/d3-dispatch/ v1.0.6 Copyright 2019 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
typeof define === 'function' && define.amd ? define(['exports'], factory) :
(global = global || self, factory(global.d3 = global.d3 || {}));
}(this, function (exports) { 'use strict';

var noop = {value: function() {}};

function dispatch() {
  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
    if (!(t = arguments[i] + "") || (t in _) || /[\s.]/.test(t)) throw new Error("illegal type: " + t);
    _[t] = [];
  }
  return new Dispatch(_);
}

function Dispatch(_) {
  this._ = _;
}

function parseTypenames(typenames, types) {
  return typenames.trim().split(/^|\s+/).map(function(t) {
    var name = "", i = t.indexOf(".");
    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
    if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);
    return {type: t, name: name};
  });
}

Dispatch.prototype = dispatch.prototype = {
  constructor: Dispatch,
  on: function(typename, callback) {
    var _ = this._,
        T = parseTypenames(typename + "", _),
        t,
        i = -1,
        n = T.length;

    // If no callback was specified, return the callback of the given type and name.
    if (arguments.length < 2) {
      while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;
      return;
    }

    // If a type was specified, set the callback for the given type and name.
    // Otherwise, if a null callback was specified, remove callbacks of the given name.
    if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);
    while (++i < n) {
      if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);
      else if (callback == null) for (t in _) _[t] = set(_[t], typename.name, null);
    }

    return this;
  },
  copy: function() {
    var copy = {}, _ = this._;
    for (var t in _) copy[t] = _[t].slice();
    return new Dispatch(copy);
  },
  call: function(type, that) {
    if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];
    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
    for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
  },
  apply: function(type, that, args) {
    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
    for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
  }
};

function get(type, name) {
  for (var i = 0, n = type.length, c; i < n; ++i) {
    if ((c = type[i]).name === name) {
      return c.value;
    }
  }
}

function set(type, name, callback) {
  for (var i = 0, n = type.length; i < n; ++i) {
    if (type[i].name === name) {
      type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));
      break;
    }
  }
  if (callback != null) type.push({name: name, value: callback});
  return type;
}

exports.dispatch = dispatch;

Object.defineProperty(exports, '__esModule', { value: true });

}));

},{}],45:[function(require,module,exports){
// https://d3js.org/d3-drag/ v1.2.5 Copyright 2019 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-dispatch'), require('d3-selection')) :
typeof define === 'function' && define.amd ? define(['exports', 'd3-dispatch', 'd3-selection'], factory) :
(global = global || self, factory(global.d3 = global.d3 || {}, global.d3, global.d3));
}(this, function (exports, d3Dispatch, d3Selection) { 'use strict';

function nopropagation() {
  d3Selection.event.stopImmediatePropagation();
}

function noevent() {
  d3Selection.event.preventDefault();
  d3Selection.event.stopImmediatePropagation();
}

function nodrag(view) {
  var root = view.document.documentElement,
      selection = d3Selection.select(view).on("dragstart.drag", noevent, true);
  if ("onselectstart" in root) {
    selection.on("selectstart.drag", noevent, true);
  } else {
    root.__noselect = root.style.MozUserSelect;
    root.style.MozUserSelect = "none";
  }
}

function yesdrag(view, noclick) {
  var root = view.document.documentElement,
      selection = d3Selection.select(view).on("dragstart.drag", null);
  if (noclick) {
    selection.on("click.drag", noevent, true);
    setTimeout(function() { selection.on("click.drag", null); }, 0);
  }
  if ("onselectstart" in root) {
    selection.on("selectstart.drag", null);
  } else {
    root.style.MozUserSelect = root.__noselect;
    delete root.__noselect;
  }
}

function constant(x) {
  return function() {
    return x;
  };
}

function DragEvent(target, type, subject, id, active, x, y, dx, dy, dispatch) {
  this.target = target;
  this.type = type;
  this.subject = subject;
  this.identifier = id;
  this.active = active;
  this.x = x;
  this.y = y;
  this.dx = dx;
  this.dy = dy;
  this._ = dispatch;
}

DragEvent.prototype.on = function() {
  var value = this._.on.apply(this._, arguments);
  return value === this._ ? this : value;
};

// Ignore right-click, since that should open the context menu.
function defaultFilter() {
  return !d3Selection.event.ctrlKey && !d3Selection.event.button;
}

function defaultContainer() {
  return this.parentNode;
}

function defaultSubject(d) {
  return d == null ? {x: d3Selection.event.x, y: d3Selection.event.y} : d;
}

function defaultTouchable() {
  return navigator.maxTouchPoints || ("ontouchstart" in this);
}

function drag() {
  var filter = defaultFilter,
      container = defaultContainer,
      subject = defaultSubject,
      touchable = defaultTouchable,
      gestures = {},
      listeners = d3Dispatch.dispatch("start", "drag", "end"),
      active = 0,
      mousedownx,
      mousedowny,
      mousemoving,
      touchending,
      clickDistance2 = 0;

  function drag(selection) {
    selection
        .on("mousedown.drag", mousedowned)
      .filter(touchable)
        .on("touchstart.drag", touchstarted)
        .on("touchmove.drag", touchmoved)
        .on("touchend.drag touchcancel.drag", touchended)
        .style("touch-action", "none")
        .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
  }

  function mousedowned() {
    if (touchending || !filter.apply(this, arguments)) return;
    var gesture = beforestart("mouse", container.apply(this, arguments), d3Selection.mouse, this, arguments);
    if (!gesture) return;
    d3Selection.select(d3Selection.event.view).on("mousemove.drag", mousemoved, true).on("mouseup.drag", mouseupped, true);
    nodrag(d3Selection.event.view);
    nopropagation();
    mousemoving = false;
    mousedownx = d3Selection.event.clientX;
    mousedowny = d3Selection.event.clientY;
    gesture("start");
  }

  function mousemoved() {
    noevent();
    if (!mousemoving) {
      var dx = d3Selection.event.clientX - mousedownx, dy = d3Selection.event.clientY - mousedowny;
      mousemoving = dx * dx + dy * dy > clickDistance2;
    }
    gestures.mouse("drag");
  }

  function mouseupped() {
    d3Selection.select(d3Selection.event.view).on("mousemove.drag mouseup.drag", null);
    yesdrag(d3Selection.event.view, mousemoving);
    noevent();
    gestures.mouse("end");
  }

  function touchstarted() {
    if (!filter.apply(this, arguments)) return;
    var touches = d3Selection.event.changedTouches,
        c = container.apply(this, arguments),
        n = touches.length, i, gesture;

    for (i = 0; i < n; ++i) {
      if (gesture = beforestart(touches[i].identifier, c, d3Selection.touch, this, arguments)) {
        nopropagation();
        gesture("start");
      }
    }
  }

  function touchmoved() {
    var touches = d3Selection.event.changedTouches,
        n = touches.length, i, gesture;

    for (i = 0; i < n; ++i) {
      if (gesture = gestures[touches[i].identifier]) {
        noevent();
        gesture("drag");
      }
    }
  }

  function touchended() {
    var touches = d3Selection.event.changedTouches,
        n = touches.length, i, gesture;

    if (touchending) clearTimeout(touchending);
    touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!
    for (i = 0; i < n; ++i) {
      if (gesture = gestures[touches[i].identifier]) {
        nopropagation();
        gesture("end");
      }
    }
  }

  function beforestart(id, container, point, that, args) {
    var p = point(container, id), s, dx, dy,
        sublisteners = listeners.copy();

    if (!d3Selection.customEvent(new DragEvent(drag, "beforestart", s, id, active, p[0], p[1], 0, 0, sublisteners), function() {
      if ((d3Selection.event.subject = s = subject.apply(that, args)) == null) return false;
      dx = s.x - p[0] || 0;
      dy = s.y - p[1] || 0;
      return true;
    })) return;

    return function gesture(type) {
      var p0 = p, n;
      switch (type) {
        case "start": gestures[id] = gesture, n = active++; break;
        case "end": delete gestures[id], --active; // nobreak
        case "drag": p = point(container, id), n = active; break;
      }
      d3Selection.customEvent(new DragEvent(drag, type, s, id, n, p[0] + dx, p[1] + dy, p[0] - p0[0], p[1] - p0[1], sublisteners), sublisteners.apply, sublisteners, [type, that, args]);
    };
  }

  drag.filter = function(_) {
    return arguments.length ? (filter = typeof _ === "function" ? _ : constant(!!_), drag) : filter;
  };

  drag.container = function(_) {
    return arguments.length ? (container = typeof _ === "function" ? _ : constant(_), drag) : container;
  };

  drag.subject = function(_) {
    return arguments.length ? (subject = typeof _ === "function" ? _ : constant(_), drag) : subject;
  };

  drag.touchable = function(_) {
    return arguments.length ? (touchable = typeof _ === "function" ? _ : constant(!!_), drag) : touchable;
  };

  drag.on = function() {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? drag : value;
  };

  drag.clickDistance = function(_) {
    return arguments.length ? (clickDistance2 = (_ = +_) * _, drag) : Math.sqrt(clickDistance2);
  };

  return drag;
}

exports.drag = drag;
exports.dragDisable = nodrag;
exports.dragEnable = yesdrag;

Object.defineProperty(exports, '__esModule', { value: true });

}));

},{"d3-dispatch":44,"d3-selection":60}],46:[function(require,module,exports){
// https://d3js.org/d3-dsv/ v1.2.0 Copyright 2019 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
typeof define === 'function' && define.amd ? define(['exports'], factory) :
(global = global || self, factory(global.d3 = global.d3 || {}));
}(this, function (exports) { 'use strict';

var EOL = {},
    EOF = {},
    QUOTE = 34,
    NEWLINE = 10,
    RETURN = 13;

function objectConverter(columns) {
  return new Function("d", "return {" + columns.map(function(name, i) {
    return JSON.stringify(name) + ": d[" + i + "] || \"\"";
  }).join(",") + "}");
}

function customConverter(columns, f) {
  var object = objectConverter(columns);
  return function(row, i) {
    return f(object(row), i, columns);
  };
}

// Compute unique columns in order of discovery.
function inferColumns(rows) {
  var columnSet = Object.create(null),
      columns = [];

  rows.forEach(function(row) {
    for (var column in row) {
      if (!(column in columnSet)) {
        columns.push(columnSet[column] = column);
      }
    }
  });

  return columns;
}

function pad(value, width) {
  var s = value + "", length = s.length;
  return length < width ? new Array(width - length + 1).join(0) + s : s;
}

function formatYear(year) {
  return year < 0 ? "-" + pad(-year, 6)
    : year > 9999 ? "+" + pad(year, 6)
    : pad(year, 4);
}

function formatDate(date) {
  var hours = date.getUTCHours(),
      minutes = date.getUTCMinutes(),
      seconds = date.getUTCSeconds(),
      milliseconds = date.getUTCMilliseconds();
  return isNaN(date) ? "Invalid Date"
      : formatYear(date.getUTCFullYear()) + "-" + pad(date.getUTCMonth() + 1, 2) + "-" + pad(date.getUTCDate(), 2)
      + (milliseconds ? "T" + pad(hours, 2) + ":" + pad(minutes, 2) + ":" + pad(seconds, 2) + "." + pad(milliseconds, 3) + "Z"
      : seconds ? "T" + pad(hours, 2) + ":" + pad(minutes, 2) + ":" + pad(seconds, 2) + "Z"
      : minutes || hours ? "T" + pad(hours, 2) + ":" + pad(minutes, 2) + "Z"
      : "");
}

function dsv(delimiter) {
  var reFormat = new RegExp("[\"" + delimiter + "\n\r]"),
      DELIMITER = delimiter.charCodeAt(0);

  function parse(text, f) {
    var convert, columns, rows = parseRows(text, function(row, i) {
      if (convert) return convert(row, i - 1);
      columns = row, convert = f ? customConverter(row, f) : objectConverter(row);
    });
    rows.columns = columns || [];
    return rows;
  }

  function parseRows(text, f) {
    var rows = [], // output rows
        N = text.length,
        I = 0, // current character index
        n = 0, // current line number
        t, // current token
        eof = N <= 0, // current token followed by EOF?
        eol = false; // current token followed by EOL?

    // Strip the trailing newline.
    if (text.charCodeAt(N - 1) === NEWLINE) --N;
    if (text.charCodeAt(N - 1) === RETURN) --N;

    function token() {
      if (eof) return EOF;
      if (eol) return eol = false, EOL;

      // Unescape quotes.
      var i, j = I, c;
      if (text.charCodeAt(j) === QUOTE) {
        while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);
        if ((i = I) >= N) eof = true;
        else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;
        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }
        return text.slice(j + 1, i - 1).replace(/""/g, "\"");
      }

      // Find next delimiter or newline.
      while (I < N) {
        if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;
        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }
        else if (c !== DELIMITER) continue;
        return text.slice(j, i);
      }

      // Return last token before EOF.
      return eof = true, text.slice(j, N);
    }

    while ((t = token()) !== EOF) {
      var row = [];
      while (t !== EOL && t !== EOF) row.push(t), t = token();
      if (f && (row = f(row, n++)) == null) continue;
      rows.push(row);
    }

    return rows;
  }

  function preformatBody(rows, columns) {
    return rows.map(function(row) {
      return columns.map(function(column) {
        return formatValue(row[column]);
      }).join(delimiter);
    });
  }

  function format(rows, columns) {
    if (columns == null) columns = inferColumns(rows);
    return [columns.map(formatValue).join(delimiter)].concat(preformatBody(rows, columns)).join("\n");
  }

  function formatBody(rows, columns) {
    if (columns == null) columns = inferColumns(rows);
    return preformatBody(rows, columns).join("\n");
  }

  function formatRows(rows) {
    return rows.map(formatRow).join("\n");
  }

  function formatRow(row) {
    return row.map(formatValue).join(delimiter);
  }

  function formatValue(value) {
    return value == null ? ""
        : value instanceof Date ? formatDate(value)
        : reFormat.test(value += "") ? "\"" + value.replace(/"/g, "\"\"") + "\""
        : value;
  }

  return {
    parse: parse,
    parseRows: parseRows,
    format: format,
    formatBody: formatBody,
    formatRows: formatRows,
    formatRow: formatRow,
    formatValue: formatValue
  };
}

var csv = dsv(",");

var csvParse = csv.parse;
var csvParseRows = csv.parseRows;
var csvFormat = csv.format;
var csvFormatBody = csv.formatBody;
var csvFormatRows = csv.formatRows;
var csvFormatRow = csv.formatRow;
var csvFormatValue = csv.formatValue;

var tsv = dsv("\t");

var tsvParse = tsv.parse;
var tsvParseRows = tsv.parseRows;
var tsvFormat = tsv.format;
var tsvFormatBody = tsv.formatBody;
var tsvFormatRows = tsv.formatRows;
var tsvFormatRow = tsv.formatRow;
var tsvFormatValue = tsv.formatValue;

function autoType(object) {
  for (var key in object) {
    var value = object[key].trim(), number, m;
    if (!value) value = null;
    else if (value === "true") value = true;
    else if (value === "false") value = false;
    else if (value === "NaN") value = NaN;
    else if (!isNaN(number = +value)) value = number;
    else if (m = value.match(/^([-+]\d{2})?\d{4}(-\d{2}(-\d{2})?)?(T\d{2}:\d{2}(:\d{2}(\.\d{3})?)?(Z|[-+]\d{2}:\d{2})?)?$/)) {
      if (fixtz && !!m[4] && !m[7]) value = value.replace(/-/g, "/").replace(/T/, " ");
      value = new Date(value);
    }
    else continue;
    object[key] = value;
  }
  return object;
}

// https://github.com/d3/d3-dsv/issues/45
var fixtz = new Date("2019-01-01T00:00").getHours() || new Date("2019-07-01T00:00").getHours();

exports.autoType = autoType;
exports.csvFormat = csvFormat;
exports.csvFormatBody = csvFormatBody;
exports.csvFormatRow = csvFormatRow;
exports.csvFormatRows = csvFormatRows;
exports.csvFormatValue = csvFormatValue;
exports.csvParse = csvParse;
exports.csvParseRows = csvParseRows;
exports.dsvFormat = dsv;
exports.tsvFormat = tsvFormat;
exports.tsvFormatBody = tsvFormatBody;
exports.tsvFormatRow = tsvFormatRow;
exports.tsvFormatRows = tsvFormatRows;
exports.tsvFormatValue = tsvFormatValue;
exports.tsvParse = tsvParse;
exports.tsvParseRows = tsvParseRows;

Object.defineProperty(exports, '__esModule', { value: true });

}));

},{}],47:[function(require,module,exports){
// https://d3js.org/d3-ease/ v1.0.6 Copyright 2019 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
typeof define === 'function' && define.amd ? define(['exports'], factory) :
(global = global || self, factory(global.d3 = global.d3 || {}));
}(this, function (exports) { 'use strict';

function linear(t) {
  return +t;
}

function quadIn(t) {
  return t * t;
}

function quadOut(t) {
  return t * (2 - t);
}

function quadInOut(t) {
  return ((t *= 2) <= 1 ? t * t : --t * (2 - t) + 1) / 2;
}

function cubicIn(t) {
  return t * t * t;
}

function cubicOut(t) {
  return --t * t * t + 1;
}

function cubicInOut(t) {
  return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
}

var exponent = 3;

var polyIn = (function custom(e) {
  e = +e;

  function polyIn(t) {
    return Math.pow(t, e);
  }

  polyIn.exponent = custom;

  return polyIn;
})(exponent);

var polyOut = (function custom(e) {
  e = +e;

  function polyOut(t) {
    return 1 - Math.pow(1 - t, e);
  }

  polyOut.exponent = custom;

  return polyOut;
})(exponent);

var polyInOut = (function custom(e) {
  e = +e;

  function polyInOut(t) {
    return ((t *= 2) <= 1 ? Math.pow(t, e) : 2 - Math.pow(2 - t, e)) / 2;
  }

  polyInOut.exponent = custom;

  return polyInOut;
})(exponent);

var pi = Math.PI,
    halfPi = pi / 2;

function sinIn(t) {
  return 1 - Math.cos(t * halfPi);
}

function sinOut(t) {
  return Math.sin(t * halfPi);
}

function sinInOut(t) {
  return (1 - Math.cos(pi * t)) / 2;
}

function expIn(t) {
  return Math.pow(2, 10 * t - 10);
}

function expOut(t) {
  return 1 - Math.pow(2, -10 * t);
}

function expInOut(t) {
  return ((t *= 2) <= 1 ? Math.pow(2, 10 * t - 10) : 2 - Math.pow(2, 10 - 10 * t)) / 2;
}

function circleIn(t) {
  return 1 - Math.sqrt(1 - t * t);
}

function circleOut(t) {
  return Math.sqrt(1 - --t * t);
}

function circleInOut(t) {
  return ((t *= 2) <= 1 ? 1 - Math.sqrt(1 - t * t) : Math.sqrt(1 - (t -= 2) * t) + 1) / 2;
}

var b1 = 4 / 11,
    b2 = 6 / 11,
    b3 = 8 / 11,
    b4 = 3 / 4,
    b5 = 9 / 11,
    b6 = 10 / 11,
    b7 = 15 / 16,
    b8 = 21 / 22,
    b9 = 63 / 64,
    b0 = 1 / b1 / b1;

function bounceIn(t) {
  return 1 - bounceOut(1 - t);
}

function bounceOut(t) {
  return (t = +t) < b1 ? b0 * t * t : t < b3 ? b0 * (t -= b2) * t + b4 : t < b6 ? b0 * (t -= b5) * t + b7 : b0 * (t -= b8) * t + b9;
}

function bounceInOut(t) {
  return ((t *= 2) <= 1 ? 1 - bounceOut(1 - t) : bounceOut(t - 1) + 1) / 2;
}

var overshoot = 1.70158;

var backIn = (function custom(s) {
  s = +s;

  function backIn(t) {
    return t * t * ((s + 1) * t - s);
  }

  backIn.overshoot = custom;

  return backIn;
})(overshoot);

var backOut = (function custom(s) {
  s = +s;

  function backOut(t) {
    return --t * t * ((s + 1) * t + s) + 1;
  }

  backOut.overshoot = custom;

  return backOut;
})(overshoot);

var backInOut = (function custom(s) {
  s = +s;

  function backInOut(t) {
    return ((t *= 2) < 1 ? t * t * ((s + 1) * t - s) : (t -= 2) * t * ((s + 1) * t + s) + 2) / 2;
  }

  backInOut.overshoot = custom;

  return backInOut;
})(overshoot);

var tau = 2 * Math.PI,
    amplitude = 1,
    period = 0.3;

var elasticIn = (function custom(a, p) {
  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

  function elasticIn(t) {
    return a * Math.pow(2, 10 * --t) * Math.sin((s - t) / p);
  }

  elasticIn.amplitude = function(a) { return custom(a, p * tau); };
  elasticIn.period = function(p) { return custom(a, p); };

  return elasticIn;
})(amplitude, period);

var elasticOut = (function custom(a, p) {
  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

  function elasticOut(t) {
    return 1 - a * Math.pow(2, -10 * (t = +t)) * Math.sin((t + s) / p);
  }

  elasticOut.amplitude = function(a) { return custom(a, p * tau); };
  elasticOut.period = function(p) { return custom(a, p); };

  return elasticOut;
})(amplitude, period);

var elasticInOut = (function custom(a, p) {
  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

  function elasticInOut(t) {
    return ((t = t * 2 - 1) < 0
        ? a * Math.pow(2, 10 * t) * Math.sin((s - t) / p)
        : 2 - a * Math.pow(2, -10 * t) * Math.sin((s + t) / p)) / 2;
  }

  elasticInOut.amplitude = function(a) { return custom(a, p * tau); };
  elasticInOut.period = function(p) { return custom(a, p); };

  return elasticInOut;
})(amplitude, period);

exports.easeBack = backInOut;
exports.easeBackIn = backIn;
exports.easeBackInOut = backInOut;
exports.easeBackOut = backOut;
exports.easeBounce = bounceOut;
exports.easeBounceIn = bounceIn;
exports.easeBounceInOut = bounceInOut;
exports.easeBounceOut = bounceOut;
exports.easeCircle = circleInOut;
exports.easeCircleIn = circleIn;
exports.easeCircleInOut = circleInOut;
exports.easeCircleOut = circleOut;
exports.easeCubic = cubicInOut;
exports.easeCubicIn = cubicIn;
exports.easeCubicInOut = cubicInOut;
exports.easeCubicOut = cubicOut;
exports.easeElastic = elasticOut;
exports.easeElasticIn = elasticIn;
exports.easeElasticInOut = elasticInOut;
exports.easeElasticOut = elasticOut;
exports.easeExp = expInOut;
exports.easeExpIn = expIn;
exports.easeExpInOut = expInOut;
exports.easeExpOut = expOut;
exports.easeLinear = linear;
exports.easePoly = polyInOut;
exports.easePolyIn = polyIn;
exports.easePolyInOut = polyInOut;
exports.easePolyOut = polyOut;
exports.easeQuad = quadInOut;
exports.easeQuadIn = quadIn;
exports.easeQuadInOut = quadInOut;
exports.easeQuadOut = quadOut;
exports.easeSin = sinInOut;
exports.easeSinIn = sinIn;
exports.easeSinInOut = sinInOut;
exports.easeSinOut = sinOut;

Object.defineProperty(exports, '__esModule', { value: true });

}));

},{}],48:[function(require,module,exports){
// https://d3js.org/d3-fetch/ v1.2.0 Copyright 2020 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-dsv')) :
typeof define === 'function' && define.amd ? define(['exports', 'd3-dsv'], factory) :
(global = global || self, factory(global.d3 = global.d3 || {}, global.d3));
}(this, function (exports, d3Dsv) { 'use strict';

function responseBlob(response) {
  if (!response.ok) throw new Error(response.status + " " + response.statusText);
  return response.blob();
}

function blob(input, init) {
  return fetch(input, init).then(responseBlob);
}

function responseArrayBuffer(response) {
  if (!response.ok) throw new Error(response.status + " " + response.statusText);
  return response.arrayBuffer();
}

function buffer(input, init) {
  return fetch(input, init).then(responseArrayBuffer);
}

function responseText(response) {
  if (!response.ok) throw new Error(response.status + " " + response.statusText);
  return response.text();
}

function text(input, init) {
  return fetch(input, init).then(responseText);
}

function dsvParse(parse) {
  return function(input, init, row) {
    if (arguments.length === 2 && typeof init === "function") row = init, init = undefined;
    return text(input, init).then(function(response) {
      return parse(response, row);
    });
  };
}

function dsv(delimiter, input, init, row) {
  if (arguments.length === 3 && typeof init === "function") row = init, init = undefined;
  var format = d3Dsv.dsvFormat(delimiter);
  return text(input, init).then(function(response) {
    return format.parse(response, row);
  });
}

var csv = dsvParse(d3Dsv.csvParse);
var tsv = dsvParse(d3Dsv.tsvParse);

function image(input, init) {
  return new Promise(function(resolve, reject) {
    var image = new Image;
    for (var key in init) image[key] = init[key];
    image.onerror = reject;
    image.onload = function() { resolve(image); };
    image.src = input;
  });
}

function responseJson(response) {
  if (!response.ok) throw new Error(response.status + " " + response.statusText);
  if (response.status === 204 || response.status === 205) return;
  return response.json();
}

function json(input, init) {
  return fetch(input, init).then(responseJson);
}

function parser(type) {
  return function(input, init)  {
    return text(input, init).then(function(text) {
      return (new DOMParser).parseFromString(text, type);
    });
  };
}

var xml = parser("application/xml");

var html = parser("text/html");

var svg = parser("image/svg+xml");

exports.blob = blob;
exports.buffer = buffer;
exports.csv = csv;
exports.dsv = dsv;
exports.html = html;
exports.image = image;
exports.json = json;
exports.svg = svg;
exports.text = text;
exports.tsv = tsv;
exports.xml = xml;

Object.defineProperty(exports, '__esModule', { value: true });

}));

},{"d3-dsv":46}],49:[function(require,module,exports){
// https://d3js.org/d3-force/ v1.2.1 Copyright 2019 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-quadtree'), require('d3-collection'), require('d3-dispatch'), require('d3-timer')) :
typeof define === 'function' && define.amd ? define(['exports', 'd3-quadtree', 'd3-collection', 'd3-dispatch', 'd3-timer'], factory) :
(factory((global.d3 = global.d3 || {}),global.d3,global.d3,global.d3,global.d3));
}(this, (function (exports,d3Quadtree,d3Collection,d3Dispatch,d3Timer) { 'use strict';

function center(x, y) {
  var nodes;

  if (x == null) x = 0;
  if (y == null) y = 0;

  function force() {
    var i,
        n = nodes.length,
        node,
        sx = 0,
        sy = 0;

    for (i = 0; i < n; ++i) {
      node = nodes[i], sx += node.x, sy += node.y;
    }

    for (sx = sx / n - x, sy = sy / n - y, i = 0; i < n; ++i) {
      node = nodes[i], node.x -= sx, node.y -= sy;
    }
  }

  force.initialize = function(_) {
    nodes = _;
  };

  force.x = function(_) {
    return arguments.length ? (x = +_, force) : x;
  };

  force.y = function(_) {
    return arguments.length ? (y = +_, force) : y;
  };

  return force;
}

function constant(x) {
  return function() {
    return x;
  };
}

function jiggle() {
  return (Math.random() - 0.5) * 1e-6;
}

function x(d) {
  return d.x + d.vx;
}

function y(d) {
  return d.y + d.vy;
}

function collide(radius) {
  var nodes,
      radii,
      strength = 1,
      iterations = 1;

  if (typeof radius !== "function") radius = constant(radius == null ? 1 : +radius);

  function force() {
    var i, n = nodes.length,
        tree,
        node,
        xi,
        yi,
        ri,
        ri2;

    for (var k = 0; k < iterations; ++k) {
      tree = d3Quadtree.quadtree(nodes, x, y).visitAfter(prepare);
      for (i = 0; i < n; ++i) {
        node = nodes[i];
        ri = radii[node.index], ri2 = ri * ri;
        xi = node.x + node.vx;
        yi = node.y + node.vy;
        tree.visit(apply);
      }
    }

    function apply(quad, x0, y0, x1, y1) {
      var data = quad.data, rj = quad.r, r = ri + rj;
      if (data) {
        if (data.index > node.index) {
          var x = xi - data.x - data.vx,
              y = yi - data.y - data.vy,
              l = x * x + y * y;
          if (l < r * r) {
            if (x === 0) x = jiggle(), l += x * x;
            if (y === 0) y = jiggle(), l += y * y;
            l = (r - (l = Math.sqrt(l))) / l * strength;
            node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));
            node.vy += (y *= l) * r;
            data.vx -= x * (r = 1 - r);
            data.vy -= y * r;
          }
        }
        return;
      }
      return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;
    }
  }

  function prepare(quad) {
    if (quad.data) return quad.r = radii[quad.data.index];
    for (var i = quad.r = 0; i < 4; ++i) {
      if (quad[i] && quad[i].r > quad.r) {
        quad.r = quad[i].r;
      }
    }
  }

  function initialize() {
    if (!nodes) return;
    var i, n = nodes.length, node;
    radii = new Array(n);
    for (i = 0; i < n; ++i) node = nodes[i], radii[node.index] = +radius(node, i, nodes);
  }

  force.initialize = function(_) {
    nodes = _;
    initialize();
  };

  force.iterations = function(_) {
    return arguments.length ? (iterations = +_, force) : iterations;
  };

  force.strength = function(_) {
    return arguments.length ? (strength = +_, force) : strength;
  };

  force.radius = function(_) {
    return arguments.length ? (radius = typeof _ === "function" ? _ : constant(+_), initialize(), force) : radius;
  };

  return force;
}

function index(d) {
  return d.index;
}

function find(nodeById, nodeId) {
  var node = nodeById.get(nodeId);
  if (!node) throw new Error("missing: " + nodeId);
  return node;
}

function link(links) {
  var id = index,
      strength = defaultStrength,
      strengths,
      distance = constant(30),
      distances,
      nodes,
      count,
      bias,
      iterations = 1;

  if (links == null) links = [];

  function defaultStrength(link) {
    return 1 / Math.min(count[link.source.index], count[link.target.index]);
  }

  function force(alpha) {
    for (var k = 0, n = links.length; k < iterations; ++k) {
      for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {
        link = links[i], source = link.source, target = link.target;
        x = target.x + target.vx - source.x - source.vx || jiggle();
        y = target.y + target.vy - source.y - source.vy || jiggle();
        l = Math.sqrt(x * x + y * y);
        l = (l - distances[i]) / l * alpha * strengths[i];
        x *= l, y *= l;
        target.vx -= x * (b = bias[i]);
        target.vy -= y * b;
        source.vx += x * (b = 1 - b);
        source.vy += y * b;
      }
    }
  }

  function initialize() {
    if (!nodes) return;

    var i,
        n = nodes.length,
        m = links.length,
        nodeById = d3Collection.map(nodes, id),
        link;

    for (i = 0, count = new Array(n); i < m; ++i) {
      link = links[i], link.index = i;
      if (typeof link.source !== "object") link.source = find(nodeById, link.source);
      if (typeof link.target !== "object") link.target = find(nodeById, link.target);
      count[link.source.index] = (count[link.source.index] || 0) + 1;
      count[link.target.index] = (count[link.target.index] || 0) + 1;
    }

    for (i = 0, bias = new Array(m); i < m; ++i) {
      link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);
    }

    strengths = new Array(m), initializeStrength();
    distances = new Array(m), initializeDistance();
  }

  function initializeStrength() {
    if (!nodes) return;

    for (var i = 0, n = links.length; i < n; ++i) {
      strengths[i] = +strength(links[i], i, links);
    }
  }

  function initializeDistance() {
    if (!nodes) return;

    for (var i = 0, n = links.length; i < n; ++i) {
      distances[i] = +distance(links[i], i, links);
    }
  }

  force.initialize = function(_) {
    nodes = _;
    initialize();
  };

  force.links = function(_) {
    return arguments.length ? (links = _, initialize(), force) : links;
  };

  force.id = function(_) {
    return arguments.length ? (id = _, force) : id;
  };

  force.iterations = function(_) {
    return arguments.length ? (iterations = +_, force) : iterations;
  };

  force.strength = function(_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : constant(+_), initializeStrength(), force) : strength;
  };

  force.distance = function(_) {
    return arguments.length ? (distance = typeof _ === "function" ? _ : constant(+_), initializeDistance(), force) : distance;
  };

  return force;
}

function x$1(d) {
  return d.x;
}

function y$1(d) {
  return d.y;
}

var initialRadius = 10,
    initialAngle = Math.PI * (3 - Math.sqrt(5));

function simulation(nodes) {
  var simulation,
      alpha = 1,
      alphaMin = 0.001,
      alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),
      alphaTarget = 0,
      velocityDecay = 0.6,
      forces = d3Collection.map(),
      stepper = d3Timer.timer(step),
      event = d3Dispatch.dispatch("tick", "end");

  if (nodes == null) nodes = [];

  function step() {
    tick();
    event.call("tick", simulation);
    if (alpha < alphaMin) {
      stepper.stop();
      event.call("end", simulation);
    }
  }

  function tick(iterations) {
    var i, n = nodes.length, node;

    if (iterations === undefined) iterations = 1;

    for (var k = 0; k < iterations; ++k) {
      alpha += (alphaTarget - alpha) * alphaDecay;

      forces.each(function (force) {
        force(alpha);
      });

      for (i = 0; i < n; ++i) {
        node = nodes[i];
        if (node.fx == null) node.x += node.vx *= velocityDecay;
        else node.x = node.fx, node.vx = 0;
        if (node.fy == null) node.y += node.vy *= velocityDecay;
        else node.y = node.fy, node.vy = 0;
      }
    }

    return simulation;
  }

  function initializeNodes() {
    for (var i = 0, n = nodes.length, node; i < n; ++i) {
      node = nodes[i], node.index = i;
      if (node.fx != null) node.x = node.fx;
      if (node.fy != null) node.y = node.fy;
      if (isNaN(node.x) || isNaN(node.y)) {
        var radius = initialRadius * Math.sqrt(i), angle = i * initialAngle;
        node.x = radius * Math.cos(angle);
        node.y = radius * Math.sin(angle);
      }
      if (isNaN(node.vx) || isNaN(node.vy)) {
        node.vx = node.vy = 0;
      }
    }
  }

  function initializeForce(force) {
    if (force.initialize) force.initialize(nodes);
    return force;
  }

  initializeNodes();

  return simulation = {
    tick: tick,

    restart: function() {
      return stepper.restart(step), simulation;
    },

    stop: function() {
      return stepper.stop(), simulation;
    },

    nodes: function(_) {
      return arguments.length ? (nodes = _, initializeNodes(), forces.each(initializeForce), simulation) : nodes;
    },

    alpha: function(_) {
      return arguments.length ? (alpha = +_, simulation) : alpha;
    },

    alphaMin: function(_) {
      return arguments.length ? (alphaMin = +_, simulation) : alphaMin;
    },

    alphaDecay: function(_) {
      return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;
    },

    alphaTarget: function(_) {
      return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;
    },

    velocityDecay: function(_) {
      return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;
    },

    force: function(name, _) {
      return arguments.length > 1 ? ((_ == null ? forces.remove(name) : forces.set(name, initializeForce(_))), simulation) : forces.get(name);
    },

    find: function(x, y, radius) {
      var i = 0,
          n = nodes.length,
          dx,
          dy,
          d2,
          node,
          closest;

      if (radius == null) radius = Infinity;
      else radius *= radius;

      for (i = 0; i < n; ++i) {
        node = nodes[i];
        dx = x - node.x;
        dy = y - node.y;
        d2 = dx * dx + dy * dy;
        if (d2 < radius) closest = node, radius = d2;
      }

      return closest;
    },

    on: function(name, _) {
      return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);
    }
  };
}

function manyBody() {
  var nodes,
      node,
      alpha,
      strength = constant(-30),
      strengths,
      distanceMin2 = 1,
      distanceMax2 = Infinity,
      theta2 = 0.81;

  function force(_) {
    var i, n = nodes.length, tree = d3Quadtree.quadtree(nodes, x$1, y$1).visitAfter(accumulate);
    for (alpha = _, i = 0; i < n; ++i) node = nodes[i], tree.visit(apply);
  }

  function initialize() {
    if (!nodes) return;
    var i, n = nodes.length, node;
    strengths = new Array(n);
    for (i = 0; i < n; ++i) node = nodes[i], strengths[node.index] = +strength(node, i, nodes);
  }

  function accumulate(quad) {
    var strength = 0, q, c, weight = 0, x, y, i;

    // For internal nodes, accumulate forces from child quadrants.
    if (quad.length) {
      for (x = y = i = 0; i < 4; ++i) {
        if ((q = quad[i]) && (c = Math.abs(q.value))) {
          strength += q.value, weight += c, x += c * q.x, y += c * q.y;
        }
      }
      quad.x = x / weight;
      quad.y = y / weight;
    }

    // For leaf nodes, accumulate forces from coincident quadrants.
    else {
      q = quad;
      q.x = q.data.x;
      q.y = q.data.y;
      do strength += strengths[q.data.index];
      while (q = q.next);
    }

    quad.value = strength;
  }

  function apply(quad, x1, _, x2) {
    if (!quad.value) return true;

    var x = quad.x - node.x,
        y = quad.y - node.y,
        w = x2 - x1,
        l = x * x + y * y;

    // Apply the Barnes-Hut approximation if possible.
    // Limit forces for very close nodes; randomize direction if coincident.
    if (w * w / theta2 < l) {
      if (l < distanceMax2) {
        if (x === 0) x = jiggle(), l += x * x;
        if (y === 0) y = jiggle(), l += y * y;
        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
        node.vx += x * quad.value * alpha / l;
        node.vy += y * quad.value * alpha / l;
      }
      return true;
    }

    // Otherwise, process points directly.
    else if (quad.length || l >= distanceMax2) return;

    // Limit forces for very close nodes; randomize direction if coincident.
    if (quad.data !== node || quad.next) {
      if (x === 0) x = jiggle(), l += x * x;
      if (y === 0) y = jiggle(), l += y * y;
      if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
    }

    do if (quad.data !== node) {
      w = strengths[quad.data.index] * alpha / l;
      node.vx += x * w;
      node.vy += y * w;
    } while (quad = quad.next);
  }

  force.initialize = function(_) {
    nodes = _;
    initialize();
  };

  force.strength = function(_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : constant(+_), initialize(), force) : strength;
  };

  force.distanceMin = function(_) {
    return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);
  };

  force.distanceMax = function(_) {
    return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);
  };

  force.theta = function(_) {
    return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);
  };

  return force;
}

function radial(radius, x, y) {
  var nodes,
      strength = constant(0.1),
      strengths,
      radiuses;

  if (typeof radius !== "function") radius = constant(+radius);
  if (x == null) x = 0;
  if (y == null) y = 0;

  function force(alpha) {
    for (var i = 0, n = nodes.length; i < n; ++i) {
      var node = nodes[i],
          dx = node.x - x || 1e-6,
          dy = node.y - y || 1e-6,
          r = Math.sqrt(dx * dx + dy * dy),
          k = (radiuses[i] - r) * strengths[i] * alpha / r;
      node.vx += dx * k;
      node.vy += dy * k;
    }
  }

  function initialize() {
    if (!nodes) return;
    var i, n = nodes.length;
    strengths = new Array(n);
    radiuses = new Array(n);
    for (i = 0; i < n; ++i) {
      radiuses[i] = +radius(nodes[i], i, nodes);
      strengths[i] = isNaN(radiuses[i]) ? 0 : +strength(nodes[i], i, nodes);
    }
  }

  force.initialize = function(_) {
    nodes = _, initialize();
  };

  force.strength = function(_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : constant(+_), initialize(), force) : strength;
  };

  force.radius = function(_) {
    return arguments.length ? (radius = typeof _ === "function" ? _ : constant(+_), initialize(), force) : radius;
  };

  force.x = function(_) {
    return arguments.length ? (x = +_, force) : x;
  };

  force.y = function(_) {
    return arguments.length ? (y = +_, force) : y;
  };

  return force;
}

function x$2(x) {
  var strength = constant(0.1),
      nodes,
      strengths,
      xz;

  if (typeof x !== "function") x = constant(x == null ? 0 : +x);

  function force(alpha) {
    for (var i = 0, n = nodes.length, node; i < n; ++i) {
      node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;
    }
  }

  function initialize() {
    if (!nodes) return;
    var i, n = nodes.length;
    strengths = new Array(n);
    xz = new Array(n);
    for (i = 0; i < n; ++i) {
      strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
    }
  }

  force.initialize = function(_) {
    nodes = _;
    initialize();
  };

  force.strength = function(_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : constant(+_), initialize(), force) : strength;
  };

  force.x = function(_) {
    return arguments.length ? (x = typeof _ === "function" ? _ : constant(+_), initialize(), force) : x;
  };

  return force;
}

function y$2(y) {
  var strength = constant(0.1),
      nodes,
      strengths,
      yz;

  if (typeof y !== "function") y = constant(y == null ? 0 : +y);

  function force(alpha) {
    for (var i = 0, n = nodes.length, node; i < n; ++i) {
      node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;
    }
  }

  function initialize() {
    if (!nodes) return;
    var i, n = nodes.length;
    strengths = new Array(n);
    yz = new Array(n);
    for (i = 0; i < n; ++i) {
      strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
    }
  }

  force.initialize = function(_) {
    nodes = _;
    initialize();
  };

  force.strength = function(_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : constant(+_), initialize(), force) : strength;
  };

  force.y = function(_) {
    return arguments.length ? (y = typeof _ === "function" ? _ : constant(+_), initialize(), force) : y;
  };

  return force;
}

exports.forceCenter = center;
exports.forceCollide = collide;
exports.forceLink = link;
exports.forceManyBody = manyBody;
exports.forceRadial = radial;
exports.forceSimulation = simulation;
exports.forceX = x$2;
exports.forceY = y$2;

Object.defineProperty(exports, '__esModule', { value: true });

})));

},{"d3-collection":41,"d3-dispatch":44,"d3-quadtree":56,"d3-timer":64}],50:[function(require,module,exports){
// https://d3js.org/d3-format/ v1.4.4 Copyright 2020 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
typeof define === 'function' && define.amd ? define(['exports'], factory) :
(global = global || self, factory(global.d3 = global.d3 || {}));
}(this, function (exports) { 'use strict';

// Computes the decimal coefficient and exponent of the specified number x with
// significant digits p, where x is positive and p is in [1, 21] or undefined.
// For example, formatDecimal(1.23) returns ["123", 0].
function formatDecimal(x, p) {
  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity
  var i, coefficient = x.slice(0, i);

  // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
  // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).
  return [
    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
    +x.slice(i + 1)
  ];
}

function exponent(x) {
  return x = formatDecimal(Math.abs(x)), x ? x[1] : NaN;
}

function formatGroup(grouping, thousands) {
  return function(value, width) {
    var i = value.length,
        t = [],
        j = 0,
        g = grouping[0],
        length = 0;

    while (i > 0 && g > 0) {
      if (length + g + 1 > width) g = Math.max(1, width - length);
      t.push(value.substring(i -= g, i + g));
      if ((length += g + 1) > width) break;
      g = grouping[j = (j + 1) % grouping.length];
    }

    return t.reverse().join(thousands);
  };
}

function formatNumerals(numerals) {
  return function(value) {
    return value.replace(/[0-9]/g, function(i) {
      return numerals[+i];
    });
  };
}

// [[fill]align][sign][symbol][0][width][,][.precision][~][type]
var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;

function formatSpecifier(specifier) {
  if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
  var match;
  return new FormatSpecifier({
    fill: match[1],
    align: match[2],
    sign: match[3],
    symbol: match[4],
    zero: match[5],
    width: match[6],
    comma: match[7],
    precision: match[8] && match[8].slice(1),
    trim: match[9],
    type: match[10]
  });
}

formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof

function FormatSpecifier(specifier) {
  this.fill = specifier.fill === undefined ? " " : specifier.fill + "";
  this.align = specifier.align === undefined ? ">" : specifier.align + "";
  this.sign = specifier.sign === undefined ? "-" : specifier.sign + "";
  this.symbol = specifier.symbol === undefined ? "" : specifier.symbol + "";
  this.zero = !!specifier.zero;
  this.width = specifier.width === undefined ? undefined : +specifier.width;
  this.comma = !!specifier.comma;
  this.precision = specifier.precision === undefined ? undefined : +specifier.precision;
  this.trim = !!specifier.trim;
  this.type = specifier.type === undefined ? "" : specifier.type + "";
}

FormatSpecifier.prototype.toString = function() {
  return this.fill
      + this.align
      + this.sign
      + this.symbol
      + (this.zero ? "0" : "")
      + (this.width === undefined ? "" : Math.max(1, this.width | 0))
      + (this.comma ? "," : "")
      + (this.precision === undefined ? "" : "." + Math.max(0, this.precision | 0))
      + (this.trim ? "~" : "")
      + this.type;
};

// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.
function formatTrim(s) {
  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
    switch (s[i]) {
      case ".": i0 = i1 = i; break;
      case "0": if (i0 === 0) i0 = i; i1 = i; break;
      default: if (!+s[i]) break out; if (i0 > 0) i0 = 0; break;
    }
  }
  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
}

var prefixExponent;

function formatPrefixAuto(x, p) {
  var d = formatDecimal(x, p);
  if (!d) return x + "";
  var coefficient = d[0],
      exponent = d[1],
      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
      n = coefficient.length;
  return i === n ? coefficient
      : i > n ? coefficient + new Array(i - n + 1).join("0")
      : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i)
      : "0." + new Array(1 - i).join("0") + formatDecimal(x, Math.max(0, p + i - 1))[0]; // less than 1y!
}

function formatRounded(x, p) {
  var d = formatDecimal(x, p);
  if (!d) return x + "";
  var coefficient = d[0],
      exponent = d[1];
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient
      : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1)
      : coefficient + new Array(exponent - coefficient.length + 2).join("0");
}

var formatTypes = {
  "%": function(x, p) { return (x * 100).toFixed(p); },
  "b": function(x) { return Math.round(x).toString(2); },
  "c": function(x) { return x + ""; },
  "d": function(x) { return Math.round(x).toString(10); },
  "e": function(x, p) { return x.toExponential(p); },
  "f": function(x, p) { return x.toFixed(p); },
  "g": function(x, p) { return x.toPrecision(p); },
  "o": function(x) { return Math.round(x).toString(8); },
  "p": function(x, p) { return formatRounded(x * 100, p); },
  "r": formatRounded,
  "s": formatPrefixAuto,
  "X": function(x) { return Math.round(x).toString(16).toUpperCase(); },
  "x": function(x) { return Math.round(x).toString(16); }
};

function identity(x) {
  return x;
}

var map = Array.prototype.map,
    prefixes = ["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];

function formatLocale(locale) {
  var group = locale.grouping === undefined || locale.thousands === undefined ? identity : formatGroup(map.call(locale.grouping, Number), locale.thousands + ""),
      currencyPrefix = locale.currency === undefined ? "" : locale.currency[0] + "",
      currencySuffix = locale.currency === undefined ? "" : locale.currency[1] + "",
      decimal = locale.decimal === undefined ? "." : locale.decimal + "",
      numerals = locale.numerals === undefined ? identity : formatNumerals(map.call(locale.numerals, String)),
      percent = locale.percent === undefined ? "%" : locale.percent + "",
      minus = locale.minus === undefined ? "-" : locale.minus + "",
      nan = locale.nan === undefined ? "NaN" : locale.nan + "";

  function newFormat(specifier) {
    specifier = formatSpecifier(specifier);

    var fill = specifier.fill,
        align = specifier.align,
        sign = specifier.sign,
        symbol = specifier.symbol,
        zero = specifier.zero,
        width = specifier.width,
        comma = specifier.comma,
        precision = specifier.precision,
        trim = specifier.trim,
        type = specifier.type;

    // The "n" type is an alias for ",g".
    if (type === "n") comma = true, type = "g";

    // The "" type, and any invalid type, is an alias for ".12~g".
    else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = "g";

    // If zero fill is specified, padding goes after sign and before digits.
    if (zero || (fill === "0" && align === "=")) zero = true, fill = "0", align = "=";

    // Compute the prefix and suffix.
    // For SI-prefix, the suffix is lazily computed.
    var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
        suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";

    // What format function should we use?
    // Is this an integer type?
    // Can this type generate exponential notation?
    var formatType = formatTypes[type],
        maybeSuffix = /[defgprs%]/.test(type);

    // Set the default precision if not specified,
    // or clamp the specified precision to the supported range.
    // For significant precision, it must be in [1, 21].
    // For fixed precision, it must be in [0, 20].
    precision = precision === undefined ? 6
        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))
        : Math.max(0, Math.min(20, precision));

    function format(value) {
      var valuePrefix = prefix,
          valueSuffix = suffix,
          i, n, c;

      if (type === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value;

        // Determine the sign. -0 is not less than 0, but 1 / -0 is!
        var valueNegative = value < 0 || 1 / value < 0;

        // Perform the initial formatting.
        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);

        // Trim insignificant zeros.
        if (trim) value = formatTrim(value);

        // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.
        if (valueNegative && +value === 0 && sign !== "+") valueNegative = false;

        // Compute the prefix and suffix.
        valuePrefix = (valueNegative ? (sign === "(" ? sign : minus) : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
        valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : "");

        // Break the formatted value into the integer “value” part that can be
        // grouped, and fractional or exponential “suffix” part that is not.
        if (maybeSuffix) {
          i = -1, n = value.length;
          while (++i < n) {
            if (c = value.charCodeAt(i), 48 > c || c > 57) {
              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
              value = value.slice(0, i);
              break;
            }
          }
        }
      }

      // If the fill character is not "0", grouping is applied before padding.
      if (comma && !zero) value = group(value, Infinity);

      // Compute the padding.
      var length = valuePrefix.length + value.length + valueSuffix.length,
          padding = length < width ? new Array(width - length + 1).join(fill) : "";

      // If the fill character is "0", grouping is applied after padding.
      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";

      // Reconstruct the final output based on the desired alignment.
      switch (align) {
        case "<": value = valuePrefix + value + valueSuffix + padding; break;
        case "=": value = valuePrefix + padding + value + valueSuffix; break;
        case "^": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;
        default: value = padding + valuePrefix + value + valueSuffix; break;
      }

      return numerals(value);
    }

    format.toString = function() {
      return specifier + "";
    };

    return format;
  }

  function formatPrefix(specifier, value) {
    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)),
        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,
        k = Math.pow(10, -e),
        prefix = prefixes[8 + e / 3];
    return function(value) {
      return f(k * value) + prefix;
    };
  }

  return {
    format: newFormat,
    formatPrefix: formatPrefix
  };
}

var locale;

defaultLocale({
  decimal: ".",
  thousands: ",",
  grouping: [3],
  currency: ["$", ""],
  minus: "-"
});

function defaultLocale(definition) {
  locale = formatLocale(definition);
  exports.format = locale.format;
  exports.formatPrefix = locale.formatPrefix;
  return locale;
}

function precisionFixed(step) {
  return Math.max(0, -exponent(Math.abs(step)));
}

function precisionPrefix(step, value) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));
}

function precisionRound(step, max) {
  step = Math.abs(step), max = Math.abs(max) - step;
  return Math.max(0, exponent(max) - exponent(step)) + 1;
}

exports.FormatSpecifier = FormatSpecifier;
exports.formatDefaultLocale = defaultLocale;
exports.formatLocale = formatLocale;
exports.formatSpecifier = formatSpecifier;
exports.precisionFixed = precisionFixed;
exports.precisionPrefix = precisionPrefix;
exports.precisionRound = precisionRound;

Object.defineProperty(exports, '__esModule', { value: true });

}));

},{}],51:[function(require,module,exports){
// https://d3js.org/d3-geo/ v1.12.1 Copyright 2020 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-array')) :
typeof define === 'function' && define.amd ? define(['exports', 'd3-array'], factory) :
(global = global || self, factory(global.d3 = global.d3 || {}, global.d3));
}(this, (function (exports, d3Array) { 'use strict';

// Adds floating point numbers with twice the normal precision.
// Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and
// Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)
// 305–363 (1997).
// Code adapted from GeographicLib by Charles F. F. Karney,
// http://geographiclib.sourceforge.net/

function adder() {
  return new Adder;
}

function Adder() {
  this.reset();
}

Adder.prototype = {
  constructor: Adder,
  reset: function() {
    this.s = // rounded value
    this.t = 0; // exact error
  },
  add: function(y) {
    add(temp, y, this.t);
    add(this, temp.s, this.s);
    if (this.s) this.t += temp.t;
    else this.s = temp.t;
  },
  valueOf: function() {
    return this.s;
  }
};

var temp = new Adder;

function add(adder, a, b) {
  var x = adder.s = a + b,
      bv = x - a,
      av = x - bv;
  adder.t = (a - av) + (b - bv);
}

var epsilon = 1e-6;
var epsilon2 = 1e-12;
var pi = Math.PI;
var halfPi = pi / 2;
var quarterPi = pi / 4;
var tau = pi * 2;

var degrees = 180 / pi;
var radians = pi / 180;

var abs = Math.abs;
var atan = Math.atan;
var atan2 = Math.atan2;
var cos = Math.cos;
var ceil = Math.ceil;
var exp = Math.exp;
var log = Math.log;
var pow = Math.pow;
var sin = Math.sin;
var sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };
var sqrt = Math.sqrt;
var tan = Math.tan;

function acos(x) {
  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
}

function asin(x) {
  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);
}

function haversin(x) {
  return (x = sin(x / 2)) * x;
}

function noop() {}

function streamGeometry(geometry, stream) {
  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
    streamGeometryType[geometry.type](geometry, stream);
  }
}

var streamObjectType = {
  Feature: function(object, stream) {
    streamGeometry(object.geometry, stream);
  },
  FeatureCollection: function(object, stream) {
    var features = object.features, i = -1, n = features.length;
    while (++i < n) streamGeometry(features[i].geometry, stream);
  }
};

var streamGeometryType = {
  Sphere: function(object, stream) {
    stream.sphere();
  },
  Point: function(object, stream) {
    object = object.coordinates;
    stream.point(object[0], object[1], object[2]);
  },
  MultiPoint: function(object, stream) {
    var coordinates = object.coordinates, i = -1, n = coordinates.length;
    while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);
  },
  LineString: function(object, stream) {
    streamLine(object.coordinates, stream, 0);
  },
  MultiLineString: function(object, stream) {
    var coordinates = object.coordinates, i = -1, n = coordinates.length;
    while (++i < n) streamLine(coordinates[i], stream, 0);
  },
  Polygon: function(object, stream) {
    streamPolygon(object.coordinates, stream);
  },
  MultiPolygon: function(object, stream) {
    var coordinates = object.coordinates, i = -1, n = coordinates.length;
    while (++i < n) streamPolygon(coordinates[i], stream);
  },
  GeometryCollection: function(object, stream) {
    var geometries = object.geometries, i = -1, n = geometries.length;
    while (++i < n) streamGeometry(geometries[i], stream);
  }
};

function streamLine(coordinates, stream, closed) {
  var i = -1, n = coordinates.length - closed, coordinate;
  stream.lineStart();
  while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);
  stream.lineEnd();
}

function streamPolygon(coordinates, stream) {
  var i = -1, n = coordinates.length;
  stream.polygonStart();
  while (++i < n) streamLine(coordinates[i], stream, 1);
  stream.polygonEnd();
}

function geoStream(object, stream) {
  if (object && streamObjectType.hasOwnProperty(object.type)) {
    streamObjectType[object.type](object, stream);
  } else {
    streamGeometry(object, stream);
  }
}

var areaRingSum = adder();

var areaSum = adder(),
    lambda00,
    phi00,
    lambda0,
    cosPhi0,
    sinPhi0;

var areaStream = {
  point: noop,
  lineStart: noop,
  lineEnd: noop,
  polygonStart: function() {
    areaRingSum.reset();
    areaStream.lineStart = areaRingStart;
    areaStream.lineEnd = areaRingEnd;
  },
  polygonEnd: function() {
    var areaRing = +areaRingSum;
    areaSum.add(areaRing < 0 ? tau + areaRing : areaRing);
    this.lineStart = this.lineEnd = this.point = noop;
  },
  sphere: function() {
    areaSum.add(tau);
  }
};

function areaRingStart() {
  areaStream.point = areaPointFirst;
}

function areaRingEnd() {
  areaPoint(lambda00, phi00);
}

function areaPointFirst(lambda, phi) {
  areaStream.point = areaPoint;
  lambda00 = lambda, phi00 = phi;
  lambda *= radians, phi *= radians;
  lambda0 = lambda, cosPhi0 = cos(phi = phi / 2 + quarterPi), sinPhi0 = sin(phi);
}

function areaPoint(lambda, phi) {
  lambda *= radians, phi *= radians;
  phi = phi / 2 + quarterPi; // half the angular distance from south pole

  // Spherical excess E for a spherical triangle with vertices: south pole,
  // previous point, current point.  Uses a formula derived from Cagnoli’s
  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).
  var dLambda = lambda - lambda0,
      sdLambda = dLambda >= 0 ? 1 : -1,
      adLambda = sdLambda * dLambda,
      cosPhi = cos(phi),
      sinPhi = sin(phi),
      k = sinPhi0 * sinPhi,
      u = cosPhi0 * cosPhi + k * cos(adLambda),
      v = k * sdLambda * sin(adLambda);
  areaRingSum.add(atan2(v, u));

  // Advance the previous points.
  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;
}

function area(object) {
  areaSum.reset();
  geoStream(object, areaStream);
  return areaSum * 2;
}

function spherical(cartesian) {
  return [atan2(cartesian[1], cartesian[0]), asin(cartesian[2])];
}

function cartesian(spherical) {
  var lambda = spherical[0], phi = spherical[1], cosPhi = cos(phi);
  return [cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi)];
}

function cartesianDot(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}

function cartesianCross(a, b) {
  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
}

// TODO return a
function cartesianAddInPlace(a, b) {
  a[0] += b[0], a[1] += b[1], a[2] += b[2];
}

function cartesianScale(vector, k) {
  return [vector[0] * k, vector[1] * k, vector[2] * k];
}

// TODO return d
function cartesianNormalizeInPlace(d) {
  var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
  d[0] /= l, d[1] /= l, d[2] /= l;
}

var lambda0$1, phi0, lambda1, phi1, // bounds
    lambda2, // previous lambda-coordinate
    lambda00$1, phi00$1, // first point
    p0, // previous 3D point
    deltaSum = adder(),
    ranges,
    range;

var boundsStream = {
  point: boundsPoint,
  lineStart: boundsLineStart,
  lineEnd: boundsLineEnd,
  polygonStart: function() {
    boundsStream.point = boundsRingPoint;
    boundsStream.lineStart = boundsRingStart;
    boundsStream.lineEnd = boundsRingEnd;
    deltaSum.reset();
    areaStream.polygonStart();
  },
  polygonEnd: function() {
    areaStream.polygonEnd();
    boundsStream.point = boundsPoint;
    boundsStream.lineStart = boundsLineStart;
    boundsStream.lineEnd = boundsLineEnd;
    if (areaRingSum < 0) lambda0$1 = -(lambda1 = 180), phi0 = -(phi1 = 90);
    else if (deltaSum > epsilon) phi1 = 90;
    else if (deltaSum < -epsilon) phi0 = -90;
    range[0] = lambda0$1, range[1] = lambda1;
  },
  sphere: function() {
    lambda0$1 = -(lambda1 = 180), phi0 = -(phi1 = 90);
  }
};

function boundsPoint(lambda, phi) {
  ranges.push(range = [lambda0$1 = lambda, lambda1 = lambda]);
  if (phi < phi0) phi0 = phi;
  if (phi > phi1) phi1 = phi;
}

function linePoint(lambda, phi) {
  var p = cartesian([lambda * radians, phi * radians]);
  if (p0) {
    var normal = cartesianCross(p0, p),
        equatorial = [normal[1], -normal[0], 0],
        inflection = cartesianCross(equatorial, normal);
    cartesianNormalizeInPlace(inflection);
    inflection = spherical(inflection);
    var delta = lambda - lambda2,
        sign = delta > 0 ? 1 : -1,
        lambdai = inflection[0] * degrees * sign,
        phii,
        antimeridian = abs(delta) > 180;
    if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {
      phii = inflection[1] * degrees;
      if (phii > phi1) phi1 = phii;
    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {
      phii = -inflection[1] * degrees;
      if (phii < phi0) phi0 = phii;
    } else {
      if (phi < phi0) phi0 = phi;
      if (phi > phi1) phi1 = phi;
    }
    if (antimeridian) {
      if (lambda < lambda2) {
        if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;
      } else {
        if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;
      }
    } else {
      if (lambda1 >= lambda0$1) {
        if (lambda < lambda0$1) lambda0$1 = lambda;
        if (lambda > lambda1) lambda1 = lambda;
      } else {
        if (lambda > lambda2) {
          if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;
        } else {
          if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;
        }
      }
    }
  } else {
    ranges.push(range = [lambda0$1 = lambda, lambda1 = lambda]);
  }
  if (phi < phi0) phi0 = phi;
  if (phi > phi1) phi1 = phi;
  p0 = p, lambda2 = lambda;
}

function boundsLineStart() {
  boundsStream.point = linePoint;
}

function boundsLineEnd() {
  range[0] = lambda0$1, range[1] = lambda1;
  boundsStream.point = boundsPoint;
  p0 = null;
}

function boundsRingPoint(lambda, phi) {
  if (p0) {
    var delta = lambda - lambda2;
    deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);
  } else {
    lambda00$1 = lambda, phi00$1 = phi;
  }
  areaStream.point(lambda, phi);
  linePoint(lambda, phi);
}

function boundsRingStart() {
  areaStream.lineStart();
}

function boundsRingEnd() {
  boundsRingPoint(lambda00$1, phi00$1);
  areaStream.lineEnd();
  if (abs(deltaSum) > epsilon) lambda0$1 = -(lambda1 = 180);
  range[0] = lambda0$1, range[1] = lambda1;
  p0 = null;
}

// Finds the left-right distance between two longitudes.
// This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want
// the distance between ±180° to be 360°.
function angle(lambda0, lambda1) {
  return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;
}

function rangeCompare(a, b) {
  return a[0] - b[0];
}

function rangeContains(range, x) {
  return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
}

function bounds(feature) {
  var i, n, a, b, merged, deltaMax, delta;

  phi1 = lambda1 = -(lambda0$1 = phi0 = Infinity);
  ranges = [];
  geoStream(feature, boundsStream);

  // First, sort ranges by their minimum longitudes.
  if (n = ranges.length) {
    ranges.sort(rangeCompare);

    // Then, merge any ranges that overlap.
    for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {
      b = ranges[i];
      if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {
        if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
        if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
      } else {
        merged.push(a = b);
      }
    }

    // Finally, find the largest gap between the merged ranges.
    // The final bounding box will be the inverse of this gap.
    for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {
      b = merged[i];
      if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0$1 = b[0], lambda1 = a[1];
    }
  }

  ranges = range = null;

  return lambda0$1 === Infinity || phi0 === Infinity
      ? [[NaN, NaN], [NaN, NaN]]
      : [[lambda0$1, phi0], [lambda1, phi1]];
}

var W0, W1,
    X0, Y0, Z0,
    X1, Y1, Z1,
    X2, Y2, Z2,
    lambda00$2, phi00$2, // first point
    x0, y0, z0; // previous point

var centroidStream = {
  sphere: noop,
  point: centroidPoint,
  lineStart: centroidLineStart,
  lineEnd: centroidLineEnd,
  polygonStart: function() {
    centroidStream.lineStart = centroidRingStart;
    centroidStream.lineEnd = centroidRingEnd;
  },
  polygonEnd: function() {
    centroidStream.lineStart = centroidLineStart;
    centroidStream.lineEnd = centroidLineEnd;
  }
};

// Arithmetic mean of Cartesian vectors.
function centroidPoint(lambda, phi) {
  lambda *= radians, phi *= radians;
  var cosPhi = cos(phi);
  centroidPointCartesian(cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi));
}

function centroidPointCartesian(x, y, z) {
  ++W0;
  X0 += (x - X0) / W0;
  Y0 += (y - Y0) / W0;
  Z0 += (z - Z0) / W0;
}

function centroidLineStart() {
  centroidStream.point = centroidLinePointFirst;
}

function centroidLinePointFirst(lambda, phi) {
  lambda *= radians, phi *= radians;
  var cosPhi = cos(phi);
  x0 = cosPhi * cos(lambda);
  y0 = cosPhi * sin(lambda);
  z0 = sin(phi);
  centroidStream.point = centroidLinePoint;
  centroidPointCartesian(x0, y0, z0);
}

function centroidLinePoint(lambda, phi) {
  lambda *= radians, phi *= radians;
  var cosPhi = cos(phi),
      x = cosPhi * cos(lambda),
      y = cosPhi * sin(lambda),
      z = sin(phi),
      w = atan2(sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
  W1 += w;
  X1 += w * (x0 + (x0 = x));
  Y1 += w * (y0 + (y0 = y));
  Z1 += w * (z0 + (z0 = z));
  centroidPointCartesian(x0, y0, z0);
}

function centroidLineEnd() {
  centroidStream.point = centroidPoint;
}

// See J. E. Brock, The Inertia Tensor for a Spherical Triangle,
// J. Applied Mechanics 42, 239 (1975).
function centroidRingStart() {
  centroidStream.point = centroidRingPointFirst;
}

function centroidRingEnd() {
  centroidRingPoint(lambda00$2, phi00$2);
  centroidStream.point = centroidPoint;
}

function centroidRingPointFirst(lambda, phi) {
  lambda00$2 = lambda, phi00$2 = phi;
  lambda *= radians, phi *= radians;
  centroidStream.point = centroidRingPoint;
  var cosPhi = cos(phi);
  x0 = cosPhi * cos(lambda);
  y0 = cosPhi * sin(lambda);
  z0 = sin(phi);
  centroidPointCartesian(x0, y0, z0);
}

function centroidRingPoint(lambda, phi) {
  lambda *= radians, phi *= radians;
  var cosPhi = cos(phi),
      x = cosPhi * cos(lambda),
      y = cosPhi * sin(lambda),
      z = sin(phi),
      cx = y0 * z - z0 * y,
      cy = z0 * x - x0 * z,
      cz = x0 * y - y0 * x,
      m = sqrt(cx * cx + cy * cy + cz * cz),
      w = asin(m), // line weight = angle
      v = m && -w / m; // area weight multiplier
  X2 += v * cx;
  Y2 += v * cy;
  Z2 += v * cz;
  W1 += w;
  X1 += w * (x0 + (x0 = x));
  Y1 += w * (y0 + (y0 = y));
  Z1 += w * (z0 + (z0 = z));
  centroidPointCartesian(x0, y0, z0);
}

function centroid(object) {
  W0 = W1 =
  X0 = Y0 = Z0 =
  X1 = Y1 = Z1 =
  X2 = Y2 = Z2 = 0;
  geoStream(object, centroidStream);

  var x = X2,
      y = Y2,
      z = Z2,
      m = x * x + y * y + z * z;

  // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.
  if (m < epsilon2) {
    x = X1, y = Y1, z = Z1;
    // If the feature has zero length, fall back to arithmetic mean of point vectors.
    if (W1 < epsilon) x = X0, y = Y0, z = Z0;
    m = x * x + y * y + z * z;
    // If the feature still has an undefined ccentroid, then return.
    if (m < epsilon2) return [NaN, NaN];
  }

  return [atan2(y, x) * degrees, asin(z / sqrt(m)) * degrees];
}

function constant(x) {
  return function() {
    return x;
  };
}

function compose(a, b) {

  function compose(x, y) {
    return x = a(x, y), b(x[0], x[1]);
  }

  if (a.invert && b.invert) compose.invert = function(x, y) {
    return x = b.invert(x, y), x && a.invert(x[0], x[1]);
  };

  return compose;
}

function rotationIdentity(lambda, phi) {
  return [abs(lambda) > pi ? lambda + Math.round(-lambda / tau) * tau : lambda, phi];
}

rotationIdentity.invert = rotationIdentity;

function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {
  return (deltaLambda %= tau) ? (deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))
    : rotationLambda(deltaLambda))
    : (deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma)
    : rotationIdentity);
}

function forwardRotationLambda(deltaLambda) {
  return function(lambda, phi) {
    return lambda += deltaLambda, [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];
  };
}

function rotationLambda(deltaLambda) {
  var rotation = forwardRotationLambda(deltaLambda);
  rotation.invert = forwardRotationLambda(-deltaLambda);
  return rotation;
}

function rotationPhiGamma(deltaPhi, deltaGamma) {
  var cosDeltaPhi = cos(deltaPhi),
      sinDeltaPhi = sin(deltaPhi),
      cosDeltaGamma = cos(deltaGamma),
      sinDeltaGamma = sin(deltaGamma);

  function rotation(lambda, phi) {
    var cosPhi = cos(phi),
        x = cos(lambda) * cosPhi,
        y = sin(lambda) * cosPhi,
        z = sin(phi),
        k = z * cosDeltaPhi + x * sinDeltaPhi;
    return [
      atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),
      asin(k * cosDeltaGamma + y * sinDeltaGamma)
    ];
  }

  rotation.invert = function(lambda, phi) {
    var cosPhi = cos(phi),
        x = cos(lambda) * cosPhi,
        y = sin(lambda) * cosPhi,
        z = sin(phi),
        k = z * cosDeltaGamma - y * sinDeltaGamma;
    return [
      atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),
      asin(k * cosDeltaPhi - x * sinDeltaPhi)
    ];
  };

  return rotation;
}

function rotation(rotate) {
  rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);

  function forward(coordinates) {
    coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);
    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;
  }

  forward.invert = function(coordinates) {
    coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);
    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;
  };

  return forward;
}

// Generates a circle centered at [0°, 0°], with a given radius and precision.
function circleStream(stream, radius, delta, direction, t0, t1) {
  if (!delta) return;
  var cosRadius = cos(radius),
      sinRadius = sin(radius),
      step = direction * delta;
  if (t0 == null) {
    t0 = radius + direction * tau;
    t1 = radius - step / 2;
  } else {
    t0 = circleRadius(cosRadius, t0);
    t1 = circleRadius(cosRadius, t1);
    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau;
  }
  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {
    point = spherical([cosRadius, -sinRadius * cos(t), -sinRadius * sin(t)]);
    stream.point(point[0], point[1]);
  }
}

// Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].
function circleRadius(cosRadius, point) {
  point = cartesian(point), point[0] -= cosRadius;
  cartesianNormalizeInPlace(point);
  var radius = acos(-point[1]);
  return ((-point[2] < 0 ? -radius : radius) + tau - epsilon) % tau;
}

function circle() {
  var center = constant([0, 0]),
      radius = constant(90),
      precision = constant(6),
      ring,
      rotate,
      stream = {point: point};

  function point(x, y) {
    ring.push(x = rotate(x, y));
    x[0] *= degrees, x[1] *= degrees;
  }

  function circle() {
    var c = center.apply(this, arguments),
        r = radius.apply(this, arguments) * radians,
        p = precision.apply(this, arguments) * radians;
    ring = [];
    rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;
    circleStream(stream, r, p, 1);
    c = {type: "Polygon", coordinates: [ring]};
    ring = rotate = null;
    return c;
  }

  circle.center = function(_) {
    return arguments.length ? (center = typeof _ === "function" ? _ : constant([+_[0], +_[1]]), circle) : center;
  };

  circle.radius = function(_) {
    return arguments.length ? (radius = typeof _ === "function" ? _ : constant(+_), circle) : radius;
  };

  circle.precision = function(_) {
    return arguments.length ? (precision = typeof _ === "function" ? _ : constant(+_), circle) : precision;
  };

  return circle;
}

function clipBuffer() {
  var lines = [],
      line;
  return {
    point: function(x, y, m) {
      line.push([x, y, m]);
    },
    lineStart: function() {
      lines.push(line = []);
    },
    lineEnd: noop,
    rejoin: function() {
      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
    },
    result: function() {
      var result = lines;
      lines = [];
      line = null;
      return result;
    }
  };
}

function pointEqual(a, b) {
  return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;
}

function Intersection(point, points, other, entry) {
  this.x = point;
  this.z = points;
  this.o = other; // another intersection
  this.e = entry; // is an entry?
  this.v = false; // visited
  this.n = this.p = null; // next & previous
}

// A generalized polygon clipping algorithm: given a polygon that has been cut
// into its visible line segments, and rejoins the segments by interpolating
// along the clip edge.
function clipRejoin(segments, compareIntersection, startInside, interpolate, stream) {
  var subject = [],
      clip = [],
      i,
      n;

  segments.forEach(function(segment) {
    if ((n = segment.length - 1) <= 0) return;
    var n, p0 = segment[0], p1 = segment[n], x;

    if (pointEqual(p0, p1)) {
      if (!p0[2] && !p1[2]) {
        stream.lineStart();
        for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);
        stream.lineEnd();
        return;
      }
      // handle degenerate cases by moving the point
      p1[0] += 2 * epsilon;
    }

    subject.push(x = new Intersection(p0, segment, null, true));
    clip.push(x.o = new Intersection(p0, null, x, false));
    subject.push(x = new Intersection(p1, segment, null, false));
    clip.push(x.o = new Intersection(p1, null, x, true));
  });

  if (!subject.length) return;

  clip.sort(compareIntersection);
  link(subject);
  link(clip);

  for (i = 0, n = clip.length; i < n; ++i) {
    clip[i].e = startInside = !startInside;
  }

  var start = subject[0],
      points,
      point;

  while (1) {
    // Find first unvisited intersection.
    var current = start,
        isSubject = true;
    while (current.v) if ((current = current.n) === start) return;
    points = current.z;
    stream.lineStart();
    do {
      current.v = current.o.v = true;
      if (current.e) {
        if (isSubject) {
          for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);
        } else {
          interpolate(current.x, current.n.x, 1, stream);
        }
        current = current.n;
      } else {
        if (isSubject) {
          points = current.p.z;
          for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);
        } else {
          interpolate(current.x, current.p.x, -1, stream);
        }
        current = current.p;
      }
      current = current.o;
      points = current.z;
      isSubject = !isSubject;
    } while (!current.v);
    stream.lineEnd();
  }
}

function link(array) {
  if (!(n = array.length)) return;
  var n,
      i = 0,
      a = array[0],
      b;
  while (++i < n) {
    a.n = b = array[i];
    b.p = a;
    a = b;
  }
  a.n = b = array[0];
  b.p = a;
}

var sum = adder();

function longitude(point) {
  if (abs(point[0]) <= pi)
    return point[0];
  else
    return sign(point[0]) * ((abs(point[0]) + pi) % tau - pi);
}

function polygonContains(polygon, point) {
  var lambda = longitude(point),
      phi = point[1],
      sinPhi = sin(phi),
      normal = [sin(lambda), -cos(lambda), 0],
      angle = 0,
      winding = 0;

  sum.reset();

  if (sinPhi === 1) phi = halfPi + epsilon;
  else if (sinPhi === -1) phi = -halfPi - epsilon;

  for (var i = 0, n = polygon.length; i < n; ++i) {
    if (!(m = (ring = polygon[i]).length)) continue;
    var ring,
        m,
        point0 = ring[m - 1],
        lambda0 = longitude(point0),
        phi0 = point0[1] / 2 + quarterPi,
        sinPhi0 = sin(phi0),
        cosPhi0 = cos(phi0);

    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {
      var point1 = ring[j],
          lambda1 = longitude(point1),
          phi1 = point1[1] / 2 + quarterPi,
          sinPhi1 = sin(phi1),
          cosPhi1 = cos(phi1),
          delta = lambda1 - lambda0,
          sign = delta >= 0 ? 1 : -1,
          absDelta = sign * delta,
          antimeridian = absDelta > pi,
          k = sinPhi0 * sinPhi1;

      sum.add(atan2(k * sign * sin(absDelta), cosPhi0 * cosPhi1 + k * cos(absDelta)));
      angle += antimeridian ? delta + sign * tau : delta;

      // Are the longitudes either side of the point’s meridian (lambda),
      // and are the latitudes smaller than the parallel (phi)?
      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {
        var arc = cartesianCross(cartesian(point0), cartesian(point1));
        cartesianNormalizeInPlace(arc);
        var intersection = cartesianCross(normal, arc);
        cartesianNormalizeInPlace(intersection);
        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);
        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {
          winding += antimeridian ^ delta >= 0 ? 1 : -1;
        }
      }
    }
  }

  // First, determine whether the South pole is inside or outside:
  //
  // It is inside if:
  // * the polygon winds around it in a clockwise direction.
  // * the polygon does not (cumulatively) wind around it, but has a negative
  //   (counter-clockwise) area.
  //
  // Second, count the (signed) number of times a segment crosses a lambda
  // from the point to the South pole.  If it is zero, then the point is the
  // same side as the South pole.

  return (angle < -epsilon || angle < epsilon && sum < -epsilon) ^ (winding & 1);
}

function clip(pointVisible, clipLine, interpolate, start) {
  return function(sink) {
    var line = clipLine(sink),
        ringBuffer = clipBuffer(),
        ringSink = clipLine(ringBuffer),
        polygonStarted = false,
        polygon,
        segments,
        ring;

    var clip = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: function() {
        clip.point = pointRing;
        clip.lineStart = ringStart;
        clip.lineEnd = ringEnd;
        segments = [];
        polygon = [];
      },
      polygonEnd: function() {
        clip.point = point;
        clip.lineStart = lineStart;
        clip.lineEnd = lineEnd;
        segments = d3Array.merge(segments);
        var startInside = polygonContains(polygon, start);
        if (segments.length) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          clipRejoin(segments, compareIntersection, startInside, interpolate, sink);
        } else if (startInside) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          sink.lineStart();
          interpolate(null, null, 1, sink);
          sink.lineEnd();
        }
        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;
        segments = polygon = null;
      },
      sphere: function() {
        sink.polygonStart();
        sink.lineStart();
        interpolate(null, null, 1, sink);
        sink.lineEnd();
        sink.polygonEnd();
      }
    };

    function point(lambda, phi) {
      if (pointVisible(lambda, phi)) sink.point(lambda, phi);
    }

    function pointLine(lambda, phi) {
      line.point(lambda, phi);
    }

    function lineStart() {
      clip.point = pointLine;
      line.lineStart();
    }

    function lineEnd() {
      clip.point = point;
      line.lineEnd();
    }

    function pointRing(lambda, phi) {
      ring.push([lambda, phi]);
      ringSink.point(lambda, phi);
    }

    function ringStart() {
      ringSink.lineStart();
      ring = [];
    }

    function ringEnd() {
      pointRing(ring[0][0], ring[0][1]);
      ringSink.lineEnd();

      var clean = ringSink.clean(),
          ringSegments = ringBuffer.result(),
          i, n = ringSegments.length, m,
          segment,
          point;

      ring.pop();
      polygon.push(ring);
      ring = null;

      if (!n) return;

      // No intersections.
      if (clean & 1) {
        segment = ringSegments[0];
        if ((m = segment.length - 1) > 0) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          sink.lineStart();
          for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);
          sink.lineEnd();
        }
        return;
      }

      // Rejoin connected segments.
      // TODO reuse ringBuffer.rejoin()?
      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));

      segments.push(ringSegments.filter(validSegment));
    }

    return clip;
  };
}

function validSegment(segment) {
  return segment.length > 1;
}

// Intersections are sorted along the clip edge. For both antimeridian cutting
// and circle clipping, the same comparison is used.
function compareIntersection(a, b) {
  return ((a = a.x)[0] < 0 ? a[1] - halfPi - epsilon : halfPi - a[1])
       - ((b = b.x)[0] < 0 ? b[1] - halfPi - epsilon : halfPi - b[1]);
}

var clipAntimeridian = clip(
  function() { return true; },
  clipAntimeridianLine,
  clipAntimeridianInterpolate,
  [-pi, -halfPi]
);

// Takes a line and cuts into visible segments. Return values: 0 - there were
// intersections or the line was empty; 1 - no intersections; 2 - there were
// intersections, and the first and last segments should be rejoined.
function clipAntimeridianLine(stream) {
  var lambda0 = NaN,
      phi0 = NaN,
      sign0 = NaN,
      clean; // no intersections

  return {
    lineStart: function() {
      stream.lineStart();
      clean = 1;
    },
    point: function(lambda1, phi1) {
      var sign1 = lambda1 > 0 ? pi : -pi,
          delta = abs(lambda1 - lambda0);
      if (abs(delta - pi) < epsilon) { // line crosses a pole
        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi : -halfPi);
        stream.point(sign0, phi0);
        stream.lineEnd();
        stream.lineStart();
        stream.point(sign1, phi0);
        stream.point(lambda1, phi0);
        clean = 0;
      } else if (sign0 !== sign1 && delta >= pi) { // line crosses antimeridian
        if (abs(lambda0 - sign0) < epsilon) lambda0 -= sign0 * epsilon; // handle degeneracies
        if (abs(lambda1 - sign1) < epsilon) lambda1 -= sign1 * epsilon;
        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);
        stream.point(sign0, phi0);
        stream.lineEnd();
        stream.lineStart();
        stream.point(sign1, phi0);
        clean = 0;
      }
      stream.point(lambda0 = lambda1, phi0 = phi1);
      sign0 = sign1;
    },
    lineEnd: function() {
      stream.lineEnd();
      lambda0 = phi0 = NaN;
    },
    clean: function() {
      return 2 - clean; // if intersections, rejoin first and last segments
    }
  };
}

function clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {
  var cosPhi0,
      cosPhi1,
      sinLambda0Lambda1 = sin(lambda0 - lambda1);
  return abs(sinLambda0Lambda1) > epsilon
      ? atan((sin(phi0) * (cosPhi1 = cos(phi1)) * sin(lambda1)
          - sin(phi1) * (cosPhi0 = cos(phi0)) * sin(lambda0))
          / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))
      : (phi0 + phi1) / 2;
}

function clipAntimeridianInterpolate(from, to, direction, stream) {
  var phi;
  if (from == null) {
    phi = direction * halfPi;
    stream.point(-pi, phi);
    stream.point(0, phi);
    stream.point(pi, phi);
    stream.point(pi, 0);
    stream.point(pi, -phi);
    stream.point(0, -phi);
    stream.point(-pi, -phi);
    stream.point(-pi, 0);
    stream.point(-pi, phi);
  } else if (abs(from[0] - to[0]) > epsilon) {
    var lambda = from[0] < to[0] ? pi : -pi;
    phi = direction * lambda / 2;
    stream.point(-lambda, phi);
    stream.point(0, phi);
    stream.point(lambda, phi);
  } else {
    stream.point(to[0], to[1]);
  }
}

function clipCircle(radius) {
  var cr = cos(radius),
      delta = 6 * radians,
      smallRadius = cr > 0,
      notHemisphere = abs(cr) > epsilon; // TODO optimise for this common case

  function interpolate(from, to, direction, stream) {
    circleStream(stream, radius, delta, direction, from, to);
  }

  function visible(lambda, phi) {
    return cos(lambda) * cos(phi) > cr;
  }

  // Takes a line and cuts into visible segments. Return values used for polygon
  // clipping: 0 - there were intersections or the line was empty; 1 - no
  // intersections 2 - there were intersections, and the first and last segments
  // should be rejoined.
  function clipLine(stream) {
    var point0, // previous point
        c0, // code for previous point
        v0, // visibility of previous point
        v00, // visibility of first point
        clean; // no intersections
    return {
      lineStart: function() {
        v00 = v0 = false;
        clean = 1;
      },
      point: function(lambda, phi) {
        var point1 = [lambda, phi],
            point2,
            v = visible(lambda, phi),
            c = smallRadius
              ? v ? 0 : code(lambda, phi)
              : v ? code(lambda + (lambda < 0 ? pi : -pi), phi) : 0;
        if (!point0 && (v00 = v0 = v)) stream.lineStart();
        if (v !== v0) {
          point2 = intersect(point0, point1);
          if (!point2 || pointEqual(point0, point2) || pointEqual(point1, point2))
            point1[2] = 1;
        }
        if (v !== v0) {
          clean = 0;
          if (v) {
            // outside going in
            stream.lineStart();
            point2 = intersect(point1, point0);
            stream.point(point2[0], point2[1]);
          } else {
            // inside going out
            point2 = intersect(point0, point1);
            stream.point(point2[0], point2[1], 2);
            stream.lineEnd();
          }
          point0 = point2;
        } else if (notHemisphere && point0 && smallRadius ^ v) {
          var t;
          // If the codes for two points are different, or are both zero,
          // and there this segment intersects with the small circle.
          if (!(c & c0) && (t = intersect(point1, point0, true))) {
            clean = 0;
            if (smallRadius) {
              stream.lineStart();
              stream.point(t[0][0], t[0][1]);
              stream.point(t[1][0], t[1][1]);
              stream.lineEnd();
            } else {
              stream.point(t[1][0], t[1][1]);
              stream.lineEnd();
              stream.lineStart();
              stream.point(t[0][0], t[0][1], 3);
            }
          }
        }
        if (v && (!point0 || !pointEqual(point0, point1))) {
          stream.point(point1[0], point1[1]);
        }
        point0 = point1, v0 = v, c0 = c;
      },
      lineEnd: function() {
        if (v0) stream.lineEnd();
        point0 = null;
      },
      // Rejoin first and last segments if there were intersections and the first
      // and last points were visible.
      clean: function() {
        return clean | ((v00 && v0) << 1);
      }
    };
  }

  // Intersects the great circle between a and b with the clip circle.
  function intersect(a, b, two) {
    var pa = cartesian(a),
        pb = cartesian(b);

    // We have two planes, n1.p = d1 and n2.p = d2.
    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).
    var n1 = [1, 0, 0], // normal
        n2 = cartesianCross(pa, pb),
        n2n2 = cartesianDot(n2, n2),
        n1n2 = n2[0], // cartesianDot(n1, n2),
        determinant = n2n2 - n1n2 * n1n2;

    // Two polar points.
    if (!determinant) return !two && a;

    var c1 =  cr * n2n2 / determinant,
        c2 = -cr * n1n2 / determinant,
        n1xn2 = cartesianCross(n1, n2),
        A = cartesianScale(n1, c1),
        B = cartesianScale(n2, c2);
    cartesianAddInPlace(A, B);

    // Solve |p(t)|^2 = 1.
    var u = n1xn2,
        w = cartesianDot(A, u),
        uu = cartesianDot(u, u),
        t2 = w * w - uu * (cartesianDot(A, A) - 1);

    if (t2 < 0) return;

    var t = sqrt(t2),
        q = cartesianScale(u, (-w - t) / uu);
    cartesianAddInPlace(q, A);
    q = spherical(q);

    if (!two) return q;

    // Two intersection points.
    var lambda0 = a[0],
        lambda1 = b[0],
        phi0 = a[1],
        phi1 = b[1],
        z;

    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;

    var delta = lambda1 - lambda0,
        polar = abs(delta - pi) < epsilon,
        meridian = polar || delta < epsilon;

    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;

    // Check that the first point is between a and b.
    if (meridian
        ? polar
          ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon ? phi0 : phi1)
          : phi0 <= q[1] && q[1] <= phi1
        : delta > pi ^ (lambda0 <= q[0] && q[0] <= lambda1)) {
      var q1 = cartesianScale(u, (-w + t) / uu);
      cartesianAddInPlace(q1, A);
      return [q, spherical(q1)];
    }
  }

  // Generates a 4-bit vector representing the location of a point relative to
  // the small circle's bounding box.
  function code(lambda, phi) {
    var r = smallRadius ? radius : pi - radius,
        code = 0;
    if (lambda < -r) code |= 1; // left
    else if (lambda > r) code |= 2; // right
    if (phi < -r) code |= 4; // below
    else if (phi > r) code |= 8; // above
    return code;
  }

  return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi, radius - pi]);
}

function clipLine(a, b, x0, y0, x1, y1) {
  var ax = a[0],
      ay = a[1],
      bx = b[0],
      by = b[1],
      t0 = 0,
      t1 = 1,
      dx = bx - ax,
      dy = by - ay,
      r;

  r = x0 - ax;
  if (!dx && r > 0) return;
  r /= dx;
  if (dx < 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  } else if (dx > 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  }

  r = x1 - ax;
  if (!dx && r < 0) return;
  r /= dx;
  if (dx < 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  } else if (dx > 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  }

  r = y0 - ay;
  if (!dy && r > 0) return;
  r /= dy;
  if (dy < 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  } else if (dy > 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  }

  r = y1 - ay;
  if (!dy && r < 0) return;
  r /= dy;
  if (dy < 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  } else if (dy > 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  }

  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;
  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;
  return true;
}

var clipMax = 1e9, clipMin = -clipMax;

// TODO Use d3-polygon’s polygonContains here for the ring check?
// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?

function clipRectangle(x0, y0, x1, y1) {

  function visible(x, y) {
    return x0 <= x && x <= x1 && y0 <= y && y <= y1;
  }

  function interpolate(from, to, direction, stream) {
    var a = 0, a1 = 0;
    if (from == null
        || (a = corner(from, direction)) !== (a1 = corner(to, direction))
        || comparePoint(from, to) < 0 ^ direction > 0) {
      do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
      while ((a = (a + direction + 4) % 4) !== a1);
    } else {
      stream.point(to[0], to[1]);
    }
  }

  function corner(p, direction) {
    return abs(p[0] - x0) < epsilon ? direction > 0 ? 0 : 3
        : abs(p[0] - x1) < epsilon ? direction > 0 ? 2 : 1
        : abs(p[1] - y0) < epsilon ? direction > 0 ? 1 : 0
        : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon
  }

  function compareIntersection(a, b) {
    return comparePoint(a.x, b.x);
  }

  function comparePoint(a, b) {
    var ca = corner(a, 1),
        cb = corner(b, 1);
    return ca !== cb ? ca - cb
        : ca === 0 ? b[1] - a[1]
        : ca === 1 ? a[0] - b[0]
        : ca === 2 ? a[1] - b[1]
        : b[0] - a[0];
  }

  return function(stream) {
    var activeStream = stream,
        bufferStream = clipBuffer(),
        segments,
        polygon,
        ring,
        x__, y__, v__, // first point
        x_, y_, v_, // previous point
        first,
        clean;

    var clipStream = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: polygonStart,
      polygonEnd: polygonEnd
    };

    function point(x, y) {
      if (visible(x, y)) activeStream.point(x, y);
    }

    function polygonInside() {
      var winding = 0;

      for (var i = 0, n = polygon.length; i < n; ++i) {
        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {
          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];
          if (a1 <= y1) { if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding; }
          else { if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding; }
        }
      }

      return winding;
    }

    // Buffer geometry within a polygon and then clip it en masse.
    function polygonStart() {
      activeStream = bufferStream, segments = [], polygon = [], clean = true;
    }

    function polygonEnd() {
      var startInside = polygonInside(),
          cleanInside = clean && startInside,
          visible = (segments = d3Array.merge(segments)).length;
      if (cleanInside || visible) {
        stream.polygonStart();
        if (cleanInside) {
          stream.lineStart();
          interpolate(null, null, 1, stream);
          stream.lineEnd();
        }
        if (visible) {
          clipRejoin(segments, compareIntersection, startInside, interpolate, stream);
        }
        stream.polygonEnd();
      }
      activeStream = stream, segments = polygon = ring = null;
    }

    function lineStart() {
      clipStream.point = linePoint;
      if (polygon) polygon.push(ring = []);
      first = true;
      v_ = false;
      x_ = y_ = NaN;
    }

    // TODO rather than special-case polygons, simply handle them separately.
    // Ideally, coincident intersection points should be jittered to avoid
    // clipping issues.
    function lineEnd() {
      if (segments) {
        linePoint(x__, y__);
        if (v__ && v_) bufferStream.rejoin();
        segments.push(bufferStream.result());
      }
      clipStream.point = point;
      if (v_) activeStream.lineEnd();
    }

    function linePoint(x, y) {
      var v = visible(x, y);
      if (polygon) ring.push([x, y]);
      if (first) {
        x__ = x, y__ = y, v__ = v;
        first = false;
        if (v) {
          activeStream.lineStart();
          activeStream.point(x, y);
        }
      } else {
        if (v && v_) activeStream.point(x, y);
        else {
          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],
              b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];
          if (clipLine(a, b, x0, y0, x1, y1)) {
            if (!v_) {
              activeStream.lineStart();
              activeStream.point(a[0], a[1]);
            }
            activeStream.point(b[0], b[1]);
            if (!v) activeStream.lineEnd();
            clean = false;
          } else if (v) {
            activeStream.lineStart();
            activeStream.point(x, y);
            clean = false;
          }
        }
      }
      x_ = x, y_ = y, v_ = v;
    }

    return clipStream;
  };
}

function extent() {
  var x0 = 0,
      y0 = 0,
      x1 = 960,
      y1 = 500,
      cache,
      cacheStream,
      clip;

  return clip = {
    stream: function(stream) {
      return cache && cacheStream === stream ? cache : cache = clipRectangle(x0, y0, x1, y1)(cacheStream = stream);
    },
    extent: function(_) {
      return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [[x0, y0], [x1, y1]];
    }
  };
}

var lengthSum = adder(),
    lambda0$2,
    sinPhi0$1,
    cosPhi0$1;

var lengthStream = {
  sphere: noop,
  point: noop,
  lineStart: lengthLineStart,
  lineEnd: noop,
  polygonStart: noop,
  polygonEnd: noop
};

function lengthLineStart() {
  lengthStream.point = lengthPointFirst;
  lengthStream.lineEnd = lengthLineEnd;
}

function lengthLineEnd() {
  lengthStream.point = lengthStream.lineEnd = noop;
}

function lengthPointFirst(lambda, phi) {
  lambda *= radians, phi *= radians;
  lambda0$2 = lambda, sinPhi0$1 = sin(phi), cosPhi0$1 = cos(phi);
  lengthStream.point = lengthPoint;
}

function lengthPoint(lambda, phi) {
  lambda *= radians, phi *= radians;
  var sinPhi = sin(phi),
      cosPhi = cos(phi),
      delta = abs(lambda - lambda0$2),
      cosDelta = cos(delta),
      sinDelta = sin(delta),
      x = cosPhi * sinDelta,
      y = cosPhi0$1 * sinPhi - sinPhi0$1 * cosPhi * cosDelta,
      z = sinPhi0$1 * sinPhi + cosPhi0$1 * cosPhi * cosDelta;
  lengthSum.add(atan2(sqrt(x * x + y * y), z));
  lambda0$2 = lambda, sinPhi0$1 = sinPhi, cosPhi0$1 = cosPhi;
}

function length(object) {
  lengthSum.reset();
  geoStream(object, lengthStream);
  return +lengthSum;
}

var coordinates = [null, null],
    object = {type: "LineString", coordinates: coordinates};

function distance(a, b) {
  coordinates[0] = a;
  coordinates[1] = b;
  return length(object);
}

var containsObjectType = {
  Feature: function(object, point) {
    return containsGeometry(object.geometry, point);
  },
  FeatureCollection: function(object, point) {
    var features = object.features, i = -1, n = features.length;
    while (++i < n) if (containsGeometry(features[i].geometry, point)) return true;
    return false;
  }
};

var containsGeometryType = {
  Sphere: function() {
    return true;
  },
  Point: function(object, point) {
    return containsPoint(object.coordinates, point);
  },
  MultiPoint: function(object, point) {
    var coordinates = object.coordinates, i = -1, n = coordinates.length;
    while (++i < n) if (containsPoint(coordinates[i], point)) return true;
    return false;
  },
  LineString: function(object, point) {
    return containsLine(object.coordinates, point);
  },
  MultiLineString: function(object, point) {
    var coordinates = object.coordinates, i = -1, n = coordinates.length;
    while (++i < n) if (containsLine(coordinates[i], point)) return true;
    return false;
  },
  Polygon: function(object, point) {
    return containsPolygon(object.coordinates, point);
  },
  MultiPolygon: function(object, point) {
    var coordinates = object.coordinates, i = -1, n = coordinates.length;
    while (++i < n) if (containsPolygon(coordinates[i], point)) return true;
    return false;
  },
  GeometryCollection: function(object, point) {
    var geometries = object.geometries, i = -1, n = geometries.length;
    while (++i < n) if (containsGeometry(geometries[i], point)) return true;
    return false;
  }
};

function containsGeometry(geometry, point) {
  return geometry && containsGeometryType.hasOwnProperty(geometry.type)
      ? containsGeometryType[geometry.type](geometry, point)
      : false;
}

function containsPoint(coordinates, point) {
  return distance(coordinates, point) === 0;
}

function containsLine(coordinates, point) {
  var ao, bo, ab;
  for (var i = 0, n = coordinates.length; i < n; i++) {
    bo = distance(coordinates[i], point);
    if (bo === 0) return true;
    if (i > 0) {
      ab = distance(coordinates[i], coordinates[i - 1]);
      if (
        ab > 0 &&
        ao <= ab &&
        bo <= ab &&
        (ao + bo - ab) * (1 - Math.pow((ao - bo) / ab, 2)) < epsilon2 * ab
      )
        return true;
    }
    ao = bo;
  }
  return false;
}

function containsPolygon(coordinates, point) {
  return !!polygonContains(coordinates.map(ringRadians), pointRadians(point));
}

function ringRadians(ring) {
  return ring = ring.map(pointRadians), ring.pop(), ring;
}

function pointRadians(point) {
  return [point[0] * radians, point[1] * radians];
}

function contains(object, point) {
  return (object && containsObjectType.hasOwnProperty(object.type)
      ? containsObjectType[object.type]
      : containsGeometry)(object, point);
}

function graticuleX(y0, y1, dy) {
  var y = d3Array.range(y0, y1 - epsilon, dy).concat(y1);
  return function(x) { return y.map(function(y) { return [x, y]; }); };
}

function graticuleY(x0, x1, dx) {
  var x = d3Array.range(x0, x1 - epsilon, dx).concat(x1);
  return function(y) { return x.map(function(x) { return [x, y]; }); };
}

function graticule() {
  var x1, x0, X1, X0,
      y1, y0, Y1, Y0,
      dx = 10, dy = dx, DX = 90, DY = 360,
      x, y, X, Y,
      precision = 2.5;

  function graticule() {
    return {type: "MultiLineString", coordinates: lines()};
  }

  function lines() {
    return d3Array.range(ceil(X0 / DX) * DX, X1, DX).map(X)
        .concat(d3Array.range(ceil(Y0 / DY) * DY, Y1, DY).map(Y))
        .concat(d3Array.range(ceil(x0 / dx) * dx, x1, dx).filter(function(x) { return abs(x % DX) > epsilon; }).map(x))
        .concat(d3Array.range(ceil(y0 / dy) * dy, y1, dy).filter(function(y) { return abs(y % DY) > epsilon; }).map(y));
  }

  graticule.lines = function() {
    return lines().map(function(coordinates) { return {type: "LineString", coordinates: coordinates}; });
  };

  graticule.outline = function() {
    return {
      type: "Polygon",
      coordinates: [
        X(X0).concat(
        Y(Y1).slice(1),
        X(X1).reverse().slice(1),
        Y(Y0).reverse().slice(1))
      ]
    };
  };

  graticule.extent = function(_) {
    if (!arguments.length) return graticule.extentMinor();
    return graticule.extentMajor(_).extentMinor(_);
  };

  graticule.extentMajor = function(_) {
    if (!arguments.length) return [[X0, Y0], [X1, Y1]];
    X0 = +_[0][0], X1 = +_[1][0];
    Y0 = +_[0][1], Y1 = +_[1][1];
    if (X0 > X1) _ = X0, X0 = X1, X1 = _;
    if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
    return graticule.precision(precision);
  };

  graticule.extentMinor = function(_) {
    if (!arguments.length) return [[x0, y0], [x1, y1]];
    x0 = +_[0][0], x1 = +_[1][0];
    y0 = +_[0][1], y1 = +_[1][1];
    if (x0 > x1) _ = x0, x0 = x1, x1 = _;
    if (y0 > y1) _ = y0, y0 = y1, y1 = _;
    return graticule.precision(precision);
  };

  graticule.step = function(_) {
    if (!arguments.length) return graticule.stepMinor();
    return graticule.stepMajor(_).stepMinor(_);
  };

  graticule.stepMajor = function(_) {
    if (!arguments.length) return [DX, DY];
    DX = +_[0], DY = +_[1];
    return graticule;
  };

  graticule.stepMinor = function(_) {
    if (!arguments.length) return [dx, dy];
    dx = +_[0], dy = +_[1];
    return graticule;
  };

  graticule.precision = function(_) {
    if (!arguments.length) return precision;
    precision = +_;
    x = graticuleX(y0, y1, 90);
    y = graticuleY(x0, x1, precision);
    X = graticuleX(Y0, Y1, 90);
    Y = graticuleY(X0, X1, precision);
    return graticule;
  };

  return graticule
      .extentMajor([[-180, -90 + epsilon], [180, 90 - epsilon]])
      .extentMinor([[-180, -80 - epsilon], [180, 80 + epsilon]]);
}

function graticule10() {
  return graticule()();
}

function interpolate(a, b) {
  var x0 = a[0] * radians,
      y0 = a[1] * radians,
      x1 = b[0] * radians,
      y1 = b[1] * radians,
      cy0 = cos(y0),
      sy0 = sin(y0),
      cy1 = cos(y1),
      sy1 = sin(y1),
      kx0 = cy0 * cos(x0),
      ky0 = cy0 * sin(x0),
      kx1 = cy1 * cos(x1),
      ky1 = cy1 * sin(x1),
      d = 2 * asin(sqrt(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))),
      k = sin(d);

  var interpolate = d ? function(t) {
    var B = sin(t *= d) / k,
        A = sin(d - t) / k,
        x = A * kx0 + B * kx1,
        y = A * ky0 + B * ky1,
        z = A * sy0 + B * sy1;
    return [
      atan2(y, x) * degrees,
      atan2(z, sqrt(x * x + y * y)) * degrees
    ];
  } : function() {
    return [x0 * degrees, y0 * degrees];
  };

  interpolate.distance = d;

  return interpolate;
}

function identity(x) {
  return x;
}

var areaSum$1 = adder(),
    areaRingSum$1 = adder(),
    x00,
    y00,
    x0$1,
    y0$1;

var areaStream$1 = {
  point: noop,
  lineStart: noop,
  lineEnd: noop,
  polygonStart: function() {
    areaStream$1.lineStart = areaRingStart$1;
    areaStream$1.lineEnd = areaRingEnd$1;
  },
  polygonEnd: function() {
    areaStream$1.lineStart = areaStream$1.lineEnd = areaStream$1.point = noop;
    areaSum$1.add(abs(areaRingSum$1));
    areaRingSum$1.reset();
  },
  result: function() {
    var area = areaSum$1 / 2;
    areaSum$1.reset();
    return area;
  }
};

function areaRingStart$1() {
  areaStream$1.point = areaPointFirst$1;
}

function areaPointFirst$1(x, y) {
  areaStream$1.point = areaPoint$1;
  x00 = x0$1 = x, y00 = y0$1 = y;
}

function areaPoint$1(x, y) {
  areaRingSum$1.add(y0$1 * x - x0$1 * y);
  x0$1 = x, y0$1 = y;
}

function areaRingEnd$1() {
  areaPoint$1(x00, y00);
}

var x0$2 = Infinity,
    y0$2 = x0$2,
    x1 = -x0$2,
    y1 = x1;

var boundsStream$1 = {
  point: boundsPoint$1,
  lineStart: noop,
  lineEnd: noop,
  polygonStart: noop,
  polygonEnd: noop,
  result: function() {
    var bounds = [[x0$2, y0$2], [x1, y1]];
    x1 = y1 = -(y0$2 = x0$2 = Infinity);
    return bounds;
  }
};

function boundsPoint$1(x, y) {
  if (x < x0$2) x0$2 = x;
  if (x > x1) x1 = x;
  if (y < y0$2) y0$2 = y;
  if (y > y1) y1 = y;
}

// TODO Enforce positive area for exterior, negative area for interior?

var X0$1 = 0,
    Y0$1 = 0,
    Z0$1 = 0,
    X1$1 = 0,
    Y1$1 = 0,
    Z1$1 = 0,
    X2$1 = 0,
    Y2$1 = 0,
    Z2$1 = 0,
    x00$1,
    y00$1,
    x0$3,
    y0$3;

var centroidStream$1 = {
  point: centroidPoint$1,
  lineStart: centroidLineStart$1,
  lineEnd: centroidLineEnd$1,
  polygonStart: function() {
    centroidStream$1.lineStart = centroidRingStart$1;
    centroidStream$1.lineEnd = centroidRingEnd$1;
  },
  polygonEnd: function() {
    centroidStream$1.point = centroidPoint$1;
    centroidStream$1.lineStart = centroidLineStart$1;
    centroidStream$1.lineEnd = centroidLineEnd$1;
  },
  result: function() {
    var centroid = Z2$1 ? [X2$1 / Z2$1, Y2$1 / Z2$1]
        : Z1$1 ? [X1$1 / Z1$1, Y1$1 / Z1$1]
        : Z0$1 ? [X0$1 / Z0$1, Y0$1 / Z0$1]
        : [NaN, NaN];
    X0$1 = Y0$1 = Z0$1 =
    X1$1 = Y1$1 = Z1$1 =
    X2$1 = Y2$1 = Z2$1 = 0;
    return centroid;
  }
};

function centroidPoint$1(x, y) {
  X0$1 += x;
  Y0$1 += y;
  ++Z0$1;
}

function centroidLineStart$1() {
  centroidStream$1.point = centroidPointFirstLine;
}

function centroidPointFirstLine(x, y) {
  centroidStream$1.point = centroidPointLine;
  centroidPoint$1(x0$3 = x, y0$3 = y);
}

function centroidPointLine(x, y) {
  var dx = x - x0$3, dy = y - y0$3, z = sqrt(dx * dx + dy * dy);
  X1$1 += z * (x0$3 + x) / 2;
  Y1$1 += z * (y0$3 + y) / 2;
  Z1$1 += z;
  centroidPoint$1(x0$3 = x, y0$3 = y);
}

function centroidLineEnd$1() {
  centroidStream$1.point = centroidPoint$1;
}

function centroidRingStart$1() {
  centroidStream$1.point = centroidPointFirstRing;
}

function centroidRingEnd$1() {
  centroidPointRing(x00$1, y00$1);
}

function centroidPointFirstRing(x, y) {
  centroidStream$1.point = centroidPointRing;
  centroidPoint$1(x00$1 = x0$3 = x, y00$1 = y0$3 = y);
}

function centroidPointRing(x, y) {
  var dx = x - x0$3,
      dy = y - y0$3,
      z = sqrt(dx * dx + dy * dy);

  X1$1 += z * (x0$3 + x) / 2;
  Y1$1 += z * (y0$3 + y) / 2;
  Z1$1 += z;

  z = y0$3 * x - x0$3 * y;
  X2$1 += z * (x0$3 + x);
  Y2$1 += z * (y0$3 + y);
  Z2$1 += z * 3;
  centroidPoint$1(x0$3 = x, y0$3 = y);
}

function PathContext(context) {
  this._context = context;
}

PathContext.prototype = {
  _radius: 4.5,
  pointRadius: function(_) {
    return this._radius = _, this;
  },
  polygonStart: function() {
    this._line = 0;
  },
  polygonEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line === 0) this._context.closePath();
    this._point = NaN;
  },
  point: function(x, y) {
    switch (this._point) {
      case 0: {
        this._context.moveTo(x, y);
        this._point = 1;
        break;
      }
      case 1: {
        this._context.lineTo(x, y);
        break;
      }
      default: {
        this._context.moveTo(x + this._radius, y);
        this._context.arc(x, y, this._radius, 0, tau);
        break;
      }
    }
  },
  result: noop
};

var lengthSum$1 = adder(),
    lengthRing,
    x00$2,
    y00$2,
    x0$4,
    y0$4;

var lengthStream$1 = {
  point: noop,
  lineStart: function() {
    lengthStream$1.point = lengthPointFirst$1;
  },
  lineEnd: function() {
    if (lengthRing) lengthPoint$1(x00$2, y00$2);
    lengthStream$1.point = noop;
  },
  polygonStart: function() {
    lengthRing = true;
  },
  polygonEnd: function() {
    lengthRing = null;
  },
  result: function() {
    var length = +lengthSum$1;
    lengthSum$1.reset();
    return length;
  }
};

function lengthPointFirst$1(x, y) {
  lengthStream$1.point = lengthPoint$1;
  x00$2 = x0$4 = x, y00$2 = y0$4 = y;
}

function lengthPoint$1(x, y) {
  x0$4 -= x, y0$4 -= y;
  lengthSum$1.add(sqrt(x0$4 * x0$4 + y0$4 * y0$4));
  x0$4 = x, y0$4 = y;
}

function PathString() {
  this._string = [];
}

PathString.prototype = {
  _radius: 4.5,
  _circle: circle$1(4.5),
  pointRadius: function(_) {
    if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;
    return this;
  },
  polygonStart: function() {
    this._line = 0;
  },
  polygonEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line === 0) this._string.push("Z");
    this._point = NaN;
  },
  point: function(x, y) {
    switch (this._point) {
      case 0: {
        this._string.push("M", x, ",", y);
        this._point = 1;
        break;
      }
      case 1: {
        this._string.push("L", x, ",", y);
        break;
      }
      default: {
        if (this._circle == null) this._circle = circle$1(this._radius);
        this._string.push("M", x, ",", y, this._circle);
        break;
      }
    }
  },
  result: function() {
    if (this._string.length) {
      var result = this._string.join("");
      this._string = [];
      return result;
    } else {
      return null;
    }
  }
};

function circle$1(radius) {
  return "m0," + radius
      + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius
      + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius
      + "z";
}

function index(projection, context) {
  var pointRadius = 4.5,
      projectionStream,
      contextStream;

  function path(object) {
    if (object) {
      if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
      geoStream(object, projectionStream(contextStream));
    }
    return contextStream.result();
  }

  path.area = function(object) {
    geoStream(object, projectionStream(areaStream$1));
    return areaStream$1.result();
  };

  path.measure = function(object) {
    geoStream(object, projectionStream(lengthStream$1));
    return lengthStream$1.result();
  };

  path.bounds = function(object) {
    geoStream(object, projectionStream(boundsStream$1));
    return boundsStream$1.result();
  };

  path.centroid = function(object) {
    geoStream(object, projectionStream(centroidStream$1));
    return centroidStream$1.result();
  };

  path.projection = function(_) {
    return arguments.length ? (projectionStream = _ == null ? (projection = null, identity) : (projection = _).stream, path) : projection;
  };

  path.context = function(_) {
    if (!arguments.length) return context;
    contextStream = _ == null ? (context = null, new PathString) : new PathContext(context = _);
    if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
    return path;
  };

  path.pointRadius = function(_) {
    if (!arguments.length) return pointRadius;
    pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
    return path;
  };

  return path.projection(projection).context(context);
}

function transform(methods) {
  return {
    stream: transformer(methods)
  };
}

function transformer(methods) {
  return function(stream) {
    var s = new TransformStream;
    for (var key in methods) s[key] = methods[key];
    s.stream = stream;
    return s;
  };
}

function TransformStream() {}

TransformStream.prototype = {
  constructor: TransformStream,
  point: function(x, y) { this.stream.point(x, y); },
  sphere: function() { this.stream.sphere(); },
  lineStart: function() { this.stream.lineStart(); },
  lineEnd: function() { this.stream.lineEnd(); },
  polygonStart: function() { this.stream.polygonStart(); },
  polygonEnd: function() { this.stream.polygonEnd(); }
};

function fit(projection, fitBounds, object) {
  var clip = projection.clipExtent && projection.clipExtent();
  projection.scale(150).translate([0, 0]);
  if (clip != null) projection.clipExtent(null);
  geoStream(object, projection.stream(boundsStream$1));
  fitBounds(boundsStream$1.result());
  if (clip != null) projection.clipExtent(clip);
  return projection;
}

function fitExtent(projection, extent, object) {
  return fit(projection, function(b) {
    var w = extent[1][0] - extent[0][0],
        h = extent[1][1] - extent[0][1],
        k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),
        x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,
        y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;
    projection.scale(150 * k).translate([x, y]);
  }, object);
}

function fitSize(projection, size, object) {
  return fitExtent(projection, [[0, 0], size], object);
}

function fitWidth(projection, width, object) {
  return fit(projection, function(b) {
    var w = +width,
        k = w / (b[1][0] - b[0][0]),
        x = (w - k * (b[1][0] + b[0][0])) / 2,
        y = -k * b[0][1];
    projection.scale(150 * k).translate([x, y]);
  }, object);
}

function fitHeight(projection, height, object) {
  return fit(projection, function(b) {
    var h = +height,
        k = h / (b[1][1] - b[0][1]),
        x = -k * b[0][0],
        y = (h - k * (b[1][1] + b[0][1])) / 2;
    projection.scale(150 * k).translate([x, y]);
  }, object);
}

var maxDepth = 16, // maximum depth of subdivision
    cosMinDistance = cos(30 * radians); // cos(minimum angular distance)

function resample(project, delta2) {
  return +delta2 ? resample$1(project, delta2) : resampleNone(project);
}

function resampleNone(project) {
  return transformer({
    point: function(x, y) {
      x = project(x, y);
      this.stream.point(x[0], x[1]);
    }
  });
}

function resample$1(project, delta2) {

  function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {
    var dx = x1 - x0,
        dy = y1 - y0,
        d2 = dx * dx + dy * dy;
    if (d2 > 4 * delta2 && depth--) {
      var a = a0 + a1,
          b = b0 + b1,
          c = c0 + c1,
          m = sqrt(a * a + b * b + c * c),
          phi2 = asin(c /= m),
          lambda2 = abs(abs(c) - 1) < epsilon || abs(lambda0 - lambda1) < epsilon ? (lambda0 + lambda1) / 2 : atan2(b, a),
          p = project(lambda2, phi2),
          x2 = p[0],
          y2 = p[1],
          dx2 = x2 - x0,
          dy2 = y2 - y0,
          dz = dy * dx2 - dx * dy2;
      if (dz * dz / d2 > delta2 // perpendicular projected distance
          || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end
          || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) { // angular distance
        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);
        stream.point(x2, y2);
        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);
      }
    }
  }
  return function(stream) {
    var lambda00, x00, y00, a00, b00, c00, // first point
        lambda0, x0, y0, a0, b0, c0; // previous point

    var resampleStream = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: function() { stream.polygonStart(); resampleStream.lineStart = ringStart; },
      polygonEnd: function() { stream.polygonEnd(); resampleStream.lineStart = lineStart; }
    };

    function point(x, y) {
      x = project(x, y);
      stream.point(x[0], x[1]);
    }

    function lineStart() {
      x0 = NaN;
      resampleStream.point = linePoint;
      stream.lineStart();
    }

    function linePoint(lambda, phi) {
      var c = cartesian([lambda, phi]), p = project(lambda, phi);
      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
      stream.point(x0, y0);
    }

    function lineEnd() {
      resampleStream.point = point;
      stream.lineEnd();
    }

    function ringStart() {
      lineStart();
      resampleStream.point = ringPoint;
      resampleStream.lineEnd = ringEnd;
    }

    function ringPoint(lambda, phi) {
      linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
      resampleStream.point = linePoint;
    }

    function ringEnd() {
      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);
      resampleStream.lineEnd = lineEnd;
      lineEnd();
    }

    return resampleStream;
  };
}

var transformRadians = transformer({
  point: function(x, y) {
    this.stream.point(x * radians, y * radians);
  }
});

function transformRotate(rotate) {
  return transformer({
    point: function(x, y) {
      var r = rotate(x, y);
      return this.stream.point(r[0], r[1]);
    }
  });
}

function scaleTranslate(k, dx, dy, sx, sy) {
  function transform(x, y) {
    x *= sx; y *= sy;
    return [dx + k * x, dy - k * y];
  }
  transform.invert = function(x, y) {
    return [(x - dx) / k * sx, (dy - y) / k * sy];
  };
  return transform;
}

function scaleTranslateRotate(k, dx, dy, sx, sy, alpha) {
  var cosAlpha = cos(alpha),
      sinAlpha = sin(alpha),
      a = cosAlpha * k,
      b = sinAlpha * k,
      ai = cosAlpha / k,
      bi = sinAlpha / k,
      ci = (sinAlpha * dy - cosAlpha * dx) / k,
      fi = (sinAlpha * dx + cosAlpha * dy) / k;
  function transform(x, y) {
    x *= sx; y *= sy;
    return [a * x - b * y + dx, dy - b * x - a * y];
  }
  transform.invert = function(x, y) {
    return [sx * (ai * x - bi * y + ci), sy * (fi - bi * x - ai * y)];
  };
  return transform;
}

function projection(project) {
  return projectionMutator(function() { return project; })();
}

function projectionMutator(projectAt) {
  var project,
      k = 150, // scale
      x = 480, y = 250, // translate
      lambda = 0, phi = 0, // center
      deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, // pre-rotate
      alpha = 0, // post-rotate angle
      sx = 1, // reflectX
      sy = 1, // reflectX
      theta = null, preclip = clipAntimeridian, // pre-clip angle
      x0 = null, y0, x1, y1, postclip = identity, // post-clip extent
      delta2 = 0.5, // precision
      projectResample,
      projectTransform,
      projectRotateTransform,
      cache,
      cacheStream;

  function projection(point) {
    return projectRotateTransform(point[0] * radians, point[1] * radians);
  }

  function invert(point) {
    point = projectRotateTransform.invert(point[0], point[1]);
    return point && [point[0] * degrees, point[1] * degrees];
  }

  projection.stream = function(stream) {
    return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));
  };

  projection.preclip = function(_) {
    return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;
  };

  projection.postclip = function(_) {
    return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;
  };

  projection.clipAngle = function(_) {
    return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees;
  };

  projection.clipExtent = function(_) {
    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
  };

  projection.scale = function(_) {
    return arguments.length ? (k = +_, recenter()) : k;
  };

  projection.translate = function(_) {
    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];
  };

  projection.center = function(_) {
    return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees, phi * degrees];
  };

  projection.rotate = function(_) {
    return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees, deltaPhi * degrees, deltaGamma * degrees];
  };

  projection.angle = function(_) {
    return arguments.length ? (alpha = _ % 360 * radians, recenter()) : alpha * degrees;
  };

  projection.reflectX = function(_) {
    return arguments.length ? (sx = _ ? -1 : 1, recenter()) : sx < 0;
  };

  projection.reflectY = function(_) {
    return arguments.length ? (sy = _ ? -1 : 1, recenter()) : sy < 0;
  };

  projection.precision = function(_) {
    return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);
  };

  projection.fitExtent = function(extent, object) {
    return fitExtent(projection, extent, object);
  };

  projection.fitSize = function(size, object) {
    return fitSize(projection, size, object);
  };

  projection.fitWidth = function(width, object) {
    return fitWidth(projection, width, object);
  };

  projection.fitHeight = function(height, object) {
    return fitHeight(projection, height, object);
  };

  function recenter() {
    var center = scaleTranslateRotate(k, 0, 0, sx, sy, alpha).apply(null, project(lambda, phi)),
        transform = (alpha ? scaleTranslateRotate : scaleTranslate)(k, x - center[0], y - center[1], sx, sy, alpha);
    rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma);
    projectTransform = compose(project, transform);
    projectRotateTransform = compose(rotate, projectTransform);
    projectResample = resample(projectTransform, delta2);
    return reset();
  }

  function reset() {
    cache = cacheStream = null;
    return projection;
  }

  return function() {
    project = projectAt.apply(this, arguments);
    projection.invert = project.invert && invert;
    return recenter();
  };
}

function conicProjection(projectAt) {
  var phi0 = 0,
      phi1 = pi / 3,
      m = projectionMutator(projectAt),
      p = m(phi0, phi1);

  p.parallels = function(_) {
    return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [phi0 * degrees, phi1 * degrees];
  };

  return p;
}

function cylindricalEqualAreaRaw(phi0) {
  var cosPhi0 = cos(phi0);

  function forward(lambda, phi) {
    return [lambda * cosPhi0, sin(phi) / cosPhi0];
  }

  forward.invert = function(x, y) {
    return [x / cosPhi0, asin(y * cosPhi0)];
  };

  return forward;
}

function conicEqualAreaRaw(y0, y1) {
  var sy0 = sin(y0), n = (sy0 + sin(y1)) / 2;

  // Are the parallels symmetrical around the Equator?
  if (abs(n) < epsilon) return cylindricalEqualAreaRaw(y0);

  var c = 1 + sy0 * (2 * n - sy0), r0 = sqrt(c) / n;

  function project(x, y) {
    var r = sqrt(c - 2 * n * sin(y)) / n;
    return [r * sin(x *= n), r0 - r * cos(x)];
  }

  project.invert = function(x, y) {
    var r0y = r0 - y,
        l = atan2(x, abs(r0y)) * sign(r0y);
    if (r0y * n < 0)
      l -= pi * sign(x) * sign(r0y);
    return [l / n, asin((c - (x * x + r0y * r0y) * n * n) / (2 * n))];
  };

  return project;
}

function conicEqualArea() {
  return conicProjection(conicEqualAreaRaw)
      .scale(155.424)
      .center([0, 33.6442]);
}

function albers() {
  return conicEqualArea()
      .parallels([29.5, 45.5])
      .scale(1070)
      .translate([480, 250])
      .rotate([96, 0])
      .center([-0.6, 38.7]);
}

// The projections must have mutually exclusive clip regions on the sphere,
// as this will avoid emitting interleaving lines and polygons.
function multiplex(streams) {
  var n = streams.length;
  return {
    point: function(x, y) { var i = -1; while (++i < n) streams[i].point(x, y); },
    sphere: function() { var i = -1; while (++i < n) streams[i].sphere(); },
    lineStart: function() { var i = -1; while (++i < n) streams[i].lineStart(); },
    lineEnd: function() { var i = -1; while (++i < n) streams[i].lineEnd(); },
    polygonStart: function() { var i = -1; while (++i < n) streams[i].polygonStart(); },
    polygonEnd: function() { var i = -1; while (++i < n) streams[i].polygonEnd(); }
  };
}

// A composite projection for the United States, configured by default for
// 960×500. The projection also works quite well at 960×600 if you change the
// scale to 1285 and adjust the translate accordingly. The set of standard
// parallels for each region comes from USGS, which is published here:
// http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers
function albersUsa() {
  var cache,
      cacheStream,
      lower48 = albers(), lower48Point,
      alaska = conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, // EPSG:3338
      hawaii = conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, // ESRI:102007
      point, pointStream = {point: function(x, y) { point = [x, y]; }};

  function albersUsa(coordinates) {
    var x = coordinates[0], y = coordinates[1];
    return point = null,
        (lower48Point.point(x, y), point)
        || (alaskaPoint.point(x, y), point)
        || (hawaiiPoint.point(x, y), point);
  }

  albersUsa.invert = function(coordinates) {
    var k = lower48.scale(),
        t = lower48.translate(),
        x = (coordinates[0] - t[0]) / k,
        y = (coordinates[1] - t[1]) / k;
    return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska
        : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii
        : lower48).invert(coordinates);
  };

  albersUsa.stream = function(stream) {
    return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);
  };

  albersUsa.precision = function(_) {
    if (!arguments.length) return lower48.precision();
    lower48.precision(_), alaska.precision(_), hawaii.precision(_);
    return reset();
  };

  albersUsa.scale = function(_) {
    if (!arguments.length) return lower48.scale();
    lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);
    return albersUsa.translate(lower48.translate());
  };

  albersUsa.translate = function(_) {
    if (!arguments.length) return lower48.translate();
    var k = lower48.scale(), x = +_[0], y = +_[1];

    lower48Point = lower48
        .translate(_)
        .clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]])
        .stream(pointStream);

    alaskaPoint = alaska
        .translate([x - 0.307 * k, y + 0.201 * k])
        .clipExtent([[x - 0.425 * k + epsilon, y + 0.120 * k + epsilon], [x - 0.214 * k - epsilon, y + 0.234 * k - epsilon]])
        .stream(pointStream);

    hawaiiPoint = hawaii
        .translate([x - 0.205 * k, y + 0.212 * k])
        .clipExtent([[x - 0.214 * k + epsilon, y + 0.166 * k + epsilon], [x - 0.115 * k - epsilon, y + 0.234 * k - epsilon]])
        .stream(pointStream);

    return reset();
  };

  albersUsa.fitExtent = function(extent, object) {
    return fitExtent(albersUsa, extent, object);
  };

  albersUsa.fitSize = function(size, object) {
    return fitSize(albersUsa, size, object);
  };

  albersUsa.fitWidth = function(width, object) {
    return fitWidth(albersUsa, width, object);
  };

  albersUsa.fitHeight = function(height, object) {
    return fitHeight(albersUsa, height, object);
  };

  function reset() {
    cache = cacheStream = null;
    return albersUsa;
  }

  return albersUsa.scale(1070);
}

function azimuthalRaw(scale) {
  return function(x, y) {
    var cx = cos(x),
        cy = cos(y),
        k = scale(cx * cy);
    return [
      k * cy * sin(x),
      k * sin(y)
    ];
  }
}

function azimuthalInvert(angle) {
  return function(x, y) {
    var z = sqrt(x * x + y * y),
        c = angle(z),
        sc = sin(c),
        cc = cos(c);
    return [
      atan2(x * sc, z * cc),
      asin(z && y * sc / z)
    ];
  }
}

var azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {
  return sqrt(2 / (1 + cxcy));
});

azimuthalEqualAreaRaw.invert = azimuthalInvert(function(z) {
  return 2 * asin(z / 2);
});

function azimuthalEqualArea() {
  return projection(azimuthalEqualAreaRaw)
      .scale(124.75)
      .clipAngle(180 - 1e-3);
}

var azimuthalEquidistantRaw = azimuthalRaw(function(c) {
  return (c = acos(c)) && c / sin(c);
});

azimuthalEquidistantRaw.invert = azimuthalInvert(function(z) {
  return z;
});

function azimuthalEquidistant() {
  return projection(azimuthalEquidistantRaw)
      .scale(79.4188)
      .clipAngle(180 - 1e-3);
}

function mercatorRaw(lambda, phi) {
  return [lambda, log(tan((halfPi + phi) / 2))];
}

mercatorRaw.invert = function(x, y) {
  return [x, 2 * atan(exp(y)) - halfPi];
};

function mercator() {
  return mercatorProjection(mercatorRaw)
      .scale(961 / tau);
}

function mercatorProjection(project) {
  var m = projection(project),
      center = m.center,
      scale = m.scale,
      translate = m.translate,
      clipExtent = m.clipExtent,
      x0 = null, y0, x1, y1; // clip extent

  m.scale = function(_) {
    return arguments.length ? (scale(_), reclip()) : scale();
  };

  m.translate = function(_) {
    return arguments.length ? (translate(_), reclip()) : translate();
  };

  m.center = function(_) {
    return arguments.length ? (center(_), reclip()) : center();
  };

  m.clipExtent = function(_) {
    return arguments.length ? ((_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1])), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];
  };

  function reclip() {
    var k = pi * scale(),
        t = m(rotation(m.rotate()).invert([0, 0]));
    return clipExtent(x0 == null
        ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw
        ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]]
        : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);
  }

  return reclip();
}

function tany(y) {
  return tan((halfPi + y) / 2);
}

function conicConformalRaw(y0, y1) {
  var cy0 = cos(y0),
      n = y0 === y1 ? sin(y0) : log(cy0 / cos(y1)) / log(tany(y1) / tany(y0)),
      f = cy0 * pow(tany(y0), n) / n;

  if (!n) return mercatorRaw;

  function project(x, y) {
    if (f > 0) { if (y < -halfPi + epsilon) y = -halfPi + epsilon; }
    else { if (y > halfPi - epsilon) y = halfPi - epsilon; }
    var r = f / pow(tany(y), n);
    return [r * sin(n * x), f - r * cos(n * x)];
  }

  project.invert = function(x, y) {
    var fy = f - y, r = sign(n) * sqrt(x * x + fy * fy),
      l = atan2(x, abs(fy)) * sign(fy);
    if (fy * n < 0)
      l -= pi * sign(x) * sign(fy);
    return [l / n, 2 * atan(pow(f / r, 1 / n)) - halfPi];
  };

  return project;
}

function conicConformal() {
  return conicProjection(conicConformalRaw)
      .scale(109.5)
      .parallels([30, 30]);
}

function equirectangularRaw(lambda, phi) {
  return [lambda, phi];
}

equirectangularRaw.invert = equirectangularRaw;

function equirectangular() {
  return projection(equirectangularRaw)
      .scale(152.63);
}

function conicEquidistantRaw(y0, y1) {
  var cy0 = cos(y0),
      n = y0 === y1 ? sin(y0) : (cy0 - cos(y1)) / (y1 - y0),
      g = cy0 / n + y0;

  if (abs(n) < epsilon) return equirectangularRaw;

  function project(x, y) {
    var gy = g - y, nx = n * x;
    return [gy * sin(nx), g - gy * cos(nx)];
  }

  project.invert = function(x, y) {
    var gy = g - y,
        l = atan2(x, abs(gy)) * sign(gy);
    if (gy * n < 0)
      l -= pi * sign(x) * sign(gy);
    return [l / n, g - sign(n) * sqrt(x * x + gy * gy)];
  };

  return project;
}

function conicEquidistant() {
  return conicProjection(conicEquidistantRaw)
      .scale(131.154)
      .center([0, 13.9389]);
}

var A1 = 1.340264,
    A2 = -0.081106,
    A3 = 0.000893,
    A4 = 0.003796,
    M = sqrt(3) / 2,
    iterations = 12;

function equalEarthRaw(lambda, phi) {
  var l = asin(M * sin(phi)), l2 = l * l, l6 = l2 * l2 * l2;
  return [
    lambda * cos(l) / (M * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2))),
    l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2))
  ];
}

equalEarthRaw.invert = function(x, y) {
  var l = y, l2 = l * l, l6 = l2 * l2 * l2;
  for (var i = 0, delta, fy, fpy; i < iterations; ++i) {
    fy = l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2)) - y;
    fpy = A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2);
    l -= delta = fy / fpy, l2 = l * l, l6 = l2 * l2 * l2;
    if (abs(delta) < epsilon2) break;
  }
  return [
    M * x * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2)) / cos(l),
    asin(sin(l) / M)
  ];
};

function equalEarth() {
  return projection(equalEarthRaw)
      .scale(177.158);
}

function gnomonicRaw(x, y) {
  var cy = cos(y), k = cos(x) * cy;
  return [cy * sin(x) / k, sin(y) / k];
}

gnomonicRaw.invert = azimuthalInvert(atan);

function gnomonic() {
  return projection(gnomonicRaw)
      .scale(144.049)
      .clipAngle(60);
}

function identity$1() {
  var k = 1, tx = 0, ty = 0, sx = 1, sy = 1, // scale, translate and reflect
      alpha = 0, ca, sa, // angle
      x0 = null, y0, x1, y1, // clip extent
      kx = 1, ky = 1,
      transform = transformer({
        point: function(x, y) {
          var p = projection([x, y]);
          this.stream.point(p[0], p[1]);
        }
      }),
      postclip = identity,
      cache,
      cacheStream;

  function reset() {
    kx = k * sx;
    ky = k * sy;
    cache = cacheStream = null;
    return projection;
  }

  function projection (p) {
    var x = p[0] * kx, y = p[1] * ky;
    if (alpha) {
      var t = y * ca - x * sa;
      x = x * ca + y * sa;
      y = t;
    }    
    return [x + tx, y + ty];
  }
  projection.invert = function(p) {
    var x = p[0] - tx, y = p[1] - ty;
    if (alpha) {
      var t = y * ca + x * sa;
      x = x * ca - y * sa;
      y = t;
    }
    return [x / kx, y / ky];
  };
  projection.stream = function(stream) {
    return cache && cacheStream === stream ? cache : cache = transform(postclip(cacheStream = stream));
  };
  projection.postclip = function(_) {
    return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;
  };
  projection.clipExtent = function(_) {
    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
  };
  projection.scale = function(_) {
    return arguments.length ? (k = +_, reset()) : k;
  };
  projection.translate = function(_) {
    return arguments.length ? (tx = +_[0], ty = +_[1], reset()) : [tx, ty];
  };
  projection.angle = function(_) {
    return arguments.length ? (alpha = _ % 360 * radians, sa = sin(alpha), ca = cos(alpha), reset()) : alpha * degrees;
  };
  projection.reflectX = function(_) {
    return arguments.length ? (sx = _ ? -1 : 1, reset()) : sx < 0;
  };
  projection.reflectY = function(_) {
    return arguments.length ? (sy = _ ? -1 : 1, reset()) : sy < 0;
  };
  projection.fitExtent = function(extent, object) {
    return fitExtent(projection, extent, object);
  };
  projection.fitSize = function(size, object) {
    return fitSize(projection, size, object);
  };
  projection.fitWidth = function(width, object) {
    return fitWidth(projection, width, object);
  };
  projection.fitHeight = function(height, object) {
    return fitHeight(projection, height, object);
  };

  return projection;
}

function naturalEarth1Raw(lambda, phi) {
  var phi2 = phi * phi, phi4 = phi2 * phi2;
  return [
    lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (0.003971 * phi2 - 0.001529 * phi4))),
    phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4)))
  ];
}

naturalEarth1Raw.invert = function(x, y) {
  var phi = y, i = 25, delta;
  do {
    var phi2 = phi * phi, phi4 = phi2 * phi2;
    phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))) - y) /
        (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 0.005916 * 11 * phi4)));
  } while (abs(delta) > epsilon && --i > 0);
  return [
    x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (0.003971 - 0.001529 * phi2)))),
    phi
  ];
};

function naturalEarth1() {
  return projection(naturalEarth1Raw)
      .scale(175.295);
}

function orthographicRaw(x, y) {
  return [cos(y) * sin(x), sin(y)];
}

orthographicRaw.invert = azimuthalInvert(asin);

function orthographic() {
  return projection(orthographicRaw)
      .scale(249.5)
      .clipAngle(90 + epsilon);
}

function stereographicRaw(x, y) {
  var cy = cos(y), k = 1 + cos(x) * cy;
  return [cy * sin(x) / k, sin(y) / k];
}

stereographicRaw.invert = azimuthalInvert(function(z) {
  return 2 * atan(z);
});

function stereographic() {
  return projection(stereographicRaw)
      .scale(250)
      .clipAngle(142);
}

function transverseMercatorRaw(lambda, phi) {
  return [log(tan((halfPi + phi) / 2)), -lambda];
}

transverseMercatorRaw.invert = function(x, y) {
  return [-y, 2 * atan(exp(x)) - halfPi];
};

function transverseMercator() {
  var m = mercatorProjection(transverseMercatorRaw),
      center = m.center,
      rotate = m.rotate;

  m.center = function(_) {
    return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);
  };

  m.rotate = function(_) {
    return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);
  };

  return rotate([0, 0, 90])
      .scale(159.155);
}

exports.geoAlbers = albers;
exports.geoAlbersUsa = albersUsa;
exports.geoArea = area;
exports.geoAzimuthalEqualArea = azimuthalEqualArea;
exports.geoAzimuthalEqualAreaRaw = azimuthalEqualAreaRaw;
exports.geoAzimuthalEquidistant = azimuthalEquidistant;
exports.geoAzimuthalEquidistantRaw = azimuthalEquidistantRaw;
exports.geoBounds = bounds;
exports.geoCentroid = centroid;
exports.geoCircle = circle;
exports.geoClipAntimeridian = clipAntimeridian;
exports.geoClipCircle = clipCircle;
exports.geoClipExtent = extent;
exports.geoClipRectangle = clipRectangle;
exports.geoConicConformal = conicConformal;
exports.geoConicConformalRaw = conicConformalRaw;
exports.geoConicEqualArea = conicEqualArea;
exports.geoConicEqualAreaRaw = conicEqualAreaRaw;
exports.geoConicEquidistant = conicEquidistant;
exports.geoConicEquidistantRaw = conicEquidistantRaw;
exports.geoContains = contains;
exports.geoDistance = distance;
exports.geoEqualEarth = equalEarth;
exports.geoEqualEarthRaw = equalEarthRaw;
exports.geoEquirectangular = equirectangular;
exports.geoEquirectangularRaw = equirectangularRaw;
exports.geoGnomonic = gnomonic;
exports.geoGnomonicRaw = gnomonicRaw;
exports.geoGraticule = graticule;
exports.geoGraticule10 = graticule10;
exports.geoIdentity = identity$1;
exports.geoInterpolate = interpolate;
exports.geoLength = length;
exports.geoMercator = mercator;
exports.geoMercatorRaw = mercatorRaw;
exports.geoNaturalEarth1 = naturalEarth1;
exports.geoNaturalEarth1Raw = naturalEarth1Raw;
exports.geoOrthographic = orthographic;
exports.geoOrthographicRaw = orthographicRaw;
exports.geoPath = index;
exports.geoProjection = projection;
exports.geoProjectionMutator = projectionMutator;
exports.geoRotation = rotation;
exports.geoStereographic = stereographic;
exports.geoStereographicRaw = stereographicRaw;
exports.geoStream = geoStream;
exports.geoTransform = transform;
exports.geoTransverseMercator = transverseMercator;
exports.geoTransverseMercatorRaw = transverseMercatorRaw;

Object.defineProperty(exports, '__esModule', { value: true });

})));

},{"d3-array":37}],52:[function(require,module,exports){
// https://d3js.org/d3-hierarchy/ v1.1.9 Copyright 2019 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
typeof define === 'function' && define.amd ? define(['exports'], factory) :
(global = global || self, factory(global.d3 = global.d3 || {}));
}(this, function (exports) { 'use strict';

function defaultSeparation(a, b) {
  return a.parent === b.parent ? 1 : 2;
}

function meanX(children) {
  return children.reduce(meanXReduce, 0) / children.length;
}

function meanXReduce(x, c) {
  return x + c.x;
}

function maxY(children) {
  return 1 + children.reduce(maxYReduce, 0);
}

function maxYReduce(y, c) {
  return Math.max(y, c.y);
}

function leafLeft(node) {
  var children;
  while (children = node.children) node = children[0];
  return node;
}

function leafRight(node) {
  var children;
  while (children = node.children) node = children[children.length - 1];
  return node;
}

function cluster() {
  var separation = defaultSeparation,
      dx = 1,
      dy = 1,
      nodeSize = false;

  function cluster(root) {
    var previousNode,
        x = 0;

    // First walk, computing the initial x & y values.
    root.eachAfter(function(node) {
      var children = node.children;
      if (children) {
        node.x = meanX(children);
        node.y = maxY(children);
      } else {
        node.x = previousNode ? x += separation(node, previousNode) : 0;
        node.y = 0;
        previousNode = node;
      }
    });

    var left = leafLeft(root),
        right = leafRight(root),
        x0 = left.x - separation(left, right) / 2,
        x1 = right.x + separation(right, left) / 2;

    // Second walk, normalizing x & y to the desired size.
    return root.eachAfter(nodeSize ? function(node) {
      node.x = (node.x - root.x) * dx;
      node.y = (root.y - node.y) * dy;
    } : function(node) {
      node.x = (node.x - x0) / (x1 - x0) * dx;
      node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;
    });
  }

  cluster.separation = function(x) {
    return arguments.length ? (separation = x, cluster) : separation;
  };

  cluster.size = function(x) {
    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? null : [dx, dy]);
  };

  cluster.nodeSize = function(x) {
    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? [dx, dy] : null);
  };

  return cluster;
}

function count(node) {
  var sum = 0,
      children = node.children,
      i = children && children.length;
  if (!i) sum = 1;
  else while (--i >= 0) sum += children[i].value;
  node.value = sum;
}

function node_count() {
  return this.eachAfter(count);
}

function node_each(callback) {
  var node = this, current, next = [node], children, i, n;
  do {
    current = next.reverse(), next = [];
    while (node = current.pop()) {
      callback(node), children = node.children;
      if (children) for (i = 0, n = children.length; i < n; ++i) {
        next.push(children[i]);
      }
    }
  } while (next.length);
  return this;
}

function node_eachBefore(callback) {
  var node = this, nodes = [node], children, i;
  while (node = nodes.pop()) {
    callback(node), children = node.children;
    if (children) for (i = children.length - 1; i >= 0; --i) {
      nodes.push(children[i]);
    }
  }
  return this;
}

function node_eachAfter(callback) {
  var node = this, nodes = [node], next = [], children, i, n;
  while (node = nodes.pop()) {
    next.push(node), children = node.children;
    if (children) for (i = 0, n = children.length; i < n; ++i) {
      nodes.push(children[i]);
    }
  }
  while (node = next.pop()) {
    callback(node);
  }
  return this;
}

function node_sum(value) {
  return this.eachAfter(function(node) {
    var sum = +value(node.data) || 0,
        children = node.children,
        i = children && children.length;
    while (--i >= 0) sum += children[i].value;
    node.value = sum;
  });
}

function node_sort(compare) {
  return this.eachBefore(function(node) {
    if (node.children) {
      node.children.sort(compare);
    }
  });
}

function node_path(end) {
  var start = this,
      ancestor = leastCommonAncestor(start, end),
      nodes = [start];
  while (start !== ancestor) {
    start = start.parent;
    nodes.push(start);
  }
  var k = nodes.length;
  while (end !== ancestor) {
    nodes.splice(k, 0, end);
    end = end.parent;
  }
  return nodes;
}

function leastCommonAncestor(a, b) {
  if (a === b) return a;
  var aNodes = a.ancestors(),
      bNodes = b.ancestors(),
      c = null;
  a = aNodes.pop();
  b = bNodes.pop();
  while (a === b) {
    c = a;
    a = aNodes.pop();
    b = bNodes.pop();
  }
  return c;
}

function node_ancestors() {
  var node = this, nodes = [node];
  while (node = node.parent) {
    nodes.push(node);
  }
  return nodes;
}

function node_descendants() {
  var nodes = [];
  this.each(function(node) {
    nodes.push(node);
  });
  return nodes;
}

function node_leaves() {
  var leaves = [];
  this.eachBefore(function(node) {
    if (!node.children) {
      leaves.push(node);
    }
  });
  return leaves;
}

function node_links() {
  var root = this, links = [];
  root.each(function(node) {
    if (node !== root) { // Don’t include the root’s parent, if any.
      links.push({source: node.parent, target: node});
    }
  });
  return links;
}

function hierarchy(data, children) {
  var root = new Node(data),
      valued = +data.value && (root.value = data.value),
      node,
      nodes = [root],
      child,
      childs,
      i,
      n;

  if (children == null) children = defaultChildren;

  while (node = nodes.pop()) {
    if (valued) node.value = +node.data.value;
    if ((childs = children(node.data)) && (n = childs.length)) {
      node.children = new Array(n);
      for (i = n - 1; i >= 0; --i) {
        nodes.push(child = node.children[i] = new Node(childs[i]));
        child.parent = node;
        child.depth = node.depth + 1;
      }
    }
  }

  return root.eachBefore(computeHeight);
}

function node_copy() {
  return hierarchy(this).eachBefore(copyData);
}

function defaultChildren(d) {
  return d.children;
}

function copyData(node) {
  node.data = node.data.data;
}

function computeHeight(node) {
  var height = 0;
  do node.height = height;
  while ((node = node.parent) && (node.height < ++height));
}

function Node(data) {
  this.data = data;
  this.depth =
  this.height = 0;
  this.parent = null;
}

Node.prototype = hierarchy.prototype = {
  constructor: Node,
  count: node_count,
  each: node_each,
  eachAfter: node_eachAfter,
  eachBefore: node_eachBefore,
  sum: node_sum,
  sort: node_sort,
  path: node_path,
  ancestors: node_ancestors,
  descendants: node_descendants,
  leaves: node_leaves,
  links: node_links,
  copy: node_copy
};

var slice = Array.prototype.slice;

function shuffle(array) {
  var m = array.length,
      t,
      i;

  while (m) {
    i = Math.random() * m-- | 0;
    t = array[m];
    array[m] = array[i];
    array[i] = t;
  }

  return array;
}

function enclose(circles) {
  var i = 0, n = (circles = shuffle(slice.call(circles))).length, B = [], p, e;

  while (i < n) {
    p = circles[i];
    if (e && enclosesWeak(e, p)) ++i;
    else e = encloseBasis(B = extendBasis(B, p)), i = 0;
  }

  return e;
}

function extendBasis(B, p) {
  var i, j;

  if (enclosesWeakAll(p, B)) return [p];

  // If we get here then B must have at least one element.
  for (i = 0; i < B.length; ++i) {
    if (enclosesNot(p, B[i])
        && enclosesWeakAll(encloseBasis2(B[i], p), B)) {
      return [B[i], p];
    }
  }

  // If we get here then B must have at least two elements.
  for (i = 0; i < B.length - 1; ++i) {
    for (j = i + 1; j < B.length; ++j) {
      if (enclosesNot(encloseBasis2(B[i], B[j]), p)
          && enclosesNot(encloseBasis2(B[i], p), B[j])
          && enclosesNot(encloseBasis2(B[j], p), B[i])
          && enclosesWeakAll(encloseBasis3(B[i], B[j], p), B)) {
        return [B[i], B[j], p];
      }
    }
  }

  // If we get here then something is very wrong.
  throw new Error;
}

function enclosesNot(a, b) {
  var dr = a.r - b.r, dx = b.x - a.x, dy = b.y - a.y;
  return dr < 0 || dr * dr < dx * dx + dy * dy;
}

function enclosesWeak(a, b) {
  var dr = a.r - b.r + 1e-6, dx = b.x - a.x, dy = b.y - a.y;
  return dr > 0 && dr * dr > dx * dx + dy * dy;
}

function enclosesWeakAll(a, B) {
  for (var i = 0; i < B.length; ++i) {
    if (!enclosesWeak(a, B[i])) {
      return false;
    }
  }
  return true;
}

function encloseBasis(B) {
  switch (B.length) {
    case 1: return encloseBasis1(B[0]);
    case 2: return encloseBasis2(B[0], B[1]);
    case 3: return encloseBasis3(B[0], B[1], B[2]);
  }
}

function encloseBasis1(a) {
  return {
    x: a.x,
    y: a.y,
    r: a.r
  };
}

function encloseBasis2(a, b) {
  var x1 = a.x, y1 = a.y, r1 = a.r,
      x2 = b.x, y2 = b.y, r2 = b.r,
      x21 = x2 - x1, y21 = y2 - y1, r21 = r2 - r1,
      l = Math.sqrt(x21 * x21 + y21 * y21);
  return {
    x: (x1 + x2 + x21 / l * r21) / 2,
    y: (y1 + y2 + y21 / l * r21) / 2,
    r: (l + r1 + r2) / 2
  };
}

function encloseBasis3(a, b, c) {
  var x1 = a.x, y1 = a.y, r1 = a.r,
      x2 = b.x, y2 = b.y, r2 = b.r,
      x3 = c.x, y3 = c.y, r3 = c.r,
      a2 = x1 - x2,
      a3 = x1 - x3,
      b2 = y1 - y2,
      b3 = y1 - y3,
      c2 = r2 - r1,
      c3 = r3 - r1,
      d1 = x1 * x1 + y1 * y1 - r1 * r1,
      d2 = d1 - x2 * x2 - y2 * y2 + r2 * r2,
      d3 = d1 - x3 * x3 - y3 * y3 + r3 * r3,
      ab = a3 * b2 - a2 * b3,
      xa = (b2 * d3 - b3 * d2) / (ab * 2) - x1,
      xb = (b3 * c2 - b2 * c3) / ab,
      ya = (a3 * d2 - a2 * d3) / (ab * 2) - y1,
      yb = (a2 * c3 - a3 * c2) / ab,
      A = xb * xb + yb * yb - 1,
      B = 2 * (r1 + xa * xb + ya * yb),
      C = xa * xa + ya * ya - r1 * r1,
      r = -(A ? (B + Math.sqrt(B * B - 4 * A * C)) / (2 * A) : C / B);
  return {
    x: x1 + xa + xb * r,
    y: y1 + ya + yb * r,
    r: r
  };
}

function place(b, a, c) {
  var dx = b.x - a.x, x, a2,
      dy = b.y - a.y, y, b2,
      d2 = dx * dx + dy * dy;
  if (d2) {
    a2 = a.r + c.r, a2 *= a2;
    b2 = b.r + c.r, b2 *= b2;
    if (a2 > b2) {
      x = (d2 + b2 - a2) / (2 * d2);
      y = Math.sqrt(Math.max(0, b2 / d2 - x * x));
      c.x = b.x - x * dx - y * dy;
      c.y = b.y - x * dy + y * dx;
    } else {
      x = (d2 + a2 - b2) / (2 * d2);
      y = Math.sqrt(Math.max(0, a2 / d2 - x * x));
      c.x = a.x + x * dx - y * dy;
      c.y = a.y + x * dy + y * dx;
    }
  } else {
    c.x = a.x + c.r;
    c.y = a.y;
  }
}

function intersects(a, b) {
  var dr = a.r + b.r - 1e-6, dx = b.x - a.x, dy = b.y - a.y;
  return dr > 0 && dr * dr > dx * dx + dy * dy;
}

function score(node) {
  var a = node._,
      b = node.next._,
      ab = a.r + b.r,
      dx = (a.x * b.r + b.x * a.r) / ab,
      dy = (a.y * b.r + b.y * a.r) / ab;
  return dx * dx + dy * dy;
}

function Node$1(circle) {
  this._ = circle;
  this.next = null;
  this.previous = null;
}

function packEnclose(circles) {
  if (!(n = circles.length)) return 0;

  var a, b, c, n, aa, ca, i, j, k, sj, sk;

  // Place the first circle.
  a = circles[0], a.x = 0, a.y = 0;
  if (!(n > 1)) return a.r;

  // Place the second circle.
  b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;
  if (!(n > 2)) return a.r + b.r;

  // Place the third circle.
  place(b, a, c = circles[2]);

  // Initialize the front-chain using the first three circles a, b and c.
  a = new Node$1(a), b = new Node$1(b), c = new Node$1(c);
  a.next = c.previous = b;
  b.next = a.previous = c;
  c.next = b.previous = a;

  // Attempt to place each remaining circle…
  pack: for (i = 3; i < n; ++i) {
    place(a._, b._, c = circles[i]), c = new Node$1(c);

    // Find the closest intersecting circle on the front-chain, if any.
    // “Closeness” is determined by linear distance along the front-chain.
    // “Ahead” or “behind” is likewise determined by linear distance.
    j = b.next, k = a.previous, sj = b._.r, sk = a._.r;
    do {
      if (sj <= sk) {
        if (intersects(j._, c._)) {
          b = j, a.next = b, b.previous = a, --i;
          continue pack;
        }
        sj += j._.r, j = j.next;
      } else {
        if (intersects(k._, c._)) {
          a = k, a.next = b, b.previous = a, --i;
          continue pack;
        }
        sk += k._.r, k = k.previous;
      }
    } while (j !== k.next);

    // Success! Insert the new circle c between a and b.
    c.previous = a, c.next = b, a.next = b.previous = b = c;

    // Compute the new closest circle pair to the centroid.
    aa = score(a);
    while ((c = c.next) !== b) {
      if ((ca = score(c)) < aa) {
        a = c, aa = ca;
      }
    }
    b = a.next;
  }

  // Compute the enclosing circle of the front chain.
  a = [b._], c = b; while ((c = c.next) !== b) a.push(c._); c = enclose(a);

  // Translate the circles to put the enclosing circle around the origin.
  for (i = 0; i < n; ++i) a = circles[i], a.x -= c.x, a.y -= c.y;

  return c.r;
}

function siblings(circles) {
  packEnclose(circles);
  return circles;
}

function optional(f) {
  return f == null ? null : required(f);
}

function required(f) {
  if (typeof f !== "function") throw new Error;
  return f;
}

function constantZero() {
  return 0;
}

function constant(x) {
  return function() {
    return x;
  };
}

function defaultRadius(d) {
  return Math.sqrt(d.value);
}

function index() {
  var radius = null,
      dx = 1,
      dy = 1,
      padding = constantZero;

  function pack(root) {
    root.x = dx / 2, root.y = dy / 2;
    if (radius) {
      root.eachBefore(radiusLeaf(radius))
          .eachAfter(packChildren(padding, 0.5))
          .eachBefore(translateChild(1));
    } else {
      root.eachBefore(radiusLeaf(defaultRadius))
          .eachAfter(packChildren(constantZero, 1))
          .eachAfter(packChildren(padding, root.r / Math.min(dx, dy)))
          .eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)));
    }
    return root;
  }

  pack.radius = function(x) {
    return arguments.length ? (radius = optional(x), pack) : radius;
  };

  pack.size = function(x) {
    return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [dx, dy];
  };

  pack.padding = function(x) {
    return arguments.length ? (padding = typeof x === "function" ? x : constant(+x), pack) : padding;
  };

  return pack;
}

function radiusLeaf(radius) {
  return function(node) {
    if (!node.children) {
      node.r = Math.max(0, +radius(node) || 0);
    }
  };
}

function packChildren(padding, k) {
  return function(node) {
    if (children = node.children) {
      var children,
          i,
          n = children.length,
          r = padding(node) * k || 0,
          e;

      if (r) for (i = 0; i < n; ++i) children[i].r += r;
      e = packEnclose(children);
      if (r) for (i = 0; i < n; ++i) children[i].r -= r;
      node.r = e + r;
    }
  };
}

function translateChild(k) {
  return function(node) {
    var parent = node.parent;
    node.r *= k;
    if (parent) {
      node.x = parent.x + k * node.x;
      node.y = parent.y + k * node.y;
    }
  };
}

function roundNode(node) {
  node.x0 = Math.round(node.x0);
  node.y0 = Math.round(node.y0);
  node.x1 = Math.round(node.x1);
  node.y1 = Math.round(node.y1);
}

function treemapDice(parent, x0, y0, x1, y1) {
  var nodes = parent.children,
      node,
      i = -1,
      n = nodes.length,
      k = parent.value && (x1 - x0) / parent.value;

  while (++i < n) {
    node = nodes[i], node.y0 = y0, node.y1 = y1;
    node.x0 = x0, node.x1 = x0 += node.value * k;
  }
}

function partition() {
  var dx = 1,
      dy = 1,
      padding = 0,
      round = false;

  function partition(root) {
    var n = root.height + 1;
    root.x0 =
    root.y0 = padding;
    root.x1 = dx;
    root.y1 = dy / n;
    root.eachBefore(positionNode(dy, n));
    if (round) root.eachBefore(roundNode);
    return root;
  }

  function positionNode(dy, n) {
    return function(node) {
      if (node.children) {
        treemapDice(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);
      }
      var x0 = node.x0,
          y0 = node.y0,
          x1 = node.x1 - padding,
          y1 = node.y1 - padding;
      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
      node.x0 = x0;
      node.y0 = y0;
      node.x1 = x1;
      node.y1 = y1;
    };
  }

  partition.round = function(x) {
    return arguments.length ? (round = !!x, partition) : round;
  };

  partition.size = function(x) {
    return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [dx, dy];
  };

  partition.padding = function(x) {
    return arguments.length ? (padding = +x, partition) : padding;
  };

  return partition;
}

var keyPrefix = "$", // Protect against keys like “__proto__”.
    preroot = {depth: -1},
    ambiguous = {};

function defaultId(d) {
  return d.id;
}

function defaultParentId(d) {
  return d.parentId;
}

function stratify() {
  var id = defaultId,
      parentId = defaultParentId;

  function stratify(data) {
    var d,
        i,
        n = data.length,
        root,
        parent,
        node,
        nodes = new Array(n),
        nodeId,
        nodeKey,
        nodeByKey = {};

    for (i = 0; i < n; ++i) {
      d = data[i], node = nodes[i] = new Node(d);
      if ((nodeId = id(d, i, data)) != null && (nodeId += "")) {
        nodeKey = keyPrefix + (node.id = nodeId);
        nodeByKey[nodeKey] = nodeKey in nodeByKey ? ambiguous : node;
      }
    }

    for (i = 0; i < n; ++i) {
      node = nodes[i], nodeId = parentId(data[i], i, data);
      if (nodeId == null || !(nodeId += "")) {
        if (root) throw new Error("multiple roots");
        root = node;
      } else {
        parent = nodeByKey[keyPrefix + nodeId];
        if (!parent) throw new Error("missing: " + nodeId);
        if (parent === ambiguous) throw new Error("ambiguous: " + nodeId);
        if (parent.children) parent.children.push(node);
        else parent.children = [node];
        node.parent = parent;
      }
    }

    if (!root) throw new Error("no root");
    root.parent = preroot;
    root.eachBefore(function(node) { node.depth = node.parent.depth + 1; --n; }).eachBefore(computeHeight);
    root.parent = null;
    if (n > 0) throw new Error("cycle");

    return root;
  }

  stratify.id = function(x) {
    return arguments.length ? (id = required(x), stratify) : id;
  };

  stratify.parentId = function(x) {
    return arguments.length ? (parentId = required(x), stratify) : parentId;
  };

  return stratify;
}

function defaultSeparation$1(a, b) {
  return a.parent === b.parent ? 1 : 2;
}

// function radialSeparation(a, b) {
//   return (a.parent === b.parent ? 1 : 2) / a.depth;
// }

// This function is used to traverse the left contour of a subtree (or
// subforest). It returns the successor of v on this contour. This successor is
// either given by the leftmost child of v or by the thread of v. The function
// returns null if and only if v is on the highest level of its subtree.
function nextLeft(v) {
  var children = v.children;
  return children ? children[0] : v.t;
}

// This function works analogously to nextLeft.
function nextRight(v) {
  var children = v.children;
  return children ? children[children.length - 1] : v.t;
}

// Shifts the current subtree rooted at w+. This is done by increasing
// prelim(w+) and mod(w+) by shift.
function moveSubtree(wm, wp, shift) {
  var change = shift / (wp.i - wm.i);
  wp.c -= change;
  wp.s += shift;
  wm.c += change;
  wp.z += shift;
  wp.m += shift;
}

// All other shifts, applied to the smaller subtrees between w- and w+, are
// performed by this function. To prepare the shifts, we have to adjust
// change(w+), shift(w+), and change(w-).
function executeShifts(v) {
  var shift = 0,
      change = 0,
      children = v.children,
      i = children.length,
      w;
  while (--i >= 0) {
    w = children[i];
    w.z += shift;
    w.m += shift;
    shift += w.s + (change += w.c);
  }
}

// If vi-’s ancestor is a sibling of v, returns vi-’s ancestor. Otherwise,
// returns the specified (default) ancestor.
function nextAncestor(vim, v, ancestor) {
  return vim.a.parent === v.parent ? vim.a : ancestor;
}

function TreeNode(node, i) {
  this._ = node;
  this.parent = null;
  this.children = null;
  this.A = null; // default ancestor
  this.a = this; // ancestor
  this.z = 0; // prelim
  this.m = 0; // mod
  this.c = 0; // change
  this.s = 0; // shift
  this.t = null; // thread
  this.i = i; // number
}

TreeNode.prototype = Object.create(Node.prototype);

function treeRoot(root) {
  var tree = new TreeNode(root, 0),
      node,
      nodes = [tree],
      child,
      children,
      i,
      n;

  while (node = nodes.pop()) {
    if (children = node._.children) {
      node.children = new Array(n = children.length);
      for (i = n - 1; i >= 0; --i) {
        nodes.push(child = node.children[i] = new TreeNode(children[i], i));
        child.parent = node;
      }
    }
  }

  (tree.parent = new TreeNode(null, 0)).children = [tree];
  return tree;
}

// Node-link tree diagram using the Reingold-Tilford "tidy" algorithm
function tree() {
  var separation = defaultSeparation$1,
      dx = 1,
      dy = 1,
      nodeSize = null;

  function tree(root) {
    var t = treeRoot(root);

    // Compute the layout using Buchheim et al.’s algorithm.
    t.eachAfter(firstWalk), t.parent.m = -t.z;
    t.eachBefore(secondWalk);

    // If a fixed node size is specified, scale x and y.
    if (nodeSize) root.eachBefore(sizeNode);

    // If a fixed tree size is specified, scale x and y based on the extent.
    // Compute the left-most, right-most, and depth-most nodes for extents.
    else {
      var left = root,
          right = root,
          bottom = root;
      root.eachBefore(function(node) {
        if (node.x < left.x) left = node;
        if (node.x > right.x) right = node;
        if (node.depth > bottom.depth) bottom = node;
      });
      var s = left === right ? 1 : separation(left, right) / 2,
          tx = s - left.x,
          kx = dx / (right.x + s + tx),
          ky = dy / (bottom.depth || 1);
      root.eachBefore(function(node) {
        node.x = (node.x + tx) * kx;
        node.y = node.depth * ky;
      });
    }

    return root;
  }

  // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is
  // applied recursively to the children of v, as well as the function
  // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the
  // node v is placed to the midpoint of its outermost children.
  function firstWalk(v) {
    var children = v.children,
        siblings = v.parent.children,
        w = v.i ? siblings[v.i - 1] : null;
    if (children) {
      executeShifts(v);
      var midpoint = (children[0].z + children[children.length - 1].z) / 2;
      if (w) {
        v.z = w.z + separation(v._, w._);
        v.m = v.z - midpoint;
      } else {
        v.z = midpoint;
      }
    } else if (w) {
      v.z = w.z + separation(v._, w._);
    }
    v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
  }

  // Computes all real x-coordinates by summing up the modifiers recursively.
  function secondWalk(v) {
    v._.x = v.z + v.parent.m;
    v.m += v.parent.m;
  }

  // The core of the algorithm. Here, a new subtree is combined with the
  // previous subtrees. Threads are used to traverse the inside and outside
  // contours of the left and right subtree up to the highest common level. The
  // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the
  // superscript o means outside and i means inside, the subscript - means left
  // subtree and + means right subtree. For summing up the modifiers along the
  // contour, we use respective variables si+, si-, so-, and so+. Whenever two
  // nodes of the inside contours conflict, we compute the left one of the
  // greatest uncommon ancestors using the function ANCESTOR and call MOVE
  // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.
  // Finally, we add a new thread (if necessary).
  function apportion(v, w, ancestor) {
    if (w) {
      var vip = v,
          vop = v,
          vim = w,
          vom = vip.parent.children[0],
          sip = vip.m,
          sop = vop.m,
          sim = vim.m,
          som = vom.m,
          shift;
      while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {
        vom = nextLeft(vom);
        vop = nextRight(vop);
        vop.a = v;
        shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
        if (shift > 0) {
          moveSubtree(nextAncestor(vim, v, ancestor), v, shift);
          sip += shift;
          sop += shift;
        }
        sim += vim.m;
        sip += vip.m;
        som += vom.m;
        sop += vop.m;
      }
      if (vim && !nextRight(vop)) {
        vop.t = vim;
        vop.m += sim - sop;
      }
      if (vip && !nextLeft(vom)) {
        vom.t = vip;
        vom.m += sip - som;
        ancestor = v;
      }
    }
    return ancestor;
  }

  function sizeNode(node) {
    node.x *= dx;
    node.y = node.depth * dy;
  }

  tree.separation = function(x) {
    return arguments.length ? (separation = x, tree) : separation;
  };

  tree.size = function(x) {
    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : (nodeSize ? null : [dx, dy]);
  };

  tree.nodeSize = function(x) {
    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : (nodeSize ? [dx, dy] : null);
  };

  return tree;
}

function treemapSlice(parent, x0, y0, x1, y1) {
  var nodes = parent.children,
      node,
      i = -1,
      n = nodes.length,
      k = parent.value && (y1 - y0) / parent.value;

  while (++i < n) {
    node = nodes[i], node.x0 = x0, node.x1 = x1;
    node.y0 = y0, node.y1 = y0 += node.value * k;
  }
}

var phi = (1 + Math.sqrt(5)) / 2;

function squarifyRatio(ratio, parent, x0, y0, x1, y1) {
  var rows = [],
      nodes = parent.children,
      row,
      nodeValue,
      i0 = 0,
      i1 = 0,
      n = nodes.length,
      dx, dy,
      value = parent.value,
      sumValue,
      minValue,
      maxValue,
      newRatio,
      minRatio,
      alpha,
      beta;

  while (i0 < n) {
    dx = x1 - x0, dy = y1 - y0;

    // Find the next non-empty node.
    do sumValue = nodes[i1++].value; while (!sumValue && i1 < n);
    minValue = maxValue = sumValue;
    alpha = Math.max(dy / dx, dx / dy) / (value * ratio);
    beta = sumValue * sumValue * alpha;
    minRatio = Math.max(maxValue / beta, beta / minValue);

    // Keep adding nodes while the aspect ratio maintains or improves.
    for (; i1 < n; ++i1) {
      sumValue += nodeValue = nodes[i1].value;
      if (nodeValue < minValue) minValue = nodeValue;
      if (nodeValue > maxValue) maxValue = nodeValue;
      beta = sumValue * sumValue * alpha;
      newRatio = Math.max(maxValue / beta, beta / minValue);
      if (newRatio > minRatio) { sumValue -= nodeValue; break; }
      minRatio = newRatio;
    }

    // Position and record the row orientation.
    rows.push(row = {value: sumValue, dice: dx < dy, children: nodes.slice(i0, i1)});
    if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);
    else treemapSlice(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);
    value -= sumValue, i0 = i1;
  }

  return rows;
}

var squarify = (function custom(ratio) {

  function squarify(parent, x0, y0, x1, y1) {
    squarifyRatio(ratio, parent, x0, y0, x1, y1);
  }

  squarify.ratio = function(x) {
    return custom((x = +x) > 1 ? x : 1);
  };

  return squarify;
})(phi);

function index$1() {
  var tile = squarify,
      round = false,
      dx = 1,
      dy = 1,
      paddingStack = [0],
      paddingInner = constantZero,
      paddingTop = constantZero,
      paddingRight = constantZero,
      paddingBottom = constantZero,
      paddingLeft = constantZero;

  function treemap(root) {
    root.x0 =
    root.y0 = 0;
    root.x1 = dx;
    root.y1 = dy;
    root.eachBefore(positionNode);
    paddingStack = [0];
    if (round) root.eachBefore(roundNode);
    return root;
  }

  function positionNode(node) {
    var p = paddingStack[node.depth],
        x0 = node.x0 + p,
        y0 = node.y0 + p,
        x1 = node.x1 - p,
        y1 = node.y1 - p;
    if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
    if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
    node.x0 = x0;
    node.y0 = y0;
    node.x1 = x1;
    node.y1 = y1;
    if (node.children) {
      p = paddingStack[node.depth + 1] = paddingInner(node) / 2;
      x0 += paddingLeft(node) - p;
      y0 += paddingTop(node) - p;
      x1 -= paddingRight(node) - p;
      y1 -= paddingBottom(node) - p;
      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
      tile(node, x0, y0, x1, y1);
    }
  }

  treemap.round = function(x) {
    return arguments.length ? (round = !!x, treemap) : round;
  };

  treemap.size = function(x) {
    return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];
  };

  treemap.tile = function(x) {
    return arguments.length ? (tile = required(x), treemap) : tile;
  };

  treemap.padding = function(x) {
    return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();
  };

  treemap.paddingInner = function(x) {
    return arguments.length ? (paddingInner = typeof x === "function" ? x : constant(+x), treemap) : paddingInner;
  };

  treemap.paddingOuter = function(x) {
    return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();
  };

  treemap.paddingTop = function(x) {
    return arguments.length ? (paddingTop = typeof x === "function" ? x : constant(+x), treemap) : paddingTop;
  };

  treemap.paddingRight = function(x) {
    return arguments.length ? (paddingRight = typeof x === "function" ? x : constant(+x), treemap) : paddingRight;
  };

  treemap.paddingBottom = function(x) {
    return arguments.length ? (paddingBottom = typeof x === "function" ? x : constant(+x), treemap) : paddingBottom;
  };

  treemap.paddingLeft = function(x) {
    return arguments.length ? (paddingLeft = typeof x === "function" ? x : constant(+x), treemap) : paddingLeft;
  };

  return treemap;
}

function binary(parent, x0, y0, x1, y1) {
  var nodes = parent.children,
      i, n = nodes.length,
      sum, sums = new Array(n + 1);

  for (sums[0] = sum = i = 0; i < n; ++i) {
    sums[i + 1] = sum += nodes[i].value;
  }

  partition(0, n, parent.value, x0, y0, x1, y1);

  function partition(i, j, value, x0, y0, x1, y1) {
    if (i >= j - 1) {
      var node = nodes[i];
      node.x0 = x0, node.y0 = y0;
      node.x1 = x1, node.y1 = y1;
      return;
    }

    var valueOffset = sums[i],
        valueTarget = (value / 2) + valueOffset,
        k = i + 1,
        hi = j - 1;

    while (k < hi) {
      var mid = k + hi >>> 1;
      if (sums[mid] < valueTarget) k = mid + 1;
      else hi = mid;
    }

    if ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k) --k;

    var valueLeft = sums[k] - valueOffset,
        valueRight = value - valueLeft;

    if ((x1 - x0) > (y1 - y0)) {
      var xk = (x0 * valueRight + x1 * valueLeft) / value;
      partition(i, k, valueLeft, x0, y0, xk, y1);
      partition(k, j, valueRight, xk, y0, x1, y1);
    } else {
      var yk = (y0 * valueRight + y1 * valueLeft) / value;
      partition(i, k, valueLeft, x0, y0, x1, yk);
      partition(k, j, valueRight, x0, yk, x1, y1);
    }
  }
}

function sliceDice(parent, x0, y0, x1, y1) {
  (parent.depth & 1 ? treemapSlice : treemapDice)(parent, x0, y0, x1, y1);
}

var resquarify = (function custom(ratio) {

  function resquarify(parent, x0, y0, x1, y1) {
    if ((rows = parent._squarify) && (rows.ratio === ratio)) {
      var rows,
          row,
          nodes,
          i,
          j = -1,
          n,
          m = rows.length,
          value = parent.value;

      while (++j < m) {
        row = rows[j], nodes = row.children;
        for (i = row.value = 0, n = nodes.length; i < n; ++i) row.value += nodes[i].value;
        if (row.dice) treemapDice(row, x0, y0, x1, y0 += (y1 - y0) * row.value / value);
        else treemapSlice(row, x0, y0, x0 += (x1 - x0) * row.value / value, y1);
        value -= row.value;
      }
    } else {
      parent._squarify = rows = squarifyRatio(ratio, parent, x0, y0, x1, y1);
      rows.ratio = ratio;
    }
  }

  resquarify.ratio = function(x) {
    return custom((x = +x) > 1 ? x : 1);
  };

  return resquarify;
})(phi);

exports.cluster = cluster;
exports.hierarchy = hierarchy;
exports.pack = index;
exports.packEnclose = enclose;
exports.packSiblings = siblings;
exports.partition = partition;
exports.stratify = stratify;
exports.tree = tree;
exports.treemap = index$1;
exports.treemapBinary = binary;
exports.treemapDice = treemapDice;
exports.treemapResquarify = resquarify;
exports.treemapSlice = treemapSlice;
exports.treemapSliceDice = sliceDice;
exports.treemapSquarify = squarify;

Object.defineProperty(exports, '__esModule', { value: true });

}));

},{}],53:[function(require,module,exports){
// https://d3js.org/d3-interpolate/ v1.4.0 Copyright 2019 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-color')) :
typeof define === 'function' && define.amd ? define(['exports', 'd3-color'], factory) :
(global = global || self, factory(global.d3 = global.d3 || {}, global.d3));
}(this, function (exports, d3Color) { 'use strict';

function basis(t1, v0, v1, v2, v3) {
  var t2 = t1 * t1, t3 = t2 * t1;
  return ((1 - 3 * t1 + 3 * t2 - t3) * v0
      + (4 - 6 * t2 + 3 * t3) * v1
      + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2
      + t3 * v3) / 6;
}

function basis$1(values) {
  var n = values.length - 1;
  return function(t) {
    var i = t <= 0 ? (t = 0) : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),
        v1 = values[i],
        v2 = values[i + 1],
        v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,
        v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
    return basis((t - i / n) * n, v0, v1, v2, v3);
  };
}

function basisClosed(values) {
  var n = values.length;
  return function(t) {
    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),
        v0 = values[(i + n - 1) % n],
        v1 = values[i % n],
        v2 = values[(i + 1) % n],
        v3 = values[(i + 2) % n];
    return basis((t - i / n) * n, v0, v1, v2, v3);
  };
}

function constant(x) {
  return function() {
    return x;
  };
}

function linear(a, d) {
  return function(t) {
    return a + t * d;
  };
}

function exponential(a, b, y) {
  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {
    return Math.pow(a + t * b, y);
  };
}

function hue(a, b) {
  var d = b - a;
  return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant(isNaN(a) ? b : a);
}

function gamma(y) {
  return (y = +y) === 1 ? nogamma : function(a, b) {
    return b - a ? exponential(a, b, y) : constant(isNaN(a) ? b : a);
  };
}

function nogamma(a, b) {
  var d = b - a;
  return d ? linear(a, d) : constant(isNaN(a) ? b : a);
}

var rgb = (function rgbGamma(y) {
  var color = gamma(y);

  function rgb(start, end) {
    var r = color((start = d3Color.rgb(start)).r, (end = d3Color.rgb(end)).r),
        g = color(start.g, end.g),
        b = color(start.b, end.b),
        opacity = nogamma(start.opacity, end.opacity);
    return function(t) {
      start.r = r(t);
      start.g = g(t);
      start.b = b(t);
      start.opacity = opacity(t);
      return start + "";
    };
  }

  rgb.gamma = rgbGamma;

  return rgb;
})(1);

function rgbSpline(spline) {
  return function(colors) {
    var n = colors.length,
        r = new Array(n),
        g = new Array(n),
        b = new Array(n),
        i, color;
    for (i = 0; i < n; ++i) {
      color = d3Color.rgb(colors[i]);
      r[i] = color.r || 0;
      g[i] = color.g || 0;
      b[i] = color.b || 0;
    }
    r = spline(r);
    g = spline(g);
    b = spline(b);
    color.opacity = 1;
    return function(t) {
      color.r = r(t);
      color.g = g(t);
      color.b = b(t);
      return color + "";
    };
  };
}

var rgbBasis = rgbSpline(basis$1);
var rgbBasisClosed = rgbSpline(basisClosed);

function numberArray(a, b) {
  if (!b) b = [];
  var n = a ? Math.min(b.length, a.length) : 0,
      c = b.slice(),
      i;
  return function(t) {
    for (i = 0; i < n; ++i) c[i] = a[i] * (1 - t) + b[i] * t;
    return c;
  };
}

function isNumberArray(x) {
  return ArrayBuffer.isView(x) && !(x instanceof DataView);
}

function array(a, b) {
  return (isNumberArray(b) ? numberArray : genericArray)(a, b);
}

function genericArray(a, b) {
  var nb = b ? b.length : 0,
      na = a ? Math.min(nb, a.length) : 0,
      x = new Array(na),
      c = new Array(nb),
      i;

  for (i = 0; i < na; ++i) x[i] = value(a[i], b[i]);
  for (; i < nb; ++i) c[i] = b[i];

  return function(t) {
    for (i = 0; i < na; ++i) c[i] = x[i](t);
    return c;
  };
}

function date(a, b) {
  var d = new Date;
  return a = +a, b = +b, function(t) {
    return d.setTime(a * (1 - t) + b * t), d;
  };
}

function number(a, b) {
  return a = +a, b = +b, function(t) {
    return a * (1 - t) + b * t;
  };
}

function object(a, b) {
  var i = {},
      c = {},
      k;

  if (a === null || typeof a !== "object") a = {};
  if (b === null || typeof b !== "object") b = {};

  for (k in b) {
    if (k in a) {
      i[k] = value(a[k], b[k]);
    } else {
      c[k] = b[k];
    }
  }

  return function(t) {
    for (k in i) c[k] = i[k](t);
    return c;
  };
}

var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
    reB = new RegExp(reA.source, "g");

function zero(b) {
  return function() {
    return b;
  };
}

function one(b) {
  return function(t) {
    return b(t) + "";
  };
}

function string(a, b) {
  var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b
      am, // current match in a
      bm, // current match in b
      bs, // string preceding current number in b, if any
      i = -1, // index in s
      s = [], // string constants and placeholders
      q = []; // number interpolators

  // Coerce inputs to strings.
  a = a + "", b = b + "";

  // Interpolate pairs of numbers in a & b.
  while ((am = reA.exec(a))
      && (bm = reB.exec(b))) {
    if ((bs = bm.index) > bi) { // a string precedes the next number in b
      bs = b.slice(bi, bs);
      if (s[i]) s[i] += bs; // coalesce with previous string
      else s[++i] = bs;
    }
    if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match
      if (s[i]) s[i] += bm; // coalesce with previous string
      else s[++i] = bm;
    } else { // interpolate non-matching numbers
      s[++i] = null;
      q.push({i: i, x: number(am, bm)});
    }
    bi = reB.lastIndex;
  }

  // Add remains of b.
  if (bi < b.length) {
    bs = b.slice(bi);
    if (s[i]) s[i] += bs; // coalesce with previous string
    else s[++i] = bs;
  }

  // Special optimization for only a single match.
  // Otherwise, interpolate each of the numbers and rejoin the string.
  return s.length < 2 ? (q[0]
      ? one(q[0].x)
      : zero(b))
      : (b = q.length, function(t) {
          for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
          return s.join("");
        });
}

function value(a, b) {
  var t = typeof b, c;
  return b == null || t === "boolean" ? constant(b)
      : (t === "number" ? number
      : t === "string" ? ((c = d3Color.color(b)) ? (b = c, rgb) : string)
      : b instanceof d3Color.color ? rgb
      : b instanceof Date ? date
      : isNumberArray(b) ? numberArray
      : Array.isArray(b) ? genericArray
      : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object
      : number)(a, b);
}

function discrete(range) {
  var n = range.length;
  return function(t) {
    return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
  };
}

function hue$1(a, b) {
  var i = hue(+a, +b);
  return function(t) {
    var x = i(t);
    return x - 360 * Math.floor(x / 360);
  };
}

function round(a, b) {
  return a = +a, b = +b, function(t) {
    return Math.round(a * (1 - t) + b * t);
  };
}

var degrees = 180 / Math.PI;

var identity = {
  translateX: 0,
  translateY: 0,
  rotate: 0,
  skewX: 0,
  scaleX: 1,
  scaleY: 1
};

function decompose(a, b, c, d, e, f) {
  var scaleX, scaleY, skewX;
  if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
  if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
  if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
  if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
  return {
    translateX: e,
    translateY: f,
    rotate: Math.atan2(b, a) * degrees,
    skewX: Math.atan(skewX) * degrees,
    scaleX: scaleX,
    scaleY: scaleY
  };
}

var cssNode,
    cssRoot,
    cssView,
    svgNode;

function parseCss(value) {
  if (value === "none") return identity;
  if (!cssNode) cssNode = document.createElement("DIV"), cssRoot = document.documentElement, cssView = document.defaultView;
  cssNode.style.transform = value;
  value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue("transform");
  cssRoot.removeChild(cssNode);
  value = value.slice(7, -1).split(",");
  return decompose(+value[0], +value[1], +value[2], +value[3], +value[4], +value[5]);
}

function parseSvg(value) {
  if (value == null) return identity;
  if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
  svgNode.setAttribute("transform", value);
  if (!(value = svgNode.transform.baseVal.consolidate())) return identity;
  value = value.matrix;
  return decompose(value.a, value.b, value.c, value.d, value.e, value.f);
}

function interpolateTransform(parse, pxComma, pxParen, degParen) {

  function pop(s) {
    return s.length ? s.pop() + " " : "";
  }

  function translate(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push("translate(", null, pxComma, null, pxParen);
      q.push({i: i - 4, x: number(xa, xb)}, {i: i - 2, x: number(ya, yb)});
    } else if (xb || yb) {
      s.push("translate(" + xb + pxComma + yb + pxParen);
    }
  }

  function rotate(a, b, s, q) {
    if (a !== b) {
      if (a - b > 180) b += 360; else if (b - a > 180) a += 360; // shortest path
      q.push({i: s.push(pop(s) + "rotate(", null, degParen) - 2, x: number(a, b)});
    } else if (b) {
      s.push(pop(s) + "rotate(" + b + degParen);
    }
  }

  function skewX(a, b, s, q) {
    if (a !== b) {
      q.push({i: s.push(pop(s) + "skewX(", null, degParen) - 2, x: number(a, b)});
    } else if (b) {
      s.push(pop(s) + "skewX(" + b + degParen);
    }
  }

  function scale(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push(pop(s) + "scale(", null, ",", null, ")");
      q.push({i: i - 4, x: number(xa, xb)}, {i: i - 2, x: number(ya, yb)});
    } else if (xb !== 1 || yb !== 1) {
      s.push(pop(s) + "scale(" + xb + "," + yb + ")");
    }
  }

  return function(a, b) {
    var s = [], // string constants and placeholders
        q = []; // number interpolators
    a = parse(a), b = parse(b);
    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
    rotate(a.rotate, b.rotate, s, q);
    skewX(a.skewX, b.skewX, s, q);
    scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
    a = b = null; // gc
    return function(t) {
      var i = -1, n = q.length, o;
      while (++i < n) s[(o = q[i]).i] = o.x(t);
      return s.join("");
    };
  };
}

var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");

var rho = Math.SQRT2,
    rho2 = 2,
    rho4 = 4,
    epsilon2 = 1e-12;

function cosh(x) {
  return ((x = Math.exp(x)) + 1 / x) / 2;
}

function sinh(x) {
  return ((x = Math.exp(x)) - 1 / x) / 2;
}

function tanh(x) {
  return ((x = Math.exp(2 * x)) - 1) / (x + 1);
}

// p0 = [ux0, uy0, w0]
// p1 = [ux1, uy1, w1]
function zoom(p0, p1) {
  var ux0 = p0[0], uy0 = p0[1], w0 = p0[2],
      ux1 = p1[0], uy1 = p1[1], w1 = p1[2],
      dx = ux1 - ux0,
      dy = uy1 - uy0,
      d2 = dx * dx + dy * dy,
      i,
      S;

  // Special case for u0 ≅ u1.
  if (d2 < epsilon2) {
    S = Math.log(w1 / w0) / rho;
    i = function(t) {
      return [
        ux0 + t * dx,
        uy0 + t * dy,
        w0 * Math.exp(rho * t * S)
      ];
    };
  }

  // General case.
  else {
    var d1 = Math.sqrt(d2),
        b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),
        b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),
        r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),
        r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
    S = (r1 - r0) / rho;
    i = function(t) {
      var s = t * S,
          coshr0 = cosh(r0),
          u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
      return [
        ux0 + u * dx,
        uy0 + u * dy,
        w0 * coshr0 / cosh(rho * s + r0)
      ];
    };
  }

  i.duration = S * 1000;

  return i;
}

function hsl(hue) {
  return function(start, end) {
    var h = hue((start = d3Color.hsl(start)).h, (end = d3Color.hsl(end)).h),
        s = nogamma(start.s, end.s),
        l = nogamma(start.l, end.l),
        opacity = nogamma(start.opacity, end.opacity);
    return function(t) {
      start.h = h(t);
      start.s = s(t);
      start.l = l(t);
      start.opacity = opacity(t);
      return start + "";
    };
  }
}

var hsl$1 = hsl(hue);
var hslLong = hsl(nogamma);

function lab(start, end) {
  var l = nogamma((start = d3Color.lab(start)).l, (end = d3Color.lab(end)).l),
      a = nogamma(start.a, end.a),
      b = nogamma(start.b, end.b),
      opacity = nogamma(start.opacity, end.opacity);
  return function(t) {
    start.l = l(t);
    start.a = a(t);
    start.b = b(t);
    start.opacity = opacity(t);
    return start + "";
  };
}

function hcl(hue) {
  return function(start, end) {
    var h = hue((start = d3Color.hcl(start)).h, (end = d3Color.hcl(end)).h),
        c = nogamma(start.c, end.c),
        l = nogamma(start.l, end.l),
        opacity = nogamma(start.opacity, end.opacity);
    return function(t) {
      start.h = h(t);
      start.c = c(t);
      start.l = l(t);
      start.opacity = opacity(t);
      return start + "";
    };
  }
}

var hcl$1 = hcl(hue);
var hclLong = hcl(nogamma);

function cubehelix(hue) {
  return (function cubehelixGamma(y) {
    y = +y;

    function cubehelix(start, end) {
      var h = hue((start = d3Color.cubehelix(start)).h, (end = d3Color.cubehelix(end)).h),
          s = nogamma(start.s, end.s),
          l = nogamma(start.l, end.l),
          opacity = nogamma(start.opacity, end.opacity);
      return function(t) {
        start.h = h(t);
        start.s = s(t);
        start.l = l(Math.pow(t, y));
        start.opacity = opacity(t);
        return start + "";
      };
    }

    cubehelix.gamma = cubehelixGamma;

    return cubehelix;
  })(1);
}

var cubehelix$1 = cubehelix(hue);
var cubehelixLong = cubehelix(nogamma);

function piecewise(interpolate, values) {
  var i = 0, n = values.length - 1, v = values[0], I = new Array(n < 0 ? 0 : n);
  while (i < n) I[i] = interpolate(v, v = values[++i]);
  return function(t) {
    var i = Math.max(0, Math.min(n - 1, Math.floor(t *= n)));
    return I[i](t - i);
  };
}

function quantize(interpolator, n) {
  var samples = new Array(n);
  for (var i = 0; i < n; ++i) samples[i] = interpolator(i / (n - 1));
  return samples;
}

exports.interpolate = value;
exports.interpolateArray = array;
exports.interpolateBasis = basis$1;
exports.interpolateBasisClosed = basisClosed;
exports.interpolateCubehelix = cubehelix$1;
exports.interpolateCubehelixLong = cubehelixLong;
exports.interpolateDate = date;
exports.interpolateDiscrete = discrete;
exports.interpolateHcl = hcl$1;
exports.interpolateHclLong = hclLong;
exports.interpolateHsl = hsl$1;
exports.interpolateHslLong = hslLong;
exports.interpolateHue = hue$1;
exports.interpolateLab = lab;
exports.interpolateNumber = number;
exports.interpolateNumberArray = numberArray;
exports.interpolateObject = object;
exports.interpolateRgb = rgb;
exports.interpolateRgbBasis = rgbBasis;
exports.interpolateRgbBasisClosed = rgbBasisClosed;
exports.interpolateRound = round;
exports.interpolateString = string;
exports.interpolateTransformCss = interpolateTransformCss;
exports.interpolateTransformSvg = interpolateTransformSvg;
exports.interpolateZoom = zoom;
exports.piecewise = piecewise;
exports.quantize = quantize;

Object.defineProperty(exports, '__esModule', { value: true });

}));

},{"d3-color":42}],54:[function(require,module,exports){
// https://d3js.org/d3-path/ v1.0.9 Copyright 2019 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
typeof define === 'function' && define.amd ? define(['exports'], factory) :
(global = global || self, factory(global.d3 = global.d3 || {}));
}(this, function (exports) { 'use strict';

var pi = Math.PI,
    tau = 2 * pi,
    epsilon = 1e-6,
    tauEpsilon = tau - epsilon;

function Path() {
  this._x0 = this._y0 = // start of current subpath
  this._x1 = this._y1 = null; // end of current subpath
  this._ = "";
}

function path() {
  return new Path;
}

Path.prototype = path.prototype = {
  constructor: Path,
  moveTo: function(x, y) {
    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y);
  },
  closePath: function() {
    if (this._x1 !== null) {
      this._x1 = this._x0, this._y1 = this._y0;
      this._ += "Z";
    }
  },
  lineTo: function(x, y) {
    this._ += "L" + (this._x1 = +x) + "," + (this._y1 = +y);
  },
  quadraticCurveTo: function(x1, y1, x, y) {
    this._ += "Q" + (+x1) + "," + (+y1) + "," + (this._x1 = +x) + "," + (this._y1 = +y);
  },
  bezierCurveTo: function(x1, y1, x2, y2, x, y) {
    this._ += "C" + (+x1) + "," + (+y1) + "," + (+x2) + "," + (+y2) + "," + (this._x1 = +x) + "," + (this._y1 = +y);
  },
  arcTo: function(x1, y1, x2, y2, r) {
    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
    var x0 = this._x1,
        y0 = this._y1,
        x21 = x2 - x1,
        y21 = y2 - y1,
        x01 = x0 - x1,
        y01 = y0 - y1,
        l01_2 = x01 * x01 + y01 * y01;

    // Is the radius negative? Error.
    if (r < 0) throw new Error("negative radius: " + r);

    // Is this path empty? Move to (x1,y1).
    if (this._x1 === null) {
      this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
    }

    // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.
    else if (!(l01_2 > epsilon));

    // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?
    // Equivalently, is (x1,y1) coincident with (x2,y2)?
    // Or, is the radius zero? Line to (x1,y1).
    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {
      this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
    }

    // Otherwise, draw an arc!
    else {
      var x20 = x2 - x0,
          y20 = y2 - y0,
          l21_2 = x21 * x21 + y21 * y21,
          l20_2 = x20 * x20 + y20 * y20,
          l21 = Math.sqrt(l21_2),
          l01 = Math.sqrt(l01_2),
          l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),
          t01 = l / l01,
          t21 = l / l21;

      // If the start tangent is not coincident with (x0,y0), line to.
      if (Math.abs(t01 - 1) > epsilon) {
        this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
      }

      this._ += "A" + r + "," + r + ",0,0," + (+(y01 * x20 > x01 * y20)) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
    }
  },
  arc: function(x, y, r, a0, a1, ccw) {
    x = +x, y = +y, r = +r, ccw = !!ccw;
    var dx = r * Math.cos(a0),
        dy = r * Math.sin(a0),
        x0 = x + dx,
        y0 = y + dy,
        cw = 1 ^ ccw,
        da = ccw ? a0 - a1 : a1 - a0;

    // Is the radius negative? Error.
    if (r < 0) throw new Error("negative radius: " + r);

    // Is this path empty? Move to (x0,y0).
    if (this._x1 === null) {
      this._ += "M" + x0 + "," + y0;
    }

    // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).
    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {
      this._ += "L" + x0 + "," + y0;
    }

    // Is this arc empty? We’re done.
    if (!r) return;

    // Does the angle go the wrong way? Flip the direction.
    if (da < 0) da = da % tau + tau;

    // Is this a complete circle? Draw two arcs to complete the circle.
    if (da > tauEpsilon) {
      this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x - dx) + "," + (y - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
    }

    // Is this arc non-empty? Draw an arc!
    else if (da > epsilon) {
      this._ += "A" + r + "," + r + ",0," + (+(da >= pi)) + "," + cw + "," + (this._x1 = x + r * Math.cos(a1)) + "," + (this._y1 = y + r * Math.sin(a1));
    }
  },
  rect: function(x, y, w, h) {
    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y) + "h" + (+w) + "v" + (+h) + "h" + (-w) + "Z";
  },
  toString: function() {
    return this._;
  }
};

exports.path = path;

Object.defineProperty(exports, '__esModule', { value: true });

}));

},{}],55:[function(require,module,exports){
// https://d3js.org/d3-polygon/ v1.0.6 Copyright 2019 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
typeof define === 'function' && define.amd ? define(['exports'], factory) :
(global = global || self, factory(global.d3 = global.d3 || {}));
}(this, function (exports) { 'use strict';

function area(polygon) {
  var i = -1,
      n = polygon.length,
      a,
      b = polygon[n - 1],
      area = 0;

  while (++i < n) {
    a = b;
    b = polygon[i];
    area += a[1] * b[0] - a[0] * b[1];
  }

  return area / 2;
}

function centroid(polygon) {
  var i = -1,
      n = polygon.length,
      x = 0,
      y = 0,
      a,
      b = polygon[n - 1],
      c,
      k = 0;

  while (++i < n) {
    a = b;
    b = polygon[i];
    k += c = a[0] * b[1] - b[0] * a[1];
    x += (a[0] + b[0]) * c;
    y += (a[1] + b[1]) * c;
  }

  return k *= 3, [x / k, y / k];
}

// Returns the 2D cross product of AB and AC vectors, i.e., the z-component of
// the 3D cross product in a quadrant I Cartesian coordinate system (+x is
// right, +y is up). Returns a positive value if ABC is counter-clockwise,
// negative if clockwise, and zero if the points are collinear.
function cross(a, b, c) {
  return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);
}

function lexicographicOrder(a, b) {
  return a[0] - b[0] || a[1] - b[1];
}

// Computes the upper convex hull per the monotone chain algorithm.
// Assumes points.length >= 3, is sorted by x, unique in y.
// Returns an array of indices into points in left-to-right order.
function computeUpperHullIndexes(points) {
  var n = points.length,
      indexes = [0, 1],
      size = 2;

  for (var i = 2; i < n; ++i) {
    while (size > 1 && cross(points[indexes[size - 2]], points[indexes[size - 1]], points[i]) <= 0) --size;
    indexes[size++] = i;
  }

  return indexes.slice(0, size); // remove popped points
}

function hull(points) {
  if ((n = points.length) < 3) return null;

  var i,
      n,
      sortedPoints = new Array(n),
      flippedPoints = new Array(n);

  for (i = 0; i < n; ++i) sortedPoints[i] = [+points[i][0], +points[i][1], i];
  sortedPoints.sort(lexicographicOrder);
  for (i = 0; i < n; ++i) flippedPoints[i] = [sortedPoints[i][0], -sortedPoints[i][1]];

  var upperIndexes = computeUpperHullIndexes(sortedPoints),
      lowerIndexes = computeUpperHullIndexes(flippedPoints);

  // Construct the hull polygon, removing possible duplicate endpoints.
  var skipLeft = lowerIndexes[0] === upperIndexes[0],
      skipRight = lowerIndexes[lowerIndexes.length - 1] === upperIndexes[upperIndexes.length - 1],
      hull = [];

  // Add upper hull in right-to-l order.
  // Then add lower hull in left-to-right order.
  for (i = upperIndexes.length - 1; i >= 0; --i) hull.push(points[sortedPoints[upperIndexes[i]][2]]);
  for (i = +skipLeft; i < lowerIndexes.length - skipRight; ++i) hull.push(points[sortedPoints[lowerIndexes[i]][2]]);

  return hull;
}

function contains(polygon, point) {
  var n = polygon.length,
      p = polygon[n - 1],
      x = point[0], y = point[1],
      x0 = p[0], y0 = p[1],
      x1, y1,
      inside = false;

  for (var i = 0; i < n; ++i) {
    p = polygon[i], x1 = p[0], y1 = p[1];
    if (((y1 > y) !== (y0 > y)) && (x < (x0 - x1) * (y - y1) / (y0 - y1) + x1)) inside = !inside;
    x0 = x1, y0 = y1;
  }

  return inside;
}

function length(polygon) {
  var i = -1,
      n = polygon.length,
      b = polygon[n - 1],
      xa,
      ya,
      xb = b[0],
      yb = b[1],
      perimeter = 0;

  while (++i < n) {
    xa = xb;
    ya = yb;
    b = polygon[i];
    xb = b[0];
    yb = b[1];
    xa -= xb;
    ya -= yb;
    perimeter += Math.sqrt(xa * xa + ya * ya);
  }

  return perimeter;
}

exports.polygonArea = area;
exports.polygonCentroid = centroid;
exports.polygonContains = contains;
exports.polygonHull = hull;
exports.polygonLength = length;

Object.defineProperty(exports, '__esModule', { value: true });

}));

},{}],56:[function(require,module,exports){
// https://d3js.org/d3-quadtree/ v1.0.7 Copyright 2019 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
typeof define === 'function' && define.amd ? define(['exports'], factory) :
(global = global || self, factory(global.d3 = global.d3 || {}));
}(this, function (exports) { 'use strict';

function tree_add(d) {
  var x = +this._x.call(null, d),
      y = +this._y.call(null, d);
  return add(this.cover(x, y), x, y, d);
}

function add(tree, x, y, d) {
  if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points

  var parent,
      node = tree._root,
      leaf = {data: d},
      x0 = tree._x0,
      y0 = tree._y0,
      x1 = tree._x1,
      y1 = tree._y1,
      xm,
      ym,
      xp,
      yp,
      right,
      bottom,
      i,
      j;

  // If the tree is empty, initialize the root as a leaf.
  if (!node) return tree._root = leaf, tree;

  // Find the existing leaf for the new point, or add it.
  while (node.length) {
    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
    if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;
  }

  // Is the new point is exactly coincident with the existing point?
  xp = +tree._x.call(null, node.data);
  yp = +tree._y.call(null, node.data);
  if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;

  // Otherwise, split the leaf node until the old and new point are separated.
  do {
    parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);
    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
  } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | (xp >= xm)));
  return parent[j] = node, parent[i] = leaf, tree;
}

function addAll(data) {
  var d, i, n = data.length,
      x,
      y,
      xz = new Array(n),
      yz = new Array(n),
      x0 = Infinity,
      y0 = Infinity,
      x1 = -Infinity,
      y1 = -Infinity;

  // Compute the points and their extent.
  for (i = 0; i < n; ++i) {
    if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;
    xz[i] = x;
    yz[i] = y;
    if (x < x0) x0 = x;
    if (x > x1) x1 = x;
    if (y < y0) y0 = y;
    if (y > y1) y1 = y;
  }

  // If there were no (valid) points, abort.
  if (x0 > x1 || y0 > y1) return this;

  // Expand the tree to cover the new points.
  this.cover(x0, y0).cover(x1, y1);

  // Add the new points.
  for (i = 0; i < n; ++i) {
    add(this, xz[i], yz[i], data[i]);
  }

  return this;
}

function tree_cover(x, y) {
  if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points

  var x0 = this._x0,
      y0 = this._y0,
      x1 = this._x1,
      y1 = this._y1;

  // If the quadtree has no extent, initialize them.
  // Integer extent are necessary so that if we later double the extent,
  // the existing quadrant boundaries don’t change due to floating point error!
  if (isNaN(x0)) {
    x1 = (x0 = Math.floor(x)) + 1;
    y1 = (y0 = Math.floor(y)) + 1;
  }

  // Otherwise, double repeatedly to cover.
  else {
    var z = x1 - x0,
        node = this._root,
        parent,
        i;

    while (x0 > x || x >= x1 || y0 > y || y >= y1) {
      i = (y < y0) << 1 | (x < x0);
      parent = new Array(4), parent[i] = node, node = parent, z *= 2;
      switch (i) {
        case 0: x1 = x0 + z, y1 = y0 + z; break;
        case 1: x0 = x1 - z, y1 = y0 + z; break;
        case 2: x1 = x0 + z, y0 = y1 - z; break;
        case 3: x0 = x1 - z, y0 = y1 - z; break;
      }
    }

    if (this._root && this._root.length) this._root = node;
  }

  this._x0 = x0;
  this._y0 = y0;
  this._x1 = x1;
  this._y1 = y1;
  return this;
}

function tree_data() {
  var data = [];
  this.visit(function(node) {
    if (!node.length) do data.push(node.data); while (node = node.next)
  });
  return data;
}

function tree_extent(_) {
  return arguments.length
      ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1])
      : isNaN(this._x0) ? undefined : [[this._x0, this._y0], [this._x1, this._y1]];
}

function Quad(node, x0, y0, x1, y1) {
  this.node = node;
  this.x0 = x0;
  this.y0 = y0;
  this.x1 = x1;
  this.y1 = y1;
}

function tree_find(x, y, radius) {
  var data,
      x0 = this._x0,
      y0 = this._y0,
      x1,
      y1,
      x2,
      y2,
      x3 = this._x1,
      y3 = this._y1,
      quads = [],
      node = this._root,
      q,
      i;

  if (node) quads.push(new Quad(node, x0, y0, x3, y3));
  if (radius == null) radius = Infinity;
  else {
    x0 = x - radius, y0 = y - radius;
    x3 = x + radius, y3 = y + radius;
    radius *= radius;
  }

  while (q = quads.pop()) {

    // Stop searching if this quadrant can’t contain a closer node.
    if (!(node = q.node)
        || (x1 = q.x0) > x3
        || (y1 = q.y0) > y3
        || (x2 = q.x1) < x0
        || (y2 = q.y1) < y0) continue;

    // Bisect the current quadrant.
    if (node.length) {
      var xm = (x1 + x2) / 2,
          ym = (y1 + y2) / 2;

      quads.push(
        new Quad(node[3], xm, ym, x2, y2),
        new Quad(node[2], x1, ym, xm, y2),
        new Quad(node[1], xm, y1, x2, ym),
        new Quad(node[0], x1, y1, xm, ym)
      );

      // Visit the closest quadrant first.
      if (i = (y >= ym) << 1 | (x >= xm)) {
        q = quads[quads.length - 1];
        quads[quads.length - 1] = quads[quads.length - 1 - i];
        quads[quads.length - 1 - i] = q;
      }
    }

    // Visit this point. (Visiting coincident points isn’t necessary!)
    else {
      var dx = x - +this._x.call(null, node.data),
          dy = y - +this._y.call(null, node.data),
          d2 = dx * dx + dy * dy;
      if (d2 < radius) {
        var d = Math.sqrt(radius = d2);
        x0 = x - d, y0 = y - d;
        x3 = x + d, y3 = y + d;
        data = node.data;
      }
    }
  }

  return data;
}

function tree_remove(d) {
  if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points

  var parent,
      node = this._root,
      retainer,
      previous,
      next,
      x0 = this._x0,
      y0 = this._y0,
      x1 = this._x1,
      y1 = this._y1,
      x,
      y,
      xm,
      ym,
      right,
      bottom,
      i,
      j;

  // If the tree is empty, initialize the root as a leaf.
  if (!node) return this;

  // Find the leaf node for the point.
  // While descending, also retain the deepest parent with a non-removed sibling.
  if (node.length) while (true) {
    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
    if (!(parent = node, node = node[i = bottom << 1 | right])) return this;
    if (!node.length) break;
    if (parent[(i + 1) & 3] || parent[(i + 2) & 3] || parent[(i + 3) & 3]) retainer = parent, j = i;
  }

  // Find the point to remove.
  while (node.data !== d) if (!(previous = node, node = node.next)) return this;
  if (next = node.next) delete node.next;

  // If there are multiple coincident points, remove just the point.
  if (previous) return (next ? previous.next = next : delete previous.next), this;

  // If this is the root point, remove it.
  if (!parent) return this._root = next, this;

  // Remove this leaf.
  next ? parent[i] = next : delete parent[i];

  // If the parent now contains exactly one leaf, collapse superfluous parents.
  if ((node = parent[0] || parent[1] || parent[2] || parent[3])
      && node === (parent[3] || parent[2] || parent[1] || parent[0])
      && !node.length) {
    if (retainer) retainer[j] = node;
    else this._root = node;
  }

  return this;
}

function removeAll(data) {
  for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);
  return this;
}

function tree_root() {
  return this._root;
}

function tree_size() {
  var size = 0;
  this.visit(function(node) {
    if (!node.length) do ++size; while (node = node.next)
  });
  return size;
}

function tree_visit(callback) {
  var quads = [], q, node = this._root, child, x0, y0, x1, y1;
  if (node) quads.push(new Quad(node, this._x0, this._y0, this._x1, this._y1));
  while (q = quads.pop()) {
    if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {
      var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
      if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));
      if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));
      if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));
      if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));
    }
  }
  return this;
}

function tree_visitAfter(callback) {
  var quads = [], next = [], q;
  if (this._root) quads.push(new Quad(this._root, this._x0, this._y0, this._x1, this._y1));
  while (q = quads.pop()) {
    var node = q.node;
    if (node.length) {
      var child, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
      if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));
      if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));
      if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));
      if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));
    }
    next.push(q);
  }
  while (q = next.pop()) {
    callback(q.node, q.x0, q.y0, q.x1, q.y1);
  }
  return this;
}

function defaultX(d) {
  return d[0];
}

function tree_x(_) {
  return arguments.length ? (this._x = _, this) : this._x;
}

function defaultY(d) {
  return d[1];
}

function tree_y(_) {
  return arguments.length ? (this._y = _, this) : this._y;
}

function quadtree(nodes, x, y) {
  var tree = new Quadtree(x == null ? defaultX : x, y == null ? defaultY : y, NaN, NaN, NaN, NaN);
  return nodes == null ? tree : tree.addAll(nodes);
}

function Quadtree(x, y, x0, y0, x1, y1) {
  this._x = x;
  this._y = y;
  this._x0 = x0;
  this._y0 = y0;
  this._x1 = x1;
  this._y1 = y1;
  this._root = undefined;
}

function leaf_copy(leaf) {
  var copy = {data: leaf.data}, next = copy;
  while (leaf = leaf.next) next = next.next = {data: leaf.data};
  return copy;
}

var treeProto = quadtree.prototype = Quadtree.prototype;

treeProto.copy = function() {
  var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1),
      node = this._root,
      nodes,
      child;

  if (!node) return copy;

  if (!node.length) return copy._root = leaf_copy(node), copy;

  nodes = [{source: node, target: copy._root = new Array(4)}];
  while (node = nodes.pop()) {
    for (var i = 0; i < 4; ++i) {
      if (child = node.source[i]) {
        if (child.length) nodes.push({source: child, target: node.target[i] = new Array(4)});
        else node.target[i] = leaf_copy(child);
      }
    }
  }

  return copy;
};

treeProto.add = tree_add;
treeProto.addAll = addAll;
treeProto.cover = tree_cover;
treeProto.data = tree_data;
treeProto.extent = tree_extent;
treeProto.find = tree_find;
treeProto.remove = tree_remove;
treeProto.removeAll = removeAll;
treeProto.root = tree_root;
treeProto.size = tree_size;
treeProto.visit = tree_visit;
treeProto.visitAfter = tree_visitAfter;
treeProto.x = tree_x;
treeProto.y = tree_y;

exports.quadtree = quadtree;

Object.defineProperty(exports, '__esModule', { value: true });

}));

},{}],57:[function(require,module,exports){
// https://d3js.org/d3-random/ v1.1.2 Copyright 2018 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
typeof define === 'function' && define.amd ? define(['exports'], factory) :
(factory((global.d3 = global.d3 || {})));
}(this, (function (exports) { 'use strict';

function defaultSource() {
  return Math.random();
}

var uniform = (function sourceRandomUniform(source) {
  function randomUniform(min, max) {
    min = min == null ? 0 : +min;
    max = max == null ? 1 : +max;
    if (arguments.length === 1) max = min, min = 0;
    else max -= min;
    return function() {
      return source() * max + min;
    };
  }

  randomUniform.source = sourceRandomUniform;

  return randomUniform;
})(defaultSource);

var normal = (function sourceRandomNormal(source) {
  function randomNormal(mu, sigma) {
    var x, r;
    mu = mu == null ? 0 : +mu;
    sigma = sigma == null ? 1 : +sigma;
    return function() {
      var y;

      // If available, use the second previously-generated uniform random.
      if (x != null) y = x, x = null;

      // Otherwise, generate a new x and y.
      else do {
        x = source() * 2 - 1;
        y = source() * 2 - 1;
        r = x * x + y * y;
      } while (!r || r > 1);

      return mu + sigma * y * Math.sqrt(-2 * Math.log(r) / r);
    };
  }

  randomNormal.source = sourceRandomNormal;

  return randomNormal;
})(defaultSource);

var logNormal = (function sourceRandomLogNormal(source) {
  function randomLogNormal() {
    var randomNormal = normal.source(source).apply(this, arguments);
    return function() {
      return Math.exp(randomNormal());
    };
  }

  randomLogNormal.source = sourceRandomLogNormal;

  return randomLogNormal;
})(defaultSource);

var irwinHall = (function sourceRandomIrwinHall(source) {
  function randomIrwinHall(n) {
    return function() {
      for (var sum = 0, i = 0; i < n; ++i) sum += source();
      return sum;
    };
  }

  randomIrwinHall.source = sourceRandomIrwinHall;

  return randomIrwinHall;
})(defaultSource);

var bates = (function sourceRandomBates(source) {
  function randomBates(n) {
    var randomIrwinHall = irwinHall.source(source)(n);
    return function() {
      return randomIrwinHall() / n;
    };
  }

  randomBates.source = sourceRandomBates;

  return randomBates;
})(defaultSource);

var exponential = (function sourceRandomExponential(source) {
  function randomExponential(lambda) {
    return function() {
      return -Math.log(1 - source()) / lambda;
    };
  }

  randomExponential.source = sourceRandomExponential;

  return randomExponential;
})(defaultSource);

exports.randomUniform = uniform;
exports.randomNormal = normal;
exports.randomLogNormal = logNormal;
exports.randomBates = bates;
exports.randomIrwinHall = irwinHall;
exports.randomExponential = exponential;

Object.defineProperty(exports, '__esModule', { value: true });

})));

},{}],58:[function(require,module,exports){
// https://d3js.org/d3-scale-chromatic/ v1.5.0 Copyright 2019 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-interpolate'), require('d3-color')) :
typeof define === 'function' && define.amd ? define(['exports', 'd3-interpolate', 'd3-color'], factory) :
(global = global || self, factory(global.d3 = global.d3 || {}, global.d3, global.d3));
}(this, function (exports, d3Interpolate, d3Color) { 'use strict';

function colors(specifier) {
  var n = specifier.length / 6 | 0, colors = new Array(n), i = 0;
  while (i < n) colors[i] = "#" + specifier.slice(i * 6, ++i * 6);
  return colors;
}

var category10 = colors("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");

var Accent = colors("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666");

var Dark2 = colors("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666");

var Paired = colors("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928");

var Pastel1 = colors("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2");

var Pastel2 = colors("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc");

var Set1 = colors("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999");

var Set2 = colors("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3");

var Set3 = colors("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f");

var Tableau10 = colors("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab");

function ramp(scheme) {
  return d3Interpolate.interpolateRgbBasis(scheme[scheme.length - 1]);
}

var scheme = new Array(3).concat(
  "d8b365f5f5f55ab4ac",
  "a6611adfc27d80cdc1018571",
  "a6611adfc27df5f5f580cdc1018571",
  "8c510ad8b365f6e8c3c7eae55ab4ac01665e",
  "8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e",
  "8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e",
  "8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e",
  "5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30",
  "5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30"
).map(colors);

var BrBG = ramp(scheme);

var scheme$1 = new Array(3).concat(
  "af8dc3f7f7f77fbf7b",
  "7b3294c2a5cfa6dba0008837",
  "7b3294c2a5cff7f7f7a6dba0008837",
  "762a83af8dc3e7d4e8d9f0d37fbf7b1b7837",
  "762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837",
  "762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837",
  "762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837",
  "40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b",
  "40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b"
).map(colors);

var PRGn = ramp(scheme$1);

var scheme$2 = new Array(3).concat(
  "e9a3c9f7f7f7a1d76a",
  "d01c8bf1b6dab8e1864dac26",
  "d01c8bf1b6daf7f7f7b8e1864dac26",
  "c51b7de9a3c9fde0efe6f5d0a1d76a4d9221",
  "c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221",
  "c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221",
  "c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221",
  "8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419",
  "8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419"
).map(colors);

var PiYG = ramp(scheme$2);

var scheme$3 = new Array(3).concat(
  "998ec3f7f7f7f1a340",
  "5e3c99b2abd2fdb863e66101",
  "5e3c99b2abd2f7f7f7fdb863e66101",
  "542788998ec3d8daebfee0b6f1a340b35806",
  "542788998ec3d8daebf7f7f7fee0b6f1a340b35806",
  "5427888073acb2abd2d8daebfee0b6fdb863e08214b35806",
  "5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806",
  "2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08",
  "2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08"
).map(colors);

var PuOr = ramp(scheme$3);

var scheme$4 = new Array(3).concat(
  "ef8a62f7f7f767a9cf",
  "ca0020f4a58292c5de0571b0",
  "ca0020f4a582f7f7f792c5de0571b0",
  "b2182bef8a62fddbc7d1e5f067a9cf2166ac",
  "b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac",
  "b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac",
  "b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac",
  "67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061",
  "67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061"
).map(colors);

var RdBu = ramp(scheme$4);

var scheme$5 = new Array(3).concat(
  "ef8a62ffffff999999",
  "ca0020f4a582bababa404040",
  "ca0020f4a582ffffffbababa404040",
  "b2182bef8a62fddbc7e0e0e09999994d4d4d",
  "b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d",
  "b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d",
  "b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d",
  "67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a",
  "67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a"
).map(colors);

var RdGy = ramp(scheme$5);

var scheme$6 = new Array(3).concat(
  "fc8d59ffffbf91bfdb",
  "d7191cfdae61abd9e92c7bb6",
  "d7191cfdae61ffffbfabd9e92c7bb6",
  "d73027fc8d59fee090e0f3f891bfdb4575b4",
  "d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4",
  "d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4",
  "d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4",
  "a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695",
  "a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695"
).map(colors);

var RdYlBu = ramp(scheme$6);

var scheme$7 = new Array(3).concat(
  "fc8d59ffffbf91cf60",
  "d7191cfdae61a6d96a1a9641",
  "d7191cfdae61ffffbfa6d96a1a9641",
  "d73027fc8d59fee08bd9ef8b91cf601a9850",
  "d73027fc8d59fee08bffffbfd9ef8b91cf601a9850",
  "d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850",
  "d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850",
  "a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837",
  "a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837"
).map(colors);

var RdYlGn = ramp(scheme$7);

var scheme$8 = new Array(3).concat(
  "fc8d59ffffbf99d594",
  "d7191cfdae61abdda42b83ba",
  "d7191cfdae61ffffbfabdda42b83ba",
  "d53e4ffc8d59fee08be6f59899d5943288bd",
  "d53e4ffc8d59fee08bffffbfe6f59899d5943288bd",
  "d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd",
  "d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd",
  "9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2",
  "9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2"
).map(colors);

var Spectral = ramp(scheme$8);

var scheme$9 = new Array(3).concat(
  "e5f5f999d8c92ca25f",
  "edf8fbb2e2e266c2a4238b45",
  "edf8fbb2e2e266c2a42ca25f006d2c",
  "edf8fbccece699d8c966c2a42ca25f006d2c",
  "edf8fbccece699d8c966c2a441ae76238b45005824",
  "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824",
  "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b"
).map(colors);

var BuGn = ramp(scheme$9);

var scheme$a = new Array(3).concat(
  "e0ecf49ebcda8856a7",
  "edf8fbb3cde38c96c688419d",
  "edf8fbb3cde38c96c68856a7810f7c",
  "edf8fbbfd3e69ebcda8c96c68856a7810f7c",
  "edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b",
  "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b",
  "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b"
).map(colors);

var BuPu = ramp(scheme$a);

var scheme$b = new Array(3).concat(
  "e0f3dba8ddb543a2ca",
  "f0f9e8bae4bc7bccc42b8cbe",
  "f0f9e8bae4bc7bccc443a2ca0868ac",
  "f0f9e8ccebc5a8ddb57bccc443a2ca0868ac",
  "f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e",
  "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e",
  "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081"
).map(colors);

var GnBu = ramp(scheme$b);

var scheme$c = new Array(3).concat(
  "fee8c8fdbb84e34a33",
  "fef0d9fdcc8afc8d59d7301f",
  "fef0d9fdcc8afc8d59e34a33b30000",
  "fef0d9fdd49efdbb84fc8d59e34a33b30000",
  "fef0d9fdd49efdbb84fc8d59ef6548d7301f990000",
  "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000",
  "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000"
).map(colors);

var OrRd = ramp(scheme$c);

var scheme$d = new Array(3).concat(
  "ece2f0a6bddb1c9099",
  "f6eff7bdc9e167a9cf02818a",
  "f6eff7bdc9e167a9cf1c9099016c59",
  "f6eff7d0d1e6a6bddb67a9cf1c9099016c59",
  "f6eff7d0d1e6a6bddb67a9cf3690c002818a016450",
  "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450",
  "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636"
).map(colors);

var PuBuGn = ramp(scheme$d);

var scheme$e = new Array(3).concat(
  "ece7f2a6bddb2b8cbe",
  "f1eef6bdc9e174a9cf0570b0",
  "f1eef6bdc9e174a9cf2b8cbe045a8d",
  "f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d",
  "f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b",
  "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b",
  "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858"
).map(colors);

var PuBu = ramp(scheme$e);

var scheme$f = new Array(3).concat(
  "e7e1efc994c7dd1c77",
  "f1eef6d7b5d8df65b0ce1256",
  "f1eef6d7b5d8df65b0dd1c77980043",
  "f1eef6d4b9dac994c7df65b0dd1c77980043",
  "f1eef6d4b9dac994c7df65b0e7298ace125691003f",
  "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f",
  "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f"
).map(colors);

var PuRd = ramp(scheme$f);

var scheme$g = new Array(3).concat(
  "fde0ddfa9fb5c51b8a",
  "feebe2fbb4b9f768a1ae017e",
  "feebe2fbb4b9f768a1c51b8a7a0177",
  "feebe2fcc5c0fa9fb5f768a1c51b8a7a0177",
  "feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177",
  "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177",
  "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a"
).map(colors);

var RdPu = ramp(scheme$g);

var scheme$h = new Array(3).concat(
  "edf8b17fcdbb2c7fb8",
  "ffffcca1dab441b6c4225ea8",
  "ffffcca1dab441b6c42c7fb8253494",
  "ffffccc7e9b47fcdbb41b6c42c7fb8253494",
  "ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84",
  "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84",
  "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58"
).map(colors);

var YlGnBu = ramp(scheme$h);

var scheme$i = new Array(3).concat(
  "f7fcb9addd8e31a354",
  "ffffccc2e69978c679238443",
  "ffffccc2e69978c67931a354006837",
  "ffffccd9f0a3addd8e78c67931a354006837",
  "ffffccd9f0a3addd8e78c67941ab5d238443005a32",
  "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32",
  "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529"
).map(colors);

var YlGn = ramp(scheme$i);

var scheme$j = new Array(3).concat(
  "fff7bcfec44fd95f0e",
  "ffffd4fed98efe9929cc4c02",
  "ffffd4fed98efe9929d95f0e993404",
  "ffffd4fee391fec44ffe9929d95f0e993404",
  "ffffd4fee391fec44ffe9929ec7014cc4c028c2d04",
  "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04",
  "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506"
).map(colors);

var YlOrBr = ramp(scheme$j);

var scheme$k = new Array(3).concat(
  "ffeda0feb24cf03b20",
  "ffffb2fecc5cfd8d3ce31a1c",
  "ffffb2fecc5cfd8d3cf03b20bd0026",
  "ffffb2fed976feb24cfd8d3cf03b20bd0026",
  "ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026",
  "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026",
  "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026"
).map(colors);

var YlOrRd = ramp(scheme$k);

var scheme$l = new Array(3).concat(
  "deebf79ecae13182bd",
  "eff3ffbdd7e76baed62171b5",
  "eff3ffbdd7e76baed63182bd08519c",
  "eff3ffc6dbef9ecae16baed63182bd08519c",
  "eff3ffc6dbef9ecae16baed64292c62171b5084594",
  "f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594",
  "f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b"
).map(colors);

var Blues = ramp(scheme$l);

var scheme$m = new Array(3).concat(
  "e5f5e0a1d99b31a354",
  "edf8e9bae4b374c476238b45",
  "edf8e9bae4b374c47631a354006d2c",
  "edf8e9c7e9c0a1d99b74c47631a354006d2c",
  "edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32",
  "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32",
  "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b"
).map(colors);

var Greens = ramp(scheme$m);

var scheme$n = new Array(3).concat(
  "f0f0f0bdbdbd636363",
  "f7f7f7cccccc969696525252",
  "f7f7f7cccccc969696636363252525",
  "f7f7f7d9d9d9bdbdbd969696636363252525",
  "f7f7f7d9d9d9bdbdbd969696737373525252252525",
  "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525",
  "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000"
).map(colors);

var Greys = ramp(scheme$n);

var scheme$o = new Array(3).concat(
  "efedf5bcbddc756bb1",
  "f2f0f7cbc9e29e9ac86a51a3",
  "f2f0f7cbc9e29e9ac8756bb154278f",
  "f2f0f7dadaebbcbddc9e9ac8756bb154278f",
  "f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486",
  "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486",
  "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d"
).map(colors);

var Purples = ramp(scheme$o);

var scheme$p = new Array(3).concat(
  "fee0d2fc9272de2d26",
  "fee5d9fcae91fb6a4acb181d",
  "fee5d9fcae91fb6a4ade2d26a50f15",
  "fee5d9fcbba1fc9272fb6a4ade2d26a50f15",
  "fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d",
  "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d",
  "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d"
).map(colors);

var Reds = ramp(scheme$p);

var scheme$q = new Array(3).concat(
  "fee6cefdae6be6550d",
  "feeddefdbe85fd8d3cd94701",
  "feeddefdbe85fd8d3ce6550da63603",
  "feeddefdd0a2fdae6bfd8d3ce6550da63603",
  "feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04",
  "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04",
  "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704"
).map(colors);

var Oranges = ramp(scheme$q);

function cividis(t) {
  t = Math.max(0, Math.min(1, t));
  return "rgb("
      + Math.max(0, Math.min(255, Math.round(-4.54 - t * (35.34 - t * (2381.73 - t * (6402.7 - t * (7024.72 - t * 2710.57))))))) + ", "
      + Math.max(0, Math.min(255, Math.round(32.49 + t * (170.73 + t * (52.82 - t * (131.46 - t * (176.58 - t * 67.37))))))) + ", "
      + Math.max(0, Math.min(255, Math.round(81.24 + t * (442.36 - t * (2482.43 - t * (6167.24 - t * (6614.94 - t * 2475.67)))))))
      + ")";
}

var cubehelix = d3Interpolate.interpolateCubehelixLong(d3Color.cubehelix(300, 0.5, 0.0), d3Color.cubehelix(-240, 0.5, 1.0));

var warm = d3Interpolate.interpolateCubehelixLong(d3Color.cubehelix(-100, 0.75, 0.35), d3Color.cubehelix(80, 1.50, 0.8));

var cool = d3Interpolate.interpolateCubehelixLong(d3Color.cubehelix(260, 0.75, 0.35), d3Color.cubehelix(80, 1.50, 0.8));

var c = d3Color.cubehelix();

function rainbow(t) {
  if (t < 0 || t > 1) t -= Math.floor(t);
  var ts = Math.abs(t - 0.5);
  c.h = 360 * t - 100;
  c.s = 1.5 - 1.5 * ts;
  c.l = 0.8 - 0.9 * ts;
  return c + "";
}

var c$1 = d3Color.rgb(),
    pi_1_3 = Math.PI / 3,
    pi_2_3 = Math.PI * 2 / 3;

function sinebow(t) {
  var x;
  t = (0.5 - t) * Math.PI;
  c$1.r = 255 * (x = Math.sin(t)) * x;
  c$1.g = 255 * (x = Math.sin(t + pi_1_3)) * x;
  c$1.b = 255 * (x = Math.sin(t + pi_2_3)) * x;
  return c$1 + "";
}

function turbo(t) {
  t = Math.max(0, Math.min(1, t));
  return "rgb("
      + Math.max(0, Math.min(255, Math.round(34.61 + t * (1172.33 - t * (10793.56 - t * (33300.12 - t * (38394.49 - t * 14825.05))))))) + ", "
      + Math.max(0, Math.min(255, Math.round(23.31 + t * (557.33 + t * (1225.33 - t * (3574.96 - t * (1073.77 + t * 707.56))))))) + ", "
      + Math.max(0, Math.min(255, Math.round(27.2 + t * (3211.1 - t * (15327.97 - t * (27814 - t * (22569.18 - t * 6838.66)))))))
      + ")";
}

function ramp$1(range) {
  var n = range.length;
  return function(t) {
    return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
  };
}

var viridis = ramp$1(colors("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));

var magma = ramp$1(colors("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf"));

var inferno = ramp$1(colors("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4"));

var plasma = ramp$1(colors("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));

exports.interpolateBlues = Blues;
exports.interpolateBrBG = BrBG;
exports.interpolateBuGn = BuGn;
exports.interpolateBuPu = BuPu;
exports.interpolateCividis = cividis;
exports.interpolateCool = cool;
exports.interpolateCubehelixDefault = cubehelix;
exports.interpolateGnBu = GnBu;
exports.interpolateGreens = Greens;
exports.interpolateGreys = Greys;
exports.interpolateInferno = inferno;
exports.interpolateMagma = magma;
exports.interpolateOrRd = OrRd;
exports.interpolateOranges = Oranges;
exports.interpolatePRGn = PRGn;
exports.interpolatePiYG = PiYG;
exports.interpolatePlasma = plasma;
exports.interpolatePuBu = PuBu;
exports.interpolatePuBuGn = PuBuGn;
exports.interpolatePuOr = PuOr;
exports.interpolatePuRd = PuRd;
exports.interpolatePurples = Purples;
exports.interpolateRainbow = rainbow;
exports.interpolateRdBu = RdBu;
exports.interpolateRdGy = RdGy;
exports.interpolateRdPu = RdPu;
exports.interpolateRdYlBu = RdYlBu;
exports.interpolateRdYlGn = RdYlGn;
exports.interpolateReds = Reds;
exports.interpolateSinebow = sinebow;
exports.interpolateSpectral = Spectral;
exports.interpolateTurbo = turbo;
exports.interpolateViridis = viridis;
exports.interpolateWarm = warm;
exports.interpolateYlGn = YlGn;
exports.interpolateYlGnBu = YlGnBu;
exports.interpolateYlOrBr = YlOrBr;
exports.interpolateYlOrRd = YlOrRd;
exports.schemeAccent = Accent;
exports.schemeBlues = scheme$l;
exports.schemeBrBG = scheme;
exports.schemeBuGn = scheme$9;
exports.schemeBuPu = scheme$a;
exports.schemeCategory10 = category10;
exports.schemeDark2 = Dark2;
exports.schemeGnBu = scheme$b;
exports.schemeGreens = scheme$m;
exports.schemeGreys = scheme$n;
exports.schemeOrRd = scheme$c;
exports.schemeOranges = scheme$q;
exports.schemePRGn = scheme$1;
exports.schemePaired = Paired;
exports.schemePastel1 = Pastel1;
exports.schemePastel2 = Pastel2;
exports.schemePiYG = scheme$2;
exports.schemePuBu = scheme$e;
exports.schemePuBuGn = scheme$d;
exports.schemePuOr = scheme$3;
exports.schemePuRd = scheme$f;
exports.schemePurples = scheme$o;
exports.schemeRdBu = scheme$4;
exports.schemeRdGy = scheme$5;
exports.schemeRdPu = scheme$g;
exports.schemeRdYlBu = scheme$6;
exports.schemeRdYlGn = scheme$7;
exports.schemeReds = scheme$p;
exports.schemeSet1 = Set1;
exports.schemeSet2 = Set2;
exports.schemeSet3 = Set3;
exports.schemeSpectral = scheme$8;
exports.schemeTableau10 = Tableau10;
exports.schemeYlGn = scheme$i;
exports.schemeYlGnBu = scheme$h;
exports.schemeYlOrBr = scheme$j;
exports.schemeYlOrRd = scheme$k;

Object.defineProperty(exports, '__esModule', { value: true });

}));

},{"d3-color":42,"d3-interpolate":53}],59:[function(require,module,exports){
// https://d3js.org/d3-scale/ v2.2.2 Copyright 2019 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-collection'), require('d3-array'), require('d3-interpolate'), require('d3-format'), require('d3-time'), require('d3-time-format')) :
typeof define === 'function' && define.amd ? define(['exports', 'd3-collection', 'd3-array', 'd3-interpolate', 'd3-format', 'd3-time', 'd3-time-format'], factory) :
(factory((global.d3 = global.d3 || {}),global.d3,global.d3,global.d3,global.d3,global.d3,global.d3));
}(this, (function (exports,d3Collection,d3Array,d3Interpolate,d3Format,d3Time,d3TimeFormat) { 'use strict';

function initRange(domain, range) {
  switch (arguments.length) {
    case 0: break;
    case 1: this.range(domain); break;
    default: this.range(range).domain(domain); break;
  }
  return this;
}

function initInterpolator(domain, interpolator) {
  switch (arguments.length) {
    case 0: break;
    case 1: this.interpolator(domain); break;
    default: this.interpolator(interpolator).domain(domain); break;
  }
  return this;
}

var array = Array.prototype;

var map = array.map;
var slice = array.slice;

var implicit = {name: "implicit"};

function ordinal() {
  var index = d3Collection.map(),
      domain = [],
      range = [],
      unknown = implicit;

  function scale(d) {
    var key = d + "", i = index.get(key);
    if (!i) {
      if (unknown !== implicit) return unknown;
      index.set(key, i = domain.push(d));
    }
    return range[(i - 1) % range.length];
  }

  scale.domain = function(_) {
    if (!arguments.length) return domain.slice();
    domain = [], index = d3Collection.map();
    var i = -1, n = _.length, d, key;
    while (++i < n) if (!index.has(key = (d = _[i]) + "")) index.set(key, domain.push(d));
    return scale;
  };

  scale.range = function(_) {
    return arguments.length ? (range = slice.call(_), scale) : range.slice();
  };

  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.copy = function() {
    return ordinal(domain, range).unknown(unknown);
  };

  initRange.apply(scale, arguments);

  return scale;
}

function band() {
  var scale = ordinal().unknown(undefined),
      domain = scale.domain,
      ordinalRange = scale.range,
      range = [0, 1],
      step,
      bandwidth,
      round = false,
      paddingInner = 0,
      paddingOuter = 0,
      align = 0.5;

  delete scale.unknown;

  function rescale() {
    var n = domain().length,
        reverse = range[1] < range[0],
        start = range[reverse - 0],
        stop = range[1 - reverse];
    step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);
    if (round) step = Math.floor(step);
    start += (stop - start - step * (n - paddingInner)) * align;
    bandwidth = step * (1 - paddingInner);
    if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);
    var values = d3Array.range(n).map(function(i) { return start + step * i; });
    return ordinalRange(reverse ? values.reverse() : values);
  }

  scale.domain = function(_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };

  scale.range = function(_) {
    return arguments.length ? (range = [+_[0], +_[1]], rescale()) : range.slice();
  };

  scale.rangeRound = function(_) {
    return range = [+_[0], +_[1]], round = true, rescale();
  };

  scale.bandwidth = function() {
    return bandwidth;
  };

  scale.step = function() {
    return step;
  };

  scale.round = function(_) {
    return arguments.length ? (round = !!_, rescale()) : round;
  };

  scale.padding = function(_) {
    return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;
  };

  scale.paddingInner = function(_) {
    return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;
  };

  scale.paddingOuter = function(_) {
    return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;
  };

  scale.align = function(_) {
    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
  };

  scale.copy = function() {
    return band(domain(), range)
        .round(round)
        .paddingInner(paddingInner)
        .paddingOuter(paddingOuter)
        .align(align);
  };

  return initRange.apply(rescale(), arguments);
}

function pointish(scale) {
  var copy = scale.copy;

  scale.padding = scale.paddingOuter;
  delete scale.paddingInner;
  delete scale.paddingOuter;

  scale.copy = function() {
    return pointish(copy());
  };

  return scale;
}

function point() {
  return pointish(band.apply(null, arguments).paddingInner(1));
}

function constant(x) {
  return function() {
    return x;
  };
}

function number(x) {
  return +x;
}

var unit = [0, 1];

function identity(x) {
  return x;
}

function normalize(a, b) {
  return (b -= (a = +a))
      ? function(x) { return (x - a) / b; }
      : constant(isNaN(b) ? NaN : 0.5);
}

function clamper(domain) {
  var a = domain[0], b = domain[domain.length - 1], t;
  if (a > b) t = a, a = b, b = t;
  return function(x) { return Math.max(a, Math.min(b, x)); };
}

// normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
// interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].
function bimap(domain, range, interpolate) {
  var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];
  if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);
  else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);
  return function(x) { return r0(d0(x)); };
}

function polymap(domain, range, interpolate) {
  var j = Math.min(domain.length, range.length) - 1,
      d = new Array(j),
      r = new Array(j),
      i = -1;

  // Reverse descending domains.
  if (domain[j] < domain[0]) {
    domain = domain.slice().reverse();
    range = range.slice().reverse();
  }

  while (++i < j) {
    d[i] = normalize(domain[i], domain[i + 1]);
    r[i] = interpolate(range[i], range[i + 1]);
  }

  return function(x) {
    var i = d3Array.bisect(domain, x, 1, j) - 1;
    return r[i](d[i](x));
  };
}

function copy(source, target) {
  return target
      .domain(source.domain())
      .range(source.range())
      .interpolate(source.interpolate())
      .clamp(source.clamp())
      .unknown(source.unknown());
}

function transformer() {
  var domain = unit,
      range = unit,
      interpolate = d3Interpolate.interpolate,
      transform,
      untransform,
      unknown,
      clamp = identity,
      piecewise,
      output,
      input;

  function rescale() {
    piecewise = Math.min(domain.length, range.length) > 2 ? polymap : bimap;
    output = input = null;
    return scale;
  }

  function scale(x) {
    return isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));
  }

  scale.invert = function(y) {
    return clamp(untransform((input || (input = piecewise(range, domain.map(transform), d3Interpolate.interpolateNumber)))(y)));
  };

  scale.domain = function(_) {
    return arguments.length ? (domain = map.call(_, number), clamp === identity || (clamp = clamper(domain)), rescale()) : domain.slice();
  };

  scale.range = function(_) {
    return arguments.length ? (range = slice.call(_), rescale()) : range.slice();
  };

  scale.rangeRound = function(_) {
    return range = slice.call(_), interpolate = d3Interpolate.interpolateRound, rescale();
  };

  scale.clamp = function(_) {
    return arguments.length ? (clamp = _ ? clamper(domain) : identity, scale) : clamp !== identity;
  };

  scale.interpolate = function(_) {
    return arguments.length ? (interpolate = _, rescale()) : interpolate;
  };

  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  return function(t, u) {
    transform = t, untransform = u;
    return rescale();
  };
}

function continuous(transform, untransform) {
  return transformer()(transform, untransform);
}

function tickFormat(start, stop, count, specifier) {
  var step = d3Array.tickStep(start, stop, count),
      precision;
  specifier = d3Format.formatSpecifier(specifier == null ? ",f" : specifier);
  switch (specifier.type) {
    case "s": {
      var value = Math.max(Math.abs(start), Math.abs(stop));
      if (specifier.precision == null && !isNaN(precision = d3Format.precisionPrefix(step, value))) specifier.precision = precision;
      return d3Format.formatPrefix(specifier, value);
    }
    case "":
    case "e":
    case "g":
    case "p":
    case "r": {
      if (specifier.precision == null && !isNaN(precision = d3Format.precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
      break;
    }
    case "f":
    case "%": {
      if (specifier.precision == null && !isNaN(precision = d3Format.precisionFixed(step))) specifier.precision = precision - (specifier.type === "%") * 2;
      break;
    }
  }
  return d3Format.format(specifier);
}

function linearish(scale) {
  var domain = scale.domain;

  scale.ticks = function(count) {
    var d = domain();
    return d3Array.ticks(d[0], d[d.length - 1], count == null ? 10 : count);
  };

  scale.tickFormat = function(count, specifier) {
    var d = domain();
    return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);
  };

  scale.nice = function(count) {
    if (count == null) count = 10;

    var d = domain(),
        i0 = 0,
        i1 = d.length - 1,
        start = d[i0],
        stop = d[i1],
        step;

    if (stop < start) {
      step = start, start = stop, stop = step;
      step = i0, i0 = i1, i1 = step;
    }

    step = d3Array.tickIncrement(start, stop, count);

    if (step > 0) {
      start = Math.floor(start / step) * step;
      stop = Math.ceil(stop / step) * step;
      step = d3Array.tickIncrement(start, stop, count);
    } else if (step < 0) {
      start = Math.ceil(start * step) / step;
      stop = Math.floor(stop * step) / step;
      step = d3Array.tickIncrement(start, stop, count);
    }

    if (step > 0) {
      d[i0] = Math.floor(start / step) * step;
      d[i1] = Math.ceil(stop / step) * step;
      domain(d);
    } else if (step < 0) {
      d[i0] = Math.ceil(start * step) / step;
      d[i1] = Math.floor(stop * step) / step;
      domain(d);
    }

    return scale;
  };

  return scale;
}

function linear() {
  var scale = continuous(identity, identity);

  scale.copy = function() {
    return copy(scale, linear());
  };

  initRange.apply(scale, arguments);

  return linearish(scale);
}

function identity$1(domain) {
  var unknown;

  function scale(x) {
    return isNaN(x = +x) ? unknown : x;
  }

  scale.invert = scale;

  scale.domain = scale.range = function(_) {
    return arguments.length ? (domain = map.call(_, number), scale) : domain.slice();
  };

  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.copy = function() {
    return identity$1(domain).unknown(unknown);
  };

  domain = arguments.length ? map.call(domain, number) : [0, 1];

  return linearish(scale);
}

function nice(domain, interval) {
  domain = domain.slice();

  var i0 = 0,
      i1 = domain.length - 1,
      x0 = domain[i0],
      x1 = domain[i1],
      t;

  if (x1 < x0) {
    t = i0, i0 = i1, i1 = t;
    t = x0, x0 = x1, x1 = t;
  }

  domain[i0] = interval.floor(x0);
  domain[i1] = interval.ceil(x1);
  return domain;
}

function transformLog(x) {
  return Math.log(x);
}

function transformExp(x) {
  return Math.exp(x);
}

function transformLogn(x) {
  return -Math.log(-x);
}

function transformExpn(x) {
  return -Math.exp(-x);
}

function pow10(x) {
  return isFinite(x) ? +("1e" + x) : x < 0 ? 0 : x;
}

function powp(base) {
  return base === 10 ? pow10
      : base === Math.E ? Math.exp
      : function(x) { return Math.pow(base, x); };
}

function logp(base) {
  return base === Math.E ? Math.log
      : base === 10 && Math.log10
      || base === 2 && Math.log2
      || (base = Math.log(base), function(x) { return Math.log(x) / base; });
}

function reflect(f) {
  return function(x) {
    return -f(-x);
  };
}

function loggish(transform) {
  var scale = transform(transformLog, transformExp),
      domain = scale.domain,
      base = 10,
      logs,
      pows;

  function rescale() {
    logs = logp(base), pows = powp(base);
    if (domain()[0] < 0) {
      logs = reflect(logs), pows = reflect(pows);
      transform(transformLogn, transformExpn);
    } else {
      transform(transformLog, transformExp);
    }
    return scale;
  }

  scale.base = function(_) {
    return arguments.length ? (base = +_, rescale()) : base;
  };

  scale.domain = function(_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };

  scale.ticks = function(count) {
    var d = domain(),
        u = d[0],
        v = d[d.length - 1],
        r;

    if (r = v < u) i = u, u = v, v = i;

    var i = logs(u),
        j = logs(v),
        p,
        k,
        t,
        n = count == null ? 10 : +count,
        z = [];

    if (!(base % 1) && j - i < n) {
      i = Math.round(i) - 1, j = Math.round(j) + 1;
      if (u > 0) for (; i < j; ++i) {
        for (k = 1, p = pows(i); k < base; ++k) {
          t = p * k;
          if (t < u) continue;
          if (t > v) break;
          z.push(t);
        }
      } else for (; i < j; ++i) {
        for (k = base - 1, p = pows(i); k >= 1; --k) {
          t = p * k;
          if (t < u) continue;
          if (t > v) break;
          z.push(t);
        }
      }
    } else {
      z = d3Array.ticks(i, j, Math.min(j - i, n)).map(pows);
    }

    return r ? z.reverse() : z;
  };

  scale.tickFormat = function(count, specifier) {
    if (specifier == null) specifier = base === 10 ? ".0e" : ",";
    if (typeof specifier !== "function") specifier = d3Format.format(specifier);
    if (count === Infinity) return specifier;
    if (count == null) count = 10;
    var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?
    return function(d) {
      var i = d / pows(Math.round(logs(d)));
      if (i * base < base - 0.5) i *= base;
      return i <= k ? specifier(d) : "";
    };
  };

  scale.nice = function() {
    return domain(nice(domain(), {
      floor: function(x) { return pows(Math.floor(logs(x))); },
      ceil: function(x) { return pows(Math.ceil(logs(x))); }
    }));
  };

  return scale;
}

function log() {
  var scale = loggish(transformer()).domain([1, 10]);

  scale.copy = function() {
    return copy(scale, log()).base(scale.base());
  };

  initRange.apply(scale, arguments);

  return scale;
}

function transformSymlog(c) {
  return function(x) {
    return Math.sign(x) * Math.log1p(Math.abs(x / c));
  };
}

function transformSymexp(c) {
  return function(x) {
    return Math.sign(x) * Math.expm1(Math.abs(x)) * c;
  };
}

function symlogish(transform) {
  var c = 1, scale = transform(transformSymlog(c), transformSymexp(c));

  scale.constant = function(_) {
    return arguments.length ? transform(transformSymlog(c = +_), transformSymexp(c)) : c;
  };

  return linearish(scale);
}

function symlog() {
  var scale = symlogish(transformer());

  scale.copy = function() {
    return copy(scale, symlog()).constant(scale.constant());
  };

  return initRange.apply(scale, arguments);
}

function transformPow(exponent) {
  return function(x) {
    return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
  };
}

function transformSqrt(x) {
  return x < 0 ? -Math.sqrt(-x) : Math.sqrt(x);
}

function transformSquare(x) {
  return x < 0 ? -x * x : x * x;
}

function powish(transform) {
  var scale = transform(identity, identity),
      exponent = 1;

  function rescale() {
    return exponent === 1 ? transform(identity, identity)
        : exponent === 0.5 ? transform(transformSqrt, transformSquare)
        : transform(transformPow(exponent), transformPow(1 / exponent));
  }

  scale.exponent = function(_) {
    return arguments.length ? (exponent = +_, rescale()) : exponent;
  };

  return linearish(scale);
}

function pow() {
  var scale = powish(transformer());

  scale.copy = function() {
    return copy(scale, pow()).exponent(scale.exponent());
  };

  initRange.apply(scale, arguments);

  return scale;
}

function sqrt() {
  return pow.apply(null, arguments).exponent(0.5);
}

function quantile() {
  var domain = [],
      range = [],
      thresholds = [],
      unknown;

  function rescale() {
    var i = 0, n = Math.max(1, range.length);
    thresholds = new Array(n - 1);
    while (++i < n) thresholds[i - 1] = d3Array.quantile(domain, i / n);
    return scale;
  }

  function scale(x) {
    return isNaN(x = +x) ? unknown : range[d3Array.bisect(thresholds, x)];
  }

  scale.invertExtent = function(y) {
    var i = range.indexOf(y);
    return i < 0 ? [NaN, NaN] : [
      i > 0 ? thresholds[i - 1] : domain[0],
      i < thresholds.length ? thresholds[i] : domain[domain.length - 1]
    ];
  };

  scale.domain = function(_) {
    if (!arguments.length) return domain.slice();
    domain = [];
    for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);
    domain.sort(d3Array.ascending);
    return rescale();
  };

  scale.range = function(_) {
    return arguments.length ? (range = slice.call(_), rescale()) : range.slice();
  };

  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.quantiles = function() {
    return thresholds.slice();
  };

  scale.copy = function() {
    return quantile()
        .domain(domain)
        .range(range)
        .unknown(unknown);
  };

  return initRange.apply(scale, arguments);
}

function quantize() {
  var x0 = 0,
      x1 = 1,
      n = 1,
      domain = [0.5],
      range = [0, 1],
      unknown;

  function scale(x) {
    return x <= x ? range[d3Array.bisect(domain, x, 0, n)] : unknown;
  }

  function rescale() {
    var i = -1;
    domain = new Array(n);
    while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);
    return scale;
  }

  scale.domain = function(_) {
    return arguments.length ? (x0 = +_[0], x1 = +_[1], rescale()) : [x0, x1];
  };

  scale.range = function(_) {
    return arguments.length ? (n = (range = slice.call(_)).length - 1, rescale()) : range.slice();
  };

  scale.invertExtent = function(y) {
    var i = range.indexOf(y);
    return i < 0 ? [NaN, NaN]
        : i < 1 ? [x0, domain[0]]
        : i >= n ? [domain[n - 1], x1]
        : [domain[i - 1], domain[i]];
  };

  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : scale;
  };

  scale.thresholds = function() {
    return domain.slice();
  };

  scale.copy = function() {
    return quantize()
        .domain([x0, x1])
        .range(range)
        .unknown(unknown);
  };

  return initRange.apply(linearish(scale), arguments);
}

function threshold() {
  var domain = [0.5],
      range = [0, 1],
      unknown,
      n = 1;

  function scale(x) {
    return x <= x ? range[d3Array.bisect(domain, x, 0, n)] : unknown;
  }

  scale.domain = function(_) {
    return arguments.length ? (domain = slice.call(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();
  };

  scale.range = function(_) {
    return arguments.length ? (range = slice.call(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();
  };

  scale.invertExtent = function(y) {
    var i = range.indexOf(y);
    return [domain[i - 1], domain[i]];
  };

  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.copy = function() {
    return threshold()
        .domain(domain)
        .range(range)
        .unknown(unknown);
  };

  return initRange.apply(scale, arguments);
}

var durationSecond = 1000,
    durationMinute = durationSecond * 60,
    durationHour = durationMinute * 60,
    durationDay = durationHour * 24,
    durationWeek = durationDay * 7,
    durationMonth = durationDay * 30,
    durationYear = durationDay * 365;

function date(t) {
  return new Date(t);
}

function number$1(t) {
  return t instanceof Date ? +t : +new Date(+t);
}

function calendar(year, month, week, day, hour, minute, second, millisecond, format) {
  var scale = continuous(identity, identity),
      invert = scale.invert,
      domain = scale.domain;

  var formatMillisecond = format(".%L"),
      formatSecond = format(":%S"),
      formatMinute = format("%I:%M"),
      formatHour = format("%I %p"),
      formatDay = format("%a %d"),
      formatWeek = format("%b %d"),
      formatMonth = format("%B"),
      formatYear = format("%Y");

  var tickIntervals = [
    [second,  1,      durationSecond],
    [second,  5,  5 * durationSecond],
    [second, 15, 15 * durationSecond],
    [second, 30, 30 * durationSecond],
    [minute,  1,      durationMinute],
    [minute,  5,  5 * durationMinute],
    [minute, 15, 15 * durationMinute],
    [minute, 30, 30 * durationMinute],
    [  hour,  1,      durationHour  ],
    [  hour,  3,  3 * durationHour  ],
    [  hour,  6,  6 * durationHour  ],
    [  hour, 12, 12 * durationHour  ],
    [   day,  1,      durationDay   ],
    [   day,  2,  2 * durationDay   ],
    [  week,  1,      durationWeek  ],
    [ month,  1,      durationMonth ],
    [ month,  3,  3 * durationMonth ],
    [  year,  1,      durationYear  ]
  ];

  function tickFormat(date) {
    return (second(date) < date ? formatMillisecond
        : minute(date) < date ? formatSecond
        : hour(date) < date ? formatMinute
        : day(date) < date ? formatHour
        : month(date) < date ? (week(date) < date ? formatDay : formatWeek)
        : year(date) < date ? formatMonth
        : formatYear)(date);
  }

  function tickInterval(interval, start, stop, step) {
    if (interval == null) interval = 10;

    // If a desired tick count is specified, pick a reasonable tick interval
    // based on the extent of the domain and a rough estimate of tick size.
    // Otherwise, assume interval is already a time interval and use it.
    if (typeof interval === "number") {
      var target = Math.abs(stop - start) / interval,
          i = d3Array.bisector(function(i) { return i[2]; }).right(tickIntervals, target);
      if (i === tickIntervals.length) {
        step = d3Array.tickStep(start / durationYear, stop / durationYear, interval);
        interval = year;
      } else if (i) {
        i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
        step = i[1];
        interval = i[0];
      } else {
        step = Math.max(d3Array.tickStep(start, stop, interval), 1);
        interval = millisecond;
      }
    }

    return step == null ? interval : interval.every(step);
  }

  scale.invert = function(y) {
    return new Date(invert(y));
  };

  scale.domain = function(_) {
    return arguments.length ? domain(map.call(_, number$1)) : domain().map(date);
  };

  scale.ticks = function(interval, step) {
    var d = domain(),
        t0 = d[0],
        t1 = d[d.length - 1],
        r = t1 < t0,
        t;
    if (r) t = t0, t0 = t1, t1 = t;
    t = tickInterval(interval, t0, t1, step);
    t = t ? t.range(t0, t1 + 1) : []; // inclusive stop
    return r ? t.reverse() : t;
  };

  scale.tickFormat = function(count, specifier) {
    return specifier == null ? tickFormat : format(specifier);
  };

  scale.nice = function(interval, step) {
    var d = domain();
    return (interval = tickInterval(interval, d[0], d[d.length - 1], step))
        ? domain(nice(d, interval))
        : scale;
  };

  scale.copy = function() {
    return copy(scale, calendar(year, month, week, day, hour, minute, second, millisecond, format));
  };

  return scale;
}

function time() {
  return initRange.apply(calendar(d3Time.timeYear, d3Time.timeMonth, d3Time.timeWeek, d3Time.timeDay, d3Time.timeHour, d3Time.timeMinute, d3Time.timeSecond, d3Time.timeMillisecond, d3TimeFormat.timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]), arguments);
}

function utcTime() {
  return initRange.apply(calendar(d3Time.utcYear, d3Time.utcMonth, d3Time.utcWeek, d3Time.utcDay, d3Time.utcHour, d3Time.utcMinute, d3Time.utcSecond, d3Time.utcMillisecond, d3TimeFormat.utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]), arguments);
}

function transformer$1() {
  var x0 = 0,
      x1 = 1,
      t0,
      t1,
      k10,
      transform,
      interpolator = identity,
      clamp = false,
      unknown;

  function scale(x) {
    return isNaN(x = +x) ? unknown : interpolator(k10 === 0 ? 0.5 : (x = (transform(x) - t0) * k10, clamp ? Math.max(0, Math.min(1, x)) : x));
  }

  scale.domain = function(_) {
    return arguments.length ? (t0 = transform(x0 = +_[0]), t1 = transform(x1 = +_[1]), k10 = t0 === t1 ? 0 : 1 / (t1 - t0), scale) : [x0, x1];
  };

  scale.clamp = function(_) {
    return arguments.length ? (clamp = !!_, scale) : clamp;
  };

  scale.interpolator = function(_) {
    return arguments.length ? (interpolator = _, scale) : interpolator;
  };

  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  return function(t) {
    transform = t, t0 = t(x0), t1 = t(x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0);
    return scale;
  };
}

function copy$1(source, target) {
  return target
      .domain(source.domain())
      .interpolator(source.interpolator())
      .clamp(source.clamp())
      .unknown(source.unknown());
}

function sequential() {
  var scale = linearish(transformer$1()(identity));

  scale.copy = function() {
    return copy$1(scale, sequential());
  };

  return initInterpolator.apply(scale, arguments);
}

function sequentialLog() {
  var scale = loggish(transformer$1()).domain([1, 10]);

  scale.copy = function() {
    return copy$1(scale, sequentialLog()).base(scale.base());
  };

  return initInterpolator.apply(scale, arguments);
}

function sequentialSymlog() {
  var scale = symlogish(transformer$1());

  scale.copy = function() {
    return copy$1(scale, sequentialSymlog()).constant(scale.constant());
  };

  return initInterpolator.apply(scale, arguments);
}

function sequentialPow() {
  var scale = powish(transformer$1());

  scale.copy = function() {
    return copy$1(scale, sequentialPow()).exponent(scale.exponent());
  };

  return initInterpolator.apply(scale, arguments);
}

function sequentialSqrt() {
  return sequentialPow.apply(null, arguments).exponent(0.5);
}

function sequentialQuantile() {
  var domain = [],
      interpolator = identity;

  function scale(x) {
    if (!isNaN(x = +x)) return interpolator((d3Array.bisect(domain, x) - 1) / (domain.length - 1));
  }

  scale.domain = function(_) {
    if (!arguments.length) return domain.slice();
    domain = [];
    for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);
    domain.sort(d3Array.ascending);
    return scale;
  };

  scale.interpolator = function(_) {
    return arguments.length ? (interpolator = _, scale) : interpolator;
  };

  scale.copy = function() {
    return sequentialQuantile(interpolator).domain(domain);
  };

  return initInterpolator.apply(scale, arguments);
}

function transformer$2() {
  var x0 = 0,
      x1 = 0.5,
      x2 = 1,
      t0,
      t1,
      t2,
      k10,
      k21,
      interpolator = identity,
      transform,
      clamp = false,
      unknown;

  function scale(x) {
    return isNaN(x = +x) ? unknown : (x = 0.5 + ((x = +transform(x)) - t1) * (x < t1 ? k10 : k21), interpolator(clamp ? Math.max(0, Math.min(1, x)) : x));
  }

  scale.domain = function(_) {
    return arguments.length ? (t0 = transform(x0 = +_[0]), t1 = transform(x1 = +_[1]), t2 = transform(x2 = +_[2]), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), scale) : [x0, x1, x2];
  };

  scale.clamp = function(_) {
    return arguments.length ? (clamp = !!_, scale) : clamp;
  };

  scale.interpolator = function(_) {
    return arguments.length ? (interpolator = _, scale) : interpolator;
  };

  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  return function(t) {
    transform = t, t0 = t(x0), t1 = t(x1), t2 = t(x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1);
    return scale;
  };
}

function diverging() {
  var scale = linearish(transformer$2()(identity));

  scale.copy = function() {
    return copy$1(scale, diverging());
  };

  return initInterpolator.apply(scale, arguments);
}

function divergingLog() {
  var scale = loggish(transformer$2()).domain([0.1, 1, 10]);

  scale.copy = function() {
    return copy$1(scale, divergingLog()).base(scale.base());
  };

  return initInterpolator.apply(scale, arguments);
}

function divergingSymlog() {
  var scale = symlogish(transformer$2());

  scale.copy = function() {
    return copy$1(scale, divergingSymlog()).constant(scale.constant());
  };

  return initInterpolator.apply(scale, arguments);
}

function divergingPow() {
  var scale = powish(transformer$2());

  scale.copy = function() {
    return copy$1(scale, divergingPow()).exponent(scale.exponent());
  };

  return initInterpolator.apply(scale, arguments);
}

function divergingSqrt() {
  return divergingPow.apply(null, arguments).exponent(0.5);
}

exports.scaleBand = band;
exports.scalePoint = point;
exports.scaleIdentity = identity$1;
exports.scaleLinear = linear;
exports.scaleLog = log;
exports.scaleSymlog = symlog;
exports.scaleOrdinal = ordinal;
exports.scaleImplicit = implicit;
exports.scalePow = pow;
exports.scaleSqrt = sqrt;
exports.scaleQuantile = quantile;
exports.scaleQuantize = quantize;
exports.scaleThreshold = threshold;
exports.scaleTime = time;
exports.scaleUtc = utcTime;
exports.scaleSequential = sequential;
exports.scaleSequentialLog = sequentialLog;
exports.scaleSequentialPow = sequentialPow;
exports.scaleSequentialSqrt = sequentialSqrt;
exports.scaleSequentialSymlog = sequentialSymlog;
exports.scaleSequentialQuantile = sequentialQuantile;
exports.scaleDiverging = diverging;
exports.scaleDivergingLog = divergingLog;
exports.scaleDivergingPow = divergingPow;
exports.scaleDivergingSqrt = divergingSqrt;
exports.scaleDivergingSymlog = divergingSymlog;
exports.tickFormat = tickFormat;

Object.defineProperty(exports, '__esModule', { value: true });

})));

},{"d3-array":37,"d3-collection":41,"d3-format":50,"d3-interpolate":53,"d3-time":63,"d3-time-format":62}],60:[function(require,module,exports){
// https://d3js.org/d3-selection/ v1.4.2 Copyright 2020 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
typeof define === 'function' && define.amd ? define(['exports'], factory) :
(global = global || self, factory(global.d3 = global.d3 || {}));
}(this, function (exports) { 'use strict';

var xhtml = "http://www.w3.org/1999/xhtml";

var namespaces = {
  svg: "http://www.w3.org/2000/svg",
  xhtml: xhtml,
  xlink: "http://www.w3.org/1999/xlink",
  xml: "http://www.w3.org/XML/1998/namespace",
  xmlns: "http://www.w3.org/2000/xmlns/"
};

function namespace(name) {
  var prefix = name += "", i = prefix.indexOf(":");
  if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
  return namespaces.hasOwnProperty(prefix) ? {space: namespaces[prefix], local: name} : name;
}

function creatorInherit(name) {
  return function() {
    var document = this.ownerDocument,
        uri = this.namespaceURI;
    return uri === xhtml && document.documentElement.namespaceURI === xhtml
        ? document.createElement(name)
        : document.createElementNS(uri, name);
  };
}

function creatorFixed(fullname) {
  return function() {
    return this.ownerDocument.createElementNS(fullname.space, fullname.local);
  };
}

function creator(name) {
  var fullname = namespace(name);
  return (fullname.local
      ? creatorFixed
      : creatorInherit)(fullname);
}

function none() {}

function selector(selector) {
  return selector == null ? none : function() {
    return this.querySelector(selector);
  };
}

function selection_select(select) {
  if (typeof select !== "function") select = selector(select);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
        if ("__data__" in node) subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
      }
    }
  }

  return new Selection(subgroups, this._parents);
}

function empty() {
  return [];
}

function selectorAll(selector) {
  return selector == null ? empty : function() {
    return this.querySelectorAll(selector);
  };
}

function selection_selectAll(select) {
  if (typeof select !== "function") select = selectorAll(select);

  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        subgroups.push(select.call(node, node.__data__, i, group));
        parents.push(node);
      }
    }
  }

  return new Selection(subgroups, parents);
}

function matcher(selector) {
  return function() {
    return this.matches(selector);
  };
}

function selection_filter(match) {
  if (typeof match !== "function") match = matcher(match);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }

  return new Selection(subgroups, this._parents);
}

function sparse(update) {
  return new Array(update.length);
}

function selection_enter() {
  return new Selection(this._enter || this._groups.map(sparse), this._parents);
}

function EnterNode(parent, datum) {
  this.ownerDocument = parent.ownerDocument;
  this.namespaceURI = parent.namespaceURI;
  this._next = null;
  this._parent = parent;
  this.__data__ = datum;
}

EnterNode.prototype = {
  constructor: EnterNode,
  appendChild: function(child) { return this._parent.insertBefore(child, this._next); },
  insertBefore: function(child, next) { return this._parent.insertBefore(child, next); },
  querySelector: function(selector) { return this._parent.querySelector(selector); },
  querySelectorAll: function(selector) { return this._parent.querySelectorAll(selector); }
};

function constant(x) {
  return function() {
    return x;
  };
}

var keyPrefix = "$"; // Protect against keys like “__proto__”.

function bindIndex(parent, group, enter, update, exit, data) {
  var i = 0,
      node,
      groupLength = group.length,
      dataLength = data.length;

  // Put any non-null nodes that fit into update.
  // Put any null nodes into enter.
  // Put any remaining data into enter.
  for (; i < dataLength; ++i) {
    if (node = group[i]) {
      node.__data__ = data[i];
      update[i] = node;
    } else {
      enter[i] = new EnterNode(parent, data[i]);
    }
  }

  // Put any non-null nodes that don’t fit into exit.
  for (; i < groupLength; ++i) {
    if (node = group[i]) {
      exit[i] = node;
    }
  }
}

function bindKey(parent, group, enter, update, exit, data, key) {
  var i,
      node,
      nodeByKeyValue = {},
      groupLength = group.length,
      dataLength = data.length,
      keyValues = new Array(groupLength),
      keyValue;

  // Compute the key for each node.
  // If multiple nodes have the same key, the duplicates are added to exit.
  for (i = 0; i < groupLength; ++i) {
    if (node = group[i]) {
      keyValues[i] = keyValue = keyPrefix + key.call(node, node.__data__, i, group);
      if (keyValue in nodeByKeyValue) {
        exit[i] = node;
      } else {
        nodeByKeyValue[keyValue] = node;
      }
    }
  }

  // Compute the key for each datum.
  // If there a node associated with this key, join and add it to update.
  // If there is not (or the key is a duplicate), add it to enter.
  for (i = 0; i < dataLength; ++i) {
    keyValue = keyPrefix + key.call(parent, data[i], i, data);
    if (node = nodeByKeyValue[keyValue]) {
      update[i] = node;
      node.__data__ = data[i];
      nodeByKeyValue[keyValue] = null;
    } else {
      enter[i] = new EnterNode(parent, data[i]);
    }
  }

  // Add any remaining nodes that were not bound to data to exit.
  for (i = 0; i < groupLength; ++i) {
    if ((node = group[i]) && (nodeByKeyValue[keyValues[i]] === node)) {
      exit[i] = node;
    }
  }
}

function selection_data(value, key) {
  if (!value) {
    data = new Array(this.size()), j = -1;
    this.each(function(d) { data[++j] = d; });
    return data;
  }

  var bind = key ? bindKey : bindIndex,
      parents = this._parents,
      groups = this._groups;

  if (typeof value !== "function") value = constant(value);

  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
    var parent = parents[j],
        group = groups[j],
        groupLength = group.length,
        data = value.call(parent, parent && parent.__data__, j, parents),
        dataLength = data.length,
        enterGroup = enter[j] = new Array(dataLength),
        updateGroup = update[j] = new Array(dataLength),
        exitGroup = exit[j] = new Array(groupLength);

    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);

    // Now connect the enter nodes to their following update node, such that
    // appendChild can insert the materialized enter node before this node,
    // rather than at the end of the parent node.
    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
      if (previous = enterGroup[i0]) {
        if (i0 >= i1) i1 = i0 + 1;
        while (!(next = updateGroup[i1]) && ++i1 < dataLength);
        previous._next = next || null;
      }
    }
  }

  update = new Selection(update, parents);
  update._enter = enter;
  update._exit = exit;
  return update;
}

function selection_exit() {
  return new Selection(this._exit || this._groups.map(sparse), this._parents);
}

function selection_join(onenter, onupdate, onexit) {
  var enter = this.enter(), update = this, exit = this.exit();
  enter = typeof onenter === "function" ? onenter(enter) : enter.append(onenter + "");
  if (onupdate != null) update = onupdate(update);
  if (onexit == null) exit.remove(); else onexit(exit);
  return enter && update ? enter.merge(update).order() : update;
}

function selection_merge(selection) {

  for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }

  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }

  return new Selection(merges, this._parents);
}

function selection_order() {

  for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {
    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
      if (node = group[i]) {
        if (next && node.compareDocumentPosition(next) ^ 4) next.parentNode.insertBefore(node, next);
        next = node;
      }
    }
  }

  return this;
}

function selection_sort(compare) {
  if (!compare) compare = ascending;

  function compareNode(a, b) {
    return a && b ? compare(a.__data__, b.__data__) : !a - !b;
  }

  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        sortgroup[i] = node;
      }
    }
    sortgroup.sort(compareNode);
  }

  return new Selection(sortgroups, this._parents).order();
}

function ascending(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}

function selection_call() {
  var callback = arguments[0];
  arguments[0] = this;
  callback.apply(null, arguments);
  return this;
}

function selection_nodes() {
  var nodes = new Array(this.size()), i = -1;
  this.each(function() { nodes[++i] = this; });
  return nodes;
}

function selection_node() {

  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
      var node = group[i];
      if (node) return node;
    }
  }

  return null;
}

function selection_size() {
  var size = 0;
  this.each(function() { ++size; });
  return size;
}

function selection_empty() {
  return !this.node();
}

function selection_each(callback) {

  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
      if (node = group[i]) callback.call(node, node.__data__, i, group);
    }
  }

  return this;
}

function attrRemove(name) {
  return function() {
    this.removeAttribute(name);
  };
}

function attrRemoveNS(fullname) {
  return function() {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}

function attrConstant(name, value) {
  return function() {
    this.setAttribute(name, value);
  };
}

function attrConstantNS(fullname, value) {
  return function() {
    this.setAttributeNS(fullname.space, fullname.local, value);
  };
}

function attrFunction(name, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) this.removeAttribute(name);
    else this.setAttribute(name, v);
  };
}

function attrFunctionNS(fullname, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) this.removeAttributeNS(fullname.space, fullname.local);
    else this.setAttributeNS(fullname.space, fullname.local, v);
  };
}

function selection_attr(name, value) {
  var fullname = namespace(name);

  if (arguments.length < 2) {
    var node = this.node();
    return fullname.local
        ? node.getAttributeNS(fullname.space, fullname.local)
        : node.getAttribute(fullname);
  }

  return this.each((value == null
      ? (fullname.local ? attrRemoveNS : attrRemove) : (typeof value === "function"
      ? (fullname.local ? attrFunctionNS : attrFunction)
      : (fullname.local ? attrConstantNS : attrConstant)))(fullname, value));
}

function defaultView(node) {
  return (node.ownerDocument && node.ownerDocument.defaultView) // node is a Node
      || (node.document && node) // node is a Window
      || node.defaultView; // node is a Document
}

function styleRemove(name) {
  return function() {
    this.style.removeProperty(name);
  };
}

function styleConstant(name, value, priority) {
  return function() {
    this.style.setProperty(name, value, priority);
  };
}

function styleFunction(name, value, priority) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) this.style.removeProperty(name);
    else this.style.setProperty(name, v, priority);
  };
}

function selection_style(name, value, priority) {
  return arguments.length > 1
      ? this.each((value == null
            ? styleRemove : typeof value === "function"
            ? styleFunction
            : styleConstant)(name, value, priority == null ? "" : priority))
      : styleValue(this.node(), name);
}

function styleValue(node, name) {
  return node.style.getPropertyValue(name)
      || defaultView(node).getComputedStyle(node, null).getPropertyValue(name);
}

function propertyRemove(name) {
  return function() {
    delete this[name];
  };
}

function propertyConstant(name, value) {
  return function() {
    this[name] = value;
  };
}

function propertyFunction(name, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) delete this[name];
    else this[name] = v;
  };
}

function selection_property(name, value) {
  return arguments.length > 1
      ? this.each((value == null
          ? propertyRemove : typeof value === "function"
          ? propertyFunction
          : propertyConstant)(name, value))
      : this.node()[name];
}

function classArray(string) {
  return string.trim().split(/^|\s+/);
}

function classList(node) {
  return node.classList || new ClassList(node);
}

function ClassList(node) {
  this._node = node;
  this._names = classArray(node.getAttribute("class") || "");
}

ClassList.prototype = {
  add: function(name) {
    var i = this._names.indexOf(name);
    if (i < 0) {
      this._names.push(name);
      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  remove: function(name) {
    var i = this._names.indexOf(name);
    if (i >= 0) {
      this._names.splice(i, 1);
      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  contains: function(name) {
    return this._names.indexOf(name) >= 0;
  }
};

function classedAdd(node, names) {
  var list = classList(node), i = -1, n = names.length;
  while (++i < n) list.add(names[i]);
}

function classedRemove(node, names) {
  var list = classList(node), i = -1, n = names.length;
  while (++i < n) list.remove(names[i]);
}

function classedTrue(names) {
  return function() {
    classedAdd(this, names);
  };
}

function classedFalse(names) {
  return function() {
    classedRemove(this, names);
  };
}

function classedFunction(names, value) {
  return function() {
    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
  };
}

function selection_classed(name, value) {
  var names = classArray(name + "");

  if (arguments.length < 2) {
    var list = classList(this.node()), i = -1, n = names.length;
    while (++i < n) if (!list.contains(names[i])) return false;
    return true;
  }

  return this.each((typeof value === "function"
      ? classedFunction : value
      ? classedTrue
      : classedFalse)(names, value));
}

function textRemove() {
  this.textContent = "";
}

function textConstant(value) {
  return function() {
    this.textContent = value;
  };
}

function textFunction(value) {
  return function() {
    var v = value.apply(this, arguments);
    this.textContent = v == null ? "" : v;
  };
}

function selection_text(value) {
  return arguments.length
      ? this.each(value == null
          ? textRemove : (typeof value === "function"
          ? textFunction
          : textConstant)(value))
      : this.node().textContent;
}

function htmlRemove() {
  this.innerHTML = "";
}

function htmlConstant(value) {
  return function() {
    this.innerHTML = value;
  };
}

function htmlFunction(value) {
  return function() {
    var v = value.apply(this, arguments);
    this.innerHTML = v == null ? "" : v;
  };
}

function selection_html(value) {
  return arguments.length
      ? this.each(value == null
          ? htmlRemove : (typeof value === "function"
          ? htmlFunction
          : htmlConstant)(value))
      : this.node().innerHTML;
}

function raise() {
  if (this.nextSibling) this.parentNode.appendChild(this);
}

function selection_raise() {
  return this.each(raise);
}

function lower() {
  if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);
}

function selection_lower() {
  return this.each(lower);
}

function selection_append(name) {
  var create = typeof name === "function" ? name : creator(name);
  return this.select(function() {
    return this.appendChild(create.apply(this, arguments));
  });
}

function constantNull() {
  return null;
}

function selection_insert(name, before) {
  var create = typeof name === "function" ? name : creator(name),
      select = before == null ? constantNull : typeof before === "function" ? before : selector(before);
  return this.select(function() {
    return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);
  });
}

function remove() {
  var parent = this.parentNode;
  if (parent) parent.removeChild(this);
}

function selection_remove() {
  return this.each(remove);
}

function selection_cloneShallow() {
  var clone = this.cloneNode(false), parent = this.parentNode;
  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
}

function selection_cloneDeep() {
  var clone = this.cloneNode(true), parent = this.parentNode;
  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
}

function selection_clone(deep) {
  return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
}

function selection_datum(value) {
  return arguments.length
      ? this.property("__data__", value)
      : this.node().__data__;
}

var filterEvents = {};

exports.event = null;

if (typeof document !== "undefined") {
  var element = document.documentElement;
  if (!("onmouseenter" in element)) {
    filterEvents = {mouseenter: "mouseover", mouseleave: "mouseout"};
  }
}

function filterContextListener(listener, index, group) {
  listener = contextListener(listener, index, group);
  return function(event) {
    var related = event.relatedTarget;
    if (!related || (related !== this && !(related.compareDocumentPosition(this) & 8))) {
      listener.call(this, event);
    }
  };
}

function contextListener(listener, index, group) {
  return function(event1) {
    var event0 = exports.event; // Events can be reentrant (e.g., focus).
    exports.event = event1;
    try {
      listener.call(this, this.__data__, index, group);
    } finally {
      exports.event = event0;
    }
  };
}

function parseTypenames(typenames) {
  return typenames.trim().split(/^|\s+/).map(function(t) {
    var name = "", i = t.indexOf(".");
    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
    return {type: t, name: name};
  });
}

function onRemove(typename) {
  return function() {
    var on = this.__on;
    if (!on) return;
    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.capture);
      } else {
        on[++i] = o;
      }
    }
    if (++i) on.length = i;
    else delete this.__on;
  };
}

function onAdd(typename, value, capture) {
  var wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener;
  return function(d, i, group) {
    var on = this.__on, o, listener = wrap(value, i, group);
    if (on) for (var j = 0, m = on.length; j < m; ++j) {
      if ((o = on[j]).type === typename.type && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.capture);
        this.addEventListener(o.type, o.listener = listener, o.capture = capture);
        o.value = value;
        return;
      }
    }
    this.addEventListener(typename.type, listener, capture);
    o = {type: typename.type, name: typename.name, value: value, listener: listener, capture: capture};
    if (!on) this.__on = [o];
    else on.push(o);
  };
}

function selection_on(typename, value, capture) {
  var typenames = parseTypenames(typename + ""), i, n = typenames.length, t;

  if (arguments.length < 2) {
    var on = this.node().__on;
    if (on) for (var j = 0, m = on.length, o; j < m; ++j) {
      for (i = 0, o = on[j]; i < n; ++i) {
        if ((t = typenames[i]).type === o.type && t.name === o.name) {
          return o.value;
        }
      }
    }
    return;
  }

  on = value ? onAdd : onRemove;
  if (capture == null) capture = false;
  for (i = 0; i < n; ++i) this.each(on(typenames[i], value, capture));
  return this;
}

function customEvent(event1, listener, that, args) {
  var event0 = exports.event;
  event1.sourceEvent = exports.event;
  exports.event = event1;
  try {
    return listener.apply(that, args);
  } finally {
    exports.event = event0;
  }
}

function dispatchEvent(node, type, params) {
  var window = defaultView(node),
      event = window.CustomEvent;

  if (typeof event === "function") {
    event = new event(type, params);
  } else {
    event = window.document.createEvent("Event");
    if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;
    else event.initEvent(type, false, false);
  }

  node.dispatchEvent(event);
}

function dispatchConstant(type, params) {
  return function() {
    return dispatchEvent(this, type, params);
  };
}

function dispatchFunction(type, params) {
  return function() {
    return dispatchEvent(this, type, params.apply(this, arguments));
  };
}

function selection_dispatch(type, params) {
  return this.each((typeof params === "function"
      ? dispatchFunction
      : dispatchConstant)(type, params));
}

var root = [null];

function Selection(groups, parents) {
  this._groups = groups;
  this._parents = parents;
}

function selection() {
  return new Selection([[document.documentElement]], root);
}

Selection.prototype = selection.prototype = {
  constructor: Selection,
  select: selection_select,
  selectAll: selection_selectAll,
  filter: selection_filter,
  data: selection_data,
  enter: selection_enter,
  exit: selection_exit,
  join: selection_join,
  merge: selection_merge,
  order: selection_order,
  sort: selection_sort,
  call: selection_call,
  nodes: selection_nodes,
  node: selection_node,
  size: selection_size,
  empty: selection_empty,
  each: selection_each,
  attr: selection_attr,
  style: selection_style,
  property: selection_property,
  classed: selection_classed,
  text: selection_text,
  html: selection_html,
  raise: selection_raise,
  lower: selection_lower,
  append: selection_append,
  insert: selection_insert,
  remove: selection_remove,
  clone: selection_clone,
  datum: selection_datum,
  on: selection_on,
  dispatch: selection_dispatch
};

function select(selector) {
  return typeof selector === "string"
      ? new Selection([[document.querySelector(selector)]], [document.documentElement])
      : new Selection([[selector]], root);
}

function create(name) {
  return select(creator(name).call(document.documentElement));
}

var nextId = 0;

function local() {
  return new Local;
}

function Local() {
  this._ = "@" + (++nextId).toString(36);
}

Local.prototype = local.prototype = {
  constructor: Local,
  get: function(node) {
    var id = this._;
    while (!(id in node)) if (!(node = node.parentNode)) return;
    return node[id];
  },
  set: function(node, value) {
    return node[this._] = value;
  },
  remove: function(node) {
    return this._ in node && delete node[this._];
  },
  toString: function() {
    return this._;
  }
};

function sourceEvent() {
  var current = exports.event, source;
  while (source = current.sourceEvent) current = source;
  return current;
}

function point(node, event) {
  var svg = node.ownerSVGElement || node;

  if (svg.createSVGPoint) {
    var point = svg.createSVGPoint();
    point.x = event.clientX, point.y = event.clientY;
    point = point.matrixTransform(node.getScreenCTM().inverse());
    return [point.x, point.y];
  }

  var rect = node.getBoundingClientRect();
  return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];
}

function mouse(node) {
  var event = sourceEvent();
  if (event.changedTouches) event = event.changedTouches[0];
  return point(node, event);
}

function selectAll(selector) {
  return typeof selector === "string"
      ? new Selection([document.querySelectorAll(selector)], [document.documentElement])
      : new Selection([selector == null ? [] : selector], root);
}

function touch(node, touches, identifier) {
  if (arguments.length < 3) identifier = touches, touches = sourceEvent().changedTouches;

  for (var i = 0, n = touches ? touches.length : 0, touch; i < n; ++i) {
    if ((touch = touches[i]).identifier === identifier) {
      return point(node, touch);
    }
  }

  return null;
}

function touches(node, touches) {
  if (touches == null) touches = sourceEvent().touches;

  for (var i = 0, n = touches ? touches.length : 0, points = new Array(n); i < n; ++i) {
    points[i] = point(node, touches[i]);
  }

  return points;
}

exports.clientPoint = point;
exports.create = create;
exports.creator = creator;
exports.customEvent = customEvent;
exports.local = local;
exports.matcher = matcher;
exports.mouse = mouse;
exports.namespace = namespace;
exports.namespaces = namespaces;
exports.select = select;
exports.selectAll = selectAll;
exports.selection = selection;
exports.selector = selector;
exports.selectorAll = selectorAll;
exports.style = styleValue;
exports.touch = touch;
exports.touches = touches;
exports.window = defaultView;

Object.defineProperty(exports, '__esModule', { value: true });

}));

},{}],61:[function(require,module,exports){
// https://d3js.org/d3-shape/ v1.3.7 Copyright 2019 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-path')) :
typeof define === 'function' && define.amd ? define(['exports', 'd3-path'], factory) :
(global = global || self, factory(global.d3 = global.d3 || {}, global.d3));
}(this, function (exports, d3Path) { 'use strict';

function constant(x) {
  return function constant() {
    return x;
  };
}

var abs = Math.abs;
var atan2 = Math.atan2;
var cos = Math.cos;
var max = Math.max;
var min = Math.min;
var sin = Math.sin;
var sqrt = Math.sqrt;

var epsilon = 1e-12;
var pi = Math.PI;
var halfPi = pi / 2;
var tau = 2 * pi;

function acos(x) {
  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
}

function asin(x) {
  return x >= 1 ? halfPi : x <= -1 ? -halfPi : Math.asin(x);
}

function arcInnerRadius(d) {
  return d.innerRadius;
}

function arcOuterRadius(d) {
  return d.outerRadius;
}

function arcStartAngle(d) {
  return d.startAngle;
}

function arcEndAngle(d) {
  return d.endAngle;
}

function arcPadAngle(d) {
  return d && d.padAngle; // Note: optional!
}

function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {
  var x10 = x1 - x0, y10 = y1 - y0,
      x32 = x3 - x2, y32 = y3 - y2,
      t = y32 * x10 - x32 * y10;
  if (t * t < epsilon) return;
  t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / t;
  return [x0 + t * x10, y0 + t * y10];
}

// Compute perpendicular offset line of length rc.
// http://mathworld.wolfram.com/Circle-LineIntersection.html
function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
  var x01 = x0 - x1,
      y01 = y0 - y1,
      lo = (cw ? rc : -rc) / sqrt(x01 * x01 + y01 * y01),
      ox = lo * y01,
      oy = -lo * x01,
      x11 = x0 + ox,
      y11 = y0 + oy,
      x10 = x1 + ox,
      y10 = y1 + oy,
      x00 = (x11 + x10) / 2,
      y00 = (y11 + y10) / 2,
      dx = x10 - x11,
      dy = y10 - y11,
      d2 = dx * dx + dy * dy,
      r = r1 - rc,
      D = x11 * y10 - x10 * y11,
      d = (dy < 0 ? -1 : 1) * sqrt(max(0, r * r * d2 - D * D)),
      cx0 = (D * dy - dx * d) / d2,
      cy0 = (-D * dx - dy * d) / d2,
      cx1 = (D * dy + dx * d) / d2,
      cy1 = (-D * dx + dy * d) / d2,
      dx0 = cx0 - x00,
      dy0 = cy0 - y00,
      dx1 = cx1 - x00,
      dy1 = cy1 - y00;

  // Pick the closer of the two intersection points.
  // TODO Is there a faster way to determine which intersection to use?
  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;

  return {
    cx: cx0,
    cy: cy0,
    x01: -ox,
    y01: -oy,
    x11: cx0 * (r1 / r - 1),
    y11: cy0 * (r1 / r - 1)
  };
}

function arc() {
  var innerRadius = arcInnerRadius,
      outerRadius = arcOuterRadius,
      cornerRadius = constant(0),
      padRadius = null,
      startAngle = arcStartAngle,
      endAngle = arcEndAngle,
      padAngle = arcPadAngle,
      context = null;

  function arc() {
    var buffer,
        r,
        r0 = +innerRadius.apply(this, arguments),
        r1 = +outerRadius.apply(this, arguments),
        a0 = startAngle.apply(this, arguments) - halfPi,
        a1 = endAngle.apply(this, arguments) - halfPi,
        da = abs(a1 - a0),
        cw = a1 > a0;

    if (!context) context = buffer = d3Path.path();

    // Ensure that the outer radius is always larger than the inner radius.
    if (r1 < r0) r = r1, r1 = r0, r0 = r;

    // Is it a point?
    if (!(r1 > epsilon)) context.moveTo(0, 0);

    // Or is it a circle or annulus?
    else if (da > tau - epsilon) {
      context.moveTo(r1 * cos(a0), r1 * sin(a0));
      context.arc(0, 0, r1, a0, a1, !cw);
      if (r0 > epsilon) {
        context.moveTo(r0 * cos(a1), r0 * sin(a1));
        context.arc(0, 0, r0, a1, a0, cw);
      }
    }

    // Or is it a circular or annular sector?
    else {
      var a01 = a0,
          a11 = a1,
          a00 = a0,
          a10 = a1,
          da0 = da,
          da1 = da,
          ap = padAngle.apply(this, arguments) / 2,
          rp = (ap > epsilon) && (padRadius ? +padRadius.apply(this, arguments) : sqrt(r0 * r0 + r1 * r1)),
          rc = min(abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),
          rc0 = rc,
          rc1 = rc,
          t0,
          t1;

      // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.
      if (rp > epsilon) {
        var p0 = asin(rp / r0 * sin(ap)),
            p1 = asin(rp / r1 * sin(ap));
        if ((da0 -= p0 * 2) > epsilon) p0 *= (cw ? 1 : -1), a00 += p0, a10 -= p0;
        else da0 = 0, a00 = a10 = (a0 + a1) / 2;
        if ((da1 -= p1 * 2) > epsilon) p1 *= (cw ? 1 : -1), a01 += p1, a11 -= p1;
        else da1 = 0, a01 = a11 = (a0 + a1) / 2;
      }

      var x01 = r1 * cos(a01),
          y01 = r1 * sin(a01),
          x10 = r0 * cos(a10),
          y10 = r0 * sin(a10);

      // Apply rounded corners?
      if (rc > epsilon) {
        var x11 = r1 * cos(a11),
            y11 = r1 * sin(a11),
            x00 = r0 * cos(a00),
            y00 = r0 * sin(a00),
            oc;

        // Restrict the corner radius according to the sector angle.
        if (da < pi && (oc = intersect(x01, y01, x00, y00, x11, y11, x10, y10))) {
          var ax = x01 - oc[0],
              ay = y01 - oc[1],
              bx = x11 - oc[0],
              by = y11 - oc[1],
              kc = 1 / sin(acos((ax * bx + ay * by) / (sqrt(ax * ax + ay * ay) * sqrt(bx * bx + by * by))) / 2),
              lc = sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
          rc0 = min(rc, (r0 - lc) / (kc - 1));
          rc1 = min(rc, (r1 - lc) / (kc + 1));
        }
      }

      // Is the sector collapsed to a line?
      if (!(da1 > epsilon)) context.moveTo(x01, y01);

      // Does the sector’s outer ring have rounded corners?
      else if (rc1 > epsilon) {
        t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
        t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);

        context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);

        // Have the corners merged?
        if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);

        // Otherwise, draw the two corners and the ring.
        else {
          context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);
          context.arc(0, 0, r1, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);
          context.arc(t1.cx, t1.cy, rc1, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);
        }
      }

      // Or is the outer ring just a circular arc?
      else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);

      // Is there no inner ring, and it’s a circular sector?
      // Or perhaps it’s an annular sector collapsed due to padding?
      if (!(r0 > epsilon) || !(da0 > epsilon)) context.lineTo(x10, y10);

      // Does the sector’s inner ring (or point) have rounded corners?
      else if (rc0 > epsilon) {
        t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
        t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);

        context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);

        // Have the corners merged?
        if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);

        // Otherwise, draw the two corners and the ring.
        else {
          context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);
          context.arc(0, 0, r0, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);
          context.arc(t1.cx, t1.cy, rc0, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);
        }
      }

      // Or is the inner ring just a circular arc?
      else context.arc(0, 0, r0, a10, a00, cw);
    }

    context.closePath();

    if (buffer) return context = null, buffer + "" || null;
  }

  arc.centroid = function() {
    var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,
        a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi / 2;
    return [cos(a) * r, sin(a) * r];
  };

  arc.innerRadius = function(_) {
    return arguments.length ? (innerRadius = typeof _ === "function" ? _ : constant(+_), arc) : innerRadius;
  };

  arc.outerRadius = function(_) {
    return arguments.length ? (outerRadius = typeof _ === "function" ? _ : constant(+_), arc) : outerRadius;
  };

  arc.cornerRadius = function(_) {
    return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : constant(+_), arc) : cornerRadius;
  };

  arc.padRadius = function(_) {
    return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : constant(+_), arc) : padRadius;
  };

  arc.startAngle = function(_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant(+_), arc) : startAngle;
  };

  arc.endAngle = function(_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant(+_), arc) : endAngle;
  };

  arc.padAngle = function(_) {
    return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant(+_), arc) : padAngle;
  };

  arc.context = function(_) {
    return arguments.length ? ((context = _ == null ? null : _), arc) : context;
  };

  return arc;
}

function Linear(context) {
  this._context = context;
}

Linear.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
      case 1: this._point = 2; // proceed
      default: this._context.lineTo(x, y); break;
    }
  }
};

function curveLinear(context) {
  return new Linear(context);
}

function x(p) {
  return p[0];
}

function y(p) {
  return p[1];
}

function line() {
  var x$1 = x,
      y$1 = y,
      defined = constant(true),
      context = null,
      curve = curveLinear,
      output = null;

  function line(data) {
    var i,
        n = data.length,
        d,
        defined0 = false,
        buffer;

    if (context == null) output = curve(buffer = d3Path.path());

    for (i = 0; i <= n; ++i) {
      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
        if (defined0 = !defined0) output.lineStart();
        else output.lineEnd();
      }
      if (defined0) output.point(+x$1(d, i, data), +y$1(d, i, data));
    }

    if (buffer) return output = null, buffer + "" || null;
  }

  line.x = function(_) {
    return arguments.length ? (x$1 = typeof _ === "function" ? _ : constant(+_), line) : x$1;
  };

  line.y = function(_) {
    return arguments.length ? (y$1 = typeof _ === "function" ? _ : constant(+_), line) : y$1;
  };

  line.defined = function(_) {
    return arguments.length ? (defined = typeof _ === "function" ? _ : constant(!!_), line) : defined;
  };

  line.curve = function(_) {
    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
  };

  line.context = function(_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
  };

  return line;
}

function area() {
  var x0 = x,
      x1 = null,
      y0 = constant(0),
      y1 = y,
      defined = constant(true),
      context = null,
      curve = curveLinear,
      output = null;

  function area(data) {
    var i,
        j,
        k,
        n = data.length,
        d,
        defined0 = false,
        buffer,
        x0z = new Array(n),
        y0z = new Array(n);

    if (context == null) output = curve(buffer = d3Path.path());

    for (i = 0; i <= n; ++i) {
      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
        if (defined0 = !defined0) {
          j = i;
          output.areaStart();
          output.lineStart();
        } else {
          output.lineEnd();
          output.lineStart();
          for (k = i - 1; k >= j; --k) {
            output.point(x0z[k], y0z[k]);
          }
          output.lineEnd();
          output.areaEnd();
        }
      }
      if (defined0) {
        x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);
        output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);
      }
    }

    if (buffer) return output = null, buffer + "" || null;
  }

  function arealine() {
    return line().defined(defined).curve(curve).context(context);
  }

  area.x = function(_) {
    return arguments.length ? (x0 = typeof _ === "function" ? _ : constant(+_), x1 = null, area) : x0;
  };

  area.x0 = function(_) {
    return arguments.length ? (x0 = typeof _ === "function" ? _ : constant(+_), area) : x0;
  };

  area.x1 = function(_) {
    return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : constant(+_), area) : x1;
  };

  area.y = function(_) {
    return arguments.length ? (y0 = typeof _ === "function" ? _ : constant(+_), y1 = null, area) : y0;
  };

  area.y0 = function(_) {
    return arguments.length ? (y0 = typeof _ === "function" ? _ : constant(+_), area) : y0;
  };

  area.y1 = function(_) {
    return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : constant(+_), area) : y1;
  };

  area.lineX0 =
  area.lineY0 = function() {
    return arealine().x(x0).y(y0);
  };

  area.lineY1 = function() {
    return arealine().x(x0).y(y1);
  };

  area.lineX1 = function() {
    return arealine().x(x1).y(y0);
  };

  area.defined = function(_) {
    return arguments.length ? (defined = typeof _ === "function" ? _ : constant(!!_), area) : defined;
  };

  area.curve = function(_) {
    return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
  };

  area.context = function(_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
  };

  return area;
}

function descending(a, b) {
  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
}

function identity(d) {
  return d;
}

function pie() {
  var value = identity,
      sortValues = descending,
      sort = null,
      startAngle = constant(0),
      endAngle = constant(tau),
      padAngle = constant(0);

  function pie(data) {
    var i,
        n = data.length,
        j,
        k,
        sum = 0,
        index = new Array(n),
        arcs = new Array(n),
        a0 = +startAngle.apply(this, arguments),
        da = Math.min(tau, Math.max(-tau, endAngle.apply(this, arguments) - a0)),
        a1,
        p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)),
        pa = p * (da < 0 ? -1 : 1),
        v;

    for (i = 0; i < n; ++i) {
      if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {
        sum += v;
      }
    }

    // Optionally sort the arcs by previously-computed values or by data.
    if (sortValues != null) index.sort(function(i, j) { return sortValues(arcs[i], arcs[j]); });
    else if (sort != null) index.sort(function(i, j) { return sort(data[i], data[j]); });

    // Compute the arcs! They are stored in the original data's order.
    for (i = 0, k = sum ? (da - n * pa) / sum : 0; i < n; ++i, a0 = a1) {
      j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j] = {
        data: data[j],
        index: i,
        value: v,
        startAngle: a0,
        endAngle: a1,
        padAngle: p
      };
    }

    return arcs;
  }

  pie.value = function(_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : constant(+_), pie) : value;
  };

  pie.sortValues = function(_) {
    return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;
  };

  pie.sort = function(_) {
    return arguments.length ? (sort = _, sortValues = null, pie) : sort;
  };

  pie.startAngle = function(_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant(+_), pie) : startAngle;
  };

  pie.endAngle = function(_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant(+_), pie) : endAngle;
  };

  pie.padAngle = function(_) {
    return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant(+_), pie) : padAngle;
  };

  return pie;
}

var curveRadialLinear = curveRadial(curveLinear);

function Radial(curve) {
  this._curve = curve;
}

Radial.prototype = {
  areaStart: function() {
    this._curve.areaStart();
  },
  areaEnd: function() {
    this._curve.areaEnd();
  },
  lineStart: function() {
    this._curve.lineStart();
  },
  lineEnd: function() {
    this._curve.lineEnd();
  },
  point: function(a, r) {
    this._curve.point(r * Math.sin(a), r * -Math.cos(a));
  }
};

function curveRadial(curve) {

  function radial(context) {
    return new Radial(curve(context));
  }

  radial._curve = curve;

  return radial;
}

function lineRadial(l) {
  var c = l.curve;

  l.angle = l.x, delete l.x;
  l.radius = l.y, delete l.y;

  l.curve = function(_) {
    return arguments.length ? c(curveRadial(_)) : c()._curve;
  };

  return l;
}

function lineRadial$1() {
  return lineRadial(line().curve(curveRadialLinear));
}

function areaRadial() {
  var a = area().curve(curveRadialLinear),
      c = a.curve,
      x0 = a.lineX0,
      x1 = a.lineX1,
      y0 = a.lineY0,
      y1 = a.lineY1;

  a.angle = a.x, delete a.x;
  a.startAngle = a.x0, delete a.x0;
  a.endAngle = a.x1, delete a.x1;
  a.radius = a.y, delete a.y;
  a.innerRadius = a.y0, delete a.y0;
  a.outerRadius = a.y1, delete a.y1;
  a.lineStartAngle = function() { return lineRadial(x0()); }, delete a.lineX0;
  a.lineEndAngle = function() { return lineRadial(x1()); }, delete a.lineX1;
  a.lineInnerRadius = function() { return lineRadial(y0()); }, delete a.lineY0;
  a.lineOuterRadius = function() { return lineRadial(y1()); }, delete a.lineY1;

  a.curve = function(_) {
    return arguments.length ? c(curveRadial(_)) : c()._curve;
  };

  return a;
}

function pointRadial(x, y) {
  return [(y = +y) * Math.cos(x -= Math.PI / 2), y * Math.sin(x)];
}

var slice = Array.prototype.slice;

function linkSource(d) {
  return d.source;
}

function linkTarget(d) {
  return d.target;
}

function link(curve) {
  var source = linkSource,
      target = linkTarget,
      x$1 = x,
      y$1 = y,
      context = null;

  function link() {
    var buffer, argv = slice.call(arguments), s = source.apply(this, argv), t = target.apply(this, argv);
    if (!context) context = buffer = d3Path.path();
    curve(context, +x$1.apply(this, (argv[0] = s, argv)), +y$1.apply(this, argv), +x$1.apply(this, (argv[0] = t, argv)), +y$1.apply(this, argv));
    if (buffer) return context = null, buffer + "" || null;
  }

  link.source = function(_) {
    return arguments.length ? (source = _, link) : source;
  };

  link.target = function(_) {
    return arguments.length ? (target = _, link) : target;
  };

  link.x = function(_) {
    return arguments.length ? (x$1 = typeof _ === "function" ? _ : constant(+_), link) : x$1;
  };

  link.y = function(_) {
    return arguments.length ? (y$1 = typeof _ === "function" ? _ : constant(+_), link) : y$1;
  };

  link.context = function(_) {
    return arguments.length ? ((context = _ == null ? null : _), link) : context;
  };

  return link;
}

function curveHorizontal(context, x0, y0, x1, y1) {
  context.moveTo(x0, y0);
  context.bezierCurveTo(x0 = (x0 + x1) / 2, y0, x0, y1, x1, y1);
}

function curveVertical(context, x0, y0, x1, y1) {
  context.moveTo(x0, y0);
  context.bezierCurveTo(x0, y0 = (y0 + y1) / 2, x1, y0, x1, y1);
}

function curveRadial$1(context, x0, y0, x1, y1) {
  var p0 = pointRadial(x0, y0),
      p1 = pointRadial(x0, y0 = (y0 + y1) / 2),
      p2 = pointRadial(x1, y0),
      p3 = pointRadial(x1, y1);
  context.moveTo(p0[0], p0[1]);
  context.bezierCurveTo(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]);
}

function linkHorizontal() {
  return link(curveHorizontal);
}

function linkVertical() {
  return link(curveVertical);
}

function linkRadial() {
  var l = link(curveRadial$1);
  l.angle = l.x, delete l.x;
  l.radius = l.y, delete l.y;
  return l;
}

var circle = {
  draw: function(context, size) {
    var r = Math.sqrt(size / pi);
    context.moveTo(r, 0);
    context.arc(0, 0, r, 0, tau);
  }
};

var cross = {
  draw: function(context, size) {
    var r = Math.sqrt(size / 5) / 2;
    context.moveTo(-3 * r, -r);
    context.lineTo(-r, -r);
    context.lineTo(-r, -3 * r);
    context.lineTo(r, -3 * r);
    context.lineTo(r, -r);
    context.lineTo(3 * r, -r);
    context.lineTo(3 * r, r);
    context.lineTo(r, r);
    context.lineTo(r, 3 * r);
    context.lineTo(-r, 3 * r);
    context.lineTo(-r, r);
    context.lineTo(-3 * r, r);
    context.closePath();
  }
};

var tan30 = Math.sqrt(1 / 3),
    tan30_2 = tan30 * 2;

var diamond = {
  draw: function(context, size) {
    var y = Math.sqrt(size / tan30_2),
        x = y * tan30;
    context.moveTo(0, -y);
    context.lineTo(x, 0);
    context.lineTo(0, y);
    context.lineTo(-x, 0);
    context.closePath();
  }
};

var ka = 0.89081309152928522810,
    kr = Math.sin(pi / 10) / Math.sin(7 * pi / 10),
    kx = Math.sin(tau / 10) * kr,
    ky = -Math.cos(tau / 10) * kr;

var star = {
  draw: function(context, size) {
    var r = Math.sqrt(size * ka),
        x = kx * r,
        y = ky * r;
    context.moveTo(0, -r);
    context.lineTo(x, y);
    for (var i = 1; i < 5; ++i) {
      var a = tau * i / 5,
          c = Math.cos(a),
          s = Math.sin(a);
      context.lineTo(s * r, -c * r);
      context.lineTo(c * x - s * y, s * x + c * y);
    }
    context.closePath();
  }
};

var square = {
  draw: function(context, size) {
    var w = Math.sqrt(size),
        x = -w / 2;
    context.rect(x, x, w, w);
  }
};

var sqrt3 = Math.sqrt(3);

var triangle = {
  draw: function(context, size) {
    var y = -Math.sqrt(size / (sqrt3 * 3));
    context.moveTo(0, y * 2);
    context.lineTo(-sqrt3 * y, -y);
    context.lineTo(sqrt3 * y, -y);
    context.closePath();
  }
};

var c = -0.5,
    s = Math.sqrt(3) / 2,
    k = 1 / Math.sqrt(12),
    a = (k / 2 + 1) * 3;

var wye = {
  draw: function(context, size) {
    var r = Math.sqrt(size / a),
        x0 = r / 2,
        y0 = r * k,
        x1 = x0,
        y1 = r * k + r,
        x2 = -x1,
        y2 = y1;
    context.moveTo(x0, y0);
    context.lineTo(x1, y1);
    context.lineTo(x2, y2);
    context.lineTo(c * x0 - s * y0, s * x0 + c * y0);
    context.lineTo(c * x1 - s * y1, s * x1 + c * y1);
    context.lineTo(c * x2 - s * y2, s * x2 + c * y2);
    context.lineTo(c * x0 + s * y0, c * y0 - s * x0);
    context.lineTo(c * x1 + s * y1, c * y1 - s * x1);
    context.lineTo(c * x2 + s * y2, c * y2 - s * x2);
    context.closePath();
  }
};

var symbols = [
  circle,
  cross,
  diamond,
  square,
  star,
  triangle,
  wye
];

function symbol() {
  var type = constant(circle),
      size = constant(64),
      context = null;

  function symbol() {
    var buffer;
    if (!context) context = buffer = d3Path.path();
    type.apply(this, arguments).draw(context, +size.apply(this, arguments));
    if (buffer) return context = null, buffer + "" || null;
  }

  symbol.type = function(_) {
    return arguments.length ? (type = typeof _ === "function" ? _ : constant(_), symbol) : type;
  };

  symbol.size = function(_) {
    return arguments.length ? (size = typeof _ === "function" ? _ : constant(+_), symbol) : size;
  };

  symbol.context = function(_) {
    return arguments.length ? (context = _ == null ? null : _, symbol) : context;
  };

  return symbol;
}

function noop() {}

function point(that, x, y) {
  that._context.bezierCurveTo(
    (2 * that._x0 + that._x1) / 3,
    (2 * that._y0 + that._y1) / 3,
    (that._x0 + 2 * that._x1) / 3,
    (that._y0 + 2 * that._y1) / 3,
    (that._x0 + 4 * that._x1 + x) / 6,
    (that._y0 + 4 * that._y1 + y) / 6
  );
}

function Basis(context) {
  this._context = context;
}

Basis.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 =
    this._y0 = this._y1 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 3: point(this, this._x1, this._y1); // proceed
      case 2: this._context.lineTo(this._x1, this._y1); break;
    }
    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
      case 1: this._point = 2; break;
      case 2: this._point = 3; this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6); // proceed
      default: point(this, x, y); break;
    }
    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
  }
};

function basis(context) {
  return new Basis(context);
}

function BasisClosed(context) {
  this._context = context;
}

BasisClosed.prototype = {
  areaStart: noop,
  areaEnd: noop,
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 =
    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 1: {
        this._context.moveTo(this._x2, this._y2);
        this._context.closePath();
        break;
      }
      case 2: {
        this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
        this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
        this._context.closePath();
        break;
      }
      case 3: {
        this.point(this._x2, this._y2);
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        break;
      }
    }
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; this._x2 = x, this._y2 = y; break;
      case 1: this._point = 2; this._x3 = x, this._y3 = y; break;
      case 2: this._point = 3; this._x4 = x, this._y4 = y; this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6); break;
      default: point(this, x, y); break;
    }
    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
  }
};

function basisClosed(context) {
  return new BasisClosed(context);
}

function BasisOpen(context) {
  this._context = context;
}

BasisOpen.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 =
    this._y0 = this._y1 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; break;
      case 1: this._point = 2; break;
      case 2: this._point = 3; var x0 = (this._x0 + 4 * this._x1 + x) / 6, y0 = (this._y0 + 4 * this._y1 + y) / 6; this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0); break;
      case 3: this._point = 4; // proceed
      default: point(this, x, y); break;
    }
    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
  }
};

function basisOpen(context) {
  return new BasisOpen(context);
}

function Bundle(context, beta) {
  this._basis = new Basis(context);
  this._beta = beta;
}

Bundle.prototype = {
  lineStart: function() {
    this._x = [];
    this._y = [];
    this._basis.lineStart();
  },
  lineEnd: function() {
    var x = this._x,
        y = this._y,
        j = x.length - 1;

    if (j > 0) {
      var x0 = x[0],
          y0 = y[0],
          dx = x[j] - x0,
          dy = y[j] - y0,
          i = -1,
          t;

      while (++i <= j) {
        t = i / j;
        this._basis.point(
          this._beta * x[i] + (1 - this._beta) * (x0 + t * dx),
          this._beta * y[i] + (1 - this._beta) * (y0 + t * dy)
        );
      }
    }

    this._x = this._y = null;
    this._basis.lineEnd();
  },
  point: function(x, y) {
    this._x.push(+x);
    this._y.push(+y);
  }
};

var bundle = (function custom(beta) {

  function bundle(context) {
    return beta === 1 ? new Basis(context) : new Bundle(context, beta);
  }

  bundle.beta = function(beta) {
    return custom(+beta);
  };

  return bundle;
})(0.85);

function point$1(that, x, y) {
  that._context.bezierCurveTo(
    that._x1 + that._k * (that._x2 - that._x0),
    that._y1 + that._k * (that._y2 - that._y0),
    that._x2 + that._k * (that._x1 - x),
    that._y2 + that._k * (that._y1 - y),
    that._x2,
    that._y2
  );
}

function Cardinal(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}

Cardinal.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 =
    this._y0 = this._y1 = this._y2 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 2: this._context.lineTo(this._x2, this._y2); break;
      case 3: point$1(this, this._x1, this._y1); break;
    }
    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
      case 1: this._point = 2; this._x1 = x, this._y1 = y; break;
      case 2: this._point = 3; // proceed
      default: point$1(this, x, y); break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var cardinal = (function custom(tension) {

  function cardinal(context) {
    return new Cardinal(context, tension);
  }

  cardinal.tension = function(tension) {
    return custom(+tension);
  };

  return cardinal;
})(0);

function CardinalClosed(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}

CardinalClosed.prototype = {
  areaStart: noop,
  areaEnd: noop,
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =
    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 1: {
        this._context.moveTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 2: {
        this._context.lineTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 3: {
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        this.point(this._x5, this._y5);
        break;
      }
    }
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; this._x3 = x, this._y3 = y; break;
      case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;
      case 2: this._point = 3; this._x5 = x, this._y5 = y; break;
      default: point$1(this, x, y); break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var cardinalClosed = (function custom(tension) {

  function cardinal(context) {
    return new CardinalClosed(context, tension);
  }

  cardinal.tension = function(tension) {
    return custom(+tension);
  };

  return cardinal;
})(0);

function CardinalOpen(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}

CardinalOpen.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 =
    this._y0 = this._y1 = this._y2 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; break;
      case 1: this._point = 2; break;
      case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;
      case 3: this._point = 4; // proceed
      default: point$1(this, x, y); break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var cardinalOpen = (function custom(tension) {

  function cardinal(context) {
    return new CardinalOpen(context, tension);
  }

  cardinal.tension = function(tension) {
    return custom(+tension);
  };

  return cardinal;
})(0);

function point$2(that, x, y) {
  var x1 = that._x1,
      y1 = that._y1,
      x2 = that._x2,
      y2 = that._y2;

  if (that._l01_a > epsilon) {
    var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a,
        n = 3 * that._l01_a * (that._l01_a + that._l12_a);
    x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
    y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
  }

  if (that._l23_a > epsilon) {
    var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a,
        m = 3 * that._l23_a * (that._l23_a + that._l12_a);
    x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;
    y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;
  }

  that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);
}

function CatmullRom(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}

CatmullRom.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 =
    this._y0 = this._y1 = this._y2 = NaN;
    this._l01_a = this._l12_a = this._l23_a =
    this._l01_2a = this._l12_2a = this._l23_2a =
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 2: this._context.lineTo(this._x2, this._y2); break;
      case 3: this.point(this._x2, this._y2); break;
    }
    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;

    if (this._point) {
      var x23 = this._x2 - x,
          y23 = this._y2 - y;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }

    switch (this._point) {
      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
      case 1: this._point = 2; break;
      case 2: this._point = 3; // proceed
      default: point$2(this, x, y); break;
    }

    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var catmullRom = (function custom(alpha) {

  function catmullRom(context) {
    return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);
  }

  catmullRom.alpha = function(alpha) {
    return custom(+alpha);
  };

  return catmullRom;
})(0.5);

function CatmullRomClosed(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}

CatmullRomClosed.prototype = {
  areaStart: noop,
  areaEnd: noop,
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =
    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
    this._l01_a = this._l12_a = this._l23_a =
    this._l01_2a = this._l12_2a = this._l23_2a =
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 1: {
        this._context.moveTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 2: {
        this._context.lineTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 3: {
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        this.point(this._x5, this._y5);
        break;
      }
    }
  },
  point: function(x, y) {
    x = +x, y = +y;

    if (this._point) {
      var x23 = this._x2 - x,
          y23 = this._y2 - y;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }

    switch (this._point) {
      case 0: this._point = 1; this._x3 = x, this._y3 = y; break;
      case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;
      case 2: this._point = 3; this._x5 = x, this._y5 = y; break;
      default: point$2(this, x, y); break;
    }

    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var catmullRomClosed = (function custom(alpha) {

  function catmullRom(context) {
    return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);
  }

  catmullRom.alpha = function(alpha) {
    return custom(+alpha);
  };

  return catmullRom;
})(0.5);

function CatmullRomOpen(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}

CatmullRomOpen.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 =
    this._y0 = this._y1 = this._y2 = NaN;
    this._l01_a = this._l12_a = this._l23_a =
    this._l01_2a = this._l12_2a = this._l23_2a =
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;

    if (this._point) {
      var x23 = this._x2 - x,
          y23 = this._y2 - y;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }

    switch (this._point) {
      case 0: this._point = 1; break;
      case 1: this._point = 2; break;
      case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;
      case 3: this._point = 4; // proceed
      default: point$2(this, x, y); break;
    }

    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var catmullRomOpen = (function custom(alpha) {

  function catmullRom(context) {
    return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);
  }

  catmullRom.alpha = function(alpha) {
    return custom(+alpha);
  };

  return catmullRom;
})(0.5);

function LinearClosed(context) {
  this._context = context;
}

LinearClosed.prototype = {
  areaStart: noop,
  areaEnd: noop,
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._point) this._context.closePath();
  },
  point: function(x, y) {
    x = +x, y = +y;
    if (this._point) this._context.lineTo(x, y);
    else this._point = 1, this._context.moveTo(x, y);
  }
};

function linearClosed(context) {
  return new LinearClosed(context);
}

function sign(x) {
  return x < 0 ? -1 : 1;
}

// Calculate the slopes of the tangents (Hermite-type interpolation) based on
// the following paper: Steffen, M. 1990. A Simple Method for Monotonic
// Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.
// NOV(II), P. 443, 1990.
function slope3(that, x2, y2) {
  var h0 = that._x1 - that._x0,
      h1 = x2 - that._x1,
      s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),
      s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),
      p = (s0 * h1 + s1 * h0) / (h0 + h1);
  return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
}

// Calculate a one-sided slope.
function slope2(that, t) {
  var h = that._x1 - that._x0;
  return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
}

// According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations
// "you can express cubic Hermite interpolation in terms of cubic Bézier curves
// with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1".
function point$3(that, t0, t1) {
  var x0 = that._x0,
      y0 = that._y0,
      x1 = that._x1,
      y1 = that._y1,
      dx = (x1 - x0) / 3;
  that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);
}

function MonotoneX(context) {
  this._context = context;
}

MonotoneX.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 =
    this._y0 = this._y1 =
    this._t0 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 2: this._context.lineTo(this._x1, this._y1); break;
      case 3: point$3(this, this._t0, slope2(this, this._t0)); break;
    }
    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    var t1 = NaN;

    x = +x, y = +y;
    if (x === this._x1 && y === this._y1) return; // Ignore coincident points.
    switch (this._point) {
      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
      case 1: this._point = 2; break;
      case 2: this._point = 3; point$3(this, slope2(this, t1 = slope3(this, x, y)), t1); break;
      default: point$3(this, this._t0, t1 = slope3(this, x, y)); break;
    }

    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
    this._t0 = t1;
  }
};

function MonotoneY(context) {
  this._context = new ReflectContext(context);
}

(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x, y) {
  MonotoneX.prototype.point.call(this, y, x);
};

function ReflectContext(context) {
  this._context = context;
}

ReflectContext.prototype = {
  moveTo: function(x, y) { this._context.moveTo(y, x); },
  closePath: function() { this._context.closePath(); },
  lineTo: function(x, y) { this._context.lineTo(y, x); },
  bezierCurveTo: function(x1, y1, x2, y2, x, y) { this._context.bezierCurveTo(y1, x1, y2, x2, y, x); }
};

function monotoneX(context) {
  return new MonotoneX(context);
}

function monotoneY(context) {
  return new MonotoneY(context);
}

function Natural(context) {
  this._context = context;
}

Natural.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x = [];
    this._y = [];
  },
  lineEnd: function() {
    var x = this._x,
        y = this._y,
        n = x.length;

    if (n) {
      this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);
      if (n === 2) {
        this._context.lineTo(x[1], y[1]);
      } else {
        var px = controlPoints(x),
            py = controlPoints(y);
        for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {
          this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);
        }
      }
    }

    if (this._line || (this._line !== 0 && n === 1)) this._context.closePath();
    this._line = 1 - this._line;
    this._x = this._y = null;
  },
  point: function(x, y) {
    this._x.push(+x);
    this._y.push(+y);
  }
};

// See https://www.particleincell.com/2012/bezier-splines/ for derivation.
function controlPoints(x) {
  var i,
      n = x.length - 1,
      m,
      a = new Array(n),
      b = new Array(n),
      r = new Array(n);
  a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];
  for (i = 1; i < n - 1; ++i) a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];
  a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];
  for (i = 1; i < n; ++i) m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];
  a[n - 1] = r[n - 1] / b[n - 1];
  for (i = n - 2; i >= 0; --i) a[i] = (r[i] - a[i + 1]) / b[i];
  b[n - 1] = (x[n] + a[n - 1]) / 2;
  for (i = 0; i < n - 1; ++i) b[i] = 2 * x[i + 1] - a[i + 1];
  return [a, b];
}

function natural(context) {
  return new Natural(context);
}

function Step(context, t) {
  this._context = context;
  this._t = t;
}

Step.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x = this._y = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);
    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
    if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
      case 1: this._point = 2; // proceed
      default: {
        if (this._t <= 0) {
          this._context.lineTo(this._x, y);
          this._context.lineTo(x, y);
        } else {
          var x1 = this._x * (1 - this._t) + x * this._t;
          this._context.lineTo(x1, this._y);
          this._context.lineTo(x1, y);
        }
        break;
      }
    }
    this._x = x, this._y = y;
  }
};

function step(context) {
  return new Step(context, 0.5);
}

function stepBefore(context) {
  return new Step(context, 0);
}

function stepAfter(context) {
  return new Step(context, 1);
}

function none(series, order) {
  if (!((n = series.length) > 1)) return;
  for (var i = 1, j, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {
    s0 = s1, s1 = series[order[i]];
    for (j = 0; j < m; ++j) {
      s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];
    }
  }
}

function none$1(series) {
  var n = series.length, o = new Array(n);
  while (--n >= 0) o[n] = n;
  return o;
}

function stackValue(d, key) {
  return d[key];
}

function stack() {
  var keys = constant([]),
      order = none$1,
      offset = none,
      value = stackValue;

  function stack(data) {
    var kz = keys.apply(this, arguments),
        i,
        m = data.length,
        n = kz.length,
        sz = new Array(n),
        oz;

    for (i = 0; i < n; ++i) {
      for (var ki = kz[i], si = sz[i] = new Array(m), j = 0, sij; j < m; ++j) {
        si[j] = sij = [0, +value(data[j], ki, j, data)];
        sij.data = data[j];
      }
      si.key = ki;
    }

    for (i = 0, oz = order(sz); i < n; ++i) {
      sz[oz[i]].index = i;
    }

    offset(sz, oz);
    return sz;
  }

  stack.keys = function(_) {
    return arguments.length ? (keys = typeof _ === "function" ? _ : constant(slice.call(_)), stack) : keys;
  };

  stack.value = function(_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : constant(+_), stack) : value;
  };

  stack.order = function(_) {
    return arguments.length ? (order = _ == null ? none$1 : typeof _ === "function" ? _ : constant(slice.call(_)), stack) : order;
  };

  stack.offset = function(_) {
    return arguments.length ? (offset = _ == null ? none : _, stack) : offset;
  };

  return stack;
}

function expand(series, order) {
  if (!((n = series.length) > 0)) return;
  for (var i, n, j = 0, m = series[0].length, y; j < m; ++j) {
    for (y = i = 0; i < n; ++i) y += series[i][j][1] || 0;
    if (y) for (i = 0; i < n; ++i) series[i][j][1] /= y;
  }
  none(series, order);
}

function diverging(series, order) {
  if (!((n = series.length) > 0)) return;
  for (var i, j = 0, d, dy, yp, yn, n, m = series[order[0]].length; j < m; ++j) {
    for (yp = yn = 0, i = 0; i < n; ++i) {
      if ((dy = (d = series[order[i]][j])[1] - d[0]) > 0) {
        d[0] = yp, d[1] = yp += dy;
      } else if (dy < 0) {
        d[1] = yn, d[0] = yn += dy;
      } else {
        d[0] = 0, d[1] = dy;
      }
    }
  }
}

function silhouette(series, order) {
  if (!((n = series.length) > 0)) return;
  for (var j = 0, s0 = series[order[0]], n, m = s0.length; j < m; ++j) {
    for (var i = 0, y = 0; i < n; ++i) y += series[i][j][1] || 0;
    s0[j][1] += s0[j][0] = -y / 2;
  }
  none(series, order);
}

function wiggle(series, order) {
  if (!((n = series.length) > 0) || !((m = (s0 = series[order[0]]).length) > 0)) return;
  for (var y = 0, j = 1, s0, m, n; j < m; ++j) {
    for (var i = 0, s1 = 0, s2 = 0; i < n; ++i) {
      var si = series[order[i]],
          sij0 = si[j][1] || 0,
          sij1 = si[j - 1][1] || 0,
          s3 = (sij0 - sij1) / 2;
      for (var k = 0; k < i; ++k) {
        var sk = series[order[k]],
            skj0 = sk[j][1] || 0,
            skj1 = sk[j - 1][1] || 0;
        s3 += skj0 - skj1;
      }
      s1 += sij0, s2 += s3 * sij0;
    }
    s0[j - 1][1] += s0[j - 1][0] = y;
    if (s1) y -= s2 / s1;
  }
  s0[j - 1][1] += s0[j - 1][0] = y;
  none(series, order);
}

function appearance(series) {
  var peaks = series.map(peak);
  return none$1(series).sort(function(a, b) { return peaks[a] - peaks[b]; });
}

function peak(series) {
  var i = -1, j = 0, n = series.length, vi, vj = -Infinity;
  while (++i < n) if ((vi = +series[i][1]) > vj) vj = vi, j = i;
  return j;
}

function ascending(series) {
  var sums = series.map(sum);
  return none$1(series).sort(function(a, b) { return sums[a] - sums[b]; });
}

function sum(series) {
  var s = 0, i = -1, n = series.length, v;
  while (++i < n) if (v = +series[i][1]) s += v;
  return s;
}

function descending$1(series) {
  return ascending(series).reverse();
}

function insideOut(series) {
  var n = series.length,
      i,
      j,
      sums = series.map(sum),
      order = appearance(series),
      top = 0,
      bottom = 0,
      tops = [],
      bottoms = [];

  for (i = 0; i < n; ++i) {
    j = order[i];
    if (top < bottom) {
      top += sums[j];
      tops.push(j);
    } else {
      bottom += sums[j];
      bottoms.push(j);
    }
  }

  return bottoms.reverse().concat(tops);
}

function reverse(series) {
  return none$1(series).reverse();
}

exports.arc = arc;
exports.area = area;
exports.areaRadial = areaRadial;
exports.curveBasis = basis;
exports.curveBasisClosed = basisClosed;
exports.curveBasisOpen = basisOpen;
exports.curveBundle = bundle;
exports.curveCardinal = cardinal;
exports.curveCardinalClosed = cardinalClosed;
exports.curveCardinalOpen = cardinalOpen;
exports.curveCatmullRom = catmullRom;
exports.curveCatmullRomClosed = catmullRomClosed;
exports.curveCatmullRomOpen = catmullRomOpen;
exports.curveLinear = curveLinear;
exports.curveLinearClosed = linearClosed;
exports.curveMonotoneX = monotoneX;
exports.curveMonotoneY = monotoneY;
exports.curveNatural = natural;
exports.curveStep = step;
exports.curveStepAfter = stepAfter;
exports.curveStepBefore = stepBefore;
exports.line = line;
exports.lineRadial = lineRadial$1;
exports.linkHorizontal = linkHorizontal;
exports.linkRadial = linkRadial;
exports.linkVertical = linkVertical;
exports.pie = pie;
exports.pointRadial = pointRadial;
exports.radialArea = areaRadial;
exports.radialLine = lineRadial$1;
exports.stack = stack;
exports.stackOffsetDiverging = diverging;
exports.stackOffsetExpand = expand;
exports.stackOffsetNone = none;
exports.stackOffsetSilhouette = silhouette;
exports.stackOffsetWiggle = wiggle;
exports.stackOrderAppearance = appearance;
exports.stackOrderAscending = ascending;
exports.stackOrderDescending = descending$1;
exports.stackOrderInsideOut = insideOut;
exports.stackOrderNone = none$1;
exports.stackOrderReverse = reverse;
exports.symbol = symbol;
exports.symbolCircle = circle;
exports.symbolCross = cross;
exports.symbolDiamond = diamond;
exports.symbolSquare = square;
exports.symbolStar = star;
exports.symbolTriangle = triangle;
exports.symbolWye = wye;
exports.symbols = symbols;

Object.defineProperty(exports, '__esModule', { value: true });

}));

},{"d3-path":54}],62:[function(require,module,exports){
// https://d3js.org/d3-time-format/ v2.2.3 Copyright 2019 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-time')) :
typeof define === 'function' && define.amd ? define(['exports', 'd3-time'], factory) :
(global = global || self, factory(global.d3 = global.d3 || {}, global.d3));
}(this, function (exports, d3Time) { 'use strict';

function localDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
    date.setFullYear(d.y);
    return date;
  }
  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
}

function utcDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
    date.setUTCFullYear(d.y);
    return date;
  }
  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
}

function newDate(y, m, d) {
  return {y: y, m: m, d: d, H: 0, M: 0, S: 0, L: 0};
}

function formatLocale(locale) {
  var locale_dateTime = locale.dateTime,
      locale_date = locale.date,
      locale_time = locale.time,
      locale_periods = locale.periods,
      locale_weekdays = locale.days,
      locale_shortWeekdays = locale.shortDays,
      locale_months = locale.months,
      locale_shortMonths = locale.shortMonths;

  var periodRe = formatRe(locale_periods),
      periodLookup = formatLookup(locale_periods),
      weekdayRe = formatRe(locale_weekdays),
      weekdayLookup = formatLookup(locale_weekdays),
      shortWeekdayRe = formatRe(locale_shortWeekdays),
      shortWeekdayLookup = formatLookup(locale_shortWeekdays),
      monthRe = formatRe(locale_months),
      monthLookup = formatLookup(locale_months),
      shortMonthRe = formatRe(locale_shortMonths),
      shortMonthLookup = formatLookup(locale_shortMonths);

  var formats = {
    "a": formatShortWeekday,
    "A": formatWeekday,
    "b": formatShortMonth,
    "B": formatMonth,
    "c": null,
    "d": formatDayOfMonth,
    "e": formatDayOfMonth,
    "f": formatMicroseconds,
    "H": formatHour24,
    "I": formatHour12,
    "j": formatDayOfYear,
    "L": formatMilliseconds,
    "m": formatMonthNumber,
    "M": formatMinutes,
    "p": formatPeriod,
    "q": formatQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatSeconds,
    "u": formatWeekdayNumberMonday,
    "U": formatWeekNumberSunday,
    "V": formatWeekNumberISO,
    "w": formatWeekdayNumberSunday,
    "W": formatWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatYear,
    "Y": formatFullYear,
    "Z": formatZone,
    "%": formatLiteralPercent
  };

  var utcFormats = {
    "a": formatUTCShortWeekday,
    "A": formatUTCWeekday,
    "b": formatUTCShortMonth,
    "B": formatUTCMonth,
    "c": null,
    "d": formatUTCDayOfMonth,
    "e": formatUTCDayOfMonth,
    "f": formatUTCMicroseconds,
    "H": formatUTCHour24,
    "I": formatUTCHour12,
    "j": formatUTCDayOfYear,
    "L": formatUTCMilliseconds,
    "m": formatUTCMonthNumber,
    "M": formatUTCMinutes,
    "p": formatUTCPeriod,
    "q": formatUTCQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatUTCSeconds,
    "u": formatUTCWeekdayNumberMonday,
    "U": formatUTCWeekNumberSunday,
    "V": formatUTCWeekNumberISO,
    "w": formatUTCWeekdayNumberSunday,
    "W": formatUTCWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatUTCYear,
    "Y": formatUTCFullYear,
    "Z": formatUTCZone,
    "%": formatLiteralPercent
  };

  var parses = {
    "a": parseShortWeekday,
    "A": parseWeekday,
    "b": parseShortMonth,
    "B": parseMonth,
    "c": parseLocaleDateTime,
    "d": parseDayOfMonth,
    "e": parseDayOfMonth,
    "f": parseMicroseconds,
    "H": parseHour24,
    "I": parseHour24,
    "j": parseDayOfYear,
    "L": parseMilliseconds,
    "m": parseMonthNumber,
    "M": parseMinutes,
    "p": parsePeriod,
    "q": parseQuarter,
    "Q": parseUnixTimestamp,
    "s": parseUnixTimestampSeconds,
    "S": parseSeconds,
    "u": parseWeekdayNumberMonday,
    "U": parseWeekNumberSunday,
    "V": parseWeekNumberISO,
    "w": parseWeekdayNumberSunday,
    "W": parseWeekNumberMonday,
    "x": parseLocaleDate,
    "X": parseLocaleTime,
    "y": parseYear,
    "Y": parseFullYear,
    "Z": parseZone,
    "%": parseLiteralPercent
  };

  // These recursive directive definitions must be deferred.
  formats.x = newFormat(locale_date, formats);
  formats.X = newFormat(locale_time, formats);
  formats.c = newFormat(locale_dateTime, formats);
  utcFormats.x = newFormat(locale_date, utcFormats);
  utcFormats.X = newFormat(locale_time, utcFormats);
  utcFormats.c = newFormat(locale_dateTime, utcFormats);

  function newFormat(specifier, formats) {
    return function(date) {
      var string = [],
          i = -1,
          j = 0,
          n = specifier.length,
          c,
          pad,
          format;

      if (!(date instanceof Date)) date = new Date(+date);

      while (++i < n) {
        if (specifier.charCodeAt(i) === 37) {
          string.push(specifier.slice(j, i));
          if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);
          else pad = c === "e" ? " " : "0";
          if (format = formats[c]) c = format(date, pad);
          string.push(c);
          j = i + 1;
        }
      }

      string.push(specifier.slice(j, i));
      return string.join("");
    };
  }

  function newParse(specifier, Z) {
    return function(string) {
      var d = newDate(1900, undefined, 1),
          i = parseSpecifier(d, specifier, string += "", 0),
          week, day;
      if (i != string.length) return null;

      // If a UNIX timestamp is specified, return it.
      if ("Q" in d) return new Date(d.Q);
      if ("s" in d) return new Date(d.s * 1000 + ("L" in d ? d.L : 0));

      // If this is utcParse, never use the local timezone.
      if (Z && !("Z" in d)) d.Z = 0;

      // The am-pm flag is 0 for AM, and 1 for PM.
      if ("p" in d) d.H = d.H % 12 + d.p * 12;

      // If the month was not specified, inherit from the quarter.
      if (d.m === undefined) d.m = "q" in d ? d.q : 0;

      // Convert day-of-week and week-of-year to day-of-year.
      if ("V" in d) {
        if (d.V < 1 || d.V > 53) return null;
        if (!("w" in d)) d.w = 1;
        if ("Z" in d) {
          week = utcDate(newDate(d.y, 0, 1)), day = week.getUTCDay();
          week = day > 4 || day === 0 ? d3Time.utcMonday.ceil(week) : d3Time.utcMonday(week);
          week = d3Time.utcDay.offset(week, (d.V - 1) * 7);
          d.y = week.getUTCFullYear();
          d.m = week.getUTCMonth();
          d.d = week.getUTCDate() + (d.w + 6) % 7;
        } else {
          week = localDate(newDate(d.y, 0, 1)), day = week.getDay();
          week = day > 4 || day === 0 ? d3Time.timeMonday.ceil(week) : d3Time.timeMonday(week);
          week = d3Time.timeDay.offset(week, (d.V - 1) * 7);
          d.y = week.getFullYear();
          d.m = week.getMonth();
          d.d = week.getDate() + (d.w + 6) % 7;
        }
      } else if ("W" in d || "U" in d) {
        if (!("w" in d)) d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
        day = "Z" in d ? utcDate(newDate(d.y, 0, 1)).getUTCDay() : localDate(newDate(d.y, 0, 1)).getDay();
        d.m = 0;
        d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;
      }

      // If a time zone is specified, all fields are interpreted as UTC and then
      // offset according to the specified time zone.
      if ("Z" in d) {
        d.H += d.Z / 100 | 0;
        d.M += d.Z % 100;
        return utcDate(d);
      }

      // Otherwise, all fields are in local time.
      return localDate(d);
    };
  }

  function parseSpecifier(d, specifier, string, j) {
    var i = 0,
        n = specifier.length,
        m = string.length,
        c,
        parse;

    while (i < n) {
      if (j >= m) return -1;
      c = specifier.charCodeAt(i++);
      if (c === 37) {
        c = specifier.charAt(i++);
        parse = parses[c in pads ? specifier.charAt(i++) : c];
        if (!parse || ((j = parse(d, string, j)) < 0)) return -1;
      } else if (c != string.charCodeAt(j++)) {
        return -1;
      }
    }

    return j;
  }

  function parsePeriod(d, string, i) {
    var n = periodRe.exec(string.slice(i));
    return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseShortWeekday(d, string, i) {
    var n = shortWeekdayRe.exec(string.slice(i));
    return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseWeekday(d, string, i) {
    var n = weekdayRe.exec(string.slice(i));
    return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseShortMonth(d, string, i) {
    var n = shortMonthRe.exec(string.slice(i));
    return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseMonth(d, string, i) {
    var n = monthRe.exec(string.slice(i));
    return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseLocaleDateTime(d, string, i) {
    return parseSpecifier(d, locale_dateTime, string, i);
  }

  function parseLocaleDate(d, string, i) {
    return parseSpecifier(d, locale_date, string, i);
  }

  function parseLocaleTime(d, string, i) {
    return parseSpecifier(d, locale_time, string, i);
  }

  function formatShortWeekday(d) {
    return locale_shortWeekdays[d.getDay()];
  }

  function formatWeekday(d) {
    return locale_weekdays[d.getDay()];
  }

  function formatShortMonth(d) {
    return locale_shortMonths[d.getMonth()];
  }

  function formatMonth(d) {
    return locale_months[d.getMonth()];
  }

  function formatPeriod(d) {
    return locale_periods[+(d.getHours() >= 12)];
  }

  function formatQuarter(d) {
    return 1 + ~~(d.getMonth() / 3);
  }

  function formatUTCShortWeekday(d) {
    return locale_shortWeekdays[d.getUTCDay()];
  }

  function formatUTCWeekday(d) {
    return locale_weekdays[d.getUTCDay()];
  }

  function formatUTCShortMonth(d) {
    return locale_shortMonths[d.getUTCMonth()];
  }

  function formatUTCMonth(d) {
    return locale_months[d.getUTCMonth()];
  }

  function formatUTCPeriod(d) {
    return locale_periods[+(d.getUTCHours() >= 12)];
  }

  function formatUTCQuarter(d) {
    return 1 + ~~(d.getUTCMonth() / 3);
  }

  return {
    format: function(specifier) {
      var f = newFormat(specifier += "", formats);
      f.toString = function() { return specifier; };
      return f;
    },
    parse: function(specifier) {
      var p = newParse(specifier += "", false);
      p.toString = function() { return specifier; };
      return p;
    },
    utcFormat: function(specifier) {
      var f = newFormat(specifier += "", utcFormats);
      f.toString = function() { return specifier; };
      return f;
    },
    utcParse: function(specifier) {
      var p = newParse(specifier += "", true);
      p.toString = function() { return specifier; };
      return p;
    }
  };
}

var pads = {"-": "", "_": " ", "0": "0"},
    numberRe = /^\s*\d+/, // note: ignores next directive
    percentRe = /^%/,
    requoteRe = /[\\^$*+?|[\]().{}]/g;

function pad(value, fill, width) {
  var sign = value < 0 ? "-" : "",
      string = (sign ? -value : value) + "",
      length = string.length;
  return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
}

function requote(s) {
  return s.replace(requoteRe, "\\$&");
}

function formatRe(names) {
  return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
}

function formatLookup(names) {
  var map = {}, i = -1, n = names.length;
  while (++i < n) map[names[i].toLowerCase()] = i;
  return map;
}

function parseWeekdayNumberSunday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.w = +n[0], i + n[0].length) : -1;
}

function parseWeekdayNumberMonday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.u = +n[0], i + n[0].length) : -1;
}

function parseWeekNumberSunday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.U = +n[0], i + n[0].length) : -1;
}

function parseWeekNumberISO(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.V = +n[0], i + n[0].length) : -1;
}

function parseWeekNumberMonday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.W = +n[0], i + n[0].length) : -1;
}

function parseFullYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 4));
  return n ? (d.y = +n[0], i + n[0].length) : -1;
}

function parseYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;
}

function parseZone(d, string, i) {
  var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i, i + 6));
  return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
}

function parseQuarter(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.q = n[0] * 3 - 3, i + n[0].length) : -1;
}

function parseMonthNumber(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
}

function parseDayOfMonth(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.d = +n[0], i + n[0].length) : -1;
}

function parseDayOfYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 3));
  return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
}

function parseHour24(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.H = +n[0], i + n[0].length) : -1;
}

function parseMinutes(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.M = +n[0], i + n[0].length) : -1;
}

function parseSeconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.S = +n[0], i + n[0].length) : -1;
}

function parseMilliseconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 3));
  return n ? (d.L = +n[0], i + n[0].length) : -1;
}

function parseMicroseconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 6));
  return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;
}

function parseLiteralPercent(d, string, i) {
  var n = percentRe.exec(string.slice(i, i + 1));
  return n ? i + n[0].length : -1;
}

function parseUnixTimestamp(d, string, i) {
  var n = numberRe.exec(string.slice(i));
  return n ? (d.Q = +n[0], i + n[0].length) : -1;
}

function parseUnixTimestampSeconds(d, string, i) {
  var n = numberRe.exec(string.slice(i));
  return n ? (d.s = +n[0], i + n[0].length) : -1;
}

function formatDayOfMonth(d, p) {
  return pad(d.getDate(), p, 2);
}

function formatHour24(d, p) {
  return pad(d.getHours(), p, 2);
}

function formatHour12(d, p) {
  return pad(d.getHours() % 12 || 12, p, 2);
}

function formatDayOfYear(d, p) {
  return pad(1 + d3Time.timeDay.count(d3Time.timeYear(d), d), p, 3);
}

function formatMilliseconds(d, p) {
  return pad(d.getMilliseconds(), p, 3);
}

function formatMicroseconds(d, p) {
  return formatMilliseconds(d, p) + "000";
}

function formatMonthNumber(d, p) {
  return pad(d.getMonth() + 1, p, 2);
}

function formatMinutes(d, p) {
  return pad(d.getMinutes(), p, 2);
}

function formatSeconds(d, p) {
  return pad(d.getSeconds(), p, 2);
}

function formatWeekdayNumberMonday(d) {
  var day = d.getDay();
  return day === 0 ? 7 : day;
}

function formatWeekNumberSunday(d, p) {
  return pad(d3Time.timeSunday.count(d3Time.timeYear(d) - 1, d), p, 2);
}

function formatWeekNumberISO(d, p) {
  var day = d.getDay();
  d = (day >= 4 || day === 0) ? d3Time.timeThursday(d) : d3Time.timeThursday.ceil(d);
  return pad(d3Time.timeThursday.count(d3Time.timeYear(d), d) + (d3Time.timeYear(d).getDay() === 4), p, 2);
}

function formatWeekdayNumberSunday(d) {
  return d.getDay();
}

function formatWeekNumberMonday(d, p) {
  return pad(d3Time.timeMonday.count(d3Time.timeYear(d) - 1, d), p, 2);
}

function formatYear(d, p) {
  return pad(d.getFullYear() % 100, p, 2);
}

function formatFullYear(d, p) {
  return pad(d.getFullYear() % 10000, p, 4);
}

function formatZone(d) {
  var z = d.getTimezoneOffset();
  return (z > 0 ? "-" : (z *= -1, "+"))
      + pad(z / 60 | 0, "0", 2)
      + pad(z % 60, "0", 2);
}

function formatUTCDayOfMonth(d, p) {
  return pad(d.getUTCDate(), p, 2);
}

function formatUTCHour24(d, p) {
  return pad(d.getUTCHours(), p, 2);
}

function formatUTCHour12(d, p) {
  return pad(d.getUTCHours() % 12 || 12, p, 2);
}

function formatUTCDayOfYear(d, p) {
  return pad(1 + d3Time.utcDay.count(d3Time.utcYear(d), d), p, 3);
}

function formatUTCMilliseconds(d, p) {
  return pad(d.getUTCMilliseconds(), p, 3);
}

function formatUTCMicroseconds(d, p) {
  return formatUTCMilliseconds(d, p) + "000";
}

function formatUTCMonthNumber(d, p) {
  return pad(d.getUTCMonth() + 1, p, 2);
}

function formatUTCMinutes(d, p) {
  return pad(d.getUTCMinutes(), p, 2);
}

function formatUTCSeconds(d, p) {
  return pad(d.getUTCSeconds(), p, 2);
}

function formatUTCWeekdayNumberMonday(d) {
  var dow = d.getUTCDay();
  return dow === 0 ? 7 : dow;
}

function formatUTCWeekNumberSunday(d, p) {
  return pad(d3Time.utcSunday.count(d3Time.utcYear(d) - 1, d), p, 2);
}

function formatUTCWeekNumberISO(d, p) {
  var day = d.getUTCDay();
  d = (day >= 4 || day === 0) ? d3Time.utcThursday(d) : d3Time.utcThursday.ceil(d);
  return pad(d3Time.utcThursday.count(d3Time.utcYear(d), d) + (d3Time.utcYear(d).getUTCDay() === 4), p, 2);
}

function formatUTCWeekdayNumberSunday(d) {
  return d.getUTCDay();
}

function formatUTCWeekNumberMonday(d, p) {
  return pad(d3Time.utcMonday.count(d3Time.utcYear(d) - 1, d), p, 2);
}

function formatUTCYear(d, p) {
  return pad(d.getUTCFullYear() % 100, p, 2);
}

function formatUTCFullYear(d, p) {
  return pad(d.getUTCFullYear() % 10000, p, 4);
}

function formatUTCZone() {
  return "+0000";
}

function formatLiteralPercent() {
  return "%";
}

function formatUnixTimestamp(d) {
  return +d;
}

function formatUnixTimestampSeconds(d) {
  return Math.floor(+d / 1000);
}

var locale;

defaultLocale({
  dateTime: "%x, %X",
  date: "%-m/%-d/%Y",
  time: "%-I:%M:%S %p",
  periods: ["AM", "PM"],
  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
});

function defaultLocale(definition) {
  locale = formatLocale(definition);
  exports.timeFormat = locale.format;
  exports.timeParse = locale.parse;
  exports.utcFormat = locale.utcFormat;
  exports.utcParse = locale.utcParse;
  return locale;
}

var isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";

function formatIsoNative(date) {
  return date.toISOString();
}

var formatIso = Date.prototype.toISOString
    ? formatIsoNative
    : exports.utcFormat(isoSpecifier);

function parseIsoNative(string) {
  var date = new Date(string);
  return isNaN(date) ? null : date;
}

var parseIso = +new Date("2000-01-01T00:00:00.000Z")
    ? parseIsoNative
    : exports.utcParse(isoSpecifier);

exports.isoFormat = formatIso;
exports.isoParse = parseIso;
exports.timeFormatDefaultLocale = defaultLocale;
exports.timeFormatLocale = formatLocale;

Object.defineProperty(exports, '__esModule', { value: true });

}));

},{"d3-time":63}],63:[function(require,module,exports){
// https://d3js.org/d3-time/ v1.1.0 Copyright 2019 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
typeof define === 'function' && define.amd ? define(['exports'], factory) :
(global = global || self, factory(global.d3 = global.d3 || {}));
}(this, function (exports) { 'use strict';

var t0 = new Date,
    t1 = new Date;

function newInterval(floori, offseti, count, field) {

  function interval(date) {
    return floori(date = arguments.length === 0 ? new Date : new Date(+date)), date;
  }

  interval.floor = function(date) {
    return floori(date = new Date(+date)), date;
  };

  interval.ceil = function(date) {
    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
  };

  interval.round = function(date) {
    var d0 = interval(date),
        d1 = interval.ceil(date);
    return date - d0 < d1 - date ? d0 : d1;
  };

  interval.offset = function(date, step) {
    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
  };

  interval.range = function(start, stop, step) {
    var range = [], previous;
    start = interval.ceil(start);
    step = step == null ? 1 : Math.floor(step);
    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date
    do range.push(previous = new Date(+start)), offseti(start, step), floori(start);
    while (previous < start && start < stop);
    return range;
  };

  interval.filter = function(test) {
    return newInterval(function(date) {
      if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);
    }, function(date, step) {
      if (date >= date) {
        if (step < 0) while (++step <= 0) {
          while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty
        } else while (--step >= 0) {
          while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty
        }
      }
    });
  };

  if (count) {
    interval.count = function(start, end) {
      t0.setTime(+start), t1.setTime(+end);
      floori(t0), floori(t1);
      return Math.floor(count(t0, t1));
    };

    interval.every = function(step) {
      step = Math.floor(step);
      return !isFinite(step) || !(step > 0) ? null
          : !(step > 1) ? interval
          : interval.filter(field
              ? function(d) { return field(d) % step === 0; }
              : function(d) { return interval.count(0, d) % step === 0; });
    };
  }

  return interval;
}

var millisecond = newInterval(function() {
  // noop
}, function(date, step) {
  date.setTime(+date + step);
}, function(start, end) {
  return end - start;
});

// An optimized implementation for this simple case.
millisecond.every = function(k) {
  k = Math.floor(k);
  if (!isFinite(k) || !(k > 0)) return null;
  if (!(k > 1)) return millisecond;
  return newInterval(function(date) {
    date.setTime(Math.floor(date / k) * k);
  }, function(date, step) {
    date.setTime(+date + step * k);
  }, function(start, end) {
    return (end - start) / k;
  });
};
var milliseconds = millisecond.range;

var durationSecond = 1e3;
var durationMinute = 6e4;
var durationHour = 36e5;
var durationDay = 864e5;
var durationWeek = 6048e5;

var second = newInterval(function(date) {
  date.setTime(date - date.getMilliseconds());
}, function(date, step) {
  date.setTime(+date + step * durationSecond);
}, function(start, end) {
  return (end - start) / durationSecond;
}, function(date) {
  return date.getUTCSeconds();
});
var seconds = second.range;

var minute = newInterval(function(date) {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond);
}, function(date, step) {
  date.setTime(+date + step * durationMinute);
}, function(start, end) {
  return (end - start) / durationMinute;
}, function(date) {
  return date.getMinutes();
});
var minutes = minute.range;

var hour = newInterval(function(date) {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond - date.getMinutes() * durationMinute);
}, function(date, step) {
  date.setTime(+date + step * durationHour);
}, function(start, end) {
  return (end - start) / durationHour;
}, function(date) {
  return date.getHours();
});
var hours = hour.range;

var day = newInterval(function(date) {
  date.setHours(0, 0, 0, 0);
}, function(date, step) {
  date.setDate(date.getDate() + step);
}, function(start, end) {
  return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay;
}, function(date) {
  return date.getDate() - 1;
});
var days = day.range;

function weekday(i) {
  return newInterval(function(date) {
    date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
    date.setHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setDate(date.getDate() + step * 7);
  }, function(start, end) {
    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;
  });
}

var sunday = weekday(0);
var monday = weekday(1);
var tuesday = weekday(2);
var wednesday = weekday(3);
var thursday = weekday(4);
var friday = weekday(5);
var saturday = weekday(6);

var sundays = sunday.range;
var mondays = monday.range;
var tuesdays = tuesday.range;
var wednesdays = wednesday.range;
var thursdays = thursday.range;
var fridays = friday.range;
var saturdays = saturday.range;

var month = newInterval(function(date) {
  date.setDate(1);
  date.setHours(0, 0, 0, 0);
}, function(date, step) {
  date.setMonth(date.getMonth() + step);
}, function(start, end) {
  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
}, function(date) {
  return date.getMonth();
});
var months = month.range;

var year = newInterval(function(date) {
  date.setMonth(0, 1);
  date.setHours(0, 0, 0, 0);
}, function(date, step) {
  date.setFullYear(date.getFullYear() + step);
}, function(start, end) {
  return end.getFullYear() - start.getFullYear();
}, function(date) {
  return date.getFullYear();
});

// An optimized implementation for this simple case.
year.every = function(k) {
  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {
    date.setFullYear(Math.floor(date.getFullYear() / k) * k);
    date.setMonth(0, 1);
    date.setHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setFullYear(date.getFullYear() + step * k);
  });
};
var years = year.range;

var utcMinute = newInterval(function(date) {
  date.setUTCSeconds(0, 0);
}, function(date, step) {
  date.setTime(+date + step * durationMinute);
}, function(start, end) {
  return (end - start) / durationMinute;
}, function(date) {
  return date.getUTCMinutes();
});
var utcMinutes = utcMinute.range;

var utcHour = newInterval(function(date) {
  date.setUTCMinutes(0, 0, 0);
}, function(date, step) {
  date.setTime(+date + step * durationHour);
}, function(start, end) {
  return (end - start) / durationHour;
}, function(date) {
  return date.getUTCHours();
});
var utcHours = utcHour.range;

var utcDay = newInterval(function(date) {
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCDate(date.getUTCDate() + step);
}, function(start, end) {
  return (end - start) / durationDay;
}, function(date) {
  return date.getUTCDate() - 1;
});
var utcDays = utcDay.range;

function utcWeekday(i) {
  return newInterval(function(date) {
    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
    date.setUTCHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setUTCDate(date.getUTCDate() + step * 7);
  }, function(start, end) {
    return (end - start) / durationWeek;
  });
}

var utcSunday = utcWeekday(0);
var utcMonday = utcWeekday(1);
var utcTuesday = utcWeekday(2);
var utcWednesday = utcWeekday(3);
var utcThursday = utcWeekday(4);
var utcFriday = utcWeekday(5);
var utcSaturday = utcWeekday(6);

var utcSundays = utcSunday.range;
var utcMondays = utcMonday.range;
var utcTuesdays = utcTuesday.range;
var utcWednesdays = utcWednesday.range;
var utcThursdays = utcThursday.range;
var utcFridays = utcFriday.range;
var utcSaturdays = utcSaturday.range;

var utcMonth = newInterval(function(date) {
  date.setUTCDate(1);
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCMonth(date.getUTCMonth() + step);
}, function(start, end) {
  return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
}, function(date) {
  return date.getUTCMonth();
});
var utcMonths = utcMonth.range;

var utcYear = newInterval(function(date) {
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCFullYear(date.getUTCFullYear() + step);
}, function(start, end) {
  return end.getUTCFullYear() - start.getUTCFullYear();
}, function(date) {
  return date.getUTCFullYear();
});

// An optimized implementation for this simple case.
utcYear.every = function(k) {
  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {
    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
    date.setUTCMonth(0, 1);
    date.setUTCHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setUTCFullYear(date.getUTCFullYear() + step * k);
  });
};
var utcYears = utcYear.range;

exports.timeDay = day;
exports.timeDays = days;
exports.timeFriday = friday;
exports.timeFridays = fridays;
exports.timeHour = hour;
exports.timeHours = hours;
exports.timeInterval = newInterval;
exports.timeMillisecond = millisecond;
exports.timeMilliseconds = milliseconds;
exports.timeMinute = minute;
exports.timeMinutes = minutes;
exports.timeMonday = monday;
exports.timeMondays = mondays;
exports.timeMonth = month;
exports.timeMonths = months;
exports.timeSaturday = saturday;
exports.timeSaturdays = saturdays;
exports.timeSecond = second;
exports.timeSeconds = seconds;
exports.timeSunday = sunday;
exports.timeSundays = sundays;
exports.timeThursday = thursday;
exports.timeThursdays = thursdays;
exports.timeTuesday = tuesday;
exports.timeTuesdays = tuesdays;
exports.timeWednesday = wednesday;
exports.timeWednesdays = wednesdays;
exports.timeWeek = sunday;
exports.timeWeeks = sundays;
exports.timeYear = year;
exports.timeYears = years;
exports.utcDay = utcDay;
exports.utcDays = utcDays;
exports.utcFriday = utcFriday;
exports.utcFridays = utcFridays;
exports.utcHour = utcHour;
exports.utcHours = utcHours;
exports.utcMillisecond = millisecond;
exports.utcMilliseconds = milliseconds;
exports.utcMinute = utcMinute;
exports.utcMinutes = utcMinutes;
exports.utcMonday = utcMonday;
exports.utcMondays = utcMondays;
exports.utcMonth = utcMonth;
exports.utcMonths = utcMonths;
exports.utcSaturday = utcSaturday;
exports.utcSaturdays = utcSaturdays;
exports.utcSecond = second;
exports.utcSeconds = seconds;
exports.utcSunday = utcSunday;
exports.utcSundays = utcSundays;
exports.utcThursday = utcThursday;
exports.utcThursdays = utcThursdays;
exports.utcTuesday = utcTuesday;
exports.utcTuesdays = utcTuesdays;
exports.utcWednesday = utcWednesday;
exports.utcWednesdays = utcWednesdays;
exports.utcWeek = utcSunday;
exports.utcWeeks = utcSundays;
exports.utcYear = utcYear;
exports.utcYears = utcYears;

Object.defineProperty(exports, '__esModule', { value: true });

}));

},{}],64:[function(require,module,exports){
// https://d3js.org/d3-timer/ v1.0.10 Copyright 2019 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
typeof define === 'function' && define.amd ? define(['exports'], factory) :
(global = global || self, factory(global.d3 = global.d3 || {}));
}(this, function (exports) { 'use strict';

var frame = 0, // is an animation frame pending?
    timeout = 0, // is a timeout pending?
    interval = 0, // are any timers active?
    pokeDelay = 1000, // how frequently we check for clock skew
    taskHead,
    taskTail,
    clockLast = 0,
    clockNow = 0,
    clockSkew = 0,
    clock = typeof performance === "object" && performance.now ? performance : Date,
    setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) { setTimeout(f, 17); };

function now() {
  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
}

function clearNow() {
  clockNow = 0;
}

function Timer() {
  this._call =
  this._time =
  this._next = null;
}

Timer.prototype = timer.prototype = {
  constructor: Timer,
  restart: function(callback, delay, time) {
    if (typeof callback !== "function") throw new TypeError("callback is not a function");
    time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);
    if (!this._next && taskTail !== this) {
      if (taskTail) taskTail._next = this;
      else taskHead = this;
      taskTail = this;
    }
    this._call = callback;
    this._time = time;
    sleep();
  },
  stop: function() {
    if (this._call) {
      this._call = null;
      this._time = Infinity;
      sleep();
    }
  }
};

function timer(callback, delay, time) {
  var t = new Timer;
  t.restart(callback, delay, time);
  return t;
}

function timerFlush() {
  now(); // Get the current time, if not already set.
  ++frame; // Pretend we’ve set an alarm, if we haven’t already.
  var t = taskHead, e;
  while (t) {
    if ((e = clockNow - t._time) >= 0) t._call.call(null, e);
    t = t._next;
  }
  --frame;
}

function wake() {
  clockNow = (clockLast = clock.now()) + clockSkew;
  frame = timeout = 0;
  try {
    timerFlush();
  } finally {
    frame = 0;
    nap();
    clockNow = 0;
  }
}

function poke() {
  var now = clock.now(), delay = now - clockLast;
  if (delay > pokeDelay) clockSkew -= delay, clockLast = now;
}

function nap() {
  var t0, t1 = taskHead, t2, time = Infinity;
  while (t1) {
    if (t1._call) {
      if (time > t1._time) time = t1._time;
      t0 = t1, t1 = t1._next;
    } else {
      t2 = t1._next, t1._next = null;
      t1 = t0 ? t0._next = t2 : taskHead = t2;
    }
  }
  taskTail = t0;
  sleep(time);
}

function sleep(time) {
  if (frame) return; // Soonest alarm already set, or will be.
  if (timeout) timeout = clearTimeout(timeout);
  var delay = time - clockNow; // Strictly less than if we recomputed clockNow.
  if (delay > 24) {
    if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);
    if (interval) interval = clearInterval(interval);
  } else {
    if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
    frame = 1, setFrame(wake);
  }
}

function timeout$1(callback, delay, time) {
  var t = new Timer;
  delay = delay == null ? 0 : +delay;
  t.restart(function(elapsed) {
    t.stop();
    callback(elapsed + delay);
  }, delay, time);
  return t;
}

function interval$1(callback, delay, time) {
  var t = new Timer, total = delay;
  if (delay == null) return t.restart(callback, delay, time), t;
  delay = +delay, time = time == null ? now() : +time;
  t.restart(function tick(elapsed) {
    elapsed += total;
    t.restart(tick, total += delay, time);
    callback(elapsed);
  }, delay, time);
  return t;
}

exports.interval = interval$1;
exports.now = now;
exports.timeout = timeout$1;
exports.timer = timer;
exports.timerFlush = timerFlush;

Object.defineProperty(exports, '__esModule', { value: true });

}));

},{}],65:[function(require,module,exports){
// https://d3js.org/d3-transition/ v1.3.2 Copyright 2019 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-selection'), require('d3-dispatch'), require('d3-timer'), require('d3-interpolate'), require('d3-color'), require('d3-ease')) :
typeof define === 'function' && define.amd ? define(['exports', 'd3-selection', 'd3-dispatch', 'd3-timer', 'd3-interpolate', 'd3-color', 'd3-ease'], factory) :
(global = global || self, factory(global.d3 = global.d3 || {}, global.d3, global.d3, global.d3, global.d3, global.d3, global.d3));
}(this, function (exports, d3Selection, d3Dispatch, d3Timer, d3Interpolate, d3Color, d3Ease) { 'use strict';

var emptyOn = d3Dispatch.dispatch("start", "end", "cancel", "interrupt");
var emptyTween = [];

var CREATED = 0;
var SCHEDULED = 1;
var STARTING = 2;
var STARTED = 3;
var RUNNING = 4;
var ENDING = 5;
var ENDED = 6;

function schedule(node, name, id, index, group, timing) {
  var schedules = node.__transition;
  if (!schedules) node.__transition = {};
  else if (id in schedules) return;
  create(node, id, {
    name: name,
    index: index, // For context during callback.
    group: group, // For context during callback.
    on: emptyOn,
    tween: emptyTween,
    time: timing.time,
    delay: timing.delay,
    duration: timing.duration,
    ease: timing.ease,
    timer: null,
    state: CREATED
  });
}

function init(node, id) {
  var schedule = get(node, id);
  if (schedule.state > CREATED) throw new Error("too late; already scheduled");
  return schedule;
}

function set(node, id) {
  var schedule = get(node, id);
  if (schedule.state > STARTED) throw new Error("too late; already running");
  return schedule;
}

function get(node, id) {
  var schedule = node.__transition;
  if (!schedule || !(schedule = schedule[id])) throw new Error("transition not found");
  return schedule;
}

function create(node, id, self) {
  var schedules = node.__transition,
      tween;

  // Initialize the self timer when the transition is created.
  // Note the actual delay is not known until the first callback!
  schedules[id] = self;
  self.timer = d3Timer.timer(schedule, 0, self.time);

  function schedule(elapsed) {
    self.state = SCHEDULED;
    self.timer.restart(start, self.delay, self.time);

    // If the elapsed delay is less than our first sleep, start immediately.
    if (self.delay <= elapsed) start(elapsed - self.delay);
  }

  function start(elapsed) {
    var i, j, n, o;

    // If the state is not SCHEDULED, then we previously errored on start.
    if (self.state !== SCHEDULED) return stop();

    for (i in schedules) {
      o = schedules[i];
      if (o.name !== self.name) continue;

      // While this element already has a starting transition during this frame,
      // defer starting an interrupting transition until that transition has a
      // chance to tick (and possibly end); see d3/d3-transition#54!
      if (o.state === STARTED) return d3Timer.timeout(start);

      // Interrupt the active transition, if any.
      if (o.state === RUNNING) {
        o.state = ENDED;
        o.timer.stop();
        o.on.call("interrupt", node, node.__data__, o.index, o.group);
        delete schedules[i];
      }

      // Cancel any pre-empted transitions.
      else if (+i < id) {
        o.state = ENDED;
        o.timer.stop();
        o.on.call("cancel", node, node.__data__, o.index, o.group);
        delete schedules[i];
      }
    }

    // Defer the first tick to end of the current frame; see d3/d3#1576.
    // Note the transition may be canceled after start and before the first tick!
    // Note this must be scheduled before the start event; see d3/d3-transition#16!
    // Assuming this is successful, subsequent callbacks go straight to tick.
    d3Timer.timeout(function() {
      if (self.state === STARTED) {
        self.state = RUNNING;
        self.timer.restart(tick, self.delay, self.time);
        tick(elapsed);
      }
    });

    // Dispatch the start event.
    // Note this must be done before the tween are initialized.
    self.state = STARTING;
    self.on.call("start", node, node.__data__, self.index, self.group);
    if (self.state !== STARTING) return; // interrupted
    self.state = STARTED;

    // Initialize the tween, deleting null tween.
    tween = new Array(n = self.tween.length);
    for (i = 0, j = -1; i < n; ++i) {
      if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {
        tween[++j] = o;
      }
    }
    tween.length = j + 1;
  }

  function tick(elapsed) {
    var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1),
        i = -1,
        n = tween.length;

    while (++i < n) {
      tween[i].call(node, t);
    }

    // Dispatch the end event.
    if (self.state === ENDING) {
      self.on.call("end", node, node.__data__, self.index, self.group);
      stop();
    }
  }

  function stop() {
    self.state = ENDED;
    self.timer.stop();
    delete schedules[id];
    for (var i in schedules) return; // eslint-disable-line no-unused-vars
    delete node.__transition;
  }
}

function interrupt(node, name) {
  var schedules = node.__transition,
      schedule,
      active,
      empty = true,
      i;

  if (!schedules) return;

  name = name == null ? null : name + "";

  for (i in schedules) {
    if ((schedule = schedules[i]).name !== name) { empty = false; continue; }
    active = schedule.state > STARTING && schedule.state < ENDING;
    schedule.state = ENDED;
    schedule.timer.stop();
    schedule.on.call(active ? "interrupt" : "cancel", node, node.__data__, schedule.index, schedule.group);
    delete schedules[i];
  }

  if (empty) delete node.__transition;
}

function selection_interrupt(name) {
  return this.each(function() {
    interrupt(this, name);
  });
}

function tweenRemove(id, name) {
  var tween0, tween1;
  return function() {
    var schedule = set(this, id),
        tween = schedule.tween;

    // If this node shared tween with the previous node,
    // just assign the updated shared tween and we’re done!
    // Otherwise, copy-on-write.
    if (tween !== tween0) {
      tween1 = tween0 = tween;
      for (var i = 0, n = tween1.length; i < n; ++i) {
        if (tween1[i].name === name) {
          tween1 = tween1.slice();
          tween1.splice(i, 1);
          break;
        }
      }
    }

    schedule.tween = tween1;
  };
}

function tweenFunction(id, name, value) {
  var tween0, tween1;
  if (typeof value !== "function") throw new Error;
  return function() {
    var schedule = set(this, id),
        tween = schedule.tween;

    // If this node shared tween with the previous node,
    // just assign the updated shared tween and we’re done!
    // Otherwise, copy-on-write.
    if (tween !== tween0) {
      tween1 = (tween0 = tween).slice();
      for (var t = {name: name, value: value}, i = 0, n = tween1.length; i < n; ++i) {
        if (tween1[i].name === name) {
          tween1[i] = t;
          break;
        }
      }
      if (i === n) tween1.push(t);
    }

    schedule.tween = tween1;
  };
}

function transition_tween(name, value) {
  var id = this._id;

  name += "";

  if (arguments.length < 2) {
    var tween = get(this.node(), id).tween;
    for (var i = 0, n = tween.length, t; i < n; ++i) {
      if ((t = tween[i]).name === name) {
        return t.value;
      }
    }
    return null;
  }

  return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));
}

function tweenValue(transition, name, value) {
  var id = transition._id;

  transition.each(function() {
    var schedule = set(this, id);
    (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);
  });

  return function(node) {
    return get(node, id).value[name];
  };
}

function interpolate(a, b) {
  var c;
  return (typeof b === "number" ? d3Interpolate.interpolateNumber
      : b instanceof d3Color.color ? d3Interpolate.interpolateRgb
      : (c = d3Color.color(b)) ? (b = c, d3Interpolate.interpolateRgb)
      : d3Interpolate.interpolateString)(a, b);
}

function attrRemove(name) {
  return function() {
    this.removeAttribute(name);
  };
}

function attrRemoveNS(fullname) {
  return function() {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}

function attrConstant(name, interpolate, value1) {
  var string00,
      string1 = value1 + "",
      interpolate0;
  return function() {
    var string0 = this.getAttribute(name);
    return string0 === string1 ? null
        : string0 === string00 ? interpolate0
        : interpolate0 = interpolate(string00 = string0, value1);
  };
}

function attrConstantNS(fullname, interpolate, value1) {
  var string00,
      string1 = value1 + "",
      interpolate0;
  return function() {
    var string0 = this.getAttributeNS(fullname.space, fullname.local);
    return string0 === string1 ? null
        : string0 === string00 ? interpolate0
        : interpolate0 = interpolate(string00 = string0, value1);
  };
}

function attrFunction(name, interpolate, value) {
  var string00,
      string10,
      interpolate0;
  return function() {
    var string0, value1 = value(this), string1;
    if (value1 == null) return void this.removeAttribute(name);
    string0 = this.getAttribute(name);
    string1 = value1 + "";
    return string0 === string1 ? null
        : string0 === string00 && string1 === string10 ? interpolate0
        : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}

function attrFunctionNS(fullname, interpolate, value) {
  var string00,
      string10,
      interpolate0;
  return function() {
    var string0, value1 = value(this), string1;
    if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);
    string0 = this.getAttributeNS(fullname.space, fullname.local);
    string1 = value1 + "";
    return string0 === string1 ? null
        : string0 === string00 && string1 === string10 ? interpolate0
        : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}

function transition_attr(name, value) {
  var fullname = d3Selection.namespace(name), i = fullname === "transform" ? d3Interpolate.interpolateTransformSvg : interpolate;
  return this.attrTween(name, typeof value === "function"
      ? (fullname.local ? attrFunctionNS : attrFunction)(fullname, i, tweenValue(this, "attr." + name, value))
      : value == null ? (fullname.local ? attrRemoveNS : attrRemove)(fullname)
      : (fullname.local ? attrConstantNS : attrConstant)(fullname, i, value));
}

function attrInterpolate(name, i) {
  return function(t) {
    this.setAttribute(name, i.call(this, t));
  };
}

function attrInterpolateNS(fullname, i) {
  return function(t) {
    this.setAttributeNS(fullname.space, fullname.local, i.call(this, t));
  };
}

function attrTweenNS(fullname, value) {
  var t0, i0;
  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0) t0 = (i0 = i) && attrInterpolateNS(fullname, i);
    return t0;
  }
  tween._value = value;
  return tween;
}

function attrTween(name, value) {
  var t0, i0;
  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0) t0 = (i0 = i) && attrInterpolate(name, i);
    return t0;
  }
  tween._value = value;
  return tween;
}

function transition_attrTween(name, value) {
  var key = "attr." + name;
  if (arguments.length < 2) return (key = this.tween(key)) && key._value;
  if (value == null) return this.tween(key, null);
  if (typeof value !== "function") throw new Error;
  var fullname = d3Selection.namespace(name);
  return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
}

function delayFunction(id, value) {
  return function() {
    init(this, id).delay = +value.apply(this, arguments);
  };
}

function delayConstant(id, value) {
  return value = +value, function() {
    init(this, id).delay = value;
  };
}

function transition_delay(value) {
  var id = this._id;

  return arguments.length
      ? this.each((typeof value === "function"
          ? delayFunction
          : delayConstant)(id, value))
      : get(this.node(), id).delay;
}

function durationFunction(id, value) {
  return function() {
    set(this, id).duration = +value.apply(this, arguments);
  };
}

function durationConstant(id, value) {
  return value = +value, function() {
    set(this, id).duration = value;
  };
}

function transition_duration(value) {
  var id = this._id;

  return arguments.length
      ? this.each((typeof value === "function"
          ? durationFunction
          : durationConstant)(id, value))
      : get(this.node(), id).duration;
}

function easeConstant(id, value) {
  if (typeof value !== "function") throw new Error;
  return function() {
    set(this, id).ease = value;
  };
}

function transition_ease(value) {
  var id = this._id;

  return arguments.length
      ? this.each(easeConstant(id, value))
      : get(this.node(), id).ease;
}

function transition_filter(match) {
  if (typeof match !== "function") match = d3Selection.matcher(match);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }

  return new Transition(subgroups, this._parents, this._name, this._id);
}

function transition_merge(transition) {
  if (transition._id !== this._id) throw new Error;

  for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }

  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }

  return new Transition(merges, this._parents, this._name, this._id);
}

function start(name) {
  return (name + "").trim().split(/^|\s+/).every(function(t) {
    var i = t.indexOf(".");
    if (i >= 0) t = t.slice(0, i);
    return !t || t === "start";
  });
}

function onFunction(id, name, listener) {
  var on0, on1, sit = start(name) ? init : set;
  return function() {
    var schedule = sit(this, id),
        on = schedule.on;

    // If this node shared a dispatch with the previous node,
    // just assign the updated shared dispatch and we’re done!
    // Otherwise, copy-on-write.
    if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);

    schedule.on = on1;
  };
}

function transition_on(name, listener) {
  var id = this._id;

  return arguments.length < 2
      ? get(this.node(), id).on.on(name)
      : this.each(onFunction(id, name, listener));
}

function removeFunction(id) {
  return function() {
    var parent = this.parentNode;
    for (var i in this.__transition) if (+i !== id) return;
    if (parent) parent.removeChild(this);
  };
}

function transition_remove() {
  return this.on("end.remove", removeFunction(this._id));
}

function transition_select(select) {
  var name = this._name,
      id = this._id;

  if (typeof select !== "function") select = d3Selection.selector(select);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
        if ("__data__" in node) subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
        schedule(subgroup[i], name, id, i, subgroup, get(node, id));
      }
    }
  }

  return new Transition(subgroups, this._parents, name, id);
}

function transition_selectAll(select) {
  var name = this._name,
      id = this._id;

  if (typeof select !== "function") select = d3Selection.selectorAll(select);

  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        for (var children = select.call(node, node.__data__, i, group), child, inherit = get(node, id), k = 0, l = children.length; k < l; ++k) {
          if (child = children[k]) {
            schedule(child, name, id, k, children, inherit);
          }
        }
        subgroups.push(children);
        parents.push(node);
      }
    }
  }

  return new Transition(subgroups, parents, name, id);
}

var Selection = d3Selection.selection.prototype.constructor;

function transition_selection() {
  return new Selection(this._groups, this._parents);
}

function styleNull(name, interpolate) {
  var string00,
      string10,
      interpolate0;
  return function() {
    var string0 = d3Selection.style(this, name),
        string1 = (this.style.removeProperty(name), d3Selection.style(this, name));
    return string0 === string1 ? null
        : string0 === string00 && string1 === string10 ? interpolate0
        : interpolate0 = interpolate(string00 = string0, string10 = string1);
  };
}

function styleRemove(name) {
  return function() {
    this.style.removeProperty(name);
  };
}

function styleConstant(name, interpolate, value1) {
  var string00,
      string1 = value1 + "",
      interpolate0;
  return function() {
    var string0 = d3Selection.style(this, name);
    return string0 === string1 ? null
        : string0 === string00 ? interpolate0
        : interpolate0 = interpolate(string00 = string0, value1);
  };
}

function styleFunction(name, interpolate, value) {
  var string00,
      string10,
      interpolate0;
  return function() {
    var string0 = d3Selection.style(this, name),
        value1 = value(this),
        string1 = value1 + "";
    if (value1 == null) string1 = value1 = (this.style.removeProperty(name), d3Selection.style(this, name));
    return string0 === string1 ? null
        : string0 === string00 && string1 === string10 ? interpolate0
        : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}

function styleMaybeRemove(id, name) {
  var on0, on1, listener0, key = "style." + name, event = "end." + key, remove;
  return function() {
    var schedule = set(this, id),
        on = schedule.on,
        listener = schedule.value[key] == null ? remove || (remove = styleRemove(name)) : undefined;

    // If this node shared a dispatch with the previous node,
    // just assign the updated shared dispatch and we’re done!
    // Otherwise, copy-on-write.
    if (on !== on0 || listener0 !== listener) (on1 = (on0 = on).copy()).on(event, listener0 = listener);

    schedule.on = on1;
  };
}

function transition_style(name, value, priority) {
  var i = (name += "") === "transform" ? d3Interpolate.interpolateTransformCss : interpolate;
  return value == null ? this
      .styleTween(name, styleNull(name, i))
      .on("end.style." + name, styleRemove(name))
    : typeof value === "function" ? this
      .styleTween(name, styleFunction(name, i, tweenValue(this, "style." + name, value)))
      .each(styleMaybeRemove(this._id, name))
    : this
      .styleTween(name, styleConstant(name, i, value), priority)
      .on("end.style." + name, null);
}

function styleInterpolate(name, i, priority) {
  return function(t) {
    this.style.setProperty(name, i.call(this, t), priority);
  };
}

function styleTween(name, value, priority) {
  var t, i0;
  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0) t = (i0 = i) && styleInterpolate(name, i, priority);
    return t;
  }
  tween._value = value;
  return tween;
}

function transition_styleTween(name, value, priority) {
  var key = "style." + (name += "");
  if (arguments.length < 2) return (key = this.tween(key)) && key._value;
  if (value == null) return this.tween(key, null);
  if (typeof value !== "function") throw new Error;
  return this.tween(key, styleTween(name, value, priority == null ? "" : priority));
}

function textConstant(value) {
  return function() {
    this.textContent = value;
  };
}

function textFunction(value) {
  return function() {
    var value1 = value(this);
    this.textContent = value1 == null ? "" : value1;
  };
}

function transition_text(value) {
  return this.tween("text", typeof value === "function"
      ? textFunction(tweenValue(this, "text", value))
      : textConstant(value == null ? "" : value + ""));
}

function textInterpolate(i) {
  return function(t) {
    this.textContent = i.call(this, t);
  };
}

function textTween(value) {
  var t0, i0;
  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0) t0 = (i0 = i) && textInterpolate(i);
    return t0;
  }
  tween._value = value;
  return tween;
}

function transition_textTween(value) {
  var key = "text";
  if (arguments.length < 1) return (key = this.tween(key)) && key._value;
  if (value == null) return this.tween(key, null);
  if (typeof value !== "function") throw new Error;
  return this.tween(key, textTween(value));
}

function transition_transition() {
  var name = this._name,
      id0 = this._id,
      id1 = newId();

  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        var inherit = get(node, id0);
        schedule(node, name, id1, i, group, {
          time: inherit.time + inherit.delay + inherit.duration,
          delay: 0,
          duration: inherit.duration,
          ease: inherit.ease
        });
      }
    }
  }

  return new Transition(groups, this._parents, name, id1);
}

function transition_end() {
  var on0, on1, that = this, id = that._id, size = that.size();
  return new Promise(function(resolve, reject) {
    var cancel = {value: reject},
        end = {value: function() { if (--size === 0) resolve(); }};

    that.each(function() {
      var schedule = set(this, id),
          on = schedule.on;

      // If this node shared a dispatch with the previous node,
      // just assign the updated shared dispatch and we’re done!
      // Otherwise, copy-on-write.
      if (on !== on0) {
        on1 = (on0 = on).copy();
        on1._.cancel.push(cancel);
        on1._.interrupt.push(cancel);
        on1._.end.push(end);
      }

      schedule.on = on1;
    });
  });
}

var id = 0;

function Transition(groups, parents, name, id) {
  this._groups = groups;
  this._parents = parents;
  this._name = name;
  this._id = id;
}

function transition(name) {
  return d3Selection.selection().transition(name);
}

function newId() {
  return ++id;
}

var selection_prototype = d3Selection.selection.prototype;

Transition.prototype = transition.prototype = {
  constructor: Transition,
  select: transition_select,
  selectAll: transition_selectAll,
  filter: transition_filter,
  merge: transition_merge,
  selection: transition_selection,
  transition: transition_transition,
  call: selection_prototype.call,
  nodes: selection_prototype.nodes,
  node: selection_prototype.node,
  size: selection_prototype.size,
  empty: selection_prototype.empty,
  each: selection_prototype.each,
  on: transition_on,
  attr: transition_attr,
  attrTween: transition_attrTween,
  style: transition_style,
  styleTween: transition_styleTween,
  text: transition_text,
  textTween: transition_textTween,
  remove: transition_remove,
  tween: transition_tween,
  delay: transition_delay,
  duration: transition_duration,
  ease: transition_ease,
  end: transition_end
};

var defaultTiming = {
  time: null, // Set on use.
  delay: 0,
  duration: 250,
  ease: d3Ease.easeCubicInOut
};

function inherit(node, id) {
  var timing;
  while (!(timing = node.__transition) || !(timing = timing[id])) {
    if (!(node = node.parentNode)) {
      return defaultTiming.time = d3Timer.now(), defaultTiming;
    }
  }
  return timing;
}

function selection_transition(name) {
  var id,
      timing;

  if (name instanceof Transition) {
    id = name._id, name = name._name;
  } else {
    id = newId(), (timing = defaultTiming).time = d3Timer.now(), name = name == null ? null : name + "";
  }

  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        schedule(node, name, id, i, group, timing || inherit(node, id));
      }
    }
  }

  return new Transition(groups, this._parents, name, id);
}

d3Selection.selection.prototype.interrupt = selection_interrupt;
d3Selection.selection.prototype.transition = selection_transition;

var root = [null];

function active(node, name) {
  var schedules = node.__transition,
      schedule,
      i;

  if (schedules) {
    name = name == null ? null : name + "";
    for (i in schedules) {
      if ((schedule = schedules[i]).state > SCHEDULED && schedule.name === name) {
        return new Transition([[node]], root, name, +i);
      }
    }
  }

  return null;
}

exports.active = active;
exports.interrupt = interrupt;
exports.transition = transition;

Object.defineProperty(exports, '__esModule', { value: true });

}));

},{"d3-color":42,"d3-dispatch":44,"d3-ease":47,"d3-interpolate":53,"d3-selection":60,"d3-timer":64}],66:[function(require,module,exports){
// https://d3js.org/d3-voronoi/ v1.1.4 Copyright 2018 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
typeof define === 'function' && define.amd ? define(['exports'], factory) :
(factory((global.d3 = global.d3 || {})));
}(this, (function (exports) { 'use strict';

function constant(x) {
  return function() {
    return x;
  };
}

function x(d) {
  return d[0];
}

function y(d) {
  return d[1];
}

function RedBlackTree() {
  this._ = null; // root node
}

function RedBlackNode(node) {
  node.U = // parent node
  node.C = // color - true for red, false for black
  node.L = // left node
  node.R = // right node
  node.P = // previous node
  node.N = null; // next node
}

RedBlackTree.prototype = {
  constructor: RedBlackTree,

  insert: function(after, node) {
    var parent, grandpa, uncle;

    if (after) {
      node.P = after;
      node.N = after.N;
      if (after.N) after.N.P = node;
      after.N = node;
      if (after.R) {
        after = after.R;
        while (after.L) after = after.L;
        after.L = node;
      } else {
        after.R = node;
      }
      parent = after;
    } else if (this._) {
      after = RedBlackFirst(this._);
      node.P = null;
      node.N = after;
      after.P = after.L = node;
      parent = after;
    } else {
      node.P = node.N = null;
      this._ = node;
      parent = null;
    }
    node.L = node.R = null;
    node.U = parent;
    node.C = true;

    after = node;
    while (parent && parent.C) {
      grandpa = parent.U;
      if (parent === grandpa.L) {
        uncle = grandpa.R;
        if (uncle && uncle.C) {
          parent.C = uncle.C = false;
          grandpa.C = true;
          after = grandpa;
        } else {
          if (after === parent.R) {
            RedBlackRotateLeft(this, parent);
            after = parent;
            parent = after.U;
          }
          parent.C = false;
          grandpa.C = true;
          RedBlackRotateRight(this, grandpa);
        }
      } else {
        uncle = grandpa.L;
        if (uncle && uncle.C) {
          parent.C = uncle.C = false;
          grandpa.C = true;
          after = grandpa;
        } else {
          if (after === parent.L) {
            RedBlackRotateRight(this, parent);
            after = parent;
            parent = after.U;
          }
          parent.C = false;
          grandpa.C = true;
          RedBlackRotateLeft(this, grandpa);
        }
      }
      parent = after.U;
    }
    this._.C = false;
  },

  remove: function(node) {
    if (node.N) node.N.P = node.P;
    if (node.P) node.P.N = node.N;
    node.N = node.P = null;

    var parent = node.U,
        sibling,
        left = node.L,
        right = node.R,
        next,
        red;

    if (!left) next = right;
    else if (!right) next = left;
    else next = RedBlackFirst(right);

    if (parent) {
      if (parent.L === node) parent.L = next;
      else parent.R = next;
    } else {
      this._ = next;
    }

    if (left && right) {
      red = next.C;
      next.C = node.C;
      next.L = left;
      left.U = next;
      if (next !== right) {
        parent = next.U;
        next.U = node.U;
        node = next.R;
        parent.L = node;
        next.R = right;
        right.U = next;
      } else {
        next.U = parent;
        parent = next;
        node = next.R;
      }
    } else {
      red = node.C;
      node = next;
    }

    if (node) node.U = parent;
    if (red) return;
    if (node && node.C) { node.C = false; return; }

    do {
      if (node === this._) break;
      if (node === parent.L) {
        sibling = parent.R;
        if (sibling.C) {
          sibling.C = false;
          parent.C = true;
          RedBlackRotateLeft(this, parent);
          sibling = parent.R;
        }
        if ((sibling.L && sibling.L.C)
            || (sibling.R && sibling.R.C)) {
          if (!sibling.R || !sibling.R.C) {
            sibling.L.C = false;
            sibling.C = true;
            RedBlackRotateRight(this, sibling);
            sibling = parent.R;
          }
          sibling.C = parent.C;
          parent.C = sibling.R.C = false;
          RedBlackRotateLeft(this, parent);
          node = this._;
          break;
        }
      } else {
        sibling = parent.L;
        if (sibling.C) {
          sibling.C = false;
          parent.C = true;
          RedBlackRotateRight(this, parent);
          sibling = parent.L;
        }
        if ((sibling.L && sibling.L.C)
          || (sibling.R && sibling.R.C)) {
          if (!sibling.L || !sibling.L.C) {
            sibling.R.C = false;
            sibling.C = true;
            RedBlackRotateLeft(this, sibling);
            sibling = parent.L;
          }
          sibling.C = parent.C;
          parent.C = sibling.L.C = false;
          RedBlackRotateRight(this, parent);
          node = this._;
          break;
        }
      }
      sibling.C = true;
      node = parent;
      parent = parent.U;
    } while (!node.C);

    if (node) node.C = false;
  }
};

function RedBlackRotateLeft(tree, node) {
  var p = node,
      q = node.R,
      parent = p.U;

  if (parent) {
    if (parent.L === p) parent.L = q;
    else parent.R = q;
  } else {
    tree._ = q;
  }

  q.U = parent;
  p.U = q;
  p.R = q.L;
  if (p.R) p.R.U = p;
  q.L = p;
}

function RedBlackRotateRight(tree, node) {
  var p = node,
      q = node.L,
      parent = p.U;

  if (parent) {
    if (parent.L === p) parent.L = q;
    else parent.R = q;
  } else {
    tree._ = q;
  }

  q.U = parent;
  p.U = q;
  p.L = q.R;
  if (p.L) p.L.U = p;
  q.R = p;
}

function RedBlackFirst(node) {
  while (node.L) node = node.L;
  return node;
}

function createEdge(left, right, v0, v1) {
  var edge = [null, null],
      index = edges.push(edge) - 1;
  edge.left = left;
  edge.right = right;
  if (v0) setEdgeEnd(edge, left, right, v0);
  if (v1) setEdgeEnd(edge, right, left, v1);
  cells[left.index].halfedges.push(index);
  cells[right.index].halfedges.push(index);
  return edge;
}

function createBorderEdge(left, v0, v1) {
  var edge = [v0, v1];
  edge.left = left;
  return edge;
}

function setEdgeEnd(edge, left, right, vertex) {
  if (!edge[0] && !edge[1]) {
    edge[0] = vertex;
    edge.left = left;
    edge.right = right;
  } else if (edge.left === right) {
    edge[1] = vertex;
  } else {
    edge[0] = vertex;
  }
}

// Liang–Barsky line clipping.
function clipEdge(edge, x0, y0, x1, y1) {
  var a = edge[0],
      b = edge[1],
      ax = a[0],
      ay = a[1],
      bx = b[0],
      by = b[1],
      t0 = 0,
      t1 = 1,
      dx = bx - ax,
      dy = by - ay,
      r;

  r = x0 - ax;
  if (!dx && r > 0) return;
  r /= dx;
  if (dx < 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  } else if (dx > 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  }

  r = x1 - ax;
  if (!dx && r < 0) return;
  r /= dx;
  if (dx < 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  } else if (dx > 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  }

  r = y0 - ay;
  if (!dy && r > 0) return;
  r /= dy;
  if (dy < 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  } else if (dy > 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  }

  r = y1 - ay;
  if (!dy && r < 0) return;
  r /= dy;
  if (dy < 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  } else if (dy > 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  }

  if (!(t0 > 0) && !(t1 < 1)) return true; // TODO Better check?

  if (t0 > 0) edge[0] = [ax + t0 * dx, ay + t0 * dy];
  if (t1 < 1) edge[1] = [ax + t1 * dx, ay + t1 * dy];
  return true;
}

function connectEdge(edge, x0, y0, x1, y1) {
  var v1 = edge[1];
  if (v1) return true;

  var v0 = edge[0],
      left = edge.left,
      right = edge.right,
      lx = left[0],
      ly = left[1],
      rx = right[0],
      ry = right[1],
      fx = (lx + rx) / 2,
      fy = (ly + ry) / 2,
      fm,
      fb;

  if (ry === ly) {
    if (fx < x0 || fx >= x1) return;
    if (lx > rx) {
      if (!v0) v0 = [fx, y0];
      else if (v0[1] >= y1) return;
      v1 = [fx, y1];
    } else {
      if (!v0) v0 = [fx, y1];
      else if (v0[1] < y0) return;
      v1 = [fx, y0];
    }
  } else {
    fm = (lx - rx) / (ry - ly);
    fb = fy - fm * fx;
    if (fm < -1 || fm > 1) {
      if (lx > rx) {
        if (!v0) v0 = [(y0 - fb) / fm, y0];
        else if (v0[1] >= y1) return;
        v1 = [(y1 - fb) / fm, y1];
      } else {
        if (!v0) v0 = [(y1 - fb) / fm, y1];
        else if (v0[1] < y0) return;
        v1 = [(y0 - fb) / fm, y0];
      }
    } else {
      if (ly < ry) {
        if (!v0) v0 = [x0, fm * x0 + fb];
        else if (v0[0] >= x1) return;
        v1 = [x1, fm * x1 + fb];
      } else {
        if (!v0) v0 = [x1, fm * x1 + fb];
        else if (v0[0] < x0) return;
        v1 = [x0, fm * x0 + fb];
      }
    }
  }

  edge[0] = v0;
  edge[1] = v1;
  return true;
}

function clipEdges(x0, y0, x1, y1) {
  var i = edges.length,
      edge;

  while (i--) {
    if (!connectEdge(edge = edges[i], x0, y0, x1, y1)
        || !clipEdge(edge, x0, y0, x1, y1)
        || !(Math.abs(edge[0][0] - edge[1][0]) > epsilon
            || Math.abs(edge[0][1] - edge[1][1]) > epsilon)) {
      delete edges[i];
    }
  }
}

function createCell(site) {
  return cells[site.index] = {
    site: site,
    halfedges: []
  };
}

function cellHalfedgeAngle(cell, edge) {
  var site = cell.site,
      va = edge.left,
      vb = edge.right;
  if (site === vb) vb = va, va = site;
  if (vb) return Math.atan2(vb[1] - va[1], vb[0] - va[0]);
  if (site === va) va = edge[1], vb = edge[0];
  else va = edge[0], vb = edge[1];
  return Math.atan2(va[0] - vb[0], vb[1] - va[1]);
}

function cellHalfedgeStart(cell, edge) {
  return edge[+(edge.left !== cell.site)];
}

function cellHalfedgeEnd(cell, edge) {
  return edge[+(edge.left === cell.site)];
}

function sortCellHalfedges() {
  for (var i = 0, n = cells.length, cell, halfedges, j, m; i < n; ++i) {
    if ((cell = cells[i]) && (m = (halfedges = cell.halfedges).length)) {
      var index = new Array(m),
          array = new Array(m);
      for (j = 0; j < m; ++j) index[j] = j, array[j] = cellHalfedgeAngle(cell, edges[halfedges[j]]);
      index.sort(function(i, j) { return array[j] - array[i]; });
      for (j = 0; j < m; ++j) array[j] = halfedges[index[j]];
      for (j = 0; j < m; ++j) halfedges[j] = array[j];
    }
  }
}

function clipCells(x0, y0, x1, y1) {
  var nCells = cells.length,
      iCell,
      cell,
      site,
      iHalfedge,
      halfedges,
      nHalfedges,
      start,
      startX,
      startY,
      end,
      endX,
      endY,
      cover = true;

  for (iCell = 0; iCell < nCells; ++iCell) {
    if (cell = cells[iCell]) {
      site = cell.site;
      halfedges = cell.halfedges;
      iHalfedge = halfedges.length;

      // Remove any dangling clipped edges.
      while (iHalfedge--) {
        if (!edges[halfedges[iHalfedge]]) {
          halfedges.splice(iHalfedge, 1);
        }
      }

      // Insert any border edges as necessary.
      iHalfedge = 0, nHalfedges = halfedges.length;
      while (iHalfedge < nHalfedges) {
        end = cellHalfedgeEnd(cell, edges[halfedges[iHalfedge]]), endX = end[0], endY = end[1];
        start = cellHalfedgeStart(cell, edges[halfedges[++iHalfedge % nHalfedges]]), startX = start[0], startY = start[1];
        if (Math.abs(endX - startX) > epsilon || Math.abs(endY - startY) > epsilon) {
          halfedges.splice(iHalfedge, 0, edges.push(createBorderEdge(site, end,
              Math.abs(endX - x0) < epsilon && y1 - endY > epsilon ? [x0, Math.abs(startX - x0) < epsilon ? startY : y1]
              : Math.abs(endY - y1) < epsilon && x1 - endX > epsilon ? [Math.abs(startY - y1) < epsilon ? startX : x1, y1]
              : Math.abs(endX - x1) < epsilon && endY - y0 > epsilon ? [x1, Math.abs(startX - x1) < epsilon ? startY : y0]
              : Math.abs(endY - y0) < epsilon && endX - x0 > epsilon ? [Math.abs(startY - y0) < epsilon ? startX : x0, y0]
              : null)) - 1);
          ++nHalfedges;
        }
      }

      if (nHalfedges) cover = false;
    }
  }

  // If there weren’t any edges, have the closest site cover the extent.
  // It doesn’t matter which corner of the extent we measure!
  if (cover) {
    var dx, dy, d2, dc = Infinity;

    for (iCell = 0, cover = null; iCell < nCells; ++iCell) {
      if (cell = cells[iCell]) {
        site = cell.site;
        dx = site[0] - x0;
        dy = site[1] - y0;
        d2 = dx * dx + dy * dy;
        if (d2 < dc) dc = d2, cover = cell;
      }
    }

    if (cover) {
      var v00 = [x0, y0], v01 = [x0, y1], v11 = [x1, y1], v10 = [x1, y0];
      cover.halfedges.push(
        edges.push(createBorderEdge(site = cover.site, v00, v01)) - 1,
        edges.push(createBorderEdge(site, v01, v11)) - 1,
        edges.push(createBorderEdge(site, v11, v10)) - 1,
        edges.push(createBorderEdge(site, v10, v00)) - 1
      );
    }
  }

  // Lastly delete any cells with no edges; these were entirely clipped.
  for (iCell = 0; iCell < nCells; ++iCell) {
    if (cell = cells[iCell]) {
      if (!cell.halfedges.length) {
        delete cells[iCell];
      }
    }
  }
}

var circlePool = [];

var firstCircle;

function Circle() {
  RedBlackNode(this);
  this.x =
  this.y =
  this.arc =
  this.site =
  this.cy = null;
}

function attachCircle(arc) {
  var lArc = arc.P,
      rArc = arc.N;

  if (!lArc || !rArc) return;

  var lSite = lArc.site,
      cSite = arc.site,
      rSite = rArc.site;

  if (lSite === rSite) return;

  var bx = cSite[0],
      by = cSite[1],
      ax = lSite[0] - bx,
      ay = lSite[1] - by,
      cx = rSite[0] - bx,
      cy = rSite[1] - by;

  var d = 2 * (ax * cy - ay * cx);
  if (d >= -epsilon2) return;

  var ha = ax * ax + ay * ay,
      hc = cx * cx + cy * cy,
      x = (cy * ha - ay * hc) / d,
      y = (ax * hc - cx * ha) / d;

  var circle = circlePool.pop() || new Circle;
  circle.arc = arc;
  circle.site = cSite;
  circle.x = x + bx;
  circle.y = (circle.cy = y + by) + Math.sqrt(x * x + y * y); // y bottom

  arc.circle = circle;

  var before = null,
      node = circles._;

  while (node) {
    if (circle.y < node.y || (circle.y === node.y && circle.x <= node.x)) {
      if (node.L) node = node.L;
      else { before = node.P; break; }
    } else {
      if (node.R) node = node.R;
      else { before = node; break; }
    }
  }

  circles.insert(before, circle);
  if (!before) firstCircle = circle;
}

function detachCircle(arc) {
  var circle = arc.circle;
  if (circle) {
    if (!circle.P) firstCircle = circle.N;
    circles.remove(circle);
    circlePool.push(circle);
    RedBlackNode(circle);
    arc.circle = null;
  }
}

var beachPool = [];

function Beach() {
  RedBlackNode(this);
  this.edge =
  this.site =
  this.circle = null;
}

function createBeach(site) {
  var beach = beachPool.pop() || new Beach;
  beach.site = site;
  return beach;
}

function detachBeach(beach) {
  detachCircle(beach);
  beaches.remove(beach);
  beachPool.push(beach);
  RedBlackNode(beach);
}

function removeBeach(beach) {
  var circle = beach.circle,
      x = circle.x,
      y = circle.cy,
      vertex = [x, y],
      previous = beach.P,
      next = beach.N,
      disappearing = [beach];

  detachBeach(beach);

  var lArc = previous;
  while (lArc.circle
      && Math.abs(x - lArc.circle.x) < epsilon
      && Math.abs(y - lArc.circle.cy) < epsilon) {
    previous = lArc.P;
    disappearing.unshift(lArc);
    detachBeach(lArc);
    lArc = previous;
  }

  disappearing.unshift(lArc);
  detachCircle(lArc);

  var rArc = next;
  while (rArc.circle
      && Math.abs(x - rArc.circle.x) < epsilon
      && Math.abs(y - rArc.circle.cy) < epsilon) {
    next = rArc.N;
    disappearing.push(rArc);
    detachBeach(rArc);
    rArc = next;
  }

  disappearing.push(rArc);
  detachCircle(rArc);

  var nArcs = disappearing.length,
      iArc;
  for (iArc = 1; iArc < nArcs; ++iArc) {
    rArc = disappearing[iArc];
    lArc = disappearing[iArc - 1];
    setEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);
  }

  lArc = disappearing[0];
  rArc = disappearing[nArcs - 1];
  rArc.edge = createEdge(lArc.site, rArc.site, null, vertex);

  attachCircle(lArc);
  attachCircle(rArc);
}

function addBeach(site) {
  var x = site[0],
      directrix = site[1],
      lArc,
      rArc,
      dxl,
      dxr,
      node = beaches._;

  while (node) {
    dxl = leftBreakPoint(node, directrix) - x;
    if (dxl > epsilon) node = node.L; else {
      dxr = x - rightBreakPoint(node, directrix);
      if (dxr > epsilon) {
        if (!node.R) {
          lArc = node;
          break;
        }
        node = node.R;
      } else {
        if (dxl > -epsilon) {
          lArc = node.P;
          rArc = node;
        } else if (dxr > -epsilon) {
          lArc = node;
          rArc = node.N;
        } else {
          lArc = rArc = node;
        }
        break;
      }
    }
  }

  createCell(site);
  var newArc = createBeach(site);
  beaches.insert(lArc, newArc);

  if (!lArc && !rArc) return;

  if (lArc === rArc) {
    detachCircle(lArc);
    rArc = createBeach(lArc.site);
    beaches.insert(newArc, rArc);
    newArc.edge = rArc.edge = createEdge(lArc.site, newArc.site);
    attachCircle(lArc);
    attachCircle(rArc);
    return;
  }

  if (!rArc) { // && lArc
    newArc.edge = createEdge(lArc.site, newArc.site);
    return;
  }

  // else lArc !== rArc
  detachCircle(lArc);
  detachCircle(rArc);

  var lSite = lArc.site,
      ax = lSite[0],
      ay = lSite[1],
      bx = site[0] - ax,
      by = site[1] - ay,
      rSite = rArc.site,
      cx = rSite[0] - ax,
      cy = rSite[1] - ay,
      d = 2 * (bx * cy - by * cx),
      hb = bx * bx + by * by,
      hc = cx * cx + cy * cy,
      vertex = [(cy * hb - by * hc) / d + ax, (bx * hc - cx * hb) / d + ay];

  setEdgeEnd(rArc.edge, lSite, rSite, vertex);
  newArc.edge = createEdge(lSite, site, null, vertex);
  rArc.edge = createEdge(site, rSite, null, vertex);
  attachCircle(lArc);
  attachCircle(rArc);
}

function leftBreakPoint(arc, directrix) {
  var site = arc.site,
      rfocx = site[0],
      rfocy = site[1],
      pby2 = rfocy - directrix;

  if (!pby2) return rfocx;

  var lArc = arc.P;
  if (!lArc) return -Infinity;

  site = lArc.site;
  var lfocx = site[0],
      lfocy = site[1],
      plby2 = lfocy - directrix;

  if (!plby2) return lfocx;

  var hl = lfocx - rfocx,
      aby2 = 1 / pby2 - 1 / plby2,
      b = hl / plby2;

  if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;

  return (rfocx + lfocx) / 2;
}

function rightBreakPoint(arc, directrix) {
  var rArc = arc.N;
  if (rArc) return leftBreakPoint(rArc, directrix);
  var site = arc.site;
  return site[1] === directrix ? site[0] : Infinity;
}

var epsilon = 1e-6;
var epsilon2 = 1e-12;
var beaches;
var cells;
var circles;
var edges;

function triangleArea(a, b, c) {
  return (a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1]);
}

function lexicographic(a, b) {
  return b[1] - a[1]
      || b[0] - a[0];
}

function Diagram(sites, extent) {
  var site = sites.sort(lexicographic).pop(),
      x,
      y,
      circle;

  edges = [];
  cells = new Array(sites.length);
  beaches = new RedBlackTree;
  circles = new RedBlackTree;

  while (true) {
    circle = firstCircle;
    if (site && (!circle || site[1] < circle.y || (site[1] === circle.y && site[0] < circle.x))) {
      if (site[0] !== x || site[1] !== y) {
        addBeach(site);
        x = site[0], y = site[1];
      }
      site = sites.pop();
    } else if (circle) {
      removeBeach(circle.arc);
    } else {
      break;
    }
  }

  sortCellHalfedges();

  if (extent) {
    var x0 = +extent[0][0],
        y0 = +extent[0][1],
        x1 = +extent[1][0],
        y1 = +extent[1][1];
    clipEdges(x0, y0, x1, y1);
    clipCells(x0, y0, x1, y1);
  }

  this.edges = edges;
  this.cells = cells;

  beaches =
  circles =
  edges =
  cells = null;
}

Diagram.prototype = {
  constructor: Diagram,

  polygons: function() {
    var edges = this.edges;

    return this.cells.map(function(cell) {
      var polygon = cell.halfedges.map(function(i) { return cellHalfedgeStart(cell, edges[i]); });
      polygon.data = cell.site.data;
      return polygon;
    });
  },

  triangles: function() {
    var triangles = [],
        edges = this.edges;

    this.cells.forEach(function(cell, i) {
      if (!(m = (halfedges = cell.halfedges).length)) return;
      var site = cell.site,
          halfedges,
          j = -1,
          m,
          s0,
          e1 = edges[halfedges[m - 1]],
          s1 = e1.left === site ? e1.right : e1.left;

      while (++j < m) {
        s0 = s1;
        e1 = edges[halfedges[j]];
        s1 = e1.left === site ? e1.right : e1.left;
        if (s0 && s1 && i < s0.index && i < s1.index && triangleArea(site, s0, s1) < 0) {
          triangles.push([site.data, s0.data, s1.data]);
        }
      }
    });

    return triangles;
  },

  links: function() {
    return this.edges.filter(function(edge) {
      return edge.right;
    }).map(function(edge) {
      return {
        source: edge.left.data,
        target: edge.right.data
      };
    });
  },

  find: function(x, y, radius) {
    var that = this, i0, i1 = that._found || 0, n = that.cells.length, cell;

    // Use the previously-found cell, or start with an arbitrary one.
    while (!(cell = that.cells[i1])) if (++i1 >= n) return null;
    var dx = x - cell.site[0], dy = y - cell.site[1], d2 = dx * dx + dy * dy;

    // Traverse the half-edges to find a closer cell, if any.
    do {
      cell = that.cells[i0 = i1], i1 = null;
      cell.halfedges.forEach(function(e) {
        var edge = that.edges[e], v = edge.left;
        if ((v === cell.site || !v) && !(v = edge.right)) return;
        var vx = x - v[0], vy = y - v[1], v2 = vx * vx + vy * vy;
        if (v2 < d2) d2 = v2, i1 = v.index;
      });
    } while (i1 !== null);

    that._found = i0;

    return radius == null || d2 <= radius * radius ? cell.site : null;
  }
};

function voronoi() {
  var x$$1 = x,
      y$$1 = y,
      extent = null;

  function voronoi(data) {
    return new Diagram(data.map(function(d, i) {
      var s = [Math.round(x$$1(d, i, data) / epsilon) * epsilon, Math.round(y$$1(d, i, data) / epsilon) * epsilon];
      s.index = i;
      s.data = d;
      return s;
    }), extent);
  }

  voronoi.polygons = function(data) {
    return voronoi(data).polygons();
  };

  voronoi.links = function(data) {
    return voronoi(data).links();
  };

  voronoi.triangles = function(data) {
    return voronoi(data).triangles();
  };

  voronoi.x = function(_) {
    return arguments.length ? (x$$1 = typeof _ === "function" ? _ : constant(+_), voronoi) : x$$1;
  };

  voronoi.y = function(_) {
    return arguments.length ? (y$$1 = typeof _ === "function" ? _ : constant(+_), voronoi) : y$$1;
  };

  voronoi.extent = function(_) {
    return arguments.length ? (extent = _ == null ? null : [[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]], voronoi) : extent && [[extent[0][0], extent[0][1]], [extent[1][0], extent[1][1]]];
  };

  voronoi.size = function(_) {
    return arguments.length ? (extent = _ == null ? null : [[0, 0], [+_[0], +_[1]]], voronoi) : extent && [extent[1][0] - extent[0][0], extent[1][1] - extent[0][1]];
  };

  return voronoi;
}

exports.voronoi = voronoi;

Object.defineProperty(exports, '__esModule', { value: true });

})));

},{}],67:[function(require,module,exports){
// https://d3js.org/d3-zoom/ v1.8.3 Copyright 2019 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-dispatch'), require('d3-drag'), require('d3-interpolate'), require('d3-selection'), require('d3-transition')) :
typeof define === 'function' && define.amd ? define(['exports', 'd3-dispatch', 'd3-drag', 'd3-interpolate', 'd3-selection', 'd3-transition'], factory) :
(global = global || self, factory(global.d3 = global.d3 || {}, global.d3, global.d3, global.d3, global.d3, global.d3));
}(this, function (exports, d3Dispatch, d3Drag, d3Interpolate, d3Selection, d3Transition) { 'use strict';

function constant(x) {
  return function() {
    return x;
  };
}

function ZoomEvent(target, type, transform) {
  this.target = target;
  this.type = type;
  this.transform = transform;
}

function Transform(k, x, y) {
  this.k = k;
  this.x = x;
  this.y = y;
}

Transform.prototype = {
  constructor: Transform,
  scale: function(k) {
    return k === 1 ? this : new Transform(this.k * k, this.x, this.y);
  },
  translate: function(x, y) {
    return x === 0 & y === 0 ? this : new Transform(this.k, this.x + this.k * x, this.y + this.k * y);
  },
  apply: function(point) {
    return [point[0] * this.k + this.x, point[1] * this.k + this.y];
  },
  applyX: function(x) {
    return x * this.k + this.x;
  },
  applyY: function(y) {
    return y * this.k + this.y;
  },
  invert: function(location) {
    return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];
  },
  invertX: function(x) {
    return (x - this.x) / this.k;
  },
  invertY: function(y) {
    return (y - this.y) / this.k;
  },
  rescaleX: function(x) {
    return x.copy().domain(x.range().map(this.invertX, this).map(x.invert, x));
  },
  rescaleY: function(y) {
    return y.copy().domain(y.range().map(this.invertY, this).map(y.invert, y));
  },
  toString: function() {
    return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
  }
};

var identity = new Transform(1, 0, 0);

transform.prototype = Transform.prototype;

function transform(node) {
  while (!node.__zoom) if (!(node = node.parentNode)) return identity;
  return node.__zoom;
}

function nopropagation() {
  d3Selection.event.stopImmediatePropagation();
}

function noevent() {
  d3Selection.event.preventDefault();
  d3Selection.event.stopImmediatePropagation();
}

// Ignore right-click, since that should open the context menu.
function defaultFilter() {
  return !d3Selection.event.ctrlKey && !d3Selection.event.button;
}

function defaultExtent() {
  var e = this;
  if (e instanceof SVGElement) {
    e = e.ownerSVGElement || e;
    if (e.hasAttribute("viewBox")) {
      e = e.viewBox.baseVal;
      return [[e.x, e.y], [e.x + e.width, e.y + e.height]];
    }
    return [[0, 0], [e.width.baseVal.value, e.height.baseVal.value]];
  }
  return [[0, 0], [e.clientWidth, e.clientHeight]];
}

function defaultTransform() {
  return this.__zoom || identity;
}

function defaultWheelDelta() {
  return -d3Selection.event.deltaY * (d3Selection.event.deltaMode === 1 ? 0.05 : d3Selection.event.deltaMode ? 1 : 0.002);
}

function defaultTouchable() {
  return navigator.maxTouchPoints || ("ontouchstart" in this);
}

function defaultConstrain(transform, extent, translateExtent) {
  var dx0 = transform.invertX(extent[0][0]) - translateExtent[0][0],
      dx1 = transform.invertX(extent[1][0]) - translateExtent[1][0],
      dy0 = transform.invertY(extent[0][1]) - translateExtent[0][1],
      dy1 = transform.invertY(extent[1][1]) - translateExtent[1][1];
  return transform.translate(
    dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1),
    dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1)
  );
}

function zoom() {
  var filter = defaultFilter,
      extent = defaultExtent,
      constrain = defaultConstrain,
      wheelDelta = defaultWheelDelta,
      touchable = defaultTouchable,
      scaleExtent = [0, Infinity],
      translateExtent = [[-Infinity, -Infinity], [Infinity, Infinity]],
      duration = 250,
      interpolate = d3Interpolate.interpolateZoom,
      listeners = d3Dispatch.dispatch("start", "zoom", "end"),
      touchstarting,
      touchending,
      touchDelay = 500,
      wheelDelay = 150,
      clickDistance2 = 0;

  function zoom(selection) {
    selection
        .property("__zoom", defaultTransform)
        .on("wheel.zoom", wheeled)
        .on("mousedown.zoom", mousedowned)
        .on("dblclick.zoom", dblclicked)
      .filter(touchable)
        .on("touchstart.zoom", touchstarted)
        .on("touchmove.zoom", touchmoved)
        .on("touchend.zoom touchcancel.zoom", touchended)
        .style("touch-action", "none")
        .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
  }

  zoom.transform = function(collection, transform, point) {
    var selection = collection.selection ? collection.selection() : collection;
    selection.property("__zoom", defaultTransform);
    if (collection !== selection) {
      schedule(collection, transform, point);
    } else {
      selection.interrupt().each(function() {
        gesture(this, arguments)
            .start()
            .zoom(null, typeof transform === "function" ? transform.apply(this, arguments) : transform)
            .end();
      });
    }
  };

  zoom.scaleBy = function(selection, k, p) {
    zoom.scaleTo(selection, function() {
      var k0 = this.__zoom.k,
          k1 = typeof k === "function" ? k.apply(this, arguments) : k;
      return k0 * k1;
    }, p);
  };

  zoom.scaleTo = function(selection, k, p) {
    zoom.transform(selection, function() {
      var e = extent.apply(this, arguments),
          t0 = this.__zoom,
          p0 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p,
          p1 = t0.invert(p0),
          k1 = typeof k === "function" ? k.apply(this, arguments) : k;
      return constrain(translate(scale(t0, k1), p0, p1), e, translateExtent);
    }, p);
  };

  zoom.translateBy = function(selection, x, y) {
    zoom.transform(selection, function() {
      return constrain(this.__zoom.translate(
        typeof x === "function" ? x.apply(this, arguments) : x,
        typeof y === "function" ? y.apply(this, arguments) : y
      ), extent.apply(this, arguments), translateExtent);
    });
  };

  zoom.translateTo = function(selection, x, y, p) {
    zoom.transform(selection, function() {
      var e = extent.apply(this, arguments),
          t = this.__zoom,
          p0 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p;
      return constrain(identity.translate(p0[0], p0[1]).scale(t.k).translate(
        typeof x === "function" ? -x.apply(this, arguments) : -x,
        typeof y === "function" ? -y.apply(this, arguments) : -y
      ), e, translateExtent);
    }, p);
  };

  function scale(transform, k) {
    k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], k));
    return k === transform.k ? transform : new Transform(k, transform.x, transform.y);
  }

  function translate(transform, p0, p1) {
    var x = p0[0] - p1[0] * transform.k, y = p0[1] - p1[1] * transform.k;
    return x === transform.x && y === transform.y ? transform : new Transform(transform.k, x, y);
  }

  function centroid(extent) {
    return [(+extent[0][0] + +extent[1][0]) / 2, (+extent[0][1] + +extent[1][1]) / 2];
  }

  function schedule(transition, transform, point) {
    transition
        .on("start.zoom", function() { gesture(this, arguments).start(); })
        .on("interrupt.zoom end.zoom", function() { gesture(this, arguments).end(); })
        .tween("zoom", function() {
          var that = this,
              args = arguments,
              g = gesture(that, args),
              e = extent.apply(that, args),
              p = point == null ? centroid(e) : typeof point === "function" ? point.apply(that, args) : point,
              w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]),
              a = that.__zoom,
              b = typeof transform === "function" ? transform.apply(that, args) : transform,
              i = interpolate(a.invert(p).concat(w / a.k), b.invert(p).concat(w / b.k));
          return function(t) {
            if (t === 1) t = b; // Avoid rounding error on end.
            else { var l = i(t), k = w / l[2]; t = new Transform(k, p[0] - l[0] * k, p[1] - l[1] * k); }
            g.zoom(null, t);
          };
        });
  }

  function gesture(that, args, clean) {
    return (!clean && that.__zooming) || new Gesture(that, args);
  }

  function Gesture(that, args) {
    this.that = that;
    this.args = args;
    this.active = 0;
    this.extent = extent.apply(that, args);
    this.taps = 0;
  }

  Gesture.prototype = {
    start: function() {
      if (++this.active === 1) {
        this.that.__zooming = this;
        this.emit("start");
      }
      return this;
    },
    zoom: function(key, transform) {
      if (this.mouse && key !== "mouse") this.mouse[1] = transform.invert(this.mouse[0]);
      if (this.touch0 && key !== "touch") this.touch0[1] = transform.invert(this.touch0[0]);
      if (this.touch1 && key !== "touch") this.touch1[1] = transform.invert(this.touch1[0]);
      this.that.__zoom = transform;
      this.emit("zoom");
      return this;
    },
    end: function() {
      if (--this.active === 0) {
        delete this.that.__zooming;
        this.emit("end");
      }
      return this;
    },
    emit: function(type) {
      d3Selection.customEvent(new ZoomEvent(zoom, type, this.that.__zoom), listeners.apply, listeners, [type, this.that, this.args]);
    }
  };

  function wheeled() {
    if (!filter.apply(this, arguments)) return;
    var g = gesture(this, arguments),
        t = this.__zoom,
        k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], t.k * Math.pow(2, wheelDelta.apply(this, arguments)))),
        p = d3Selection.mouse(this);

    // If the mouse is in the same location as before, reuse it.
    // If there were recent wheel events, reset the wheel idle timeout.
    if (g.wheel) {
      if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) {
        g.mouse[1] = t.invert(g.mouse[0] = p);
      }
      clearTimeout(g.wheel);
    }

    // If this wheel event won’t trigger a transform change, ignore it.
    else if (t.k === k) return;

    // Otherwise, capture the mouse point and location at the start.
    else {
      g.mouse = [p, t.invert(p)];
      d3Transition.interrupt(this);
      g.start();
    }

    noevent();
    g.wheel = setTimeout(wheelidled, wheelDelay);
    g.zoom("mouse", constrain(translate(scale(t, k), g.mouse[0], g.mouse[1]), g.extent, translateExtent));

    function wheelidled() {
      g.wheel = null;
      g.end();
    }
  }

  function mousedowned() {
    if (touchending || !filter.apply(this, arguments)) return;
    var g = gesture(this, arguments, true),
        v = d3Selection.select(d3Selection.event.view).on("mousemove.zoom", mousemoved, true).on("mouseup.zoom", mouseupped, true),
        p = d3Selection.mouse(this),
        x0 = d3Selection.event.clientX,
        y0 = d3Selection.event.clientY;

    d3Drag.dragDisable(d3Selection.event.view);
    nopropagation();
    g.mouse = [p, this.__zoom.invert(p)];
    d3Transition.interrupt(this);
    g.start();

    function mousemoved() {
      noevent();
      if (!g.moved) {
        var dx = d3Selection.event.clientX - x0, dy = d3Selection.event.clientY - y0;
        g.moved = dx * dx + dy * dy > clickDistance2;
      }
      g.zoom("mouse", constrain(translate(g.that.__zoom, g.mouse[0] = d3Selection.mouse(g.that), g.mouse[1]), g.extent, translateExtent));
    }

    function mouseupped() {
      v.on("mousemove.zoom mouseup.zoom", null);
      d3Drag.dragEnable(d3Selection.event.view, g.moved);
      noevent();
      g.end();
    }
  }

  function dblclicked() {
    if (!filter.apply(this, arguments)) return;
    var t0 = this.__zoom,
        p0 = d3Selection.mouse(this),
        p1 = t0.invert(p0),
        k1 = t0.k * (d3Selection.event.shiftKey ? 0.5 : 2),
        t1 = constrain(translate(scale(t0, k1), p0, p1), extent.apply(this, arguments), translateExtent);

    noevent();
    if (duration > 0) d3Selection.select(this).transition().duration(duration).call(schedule, t1, p0);
    else d3Selection.select(this).call(zoom.transform, t1);
  }

  function touchstarted() {
    if (!filter.apply(this, arguments)) return;
    var touches = d3Selection.event.touches,
        n = touches.length,
        g = gesture(this, arguments, d3Selection.event.changedTouches.length === n),
        started, i, t, p;

    nopropagation();
    for (i = 0; i < n; ++i) {
      t = touches[i], p = d3Selection.touch(this, touches, t.identifier);
      p = [p, this.__zoom.invert(p), t.identifier];
      if (!g.touch0) g.touch0 = p, started = true, g.taps = 1 + !!touchstarting;
      else if (!g.touch1 && g.touch0[2] !== p[2]) g.touch1 = p, g.taps = 0;
    }

    if (touchstarting) touchstarting = clearTimeout(touchstarting);

    if (started) {
      if (g.taps < 2) touchstarting = setTimeout(function() { touchstarting = null; }, touchDelay);
      d3Transition.interrupt(this);
      g.start();
    }
  }

  function touchmoved() {
    if (!this.__zooming) return;
    var g = gesture(this, arguments),
        touches = d3Selection.event.changedTouches,
        n = touches.length, i, t, p, l;

    noevent();
    if (touchstarting) touchstarting = clearTimeout(touchstarting);
    g.taps = 0;
    for (i = 0; i < n; ++i) {
      t = touches[i], p = d3Selection.touch(this, touches, t.identifier);
      if (g.touch0 && g.touch0[2] === t.identifier) g.touch0[0] = p;
      else if (g.touch1 && g.touch1[2] === t.identifier) g.touch1[0] = p;
    }
    t = g.that.__zoom;
    if (g.touch1) {
      var p0 = g.touch0[0], l0 = g.touch0[1],
          p1 = g.touch1[0], l1 = g.touch1[1],
          dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp,
          dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;
      t = scale(t, Math.sqrt(dp / dl));
      p = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];
      l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];
    }
    else if (g.touch0) p = g.touch0[0], l = g.touch0[1];
    else return;
    g.zoom("touch", constrain(translate(t, p, l), g.extent, translateExtent));
  }

  function touchended() {
    if (!this.__zooming) return;
    var g = gesture(this, arguments),
        touches = d3Selection.event.changedTouches,
        n = touches.length, i, t;

    nopropagation();
    if (touchending) clearTimeout(touchending);
    touchending = setTimeout(function() { touchending = null; }, touchDelay);
    for (i = 0; i < n; ++i) {
      t = touches[i];
      if (g.touch0 && g.touch0[2] === t.identifier) delete g.touch0;
      else if (g.touch1 && g.touch1[2] === t.identifier) delete g.touch1;
    }
    if (g.touch1 && !g.touch0) g.touch0 = g.touch1, delete g.touch1;
    if (g.touch0) g.touch0[1] = this.__zoom.invert(g.touch0[0]);
    else {
      g.end();
      // If this was a dbltap, reroute to the (optional) dblclick.zoom handler.
      if (g.taps === 2) {
        var p = d3Selection.select(this).on("dblclick.zoom");
        if (p) p.apply(this, arguments);
      }
    }
  }

  zoom.wheelDelta = function(_) {
    return arguments.length ? (wheelDelta = typeof _ === "function" ? _ : constant(+_), zoom) : wheelDelta;
  };

  zoom.filter = function(_) {
    return arguments.length ? (filter = typeof _ === "function" ? _ : constant(!!_), zoom) : filter;
  };

  zoom.touchable = function(_) {
    return arguments.length ? (touchable = typeof _ === "function" ? _ : constant(!!_), zoom) : touchable;
  };

  zoom.extent = function(_) {
    return arguments.length ? (extent = typeof _ === "function" ? _ : constant([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), zoom) : extent;
  };

  zoom.scaleExtent = function(_) {
    return arguments.length ? (scaleExtent[0] = +_[0], scaleExtent[1] = +_[1], zoom) : [scaleExtent[0], scaleExtent[1]];
  };

  zoom.translateExtent = function(_) {
    return arguments.length ? (translateExtent[0][0] = +_[0][0], translateExtent[1][0] = +_[1][0], translateExtent[0][1] = +_[0][1], translateExtent[1][1] = +_[1][1], zoom) : [[translateExtent[0][0], translateExtent[0][1]], [translateExtent[1][0], translateExtent[1][1]]];
  };

  zoom.constrain = function(_) {
    return arguments.length ? (constrain = _, zoom) : constrain;
  };

  zoom.duration = function(_) {
    return arguments.length ? (duration = +_, zoom) : duration;
  };

  zoom.interpolate = function(_) {
    return arguments.length ? (interpolate = _, zoom) : interpolate;
  };

  zoom.on = function() {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? zoom : value;
  };

  zoom.clickDistance = function(_) {
    return arguments.length ? (clickDistance2 = (_ = +_) * _, zoom) : Math.sqrt(clickDistance2);
  };

  return zoom;
}

exports.zoom = zoom;
exports.zoomIdentity = identity;
exports.zoomTransform = transform;

Object.defineProperty(exports, '__esModule', { value: true });

}));

},{"d3-dispatch":44,"d3-drag":45,"d3-interpolate":53,"d3-selection":60,"d3-transition":65}],68:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var d3Array = require('d3-array');
var d3Axis = require('d3-axis');
var d3Brush = require('d3-brush');
var d3Chord = require('d3-chord');
var d3Collection = require('d3-collection');
var d3Color = require('d3-color');
var d3Contour = require('d3-contour');
var d3Dispatch = require('d3-dispatch');
var d3Drag = require('d3-drag');
var d3Dsv = require('d3-dsv');
var d3Ease = require('d3-ease');
var d3Fetch = require('d3-fetch');
var d3Force = require('d3-force');
var d3Format = require('d3-format');
var d3Geo = require('d3-geo');
var d3Hierarchy = require('d3-hierarchy');
var d3Interpolate = require('d3-interpolate');
var d3Path = require('d3-path');
var d3Polygon = require('d3-polygon');
var d3Quadtree = require('d3-quadtree');
var d3Random = require('d3-random');
var d3Scale = require('d3-scale');
var d3ScaleChromatic = require('d3-scale-chromatic');
var d3Selection = require('d3-selection');
var d3Shape = require('d3-shape');
var d3Time = require('d3-time');
var d3TimeFormat = require('d3-time-format');
var d3Timer = require('d3-timer');
var d3Transition = require('d3-transition');
var d3Voronoi = require('d3-voronoi');
var d3Zoom = require('d3-zoom');

var version = "5.16.0";

Object.keys(d3Array).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3Array[k];
		}
	});
});
Object.keys(d3Axis).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3Axis[k];
		}
	});
});
Object.keys(d3Brush).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3Brush[k];
		}
	});
});
Object.keys(d3Chord).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3Chord[k];
		}
	});
});
Object.keys(d3Collection).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3Collection[k];
		}
	});
});
Object.keys(d3Color).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3Color[k];
		}
	});
});
Object.keys(d3Contour).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3Contour[k];
		}
	});
});
Object.keys(d3Dispatch).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3Dispatch[k];
		}
	});
});
Object.keys(d3Drag).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3Drag[k];
		}
	});
});
Object.keys(d3Dsv).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3Dsv[k];
		}
	});
});
Object.keys(d3Ease).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3Ease[k];
		}
	});
});
Object.keys(d3Fetch).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3Fetch[k];
		}
	});
});
Object.keys(d3Force).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3Force[k];
		}
	});
});
Object.keys(d3Format).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3Format[k];
		}
	});
});
Object.keys(d3Geo).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3Geo[k];
		}
	});
});
Object.keys(d3Hierarchy).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3Hierarchy[k];
		}
	});
});
Object.keys(d3Interpolate).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3Interpolate[k];
		}
	});
});
Object.keys(d3Path).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3Path[k];
		}
	});
});
Object.keys(d3Polygon).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3Polygon[k];
		}
	});
});
Object.keys(d3Quadtree).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3Quadtree[k];
		}
	});
});
Object.keys(d3Random).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3Random[k];
		}
	});
});
Object.keys(d3Scale).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3Scale[k];
		}
	});
});
Object.keys(d3ScaleChromatic).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3ScaleChromatic[k];
		}
	});
});
Object.keys(d3Selection).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3Selection[k];
		}
	});
});
Object.keys(d3Shape).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3Shape[k];
		}
	});
});
Object.keys(d3Time).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3Time[k];
		}
	});
});
Object.keys(d3TimeFormat).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3TimeFormat[k];
		}
	});
});
Object.keys(d3Timer).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3Timer[k];
		}
	});
});
Object.keys(d3Transition).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3Transition[k];
		}
	});
});
Object.keys(d3Voronoi).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3Voronoi[k];
		}
	});
});
Object.keys(d3Zoom).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3Zoom[k];
		}
	});
});
exports.version = version;

},{"d3-array":37,"d3-axis":38,"d3-brush":39,"d3-chord":40,"d3-collection":41,"d3-color":42,"d3-contour":43,"d3-dispatch":44,"d3-drag":45,"d3-dsv":46,"d3-ease":47,"d3-fetch":48,"d3-force":49,"d3-format":50,"d3-geo":51,"d3-hierarchy":52,"d3-interpolate":53,"d3-path":54,"d3-polygon":55,"d3-quadtree":56,"d3-random":57,"d3-scale":59,"d3-scale-chromatic":58,"d3-selection":60,"d3-shape":61,"d3-time":63,"d3-time-format":62,"d3-timer":64,"d3-transition":65,"d3-voronoi":66,"d3-zoom":67}],69:[function(require,module,exports){
'use strict'

module.exports = ready

function ready (callback) {
  if (typeof document === 'undefined') {
    throw new Error('document-ready only runs in the browser')
  }
  var state = document.readyState
  if (state === 'complete' || state === 'interactive') {
    return setTimeout(callback, 0)
  }

  document.addEventListener('DOMContentLoaded', function onLoad () {
    callback()
  })
}

},{}],70:[function(require,module,exports){
module.exports = stringify
stringify.default = stringify
stringify.stable = deterministicStringify
stringify.stableStringify = deterministicStringify

var arr = []
var replacerStack = []

// Regular stringify
function stringify (obj, replacer, spacer) {
  decirc(obj, '', [], undefined)
  var res
  if (replacerStack.length === 0) {
    res = JSON.stringify(obj, replacer, spacer)
  } else {
    res = JSON.stringify(obj, replaceGetterValues(replacer), spacer)
  }
  while (arr.length !== 0) {
    var part = arr.pop()
    if (part.length === 4) {
      Object.defineProperty(part[0], part[1], part[3])
    } else {
      part[0][part[1]] = part[2]
    }
  }
  return res
}
function decirc (val, k, stack, parent) {
  var i
  if (typeof val === 'object' && val !== null) {
    for (i = 0; i < stack.length; i++) {
      if (stack[i] === val) {
        var propertyDescriptor = Object.getOwnPropertyDescriptor(parent, k)
        if (propertyDescriptor.get !== undefined) {
          if (propertyDescriptor.configurable) {
            Object.defineProperty(parent, k, { value: '[Circular]' })
            arr.push([parent, k, val, propertyDescriptor])
          } else {
            replacerStack.push([val, k])
          }
        } else {
          parent[k] = '[Circular]'
          arr.push([parent, k, val])
        }
        return
      }
    }
    stack.push(val)
    // Optimize for Arrays. Big arrays could kill the performance otherwise!
    if (Array.isArray(val)) {
      for (i = 0; i < val.length; i++) {
        decirc(val[i], i, stack, val)
      }
    } else {
      var keys = Object.keys(val)
      for (i = 0; i < keys.length; i++) {
        var key = keys[i]
        decirc(val[key], key, stack, val)
      }
    }
    stack.pop()
  }
}

// Stable-stringify
function compareFunction (a, b) {
  if (a < b) {
    return -1
  }
  if (a > b) {
    return 1
  }
  return 0
}

function deterministicStringify (obj, replacer, spacer) {
  var tmp = deterministicDecirc(obj, '', [], undefined) || obj
  var res
  if (replacerStack.length === 0) {
    res = JSON.stringify(tmp, replacer, spacer)
  } else {
    res = JSON.stringify(tmp, replaceGetterValues(replacer), spacer)
  }
  while (arr.length !== 0) {
    var part = arr.pop()
    if (part.length === 4) {
      Object.defineProperty(part[0], part[1], part[3])
    } else {
      part[0][part[1]] = part[2]
    }
  }
  return res
}

function deterministicDecirc (val, k, stack, parent) {
  var i
  if (typeof val === 'object' && val !== null) {
    for (i = 0; i < stack.length; i++) {
      if (stack[i] === val) {
        var propertyDescriptor = Object.getOwnPropertyDescriptor(parent, k)
        if (propertyDescriptor.get !== undefined) {
          if (propertyDescriptor.configurable) {
            Object.defineProperty(parent, k, { value: '[Circular]' })
            arr.push([parent, k, val, propertyDescriptor])
          } else {
            replacerStack.push([val, k])
          }
        } else {
          parent[k] = '[Circular]'
          arr.push([parent, k, val])
        }
        return
      }
    }
    if (typeof val.toJSON === 'function') {
      return
    }
    stack.push(val)
    // Optimize for Arrays. Big arrays could kill the performance otherwise!
    if (Array.isArray(val)) {
      for (i = 0; i < val.length; i++) {
        deterministicDecirc(val[i], i, stack, val)
      }
    } else {
      // Create a temporary object in the required way
      var tmp = {}
      var keys = Object.keys(val).sort(compareFunction)
      for (i = 0; i < keys.length; i++) {
        var key = keys[i]
        deterministicDecirc(val[key], key, stack, val)
        tmp[key] = val[key]
      }
      if (parent !== undefined) {
        arr.push([parent, k, val])
        parent[k] = tmp
      } else {
        return tmp
      }
    }
    stack.pop()
  }
}

// wraps replacer function to handle values we couldn't replace
// and mark them as [Circular]
function replaceGetterValues (replacer) {
  replacer = replacer !== undefined ? replacer : function (k, v) { return v }
  return function (key, val) {
    if (replacerStack.length > 0) {
      for (var i = 0; i < replacerStack.length; i++) {
        var part = replacerStack[i]
        if (part[1] === key && part[0] === val) {
          val = '[Circular]'
          replacerStack.splice(i, 1)
          break
        }
      }
    }
    return replacer.call(this, key, val)
  }
}

},{}],71:[function(require,module,exports){
(function (global){
var topLevel = typeof global !== 'undefined' ? global :
    typeof window !== 'undefined' ? window : {}
var minDoc = require('min-document');

var doccy;

if (typeof document !== 'undefined') {
    doccy = document;
} else {
    doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'];

    if (!doccy) {
        doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'] = minDoc;
    }
}

module.exports = doccy;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"min-document":18}],72:[function(require,module,exports){
(function (global){
var win;

if (typeof window !== "undefined") {
    win = window;
} else if (typeof global !== "undefined") {
    win = global;
} else if (typeof self !== "undefined"){
    win = self;
} else {
    win = {};
}

module.exports = win;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],73:[function(require,module,exports){
module.exports = attributeToProperty

var transform = {
  'class': 'className',
  'for': 'htmlFor',
  'http-equiv': 'httpEquiv'
}

function attributeToProperty (h) {
  return function (tagName, attrs, children) {
    for (var attr in attrs) {
      if (attr in transform) {
        attrs[transform[attr]] = attrs[attr]
        delete attrs[attr]
      }
    }
    return h(tagName, attrs, children)
  }
}

},{}],74:[function(require,module,exports){
var attrToProp = require('hyperscript-attribute-to-property')

var VAR = 0, TEXT = 1, OPEN = 2, CLOSE = 3, ATTR = 4
var ATTR_KEY = 5, ATTR_KEY_W = 6
var ATTR_VALUE_W = 7, ATTR_VALUE = 8
var ATTR_VALUE_SQ = 9, ATTR_VALUE_DQ = 10
var ATTR_EQ = 11, ATTR_BREAK = 12
var COMMENT = 13

module.exports = function (h, opts) {
  if (!opts) opts = {}
  var concat = opts.concat || function (a, b) {
    return String(a) + String(b)
  }
  if (opts.attrToProp !== false) {
    h = attrToProp(h)
  }

  return function (strings) {
    var state = TEXT, reg = ''
    var arglen = arguments.length
    var parts = []

    for (var i = 0; i < strings.length; i++) {
      if (i < arglen - 1) {
        var arg = arguments[i+1]
        var p = parse(strings[i])
        var xstate = state
        if (xstate === ATTR_VALUE_DQ) xstate = ATTR_VALUE
        if (xstate === ATTR_VALUE_SQ) xstate = ATTR_VALUE
        if (xstate === ATTR_VALUE_W) xstate = ATTR_VALUE
        if (xstate === ATTR) xstate = ATTR_KEY
        if (xstate === OPEN) {
          if (reg === '/') {
            p.push([ OPEN, '/', arg ])
            reg = ''
          } else {
            p.push([ OPEN, arg ])
          }
        } else if (xstate === COMMENT && opts.comments) {
          reg += String(arg)
        } else if (xstate !== COMMENT) {
          p.push([ VAR, xstate, arg ])
        }
        parts.push.apply(parts, p)
      } else parts.push.apply(parts, parse(strings[i]))
    }

    var tree = [null,{},[]]
    var stack = [[tree,-1]]
    for (var i = 0; i < parts.length; i++) {
      var cur = stack[stack.length-1][0]
      var p = parts[i], s = p[0]
      if (s === OPEN && /^\//.test(p[1])) {
        var ix = stack[stack.length-1][1]
        if (stack.length > 1) {
          stack.pop()
          stack[stack.length-1][0][2][ix] = h(
            cur[0], cur[1], cur[2].length ? cur[2] : undefined
          )
        }
      } else if (s === OPEN) {
        var c = [p[1],{},[]]
        cur[2].push(c)
        stack.push([c,cur[2].length-1])
      } else if (s === ATTR_KEY || (s === VAR && p[1] === ATTR_KEY)) {
        var key = ''
        var copyKey
        for (; i < parts.length; i++) {
          if (parts[i][0] === ATTR_KEY) {
            key = concat(key, parts[i][1])
          } else if (parts[i][0] === VAR && parts[i][1] === ATTR_KEY) {
            if (typeof parts[i][2] === 'object' && !key) {
              for (copyKey in parts[i][2]) {
                if (parts[i][2].hasOwnProperty(copyKey) && !cur[1][copyKey]) {
                  cur[1][copyKey] = parts[i][2][copyKey]
                }
              }
            } else {
              key = concat(key, parts[i][2])
            }
          } else break
        }
        if (parts[i][0] === ATTR_EQ) i++
        var j = i
        for (; i < parts.length; i++) {
          if (parts[i][0] === ATTR_VALUE || parts[i][0] === ATTR_KEY) {
            if (!cur[1][key]) cur[1][key] = strfn(parts[i][1])
            else parts[i][1]==="" || (cur[1][key] = concat(cur[1][key], parts[i][1]));
          } else if (parts[i][0] === VAR
          && (parts[i][1] === ATTR_VALUE || parts[i][1] === ATTR_KEY)) {
            if (!cur[1][key]) cur[1][key] = strfn(parts[i][2])
            else parts[i][2]==="" || (cur[1][key] = concat(cur[1][key], parts[i][2]));
          } else {
            if (key.length && !cur[1][key] && i === j
            && (parts[i][0] === CLOSE || parts[i][0] === ATTR_BREAK)) {
              // https://html.spec.whatwg.org/multipage/infrastructure.html#boolean-attributes
              // empty string is falsy, not well behaved value in browser
              cur[1][key] = key.toLowerCase()
            }
            if (parts[i][0] === CLOSE) {
              i--
            }
            break
          }
        }
      } else if (s === ATTR_KEY) {
        cur[1][p[1]] = true
      } else if (s === VAR && p[1] === ATTR_KEY) {
        cur[1][p[2]] = true
      } else if (s === CLOSE) {
        if (selfClosing(cur[0]) && stack.length) {
          var ix = stack[stack.length-1][1]
          stack.pop()
          stack[stack.length-1][0][2][ix] = h(
            cur[0], cur[1], cur[2].length ? cur[2] : undefined
          )
        }
      } else if (s === VAR && p[1] === TEXT) {
        if (p[2] === undefined || p[2] === null) p[2] = ''
        else if (!p[2]) p[2] = concat('', p[2])
        if (Array.isArray(p[2][0])) {
          cur[2].push.apply(cur[2], p[2])
        } else {
          cur[2].push(p[2])
        }
      } else if (s === TEXT) {
        cur[2].push(p[1])
      } else if (s === ATTR_EQ || s === ATTR_BREAK) {
        // no-op
      } else {
        throw new Error('unhandled: ' + s)
      }
    }

    if (tree[2].length > 1 && /^\s*$/.test(tree[2][0])) {
      tree[2].shift()
    }

    if (tree[2].length > 2
    || (tree[2].length === 2 && /\S/.test(tree[2][1]))) {
      if (opts.createFragment) return opts.createFragment(tree[2])
      throw new Error(
        'multiple root elements must be wrapped in an enclosing tag'
      )
    }
    if (Array.isArray(tree[2][0]) && typeof tree[2][0][0] === 'string'
    && Array.isArray(tree[2][0][2])) {
      tree[2][0] = h(tree[2][0][0], tree[2][0][1], tree[2][0][2])
    }
    return tree[2][0]

    function parse (str) {
      var res = []
      if (state === ATTR_VALUE_W) state = ATTR
      for (var i = 0; i < str.length; i++) {
        var c = str.charAt(i)
        if (state === TEXT && c === '<') {
          if (reg.length) res.push([TEXT, reg])
          reg = ''
          state = OPEN
        } else if (c === '>' && !quot(state) && state !== COMMENT) {
          if (state === OPEN && reg.length) {
            res.push([OPEN,reg])
          } else if (state === ATTR_KEY) {
            res.push([ATTR_KEY,reg])
          } else if (state === ATTR_VALUE && reg.length) {
            res.push([ATTR_VALUE,reg])
          }
          res.push([CLOSE])
          reg = ''
          state = TEXT
        } else if (state === COMMENT && /-$/.test(reg) && c === '-') {
          if (opts.comments) {
            res.push([ATTR_VALUE,reg.substr(0, reg.length - 1)])
          }
          reg = ''
          state = TEXT
        } else if (state === OPEN && /^!--$/.test(reg)) {
          if (opts.comments) {
            res.push([OPEN, reg],[ATTR_KEY,'comment'],[ATTR_EQ])
          }
          reg = c
          state = COMMENT
        } else if (state === TEXT || state === COMMENT) {
          reg += c
        } else if (state === OPEN && c === '/' && reg.length) {
          // no-op, self closing tag without a space <br/>
        } else if (state === OPEN && /\s/.test(c)) {
          if (reg.length) {
            res.push([OPEN, reg])
          }
          reg = ''
          state = ATTR
        } else if (state === OPEN) {
          reg += c
        } else if (state === ATTR && /[^\s"'=/]/.test(c)) {
          state = ATTR_KEY
          reg = c
        } else if (state === ATTR && /\s/.test(c)) {
          if (reg.length) res.push([ATTR_KEY,reg])
          res.push([ATTR_BREAK])
        } else if (state === ATTR_KEY && /\s/.test(c)) {
          res.push([ATTR_KEY,reg])
          reg = ''
          state = ATTR_KEY_W
        } else if (state === ATTR_KEY && c === '=') {
          res.push([ATTR_KEY,reg],[ATTR_EQ])
          reg = ''
          state = ATTR_VALUE_W
        } else if (state === ATTR_KEY) {
          reg += c
        } else if ((state === ATTR_KEY_W || state === ATTR) && c === '=') {
          res.push([ATTR_EQ])
          state = ATTR_VALUE_W
        } else if ((state === ATTR_KEY_W || state === ATTR) && !/\s/.test(c)) {
          res.push([ATTR_BREAK])
          if (/[\w-]/.test(c)) {
            reg += c
            state = ATTR_KEY
          } else state = ATTR
        } else if (state === ATTR_VALUE_W && c === '"') {
          state = ATTR_VALUE_DQ
        } else if (state === ATTR_VALUE_W && c === "'") {
          state = ATTR_VALUE_SQ
        } else if (state === ATTR_VALUE_DQ && c === '"') {
          res.push([ATTR_VALUE,reg],[ATTR_BREAK])
          reg = ''
          state = ATTR
        } else if (state === ATTR_VALUE_SQ && c === "'") {
          res.push([ATTR_VALUE,reg],[ATTR_BREAK])
          reg = ''
          state = ATTR
        } else if (state === ATTR_VALUE_W && !/\s/.test(c)) {
          state = ATTR_VALUE
          i--
        } else if (state === ATTR_VALUE && /\s/.test(c)) {
          res.push([ATTR_VALUE,reg],[ATTR_BREAK])
          reg = ''
          state = ATTR
        } else if (state === ATTR_VALUE || state === ATTR_VALUE_SQ
        || state === ATTR_VALUE_DQ) {
          reg += c
        }
      }
      if (state === TEXT && reg.length) {
        res.push([TEXT,reg])
        reg = ''
      } else if (state === ATTR_VALUE && reg.length) {
        res.push([ATTR_VALUE,reg])
        reg = ''
      } else if (state === ATTR_VALUE_DQ && reg.length) {
        res.push([ATTR_VALUE,reg])
        reg = ''
      } else if (state === ATTR_VALUE_SQ && reg.length) {
        res.push([ATTR_VALUE,reg])
        reg = ''
      } else if (state === ATTR_KEY) {
        res.push([ATTR_KEY,reg])
        reg = ''
      }
      return res
    }
  }

  function strfn (x) {
    if (typeof x === 'function') return x
    else if (typeof x === 'string') return x
    else if (x && typeof x === 'object') return x
    else if (x === null || x === undefined) return x
    else return concat('', x)
  }
}

function quot (state) {
  return state === ATTR_VALUE_SQ || state === ATTR_VALUE_DQ
}

var closeRE = RegExp('^(' + [
  'area', 'base', 'basefont', 'bgsound', 'br', 'col', 'command', 'embed',
  'frame', 'hr', 'img', 'input', 'isindex', 'keygen', 'link', 'meta', 'param',
  'source', 'track', 'wbr', '!--',
  // SVG TAGS
  'animate', 'animateTransform', 'circle', 'cursor', 'desc', 'ellipse',
  'feBlend', 'feColorMatrix', 'feComposite',
  'feConvolveMatrix', 'feDiffuseLighting', 'feDisplacementMap',
  'feDistantLight', 'feFlood', 'feFuncA', 'feFuncB', 'feFuncG', 'feFuncR',
  'feGaussianBlur', 'feImage', 'feMergeNode', 'feMorphology',
  'feOffset', 'fePointLight', 'feSpecularLighting', 'feSpotLight', 'feTile',
  'feTurbulence', 'font-face-format', 'font-face-name', 'font-face-uri',
  'glyph', 'glyphRef', 'hkern', 'image', 'line', 'missing-glyph', 'mpath',
  'path', 'polygon', 'polyline', 'rect', 'set', 'stop', 'tref', 'use', 'view',
  'vkern'
].join('|') + ')(?:[\.#][a-zA-Z0-9\u007F-\uFFFF_:-]+)*$')
function selfClosing (tag) { return closeRE.test(tag) }

},{"hyperscript-attribute-to-property":73}],75:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],76:[function(require,module,exports){
var containers = []; // will store container HTMLElement references
var styleElements = []; // will store {prepend: HTMLElement, append: HTMLElement}

var usage = 'insert-css: You need to provide a CSS string. Usage: insertCss(cssString[, options]).';

function insertCss(css, options) {
    options = options || {};

    if (css === undefined) {
        throw new Error(usage);
    }

    var position = options.prepend === true ? 'prepend' : 'append';
    var container = options.container !== undefined ? options.container : document.querySelector('head');
    var containerId = containers.indexOf(container);

    // first time we see this container, create the necessary entries
    if (containerId === -1) {
        containerId = containers.push(container) - 1;
        styleElements[containerId] = {};
    }

    // try to get the correponding container + position styleElement, create it otherwise
    var styleElement;

    if (styleElements[containerId] !== undefined && styleElements[containerId][position] !== undefined) {
        styleElement = styleElements[containerId][position];
    } else {
        styleElement = styleElements[containerId][position] = createStyleElement();

        if (position === 'prepend') {
            container.insertBefore(styleElement, container.childNodes[0]);
        } else {
            container.appendChild(styleElement);
        }
    }

    // strip potential UTF-8 BOM if css was read from a file
    if (css.charCodeAt(0) === 0xFEFF) { css = css.substr(1, css.length); }

    // actually add the stylesheet
    if (styleElement.styleSheet) {
        styleElement.styleSheet.cssText += css
    } else {
        styleElement.textContent += css;
    }

    return styleElement;
};

function createStyleElement() {
    var styleElement = document.createElement('style');
    styleElement.setAttribute('type', 'text/css');
    return styleElement;
}

module.exports = insertCss;
module.exports.insertCss = insertCss;

},{}],77:[function(require,module,exports){
assert.notEqual = notEqual
assert.notOk = notOk
assert.equal = equal
assert.ok = assert

module.exports = assert

function equal (a, b, m) {
  assert(a == b, m) // eslint-disable-line eqeqeq
}

function notEqual (a, b, m) {
  assert(a != b, m) // eslint-disable-line eqeqeq
}

function notOk (t, m) {
  assert(!t, m)
}

function assert (t, m) {
  if (!t) throw new Error(m || 'AssertionError')
}

},{}],78:[function(require,module,exports){
var splice = require('remove-array-items')
var nanotiming = require('nanotiming')
var assert = require('assert')

module.exports = Nanobus

function Nanobus (name) {
  if (!(this instanceof Nanobus)) return new Nanobus(name)

  this._name = name || 'nanobus'
  this._starListeners = []
  this._listeners = {}
}

Nanobus.prototype.emit = function (eventName) {
  assert.ok(typeof eventName === 'string' || typeof eventName === 'symbol', 'nanobus.emit: eventName should be type string or symbol')

  var data = []
  for (var i = 1, len = arguments.length; i < len; i++) {
    data.push(arguments[i])
  }

  var emitTiming = nanotiming(this._name + "('" + eventName.toString() + "')")
  var listeners = this._listeners[eventName]
  if (listeners && listeners.length > 0) {
    this._emit(this._listeners[eventName], data)
  }

  if (this._starListeners.length > 0) {
    this._emit(this._starListeners, eventName, data, emitTiming.uuid)
  }
  emitTiming()

  return this
}

Nanobus.prototype.on = Nanobus.prototype.addListener = function (eventName, listener) {
  assert.ok(typeof eventName === 'string' || typeof eventName === 'symbol', 'nanobus.on: eventName should be type string or symbol')
  assert.equal(typeof listener, 'function', 'nanobus.on: listener should be type function')

  if (eventName === '*') {
    this._starListeners.push(listener)
  } else {
    if (!this._listeners[eventName]) this._listeners[eventName] = []
    this._listeners[eventName].push(listener)
  }
  return this
}

Nanobus.prototype.prependListener = function (eventName, listener) {
  assert.ok(typeof eventName === 'string' || typeof eventName === 'symbol', 'nanobus.prependListener: eventName should be type string or symbol')
  assert.equal(typeof listener, 'function', 'nanobus.prependListener: listener should be type function')

  if (eventName === '*') {
    this._starListeners.unshift(listener)
  } else {
    if (!this._listeners[eventName]) this._listeners[eventName] = []
    this._listeners[eventName].unshift(listener)
  }
  return this
}

Nanobus.prototype.once = function (eventName, listener) {
  assert.ok(typeof eventName === 'string' || typeof eventName === 'symbol', 'nanobus.once: eventName should be type string or symbol')
  assert.equal(typeof listener, 'function', 'nanobus.once: listener should be type function')

  var self = this
  this.on(eventName, once)
  function once () {
    listener.apply(self, arguments)
    self.removeListener(eventName, once)
  }
  return this
}

Nanobus.prototype.prependOnceListener = function (eventName, listener) {
  assert.ok(typeof eventName === 'string' || typeof eventName === 'symbol', 'nanobus.prependOnceListener: eventName should be type string or symbol')
  assert.equal(typeof listener, 'function', 'nanobus.prependOnceListener: listener should be type function')

  var self = this
  this.prependListener(eventName, once)
  function once () {
    listener.apply(self, arguments)
    self.removeListener(eventName, once)
  }
  return this
}

Nanobus.prototype.removeListener = function (eventName, listener) {
  assert.ok(typeof eventName === 'string' || typeof eventName === 'symbol', 'nanobus.removeListener: eventName should be type string or symbol')
  assert.equal(typeof listener, 'function', 'nanobus.removeListener: listener should be type function')

  if (eventName === '*') {
    this._starListeners = this._starListeners.slice()
    return remove(this._starListeners, listener)
  } else {
    if (typeof this._listeners[eventName] !== 'undefined') {
      this._listeners[eventName] = this._listeners[eventName].slice()
    }

    return remove(this._listeners[eventName], listener)
  }

  function remove (arr, listener) {
    if (!arr) return
    var index = arr.indexOf(listener)
    if (index !== -1) {
      splice(arr, index, 1)
      return true
    }
  }
}

Nanobus.prototype.removeAllListeners = function (eventName) {
  if (eventName) {
    if (eventName === '*') {
      this._starListeners = []
    } else {
      this._listeners[eventName] = []
    }
  } else {
    this._starListeners = []
    this._listeners = {}
  }
  return this
}

Nanobus.prototype.listeners = function (eventName) {
  var listeners = eventName !== '*'
    ? this._listeners[eventName]
    : this._starListeners

  var ret = []
  if (listeners) {
    var ilength = listeners.length
    for (var i = 0; i < ilength; i++) ret.push(listeners[i])
  }
  return ret
}

Nanobus.prototype._emit = function (arr, eventName, data, uuid) {
  if (typeof arr === 'undefined') return
  if (arr.length === 0) return
  if (data === undefined) {
    data = eventName
    eventName = null
  }

  if (eventName) {
    if (uuid !== undefined) {
      data = [eventName].concat(data, uuid)
    } else {
      data = [eventName].concat(data)
    }
  }

  var length = arr.length
  for (var i = 0; i < length; i++) {
    var listener = arr[i]
    listener.apply(listener, data)
  }
}

},{"assert":77,"nanotiming":96,"remove-array-items":104}],79:[function(require,module,exports){
var document = require('global/document')
var nanotiming = require('nanotiming')
var morph = require('nanomorph')
var onload = require('on-load')
var OL_KEY_ID = onload.KEY_ID
var OL_ATTR_ID = onload.KEY_ATTR
var assert = require('assert')

module.exports = Nanocomponent

function makeID () {
  return 'ncid-' + Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1)
}

function Nanocomponent (name) {
  this._hasWindow = typeof window !== 'undefined'
  this._id = null // represents the id of the root node
  this._ncID = null // internal nanocomponent id
  this._olID = null
  this._proxy = null
  this._loaded = false // Used to debounce on-load when child-reordering
  this._rootNodeName = null
  this._name = name || 'nanocomponent'
  this._rerender = false

  this._handleLoad = this._handleLoad.bind(this)
  this._handleUnload = this._handleUnload.bind(this)

  this._arguments = []

  var self = this

  Object.defineProperty(this, 'element', {
    get: function () {
      var el = document.getElementById(self._id)
      if (el) return el.dataset.nanocomponent === self._ncID ? el : undefined
    }
  })
}

Nanocomponent.prototype.render = function () {
  var renderTiming = nanotiming(this._name + '.render')
  var self = this
  var args = new Array(arguments.length)
  var el
  for (var i = 0; i < arguments.length; i++) args[i] = arguments[i]
  if (!this._hasWindow) {
    var createTiming = nanotiming(this._name + '.create')
    el = this.createElement.apply(this, args)
    createTiming()
    renderTiming()
    return el
  } else if (this.element) {
    el = this.element // retain reference, as the ID might change on render
    var updateTiming = nanotiming(this._name + '.update')
    var shouldUpdate = this._rerender || this.update.apply(this, args)
    updateTiming()
    if (this._rerender) this._rerender = false
    if (shouldUpdate) {
      var desiredHtml = this._handleRender(args)
      var morphTiming = nanotiming(this._name + '.morph')
      morph(el, desiredHtml)
      morphTiming()
      if (this.afterupdate) this.afterupdate(el)
    }
    if (!this._proxy) { this._proxy = this._createProxy() }
    renderTiming()
    return this._proxy
  } else {
    this._reset()
    el = this._handleRender(args)
    if (this.beforerender) this.beforerender(el)
    if (this.load || this.unload || this.afterreorder) {
      onload(el, self._handleLoad, self._handleUnload, self._ncID)
      this._olID = el.dataset[OL_KEY_ID]
    }
    renderTiming()
    return el
  }
}

Nanocomponent.prototype.rerender = function () {
  assert(this.element, 'nanocomponent: cant rerender on an unmounted dom node')
  this._rerender = true
  this.render.apply(this, this._arguments)
}

Nanocomponent.prototype._handleRender = function (args) {
  var createElementTiming = nanotiming(this._name + '.createElement')
  var el = this.createElement.apply(this, args)
  createElementTiming()
  if (!this._rootNodeName) this._rootNodeName = el.nodeName
  assert(el instanceof window.Element, 'nanocomponent: createElement should return a single DOM node')
  assert.equal(this._rootNodeName, el.nodeName, 'nanocomponent: root node types cannot differ between re-renders')
  this._arguments = args
  return this._brandNode(this._ensureID(el))
}

Nanocomponent.prototype._createProxy = function () {
  var proxy = document.createElement(this._rootNodeName)
  var self = this
  this._brandNode(proxy)
  proxy.id = this._id
  proxy.setAttribute('data-proxy', '')
  proxy.isSameNode = function (el) {
    return (el && el.dataset.nanocomponent === self._ncID)
  }
  return proxy
}

Nanocomponent.prototype._reset = function () {
  this._ncID = makeID()
  this._olID = null
  this._id = null
  this._proxy = null
  this._rootNodeName = null
}

Nanocomponent.prototype._brandNode = function (node) {
  node.setAttribute('data-nanocomponent', this._ncID)
  if (this._olID) node.setAttribute(OL_ATTR_ID, this._olID)
  return node
}

Nanocomponent.prototype._ensureID = function (node) {
  if (node.id) this._id = node.id
  else node.id = this._id = this._ncID
  // Update proxy node ID if it changed
  if (this._proxy && this._proxy.id !== this._id) this._proxy.id = this._id
  return node
}

Nanocomponent.prototype._handleLoad = function (el) {
  if (this._loaded) {
    if (this.afterreorder) this.afterreorder(el)
    return // Debounce child-reorders
  }
  this._loaded = true
  if (this.load) this.load(el)
}

Nanocomponent.prototype._handleUnload = function (el) {
  if (this.element) return // Debounce child-reorders
  this._loaded = false
  if (this.unload) this.unload(el)
}

Nanocomponent.prototype.createElement = function () {
  throw new Error('nanocomponent: createElement should be implemented!')
}

Nanocomponent.prototype.update = function () {
  throw new Error('nanocomponent: update should be implemented!')
}

},{"assert":77,"global/document":71,"nanomorph":89,"nanotiming":96,"on-load":99}],80:[function(require,module,exports){
var assert = require('assert')

var safeExternalLink = /(noopener|noreferrer) (noopener|noreferrer)/
var protocolLink = /^[\w-_]+:/

module.exports = href

function href (cb, root) {
  assert.notEqual(typeof window, 'undefined', 'nanohref: expected window to exist')

  root = root || window.document

  assert.equal(typeof cb, 'function', 'nanohref: cb should be type function')
  assert.equal(typeof root, 'object', 'nanohref: root should be type object')

  window.addEventListener('click', function (e) {
    if ((e.button && e.button !== 0) ||
      e.ctrlKey || e.metaKey || e.altKey || e.shiftKey ||
      e.defaultPrevented) return

    var anchor = (function traverse (node) {
      if (!node || node === root) return
      if (node.localName !== 'a' || node.href === undefined) {
        return traverse(node.parentNode)
      }
      return node
    })(e.target)

    if (!anchor) return

    if (window.location.protocol !== anchor.protocol ||
        window.location.hostname !== anchor.hostname ||
        window.location.port !== anchor.port ||
      anchor.hasAttribute('data-nanohref-ignore') ||
      anchor.hasAttribute('download') ||
      (anchor.getAttribute('target') === '_blank' &&
        safeExternalLink.test(anchor.getAttribute('rel'))) ||
      protocolLink.test(anchor.getAttribute('href'))) return

    e.preventDefault()
    cb(anchor)
  })
}

},{"assert":77}],81:[function(require,module,exports){
'use strict'

var trailingNewlineRegex = /\n[\s]+$/
var leadingNewlineRegex = /^\n[\s]+/
var trailingSpaceRegex = /[\s]+$/
var leadingSpaceRegex = /^[\s]+/
var multiSpaceRegex = /[\n\s]+/g

var TEXT_TAGS = [
  'a', 'abbr', 'b', 'bdi', 'bdo', 'br', 'cite', 'data', 'dfn', 'em', 'i',
  'kbd', 'mark', 'q', 'rp', 'rt', 'rtc', 'ruby', 's', 'amp', 'small', 'span',
  'strong', 'sub', 'sup', 'time', 'u', 'var', 'wbr'
]

var VERBATIM_TAGS = [
  'code', 'pre', 'textarea'
]

module.exports = function appendChild (el, childs) {
  if (!Array.isArray(childs)) return

  var nodeName = el.nodeName.toLowerCase()

  var hadText = false
  var value, leader

  for (var i = 0, len = childs.length; i < len; i++) {
    var node = childs[i]
    if (Array.isArray(node)) {
      appendChild(el, node)
      continue
    }

    if (typeof node === 'number' ||
      typeof node === 'boolean' ||
      typeof node === 'function' ||
      node instanceof Date ||
      node instanceof RegExp) {
      node = node.toString()
    }

    var lastChild = el.childNodes[el.childNodes.length - 1]

    // Iterate over text nodes
    if (typeof node === 'string') {
      hadText = true

      // If we already had text, append to the existing text
      if (lastChild && lastChild.nodeName === '#text') {
        lastChild.nodeValue += node

      // We didn't have a text node yet, create one
      } else {
        node = el.ownerDocument.createTextNode(node)
        el.appendChild(node)
        lastChild = node
      }

      // If this is the last of the child nodes, make sure we close it out
      // right
      if (i === len - 1) {
        hadText = false
        // Trim the child text nodes if the current node isn't a
        // node where whitespace matters.
        if (TEXT_TAGS.indexOf(nodeName) === -1 &&
          VERBATIM_TAGS.indexOf(nodeName) === -1) {
          value = lastChild.nodeValue
            .replace(leadingNewlineRegex, '')
            .replace(trailingSpaceRegex, '')
            .replace(trailingNewlineRegex, '')
            .replace(multiSpaceRegex, ' ')
          if (value === '') {
            el.removeChild(lastChild)
          } else {
            lastChild.nodeValue = value
          }
        } else if (VERBATIM_TAGS.indexOf(nodeName) === -1) {
          // The very first node in the list should not have leading
          // whitespace. Sibling text nodes should have whitespace if there
          // was any.
          leader = i === 0 ? '' : ' '
          value = lastChild.nodeValue
            .replace(leadingNewlineRegex, leader)
            .replace(leadingSpaceRegex, ' ')
            .replace(trailingSpaceRegex, '')
            .replace(trailingNewlineRegex, '')
            .replace(multiSpaceRegex, ' ')
          lastChild.nodeValue = value
        }
      }

    // Iterate over DOM nodes
    } else if (node && node.nodeType) {
      // If the last node was a text node, make sure it is properly closed out
      if (hadText) {
        hadText = false

        // Trim the child text nodes if the current node isn't a
        // text node or a code node
        if (TEXT_TAGS.indexOf(nodeName) === -1 &&
          VERBATIM_TAGS.indexOf(nodeName) === -1) {
          value = lastChild.nodeValue
            .replace(leadingNewlineRegex, '')
            .replace(trailingNewlineRegex, ' ')
            .replace(multiSpaceRegex, ' ')

          // Remove empty text nodes, append otherwise
          if (value === '') {
            el.removeChild(lastChild)
          } else {
            lastChild.nodeValue = value
          }
        // Trim the child nodes but preserve the appropriate whitespace
        } else if (VERBATIM_TAGS.indexOf(nodeName) === -1) {
          value = lastChild.nodeValue
            .replace(leadingSpaceRegex, ' ')
            .replace(leadingNewlineRegex, '')
            .replace(trailingNewlineRegex, ' ')
            .replace(multiSpaceRegex, ' ')
          lastChild.nodeValue = value
        }
      }

      // Store the last nodename
      var _nodeName = node.nodeName
      if (_nodeName) nodeName = _nodeName.toLowerCase()

      // Append the node to the DOM
      el.appendChild(node)
    }
  }
}

},{}],82:[function(require,module,exports){
'use strict'

module.exports = [
  'async', 'autofocus', 'autoplay', 'checked', 'controls', 'default',
  'defaultchecked', 'defer', 'disabled', 'formnovalidate', 'hidden',
  'ismap', 'loop', 'multiple', 'muted', 'novalidate', 'open', 'playsinline',
  'readonly', 'required', 'reversed', 'selected'
]

},{}],83:[function(require,module,exports){
module.exports = require('./dom')(document)

},{"./dom":85}],84:[function(require,module,exports){
'use strict'

module.exports = [
  'indeterminate'
]

},{}],85:[function(require,module,exports){
'use strict'

var hyperx = require('hyperx')
var appendChild = require('./append-child')
var SVG_TAGS = require('./svg-tags')
var BOOL_PROPS = require('./bool-props')
// Props that need to be set directly rather than with el.setAttribute()
var DIRECT_PROPS = require('./direct-props')

var SVGNS = 'http://www.w3.org/2000/svg'
var XLINKNS = 'http://www.w3.org/1999/xlink'

var COMMENT_TAG = '!--'

module.exports = function (document) {
  function nanoHtmlCreateElement (tag, props, children) {
    var el

    // If an svg tag, it needs a namespace
    if (SVG_TAGS.indexOf(tag) !== -1) {
      props.namespace = SVGNS
    }

    // If we are using a namespace
    var ns = false
    if (props.namespace) {
      ns = props.namespace
      delete props.namespace
    }

    // If we are extending a builtin element
    var isCustomElement = false
    if (props.is) {
      isCustomElement = props.is
      delete props.is
    }

    // Create the element
    if (ns) {
      if (isCustomElement) {
        el = document.createElementNS(ns, tag, { is: isCustomElement })
      } else {
        el = document.createElementNS(ns, tag)
      }
    } else if (tag === COMMENT_TAG) {
      return document.createComment(props.comment)
    } else if (isCustomElement) {
      el = document.createElement(tag, { is: isCustomElement })
    } else {
      el = document.createElement(tag)
    }

    // Create the properties
    for (var p in props) {
      if (props.hasOwnProperty(p)) {
        var key = p.toLowerCase()
        var val = props[p]
        // Normalize className
        if (key === 'classname') {
          key = 'class'
          p = 'class'
        }
        // The for attribute gets transformed to htmlFor, but we just set as for
        if (p === 'htmlFor') {
          p = 'for'
        }
        // If a property is boolean, set itself to the key
        if (BOOL_PROPS.indexOf(key) !== -1) {
          if (String(val) === 'true') val = key
          else if (String(val) === 'false') continue
        }
        // If a property prefers being set directly vs setAttribute
        if (key.slice(0, 2) === 'on' || DIRECT_PROPS.indexOf(key) !== -1) {
          el[p] = val
        } else {
          if (ns) {
            if (p === 'xlink:href') {
              el.setAttributeNS(XLINKNS, p, val)
            } else if (/^xmlns($|:)/i.test(p)) {
              // skip xmlns definitions
            } else {
              el.setAttributeNS(null, p, val)
            }
          } else {
            el.setAttribute(p, val)
          }
        }
      }
    }

    appendChild(el, children)
    return el
  }

  function createFragment (nodes) {
    var fragment = document.createDocumentFragment()
    for (var i = 0; i < nodes.length; i++) {
      if (nodes[i] == null) continue
      if (Array.isArray(nodes[i])) {
        fragment.appendChild(createFragment(nodes[i]))
      } else {
        if (typeof nodes[i] === 'string') nodes[i] = document.createTextNode(nodes[i])
        fragment.appendChild(nodes[i])
      }
    }
    return fragment
  }

  var exports = hyperx(nanoHtmlCreateElement, {
    comments: true,
    createFragment: createFragment
  })
  exports.default = exports
  exports.createComment = nanoHtmlCreateElement
  return exports
}

},{"./append-child":81,"./bool-props":82,"./direct-props":84,"./svg-tags":86,"hyperx":74}],86:[function(require,module,exports){
'use strict'

module.exports = [
  'svg', 'altGlyph', 'altGlyphDef', 'altGlyphItem', 'animate', 'animateColor',
  'animateMotion', 'animateTransform', 'circle', 'clipPath', 'color-profile',
  'cursor', 'defs', 'desc', 'ellipse', 'feBlend', 'feColorMatrix',
  'feComponentTransfer', 'feComposite', 'feConvolveMatrix',
  'feDiffuseLighting', 'feDisplacementMap', 'feDistantLight', 'feFlood',
  'feFuncA', 'feFuncB', 'feFuncG', 'feFuncR', 'feGaussianBlur', 'feImage',
  'feMerge', 'feMergeNode', 'feMorphology', 'feOffset', 'fePointLight',
  'feSpecularLighting', 'feSpotLight', 'feTile', 'feTurbulence', 'filter',
  'font', 'font-face', 'font-face-format', 'font-face-name', 'font-face-src',
  'font-face-uri', 'foreignObject', 'g', 'glyph', 'glyphRef', 'hkern', 'image',
  'line', 'linearGradient', 'marker', 'mask', 'metadata', 'missing-glyph',
  'mpath', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect',
  'set', 'stop', 'switch', 'symbol', 'text', 'textPath', 'title', 'tref',
  'tspan', 'use', 'view', 'vkern'
]

},{}],87:[function(require,module,exports){
var assert = require('assert')

var emojis = {
  trace: '🔍',
  debug: '🐛',
  info: '✨',
  warn: '⚠️',
  error: '🚨',
  fatal: '💀'
}

var levels = {
  trace: 10,
  debug: 20,
  info: 30,
  warn: 40,
  error: 50,
  fatal: 60
}

var defaultColors = {
  foreground: '#d3c0c8',
  background: '#2d2d2d',
  black: '#2d2d2d',
  red: '#f2777a',
  green: '#99cc99',
  yellow: '#ffcc66',
  blue: '#6699cc',
  magenta: '#cc99cc',
  cyan: '#66cccc',
  white: '#d3d0c8',
  brightBlack: '#747369'
}

module.exports = Nanologger

function Nanologger (name, opts) {
  opts = opts || {}
  if (!(this instanceof Nanologger)) return new Nanologger(name, opts)

  assert.equal(typeof opts, 'object', 'nanologger: opts should be type object')

  this._name = name || ''
  this._colors = Object.assign({}, defaultColors, opts.colors || {})

  try {
    this.logLevel = window.localStorage.getItem('logLevel') || 'info'
  } catch (e) {
    this.logLevel = 'info'
  }

  this._logLevel = levels[this.logLevel]
}

Nanologger.prototype.trace = function () {
  var args = [ 'trace' ]
  for (var i = 0, len = arguments.length; i < len; i++) args.push(arguments[i])
  this._print.apply(this, args)
}

Nanologger.prototype.debug = function () {
  var args = [ 'debug' ]
  for (var i = 0, len = arguments.length; i < len; i++) args.push(arguments[i])
  this._print.apply(this, args)
}

Nanologger.prototype.info = function () {
  var args = [ 'info' ]
  for (var i = 0, len = arguments.length; i < len; i++) args.push(arguments[i])
  this._print.apply(this, args)
}

Nanologger.prototype.warn = function () {
  var args = [ 'warn' ]
  for (var i = 0, len = arguments.length; i < len; i++) args.push(arguments[i])
  this._print.apply(this, args)
}

Nanologger.prototype.error = function () {
  var args = [ 'error' ]
  for (var i = 0, len = arguments.length; i < len; i++) args.push(arguments[i])
  this._print.apply(this, args)
}

Nanologger.prototype.fatal = function () {
  var args = [ 'fatal' ]
  for (var i = 0, len = arguments.length; i < len; i++) args.push(arguments[i])
  this._print.apply(this, args)
}

Nanologger.prototype._print = function (level) {
  if (levels[level] < this._logLevel) return

  var time = getTimeStamp()
  var emoji = emojis[level]
  var name = this._name || 'unknown'

  var msgColor = (level === 'error' || level.fatal)
    ? this._colors.red
    : level === 'warn'
      ? this._colors.yellow
      : this._colors.green

  var objs = []
  var args = [ null ]
  var msg = '%c%s ' + emoji + ' %c%s'

  args.push(color(this._colors.brightBlack), time)
  args.push(color(this._colors.magenta), name)

  for (var i = 1, len = arguments.length; i < len; i++) {
    var arg = arguments[i]
    if (typeof arg === 'string') {
      if (i === 1) {
        // first string argument is in color
        msg += ' %c%s'
        args.push(color(msgColor))
        args.push(arg)
      } else if (/ms$/.test(arg)) {
        // arguments finishing with 'ms', grey out
        msg += ' %c%s'
        args.push(color(this._colors.brightBlack))
        args.push(arg)
      } else {
        // normal colors
        msg += ' %c%s'
        args.push(color(this._colors.white))
        args.push(arg)
      }
    } else if (typeof arg === 'number') {
      msg += ' %c%d'
      args.push(color(this._colors.magenta))
      args.push(arg)
    } else {
      objs.push(arg)
    }
  }

  args[0] = msg
  objs.forEach(function (obj) {
    args.push(obj)
  })

  // In IE/Edge console functions don't inherit from Function.prototype
  // so this is necessary to get all the args applied.
  Function.prototype.apply.apply(console.log, [console, args])
}

function color (color) {
  return 'color: ' + color + ';'
}

function getTimeStamp () {
  var date = new Date()
  var hours = pad(date.getHours().toString())
  var minutes = pad(date.getMinutes().toString())
  var seconds = pad(date.getSeconds().toString())
  return hours + ':' + minutes + ':' + seconds
}

function pad (str) {
  return str.length !== 2 ? 0 + str : str
}

},{"assert":13}],88:[function(require,module,exports){
module.exports = LRU

function LRU (opts) {
  if (!(this instanceof LRU)) return new LRU(opts)
  if (typeof opts === 'number') opts = {max: opts}
  if (!opts) opts = {}
  this.cache = {}
  this.head = this.tail = null
  this.length = 0
  this.max = opts.max || 1000
  this.maxAge = opts.maxAge || 0
}

Object.defineProperty(LRU.prototype, 'keys', {
  get: function () { return Object.keys(this.cache) }
})

LRU.prototype.clear = function () {
  this.cache = {}
  this.head = this.tail = null
  this.length = 0
}

LRU.prototype.remove = function (key) {
  if (typeof key !== 'string') key = '' + key
  if (!this.cache.hasOwnProperty(key)) return

  var element = this.cache[key]
  delete this.cache[key]
  this._unlink(key, element.prev, element.next)
  return element.value
}

LRU.prototype._unlink = function (key, prev, next) {
  this.length--

  if (this.length === 0) {
    this.head = this.tail = null
  } else {
    if (this.head === key) {
      this.head = prev
      this.cache[this.head].next = null
    } else if (this.tail === key) {
      this.tail = next
      this.cache[this.tail].prev = null
    } else {
      this.cache[prev].next = next
      this.cache[next].prev = prev
    }
  }
}

LRU.prototype.peek = function (key) {
  if (!this.cache.hasOwnProperty(key)) return

  var element = this.cache[key]

  if (!this._checkAge(key, element)) return
  return element.value
}

LRU.prototype.set = function (key, value) {
  if (typeof key !== 'string') key = '' + key

  var element

  if (this.cache.hasOwnProperty(key)) {
    element = this.cache[key]
    element.value = value
    if (this.maxAge) element.modified = Date.now()

    // If it's already the head, there's nothing more to do:
    if (key === this.head) return value
    this._unlink(key, element.prev, element.next)
  } else {
    element = {value: value, modified: 0, next: null, prev: null}
    if (this.maxAge) element.modified = Date.now()
    this.cache[key] = element

    // Eviction is only possible if the key didn't already exist:
    if (this.length === this.max) this.evict()
  }

  this.length++
  element.next = null
  element.prev = this.head

  if (this.head) this.cache[this.head].next = key
  this.head = key

  if (!this.tail) this.tail = key
  return value
}

LRU.prototype._checkAge = function (key, element) {
  if (this.maxAge && (Date.now() - element.modified) > this.maxAge) {
    this.remove(key)
    return false
  }
  return true
}

LRU.prototype.get = function (key) {
  if (typeof key !== 'string') key = '' + key
  if (!this.cache.hasOwnProperty(key)) return

  var element = this.cache[key]

  if (!this._checkAge(key, element)) return

  if (this.head !== key) {
    if (key === this.tail) {
      this.tail = element.next
      this.cache[this.tail].prev = null
    } else {
      // Set prev.next -> element.next:
      this.cache[element.prev].next = element.next
    }

    // Set element.next.prev -> element.prev:
    this.cache[element.next].prev = element.prev

    // Element is the new head
    this.cache[this.head].next = key
    element.prev = this.head
    element.next = null
    this.head = key
  }

  return element.value
}

LRU.prototype.evict = function () {
  if (!this.tail) return
  this.remove(this.tail)
}

},{}],89:[function(require,module,exports){
var assert = require('nanoassert')
var morph = require('./lib/morph')

var TEXT_NODE = 3
// var DEBUG = false

module.exports = nanomorph

// Morph one tree into another tree
//
// no parent
//   -> same: diff and walk children
//   -> not same: replace and return
// old node doesn't exist
//   -> insert new node
// new node doesn't exist
//   -> delete old node
// nodes are not the same
//   -> diff nodes and apply patch to old node
// nodes are the same
//   -> walk all child nodes and append to old node
function nanomorph (oldTree, newTree, options) {
  // if (DEBUG) {
  //   console.log(
  //   'nanomorph\nold\n  %s\nnew\n  %s',
  //   oldTree && oldTree.outerHTML,
  //   newTree && newTree.outerHTML
  // )
  // }
  assert.equal(typeof oldTree, 'object', 'nanomorph: oldTree should be an object')
  assert.equal(typeof newTree, 'object', 'nanomorph: newTree should be an object')

  if (options && options.childrenOnly) {
    updateChildren(newTree, oldTree)
    return oldTree
  }

  assert.notEqual(
    newTree.nodeType,
    11,
    'nanomorph: newTree should have one root node (which is not a DocumentFragment)'
  )

  return walk(newTree, oldTree)
}

// Walk and morph a dom tree
function walk (newNode, oldNode) {
  // if (DEBUG) {
  //   console.log(
  //   'walk\nold\n  %s\nnew\n  %s',
  //   oldNode && oldNode.outerHTML,
  //   newNode && newNode.outerHTML
  // )
  // }
  if (!oldNode) {
    return newNode
  } else if (!newNode) {
    return null
  } else if (newNode.isSameNode && newNode.isSameNode(oldNode)) {
    return oldNode
  } else if (newNode.tagName !== oldNode.tagName || getComponentId(newNode) !== getComponentId(oldNode)) {
    return newNode
  } else {
    morph(newNode, oldNode)
    updateChildren(newNode, oldNode)
    return oldNode
  }
}

function getComponentId (node) {
  return node.dataset ? node.dataset.nanomorphComponentId : undefined
}

// Update the children of elements
// (obj, obj) -> null
function updateChildren (newNode, oldNode) {
  // if (DEBUG) {
  //   console.log(
  //   'updateChildren\nold\n  %s\nnew\n  %s',
  //   oldNode && oldNode.outerHTML,
  //   newNode && newNode.outerHTML
  // )
  // }
  var oldChild, newChild, morphed, oldMatch

  // The offset is only ever increased, and used for [i - offset] in the loop
  var offset = 0

  for (var i = 0; ; i++) {
    oldChild = oldNode.childNodes[i]
    newChild = newNode.childNodes[i - offset]
    // if (DEBUG) {
    //   console.log(
    //   '===\n- old\n  %s\n- new\n  %s',
    //   oldChild && oldChild.outerHTML,
    //   newChild && newChild.outerHTML
    // )
    // }
    // Both nodes are empty, do nothing
    if (!oldChild && !newChild) {
      break

    // There is no new child, remove old
    } else if (!newChild) {
      oldNode.removeChild(oldChild)
      i--

    // There is no old child, add new
    } else if (!oldChild) {
      oldNode.appendChild(newChild)
      offset++

    // Both nodes are the same, morph
    } else if (same(newChild, oldChild)) {
      morphed = walk(newChild, oldChild)
      if (morphed !== oldChild) {
        oldNode.replaceChild(morphed, oldChild)
        offset++
      }

    // Both nodes do not share an ID or a placeholder, try reorder
    } else {
      oldMatch = null

      // Try and find a similar node somewhere in the tree
      for (var j = i; j < oldNode.childNodes.length; j++) {
        if (same(oldNode.childNodes[j], newChild)) {
          oldMatch = oldNode.childNodes[j]
          break
        }
      }

      // If there was a node with the same ID or placeholder in the old list
      if (oldMatch) {
        morphed = walk(newChild, oldMatch)
        if (morphed !== oldMatch) offset++
        oldNode.insertBefore(morphed, oldChild)

      // It's safe to morph two nodes in-place if neither has an ID
      } else if (!newChild.id && !oldChild.id) {
        morphed = walk(newChild, oldChild)
        if (morphed !== oldChild) {
          oldNode.replaceChild(morphed, oldChild)
          offset++
        }

      // Insert the node at the index if we couldn't morph or find a matching node
      } else {
        oldNode.insertBefore(newChild, oldChild)
        offset++
      }
    }
  }
}

function same (a, b) {
  if (a.id) return a.id === b.id
  if (a.isSameNode) return a.isSameNode(b)
  if (a.tagName !== b.tagName) return false
  if (a.type === TEXT_NODE) return a.nodeValue === b.nodeValue
  return false
}

},{"./lib/morph":91,"nanoassert":77}],90:[function(require,module,exports){
module.exports = [
  // attribute events (can be set with attributes)
  'onclick',
  'ondblclick',
  'onmousedown',
  'onmouseup',
  'onmouseover',
  'onmousemove',
  'onmouseout',
  'onmouseenter',
  'onmouseleave',
  'ontouchcancel',
  'ontouchend',
  'ontouchmove',
  'ontouchstart',
  'ondragstart',
  'ondrag',
  'ondragenter',
  'ondragleave',
  'ondragover',
  'ondrop',
  'ondragend',
  'onkeydown',
  'onkeypress',
  'onkeyup',
  'onunload',
  'onabort',
  'onerror',
  'onresize',
  'onscroll',
  'onselect',
  'onchange',
  'onsubmit',
  'onreset',
  'onfocus',
  'onblur',
  'oninput',
  // other common events
  'oncontextmenu',
  'onfocusin',
  'onfocusout'
]

},{}],91:[function(require,module,exports){
var events = require('./events')
var eventsLength = events.length

var ELEMENT_NODE = 1
var TEXT_NODE = 3
var COMMENT_NODE = 8

module.exports = morph

// diff elements and apply the resulting patch to the old node
// (obj, obj) -> null
function morph (newNode, oldNode) {
  var nodeType = newNode.nodeType
  var nodeName = newNode.nodeName

  if (nodeType === ELEMENT_NODE) {
    copyAttrs(newNode, oldNode)
  }

  if (nodeType === TEXT_NODE || nodeType === COMMENT_NODE) {
    if (oldNode.nodeValue !== newNode.nodeValue) {
      oldNode.nodeValue = newNode.nodeValue
    }
  }

  // Some DOM nodes are weird
  // https://github.com/patrick-steele-idem/morphdom/blob/master/src/specialElHandlers.js
  if (nodeName === 'INPUT') updateInput(newNode, oldNode)
  else if (nodeName === 'OPTION') updateOption(newNode, oldNode)
  else if (nodeName === 'TEXTAREA') updateTextarea(newNode, oldNode)

  copyEvents(newNode, oldNode)
}

function copyAttrs (newNode, oldNode) {
  var oldAttrs = oldNode.attributes
  var newAttrs = newNode.attributes
  var attrNamespaceURI = null
  var attrValue = null
  var fromValue = null
  var attrName = null
  var attr = null

  for (var i = newAttrs.length - 1; i >= 0; --i) {
    attr = newAttrs[i]
    attrName = attr.name
    attrNamespaceURI = attr.namespaceURI
    attrValue = attr.value
    if (attrNamespaceURI) {
      attrName = attr.localName || attrName
      fromValue = oldNode.getAttributeNS(attrNamespaceURI, attrName)
      if (fromValue !== attrValue) {
        oldNode.setAttributeNS(attrNamespaceURI, attrName, attrValue)
      }
    } else {
      if (!oldNode.hasAttribute(attrName)) {
        oldNode.setAttribute(attrName, attrValue)
      } else {
        fromValue = oldNode.getAttribute(attrName)
        if (fromValue !== attrValue) {
          // apparently values are always cast to strings, ah well
          if (attrValue === 'null' || attrValue === 'undefined') {
            oldNode.removeAttribute(attrName)
          } else {
            oldNode.setAttribute(attrName, attrValue)
          }
        }
      }
    }
  }

  // Remove any extra attributes found on the original DOM element that
  // weren't found on the target element.
  for (var j = oldAttrs.length - 1; j >= 0; --j) {
    attr = oldAttrs[j]
    if (attr.specified !== false) {
      attrName = attr.name
      attrNamespaceURI = attr.namespaceURI

      if (attrNamespaceURI) {
        attrName = attr.localName || attrName
        if (!newNode.hasAttributeNS(attrNamespaceURI, attrName)) {
          oldNode.removeAttributeNS(attrNamespaceURI, attrName)
        }
      } else {
        if (!newNode.hasAttributeNS(null, attrName)) {
          oldNode.removeAttribute(attrName)
        }
      }
    }
  }
}

function copyEvents (newNode, oldNode) {
  for (var i = 0; i < eventsLength; i++) {
    var ev = events[i]
    if (newNode[ev]) {           // if new element has a whitelisted attribute
      oldNode[ev] = newNode[ev]  // update existing element
    } else if (oldNode[ev]) {    // if existing element has it and new one doesnt
      oldNode[ev] = undefined    // remove it from existing element
    }
  }
}

function updateOption (newNode, oldNode) {
  updateAttribute(newNode, oldNode, 'selected')
}

// The "value" attribute is special for the <input> element since it sets the
// initial value. Changing the "value" attribute without changing the "value"
// property will have no effect since it is only used to the set the initial
// value. Similar for the "checked" attribute, and "disabled".
function updateInput (newNode, oldNode) {
  var newValue = newNode.value
  var oldValue = oldNode.value

  updateAttribute(newNode, oldNode, 'checked')
  updateAttribute(newNode, oldNode, 'disabled')

  // The "indeterminate" property can not be set using an HTML attribute.
  // See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox
  if (newNode.indeterminate !== oldNode.indeterminate) {
    oldNode.indeterminate = newNode.indeterminate
  }

  // Persist file value since file inputs can't be changed programatically
  if (oldNode.type === 'file') return

  if (newValue !== oldValue) {
    oldNode.setAttribute('value', newValue)
    oldNode.value = newValue
  }

  if (newValue === 'null') {
    oldNode.value = ''
    oldNode.removeAttribute('value')
  }

  if (!newNode.hasAttributeNS(null, 'value')) {
    oldNode.removeAttribute('value')
  } else if (oldNode.type === 'range') {
    // this is so elements like slider move their UI thingy
    oldNode.value = newValue
  }
}

function updateTextarea (newNode, oldNode) {
  var newValue = newNode.value
  if (newValue !== oldNode.value) {
    oldNode.value = newValue
  }

  if (oldNode.firstChild && oldNode.firstChild.nodeValue !== newValue) {
    // Needed for IE. Apparently IE sets the placeholder as the
    // node value and vise versa. This ignores an empty update.
    if (newValue === '' && oldNode.firstChild.nodeValue === oldNode.placeholder) {
      return
    }

    oldNode.firstChild.nodeValue = newValue
  }
}

function updateAttribute (newNode, oldNode, name) {
  if (newNode[name] !== oldNode[name]) {
    oldNode[name] = newNode[name]
    if (newNode[name]) {
      oldNode.setAttribute(name, '')
    } else {
      oldNode.removeAttribute(name)
    }
  }
}

},{"./events":90}],92:[function(require,module,exports){
var reg = /([^?=&]+)(=([^&]*))?/g
var assert = require('assert')

module.exports = qs

function qs (url) {
  assert.equal(typeof url, 'string', 'nanoquery: url should be type string')

  var obj = {}
  url.replace(/^.*\?/, '').replace(reg, function (a0, a1, a2, a3) {
    var value = decodeURIComponent(a3)
    var key = decodeURIComponent(a1)
    if (obj.hasOwnProperty(key)) {
      if (Array.isArray(obj[key])) obj[key].push(value)
      else obj[key] = [obj[key], value]
    } else {
      obj[key] = value
    }
  })

  return obj
}

},{"assert":77}],93:[function(require,module,exports){
'use strict'

var assert = require('assert')

module.exports = nanoraf

// Only call RAF when needed
// (fn, fn?) -> fn
function nanoraf (render, raf) {
  assert.equal(typeof render, 'function', 'nanoraf: render should be a function')
  assert.ok(typeof raf === 'function' || typeof raf === 'undefined', 'nanoraf: raf should be a function or undefined')

  if (!raf) raf = window.requestAnimationFrame
  var redrawScheduled = false
  var args = null

  return function frame () {
    if (args === null && !redrawScheduled) {
      redrawScheduled = true

      raf(function redraw () {
        redrawScheduled = false

        var length = args.length
        var _args = new Array(length)
        for (var i = 0; i < length; i++) _args[i] = args[i]

        render.apply(render, _args)
        args = null
      })
    }

    args = arguments
  }
}

},{"assert":77}],94:[function(require,module,exports){
var assert = require('assert')
var wayfarer = require('wayfarer')

// electron support
var isLocalFile = (/file:\/\//.test(
  typeof window === 'object' &&
  window.location &&
  window.location.origin
))

/* eslint-disable no-useless-escape */
var electron = '^(file:\/\/|\/)(.*\.html?\/?)?'
var protocol = '^(http(s)?(:\/\/))?(www\.)?'
var domain = '[a-zA-Z0-9-_\.]+(:[0-9]{1,5})?(\/{1})?'
var qs = '[\?].*$'
/* eslint-enable no-useless-escape */

var stripElectron = new RegExp(electron)
var prefix = new RegExp(protocol + domain)
var normalize = new RegExp('#')
var suffix = new RegExp(qs)

module.exports = Nanorouter

function Nanorouter (opts) {
  if (!(this instanceof Nanorouter)) return new Nanorouter(opts)
  opts = opts || {}
  this.router = wayfarer(opts.default || '/404')
}

Nanorouter.prototype.on = function (routename, listener) {
  assert.equal(typeof routename, 'string')
  routename = routename.replace(/^[#/]/, '')
  this.router.on(routename, listener)
}

Nanorouter.prototype.emit = function (routename) {
  assert.equal(typeof routename, 'string')
  routename = pathname(routename, isLocalFile)
  return this.router.emit(routename)
}

Nanorouter.prototype.match = function (routename) {
  assert.equal(typeof routename, 'string')
  routename = pathname(routename, isLocalFile)
  return this.router.match(routename)
}

// replace everything in a route but the pathname and hash
function pathname (routename, isElectron) {
  if (isElectron) routename = routename.replace(stripElectron, '')
  else routename = routename.replace(prefix, '')
  return decodeURI(routename.replace(suffix, '').replace(normalize, '/'))
}

},{"assert":77,"wayfarer":108}],95:[function(require,module,exports){
var assert = require('assert')

var hasWindow = typeof window !== 'undefined'

function createScheduler () {
  var scheduler
  if (hasWindow) {
    if (!window._nanoScheduler) window._nanoScheduler = new NanoScheduler(true)
    scheduler = window._nanoScheduler
  } else {
    scheduler = new NanoScheduler()
  }
  return scheduler
}

function NanoScheduler (hasWindow) {
  this.hasWindow = hasWindow
  this.hasIdle = this.hasWindow && window.requestIdleCallback
  this.method = this.hasIdle ? window.requestIdleCallback.bind(window) : this.setTimeout
  this.scheduled = false
  this.queue = []
}

NanoScheduler.prototype.push = function (cb) {
  assert.equal(typeof cb, 'function', 'nanoscheduler.push: cb should be type function')

  this.queue.push(cb)
  this.schedule()
}

NanoScheduler.prototype.schedule = function () {
  if (this.scheduled) return

  this.scheduled = true
  var self = this
  this.method(function (idleDeadline) {
    var cb
    while (self.queue.length && idleDeadline.timeRemaining() > 0) {
      cb = self.queue.shift()
      cb(idleDeadline)
    }
    self.scheduled = false
    if (self.queue.length) self.schedule()
  })
}

NanoScheduler.prototype.setTimeout = function (cb) {
  setTimeout(cb, 0, {
    timeRemaining: function () {
      return 1
    }
  })
}

module.exports = createScheduler

},{"assert":77}],96:[function(require,module,exports){
var scheduler = require('nanoscheduler')()
var assert = require('assert')

var perf
nanotiming.disabled = true
try {
  perf = window.performance
  nanotiming.disabled = window.localStorage.DISABLE_NANOTIMING === 'true' || !perf.mark
} catch (e) { }

module.exports = nanotiming

function nanotiming (name) {
  assert.equal(typeof name, 'string', 'nanotiming: name should be type string')

  if (nanotiming.disabled) return noop

  var uuid = (perf.now() * 10000).toFixed() % Number.MAX_SAFE_INTEGER
  var startName = 'start-' + uuid + '-' + name
  perf.mark(startName)

  function end (cb) {
    var endName = 'end-' + uuid + '-' + name
    perf.mark(endName)

    scheduler.push(function () {
      var err = null
      try {
        var measureName = name + ' [' + uuid + ']'
        perf.measure(measureName, startName, endName)
        perf.clearMarks(startName)
        perf.clearMarks(endName)
      } catch (e) { err = e }
      if (cb) cb(err, name)
    })
  }

  end.uuid = uuid
  return end
}

function noop (cb) {
  if (cb) {
    scheduler.push(function () {
      cb(new Error('nanotiming: performance API unavailable'))
    })
  }
}

},{"assert":77,"nanoscheduler":95}],97:[function(require,module,exports){
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

'use strict';
/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

},{}],98:[function(require,module,exports){
var assert = require('assert')

module.exports = objectChangeCallsite

function objectChangeCallsite (target, callback) {
  assert.equal(typeof target, 'object', 'object-change-callsite: target should be type object')
  assert.equal(typeof callback, 'function', 'object-change-callsite: callback should be type function')

  return new Proxy(target, {
    set: function (obj, prop, value) {
      var err = new Error()
      var trace = strip(err.stack)
      callback(prop, value, trace)
      obj[prop] = value
      return true
    },
    deleteProperty: function (target, prop) {
      var err = new Error()
      var trace = strip(err.stack)
      callback(prop, undefined, trace)
      if (prop in target) {
        delete target[prop]
        return true
      }
      return false
    }
  })
}

function strip (str) {
  var arr = str.split('\n')
  arr = arr.length > 2 ? arr.slice(2) : arr
  arr[0] = arr[0].replace(/^ {4}at /, '')
  return '\n' + arr.join('\n')
}

},{"assert":13}],99:[function(require,module,exports){
/* global MutationObserver */
var document = require('global/document')
var window = require('global/window')
var assert = require('assert')
var watch = Object.create(null)
var KEY_ID = 'onloadid' + (new Date() % 9e6).toString(36)
var KEY_ATTR = 'data-' + KEY_ID
var INDEX = 0

if (window && window.MutationObserver) {
  var observer = new MutationObserver(function (mutations) {
    if (Object.keys(watch).length < 1) return
    for (var i = 0; i < mutations.length; i++) {
      if (mutations[i].attributeName === KEY_ATTR) {
        eachAttr(mutations[i], turnon, turnoff)
        continue
      }
      eachMutation(mutations[i].removedNodes, turnoff)
      eachMutation(mutations[i].addedNodes, turnon)
    }
  })
  if (document.body) {
    beginObserve(observer)
  } else {
    document.addEventListener('DOMContentLoaded', function (event) {
      beginObserve(observer)
    })
  }
}

function beginObserve (observer) {
  observer.observe(document.documentElement, {
    childList: true,
    subtree: true,
    attributes: true,
    attributeOldValue: true,
    attributeFilter: [KEY_ATTR]
  })
}

module.exports = function onload (el, on, off, caller) {
  assert(document.body, 'on-load: will not work prior to DOMContentLoaded')
  on = on || function () {}
  off = off || function () {}
  el.setAttribute(KEY_ATTR, 'o' + INDEX)
  watch['o' + INDEX] = [on, off, 0, caller || onload.caller]
  INDEX += 1
  return el
}

module.exports.KEY_ATTR = KEY_ATTR
module.exports.KEY_ID = KEY_ID

function turnon (index, el) {
  if (watch[index][0] && watch[index][2] === 0) {
    watch[index][0](el)
    watch[index][2] = 1
  }
}

function turnoff (index, el) {
  if (watch[index][1] && watch[index][2] === 1) {
    watch[index][1](el)
    watch[index][2] = 0
  }
}

function eachAttr (mutation, on, off) {
  var newValue = mutation.target.getAttribute(KEY_ATTR)
  if (sameOrigin(mutation.oldValue, newValue)) {
    watch[newValue] = watch[mutation.oldValue]
    return
  }
  if (watch[mutation.oldValue]) {
    off(mutation.oldValue, mutation.target)
  }
  if (watch[newValue]) {
    on(newValue, mutation.target)
  }
}

function sameOrigin (oldValue, newValue) {
  if (!oldValue || !newValue) return false
  return watch[oldValue][3] === watch[newValue][3]
}

function eachMutation (nodes, fn) {
  var keys = Object.keys(watch)
  for (var i = 0; i < nodes.length; i++) {
    if (nodes[i] && nodes[i].getAttribute && nodes[i].getAttribute(KEY_ATTR)) {
      var onloadid = nodes[i].getAttribute(KEY_ATTR)
      keys.forEach(function (k) {
        if (onloadid === k) {
          fn(k, nodes[i])
        }
      })
    }
    if (nodes[i].childNodes.length > 0) {
      eachMutation(nodes[i].childNodes, fn)
    }
  }
}

},{"assert":77,"global/document":71,"global/window":72}],100:[function(require,module,exports){
var scheduler = require('nanoscheduler')()
var assert = require('assert')

var entryTypes = [
  'frame',
  'measure',
  'navigation',
  'resource',
  'longtask'
]

module.exports = onPerformance

function onPerformance (cb) {
  assert.equal(typeof cb, 'function', 'on-performance: cb should be type function')

  var PerformanceObserver = typeof window !== 'undefined' && window.PerformanceObserver
  if (!PerformanceObserver) return

  // Enable singleton.
  if (window._onperformance) {
    window._onperformance.push(cb)
    return stop
  }

  window._onperformance = [cb]
  var observer = new PerformanceObserver(parseEntries)
  setTimeout(function () {
    parseEntries(window.performance)
    observer.observe({ entryTypes: entryTypes })
  }, 0)

  return stop

  function stop () {
    window._onperformance.splice(window._onperformance.indexOf(cb), 1)
  }

  function parseEntries (list) {
    list.getEntries().forEach(function (entry) {
      scheduler.push(function () {
        clear(entry)
        window._onperformance.forEach(function (cb) {
          cb(entry)
        })
      })
    })
  }

  // Navigation, longtask and frame don't have a clear method (yet)
  // Resource timings can only be cleared in bulk
  // see: https://developer.mozilla.org/en-US/docs/Web/API/Performance/clearMeasures
  function clear (entry) {
    var type = entry.entryType
    if (type === 'measure') window.performance.clearMeasures(entry.name)
    else if (type === 'resource') window.performance.clearResourceTimings()
  }
}

},{"assert":77,"nanoscheduler":95}],101:[function(require,module,exports){
module.exports = plucker

function plucker(path, object) {
  return arguments.length >= 2
    ? pluck(path)(object)
    : pluck(path)
}

function pluck(path) {
  path = typeof path === 'string'
    ? String(path).trim().split('.')
    : path

  if (path.length < 2) {
    path = path[0]
    return pluckSingle
  } else {
    var l = path.length
    return pluckPath
  }

  function pluckSingle(object) {
    return object[path]
  }

  function pluckPath(object) {
    for (var i = 0; i < l; i++) {
      if (typeof object === 'undefined') break

      object = object[path[i]]
    }

    return object
  }
}

},{}],102:[function(require,module,exports){
module.exports = prettierBytes

function prettierBytes (num) {
  if (typeof num !== 'number' || isNaN(num)) {
    throw new TypeError('Expected a number, got ' + typeof num)
  }

  var neg = num < 0
  var units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']

  if (neg) {
    num = -num
  }

  if (num < 1) {
    return (neg ? '-' : '') + num + ' B'
  }

  var exponent = Math.min(Math.floor(Math.log(num) / Math.log(1000)), units.length - 1)
  num = Number(num / Math.pow(1000, exponent))
  var unit = units[exponent]

  if (num >= 10 || num % 1 === 0) {
    // Do not show decimals when the number is two-digit, or if the number has no
    // decimal component.
    return (neg ? '-' : '') + num.toFixed(0) + ' ' + unit
  } else {
    return (neg ? '-' : '') + num.toFixed(1) + ' ' + unit
  }
}

},{}],103:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],104:[function(require,module,exports){
'use strict'

/**
 * Remove a range of items from an array
 *
 * @function removeItems
 * @param {Array<*>} arr The target array
 * @param {number} startIdx The index to begin removing from (inclusive)
 * @param {number} removeCount How many items to remove
 */
module.exports = function removeItems (arr, startIdx, removeCount) {
  var i, length = arr.length

  if (startIdx >= length || removeCount === 0) {
    return
  }

  removeCount = (startIdx + removeCount > length ? length - startIdx : removeCount)

  var len = length - removeCount

  for (i = startIdx; i < len; ++i) {
    arr[i] = arr[i + removeCount]
  }

  arr.length = len
}

},{}],105:[function(require,module,exports){
module.exports = scrollToAnchor

function scrollToAnchor (anchor, options) {
  if (anchor) {
    try {
      var el = document.querySelector(anchor)
      if (el) el.scrollIntoView(options)
    } catch (e) {}
  }
}

},{}],106:[function(require,module,exports){
var fastSafeStringify = require('fast-safe-stringify')
var copy = require('clipboard-copy')

function tryStringify (obj) {
  try {
    return JSON.stringify(obj)
  } catch (e) {}
}

function stateCopy (obj) {
  var str = tryStringify(obj) || fastSafeStringify(obj)
  copy(str)
}

module.exports = stateCopy

},{"clipboard-copy":35,"fast-safe-stringify":70}],107:[function(require,module,exports){
/* eslint-disable node/no-deprecated-api */
var assert = require('assert')

module.exports = getAllRoutes

var transform = function (trie, previous) {
  var prev = previous || '/'
  var routes = {}
  var nodes = trie.nodes
  Object.keys(nodes).forEach(function (key) {
    var path = (prev === '/' ? prev : prev + '/') + (key === '$$' ? ':' + trie.name : key)
    var cb = nodes[key].cb
    if (cb !== undefined) {
      routes[path] = cb
    }
    if (Object.keys(nodes[key].nodes).length !== 0) {
      var obj = transform(nodes[key], path)
      Object.keys(obj).forEach(function (r) {
        routes[r] = obj[r]
      })
    }
  })
  return routes
}

// walk a wayfarer trie
// (obj, fn) -> null
function getAllRoutes (router) {
  assert.equal(typeof router, 'function', 'wayfarer.getAllRoutes: router should be an function')

  var trie = router._trie
  assert.equal(typeof trie, 'object', 'wayfarer.getAllRoutes: trie should be an object')

  var tree = trie.trie
  return transform(tree)
}

},{"assert":77}],108:[function(require,module,exports){
/* eslint-disable node/no-deprecated-api */
var assert = require('assert')
var trie = require('./trie')

module.exports = Wayfarer

// create a router
// str -> obj
function Wayfarer (dft) {
  if (!(this instanceof Wayfarer)) return new Wayfarer(dft)

  var _default = (dft || '').replace(/^\//, '')
  var _trie = trie()

  emit._trie = _trie
  emit.on = on
  emit.emit = emit
  emit.match = match
  emit._wayfarer = true

  return emit

  // define a route
  // (str, fn) -> obj
  function on (route, cb) {
    assert.equal(typeof route, 'string')
    assert.equal(typeof cb, 'function')

    route = route || '/'

    if (cb._wayfarer && cb._trie) {
      _trie.mount(route, cb._trie.trie)
    } else {
      var node = _trie.create(route)
      node.cb = cb
      node.route = route
    }

    return emit
  }

  // match and call a route
  // (str, obj?) -> null
  function emit (route) {
    var matched = match(route)

    var args = new Array(arguments.length)
    args[0] = matched.params
    for (var i = 1; i < args.length; i++) {
      args[i] = arguments[i]
    }

    return matched.cb.apply(matched.cb, args)
  }

  function match (route) {
    assert.notEqual(route, undefined, "'route' must be defined")

    var matched = _trie.match(route)
    if (matched && matched.cb) return new Route(matched)

    var dft = _trie.match(_default)
    if (dft && dft.cb) return new Route(dft)

    throw new Error("route '" + route + "' did not match")
  }

  function Route (matched) {
    this.cb = matched.cb
    this.route = matched.route
    this.params = matched.params
  }
}

},{"./trie":109,"assert":77}],109:[function(require,module,exports){
/* eslint-disable node/no-deprecated-api */
var assert = require('assert')

module.exports = Trie

// create a new trie
// null -> obj
function Trie () {
  if (!(this instanceof Trie)) return new Trie()
  this.trie = { nodes: {} }
}

// create a node on the trie at route
// and return a node
// str -> obj
Trie.prototype.create = function (route) {
  assert.equal(typeof route, 'string', 'route should be a string')
  // strip leading '/' and split routes
  var routes = route.replace(/^\//, '').split('/')

  function createNode (index, trie) {
    var thisRoute = (has(routes, index) && routes[index])
    if (thisRoute === false) return trie

    var node = null
    if (/^:|^\*/.test(thisRoute)) {
      // if node is a name match, set name and append to ':' node
      if (!has(trie.nodes, '$$')) {
        node = { nodes: {} }
        trie.nodes.$$ = node
      } else {
        node = trie.nodes.$$
      }

      if (thisRoute[0] === '*') {
        trie.wildcard = true
      }

      trie.name = thisRoute.replace(/^:|^\*/, '')
    } else if (!has(trie.nodes, thisRoute)) {
      node = { nodes: {} }
      trie.nodes[thisRoute] = node
    } else {
      node = trie.nodes[thisRoute]
    }

    // we must recurse deeper
    return createNode(index + 1, node)
  }

  return createNode(0, this.trie)
}

// match a route on the trie
// and return the node
// str -> obj
Trie.prototype.match = function (route) {
  assert.equal(typeof route, 'string', 'route should be a string')

  var routes = route.replace(/^\//, '').split('/')
  var params = {}

  function search (index, trie) {
    // either there's no match, or we're done searching
    if (trie === undefined) return undefined
    var thisRoute = routes[index]
    if (thisRoute === undefined) return trie

    if (has(trie.nodes, thisRoute)) {
      // match regular routes first
      return search(index + 1, trie.nodes[thisRoute])
    } else if (trie.name) {
      // match named routes
      try {
        params[trie.name] = decodeURIComponent(thisRoute)
      } catch (e) {
        return search(index, undefined)
      }
      return search(index + 1, trie.nodes.$$)
    } else if (trie.wildcard) {
      // match wildcards
      try {
        params.wildcard = decodeURIComponent(routes.slice(index).join('/'))
      } catch (e) {
        return search(index, undefined)
      }
      // return early, or else search may keep recursing through the wildcard
      return trie.nodes.$$
    } else {
      // no matches found
      return search(index + 1)
    }
  }

  var node = search(0, this.trie)

  if (!node) return undefined
  node = Object.assign({}, node)
  node.params = params
  return node
}

// mount a trie onto a node at route
// (str, obj) -> null
Trie.prototype.mount = function (route, trie) {
  assert.equal(typeof route, 'string', 'route should be a string')
  assert.equal(typeof trie, 'object', 'trie should be a object')

  var split = route.replace(/^\//, '').split('/')
  var node = null
  var key = null

  if (split.length === 1) {
    key = split[0]
    node = this.create(key)
  } else {
    var head = split.join('/')
    key = split[0]
    node = this.create(head)
  }

  Object.assign(node.nodes, trie.nodes)
  if (trie.name) node.name = trie.name

  // delegate properties from '/' to the new node
  // '/' cannot be reached once mounted
  if (node.nodes['']) {
    Object.keys(node.nodes['']).forEach(function (key) {
      if (key === 'nodes') return
      node[key] = node.nodes[''][key]
    })
    Object.assign(node.nodes, node.nodes[''].nodes)
    delete node.nodes[''].nodes
  }
}

function has (object, property) {
  return Object.prototype.hasOwnProperty.call(object, property)
}

},{"assert":77}]},{},[12]);
